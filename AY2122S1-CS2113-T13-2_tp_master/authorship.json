[{"path":"build.gradle","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"thaddyyz"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.6.0\u0027","lastModifiedDate":"2021-10-13"},{"lineNumber":14,"author":{"gitId":"thaddyyz"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.6.0\u0027","lastModifiedDate":"2021-10-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    mainClassName \u003d \"seedu.duke.Duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"checkstyle {","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.23\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"andrewtkh1"},"content":"    enableAssertions \u003d true","lastModifiedDate":"2021-10-12"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"andrewtkh1":1,"thaddyyz":2,"-":44}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# About us","lastModifiedDate":"2020-05-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"Display | Name | Github Profile | Portfolio ","lastModifiedDate":"2020-05-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"--------|:----:|:--------------:|:---------:","lastModifiedDate":"2020-05-24"},{"lineNumber":5,"author":{"gitId":"thaddyyz"},"content":"![](https://via.placeholder.com/100.png?text\u003dPhoto) | Yi Zheng | [Github](https://github.com/thaddyyz) | [Portfolio](docs/team/thaddyyz.md)","lastModifiedDate":"2021-09-30"},{"lineNumber":6,"author":{"gitId":"WaiKit-nus"},"content":"![](https://via.placeholder.com/100.png?text\u003dPhoto) | Lau Wai Kit | [Github](https://github.com/WaiKit-nus) | [Portfolio](docs/team/waikit-nus.md)","lastModifiedDate":"2021-09-30"},{"lineNumber":7,"author":{"gitId":"markuslyq"},"content":"![](https://via.placeholder.com/100.png?text\u003dPhoto) | Markus Lim | [Github](https://github.com/markuslyq) | [Portfolio](docs/team/markuslyq.md)","lastModifiedDate":"2021-09-30"},{"lineNumber":8,"author":{"gitId":"andrewtkh1"},"content":"![](https://via.placeholder.com/100.png?text\u003dPhoto) | Andrew Tan | [Github](https://github.com/andrewtkh1) | [Portfolio](docs/team/andrewtkh1.md)","lastModifiedDate":"2021-09-30"},{"lineNumber":9,"author":{"gitId":"mohamad-adam8991"},"content":"![](https://via.placeholder.com/100.png?text\u003dPhoto) | Mohamad Adam Bin Mohamad Yazid | [Github](https://github.com/mohamad-adam8991) | [Portfolio](docs/team/mohamad-adam8991.md)","lastModifiedDate":"2021-09-30"}],"authorContributionMap":{"markuslyq":1,"mohamad-adam8991":1,"andrewtkh1":1,"thaddyyz":1,"WaiKit-nus":1,"-":4}},{"path":"docs/AndrewsDG.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"andrewtkh1"},"content":"# Developer Guide","lastModifiedDate":"2021-10-16"},{"lineNumber":2,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":3,"author":{"gitId":"andrewtkh1"},"content":"## Acknowledgements","lastModifiedDate":"2021-10-16"},{"lineNumber":4,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":5,"author":{"gitId":"andrewtkh1"},"content":"{list here sources of all reused/adapted ideas, code, documentation, and third-party libraries -- include links to the original source as well}","lastModifiedDate":"2021-10-16"},{"lineNumber":6,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":7,"author":{"gitId":"andrewtkh1"},"content":"## Design \u0026 implementation","lastModifiedDate":"2021-10-16"},{"lineNumber":8,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":9,"author":{"gitId":"andrewtkh1"},"content":"### Parser","lastModifiedDate":"2021-10-16"},{"lineNumber":10,"author":{"gitId":"andrewtkh1"},"content":"The purpose of the parser is to the command that the user has typed in and return its respective command","lastModifiedDate":"2021-10-17"},{"lineNumber":11,"author":{"gitId":"andrewtkh1"},"content":"object. The class diagram below is a brief overview of how the Parser is related to other classes.","lastModifiedDate":"2021-10-17"},{"lineNumber":12,"author":{"gitId":"andrewtkh1"},"content":"\u003cbr\u003e![Class Diagram](https://raw.githubusercontent.com/AY2122S1-CS2113-T13-2/tp/master/UMLdiagrams/ParserDiagrams/ParserClassDiag-Page-1.jpg)","lastModifiedDate":"2021-10-17"},{"lineNumber":13,"author":{"gitId":"andrewtkh1"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2021-10-17"},{"lineNumber":14,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":15,"author":{"gitId":"andrewtkh1"},"content":":information_source: **Note:** Details of each specific command class \u0026 Duke have been omitted from this diagram.","lastModifiedDate":"2021-10-17"},{"lineNumber":16,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":17,"author":{"gitId":"andrewtkh1"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-10-17"},{"lineNumber":18,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":19,"author":{"gitId":"andrewtkh1"},"content":"Below is a step by step example on how the parser is used when a user keys in an input.","lastModifiedDate":"2021-10-16"},{"lineNumber":20,"author":{"gitId":"andrewtkh1"},"content":"Assuming the input is not going to be **null** or **blank**,","lastModifiedDate":"2021-10-16"},{"lineNumber":21,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":22,"author":{"gitId":"andrewtkh1"},"content":"Step 1)\u003cbr\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":23,"author":{"gitId":"andrewtkh1"},"content":"Lets assume the input passed in is `delete 1/2`. The method `getCommand()` would then split the user\u0027s","lastModifiedDate":"2021-10-16"},{"lineNumber":24,"author":{"gitId":"andrewtkh1"},"content":"input into an array of strings along the spaces and store them in the array `listOfInputs`. After which,","lastModifiedDate":"2021-10-16"},{"lineNumber":25,"author":{"gitId":"andrewtkh1"},"content":"it will get the user\u0027s command from the 0th array element and store it in another variable called `commandInString`.","lastModifiedDate":"2021-10-16"},{"lineNumber":26,"author":{"gitId":"andrewtkh1"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-10-17"},{"lineNumber":27,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":28,"author":{"gitId":"andrewtkh1"},"content":"Step 2)\u003cbr\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":29,"author":{"gitId":"andrewtkh1"},"content":"The method will then parse `commandInString` through the switch cases and try to match it with","lastModifiedDate":"2021-10-16"},{"lineNumber":30,"author":{"gitId":"andrewtkh1"},"content":"one of the known commands. If it is able to match it with a command, the method will instantiate","lastModifiedDate":"2021-10-16"},{"lineNumber":31,"author":{"gitId":"andrewtkh1"},"content":"it\u0027s respective command object and return it. Else it would return an `unnknownCommandClass` instead.","lastModifiedDate":"2021-10-16"},{"lineNumber":32,"author":{"gitId":"andrewtkh1"},"content":"Below is a sequence diagram modeling how the function works.","lastModifiedDate":"2021-10-16"},{"lineNumber":33,"author":{"gitId":"andrewtkh1"},"content":"\u003cbr\u003e ![Sqeuence Diagram of Parser](https://raw.githubusercontent.com/AY2122S1-CS2113-T13-2/tp/master/UMLdiagrams/ParserDiagrams/Parser%20Sequence%20Diag.jpg)","lastModifiedDate":"2021-10-17"},{"lineNumber":34,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":35,"author":{"gitId":"andrewtkh1"},"content":"#### Alternate implementation","lastModifiedDate":"2021-10-17"},{"lineNumber":36,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":37,"author":{"gitId":"andrewtkh1"},"content":"Initially we thought of having each command\u0027s respective functions to be executed inside the switch statement.","lastModifiedDate":"2021-10-17"},{"lineNumber":38,"author":{"gitId":"andrewtkh1"},"content":"A rough example of the `delete` and `add` function can be seen below.","lastModifiedDate":"2021-10-17"},{"lineNumber":39,"author":{"gitId":"andrewtkh1"},"content":"```","lastModifiedDate":"2021-10-17"},{"lineNumber":40,"author":{"gitId":"andrewtkh1"},"content":"case \"delete\":","lastModifiedDate":"2021-10-17"},{"lineNumber":41,"author":{"gitId":"andrewtkh1"},"content":"    functionToDeleteTask(input);","lastModifiedDate":"2021-10-17"},{"lineNumber":42,"author":{"gitId":"andrewtkh1"},"content":"    break;","lastModifiedDate":"2021-10-17"},{"lineNumber":43,"author":{"gitId":"andrewtkh1"},"content":"case \"add\":","lastModifiedDate":"2021-10-17"},{"lineNumber":44,"author":{"gitId":"andrewtkh1"},"content":"    functionToAddTask(input);","lastModifiedDate":"2021-10-17"},{"lineNumber":45,"author":{"gitId":"andrewtkh1"},"content":"    break;","lastModifiedDate":"2021-10-17"},{"lineNumber":46,"author":{"gitId":"andrewtkh1"},"content":"```","lastModifiedDate":"2021-10-17"},{"lineNumber":47,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":48,"author":{"gitId":"andrewtkh1"},"content":"The upside of doing would be that there is less code overall.","lastModifiedDate":"2021-10-17"},{"lineNumber":49,"author":{"gitId":"andrewtkh1"},"content":"However, doing so would cause our code to have a higher amount of coupling and would also cause the code to be ","lastModifiedDate":"2021-10-17"},{"lineNumber":50,"author":{"gitId":"andrewtkh1"},"content":"messier and therefore harder to read. By having a command class for each respective command, this allows us","lastModifiedDate":"2021-10-17"},{"lineNumber":51,"author":{"gitId":"andrewtkh1"},"content":"to segregate all the necessary functions for each command in their own respective class, therefore making","lastModifiedDate":"2021-10-17"},{"lineNumber":52,"author":{"gitId":"andrewtkh1"},"content":"testing easier.","lastModifiedDate":"2021-10-17"},{"lineNumber":53,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":54,"author":{"gitId":"andrewtkh1"},"content":"## Product scope","lastModifiedDate":"2021-10-16"},{"lineNumber":55,"author":{"gitId":"andrewtkh1"},"content":"### Target user profile","lastModifiedDate":"2021-10-16"},{"lineNumber":56,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":57,"author":{"gitId":"andrewtkh1"},"content":"* User has good typing skills.","lastModifiedDate":"2021-10-16"},{"lineNumber":58,"author":{"gitId":"andrewtkh1"},"content":"* Is comfortable without GUI.","lastModifiedDate":"2021-10-16"},{"lineNumber":59,"author":{"gitId":"andrewtkh1"},"content":"* Tends to make large orders of food.","lastModifiedDate":"2021-10-16"},{"lineNumber":60,"author":{"gitId":"andrewtkh1"},"content":"* Wishes to track multiple different orders of food.","lastModifiedDate":"2021-10-16"},{"lineNumber":61,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":62,"author":{"gitId":"andrewtkh1"},"content":"### Value proposition","lastModifiedDate":"2021-10-16"},{"lineNumber":63,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":64,"author":{"gitId":"andrewtkh1"},"content":"* Large orders can be confusing to keep track, especially if orders are to different stores.","lastModifiedDate":"2021-10-16"},{"lineNumber":65,"author":{"gitId":"andrewtkh1"},"content":"* Allows users to keep track of bulk orders easily.","lastModifiedDate":"2021-10-16"},{"lineNumber":66,"author":{"gitId":"andrewtkh1"},"content":"* Easily keep track of costs.","lastModifiedDate":"2021-10-16"},{"lineNumber":67,"author":{"gitId":"andrewtkh1"},"content":"* Ensures that no orders are left out.","lastModifiedDate":"2021-10-16"},{"lineNumber":68,"author":{"gitId":"andrewtkh1"},"content":"* Knows which order belongs to which store.","lastModifiedDate":"2021-10-16"},{"lineNumber":69,"author":{"gitId":"andrewtkh1"},"content":"* Allow flexibility and control over what description you would like of your friends.  ","lastModifiedDate":"2021-10-16"},{"lineNumber":70,"author":{"gitId":"andrewtkh1"},"content":"* Users are able to delete/edit entries quickly.","lastModifiedDate":"2021-10-16"},{"lineNumber":71,"author":{"gitId":"andrewtkh1"},"content":"* Comments on the food can also be described by you (e.g. No meat for BanMian).","lastModifiedDate":"2021-10-16"},{"lineNumber":72,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":73,"author":{"gitId":"andrewtkh1"},"content":"## User Stories","lastModifiedDate":"2021-10-16"},{"lineNumber":74,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":75,"author":{"gitId":"andrewtkh1"},"content":"|Version| As a ... | I want to ... | So that I can ...|","lastModifiedDate":"2021-10-16"},{"lineNumber":76,"author":{"gitId":"andrewtkh1"},"content":"|--------|----------|---------------|------------------|","lastModifiedDate":"2021-10-16"},{"lineNumber":77,"author":{"gitId":"andrewtkh1"},"content":"|v1.0|new user|see usage instructions|refer to them when I forget how to use the application|","lastModifiedDate":"2021-10-16"},{"lineNumber":78,"author":{"gitId":"andrewtkh1"},"content":"|v2.0|user|find a to-do item by name|locate a to-do without having to go through the entire list|","lastModifiedDate":"2021-10-16"},{"lineNumber":79,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":80,"author":{"gitId":"andrewtkh1"},"content":"## Non-Functional Requirements","lastModifiedDate":"2021-10-16"},{"lineNumber":81,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":82,"author":{"gitId":"andrewtkh1"},"content":"{Give non-functional requirements}","lastModifiedDate":"2021-10-16"},{"lineNumber":83,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":84,"author":{"gitId":"andrewtkh1"},"content":"## Glossary","lastModifiedDate":"2021-10-16"},{"lineNumber":85,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":86,"author":{"gitId":"andrewtkh1"},"content":"* *glossary item* - Definition","lastModifiedDate":"2021-10-16"},{"lineNumber":87,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":88,"author":{"gitId":"andrewtkh1"},"content":"## Instructions for manual testing","lastModifiedDate":"2021-10-16"},{"lineNumber":89,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":90,"author":{"gitId":"andrewtkh1"},"content":"{Give instructions on how to do a manual product testing e.g., how to load sample data to be used for testing}","lastModifiedDate":"2021-10-16"}],"authorContributionMap":{"andrewtkh1":90}},{"path":"docs/DeveloperGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# Developer Guide","lastModifiedDate":"2020-05-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"## Acknowledgements","lastModifiedDate":"2020-05-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":"{list here sources of all reused/adapted ideas, code, documentation, and third-party libraries -- include links to the original source as well}","lastModifiedDate":"2020-05-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"## Design \u0026 implementation","lastModifiedDate":"2020-05-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"{Describe the design and implementation of the product. Use UML diagrams and short code snippets where applicable.}","lastModifiedDate":"2020-05-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":11,"author":{"gitId":"andrewtkh1"},"content":"### Parser","lastModifiedDate":"2021-10-17"},{"lineNumber":12,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":13,"author":{"gitId":"andrewtkh1"},"content":"The purpose of the parser is to the command that the user has typed in and return its respective command","lastModifiedDate":"2021-10-17"},{"lineNumber":14,"author":{"gitId":"andrewtkh1"},"content":"object. The class diagram below is a brief overview of how the Parser is related to other classes.","lastModifiedDate":"2021-10-17"},{"lineNumber":15,"author":{"gitId":"andrewtkh1"},"content":"\u003cbr\u003e![Class Diagram](https://raw.githubusercontent.com/AY2122S1-CS2113-T13-2/tp/master/UMLdiagrams/ParserDiagrams/ParserClassDiag-Page-1.jpg)","lastModifiedDate":"2021-10-17"},{"lineNumber":16,"author":{"gitId":"andrewtkh1"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2021-10-17"},{"lineNumber":17,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":18,"author":{"gitId":"andrewtkh1"},"content":":information_source: **Note:** Details of each specific command class \u0026 Duke have been omitted from this diagram.","lastModifiedDate":"2021-10-17"},{"lineNumber":19,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":20,"author":{"gitId":"andrewtkh1"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-10-17"},{"lineNumber":21,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":22,"author":{"gitId":"andrewtkh1"},"content":"Below is a step by step example on how the parser is used when a user keys in an input.","lastModifiedDate":"2021-10-17"},{"lineNumber":23,"author":{"gitId":"andrewtkh1"},"content":"Assuming the input is not going to be **null** or **blank**,","lastModifiedDate":"2021-10-17"},{"lineNumber":24,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":25,"author":{"gitId":"andrewtkh1"},"content":"Step 1)\u003cbr\u003e","lastModifiedDate":"2021-10-17"},{"lineNumber":26,"author":{"gitId":"andrewtkh1"},"content":"Lets assume the input passed in is `delete 1/2`. The method `getCommand()` would then split the user\u0027s","lastModifiedDate":"2021-10-17"},{"lineNumber":27,"author":{"gitId":"andrewtkh1"},"content":"input into an array of strings along the spaces and store them in the array `listOfInputs`. After which,","lastModifiedDate":"2021-10-17"},{"lineNumber":28,"author":{"gitId":"andrewtkh1"},"content":"it will get the user\u0027s command from the 0th array element and store it in another variable called `commandInString`.","lastModifiedDate":"2021-10-17"},{"lineNumber":29,"author":{"gitId":"andrewtkh1"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-10-17"},{"lineNumber":30,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":31,"author":{"gitId":"andrewtkh1"},"content":"Step 2)\u003cbr\u003e","lastModifiedDate":"2021-10-17"},{"lineNumber":32,"author":{"gitId":"andrewtkh1"},"content":"The method will then parse `commandInString` through the switch cases and try to match it with","lastModifiedDate":"2021-10-17"},{"lineNumber":33,"author":{"gitId":"andrewtkh1"},"content":"one of the known commands. If it is able to match it with a command, the method will instantiate","lastModifiedDate":"2021-10-17"},{"lineNumber":34,"author":{"gitId":"andrewtkh1"},"content":"it\u0027s respective command object and return it. Else it would return an `unnknownCommandClass` instead.","lastModifiedDate":"2021-10-17"},{"lineNumber":35,"author":{"gitId":"andrewtkh1"},"content":"Below is a sequence diagram modeling how the function works.","lastModifiedDate":"2021-10-17"},{"lineNumber":36,"author":{"gitId":"andrewtkh1"},"content":"\u003cbr\u003e ![Sqeuence Diagram of Parser](https://raw.githubusercontent.com/AY2122S1-CS2113-T13-2/tp/master/UMLdiagrams/ParserDiagrams/Parser%20Sequence%20Diag.jpg)","lastModifiedDate":"2021-10-17"},{"lineNumber":37,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":38,"author":{"gitId":"andrewtkh1"},"content":"#### Alternate implementation","lastModifiedDate":"2021-10-17"},{"lineNumber":39,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":40,"author":{"gitId":"andrewtkh1"},"content":"Initially we thought of having each command\u0027s respective functions to be executed inside the switch statement.","lastModifiedDate":"2021-10-17"},{"lineNumber":41,"author":{"gitId":"andrewtkh1"},"content":"A rough example of the `delete` and `add` function can be seen below.","lastModifiedDate":"2021-10-17"},{"lineNumber":42,"author":{"gitId":"andrewtkh1"},"content":"```","lastModifiedDate":"2021-10-17"},{"lineNumber":43,"author":{"gitId":"andrewtkh1"},"content":"case \"delete\":","lastModifiedDate":"2021-10-17"},{"lineNumber":44,"author":{"gitId":"andrewtkh1"},"content":"    functionToDeleteTask(input);","lastModifiedDate":"2021-10-17"},{"lineNumber":45,"author":{"gitId":"andrewtkh1"},"content":"    break;","lastModifiedDate":"2021-10-17"},{"lineNumber":46,"author":{"gitId":"andrewtkh1"},"content":"case \"add\":","lastModifiedDate":"2021-10-17"},{"lineNumber":47,"author":{"gitId":"andrewtkh1"},"content":"    functionToAddTask(input);","lastModifiedDate":"2021-10-17"},{"lineNumber":48,"author":{"gitId":"andrewtkh1"},"content":"    break;","lastModifiedDate":"2021-10-17"},{"lineNumber":49,"author":{"gitId":"andrewtkh1"},"content":"```","lastModifiedDate":"2021-10-17"},{"lineNumber":50,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":51,"author":{"gitId":"andrewtkh1"},"content":"The upside of doing would be that there is less code overall.","lastModifiedDate":"2021-10-17"},{"lineNumber":52,"author":{"gitId":"andrewtkh1"},"content":"However, doing so would cause our code to have a higher amount of coupling and would also cause the code to be","lastModifiedDate":"2021-10-17"},{"lineNumber":53,"author":{"gitId":"andrewtkh1"},"content":"messier and therefore harder to read. By having a command class for each respective command, this allows us","lastModifiedDate":"2021-10-17"},{"lineNumber":54,"author":{"gitId":"andrewtkh1"},"content":"to segregate all the necessary functions for each command in their own respective class, therefore making","lastModifiedDate":"2021-10-17"},{"lineNumber":55,"author":{"gitId":"andrewtkh1"},"content":"testing easier.","lastModifiedDate":"2021-10-17"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"## Product scope","lastModifiedDate":"2020-05-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"### Target user profile","lastModifiedDate":"2020-05-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"{Describe the target user profile}","lastModifiedDate":"2020-05-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"### Value proposition","lastModifiedDate":"2020-05-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"{Describe the value proposition: what problem does it solve?}","lastModifiedDate":"2020-05-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"## User Stories","lastModifiedDate":"2020-05-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"|Version| As a ... | I want to ... | So that I can ...|","lastModifiedDate":"2020-05-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"|--------|----------|---------------|------------------|","lastModifiedDate":"2020-05-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"|v1.0|new user|see usage instructions|refer to them when I forget how to use the application|","lastModifiedDate":"2020-05-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"|v2.0|user|find a to-do item by name|locate a to-do without having to go through the entire list|","lastModifiedDate":"2020-05-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"## Non-Functional Requirements","lastModifiedDate":"2020-05-24"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"{Give non-functional requirements}","lastModifiedDate":"2020-05-24"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":77,"author":{"gitId":"-"},"content":"## Glossary","lastModifiedDate":"2020-05-24"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":79,"author":{"gitId":"-"},"content":"* *glossary item* - Definition","lastModifiedDate":"2020-05-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"## Instructions for manual testing","lastModifiedDate":"2020-05-24"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":83,"author":{"gitId":"-"},"content":"{Give instructions on how to do a manual product testing e.g., how to load sample data to be used for testing}","lastModifiedDate":"2020-05-24"}],"authorContributionMap":{"andrewtkh1":45,"-":38}},{"path":"src/main/java/seedu/duke/Duke.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.duke;","lastModifiedDate":"2020-05-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":3,"author":{"gitId":"andrewtkh1"},"content":"import seedu.duke.command.ByeCommand;","lastModifiedDate":"2021-10-12"},{"lineNumber":4,"author":{"gitId":"andrewtkh1"},"content":"import seedu.duke.command.Command;","lastModifiedDate":"2021-10-12"},{"lineNumber":5,"author":{"gitId":"andrewtkh1"},"content":"import seedu.duke.exceptions.LotsException;","lastModifiedDate":"2021-10-12"},{"lineNumber":6,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":7,"author":{"gitId":"andrewtkh1"},"content":"import java.util.logging.Level;","lastModifiedDate":"2021-10-12"},{"lineNumber":8,"author":{"gitId":"andrewtkh1"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-10-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"     * Main entry-point for the java.duke.Duke application.","lastModifiedDate":"2020-05-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-24"},{"lineNumber":14,"author":{"gitId":"andrewtkh1"},"content":"    public static Logger log \u003d Logger.getLogger(\"LOTS\");","lastModifiedDate":"2021-10-11"},{"lineNumber":15,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2019-07-29"},{"lineNumber":17,"author":{"gitId":"andrewtkh1"},"content":"        Ui.printWelcome();","lastModifiedDate":"2021-10-08"},{"lineNumber":18,"author":{"gitId":"andrewtkh1"},"content":"        runDuke();","lastModifiedDate":"2021-10-11"},{"lineNumber":19,"author":{"gitId":"andrewtkh1"},"content":"        Ui.printGoodbye();","lastModifiedDate":"2021-10-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":22,"author":{"gitId":"andrewtkh1"},"content":"    /**","lastModifiedDate":"2021-10-12"},{"lineNumber":23,"author":{"gitId":"andrewtkh1"},"content":"     * The main function that duke runs on.","lastModifiedDate":"2021-10-12"},{"lineNumber":24,"author":{"gitId":"andrewtkh1"},"content":"     */","lastModifiedDate":"2021-10-12"},{"lineNumber":25,"author":{"gitId":"andrewtkh1"},"content":"    private static void runDuke() {","lastModifiedDate":"2021-10-11"},{"lineNumber":26,"author":{"gitId":"andrewtkh1"},"content":"        Command currentCommand;","lastModifiedDate":"2021-10-11"},{"lineNumber":27,"author":{"gitId":"andrewtkh1"},"content":"        PeopleManager manager \u003d new PeopleManager();","lastModifiedDate":"2021-10-11"},{"lineNumber":28,"author":{"gitId":"andrewtkh1"},"content":"        boolean isEnd \u003d false;","lastModifiedDate":"2021-10-11"},{"lineNumber":29,"author":{"gitId":"andrewtkh1"},"content":"        while (!isEnd) {","lastModifiedDate":"2021-10-11"},{"lineNumber":30,"author":{"gitId":"andrewtkh1"},"content":"            try {","lastModifiedDate":"2021-10-11"},{"lineNumber":31,"author":{"gitId":"andrewtkh1"},"content":"                String userInput \u003d Ui.readInput();","lastModifiedDate":"2021-10-11"},{"lineNumber":32,"author":{"gitId":"andrewtkh1"},"content":"                currentCommand \u003d Parser.getCommand(userInput);","lastModifiedDate":"2021-10-11"},{"lineNumber":33,"author":{"gitId":"andrewtkh1"},"content":"                assert currentCommand !\u003d null : \"Command returned cannot be null!\";","lastModifiedDate":"2021-10-12"},{"lineNumber":34,"author":{"gitId":"andrewtkh1"},"content":"                currentCommand.setData(manager);","lastModifiedDate":"2021-10-11"},{"lineNumber":35,"author":{"gitId":"andrewtkh1"},"content":"                currentCommand.execute();","lastModifiedDate":"2021-10-11"},{"lineNumber":36,"author":{"gitId":"andrewtkh1"},"content":"                if (currentCommand instanceof ByeCommand) {","lastModifiedDate":"2021-10-11"},{"lineNumber":37,"author":{"gitId":"andrewtkh1"},"content":"                    isEnd \u003d true;","lastModifiedDate":"2021-10-11"},{"lineNumber":38,"author":{"gitId":"andrewtkh1"},"content":"                }","lastModifiedDate":"2021-10-11"},{"lineNumber":39,"author":{"gitId":"andrewtkh1"},"content":"            } catch (LotsException e) {","lastModifiedDate":"2021-10-11"},{"lineNumber":40,"author":{"gitId":"andrewtkh1"},"content":"                Ui.printWithBorder(e.getMessage());","lastModifiedDate":"2021-10-11"},{"lineNumber":41,"author":{"gitId":"andrewtkh1"},"content":"            } catch (Exception x) {","lastModifiedDate":"2021-10-11"},{"lineNumber":42,"author":{"gitId":"andrewtkh1"},"content":"                Ui.printWithBorder(\"Oops! Unknown error. Please try again.\");","lastModifiedDate":"2021-10-11"},{"lineNumber":43,"author":{"gitId":"andrewtkh1"},"content":"                log.log(Level.SEVERE, x.getMessage());","lastModifiedDate":"2021-10-12"},{"lineNumber":44,"author":{"gitId":"andrewtkh1"},"content":"                //x.printStackTrace();","lastModifiedDate":"2021-10-12"},{"lineNumber":45,"author":{"gitId":"andrewtkh1"},"content":"            }","lastModifiedDate":"2021-10-11"},{"lineNumber":46,"author":{"gitId":"andrewtkh1"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":48,"author":{"gitId":"thaddyyz"},"content":"}","lastModifiedDate":"2021-10-04"}],"authorContributionMap":{"andrewtkh1":36,"thaddyyz":1,"-":11}},{"path":"src/main/java/seedu/duke/Menu.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"thaddyyz"},"content":"package seedu.duke;","lastModifiedDate":"2021-09-30"},{"lineNumber":2,"author":{"gitId":"thaddyyz"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":3,"author":{"gitId":"andrewtkh1"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-10"},{"lineNumber":4,"author":{"gitId":"andrewtkh1"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-10-10"},{"lineNumber":5,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":6,"author":{"gitId":"andrewtkh1"},"content":"public class Menu {","lastModifiedDate":"2021-10-10"},{"lineNumber":7,"author":{"gitId":"thaddyyz"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":8,"author":{"gitId":"andrewtkh1"},"content":"    private static String[] FOODS \u003d {\"Ban Mian\", \"Chicken Rice\", \"Fried Prawn Noodles (Hokkien Mee)\",","lastModifiedDate":"2021-10-10"},{"lineNumber":9,"author":{"gitId":"andrewtkh1"},"content":"                                     \"Minced MeatNoodles(Ba Chor Mee)\", \"Fried Carrot Cake\",","lastModifiedDate":"2021-10-10"},{"lineNumber":10,"author":{"gitId":"andrewtkh1"},"content":"                                     \"Fried Kway Teow (Char Kway Teow)\",","lastModifiedDate":"2021-10-10"},{"lineNumber":11,"author":{"gitId":"thaddyyz"},"content":"                                     \"Pork Rib Soup (Bak Kut Teh)\", \"Nasi Lemak\"};","lastModifiedDate":"2021-09-30"},{"lineNumber":12,"author":{"gitId":"andrewtkh1"},"content":"    private static final Double[] PRICES \u003d {3.0, 3.0, 3.5, 3.0, 3.0, 3.0, 5.0, 3.6};","lastModifiedDate":"2021-10-10"},{"lineNumber":13,"author":{"gitId":"thaddyyz"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":14,"author":{"gitId":"andrewtkh1"},"content":"    public static final int TOTAL_MENU_ITEMS \u003d PRICES.length;","lastModifiedDate":"2021-10-10"},{"lineNumber":15,"author":{"gitId":"andrewtkh1"},"content":"    public static final ArrayList\u003cString\u003e FOODLIST \u003d new ArrayList\u003c\u003e(Arrays.asList(FOODS));","lastModifiedDate":"2021-10-10"},{"lineNumber":16,"author":{"gitId":"andrewtkh1"},"content":"    public static final ArrayList\u003cDouble\u003e PRICELIST \u003d new ArrayList\u003c\u003e(Arrays.asList(PRICES));","lastModifiedDate":"2021-10-10"},{"lineNumber":17,"author":{"gitId":"thaddyyz"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":18,"author":{"gitId":"thaddyyz"},"content":"}","lastModifiedDate":"2021-09-30"}],"authorContributionMap":{"andrewtkh1":10,"thaddyyz":7,"WaiKit-nus":1}},{"path":"src/main/java/seedu/duke/Parser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"andrewtkh1"},"content":"package seedu.duke;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":3,"author":{"gitId":"andrewtkh1"},"content":"import seedu.duke.command.AddCommand;","lastModifiedDate":"2021-10-12"},{"lineNumber":4,"author":{"gitId":"andrewtkh1"},"content":"import seedu.duke.command.ByeCommand;","lastModifiedDate":"2021-10-12"},{"lineNumber":5,"author":{"gitId":"andrewtkh1"},"content":"import seedu.duke.command.Command;","lastModifiedDate":"2021-10-12"},{"lineNumber":6,"author":{"gitId":"andrewtkh1"},"content":"import seedu.duke.command.DeleteCommand;","lastModifiedDate":"2021-10-12"},{"lineNumber":7,"author":{"gitId":"andrewtkh1"},"content":"import seedu.duke.command.MenuCommand;","lastModifiedDate":"2021-10-12"},{"lineNumber":8,"author":{"gitId":"andrewtkh1"},"content":"import seedu.duke.command.OrdersCommand;","lastModifiedDate":"2021-10-12"},{"lineNumber":9,"author":{"gitId":"andrewtkh1"},"content":"import seedu.duke.command.UnknownCommand;","lastModifiedDate":"2021-10-12"},{"lineNumber":10,"author":{"gitId":"andrewtkh1"},"content":"import seedu.duke.exceptions.LotsException;","lastModifiedDate":"2021-10-12"},{"lineNumber":11,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":12,"author":{"gitId":"andrewtkh1"},"content":"public class Parser {","lastModifiedDate":"2021-10-04"},{"lineNumber":13,"author":{"gitId":"andrewtkh1"},"content":"    /**","lastModifiedDate":"2021-10-04"},{"lineNumber":14,"author":{"gitId":"andrewtkh1"},"content":"     * Returns a Command object based on the user\u0027s input","lastModifiedDate":"2021-10-05"},{"lineNumber":15,"author":{"gitId":"andrewtkh1"},"content":"     * string, else unknown command Type.","lastModifiedDate":"2021-10-05"},{"lineNumber":16,"author":{"gitId":"andrewtkh1"},"content":"     *","lastModifiedDate":"2021-10-04"},{"lineNumber":17,"author":{"gitId":"andrewtkh1"},"content":"     * @param input The user\u0027s input in String.","lastModifiedDate":"2021-10-04"},{"lineNumber":18,"author":{"gitId":"andrewtkh1"},"content":"     * @return The respective Command type.","lastModifiedDate":"2021-10-05"},{"lineNumber":19,"author":{"gitId":"andrewtkh1"},"content":"     */","lastModifiedDate":"2021-10-04"},{"lineNumber":20,"author":{"gitId":"andrewtkh1"},"content":"    public static Command getCommand(String input) throws LotsException {","lastModifiedDate":"2021-10-11"},{"lineNumber":21,"author":{"gitId":"andrewtkh1"},"content":"        assert input !\u003d null : \"Input to getCommand Cannot be NULL!\";","lastModifiedDate":"2021-10-10"},{"lineNumber":22,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":23,"author":{"gitId":"andrewtkh1"},"content":"        if (input.isBlank() || input.isEmpty()) {","lastModifiedDate":"2021-10-04"},{"lineNumber":24,"author":{"gitId":"andrewtkh1"},"content":"            return new UnknownCommand();","lastModifiedDate":"2021-10-05"},{"lineNumber":25,"author":{"gitId":"andrewtkh1"},"content":"        }","lastModifiedDate":"2021-10-04"},{"lineNumber":26,"author":{"gitId":"andrewtkh1"},"content":"        String[] listOfInputs \u003d input.split(\" \");","lastModifiedDate":"2021-10-04"},{"lineNumber":27,"author":{"gitId":"andrewtkh1"},"content":"        String commandInString \u003d listOfInputs[0].toLowerCase();","lastModifiedDate":"2021-10-05"},{"lineNumber":28,"author":{"gitId":"andrewtkh1"},"content":"        ","lastModifiedDate":"2021-10-05"},{"lineNumber":29,"author":{"gitId":"andrewtkh1"},"content":"        switch (commandInString) {","lastModifiedDate":"2021-10-05"},{"lineNumber":30,"author":{"gitId":"andrewtkh1"},"content":"        case (AddCommand.COMMAND_WORD):","lastModifiedDate":"2021-10-10"},{"lineNumber":31,"author":{"gitId":"andrewtkh1"},"content":"            return new AddCommand(input);","lastModifiedDate":"2021-10-10"},{"lineNumber":32,"author":{"gitId":"markuslyq"},"content":"        case (DeleteCommand.COMMAND_WORD):","lastModifiedDate":"2021-10-08"},{"lineNumber":33,"author":{"gitId":"mohamad-adam8991"},"content":"            return new DeleteCommand(input);","lastModifiedDate":"2021-10-08"},{"lineNumber":34,"author":{"gitId":"mohamad-adam8991"},"content":"        case (OrdersCommand.COMMAND_WORD):","lastModifiedDate":"2021-10-08"},{"lineNumber":35,"author":{"gitId":"mohamad-adam8991"},"content":"            return new OrdersCommand(input);","lastModifiedDate":"2021-10-12"},{"lineNumber":36,"author":{"gitId":"andrewtkh1"},"content":"        case (MenuCommand.COMMAND_WORD):","lastModifiedDate":"2021-10-10"},{"lineNumber":37,"author":{"gitId":"andrewtkh1"},"content":"            return new MenuCommand();","lastModifiedDate":"2021-10-10"},{"lineNumber":38,"author":{"gitId":"mohamad-adam8991"},"content":"        case (ByeCommand.COMMAND_WORD):","lastModifiedDate":"2021-10-11"},{"lineNumber":39,"author":{"gitId":"mohamad-adam8991"},"content":"            return new ByeCommand();","lastModifiedDate":"2021-10-11"},{"lineNumber":40,"author":{"gitId":"andrewtkh1"},"content":"        default:","lastModifiedDate":"2021-10-05"},{"lineNumber":41,"author":{"gitId":"andrewtkh1"},"content":"            return new UnknownCommand();","lastModifiedDate":"2021-10-05"},{"lineNumber":42,"author":{"gitId":"andrewtkh1"},"content":"        }","lastModifiedDate":"2021-10-05"},{"lineNumber":43,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-10-04"},{"lineNumber":44,"author":{"gitId":"andrewtkh1"},"content":"}","lastModifiedDate":"2021-10-04"}],"authorContributionMap":{"markuslyq":1,"mohamad-adam8991":5,"andrewtkh1":38}},{"path":"src/main/java/seedu/duke/PeopleManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"WaiKit-nus"},"content":"package seedu.duke;","lastModifiedDate":"2021-10-06"},{"lineNumber":2,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":3,"author":{"gitId":"andrewtkh1"},"content":"import seedu.duke.exceptions.LotsException;","lastModifiedDate":"2021-10-12"},{"lineNumber":4,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":5,"author":{"gitId":"WaiKit-nus"},"content":"import java.util.LinkedList;","lastModifiedDate":"2021-10-06"},{"lineNumber":6,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":7,"author":{"gitId":"WaiKit-nus"},"content":"public class PeopleManager {","lastModifiedDate":"2021-10-06"},{"lineNumber":8,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":9,"author":{"gitId":"andrewtkh1"},"content":"    private static LinkedList\u003cPerson\u003e listOfPeople \u003d new LinkedList\u003cPerson\u003e();","lastModifiedDate":"2021-10-12"},{"lineNumber":10,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":11,"author":{"gitId":"WaiKit-nus"},"content":"    public PeopleManager() {","lastModifiedDate":"2021-10-06"},{"lineNumber":12,"author":{"gitId":"WaiKit-nus"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":13,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":14,"author":{"gitId":"markuslyq"},"content":"    /**","lastModifiedDate":"2021-10-11"},{"lineNumber":15,"author":{"gitId":"markuslyq"},"content":"     * Returns the person object given its index.","lastModifiedDate":"2021-10-11"},{"lineNumber":16,"author":{"gitId":"markuslyq"},"content":"     *","lastModifiedDate":"2021-10-11"},{"lineNumber":17,"author":{"gitId":"markuslyq"},"content":"     * @param personIndex The index of the person to retrieve.","lastModifiedDate":"2021-10-11"},{"lineNumber":18,"author":{"gitId":"markuslyq"},"content":"     * @return Returns a Person object of a particular index.","lastModifiedDate":"2021-10-11"},{"lineNumber":19,"author":{"gitId":"markuslyq"},"content":"     */","lastModifiedDate":"2021-10-11"},{"lineNumber":20,"author":{"gitId":"markuslyq"},"content":"    public Person getPerson(int personIndex) {","lastModifiedDate":"2021-10-11"},{"lineNumber":21,"author":{"gitId":"markuslyq"},"content":"        return listOfPeople.get(personIndex);","lastModifiedDate":"2021-10-11"},{"lineNumber":22,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":23,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":24,"author":{"gitId":"markuslyq"},"content":"    /**","lastModifiedDate":"2021-10-11"},{"lineNumber":25,"author":{"gitId":"markuslyq"},"content":"     * Adds a person object to the list of people.","lastModifiedDate":"2021-10-11"},{"lineNumber":26,"author":{"gitId":"markuslyq"},"content":"     *","lastModifiedDate":"2021-10-11"},{"lineNumber":27,"author":{"gitId":"markuslyq"},"content":"     * @param person Person to be added to the list.","lastModifiedDate":"2021-10-11"},{"lineNumber":28,"author":{"gitId":"markuslyq"},"content":"     */","lastModifiedDate":"2021-10-11"},{"lineNumber":29,"author":{"gitId":"markuslyq"},"content":"    public void addPerson(Person person) {","lastModifiedDate":"2021-10-11"},{"lineNumber":30,"author":{"gitId":"markuslyq"},"content":"        listOfPeople.add(person);","lastModifiedDate":"2021-10-11"},{"lineNumber":31,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":32,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":33,"author":{"gitId":"markuslyq"},"content":"    /**","lastModifiedDate":"2021-10-12"},{"lineNumber":34,"author":{"gitId":"markuslyq"},"content":"     * Remove a particular person given its index.","lastModifiedDate":"2021-10-12"},{"lineNumber":35,"author":{"gitId":"markuslyq"},"content":"     *","lastModifiedDate":"2021-10-12"},{"lineNumber":36,"author":{"gitId":"markuslyq"},"content":"     * @param personIndex Index of the person to be removed.","lastModifiedDate":"2021-10-12"},{"lineNumber":37,"author":{"gitId":"markuslyq"},"content":"     */","lastModifiedDate":"2021-10-12"},{"lineNumber":38,"author":{"gitId":"andrewtkh1"},"content":"    public void deletePerson(int personIndex) throws LotsException {","lastModifiedDate":"2021-10-11"},{"lineNumber":39,"author":{"gitId":"andrewtkh1"},"content":"        try {","lastModifiedDate":"2021-10-11"},{"lineNumber":40,"author":{"gitId":"andrewtkh1"},"content":"            listOfPeople.remove(personIndex);","lastModifiedDate":"2021-10-11"},{"lineNumber":41,"author":{"gitId":"andrewtkh1"},"content":"        } catch (Exception e) {","lastModifiedDate":"2021-10-11"},{"lineNumber":42,"author":{"gitId":"andrewtkh1"},"content":"            throw new LotsException(e.getMessage());","lastModifiedDate":"2021-10-11"},{"lineNumber":43,"author":{"gitId":"andrewtkh1"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":44,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":45,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":46,"author":{"gitId":"markuslyq"},"content":"    /**","lastModifiedDate":"2021-10-11"},{"lineNumber":47,"author":{"gitId":"markuslyq"},"content":"     * Returns the number of people in the linked list.","lastModifiedDate":"2021-10-11"},{"lineNumber":48,"author":{"gitId":"markuslyq"},"content":"     *","lastModifiedDate":"2021-10-11"},{"lineNumber":49,"author":{"gitId":"markuslyq"},"content":"     * @return Returns the length of the linked list.","lastModifiedDate":"2021-10-11"},{"lineNumber":50,"author":{"gitId":"markuslyq"},"content":"     */","lastModifiedDate":"2021-10-11"},{"lineNumber":51,"author":{"gitId":"markuslyq"},"content":"    public int getSize() {","lastModifiedDate":"2021-10-11"},{"lineNumber":52,"author":{"gitId":"markuslyq"},"content":"        return listOfPeople.size();","lastModifiedDate":"2021-10-11"},{"lineNumber":53,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":54,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":55,"author":{"gitId":"markuslyq"},"content":"    public boolean isEmpty() {","lastModifiedDate":"2021-10-12"},{"lineNumber":56,"author":{"gitId":"markuslyq"},"content":"        return listOfPeople.isEmpty();","lastModifiedDate":"2021-10-12"},{"lineNumber":57,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":58,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":59,"author":{"gitId":"andrewtkh1"},"content":"    /**","lastModifiedDate":"2021-10-16"},{"lineNumber":60,"author":{"gitId":"andrewtkh1"},"content":"     * Clears the arraylist of people","lastModifiedDate":"2021-10-16"},{"lineNumber":61,"author":{"gitId":"andrewtkh1"},"content":"     * stored. Mainly used before each test method.","lastModifiedDate":"2021-10-16"},{"lineNumber":62,"author":{"gitId":"andrewtkh1"},"content":"     */","lastModifiedDate":"2021-10-16"},{"lineNumber":63,"author":{"gitId":"andrewtkh1"},"content":"    public static void clearListOfPeople() {","lastModifiedDate":"2021-10-16"},{"lineNumber":64,"author":{"gitId":"andrewtkh1"},"content":"        listOfPeople.clear();","lastModifiedDate":"2021-10-16"},{"lineNumber":65,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-10-16"},{"lineNumber":66,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":67,"author":{"gitId":"WaiKit-nus"},"content":"}","lastModifiedDate":"2021-10-06"}],"authorContributionMap":{"markuslyq":37,"andrewtkh1":19,"WaiKit-nus":11}},{"path":"src/main/java/seedu/duke/Person.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"WaiKit-nus"},"content":"package seedu.duke;","lastModifiedDate":"2021-10-05"},{"lineNumber":2,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":3,"author":{"gitId":"andrewtkh1"},"content":"import seedu.duke.exceptions.LotsException;","lastModifiedDate":"2021-10-12"},{"lineNumber":4,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":5,"author":{"gitId":"WaiKit-nus"},"content":"public class Person {","lastModifiedDate":"2021-10-05"},{"lineNumber":6,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":7,"author":{"gitId":"WaiKit-nus"},"content":"    protected int totalMenuItems \u003d Menu.TOTAL_MENU_ITEMS;","lastModifiedDate":"2021-10-05"},{"lineNumber":8,"author":{"gitId":"WaiKit-nus"},"content":"    protected String personName;","lastModifiedDate":"2021-10-05"},{"lineNumber":9,"author":{"gitId":"markuslyq"},"content":"    protected int[] individualFoodOrders \u003d new int[totalMenuItems];","lastModifiedDate":"2021-10-11"},{"lineNumber":10,"author":{"gitId":"WaiKit-nus"},"content":"    private String foodIndexOutOfBoundsErrorMessage \u003d \"Please enter the right menu number!\";","lastModifiedDate":"2021-10-07"},{"lineNumber":11,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":12,"author":{"gitId":"WaiKit-nus"},"content":"    /**","lastModifiedDate":"2021-10-05"},{"lineNumber":13,"author":{"gitId":"WaiKit-nus"},"content":"     * Constructor for Person.","lastModifiedDate":"2021-10-05"},{"lineNumber":14,"author":{"gitId":"WaiKit-nus"},"content":"     * Individual Food order list will be populated with 0 on initialisation.","lastModifiedDate":"2021-10-05"},{"lineNumber":15,"author":{"gitId":"markuslyq"},"content":"     *","lastModifiedDate":"2021-10-11"},{"lineNumber":16,"author":{"gitId":"WaiKit-nus"},"content":"     * @param personName Name of the person.","lastModifiedDate":"2021-10-05"},{"lineNumber":17,"author":{"gitId":"WaiKit-nus"},"content":"     */","lastModifiedDate":"2021-10-05"},{"lineNumber":18,"author":{"gitId":"WaiKit-nus"},"content":"    public Person(String personName) {","lastModifiedDate":"2021-10-05"},{"lineNumber":19,"author":{"gitId":"WaiKit-nus"},"content":"        this.personName \u003d personName;","lastModifiedDate":"2021-10-05"},{"lineNumber":20,"author":{"gitId":"WaiKit-nus"},"content":"        setupIndividualFoodOrders();","lastModifiedDate":"2021-10-05"},{"lineNumber":21,"author":{"gitId":"WaiKit-nus"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":22,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":23,"author":{"gitId":"WaiKit-nus"},"content":"    /**","lastModifiedDate":"2021-10-05"},{"lineNumber":24,"author":{"gitId":"WaiKit-nus"},"content":"     * Used to populate the array with 0 from index 1 to total_menu_items(10).","lastModifiedDate":"2021-10-12"},{"lineNumber":25,"author":{"gitId":"WaiKit-nus"},"content":"     */","lastModifiedDate":"2021-10-05"},{"lineNumber":26,"author":{"gitId":"WaiKit-nus"},"content":"    private void setupIndividualFoodOrders() {","lastModifiedDate":"2021-10-05"},{"lineNumber":27,"author":{"gitId":"andrewtkh1"},"content":"        for (int i \u003d 0; i \u003c totalMenuItems; i++) {","lastModifiedDate":"2021-10-12"},{"lineNumber":28,"author":{"gitId":"WaiKit-nus"},"content":"            individualFoodOrders[i] \u003d 0;","lastModifiedDate":"2021-10-05"},{"lineNumber":29,"author":{"gitId":"WaiKit-nus"},"content":"        }","lastModifiedDate":"2021-10-05"},{"lineNumber":30,"author":{"gitId":"WaiKit-nus"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":31,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":32,"author":{"gitId":"WaiKit-nus"},"content":"    /**","lastModifiedDate":"2021-10-05"},{"lineNumber":33,"author":{"gitId":"WaiKit-nus"},"content":"     * Add the quantity of the corresponding food index by 1.","lastModifiedDate":"2021-10-05"},{"lineNumber":34,"author":{"gitId":"markuslyq"},"content":"     *","lastModifiedDate":"2021-10-11"},{"lineNumber":35,"author":{"gitId":"WaiKit-nus"},"content":"     * @param foodIndex Index of food in the menu.","lastModifiedDate":"2021-10-05"},{"lineNumber":36,"author":{"gitId":"WaiKit-nus"},"content":"     */","lastModifiedDate":"2021-10-05"},{"lineNumber":37,"author":{"gitId":"andrewtkh1"},"content":"    public void addFoodToIndividualFoodOrders(int foodIndex) throws LotsException {","lastModifiedDate":"2021-10-12"},{"lineNumber":38,"author":{"gitId":"andrewtkh1"},"content":"        if (foodIndex \u003c\u003d totalMenuItems \u0026\u0026 foodIndex \u003e 0) {","lastModifiedDate":"2021-10-12"},{"lineNumber":39,"author":{"gitId":"andrewtkh1"},"content":"            individualFoodOrders[foodIndex - 1] \u003d individualFoodOrders[foodIndex - 1] + 1;","lastModifiedDate":"2021-10-12"},{"lineNumber":40,"author":{"gitId":"WaiKit-nus"},"content":"        } else {","lastModifiedDate":"2021-10-07"},{"lineNumber":41,"author":{"gitId":"WaiKit-nus"},"content":"            throw new LotsException(foodIndexOutOfBoundsErrorMessage);","lastModifiedDate":"2021-10-12"},{"lineNumber":42,"author":{"gitId":"WaiKit-nus"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":43,"author":{"gitId":"WaiKit-nus"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":44,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":45,"author":{"gitId":"WaiKit-nus"},"content":"    /**","lastModifiedDate":"2021-10-05"},{"lineNumber":46,"author":{"gitId":"WaiKit-nus"},"content":"     * Minus the quantity of the corresponding food index by 1.","lastModifiedDate":"2021-10-05"},{"lineNumber":47,"author":{"gitId":"WaiKit-nus"},"content":"     * If the quantity of food is 0, the quantity remains 0.","lastModifiedDate":"2021-10-05"},{"lineNumber":48,"author":{"gitId":"markuslyq"},"content":"     *","lastModifiedDate":"2021-10-11"},{"lineNumber":49,"author":{"gitId":"WaiKit-nus"},"content":"     * @param foodIndex Index of food in the menu.","lastModifiedDate":"2021-10-05"},{"lineNumber":50,"author":{"gitId":"WaiKit-nus"},"content":"     */","lastModifiedDate":"2021-10-05"},{"lineNumber":51,"author":{"gitId":"andrewtkh1"},"content":"    public void removeFoodFromIndividualFoodOrders(int foodIndex, int quantity) throws LotsException {","lastModifiedDate":"2021-10-12"},{"lineNumber":52,"author":{"gitId":"andrewtkh1"},"content":"        if (foodIndex \u003c\u003d totalMenuItems \u0026\u0026 foodIndex \u003e 0) {","lastModifiedDate":"2021-10-12"},{"lineNumber":53,"author":{"gitId":"andrewtkh1"},"content":"            if (individualFoodOrders[foodIndex - 1] !\u003d 0) {","lastModifiedDate":"2021-10-12"},{"lineNumber":54,"author":{"gitId":"andrewtkh1"},"content":"                individualFoodOrders[foodIndex - 1] \u003d individualFoodOrders[foodIndex - 1] - quantity;","lastModifiedDate":"2021-10-12"},{"lineNumber":55,"author":{"gitId":"WaiKit-nus"},"content":"            } else {","lastModifiedDate":"2021-10-05"},{"lineNumber":56,"author":{"gitId":"andrewtkh1"},"content":"                individualFoodOrders[foodIndex - 1] \u003d 0;","lastModifiedDate":"2021-10-12"},{"lineNumber":57,"author":{"gitId":"WaiKit-nus"},"content":"            }","lastModifiedDate":"2021-10-05"},{"lineNumber":58,"author":{"gitId":"WaiKit-nus"},"content":"        } else {","lastModifiedDate":"2021-10-07"},{"lineNumber":59,"author":{"gitId":"WaiKit-nus"},"content":"            throw new LotsException(foodIndexOutOfBoundsErrorMessage);","lastModifiedDate":"2021-10-12"},{"lineNumber":60,"author":{"gitId":"WaiKit-nus"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":61,"author":{"gitId":"WaiKit-nus"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":62,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":63,"author":{"gitId":"markuslyq"},"content":"    /**","lastModifiedDate":"2021-10-11"},{"lineNumber":64,"author":{"gitId":"markuslyq"},"content":"     * Sets the quantity of a particular food order in the order array to 0.","lastModifiedDate":"2021-10-11"},{"lineNumber":65,"author":{"gitId":"markuslyq"},"content":"     *","lastModifiedDate":"2021-10-11"},{"lineNumber":66,"author":{"gitId":"andrewtkh1"},"content":"     * @param foodIndex Index of the order whose quantity is getting set to 0.","lastModifiedDate":"2021-10-12"},{"lineNumber":67,"author":{"gitId":"markuslyq"},"content":"     * @throws LotsException When order index is more than the number of orders.","lastModifiedDate":"2021-10-11"},{"lineNumber":68,"author":{"gitId":"markuslyq"},"content":"     */","lastModifiedDate":"2021-10-11"},{"lineNumber":69,"author":{"gitId":"andrewtkh1"},"content":"    public void deleteParticularOrder(int foodIndex) throws LotsException {","lastModifiedDate":"2021-10-12"},{"lineNumber":70,"author":{"gitId":"markuslyq"},"content":"        int numberOfOrders \u003d 0;","lastModifiedDate":"2021-10-11"},{"lineNumber":71,"author":{"gitId":"markuslyq"},"content":"        for (int i \u003d 0; i \u003c totalMenuItems; i++) {","lastModifiedDate":"2021-10-11"},{"lineNumber":72,"author":{"gitId":"markuslyq"},"content":"            if (individualFoodOrders[i] \u003e 0) {","lastModifiedDate":"2021-10-11"},{"lineNumber":73,"author":{"gitId":"markuslyq"},"content":"                numberOfOrders++;","lastModifiedDate":"2021-10-11"},{"lineNumber":74,"author":{"gitId":"markuslyq"},"content":"            }","lastModifiedDate":"2021-10-11"},{"lineNumber":75,"author":{"gitId":"andrewtkh1"},"content":"            if (foodIndex + 1 \u003d\u003d numberOfOrders) {","lastModifiedDate":"2021-10-12"},{"lineNumber":76,"author":{"gitId":"markuslyq"},"content":"                individualFoodOrders[i] \u003d 0;","lastModifiedDate":"2021-10-11"},{"lineNumber":77,"author":{"gitId":"markuslyq"},"content":"            }","lastModifiedDate":"2021-10-11"},{"lineNumber":78,"author":{"gitId":"markuslyq"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":79,"author":{"gitId":"andrewtkh1"},"content":"        if (foodIndex + 1 \u003e numberOfOrders) {","lastModifiedDate":"2021-10-12"},{"lineNumber":80,"author":{"gitId":"markuslyq"},"content":"            throw new LotsException(\"Please enter a valid order index!\");","lastModifiedDate":"2021-10-11"},{"lineNumber":81,"author":{"gitId":"markuslyq"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":82,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":83,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":84,"author":{"gitId":"markuslyq"},"content":"    /**","lastModifiedDate":"2021-10-12"},{"lineNumber":85,"author":{"gitId":"markuslyq"},"content":"     * Checks if the individual order of this person is empty by checking","lastModifiedDate":"2021-10-12"},{"lineNumber":86,"author":{"gitId":"markuslyq"},"content":"     * if the quantity of food orders are 0.","lastModifiedDate":"2021-10-12"},{"lineNumber":87,"author":{"gitId":"markuslyq"},"content":"     *","lastModifiedDate":"2021-10-12"},{"lineNumber":88,"author":{"gitId":"markuslyq"},"content":"     * @return Returns true if all the quantity of the food orders are 0, else returns false.","lastModifiedDate":"2021-10-12"},{"lineNumber":89,"author":{"gitId":"markuslyq"},"content":"     */","lastModifiedDate":"2021-10-12"},{"lineNumber":90,"author":{"gitId":"markuslyq"},"content":"    public boolean isEmpty() {","lastModifiedDate":"2021-10-12"},{"lineNumber":91,"author":{"gitId":"markuslyq"},"content":"        int numberOfOrders \u003d 0;","lastModifiedDate":"2021-10-12"},{"lineNumber":92,"author":{"gitId":"markuslyq"},"content":"        for (int i \u003d 0; i \u003c totalMenuItems; i++) {","lastModifiedDate":"2021-10-12"},{"lineNumber":93,"author":{"gitId":"markuslyq"},"content":"            if (individualFoodOrders[i] \u003e 0) {","lastModifiedDate":"2021-10-12"},{"lineNumber":94,"author":{"gitId":"markuslyq"},"content":"                numberOfOrders++;","lastModifiedDate":"2021-10-12"},{"lineNumber":95,"author":{"gitId":"markuslyq"},"content":"            }","lastModifiedDate":"2021-10-12"},{"lineNumber":96,"author":{"gitId":"markuslyq"},"content":"        }","lastModifiedDate":"2021-10-12"},{"lineNumber":97,"author":{"gitId":"markuslyq"},"content":"        if (numberOfOrders \u003d\u003d 0) {","lastModifiedDate":"2021-10-12"},{"lineNumber":98,"author":{"gitId":"markuslyq"},"content":"            return true;","lastModifiedDate":"2021-10-12"},{"lineNumber":99,"author":{"gitId":"markuslyq"},"content":"        }","lastModifiedDate":"2021-10-12"},{"lineNumber":100,"author":{"gitId":"markuslyq"},"content":"        return false;","lastModifiedDate":"2021-10-12"},{"lineNumber":101,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":102,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":103,"author":{"gitId":"WaiKit-nus"},"content":"}","lastModifiedDate":"2021-10-05"}],"authorContributionMap":{"markuslyq":41,"andrewtkh1":15,"WaiKit-nus":47}},{"path":"src/main/java/seedu/duke/Ui.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"andrewtkh1"},"content":"package seedu.duke;","lastModifiedDate":"2021-10-08"},{"lineNumber":2,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":3,"author":{"gitId":"mohamad-adam8991"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":4,"author":{"gitId":"andrewtkh1"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-10-08"},{"lineNumber":5,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":6,"author":{"gitId":"andrewtkh1"},"content":"public class Ui {","lastModifiedDate":"2021-10-08"},{"lineNumber":7,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":8,"author":{"gitId":"thaddyyz"},"content":"    private static final String line \u003d \"--------------------------------------------------\";","lastModifiedDate":"2021-10-10"},{"lineNumber":9,"author":{"gitId":"andrewtkh1"},"content":"    private static final String BORDER \u003d \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\"","lastModifiedDate":"2021-10-08"},{"lineNumber":10,"author":{"gitId":"andrewtkh1"},"content":"            + \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\"","lastModifiedDate":"2021-10-08"},{"lineNumber":11,"author":{"gitId":"andrewtkh1"},"content":"            + \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\";","lastModifiedDate":"2021-10-08"},{"lineNumber":12,"author":{"gitId":"andrewtkh1"},"content":"    private static final Scanner SC \u003d new Scanner(System.in);","lastModifiedDate":"2021-10-08"},{"lineNumber":13,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":14,"author":{"gitId":"andrewtkh1"},"content":"    public static void printWelcome() {","lastModifiedDate":"2021-10-12"},{"lineNumber":15,"author":{"gitId":"andrewtkh1"},"content":"        String welcomeMsg \u003d \"Welcome to L.O.T.S! What would you like to track today?\";","lastModifiedDate":"2021-10-12"},{"lineNumber":16,"author":{"gitId":"andrewtkh1"},"content":"        printWithBorder(welcomeMsg);","lastModifiedDate":"2021-10-12"},{"lineNumber":17,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":18,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":19,"author":{"gitId":"andrewtkh1"},"content":"    public static void printGoodbye() {","lastModifiedDate":"2021-10-12"},{"lineNumber":20,"author":{"gitId":"andrewtkh1"},"content":"        String byeMsg \u003d \"Thank you for using L.O.T.S! Good bye!\";","lastModifiedDate":"2021-10-12"},{"lineNumber":21,"author":{"gitId":"andrewtkh1"},"content":"        printWithBorder(byeMsg);","lastModifiedDate":"2021-10-12"},{"lineNumber":22,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":23,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":24,"author":{"gitId":"andrewtkh1"},"content":"    /**","lastModifiedDate":"2021-10-08"},{"lineNumber":25,"author":{"gitId":"andrewtkh1"},"content":"     * Prints the string provided followed by the border.","lastModifiedDate":"2021-10-08"},{"lineNumber":26,"author":{"gitId":"andrewtkh1"},"content":"     *","lastModifiedDate":"2021-10-08"},{"lineNumber":27,"author":{"gitId":"andrewtkh1"},"content":"     * @param stringToPrint The string to output to user.","lastModifiedDate":"2021-10-08"},{"lineNumber":28,"author":{"gitId":"andrewtkh1"},"content":"     */","lastModifiedDate":"2021-10-08"},{"lineNumber":29,"author":{"gitId":"andrewtkh1"},"content":"    public static void printWithBorder(String stringToPrint) {","lastModifiedDate":"2021-10-08"},{"lineNumber":30,"author":{"gitId":"andrewtkh1"},"content":"        System.out.println(stringToPrint);","lastModifiedDate":"2021-10-08"},{"lineNumber":31,"author":{"gitId":"andrewtkh1"},"content":"        System.out.println(BORDER);","lastModifiedDate":"2021-10-08"},{"lineNumber":32,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":33,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":34,"author":{"gitId":"andrewtkh1"},"content":"    public static void printWithoutBorder(String stringToPrint) {","lastModifiedDate":"2021-10-08"},{"lineNumber":35,"author":{"gitId":"andrewtkh1"},"content":"        System.out.println(stringToPrint);","lastModifiedDate":"2021-10-08"},{"lineNumber":36,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":37,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":38,"author":{"gitId":"andrewtkh1"},"content":"    /**","lastModifiedDate":"2021-10-08"},{"lineNumber":39,"author":{"gitId":"andrewtkh1"},"content":"     * Returns the user\u0027s input with the leading and","lastModifiedDate":"2021-10-08"},{"lineNumber":40,"author":{"gitId":"andrewtkh1"},"content":"     * trailing spaces stripped.","lastModifiedDate":"2021-10-08"},{"lineNumber":41,"author":{"gitId":"andrewtkh1"},"content":"     *","lastModifiedDate":"2021-10-08"},{"lineNumber":42,"author":{"gitId":"andrewtkh1"},"content":"     * @return The User\u0027s input in String.","lastModifiedDate":"2021-10-08"},{"lineNumber":43,"author":{"gitId":"andrewtkh1"},"content":"     */","lastModifiedDate":"2021-10-08"},{"lineNumber":44,"author":{"gitId":"andrewtkh1"},"content":"    public static String readInput() {","lastModifiedDate":"2021-10-08"},{"lineNumber":45,"author":{"gitId":"andrewtkh1"},"content":"        String input \u003d SC.nextLine();","lastModifiedDate":"2021-10-08"},{"lineNumber":46,"author":{"gitId":"andrewtkh1"},"content":"        return input.strip();","lastModifiedDate":"2021-10-08"},{"lineNumber":47,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":48,"author":{"gitId":"mohamad-adam8991"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":49,"author":{"gitId":"mohamad-adam8991"},"content":"    /**","lastModifiedDate":"2021-10-08"},{"lineNumber":50,"author":{"gitId":"mohamad-adam8991"},"content":"     * Prints a list of all the orders made so far.","lastModifiedDate":"2021-10-08"},{"lineNumber":51,"author":{"gitId":"markuslyq"},"content":"     *","lastModifiedDate":"2021-10-11"},{"lineNumber":52,"author":{"gitId":"markuslyq"},"content":"     * @param peopleManager List of people who are ordering.","lastModifiedDate":"2021-10-11"},{"lineNumber":53,"author":{"gitId":"mohamad-adam8991"},"content":"     */","lastModifiedDate":"2021-10-08"},{"lineNumber":54,"author":{"gitId":"mohamad-adam8991"},"content":"    public static void printOrdersList(PeopleManager peopleManager) {","lastModifiedDate":"2021-10-12"},{"lineNumber":55,"author":{"gitId":"markuslyq"},"content":"        int totalNumOfPeopleOrdered \u003d peopleManager.getSize();","lastModifiedDate":"2021-10-11"},{"lineNumber":56,"author":{"gitId":"mohamad-adam8991"},"content":"        if (totalNumOfPeopleOrdered \u003d\u003d 0) {","lastModifiedDate":"2021-10-08"},{"lineNumber":57,"author":{"gitId":"andrewtkh1"},"content":"            printWithBorder(\"Your order list is empty!\");","lastModifiedDate":"2021-10-16"},{"lineNumber":58,"author":{"gitId":"mohamad-adam8991"},"content":"        } else {","lastModifiedDate":"2021-10-08"},{"lineNumber":59,"author":{"gitId":"mohamad-adam8991"},"content":"            assert totalNumOfPeopleOrdered !\u003d 0 : \"Order list cannot be empty.\";","lastModifiedDate":"2021-10-12"},{"lineNumber":60,"author":{"gitId":"mohamad-adam8991"},"content":"            for (int i \u003d 0; i \u003c totalNumOfPeopleOrdered; i++) {","lastModifiedDate":"2021-10-08"},{"lineNumber":61,"author":{"gitId":"markuslyq"},"content":"                String currentPersonName \u003d peopleManager.getPerson(i).personName;","lastModifiedDate":"2021-10-11"},{"lineNumber":62,"author":{"gitId":"mohamad-adam8991"},"content":"                assert currentPersonName !\u003d null : \"Person must exist.\";","lastModifiedDate":"2021-10-12"},{"lineNumber":63,"author":{"gitId":"markuslyq"},"content":"                printWithoutBorder((i + 1) + \") \" + currentPersonName + \":\");","lastModifiedDate":"2021-10-16"},{"lineNumber":64,"author":{"gitId":"markuslyq"},"content":"                printIndividualPersonOrder(peopleManager.getPerson(i));","lastModifiedDate":"2021-10-11"},{"lineNumber":65,"author":{"gitId":"mohamad-adam8991"},"content":"            }","lastModifiedDate":"2021-10-08"},{"lineNumber":66,"author":{"gitId":"andrewtkh1"},"content":"            printWithBorder(\"\");","lastModifiedDate":"2021-10-16"},{"lineNumber":67,"author":{"gitId":"mohamad-adam8991"},"content":"        }","lastModifiedDate":"2021-10-08"},{"lineNumber":68,"author":{"gitId":"mohamad-adam8991"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":69,"author":{"gitId":"mohamad-adam8991"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":70,"author":{"gitId":"mohamad-adam8991"},"content":"    /**","lastModifiedDate":"2021-10-08"},{"lineNumber":71,"author":{"gitId":"mohamad-adam8991"},"content":"     * Prints a list of the food items that an individual person has ordered, and displays the total","lastModifiedDate":"2021-10-08"},{"lineNumber":72,"author":{"gitId":"mohamad-adam8991"},"content":"     * cost of the items.","lastModifiedDate":"2021-10-08"},{"lineNumber":73,"author":{"gitId":"mohamad-adam8991"},"content":"     *","lastModifiedDate":"2021-10-08"},{"lineNumber":74,"author":{"gitId":"mohamad-adam8991"},"content":"     * @param currentPerson Person entry in the list that is currently being accessed.","lastModifiedDate":"2021-10-08"},{"lineNumber":75,"author":{"gitId":"mohamad-adam8991"},"content":"     */","lastModifiedDate":"2021-10-08"},{"lineNumber":76,"author":{"gitId":"mohamad-adam8991"},"content":"    private static void printIndividualPersonOrder(Person currentPerson) {","lastModifiedDate":"2021-10-08"},{"lineNumber":77,"author":{"gitId":"mohamad-adam8991"},"content":"        double totalCost \u003d 0;","lastModifiedDate":"2021-10-08"},{"lineNumber":78,"author":{"gitId":"andrewtkh1"},"content":"        int currentItem \u003d 97; //97 is the ascii for \u0027a\u0027.","lastModifiedDate":"2021-10-11"},{"lineNumber":79,"author":{"gitId":"mohamad-adam8991"},"content":"        int totalMenuItems \u003d Menu.TOTAL_MENU_ITEMS;","lastModifiedDate":"2021-10-08"},{"lineNumber":80,"author":{"gitId":"markuslyq"},"content":"        int[] currentIndividualOrders \u003d currentPerson.individualFoodOrders;","lastModifiedDate":"2021-10-11"},{"lineNumber":81,"author":{"gitId":"mohamad-adam8991"},"content":"        assert currentIndividualOrders !\u003d null : \"Person must have food orders.\";","lastModifiedDate":"2021-10-12"},{"lineNumber":82,"author":{"gitId":"markuslyq"},"content":"        int index \u003d 1;","lastModifiedDate":"2021-10-16"},{"lineNumber":83,"author":{"gitId":"mohamad-adam8991"},"content":"        for (int i \u003d 0; i \u003c totalMenuItems; i++) {","lastModifiedDate":"2021-10-08"},{"lineNumber":84,"author":{"gitId":"mohamad-adam8991"},"content":"            if (currentIndividualOrders[i] !\u003d 0) {","lastModifiedDate":"2021-10-08"},{"lineNumber":85,"author":{"gitId":"mohamad-adam8991"},"content":"                double currentCost \u003d currentIndividualOrders[i] * Menu.PRICELIST.get(i);","lastModifiedDate":"2021-10-11"},{"lineNumber":86,"author":{"gitId":"markuslyq"},"content":"                printWithoutBorder(\"\\t(\" + index + \") \" + Menu.FOODLIST.get(i) + \" | Quantity \u003d \"","lastModifiedDate":"2021-10-16"},{"lineNumber":87,"author":{"gitId":"mohamad-adam8991"},"content":"                        + currentIndividualOrders[i] + \" | Cost \u003d $\" + String.format(\"%.2f\", currentCost));","lastModifiedDate":"2021-10-08"},{"lineNumber":88,"author":{"gitId":"mohamad-adam8991"},"content":"                totalCost \u003d totalCost + currentCost;","lastModifiedDate":"2021-10-08"},{"lineNumber":89,"author":{"gitId":"mohamad-adam8991"},"content":"                currentItem++;","lastModifiedDate":"2021-10-08"},{"lineNumber":90,"author":{"gitId":"markuslyq"},"content":"                index++;","lastModifiedDate":"2021-10-16"},{"lineNumber":91,"author":{"gitId":"mohamad-adam8991"},"content":"            }","lastModifiedDate":"2021-10-08"},{"lineNumber":92,"author":{"gitId":"mohamad-adam8991"},"content":"        }","lastModifiedDate":"2021-10-08"},{"lineNumber":93,"author":{"gitId":"andrewtkh1"},"content":"        printWithoutBorder(\"[Total Cost \u003d $\" + String.format(\"%.2f\", totalCost) + \"]\");","lastModifiedDate":"2021-10-16"},{"lineNumber":94,"author":{"gitId":"mohamad-adam8991"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":95,"author":{"gitId":"mohamad-adam8991"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":96,"author":{"gitId":"markuslyq"},"content":"    /**","lastModifiedDate":"2021-10-11"},{"lineNumber":97,"author":{"gitId":"markuslyq"},"content":"     * Prints a message to notify the user of the deletion of an order.","lastModifiedDate":"2021-10-11"},{"lineNumber":98,"author":{"gitId":"markuslyq"},"content":"     */","lastModifiedDate":"2021-10-11"},{"lineNumber":99,"author":{"gitId":"markuslyq"},"content":"    public static void printDeleteMessage(Person person) {","lastModifiedDate":"2021-10-12"},{"lineNumber":100,"author":{"gitId":"andrewtkh1"},"content":"        printWithBorder(\"Alright, that order has been deleted from \" + person.personName + \"!\");","lastModifiedDate":"2021-10-16"},{"lineNumber":101,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":102,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":103,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":104,"author":{"gitId":"markuslyq"},"content":"    /**","lastModifiedDate":"2021-10-12"},{"lineNumber":105,"author":{"gitId":"markuslyq"},"content":"     * Prints a message to notify the user of an empty order list.","lastModifiedDate":"2021-10-12"},{"lineNumber":106,"author":{"gitId":"markuslyq"},"content":"     */","lastModifiedDate":"2021-10-12"},{"lineNumber":107,"author":{"gitId":"markuslyq"},"content":"    public static void printEmptyMessage() {","lastModifiedDate":"2021-10-12"},{"lineNumber":108,"author":{"gitId":"andrewtkh1"},"content":"        printWithBorder(\"There are currently no orders!\");","lastModifiedDate":"2021-10-16"},{"lineNumber":109,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":110,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":111,"author":{"gitId":"andrewtkh1"},"content":"    /**","lastModifiedDate":"2021-10-12"},{"lineNumber":112,"author":{"gitId":"andrewtkh1"},"content":"     * Prints the details of the order that has just been added.","lastModifiedDate":"2021-10-12"},{"lineNumber":113,"author":{"gitId":"andrewtkh1"},"content":"     *","lastModifiedDate":"2021-10-12"},{"lineNumber":114,"author":{"gitId":"andrewtkh1"},"content":"     * @param person The person object that just added an order.","lastModifiedDate":"2021-10-12"},{"lineNumber":115,"author":{"gitId":"andrewtkh1"},"content":"     */","lastModifiedDate":"2021-10-12"},{"lineNumber":116,"author":{"gitId":"andrewtkh1"},"content":"    public static void printAddedOrderMessage(Person person) {","lastModifiedDate":"2021-10-11"},{"lineNumber":117,"author":{"gitId":"andrewtkh1"},"content":"        assert person !\u003d null : \"Person object cannot be null when adding!\";","lastModifiedDate":"2021-10-12"},{"lineNumber":118,"author":{"gitId":"andrewtkh1"},"content":"        printWithoutBorder(\"We have updated the order list for: \" + person.personName);","lastModifiedDate":"2021-10-16"},{"lineNumber":119,"author":{"gitId":"andrewtkh1"},"content":"        printIndividualPersonOrder(person);","lastModifiedDate":"2021-10-11"},{"lineNumber":120,"author":{"gitId":"andrewtkh1"},"content":"        printWithBorder(\"\");","lastModifiedDate":"2021-10-16"},{"lineNumber":121,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":122,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":123,"author":{"gitId":"thaddyyz"},"content":"    public static void printMenuHeader() {","lastModifiedDate":"2021-10-09"},{"lineNumber":124,"author":{"gitId":"andrewtkh1"},"content":"        printWithoutBorder(\"index | Food Name                         | Price\");","lastModifiedDate":"2021-10-16"},{"lineNumber":125,"author":{"gitId":"andrewtkh1"},"content":"        printWithoutBorder(line);","lastModifiedDate":"2021-10-16"},{"lineNumber":126,"author":{"gitId":"thaddyyz"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":127,"author":{"gitId":"thaddyyz"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":128,"author":{"gitId":"andrewtkh1"},"content":"    /**","lastModifiedDate":"2021-10-10"},{"lineNumber":129,"author":{"gitId":"andrewtkh1"},"content":"     * Prints out the menu item that has been passed in","lastModifiedDate":"2021-10-10"},{"lineNumber":130,"author":{"gitId":"andrewtkh1"},"content":"     * using the proper format followed by a small border.","lastModifiedDate":"2021-10-10"},{"lineNumber":131,"author":{"gitId":"andrewtkh1"},"content":"     *","lastModifiedDate":"2021-10-10"},{"lineNumber":132,"author":{"gitId":"andrewtkh1"},"content":"     * @param index     The Index of the food item.","lastModifiedDate":"2021-10-10"},{"lineNumber":133,"author":{"gitId":"andrewtkh1"},"content":"     * @param foodName  The name of the food at the index in String.","lastModifiedDate":"2021-10-10"},{"lineNumber":134,"author":{"gitId":"andrewtkh1"},"content":"     * @param foodPrice The price of the food in Double.","lastModifiedDate":"2021-10-10"},{"lineNumber":135,"author":{"gitId":"andrewtkh1"},"content":"     */","lastModifiedDate":"2021-10-10"},{"lineNumber":136,"author":{"gitId":"thaddyyz"},"content":"    public static void printMenu(int index, String foodName, Double foodPrice) {","lastModifiedDate":"2021-10-09"},{"lineNumber":137,"author":{"gitId":"thaddyyz"},"content":"        System.out.format(\"%-8d%-33s%7.2f%n\", index, foodName, foodPrice);","lastModifiedDate":"2021-10-09"},{"lineNumber":138,"author":{"gitId":"andrewtkh1"},"content":"        printWithoutBorder(line);","lastModifiedDate":"2021-10-16"},{"lineNumber":139,"author":{"gitId":"thaddyyz"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":140,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":141,"author":{"gitId":"andrewtkh1"},"content":"}","lastModifiedDate":"2021-10-08"}],"authorContributionMap":{"markuslyq":24,"mohamad-adam8991":35,"andrewtkh1":75,"thaddyyz":7}},{"path":"src/main/java/seedu/duke/command/AddCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"andrewtkh1"},"content":"package seedu.duke.command;","lastModifiedDate":"2021-10-12"},{"lineNumber":2,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":3,"author":{"gitId":"andrewtkh1"},"content":"import seedu.duke.exceptions.LotsException;","lastModifiedDate":"2021-10-12"},{"lineNumber":4,"author":{"gitId":"andrewtkh1"},"content":"import seedu.duke.Menu;","lastModifiedDate":"2021-10-12"},{"lineNumber":5,"author":{"gitId":"andrewtkh1"},"content":"import seedu.duke.Person;","lastModifiedDate":"2021-10-12"},{"lineNumber":6,"author":{"gitId":"andrewtkh1"},"content":"import seedu.duke.Ui;","lastModifiedDate":"2021-10-12"},{"lineNumber":7,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":8,"author":{"gitId":"WaiKit-nus"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2021-10-08"},{"lineNumber":9,"author":{"gitId":"WaiKit-nus"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2021-10-08"},{"lineNumber":10,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":11,"author":{"gitId":"WaiKit-nus"},"content":"public class AddCommand extends Command {","lastModifiedDate":"2021-10-07"},{"lineNumber":12,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":13,"author":{"gitId":"WaiKit-nus"},"content":"    public static final String COMMAND_WORD \u003d \"add\";","lastModifiedDate":"2021-10-07"},{"lineNumber":14,"author":{"gitId":"WaiKit-nus"},"content":"    private final String personName;","lastModifiedDate":"2021-10-07"},{"lineNumber":15,"author":{"gitId":"WaiKit-nus"},"content":"    private final int foodIndex;","lastModifiedDate":"2021-10-07"},{"lineNumber":16,"author":{"gitId":"WaiKit-nus"},"content":"    private final int foodQuantity;","lastModifiedDate":"2021-10-07"},{"lineNumber":17,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":18,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":19,"author":{"gitId":"WaiKit-nus"},"content":"    /**","lastModifiedDate":"2021-10-08"},{"lineNumber":20,"author":{"gitId":"WaiKit-nus"},"content":"     * Constructor with Regex checking input. If it does not match desirable input, then","lastModifiedDate":"2021-10-08"},{"lineNumber":21,"author":{"gitId":"WaiKit-nus"},"content":"     * variables will be initialised with a fixed input.","lastModifiedDate":"2021-10-08"},{"lineNumber":22,"author":{"gitId":"andrewtkh1"},"content":"     *","lastModifiedDate":"2021-10-11"},{"lineNumber":23,"author":{"gitId":"WaiKit-nus"},"content":"     * @param input will be returned by functions if it passes regex.","lastModifiedDate":"2021-10-08"},{"lineNumber":24,"author":{"gitId":"WaiKit-nus"},"content":"     *              will return fixed variables if it does not pass regex.","lastModifiedDate":"2021-10-11"},{"lineNumber":25,"author":{"gitId":"WaiKit-nus"},"content":"     */","lastModifiedDate":"2021-10-08"},{"lineNumber":26,"author":{"gitId":"WaiKit-nus"},"content":"    public AddCommand(String input) throws LotsException {","lastModifiedDate":"2021-10-11"},{"lineNumber":27,"author":{"gitId":"WaiKit-nus"},"content":"        if (checkUserInput(input)) {","lastModifiedDate":"2021-10-08"},{"lineNumber":28,"author":{"gitId":"WaiKit-nus"},"content":"            int[] indexOfSlashes \u003d indexOfSlashes(input);","lastModifiedDate":"2021-10-07"},{"lineNumber":29,"author":{"gitId":"andrewtkh1"},"content":"            personName \u003d getPersonName(input, indexOfSlashes[0], indexOfSlashes[1]);","lastModifiedDate":"2021-10-11"},{"lineNumber":30,"author":{"gitId":"andrewtkh1"},"content":"            foodIndex \u003d getFoodIndex(input, indexOfSlashes[1], indexOfSlashes[2]);","lastModifiedDate":"2021-10-11"},{"lineNumber":31,"author":{"gitId":"andrewtkh1"},"content":"            foodQuantity \u003d getFoodQuantity(input, indexOfSlashes[2]);","lastModifiedDate":"2021-10-11"},{"lineNumber":32,"author":{"gitId":"WaiKit-nus"},"content":"        } else {","lastModifiedDate":"2021-10-08"},{"lineNumber":33,"author":{"gitId":"WaiKit-nus"},"content":"            throw new LotsException(\"Please enter a valid Add Command!\");","lastModifiedDate":"2021-10-12"},{"lineNumber":34,"author":{"gitId":"WaiKit-nus"},"content":"        }","lastModifiedDate":"2021-10-08"},{"lineNumber":35,"author":{"gitId":"WaiKit-nus"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":36,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":37,"author":{"gitId":"WaiKit-nus"},"content":"    /**","lastModifiedDate":"2021-10-07"},{"lineNumber":38,"author":{"gitId":"WaiKit-nus"},"content":"     * Adds a new person with the given attributes into the list of people.","lastModifiedDate":"2021-10-07"},{"lineNumber":39,"author":{"gitId":"WaiKit-nus"},"content":"     * If it did not pass regex, it will throw new exception and no new addition of","lastModifiedDate":"2021-10-08"},{"lineNumber":40,"author":{"gitId":"WaiKit-nus"},"content":"     * person to the list of people will happen.","lastModifiedDate":"2021-10-08"},{"lineNumber":41,"author":{"gitId":"andrewtkh1"},"content":"     *","lastModifiedDate":"2021-10-11"},{"lineNumber":42,"author":{"gitId":"WaiKit-nus"},"content":"     * @throws LotsException Throws a new LotsException when the command is invalid.","lastModifiedDate":"2021-10-11"},{"lineNumber":43,"author":{"gitId":"WaiKit-nus"},"content":"     */","lastModifiedDate":"2021-10-07"},{"lineNumber":44,"author":{"gitId":"WaiKit-nus"},"content":"    @Override","lastModifiedDate":"2021-10-07"},{"lineNumber":45,"author":{"gitId":"WaiKit-nus"},"content":"    public void execute() throws LotsException {","lastModifiedDate":"2021-10-11"},{"lineNumber":46,"author":{"gitId":"WaiKit-nus"},"content":"        if (personName !\u003d \"\" || foodIndex !\u003d -1 || foodQuantity !\u003d -1) {","lastModifiedDate":"2021-10-12"},{"lineNumber":47,"author":{"gitId":"WaiKit-nus"},"content":"            Person person \u003d new Person(personName);","lastModifiedDate":"2021-10-07"},{"lineNumber":48,"author":{"gitId":"WaiKit-nus"},"content":"            person.addFoodToIndividualFoodOrders(foodIndex);","lastModifiedDate":"2021-10-07"},{"lineNumber":49,"author":{"gitId":"andrewtkh1"},"content":"            super.peopleManager.addPerson(person);","lastModifiedDate":"2021-10-16"},{"lineNumber":50,"author":{"gitId":"andrewtkh1"},"content":"            Ui.printAddedOrderMessage(person);","lastModifiedDate":"2021-10-11"},{"lineNumber":51,"author":{"gitId":"WaiKit-nus"},"content":"        } else {","lastModifiedDate":"2021-10-08"},{"lineNumber":52,"author":{"gitId":"WaiKit-nus"},"content":"            throw new LotsException(\"Please enter a valid Add Command!\");","lastModifiedDate":"2021-10-11"},{"lineNumber":53,"author":{"gitId":"WaiKit-nus"},"content":"        }","lastModifiedDate":"2021-10-08"},{"lineNumber":54,"author":{"gitId":"WaiKit-nus"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":55,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":56,"author":{"gitId":"WaiKit-nus"},"content":"    /**","lastModifiedDate":"2021-10-08"},{"lineNumber":57,"author":{"gitId":"WaiKit-nus"},"content":"     * Regex to check User Input before passing onto the class.","lastModifiedDate":"2021-10-08"},{"lineNumber":58,"author":{"gitId":"andrewtkh1"},"content":"     *","lastModifiedDate":"2021-10-11"},{"lineNumber":59,"author":{"gitId":"WaiKit-nus"},"content":"     * @param input user input.","lastModifiedDate":"2021-10-08"},{"lineNumber":60,"author":{"gitId":"WaiKit-nus"},"content":"     * @return a boolean true if the user input passes the regex.","lastModifiedDate":"2021-10-08"},{"lineNumber":61,"author":{"gitId":"WaiKit-nus"},"content":"     * @throws IllegalArgumentException when the pattern for Regex is not able to be interpreted.","lastModifiedDate":"2021-10-11"},{"lineNumber":62,"author":{"gitId":"WaiKit-nus"},"content":"     */","lastModifiedDate":"2021-10-08"},{"lineNumber":63,"author":{"gitId":"WaiKit-nus"},"content":"    private boolean checkUserInput(String input) throws IllegalArgumentException {","lastModifiedDate":"2021-10-11"},{"lineNumber":64,"author":{"gitId":"WaiKit-nus"},"content":"        try {","lastModifiedDate":"2021-10-11"},{"lineNumber":65,"author":{"gitId":"WaiKit-nus"},"content":"            Pattern pattern \u003d Pattern.compile(","lastModifiedDate":"2021-10-08"},{"lineNumber":66,"author":{"gitId":"andrewtkh1"},"content":"                    \"^add \\\\/n [a-zA-Z0-9][\\\\w \\\\d]{0,50} \\\\/i \\\\d{1,2} \\\\/q \\\\d{1,3}$\",","lastModifiedDate":"2021-10-11"},{"lineNumber":67,"author":{"gitId":"WaiKit-nus"},"content":"                    Pattern.CASE_INSENSITIVE);","lastModifiedDate":"2021-10-08"},{"lineNumber":68,"author":{"gitId":"WaiKit-nus"},"content":"            Matcher matcher \u003d pattern.matcher(input);","lastModifiedDate":"2021-10-08"},{"lineNumber":69,"author":{"gitId":"WaiKit-nus"},"content":"            boolean matchFound \u003d matcher.find();","lastModifiedDate":"2021-10-08"},{"lineNumber":70,"author":{"gitId":"WaiKit-nus"},"content":"            return matchFound;","lastModifiedDate":"2021-10-08"},{"lineNumber":71,"author":{"gitId":"WaiKit-nus"},"content":"        } catch (IllegalArgumentException e) {","lastModifiedDate":"2021-10-11"},{"lineNumber":72,"author":{"gitId":"WaiKit-nus"},"content":"            return false;","lastModifiedDate":"2021-10-11"},{"lineNumber":73,"author":{"gitId":"WaiKit-nus"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":74,"author":{"gitId":"WaiKit-nus"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":75,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":76,"author":{"gitId":"WaiKit-nus"},"content":"    /**","lastModifiedDate":"2021-10-07"},{"lineNumber":77,"author":{"gitId":"WaiKit-nus"},"content":"     * Obtain index of \"/\" in the string to be use to split input strings into substrings.","lastModifiedDate":"2021-10-07"},{"lineNumber":78,"author":{"gitId":"andrewtkh1"},"content":"     *","lastModifiedDate":"2021-10-11"},{"lineNumber":79,"author":{"gitId":"WaiKit-nus"},"content":"     * @param input User input.","lastModifiedDate":"2021-10-07"},{"lineNumber":80,"author":{"gitId":"WaiKit-nus"},"content":"     * @return an array of index of \"/\".","lastModifiedDate":"2021-10-07"},{"lineNumber":81,"author":{"gitId":"WaiKit-nus"},"content":"     */","lastModifiedDate":"2021-10-07"},{"lineNumber":82,"author":{"gitId":"WaiKit-nus"},"content":"    private static int[] indexOfSlashes(String input) {","lastModifiedDate":"2021-10-07"},{"lineNumber":83,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":84,"author":{"gitId":"WaiKit-nus"},"content":"        int[] indexOfSlashes \u003d new int[3];","lastModifiedDate":"2021-10-07"},{"lineNumber":85,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":86,"author":{"gitId":"WaiKit-nus"},"content":"        //Index firstSlashIndex to secondSlashIndex holds Person Name.","lastModifiedDate":"2021-10-07"},{"lineNumber":87,"author":{"gitId":"WaiKit-nus"},"content":"        int firstSlashIndex \u003d input.indexOf(\"/\");","lastModifiedDate":"2021-10-07"},{"lineNumber":88,"author":{"gitId":"WaiKit-nus"},"content":"        //Index secondSlashIndex to thirdSlashIndex holds index of Food.","lastModifiedDate":"2021-10-07"},{"lineNumber":89,"author":{"gitId":"WaiKit-nus"},"content":"        int secondSlashIndex \u003d input.indexOf(\"/\", firstSlashIndex + 1);","lastModifiedDate":"2021-10-07"},{"lineNumber":90,"author":{"gitId":"WaiKit-nus"},"content":"        //Index thirdSlashIndex to last index holds food quantity.","lastModifiedDate":"2021-10-07"},{"lineNumber":91,"author":{"gitId":"WaiKit-nus"},"content":"        int thirdSlashIndex \u003d input.indexOf(\"/\", secondSlashIndex + 1);","lastModifiedDate":"2021-10-07"},{"lineNumber":92,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":93,"author":{"gitId":"WaiKit-nus"},"content":"        indexOfSlashes[0] \u003d firstSlashIndex;","lastModifiedDate":"2021-10-07"},{"lineNumber":94,"author":{"gitId":"WaiKit-nus"},"content":"        indexOfSlashes[1] \u003d secondSlashIndex;","lastModifiedDate":"2021-10-07"},{"lineNumber":95,"author":{"gitId":"WaiKit-nus"},"content":"        indexOfSlashes[2] \u003d thirdSlashIndex;","lastModifiedDate":"2021-10-07"},{"lineNumber":96,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":97,"author":{"gitId":"WaiKit-nus"},"content":"        return indexOfSlashes;","lastModifiedDate":"2021-10-07"},{"lineNumber":98,"author":{"gitId":"WaiKit-nus"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":99,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":100,"author":{"gitId":"WaiKit-nus"},"content":"    /**","lastModifiedDate":"2021-10-07"},{"lineNumber":101,"author":{"gitId":"WaiKit-nus"},"content":"     * Function used to parse the user input to get person name.","lastModifiedDate":"2021-10-07"},{"lineNumber":102,"author":{"gitId":"andrewtkh1"},"content":"     *","lastModifiedDate":"2021-10-11"},{"lineNumber":103,"author":{"gitId":"WaiKit-nus"},"content":"     * @param input              User input.","lastModifiedDate":"2021-10-07"},{"lineNumber":104,"author":{"gitId":"WaiKit-nus"},"content":"     * @param indexOfFirstSlash  First \"/\" index.","lastModifiedDate":"2021-10-07"},{"lineNumber":105,"author":{"gitId":"WaiKit-nus"},"content":"     * @param indexOfSecondSlash Second \"/\" index.","lastModifiedDate":"2021-10-07"},{"lineNumber":106,"author":{"gitId":"WaiKit-nus"},"content":"     * @return Person Name in String type.","lastModifiedDate":"2021-10-07"},{"lineNumber":107,"author":{"gitId":"WaiKit-nus"},"content":"     */","lastModifiedDate":"2021-10-07"},{"lineNumber":108,"author":{"gitId":"WaiKit-nus"},"content":"    private static String getPersonName(String input, int indexOfFirstSlash, int indexOfSecondSlash) {","lastModifiedDate":"2021-10-07"},{"lineNumber":109,"author":{"gitId":"andrewtkh1"},"content":"        String tempPersonName \u003d input.substring(indexOfFirstSlash + 2, indexOfSecondSlash - 1);","lastModifiedDate":"2021-10-11"},{"lineNumber":110,"author":{"gitId":"WaiKit-nus"},"content":"        assert tempPersonName !\u003d null : \"Input to Person Name cannot be NULL!\";","lastModifiedDate":"2021-10-13"},{"lineNumber":111,"author":{"gitId":"WaiKit-nus"},"content":"        return tempPersonName.trim();","lastModifiedDate":"2021-10-08"},{"lineNumber":112,"author":{"gitId":"WaiKit-nus"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":113,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":114,"author":{"gitId":"WaiKit-nus"},"content":"    /**","lastModifiedDate":"2021-10-07"},{"lineNumber":115,"author":{"gitId":"WaiKit-nus"},"content":"     * Function used to parse the user input to get food index.","lastModifiedDate":"2021-10-07"},{"lineNumber":116,"author":{"gitId":"andrewtkh1"},"content":"     *","lastModifiedDate":"2021-10-11"},{"lineNumber":117,"author":{"gitId":"WaiKit-nus"},"content":"     * @param input              User input.","lastModifiedDate":"2021-10-07"},{"lineNumber":118,"author":{"gitId":"WaiKit-nus"},"content":"     * @param indexOfSecondSlash Second \"/\" index.","lastModifiedDate":"2021-10-07"},{"lineNumber":119,"author":{"gitId":"WaiKit-nus"},"content":"     * @param indexOfThirdSlash  Third \"/\" index.","lastModifiedDate":"2021-10-07"},{"lineNumber":120,"author":{"gitId":"WaiKit-nus"},"content":"     * @return Food index in int type.","lastModifiedDate":"2021-10-07"},{"lineNumber":121,"author":{"gitId":"WaiKit-nus"},"content":"     * @throw NumberFormatException when the index is out of range.","lastModifiedDate":"2021-10-11"},{"lineNumber":122,"author":{"gitId":"WaiKit-nus"},"content":"     */","lastModifiedDate":"2021-10-07"},{"lineNumber":123,"author":{"gitId":"WaiKit-nus"},"content":"    private static int getFoodIndex(String input, int indexOfSecondSlash, int indexOfThirdSlash)","lastModifiedDate":"2021-10-11"},{"lineNumber":124,"author":{"gitId":"WaiKit-nus"},"content":"            throws NumberFormatException, LotsException {","lastModifiedDate":"2021-10-11"},{"lineNumber":125,"author":{"gitId":"andrewtkh1"},"content":"        String subStringFoodIndex \u003d input.substring(indexOfSecondSlash + 2, indexOfThirdSlash - 1).trim();","lastModifiedDate":"2021-10-11"},{"lineNumber":126,"author":{"gitId":"WaiKit-nus"},"content":"        assert subStringFoodIndex !\u003d \"\" : \"Input to AddCommand Cannot be NULL!\";","lastModifiedDate":"2021-10-13"},{"lineNumber":127,"author":{"gitId":"WaiKit-nus"},"content":"        try {","lastModifiedDate":"2021-10-08"},{"lineNumber":128,"author":{"gitId":"WaiKit-nus"},"content":"            int foodIndex \u003d Integer.parseInt(subStringFoodIndex);","lastModifiedDate":"2021-10-08"},{"lineNumber":129,"author":{"gitId":"andrewtkh1"},"content":"            if (foodIndex \u003e Menu.TOTAL_MENU_ITEMS || foodIndex \u003c\u003d 0) {","lastModifiedDate":"2021-10-11"},{"lineNumber":130,"author":{"gitId":"WaiKit-nus"},"content":"                throw new LotsException(\"Index out of range. Please try again!\");","lastModifiedDate":"2021-10-12"},{"lineNumber":131,"author":{"gitId":"WaiKit-nus"},"content":"            } else {","lastModifiedDate":"2021-10-08"},{"lineNumber":132,"author":{"gitId":"WaiKit-nus"},"content":"                return foodIndex;","lastModifiedDate":"2021-10-07"},{"lineNumber":133,"author":{"gitId":"WaiKit-nus"},"content":"            }","lastModifiedDate":"2021-10-07"},{"lineNumber":134,"author":{"gitId":"WaiKit-nus"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2021-10-08"},{"lineNumber":135,"author":{"gitId":"WaiKit-nus"},"content":"            String errorMsg \u003d \"Please make sure the Food Index is keyed in correctly.\";","lastModifiedDate":"2021-10-08"},{"lineNumber":136,"author":{"gitId":"WaiKit-nus"},"content":"            throw new LotsException(errorMsg);","lastModifiedDate":"2021-10-11"},{"lineNumber":137,"author":{"gitId":"WaiKit-nus"},"content":"        }","lastModifiedDate":"2021-10-08"},{"lineNumber":138,"author":{"gitId":"WaiKit-nus"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":139,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":140,"author":{"gitId":"WaiKit-nus"},"content":"    /**","lastModifiedDate":"2021-10-07"},{"lineNumber":141,"author":{"gitId":"WaiKit-nus"},"content":"     * Function used to parse the user input to get food index.","lastModifiedDate":"2021-10-07"},{"lineNumber":142,"author":{"gitId":"andrewtkh1"},"content":"     *","lastModifiedDate":"2021-10-11"},{"lineNumber":143,"author":{"gitId":"WaiKit-nus"},"content":"     * @param input             User input.","lastModifiedDate":"2021-10-07"},{"lineNumber":144,"author":{"gitId":"WaiKit-nus"},"content":"     * @param indexOfThirdSlash Third \"/\" index.","lastModifiedDate":"2021-10-07"},{"lineNumber":145,"author":{"gitId":"WaiKit-nus"},"content":"     * @return Food Quantity in int type.","lastModifiedDate":"2021-10-07"},{"lineNumber":146,"author":{"gitId":"WaiKit-nus"},"content":"     * @throws NumberFormatException when the quantity is out of range.","lastModifiedDate":"2021-10-11"},{"lineNumber":147,"author":{"gitId":"WaiKit-nus"},"content":"     */","lastModifiedDate":"2021-10-07"},{"lineNumber":148,"author":{"gitId":"WaiKit-nus"},"content":"    private static int getFoodQuantity(String input, int indexOfThirdSlash)","lastModifiedDate":"2021-10-11"},{"lineNumber":149,"author":{"gitId":"WaiKit-nus"},"content":"            throws NumberFormatException, LotsException {","lastModifiedDate":"2021-10-11"},{"lineNumber":150,"author":{"gitId":"andrewtkh1"},"content":"        String subStringFoodQuantity \u003d input.substring(indexOfThirdSlash + 2).trim();","lastModifiedDate":"2021-10-11"},{"lineNumber":151,"author":{"gitId":"WaiKit-nus"},"content":"        assert subStringFoodQuantity !\u003d \"\" : \"Input to AddCommand Cannot be NULL!\";","lastModifiedDate":"2021-10-13"},{"lineNumber":152,"author":{"gitId":"WaiKit-nus"},"content":"        try {","lastModifiedDate":"2021-10-08"},{"lineNumber":153,"author":{"gitId":"WaiKit-nus"},"content":"            int foodQuantity \u003d Integer.parseInt(subStringFoodQuantity);","lastModifiedDate":"2021-10-08"},{"lineNumber":154,"author":{"gitId":"WaiKit-nus"},"content":"            if (foodQuantity \u003e 1000 || foodQuantity \u003c\u003d 0) {","lastModifiedDate":"2021-10-12"},{"lineNumber":155,"author":{"gitId":"WaiKit-nus"},"content":"                throw new LotsException(\"Quantity out of range(1 to 999) , please try again!\");","lastModifiedDate":"2021-10-12"},{"lineNumber":156,"author":{"gitId":"WaiKit-nus"},"content":"            } else {","lastModifiedDate":"2021-10-08"},{"lineNumber":157,"author":{"gitId":"WaiKit-nus"},"content":"                return foodQuantity;","lastModifiedDate":"2021-10-07"},{"lineNumber":158,"author":{"gitId":"WaiKit-nus"},"content":"            }","lastModifiedDate":"2021-10-07"},{"lineNumber":159,"author":{"gitId":"WaiKit-nus"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2021-10-08"},{"lineNumber":160,"author":{"gitId":"WaiKit-nus"},"content":"            String errorMsg \u003d \"Please make sure the Food Quantity is keyed in correctly.\";","lastModifiedDate":"2021-10-08"},{"lineNumber":161,"author":{"gitId":"WaiKit-nus"},"content":"            throw new LotsException(errorMsg);","lastModifiedDate":"2021-10-11"},{"lineNumber":162,"author":{"gitId":"WaiKit-nus"},"content":"        }","lastModifiedDate":"2021-10-08"},{"lineNumber":163,"author":{"gitId":"WaiKit-nus"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":164,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":165,"author":{"gitId":"WaiKit-nus"},"content":"}","lastModifiedDate":"2021-10-07"}],"authorContributionMap":{"andrewtkh1":23,"WaiKit-nus":142}},{"path":"src/main/java/seedu/duke/command/ByeCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"andrewtkh1"},"content":"package seedu.duke.command;","lastModifiedDate":"2021-10-12"},{"lineNumber":2,"author":{"gitId":"mohamad-adam8991"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":3,"author":{"gitId":"mohamad-adam8991"},"content":"public class ByeCommand extends Command {","lastModifiedDate":"2021-10-11"},{"lineNumber":4,"author":{"gitId":"mohamad-adam8991"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":5,"author":{"gitId":"mohamad-adam8991"},"content":"    public static final String COMMAND_WORD \u003d \"bye\";","lastModifiedDate":"2021-10-11"},{"lineNumber":6,"author":{"gitId":"mohamad-adam8991"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":7,"author":{"gitId":"mohamad-adam8991"},"content":"    @Override","lastModifiedDate":"2021-10-11"},{"lineNumber":8,"author":{"gitId":"mohamad-adam8991"},"content":"    public void execute() {","lastModifiedDate":"2021-10-11"},{"lineNumber":9,"author":{"gitId":"mohamad-adam8991"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":10,"author":{"gitId":"mohamad-adam8991"},"content":"}","lastModifiedDate":"2021-10-11"}],"authorContributionMap":{"mohamad-adam8991":9,"andrewtkh1":1}},{"path":"src/main/java/seedu/duke/command/Command.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"andrewtkh1"},"content":"package seedu.duke.command;","lastModifiedDate":"2021-10-12"},{"lineNumber":2,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":3,"author":{"gitId":"andrewtkh1"},"content":"import seedu.duke.exceptions.LotsException;","lastModifiedDate":"2021-10-12"},{"lineNumber":4,"author":{"gitId":"andrewtkh1"},"content":"import seedu.duke.PeopleManager;","lastModifiedDate":"2021-10-12"},{"lineNumber":5,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":6,"author":{"gitId":"markuslyq"},"content":"public class Command {","lastModifiedDate":"2021-10-05"},{"lineNumber":7,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":8,"author":{"gitId":"markuslyq"},"content":"    protected PeopleManager peopleManager;","lastModifiedDate":"2021-10-08"},{"lineNumber":9,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":10,"author":{"gitId":"markuslyq"},"content":"    //Constructor","lastModifiedDate":"2021-10-05"},{"lineNumber":11,"author":{"gitId":"markuslyq"},"content":"    public Command() {","lastModifiedDate":"2021-10-05"},{"lineNumber":12,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":13,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":14,"author":{"gitId":"markuslyq"},"content":"    /**","lastModifiedDate":"2021-10-05"},{"lineNumber":15,"author":{"gitId":"markuslyq"},"content":"     * Initialise the person list to be edited by the user.","lastModifiedDate":"2021-10-05"},{"lineNumber":16,"author":{"gitId":"markuslyq"},"content":"     */","lastModifiedDate":"2021-10-05"},{"lineNumber":17,"author":{"gitId":"markuslyq"},"content":"    public void setData(PeopleManager manager) {","lastModifiedDate":"2021-10-08"},{"lineNumber":18,"author":{"gitId":"markuslyq"},"content":"        peopleManager \u003d manager;","lastModifiedDate":"2021-10-08"},{"lineNumber":19,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":20,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":21,"author":{"gitId":"markuslyq"},"content":"    /**","lastModifiedDate":"2021-10-05"},{"lineNumber":22,"author":{"gitId":"markuslyq"},"content":"     * Execute different set of instructions in the subclass based on the user\u0027s command.","lastModifiedDate":"2021-10-05"},{"lineNumber":23,"author":{"gitId":"markuslyq"},"content":"     */","lastModifiedDate":"2021-10-05"},{"lineNumber":24,"author":{"gitId":"markuslyq"},"content":"    public void execute() throws LotsException {","lastModifiedDate":"2021-10-08"},{"lineNumber":25,"author":{"gitId":"markuslyq"},"content":"        throw new UnsupportedOperationException(\"This method is to be implemented by child classes\");","lastModifiedDate":"2021-10-05"},{"lineNumber":26,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":27,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":28,"author":{"gitId":"markuslyq"},"content":"}","lastModifiedDate":"2021-10-05"}],"authorContributionMap":{"markuslyq":24,"andrewtkh1":4}},{"path":"src/main/java/seedu/duke/command/DeleteCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"andrewtkh1"},"content":"package seedu.duke.command;","lastModifiedDate":"2021-10-12"},{"lineNumber":2,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":3,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":4,"author":{"gitId":"andrewtkh1"},"content":"import seedu.duke.exceptions.LotsException;","lastModifiedDate":"2021-10-12"},{"lineNumber":5,"author":{"gitId":"andrewtkh1"},"content":"import seedu.duke.PeopleManager;","lastModifiedDate":"2021-10-12"},{"lineNumber":6,"author":{"gitId":"andrewtkh1"},"content":"import seedu.duke.Person;","lastModifiedDate":"2021-10-12"},{"lineNumber":7,"author":{"gitId":"andrewtkh1"},"content":"import seedu.duke.Ui;","lastModifiedDate":"2021-10-12"},{"lineNumber":8,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":9,"author":{"gitId":"markuslyq"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2021-10-12"},{"lineNumber":10,"author":{"gitId":"markuslyq"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2021-10-12"},{"lineNumber":11,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":12,"author":{"gitId":"markuslyq"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2021-10-08"},{"lineNumber":13,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":14,"author":{"gitId":"markuslyq"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";","lastModifiedDate":"2021-10-08"},{"lineNumber":15,"author":{"gitId":"markuslyq"},"content":"    private int personIndex;","lastModifiedDate":"2021-10-08"},{"lineNumber":16,"author":{"gitId":"andrewtkh1"},"content":"    private int foodIndex;","lastModifiedDate":"2021-10-12"},{"lineNumber":17,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":18,"author":{"gitId":"markuslyq"},"content":"    /**","lastModifiedDate":"2021-10-08"},{"lineNumber":19,"author":{"gitId":"markuslyq"},"content":"     * Splits the input given the regular expression of a whitespace and","lastModifiedDate":"2021-10-08"},{"lineNumber":20,"author":{"gitId":"markuslyq"},"content":"     * initialise the personIndex and orderIndex.","lastModifiedDate":"2021-10-08"},{"lineNumber":21,"author":{"gitId":"markuslyq"},"content":"     *","lastModifiedDate":"2021-10-08"},{"lineNumber":22,"author":{"gitId":"markuslyq"},"content":"     * @param input The entire line of command entered by the user.","lastModifiedDate":"2021-10-08"},{"lineNumber":23,"author":{"gitId":"markuslyq"},"content":"     * @throws LotsException If there is no input after the delete command or when the personIndex is not an integer.","lastModifiedDate":"2021-10-08"},{"lineNumber":24,"author":{"gitId":"markuslyq"},"content":"     */","lastModifiedDate":"2021-10-08"},{"lineNumber":25,"author":{"gitId":"markuslyq"},"content":"    public DeleteCommand(String input) throws LotsException {","lastModifiedDate":"2021-10-08"},{"lineNumber":26,"author":{"gitId":"markuslyq"},"content":"        String[] splitInput \u003d input.split(\" \");","lastModifiedDate":"2021-10-08"},{"lineNumber":27,"author":{"gitId":"markuslyq"},"content":"        if (!checkUserInput(input)) {","lastModifiedDate":"2021-10-12"},{"lineNumber":28,"author":{"gitId":"markuslyq"},"content":"            throw new LotsException(\"Please enter a valid person\u0027s index followed by the order index! i.e. delete 1/a\");","lastModifiedDate":"2021-10-12"},{"lineNumber":29,"author":{"gitId":"markuslyq"},"content":"        }","lastModifiedDate":"2021-10-12"},{"lineNumber":30,"author":{"gitId":"markuslyq"},"content":"        assert checkUserInput(input) \u003d\u003d true : \"Invalid delete input command\";","lastModifiedDate":"2021-10-12"},{"lineNumber":31,"author":{"gitId":"markuslyq"},"content":"        try {","lastModifiedDate":"2021-10-08"},{"lineNumber":32,"author":{"gitId":"markuslyq"},"content":"            personIndex \u003d getPersonIndex(splitInput[1]);","lastModifiedDate":"2021-10-08"},{"lineNumber":33,"author":{"gitId":"andrewtkh1"},"content":"            foodIndex \u003d getOrderIndex(splitInput[1]);","lastModifiedDate":"2021-10-12"},{"lineNumber":34,"author":{"gitId":"markuslyq"},"content":"        } catch (NullPointerException | IndexOutOfBoundsException | NumberFormatException e) {","lastModifiedDate":"2021-10-08"},{"lineNumber":35,"author":{"gitId":"markuslyq"},"content":"            throw new LotsException(\"Please enter a valid person\u0027s index followed by the order index! i.e. delete 1/a\");","lastModifiedDate":"2021-10-12"},{"lineNumber":36,"author":{"gitId":"markuslyq"},"content":"        }","lastModifiedDate":"2021-10-12"},{"lineNumber":37,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":38,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":39,"author":{"gitId":"markuslyq"},"content":"    /**","lastModifiedDate":"2021-10-12"},{"lineNumber":40,"author":{"gitId":"markuslyq"},"content":"     * Regex to check User Input before passing onto the class.","lastModifiedDate":"2021-10-12"},{"lineNumber":41,"author":{"gitId":"markuslyq"},"content":"     *","lastModifiedDate":"2021-10-12"},{"lineNumber":42,"author":{"gitId":"markuslyq"},"content":"     * @param input user input.","lastModifiedDate":"2021-10-12"},{"lineNumber":43,"author":{"gitId":"markuslyq"},"content":"     * @return a boolean true if the user input passes the regex.","lastModifiedDate":"2021-10-12"},{"lineNumber":44,"author":{"gitId":"markuslyq"},"content":"     * @throws IllegalArgumentException when the pattern for Regex is not able to be interpreted.","lastModifiedDate":"2021-10-12"},{"lineNumber":45,"author":{"gitId":"markuslyq"},"content":"     */","lastModifiedDate":"2021-10-12"},{"lineNumber":46,"author":{"gitId":"markuslyq"},"content":"    private boolean checkUserInput(String input) throws IllegalArgumentException {","lastModifiedDate":"2021-10-12"},{"lineNumber":47,"author":{"gitId":"markuslyq"},"content":"        try {","lastModifiedDate":"2021-10-12"},{"lineNumber":48,"author":{"gitId":"markuslyq"},"content":"            Pattern pattern \u003d Pattern.compile(","lastModifiedDate":"2021-10-12"},{"lineNumber":49,"author":{"gitId":"andrewtkh1"},"content":"                \"^delete [1-9][0-9]?/[1-9][0-9]?$\", //max 99 food orders per pax","lastModifiedDate":"2021-10-16"},{"lineNumber":50,"author":{"gitId":"markuslyq"},"content":"                Pattern.CASE_INSENSITIVE);","lastModifiedDate":"2021-10-12"},{"lineNumber":51,"author":{"gitId":"markuslyq"},"content":"            Matcher matcher \u003d pattern.matcher(input);","lastModifiedDate":"2021-10-12"},{"lineNumber":52,"author":{"gitId":"markuslyq"},"content":"            return matcher.find();","lastModifiedDate":"2021-10-12"},{"lineNumber":53,"author":{"gitId":"markuslyq"},"content":"        } catch (IllegalArgumentException e) {","lastModifiedDate":"2021-10-12"},{"lineNumber":54,"author":{"gitId":"markuslyq"},"content":"            return false;","lastModifiedDate":"2021-10-12"},{"lineNumber":55,"author":{"gitId":"markuslyq"},"content":"        }","lastModifiedDate":"2021-10-08"},{"lineNumber":56,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":57,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":58,"author":{"gitId":"markuslyq"},"content":"    /**","lastModifiedDate":"2021-10-08"},{"lineNumber":59,"author":{"gitId":"markuslyq"},"content":"     * Get the index of the person whose order is to be deleted.","lastModifiedDate":"2021-10-08"},{"lineNumber":60,"author":{"gitId":"markuslyq"},"content":"     *","lastModifiedDate":"2021-10-08"},{"lineNumber":61,"author":{"gitId":"markuslyq"},"content":"     * @param deleteParams String from the user input after the delete command word.","lastModifiedDate":"2021-10-08"},{"lineNumber":62,"author":{"gitId":"markuslyq"},"content":"     * @return Returns the index of the person in the form of an integer.","lastModifiedDate":"2021-10-08"},{"lineNumber":63,"author":{"gitId":"andrewtkh1"},"content":"     * @throws IndexOutOfBoundsException When \"/\" is not found in the string.","lastModifiedDate":"2021-10-08"},{"lineNumber":64,"author":{"gitId":"andrewtkh1"},"content":"     * @throws NumberFormatException     When the person index can\u0027t be parsed into an integer.","lastModifiedDate":"2021-10-08"},{"lineNumber":65,"author":{"gitId":"markuslyq"},"content":"     */","lastModifiedDate":"2021-10-08"},{"lineNumber":66,"author":{"gitId":"andrewtkh1"},"content":"    private int getPersonIndex(String deleteParams) throws IndexOutOfBoundsException, NumberFormatException {","lastModifiedDate":"2021-10-08"},{"lineNumber":67,"author":{"gitId":"markuslyq"},"content":"        int slashIndex \u003d deleteParams.indexOf(\u0027/\u0027);","lastModifiedDate":"2021-10-08"},{"lineNumber":68,"author":{"gitId":"markuslyq"},"content":"        String personIndexInString \u003d deleteParams.substring(0, slashIndex);","lastModifiedDate":"2021-10-08"},{"lineNumber":69,"author":{"gitId":"andrewtkh1"},"content":"        return Integer.parseInt(personIndexInString) - 1;","lastModifiedDate":"2021-10-11"},{"lineNumber":70,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":71,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":72,"author":{"gitId":"markuslyq"},"content":"    /**","lastModifiedDate":"2021-10-08"},{"lineNumber":73,"author":{"gitId":"markuslyq"},"content":"     * Get the index of the order to be deleted.","lastModifiedDate":"2021-10-08"},{"lineNumber":74,"author":{"gitId":"markuslyq"},"content":"     *","lastModifiedDate":"2021-10-08"},{"lineNumber":75,"author":{"gitId":"markuslyq"},"content":"     * @param deleteParams String from the user input after the delete command word.","lastModifiedDate":"2021-10-08"},{"lineNumber":76,"author":{"gitId":"markuslyq"},"content":"     * @return Returns the index of the order to be deleted in the form of an integer.","lastModifiedDate":"2021-10-12"},{"lineNumber":77,"author":{"gitId":"andrewtkh1"},"content":"     * @throws IndexOutOfBoundsException When \"/\" is not found in the string.","lastModifiedDate":"2021-10-08"},{"lineNumber":78,"author":{"gitId":"markuslyq"},"content":"     * @throws LotsException             When the order index is out of range.","lastModifiedDate":"2021-10-11"},{"lineNumber":79,"author":{"gitId":"markuslyq"},"content":"     */","lastModifiedDate":"2021-10-08"},{"lineNumber":80,"author":{"gitId":"markuslyq"},"content":"    private int getOrderIndex(String deleteParams) throws IndexOutOfBoundsException, LotsException {","lastModifiedDate":"2021-10-11"},{"lineNumber":81,"author":{"gitId":"markuslyq"},"content":"        int slashIndex \u003d deleteParams.indexOf(\u0027/\u0027);","lastModifiedDate":"2021-10-08"},{"lineNumber":82,"author":{"gitId":"markuslyq"},"content":"        String orderIndexInString \u003d deleteParams.substring(slashIndex + 1);","lastModifiedDate":"2021-10-16"},{"lineNumber":83,"author":{"gitId":"markuslyq"},"content":"        int orderIndexInInteger \u003d Integer.parseInt(orderIndexInString) - 1;","lastModifiedDate":"2021-10-16"},{"lineNumber":84,"author":{"gitId":"markuslyq"},"content":"        if (orderIndexInInteger \u003c 0) {","lastModifiedDate":"2021-10-11"},{"lineNumber":85,"author":{"gitId":"markuslyq"},"content":"            throw new LotsException(\"Please enter a valid order index!\");","lastModifiedDate":"2021-10-11"},{"lineNumber":86,"author":{"gitId":"markuslyq"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":87,"author":{"gitId":"markuslyq"},"content":"        assert orderIndexInInteger \u003e\u003d 0 : \"Order index cannot be negative.\";","lastModifiedDate":"2021-10-12"},{"lineNumber":88,"author":{"gitId":"markuslyq"},"content":"        return orderIndexInInteger;","lastModifiedDate":"2021-10-11"},{"lineNumber":89,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":90,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":91,"author":{"gitId":"markuslyq"},"content":"    /**","lastModifiedDate":"2021-10-08"},{"lineNumber":92,"author":{"gitId":"markuslyq"},"content":"     * Deletes a specific order from a particular person.","lastModifiedDate":"2021-10-08"},{"lineNumber":93,"author":{"gitId":"markuslyq"},"content":"     *","lastModifiedDate":"2021-10-08"},{"lineNumber":94,"author":{"gitId":"markuslyq"},"content":"     * @throws LotsException If the order or person\u0027s index to be deleted is out of bounds.","lastModifiedDate":"2021-10-08"},{"lineNumber":95,"author":{"gitId":"markuslyq"},"content":"     */","lastModifiedDate":"2021-10-08"},{"lineNumber":96,"author":{"gitId":"markuslyq"},"content":"    @Override","lastModifiedDate":"2021-10-08"},{"lineNumber":97,"author":{"gitId":"markuslyq"},"content":"    public void execute() throws LotsException {","lastModifiedDate":"2021-10-08"},{"lineNumber":98,"author":{"gitId":"markuslyq"},"content":"        try {","lastModifiedDate":"2021-10-08"},{"lineNumber":99,"author":{"gitId":"andrewtkh1"},"content":"            deleteOrder(super.peopleManager);","lastModifiedDate":"2021-10-16"},{"lineNumber":100,"author":{"gitId":"markuslyq"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2021-10-08"},{"lineNumber":101,"author":{"gitId":"markuslyq"},"content":"            throw new LotsException(\"Please enter a valid person\u0027s index followed by the order index! i.e. delete 1/a\");","lastModifiedDate":"2021-10-12"},{"lineNumber":102,"author":{"gitId":"markuslyq"},"content":"        }","lastModifiedDate":"2021-10-08"},{"lineNumber":103,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":104,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":105,"author":{"gitId":"markuslyq"},"content":"    /**","lastModifiedDate":"2021-10-08"},{"lineNumber":106,"author":{"gitId":"markuslyq"},"content":"     * Change the quantity of that particular order index to 0.","lastModifiedDate":"2021-10-08"},{"lineNumber":107,"author":{"gitId":"markuslyq"},"content":"     *","lastModifiedDate":"2021-10-08"},{"lineNumber":108,"author":{"gitId":"markuslyq"},"content":"     * @param manager The list of people that are ordering.","lastModifiedDate":"2021-10-08"},{"lineNumber":109,"author":{"gitId":"andrewtkh1"},"content":"     * @throws IndexOutOfBoundsException Throws when personIndex given is larger than the number of people.","lastModifiedDate":"2021-10-08"},{"lineNumber":110,"author":{"gitId":"markuslyq"},"content":"     */","lastModifiedDate":"2021-10-08"},{"lineNumber":111,"author":{"gitId":"markuslyq"},"content":"    private void deleteOrder(PeopleManager manager) throws IndexOutOfBoundsException, LotsException {","lastModifiedDate":"2021-10-11"},{"lineNumber":112,"author":{"gitId":"markuslyq"},"content":"        if (manager.isEmpty()) {","lastModifiedDate":"2021-10-12"},{"lineNumber":113,"author":{"gitId":"markuslyq"},"content":"            Ui.printEmptyMessage();","lastModifiedDate":"2021-10-12"},{"lineNumber":114,"author":{"gitId":"markuslyq"},"content":"        } else {","lastModifiedDate":"2021-10-12"},{"lineNumber":115,"author":{"gitId":"markuslyq"},"content":"            Person personToDeleteFrom \u003d manager.getPerson(personIndex);","lastModifiedDate":"2021-10-11"},{"lineNumber":116,"author":{"gitId":"markuslyq"},"content":"            assert personToDeleteFrom !\u003d null : \"Person does not exists.\";","lastModifiedDate":"2021-10-12"},{"lineNumber":117,"author":{"gitId":"andrewtkh1"},"content":"            personToDeleteFrom.deleteParticularOrder(foodIndex);","lastModifiedDate":"2021-10-12"},{"lineNumber":118,"author":{"gitId":"markuslyq"},"content":"            Ui.printDeleteMessage(personToDeleteFrom);","lastModifiedDate":"2021-10-12"},{"lineNumber":119,"author":{"gitId":"markuslyq"},"content":"            deletePersonIfEmpty(manager, personToDeleteFrom);","lastModifiedDate":"2021-10-12"},{"lineNumber":120,"author":{"gitId":"markuslyq"},"content":"        }","lastModifiedDate":"2021-10-12"},{"lineNumber":121,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":122,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":123,"author":{"gitId":"markuslyq"},"content":"    /**","lastModifiedDate":"2021-10-12"},{"lineNumber":124,"author":{"gitId":"markuslyq"},"content":"     * Removes the person the list if his individual order list is empty.","lastModifiedDate":"2021-10-12"},{"lineNumber":125,"author":{"gitId":"markuslyq"},"content":"     *","lastModifiedDate":"2021-10-12"},{"lineNumber":126,"author":{"gitId":"markuslyq"},"content":"     * @param manager            The list of people that are ordering.","lastModifiedDate":"2021-10-12"},{"lineNumber":127,"author":{"gitId":"markuslyq"},"content":"     * @param personToDeleteFrom Person whose order is to be deleted from.","lastModifiedDate":"2021-10-12"},{"lineNumber":128,"author":{"gitId":"markuslyq"},"content":"     * @throws LotsException When there is an error in removing the person from the people manager.","lastModifiedDate":"2021-10-12"},{"lineNumber":129,"author":{"gitId":"markuslyq"},"content":"     */","lastModifiedDate":"2021-10-12"},{"lineNumber":130,"author":{"gitId":"markuslyq"},"content":"    private void deletePersonIfEmpty(PeopleManager manager, Person personToDeleteFrom) throws LotsException {","lastModifiedDate":"2021-10-12"},{"lineNumber":131,"author":{"gitId":"markuslyq"},"content":"        if (personToDeleteFrom.isEmpty()) {","lastModifiedDate":"2021-10-12"},{"lineNumber":132,"author":{"gitId":"andrewtkh1"},"content":"            manager.deletePerson(personIndex);","lastModifiedDate":"2021-10-11"},{"lineNumber":133,"author":{"gitId":"markuslyq"},"content":"        }","lastModifiedDate":"2021-10-12"},{"lineNumber":134,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":135,"author":{"gitId":"markuslyq"},"content":"}","lastModifiedDate":"2021-10-08"}],"authorContributionMap":{"markuslyq":116,"andrewtkh1":19}},{"path":"src/main/java/seedu/duke/command/MenuCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"andrewtkh1"},"content":"package seedu.duke.command;","lastModifiedDate":"2021-10-12"},{"lineNumber":2,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":3,"author":{"gitId":"andrewtkh1"},"content":"import seedu.duke.Menu;","lastModifiedDate":"2021-10-12"},{"lineNumber":4,"author":{"gitId":"andrewtkh1"},"content":"import seedu.duke.Ui;","lastModifiedDate":"2021-10-12"},{"lineNumber":5,"author":{"gitId":"thaddyyz"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":6,"author":{"gitId":"thaddyyz"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-09"},{"lineNumber":7,"author":{"gitId":"thaddyyz"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":8,"author":{"gitId":"thaddyyz"},"content":"public class MenuCommand extends Command {","lastModifiedDate":"2021-10-09"},{"lineNumber":9,"author":{"gitId":"thaddyyz"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":10,"author":{"gitId":"andrewtkh1"},"content":"    public static final String COMMAND_WORD \u003d \"menu\";","lastModifiedDate":"2021-10-10"},{"lineNumber":11,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":12,"author":{"gitId":"andrewtkh1"},"content":"    private ArrayList\u003cDouble\u003e priceList;","lastModifiedDate":"2021-10-16"},{"lineNumber":13,"author":{"gitId":"andrewtkh1"},"content":"    private ArrayList\u003cString\u003e foodList;","lastModifiedDate":"2021-10-16"},{"lineNumber":14,"author":{"gitId":"thaddyyz"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":15,"author":{"gitId":"thaddyyz"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":16,"author":{"gitId":"thaddyyz"},"content":"     * MenuCommand calls access to file to retrieve stored menu.","lastModifiedDate":"2021-10-10"},{"lineNumber":17,"author":{"gitId":"andrewtkh1"},"content":"     */","lastModifiedDate":"2021-10-10"},{"lineNumber":18,"author":{"gitId":"andrewtkh1"},"content":"    public MenuCommand() {","lastModifiedDate":"2021-10-12"},{"lineNumber":19,"author":{"gitId":"andrewtkh1"},"content":"        priceList \u003d Menu.PRICELIST;","lastModifiedDate":"2021-10-12"},{"lineNumber":20,"author":{"gitId":"andrewtkh1"},"content":"        foodList \u003d Menu.FOODLIST;","lastModifiedDate":"2021-10-12"},{"lineNumber":21,"author":{"gitId":"thaddyyz"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":22,"author":{"gitId":"thaddyyz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":23,"author":{"gitId":"thaddyyz"},"content":"    /**","lastModifiedDate":"2021-10-10"},{"lineNumber":24,"author":{"gitId":"andrewtkh1"},"content":"     * Prints menu in the format of index, foodname and price with column headers.","lastModifiedDate":"2021-10-10"},{"lineNumber":25,"author":{"gitId":"thaddyyz"},"content":"     */","lastModifiedDate":"2021-10-10"},{"lineNumber":26,"author":{"gitId":"thaddyyz"},"content":"    @Override","lastModifiedDate":"2021-10-10"},{"lineNumber":27,"author":{"gitId":"thaddyyz"},"content":"    public void execute() {","lastModifiedDate":"2021-10-10"},{"lineNumber":28,"author":{"gitId":"thaddyyz"},"content":"        Ui.printMenuHeader();","lastModifiedDate":"2021-10-09"},{"lineNumber":29,"author":{"gitId":"thaddyyz"},"content":"        for (int i \u003d 0; i \u003c foodList.size(); i++) {","lastModifiedDate":"2021-10-09"},{"lineNumber":30,"author":{"gitId":"thaddyyz"},"content":"            Ui.printMenu(i + 1, foodList.get(i), priceList.get(i));","lastModifiedDate":"2021-10-09"},{"lineNumber":31,"author":{"gitId":"thaddyyz"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":32,"author":{"gitId":"andrewtkh1"},"content":"        Ui.printWithBorder(\"\");","lastModifiedDate":"2021-10-11"},{"lineNumber":33,"author":{"gitId":"thaddyyz"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":34,"author":{"gitId":"thaddyyz"},"content":"}","lastModifiedDate":"2021-10-09"}],"authorContributionMap":{"andrewtkh1":14,"thaddyyz":20}},{"path":"src/main/java/seedu/duke/command/OrdersCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"andrewtkh1"},"content":"package seedu.duke.command;","lastModifiedDate":"2021-10-12"},{"lineNumber":2,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":3,"author":{"gitId":"andrewtkh1"},"content":"import seedu.duke.Ui;","lastModifiedDate":"2021-10-12"},{"lineNumber":4,"author":{"gitId":"mohamad-adam8991"},"content":"import seedu.duke.exceptions.LotsException;","lastModifiedDate":"2021-10-12"},{"lineNumber":5,"author":{"gitId":"mohamad-adam8991"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":6,"author":{"gitId":"mohamad-adam8991"},"content":"public class OrdersCommand extends Command {","lastModifiedDate":"2021-10-08"},{"lineNumber":7,"author":{"gitId":"mohamad-adam8991"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":8,"author":{"gitId":"mohamad-adam8991"},"content":"    public static final String COMMAND_WORD \u003d \"list\";","lastModifiedDate":"2021-10-08"},{"lineNumber":9,"author":{"gitId":"mohamad-adam8991"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":10,"author":{"gitId":"mohamad-adam8991"},"content":"    /**","lastModifiedDate":"2021-10-12"},{"lineNumber":11,"author":{"gitId":"mohamad-adam8991"},"content":"     * Checks input for characters after list command.","lastModifiedDate":"2021-10-12"},{"lineNumber":12,"author":{"gitId":"mohamad-adam8991"},"content":"     *","lastModifiedDate":"2021-10-12"},{"lineNumber":13,"author":{"gitId":"mohamad-adam8991"},"content":"     * @param input Input entered by the user.","lastModifiedDate":"2021-10-12"},{"lineNumber":14,"author":{"gitId":"mohamad-adam8991"},"content":"     * @throws LotsException If characters exist in the input after the list command.","lastModifiedDate":"2021-10-12"},{"lineNumber":15,"author":{"gitId":"mohamad-adam8991"},"content":"     */","lastModifiedDate":"2021-10-12"},{"lineNumber":16,"author":{"gitId":"mohamad-adam8991"},"content":"    public OrdersCommand(String input) throws LotsException {","lastModifiedDate":"2021-10-12"},{"lineNumber":17,"author":{"gitId":"mohamad-adam8991"},"content":"        String[] splitInput \u003d input.split(\" \");","lastModifiedDate":"2021-10-12"},{"lineNumber":18,"author":{"gitId":"mohamad-adam8991"},"content":"        if (splitInput.length \u003e 1) {","lastModifiedDate":"2021-10-12"},{"lineNumber":19,"author":{"gitId":"mohamad-adam8991"},"content":"            throw new LotsException(\"Please make sure there is no inputs after the list command!\");","lastModifiedDate":"2021-10-12"},{"lineNumber":20,"author":{"gitId":"mohamad-adam8991"},"content":"        }","lastModifiedDate":"2021-10-12"},{"lineNumber":21,"author":{"gitId":"mohamad-adam8991"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":22,"author":{"gitId":"mohamad-adam8991"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":23,"author":{"gitId":"mohamad-adam8991"},"content":"    /**","lastModifiedDate":"2021-10-08"},{"lineNumber":24,"author":{"gitId":"mohamad-adam8991"},"content":"     * Prints all the current orders.","lastModifiedDate":"2021-10-08"},{"lineNumber":25,"author":{"gitId":"mohamad-adam8991"},"content":"     */","lastModifiedDate":"2021-10-08"},{"lineNumber":26,"author":{"gitId":"mohamad-adam8991"},"content":"    @Override","lastModifiedDate":"2021-10-08"},{"lineNumber":27,"author":{"gitId":"mohamad-adam8991"},"content":"    public void execute() throws LotsException {","lastModifiedDate":"2021-10-12"},{"lineNumber":28,"author":{"gitId":"andrewtkh1"},"content":"        Ui.printOrdersList(super.peopleManager);","lastModifiedDate":"2021-10-16"},{"lineNumber":29,"author":{"gitId":"mohamad-adam8991"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":30,"author":{"gitId":"mohamad-adam8991"},"content":"}","lastModifiedDate":"2021-10-08"}],"authorContributionMap":{"mohamad-adam8991":26,"andrewtkh1":4}},{"path":"src/main/java/seedu/duke/command/UnknownCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"andrewtkh1"},"content":"package seedu.duke.command;","lastModifiedDate":"2021-10-12"},{"lineNumber":2,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":3,"author":{"gitId":"andrewtkh1"},"content":"import seedu.duke.Ui;","lastModifiedDate":"2021-10-12"},{"lineNumber":4,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":5,"author":{"gitId":"andrewtkh1"},"content":"/**","lastModifiedDate":"2021-10-05"},{"lineNumber":6,"author":{"gitId":"andrewtkh1"},"content":" * The command class in the command","lastModifiedDate":"2021-10-05"},{"lineNumber":7,"author":{"gitId":"andrewtkh1"},"content":" * is unknown.","lastModifiedDate":"2021-10-05"},{"lineNumber":8,"author":{"gitId":"andrewtkh1"},"content":" */","lastModifiedDate":"2021-10-05"},{"lineNumber":9,"author":{"gitId":"andrewtkh1"},"content":"public class UnknownCommand extends Command {","lastModifiedDate":"2021-10-05"},{"lineNumber":10,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":11,"author":{"gitId":"andrewtkh1"},"content":"    public void execute() {","lastModifiedDate":"2021-10-05"},{"lineNumber":12,"author":{"gitId":"andrewtkh1"},"content":"        Ui.printWithBorder(\"Unknown command. Please try again.\");","lastModifiedDate":"2021-10-11"},{"lineNumber":13,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":14,"author":{"gitId":"andrewtkh1"},"content":"}","lastModifiedDate":"2021-10-05"}],"authorContributionMap":{"andrewtkh1":14}},{"path":"src/main/java/seedu/duke/exceptions/LotsException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"andrewtkh1"},"content":"package seedu.duke.exceptions;","lastModifiedDate":"2021-10-12"},{"lineNumber":2,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":3,"author":{"gitId":"markuslyq"},"content":"public class LotsException extends Exception {","lastModifiedDate":"2021-10-08"},{"lineNumber":4,"author":{"gitId":"markuslyq"},"content":"    public LotsException(String errorMessage) {","lastModifiedDate":"2021-10-08"},{"lineNumber":5,"author":{"gitId":"markuslyq"},"content":"        super(errorMessage);","lastModifiedDate":"2021-10-08"},{"lineNumber":6,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":7,"author":{"gitId":"markuslyq"},"content":"}","lastModifiedDate":"2021-10-08"}],"authorContributionMap":{"markuslyq":6,"andrewtkh1":1}},{"path":"src/test/java/seedu/duke/AddCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"WaiKit-nus"},"content":"package seedu.duke;","lastModifiedDate":"2021-10-12"},{"lineNumber":2,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":3,"author":{"gitId":"WaiKit-nus"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-12"},{"lineNumber":4,"author":{"gitId":"andrewtkh1"},"content":"import seedu.duke.command.Command;","lastModifiedDate":"2021-10-12"},{"lineNumber":5,"author":{"gitId":"andrewtkh1"},"content":"import seedu.duke.exceptions.LotsException;","lastModifiedDate":"2021-10-12"},{"lineNumber":6,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":7,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":8,"author":{"gitId":"WaiKit-nus"},"content":"public class AddCommandTest {","lastModifiedDate":"2021-10-12"},{"lineNumber":9,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":10,"author":{"gitId":"WaiKit-nus"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":11,"author":{"gitId":"WaiKit-nus"},"content":"    public void execute_foodIndexIsNegative_throwsLotsException()","lastModifiedDate":"2021-10-12"},{"lineNumber":12,"author":{"gitId":"WaiKit-nus"},"content":"            throws Exception {","lastModifiedDate":"2021-10-12"},{"lineNumber":13,"author":{"gitId":"WaiKit-nus"},"content":"        try {","lastModifiedDate":"2021-10-12"},{"lineNumber":14,"author":{"gitId":"WaiKit-nus"},"content":"            Command command;","lastModifiedDate":"2021-10-12"},{"lineNumber":15,"author":{"gitId":"WaiKit-nus"},"content":"            command \u003d Parser.getCommand(\"add /n jacob /i -1 /q 10\");","lastModifiedDate":"2021-10-12"},{"lineNumber":16,"author":{"gitId":"WaiKit-nus"},"content":"            command.execute();","lastModifiedDate":"2021-10-12"},{"lineNumber":17,"author":{"gitId":"WaiKit-nus"},"content":"        } catch (LotsException | NumberFormatException e) {","lastModifiedDate":"2021-10-12"},{"lineNumber":18,"author":{"gitId":"WaiKit-nus"},"content":"            System.out.println(\"Food Index is Negative. \\n\");","lastModifiedDate":"2021-10-12"},{"lineNumber":19,"author":{"gitId":"WaiKit-nus"},"content":"        }","lastModifiedDate":"2021-10-12"},{"lineNumber":20,"author":{"gitId":"WaiKit-nus"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":21,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":22,"author":{"gitId":"WaiKit-nus"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":23,"author":{"gitId":"WaiKit-nus"},"content":"    public void execute_quantityIsNegative_throwsLotsException()","lastModifiedDate":"2021-10-12"},{"lineNumber":24,"author":{"gitId":"WaiKit-nus"},"content":"            throws Exception {","lastModifiedDate":"2021-10-12"},{"lineNumber":25,"author":{"gitId":"WaiKit-nus"},"content":"        try {","lastModifiedDate":"2021-10-12"},{"lineNumber":26,"author":{"gitId":"WaiKit-nus"},"content":"            Command command;","lastModifiedDate":"2021-10-12"},{"lineNumber":27,"author":{"gitId":"WaiKit-nus"},"content":"            command \u003d Parser.getCommand(\"add /n jacob /i 2 /q -10\");","lastModifiedDate":"2021-10-12"},{"lineNumber":28,"author":{"gitId":"WaiKit-nus"},"content":"            command.execute();","lastModifiedDate":"2021-10-12"},{"lineNumber":29,"author":{"gitId":"WaiKit-nus"},"content":"        } catch (LotsException | NumberFormatException e) {","lastModifiedDate":"2021-10-12"},{"lineNumber":30,"author":{"gitId":"WaiKit-nus"},"content":"            System.out.println(\"Quantity is Negative. \\n\");","lastModifiedDate":"2021-10-12"},{"lineNumber":31,"author":{"gitId":"WaiKit-nus"},"content":"        }","lastModifiedDate":"2021-10-12"},{"lineNumber":32,"author":{"gitId":"WaiKit-nus"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":33,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":34,"author":{"gitId":"WaiKit-nus"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":35,"author":{"gitId":"WaiKit-nus"},"content":"    public void execute_foodIndexIsZero_throwsLotsException()","lastModifiedDate":"2021-10-12"},{"lineNumber":36,"author":{"gitId":"WaiKit-nus"},"content":"            throws Exception {","lastModifiedDate":"2021-10-12"},{"lineNumber":37,"author":{"gitId":"WaiKit-nus"},"content":"        try {","lastModifiedDate":"2021-10-12"},{"lineNumber":38,"author":{"gitId":"WaiKit-nus"},"content":"            Command command;","lastModifiedDate":"2021-10-12"},{"lineNumber":39,"author":{"gitId":"WaiKit-nus"},"content":"            command \u003d Parser.getCommand(\"add /n jacob /i 0 /q 10\");","lastModifiedDate":"2021-10-12"},{"lineNumber":40,"author":{"gitId":"WaiKit-nus"},"content":"            command.execute();","lastModifiedDate":"2021-10-12"},{"lineNumber":41,"author":{"gitId":"WaiKit-nus"},"content":"        } catch (LotsException | NumberFormatException e) {","lastModifiedDate":"2021-10-12"},{"lineNumber":42,"author":{"gitId":"WaiKit-nus"},"content":"            System.out.println(\"Food Index is zero. \\n\");","lastModifiedDate":"2021-10-12"},{"lineNumber":43,"author":{"gitId":"WaiKit-nus"},"content":"        }","lastModifiedDate":"2021-10-12"},{"lineNumber":44,"author":{"gitId":"WaiKit-nus"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":45,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":46,"author":{"gitId":"WaiKit-nus"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":47,"author":{"gitId":"WaiKit-nus"},"content":"    public void execute_quantityIsZero_throwsLotsException()","lastModifiedDate":"2021-10-12"},{"lineNumber":48,"author":{"gitId":"WaiKit-nus"},"content":"            throws Exception {","lastModifiedDate":"2021-10-12"},{"lineNumber":49,"author":{"gitId":"WaiKit-nus"},"content":"        try {","lastModifiedDate":"2021-10-12"},{"lineNumber":50,"author":{"gitId":"WaiKit-nus"},"content":"            Command command;","lastModifiedDate":"2021-10-12"},{"lineNumber":51,"author":{"gitId":"WaiKit-nus"},"content":"            command \u003d Parser.getCommand(\"add /n jacob /i 2 /q 0\");","lastModifiedDate":"2021-10-12"},{"lineNumber":52,"author":{"gitId":"WaiKit-nus"},"content":"            command.execute();","lastModifiedDate":"2021-10-12"},{"lineNumber":53,"author":{"gitId":"WaiKit-nus"},"content":"        } catch (LotsException | NumberFormatException e) {","lastModifiedDate":"2021-10-12"},{"lineNumber":54,"author":{"gitId":"WaiKit-nus"},"content":"            System.out.println(\"Quantity is zero. \\n\");","lastModifiedDate":"2021-10-12"},{"lineNumber":55,"author":{"gitId":"WaiKit-nus"},"content":"        }","lastModifiedDate":"2021-10-12"},{"lineNumber":56,"author":{"gitId":"WaiKit-nus"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":57,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":58,"author":{"gitId":"WaiKit-nus"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":59,"author":{"gitId":"WaiKit-nus"},"content":"    public void execute_foodIndexPositiveButOutOfRange_throwsLotsException()","lastModifiedDate":"2021-10-12"},{"lineNumber":60,"author":{"gitId":"WaiKit-nus"},"content":"            throws Exception {","lastModifiedDate":"2021-10-12"},{"lineNumber":61,"author":{"gitId":"WaiKit-nus"},"content":"        try {","lastModifiedDate":"2021-10-12"},{"lineNumber":62,"author":{"gitId":"WaiKit-nus"},"content":"            Command command;","lastModifiedDate":"2021-10-12"},{"lineNumber":63,"author":{"gitId":"WaiKit-nus"},"content":"            command \u003d Parser.getCommand(\"add /n jacob /i 13 /q 10\");","lastModifiedDate":"2021-10-12"},{"lineNumber":64,"author":{"gitId":"WaiKit-nus"},"content":"            command.execute();","lastModifiedDate":"2021-10-12"},{"lineNumber":65,"author":{"gitId":"WaiKit-nus"},"content":"        } catch (LotsException | NumberFormatException e) {","lastModifiedDate":"2021-10-12"},{"lineNumber":66,"author":{"gitId":"WaiKit-nus"},"content":"            System.out.println(\"Food Index Positive but out of range. \\n\");","lastModifiedDate":"2021-10-12"},{"lineNumber":67,"author":{"gitId":"WaiKit-nus"},"content":"        }","lastModifiedDate":"2021-10-12"},{"lineNumber":68,"author":{"gitId":"WaiKit-nus"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":69,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":70,"author":{"gitId":"WaiKit-nus"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":71,"author":{"gitId":"WaiKit-nus"},"content":"    public void execute_quantityPositiveButOutOfRange_throwsLotsException()","lastModifiedDate":"2021-10-12"},{"lineNumber":72,"author":{"gitId":"WaiKit-nus"},"content":"            throws Exception {","lastModifiedDate":"2021-10-12"},{"lineNumber":73,"author":{"gitId":"WaiKit-nus"},"content":"        try {","lastModifiedDate":"2021-10-12"},{"lineNumber":74,"author":{"gitId":"WaiKit-nus"},"content":"            Command command;","lastModifiedDate":"2021-10-12"},{"lineNumber":75,"author":{"gitId":"WaiKit-nus"},"content":"            command \u003d Parser.getCommand(\"add /n jacob /i 2 /q 1000\");","lastModifiedDate":"2021-10-12"},{"lineNumber":76,"author":{"gitId":"WaiKit-nus"},"content":"            command.execute();","lastModifiedDate":"2021-10-12"},{"lineNumber":77,"author":{"gitId":"WaiKit-nus"},"content":"        } catch (LotsException | NumberFormatException e) {","lastModifiedDate":"2021-10-12"},{"lineNumber":78,"author":{"gitId":"WaiKit-nus"},"content":"            System.out.println(\"Quantity Positive but out of range. \\n\");","lastModifiedDate":"2021-10-12"},{"lineNumber":79,"author":{"gitId":"WaiKit-nus"},"content":"        }","lastModifiedDate":"2021-10-12"},{"lineNumber":80,"author":{"gitId":"WaiKit-nus"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":81,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":82,"author":{"gitId":"WaiKit-nus"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":83,"author":{"gitId":"WaiKit-nus"},"content":"    public void execute_wrongNumberOfSlashes_throwsLotsException()","lastModifiedDate":"2021-10-12"},{"lineNumber":84,"author":{"gitId":"WaiKit-nus"},"content":"            throws Exception {","lastModifiedDate":"2021-10-12"},{"lineNumber":85,"author":{"gitId":"WaiKit-nus"},"content":"        try {","lastModifiedDate":"2021-10-12"},{"lineNumber":86,"author":{"gitId":"WaiKit-nus"},"content":"            Command command;","lastModifiedDate":"2021-10-12"},{"lineNumber":87,"author":{"gitId":"WaiKit-nus"},"content":"            command \u003d Parser.getCommand(\"add /n jacob /i 2 \");","lastModifiedDate":"2021-10-12"},{"lineNumber":88,"author":{"gitId":"WaiKit-nus"},"content":"            command.execute();","lastModifiedDate":"2021-10-12"},{"lineNumber":89,"author":{"gitId":"WaiKit-nus"},"content":"        } catch (LotsException | NumberFormatException e) {","lastModifiedDate":"2021-10-12"},{"lineNumber":90,"author":{"gitId":"WaiKit-nus"},"content":"            System.out.println(\"Missing Slash. \\n\");","lastModifiedDate":"2021-10-12"},{"lineNumber":91,"author":{"gitId":"WaiKit-nus"},"content":"        }","lastModifiedDate":"2021-10-12"},{"lineNumber":92,"author":{"gitId":"WaiKit-nus"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":93,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":94,"author":{"gitId":"WaiKit-nus"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":95,"author":{"gitId":"WaiKit-nus"},"content":"    public void execute_alphaNumericNamesOnly_throwsLotsException()","lastModifiedDate":"2021-10-12"},{"lineNumber":96,"author":{"gitId":"WaiKit-nus"},"content":"            throws Exception {","lastModifiedDate":"2021-10-12"},{"lineNumber":97,"author":{"gitId":"WaiKit-nus"},"content":"        try {","lastModifiedDate":"2021-10-12"},{"lineNumber":98,"author":{"gitId":"WaiKit-nus"},"content":"            Command command;","lastModifiedDate":"2021-10-12"},{"lineNumber":99,"author":{"gitId":"WaiKit-nus"},"content":"            command \u003d Parser.getCommand(\"add /n J@cob! /i 2 /q 10\");","lastModifiedDate":"2021-10-12"},{"lineNumber":100,"author":{"gitId":"WaiKit-nus"},"content":"            command.execute();","lastModifiedDate":"2021-10-12"},{"lineNumber":101,"author":{"gitId":"WaiKit-nus"},"content":"        } catch (LotsException | NumberFormatException e) {","lastModifiedDate":"2021-10-12"},{"lineNumber":102,"author":{"gitId":"WaiKit-nus"},"content":"            System.out.println(\"There are other characters in Names. \\n\");","lastModifiedDate":"2021-10-12"},{"lineNumber":103,"author":{"gitId":"WaiKit-nus"},"content":"        }","lastModifiedDate":"2021-10-12"},{"lineNumber":104,"author":{"gitId":"WaiKit-nus"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":105,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":106,"author":{"gitId":"WaiKit-nus"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":107,"author":{"gitId":"WaiKit-nus"},"content":"    public void execute_inputForNameIsSpaces_throwsLotsException()","lastModifiedDate":"2021-10-12"},{"lineNumber":108,"author":{"gitId":"WaiKit-nus"},"content":"            throws Exception {","lastModifiedDate":"2021-10-12"},{"lineNumber":109,"author":{"gitId":"WaiKit-nus"},"content":"        try {","lastModifiedDate":"2021-10-12"},{"lineNumber":110,"author":{"gitId":"WaiKit-nus"},"content":"            Command command;","lastModifiedDate":"2021-10-12"},{"lineNumber":111,"author":{"gitId":"WaiKit-nus"},"content":"            command \u003d Parser.getCommand(\"add /n          /i 2 /q 10\");","lastModifiedDate":"2021-10-12"},{"lineNumber":112,"author":{"gitId":"WaiKit-nus"},"content":"            command.execute();","lastModifiedDate":"2021-10-12"},{"lineNumber":113,"author":{"gitId":"WaiKit-nus"},"content":"        } catch (LotsException | NumberFormatException e) {","lastModifiedDate":"2021-10-12"},{"lineNumber":114,"author":{"gitId":"WaiKit-nus"},"content":"            System.out.println(\"Name cannot be spaces. \\n\");","lastModifiedDate":"2021-10-12"},{"lineNumber":115,"author":{"gitId":"WaiKit-nus"},"content":"        }","lastModifiedDate":"2021-10-12"},{"lineNumber":116,"author":{"gitId":"WaiKit-nus"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":117,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":118,"author":{"gitId":"WaiKit-nus"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":119,"author":{"gitId":"WaiKit-nus"},"content":"    public void execute_inputForFoodIndexIsSpaces_throwsLotsException()","lastModifiedDate":"2021-10-12"},{"lineNumber":120,"author":{"gitId":"WaiKit-nus"},"content":"            throws Exception {","lastModifiedDate":"2021-10-12"},{"lineNumber":121,"author":{"gitId":"WaiKit-nus"},"content":"        try {","lastModifiedDate":"2021-10-12"},{"lineNumber":122,"author":{"gitId":"WaiKit-nus"},"content":"            Command command;","lastModifiedDate":"2021-10-12"},{"lineNumber":123,"author":{"gitId":"WaiKit-nus"},"content":"            command \u003d Parser.getCommand(\"add /n Jenson /i     2    /q 10\");","lastModifiedDate":"2021-10-12"},{"lineNumber":124,"author":{"gitId":"WaiKit-nus"},"content":"            command.execute();","lastModifiedDate":"2021-10-12"},{"lineNumber":125,"author":{"gitId":"WaiKit-nus"},"content":"        } catch (LotsException | NumberFormatException e) {","lastModifiedDate":"2021-10-12"},{"lineNumber":126,"author":{"gitId":"WaiKit-nus"},"content":"            System.out.println(\"Food Index cannot be spaces. \\n\");","lastModifiedDate":"2021-10-12"},{"lineNumber":127,"author":{"gitId":"WaiKit-nus"},"content":"        }","lastModifiedDate":"2021-10-12"},{"lineNumber":128,"author":{"gitId":"WaiKit-nus"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":129,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":130,"author":{"gitId":"WaiKit-nus"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":131,"author":{"gitId":"WaiKit-nus"},"content":"    public void execute_inputForQuantityIsSpaces_throwsLotsException()","lastModifiedDate":"2021-10-12"},{"lineNumber":132,"author":{"gitId":"WaiKit-nus"},"content":"            throws Exception {","lastModifiedDate":"2021-10-12"},{"lineNumber":133,"author":{"gitId":"WaiKit-nus"},"content":"        try {","lastModifiedDate":"2021-10-12"},{"lineNumber":134,"author":{"gitId":"WaiKit-nus"},"content":"            Command command;","lastModifiedDate":"2021-10-12"},{"lineNumber":135,"author":{"gitId":"WaiKit-nus"},"content":"            command \u003d Parser.getCommand(\"add /n Jenson /i 3 /q        \");","lastModifiedDate":"2021-10-12"},{"lineNumber":136,"author":{"gitId":"WaiKit-nus"},"content":"            command.execute();","lastModifiedDate":"2021-10-12"},{"lineNumber":137,"author":{"gitId":"WaiKit-nus"},"content":"        } catch (LotsException | NumberFormatException e) {","lastModifiedDate":"2021-10-12"},{"lineNumber":138,"author":{"gitId":"WaiKit-nus"},"content":"            System.out.println(\"Quantity cannot be spaces. \\n\");","lastModifiedDate":"2021-10-12"},{"lineNumber":139,"author":{"gitId":"WaiKit-nus"},"content":"        }","lastModifiedDate":"2021-10-12"},{"lineNumber":140,"author":{"gitId":"WaiKit-nus"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":141,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":142,"author":{"gitId":"WaiKit-nus"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":143,"author":{"gitId":"WaiKit-nus"},"content":"    public void execute_foodIndexCannotBeInWord_throwsLotsException()","lastModifiedDate":"2021-10-12"},{"lineNumber":144,"author":{"gitId":"WaiKit-nus"},"content":"            throws Exception {","lastModifiedDate":"2021-10-12"},{"lineNumber":145,"author":{"gitId":"WaiKit-nus"},"content":"        try {","lastModifiedDate":"2021-10-12"},{"lineNumber":146,"author":{"gitId":"WaiKit-nus"},"content":"            Command command;","lastModifiedDate":"2021-10-12"},{"lineNumber":147,"author":{"gitId":"WaiKit-nus"},"content":"            command \u003d Parser.getCommand(\"add /n jacob /i Zero /q 10\");","lastModifiedDate":"2021-10-12"},{"lineNumber":148,"author":{"gitId":"WaiKit-nus"},"content":"            command.execute();","lastModifiedDate":"2021-10-12"},{"lineNumber":149,"author":{"gitId":"WaiKit-nus"},"content":"        } catch (LotsException | NumberFormatException e) {","lastModifiedDate":"2021-10-12"},{"lineNumber":150,"author":{"gitId":"WaiKit-nus"},"content":"            System.out.println(\"Food Index is in Words. \\n\");","lastModifiedDate":"2021-10-12"},{"lineNumber":151,"author":{"gitId":"WaiKit-nus"},"content":"        }","lastModifiedDate":"2021-10-12"},{"lineNumber":152,"author":{"gitId":"WaiKit-nus"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":153,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":154,"author":{"gitId":"WaiKit-nus"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":155,"author":{"gitId":"WaiKit-nus"},"content":"    public void execute_quantityCannotBeInWord_throwsLotsException()","lastModifiedDate":"2021-10-12"},{"lineNumber":156,"author":{"gitId":"WaiKit-nus"},"content":"            throws Exception {","lastModifiedDate":"2021-10-12"},{"lineNumber":157,"author":{"gitId":"WaiKit-nus"},"content":"        try {","lastModifiedDate":"2021-10-12"},{"lineNumber":158,"author":{"gitId":"WaiKit-nus"},"content":"            Command command;","lastModifiedDate":"2021-10-12"},{"lineNumber":159,"author":{"gitId":"WaiKit-nus"},"content":"            command \u003d Parser.getCommand(\"add /n jacob /i 3 /q two hundred\");","lastModifiedDate":"2021-10-12"},{"lineNumber":160,"author":{"gitId":"WaiKit-nus"},"content":"            command.execute();","lastModifiedDate":"2021-10-12"},{"lineNumber":161,"author":{"gitId":"WaiKit-nus"},"content":"        } catch (LotsException | NumberFormatException e) {","lastModifiedDate":"2021-10-12"},{"lineNumber":162,"author":{"gitId":"WaiKit-nus"},"content":"            System.out.println(\"Quantity is in Words. \\n\");","lastModifiedDate":"2021-10-12"},{"lineNumber":163,"author":{"gitId":"WaiKit-nus"},"content":"        }","lastModifiedDate":"2021-10-12"},{"lineNumber":164,"author":{"gitId":"WaiKit-nus"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":165,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":166,"author":{"gitId":"WaiKit-nus"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":167,"author":{"gitId":"WaiKit-nus"},"content":"    public void execute_foodIndexContainsCharacters_throwsLotsException()","lastModifiedDate":"2021-10-12"},{"lineNumber":168,"author":{"gitId":"WaiKit-nus"},"content":"            throws Exception {","lastModifiedDate":"2021-10-12"},{"lineNumber":169,"author":{"gitId":"WaiKit-nus"},"content":"        try {","lastModifiedDate":"2021-10-12"},{"lineNumber":170,"author":{"gitId":"WaiKit-nus"},"content":"            Command command;","lastModifiedDate":"2021-10-12"},{"lineNumber":171,"author":{"gitId":"WaiKit-nus"},"content":"            command \u003d Parser.getCommand(\"add /n jacob /i 2@1 /q 10\");","lastModifiedDate":"2021-10-12"},{"lineNumber":172,"author":{"gitId":"WaiKit-nus"},"content":"            command.execute();","lastModifiedDate":"2021-10-12"},{"lineNumber":173,"author":{"gitId":"WaiKit-nus"},"content":"        } catch (LotsException | NumberFormatException e) {","lastModifiedDate":"2021-10-12"},{"lineNumber":174,"author":{"gitId":"WaiKit-nus"},"content":"            System.out.println(\"Food Index contains characters. \\n\");","lastModifiedDate":"2021-10-12"},{"lineNumber":175,"author":{"gitId":"WaiKit-nus"},"content":"        }","lastModifiedDate":"2021-10-12"},{"lineNumber":176,"author":{"gitId":"WaiKit-nus"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":177,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":178,"author":{"gitId":"WaiKit-nus"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":179,"author":{"gitId":"WaiKit-nus"},"content":"    public void execute_quantityContainsCharacters_throwsLotsException()","lastModifiedDate":"2021-10-12"},{"lineNumber":180,"author":{"gitId":"WaiKit-nus"},"content":"            throws Exception {","lastModifiedDate":"2021-10-12"},{"lineNumber":181,"author":{"gitId":"WaiKit-nus"},"content":"        try {","lastModifiedDate":"2021-10-12"},{"lineNumber":182,"author":{"gitId":"WaiKit-nus"},"content":"            Command command;","lastModifiedDate":"2021-10-12"},{"lineNumber":183,"author":{"gitId":"WaiKit-nus"},"content":"            command \u003d Parser.getCommand(\"add /n jacob /i 9 /q 2!4\");","lastModifiedDate":"2021-10-12"},{"lineNumber":184,"author":{"gitId":"WaiKit-nus"},"content":"            command.execute();","lastModifiedDate":"2021-10-12"},{"lineNumber":185,"author":{"gitId":"WaiKit-nus"},"content":"        } catch (LotsException | NumberFormatException e) {","lastModifiedDate":"2021-10-12"},{"lineNumber":186,"author":{"gitId":"WaiKit-nus"},"content":"            System.out.println(\"Quantity contains characters. \\n\");","lastModifiedDate":"2021-10-12"},{"lineNumber":187,"author":{"gitId":"WaiKit-nus"},"content":"        }","lastModifiedDate":"2021-10-12"},{"lineNumber":188,"author":{"gitId":"WaiKit-nus"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":189,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":190,"author":{"gitId":"WaiKit-nus"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":191,"author":{"gitId":"WaiKit-nus"},"content":"    public void execute_inputForNameIsMoreThan50Characters_throwsLotsException()","lastModifiedDate":"2021-10-12"},{"lineNumber":192,"author":{"gitId":"WaiKit-nus"},"content":"            throws Exception {","lastModifiedDate":"2021-10-12"},{"lineNumber":193,"author":{"gitId":"WaiKit-nus"},"content":"        try {","lastModifiedDate":"2021-10-12"},{"lineNumber":194,"author":{"gitId":"WaiKit-nus"},"content":"            Command command;","lastModifiedDate":"2021-10-12"},{"lineNumber":195,"author":{"gitId":"WaiKit-nus"},"content":"            command \u003d Parser.getCommand(\"add /n Jenson Jacob Jenson Jacob Jenson Jacob Jenson Jacob Jenson Jacob \"","lastModifiedDate":"2021-10-12"},{"lineNumber":196,"author":{"gitId":"WaiKit-nus"},"content":"                    + \"Jenson Jacob Jenson Jacob Jenson Jacob Jenson /i 2 /q 10\");","lastModifiedDate":"2021-10-12"},{"lineNumber":197,"author":{"gitId":"WaiKit-nus"},"content":"            command.execute();","lastModifiedDate":"2021-10-12"},{"lineNumber":198,"author":{"gitId":"WaiKit-nus"},"content":"        } catch (LotsException | NumberFormatException e) {","lastModifiedDate":"2021-10-12"},{"lineNumber":199,"author":{"gitId":"WaiKit-nus"},"content":"            System.out.println(\"Name cannot be more than 50 spaces. \\n\");","lastModifiedDate":"2021-10-12"},{"lineNumber":200,"author":{"gitId":"WaiKit-nus"},"content":"        }","lastModifiedDate":"2021-10-12"},{"lineNumber":201,"author":{"gitId":"WaiKit-nus"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":202,"author":{"gitId":"WaiKit-nus"},"content":"}","lastModifiedDate":"2021-10-12"}],"authorContributionMap":{"andrewtkh1":2,"WaiKit-nus":200}},{"path":"src/test/java/seedu/duke/DeleteCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"markuslyq"},"content":"package seedu.duke;","lastModifiedDate":"2021-10-11"},{"lineNumber":2,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":3,"author":{"gitId":"markuslyq"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2021-10-12"},{"lineNumber":4,"author":{"gitId":"markuslyq"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-11"},{"lineNumber":5,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":6,"author":{"gitId":"markuslyq"},"content":"import seedu.duke.command.AddCommand;","lastModifiedDate":"2021-10-12"},{"lineNumber":7,"author":{"gitId":"andrewtkh1"},"content":"import seedu.duke.command.Command;","lastModifiedDate":"2021-10-12"},{"lineNumber":8,"author":{"gitId":"andrewtkh1"},"content":"import seedu.duke.command.DeleteCommand;","lastModifiedDate":"2021-10-12"},{"lineNumber":9,"author":{"gitId":"andrewtkh1"},"content":"import seedu.duke.exceptions.LotsException;","lastModifiedDate":"2021-10-12"},{"lineNumber":10,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":11,"author":{"gitId":"markuslyq"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-12"},{"lineNumber":12,"author":{"gitId":"markuslyq"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2021-10-11"},{"lineNumber":13,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":14,"author":{"gitId":"markuslyq"},"content":"class DeleteCommandTest {","lastModifiedDate":"2021-10-11"},{"lineNumber":15,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":16,"author":{"gitId":"markuslyq"},"content":"    protected PeopleManager peopleManager \u003d new PeopleManager();","lastModifiedDate":"2021-10-12"},{"lineNumber":17,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":18,"author":{"gitId":"markuslyq"},"content":"    @BeforeEach","lastModifiedDate":"2021-10-12"},{"lineNumber":19,"author":{"gitId":"markuslyq"},"content":"    void setUp() throws LotsException {","lastModifiedDate":"2021-10-12"},{"lineNumber":20,"author":{"gitId":"markuslyq"},"content":"        String[] names \u003d {\"Markus\", \"Adam\", \"Andrew\"};","lastModifiedDate":"2021-10-12"},{"lineNumber":21,"author":{"gitId":"markuslyq"},"content":"        String[] foodIndex \u003d {\"1\", \"4\", \"8\"};","lastModifiedDate":"2021-10-12"},{"lineNumber":22,"author":{"gitId":"andrewtkh1"},"content":"        PeopleManager.clearListOfPeople();","lastModifiedDate":"2021-10-16"},{"lineNumber":23,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":24,"author":{"gitId":"markuslyq"},"content":"        for (int i \u003d 0; i \u003c 3; i++) {","lastModifiedDate":"2021-10-12"},{"lineNumber":25,"author":{"gitId":"markuslyq"},"content":"            String input \u003d \"add /n \" + names[i] + \" /i \" + foodIndex[i] + \" /q 1\";","lastModifiedDate":"2021-10-12"},{"lineNumber":26,"author":{"gitId":"markuslyq"},"content":"            Command command \u003d new AddCommand(input);","lastModifiedDate":"2021-10-12"},{"lineNumber":27,"author":{"gitId":"markuslyq"},"content":"            command.setData(peopleManager);","lastModifiedDate":"2021-10-12"},{"lineNumber":28,"author":{"gitId":"markuslyq"},"content":"            command.execute();","lastModifiedDate":"2021-10-12"},{"lineNumber":29,"author":{"gitId":"markuslyq"},"content":"        }","lastModifiedDate":"2021-10-12"},{"lineNumber":30,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":31,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":32,"author":{"gitId":"markuslyq"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":33,"author":{"gitId":"markuslyq"},"content":"    void execute_validInput_expectException() throws LotsException {","lastModifiedDate":"2021-10-12"},{"lineNumber":34,"author":{"gitId":"markuslyq"},"content":"        String input \u003d \"delete 2/1\";","lastModifiedDate":"2021-10-16"},{"lineNumber":35,"author":{"gitId":"markuslyq"},"content":"        Command command \u003d new DeleteCommand(input);","lastModifiedDate":"2021-10-12"},{"lineNumber":36,"author":{"gitId":"markuslyq"},"content":"        command.setData(peopleManager);","lastModifiedDate":"2021-10-12"},{"lineNumber":37,"author":{"gitId":"markuslyq"},"content":"        command.execute();","lastModifiedDate":"2021-10-12"},{"lineNumber":38,"author":{"gitId":"andrewtkh1"},"content":"        assertEquals(2, peopleManager.getSize());","lastModifiedDate":"2021-10-16"},{"lineNumber":39,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":40,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":41,"author":{"gitId":"markuslyq"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":42,"author":{"gitId":"markuslyq"},"content":"    void execute_personIndexOutOfBounds_expectException() throws LotsException {","lastModifiedDate":"2021-10-12"},{"lineNumber":43,"author":{"gitId":"markuslyq"},"content":"        String input \u003d \"delete 99/1\";","lastModifiedDate":"2021-10-16"},{"lineNumber":44,"author":{"gitId":"markuslyq"},"content":"        Command command \u003d new DeleteCommand(input);","lastModifiedDate":"2021-10-12"},{"lineNumber":45,"author":{"gitId":"markuslyq"},"content":"        command.setData(peopleManager);","lastModifiedDate":"2021-10-12"},{"lineNumber":46,"author":{"gitId":"markuslyq"},"content":"        assertThrows(LotsException.class,","lastModifiedDate":"2021-10-12"},{"lineNumber":47,"author":{"gitId":"markuslyq"},"content":"            () -\u003e command.execute());","lastModifiedDate":"2021-10-12"},{"lineNumber":48,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":49,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":50,"author":{"gitId":"markuslyq"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":51,"author":{"gitId":"markuslyq"},"content":"    void execute_orderIndexOutOfBounds_expectException() throws LotsException {","lastModifiedDate":"2021-10-12"},{"lineNumber":52,"author":{"gitId":"markuslyq"},"content":"        String input \u003d \"delete 2/2\";","lastModifiedDate":"2021-10-16"},{"lineNumber":53,"author":{"gitId":"markuslyq"},"content":"        Command command \u003d new DeleteCommand(input);","lastModifiedDate":"2021-10-11"},{"lineNumber":54,"author":{"gitId":"markuslyq"},"content":"        command.setData(peopleManager);","lastModifiedDate":"2021-10-12"},{"lineNumber":55,"author":{"gitId":"markuslyq"},"content":"        assertThrows(LotsException.class,","lastModifiedDate":"2021-10-12"},{"lineNumber":56,"author":{"gitId":"markuslyq"},"content":"            () -\u003e command.execute());","lastModifiedDate":"2021-10-11"},{"lineNumber":57,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":58,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":59,"author":{"gitId":"markuslyq"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":60,"author":{"gitId":"markuslyq"},"content":"    void execute_inputWithoutFoodIndex_expectException() {","lastModifiedDate":"2021-10-12"},{"lineNumber":61,"author":{"gitId":"markuslyq"},"content":"        String input \u003d \"delete 2\";","lastModifiedDate":"2021-10-12"},{"lineNumber":62,"author":{"gitId":"markuslyq"},"content":"        assertThrows(LotsException.class,","lastModifiedDate":"2021-10-12"},{"lineNumber":63,"author":{"gitId":"markuslyq"},"content":"            () -\u003e new DeleteCommand(input));","lastModifiedDate":"2021-10-12"},{"lineNumber":64,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":65,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":66,"author":{"gitId":"markuslyq"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":67,"author":{"gitId":"markuslyq"},"content":"    void execute_invalidPersonIndex_expectException() {","lastModifiedDate":"2021-10-12"},{"lineNumber":68,"author":{"gitId":"markuslyq"},"content":"        String input \u003d \"delete markus/1\";","lastModifiedDate":"2021-10-16"},{"lineNumber":69,"author":{"gitId":"markuslyq"},"content":"        assertThrows(LotsException.class,","lastModifiedDate":"2021-10-12"},{"lineNumber":70,"author":{"gitId":"markuslyq"},"content":"            () -\u003e new DeleteCommand(input));","lastModifiedDate":"2021-10-12"},{"lineNumber":71,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":72,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":73,"author":{"gitId":"markuslyq"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":74,"author":{"gitId":"markuslyq"},"content":"    void execute_invalidOrderIndex_expectException() {","lastModifiedDate":"2021-10-12"},{"lineNumber":75,"author":{"gitId":"markuslyq"},"content":"        String input \u003d \"delete 1/a\";","lastModifiedDate":"2021-10-16"},{"lineNumber":76,"author":{"gitId":"markuslyq"},"content":"        assertThrows(LotsException.class,","lastModifiedDate":"2021-10-12"},{"lineNumber":77,"author":{"gitId":"markuslyq"},"content":"            () -\u003e new DeleteCommand(input));","lastModifiedDate":"2021-10-12"},{"lineNumber":78,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":79,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":80,"author":{"gitId":"markuslyq"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":81,"author":{"gitId":"markuslyq"},"content":"    void execute_invalidInput_expectException() {","lastModifiedDate":"2021-10-12"},{"lineNumber":82,"author":{"gitId":"markuslyq"},"content":"        String input \u003d \"delete Markus/a\";","lastModifiedDate":"2021-10-16"},{"lineNumber":83,"author":{"gitId":"markuslyq"},"content":"        assertThrows(LotsException.class,","lastModifiedDate":"2021-10-12"},{"lineNumber":84,"author":{"gitId":"markuslyq"},"content":"            () -\u003e new DeleteCommand(input));","lastModifiedDate":"2021-10-12"},{"lineNumber":85,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":86,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":87,"author":{"gitId":"markuslyq"},"content":"}","lastModifiedDate":"2021-10-11"}],"authorContributionMap":{"markuslyq":82,"andrewtkh1":5}},{"path":"src/test/java/seedu/duke/DukeTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.duke;","lastModifiedDate":"2020-05-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2020-05-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2020-05-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"class DukeTest {","lastModifiedDate":"2020-05-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2020-05-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public void sampleTest() {","lastModifiedDate":"2020-05-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"        assertTrue(true);","lastModifiedDate":"2020-05-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-24"},{"lineNumber":12,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":13,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-24"}],"authorContributionMap":{"andrewtkh1":1,"-":12}},{"path":"src/test/java/seedu/duke/ParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"andrewtkh1"},"content":"package seedu.duke;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":3,"author":{"gitId":"andrewtkh1"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-04"},{"lineNumber":4,"author":{"gitId":"andrewtkh1"},"content":"import seedu.duke.command.Command;","lastModifiedDate":"2021-10-12"},{"lineNumber":5,"author":{"gitId":"andrewtkh1"},"content":"import seedu.duke.command.UnknownCommand;","lastModifiedDate":"2021-10-12"},{"lineNumber":6,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":7,"author":{"gitId":"andrewtkh1"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-05"},{"lineNumber":8,"author":{"gitId":"andrewtkh1"},"content":"import static org.junit.jupiter.api.Assertions.assertNull;","lastModifiedDate":"2021-10-04"},{"lineNumber":9,"author":{"gitId":"andrewtkh1"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-05"},{"lineNumber":10,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":11,"author":{"gitId":"andrewtkh1"},"content":"public class ParserTest {","lastModifiedDate":"2021-10-04"},{"lineNumber":12,"author":{"gitId":"andrewtkh1"},"content":"    @Test","lastModifiedDate":"2021-10-04"},{"lineNumber":13,"author":{"gitId":"andrewtkh1"},"content":"    public void getCommand_emptyCommand_nullReturned() throws Exception {","lastModifiedDate":"2021-10-10"},{"lineNumber":14,"author":{"gitId":"andrewtkh1"},"content":"        Command output \u003d Parser.getCommand(\"\");","lastModifiedDate":"2021-10-05"},{"lineNumber":15,"author":{"gitId":"andrewtkh1"},"content":"        assertTrue(output instanceof UnknownCommand);","lastModifiedDate":"2021-10-05"},{"lineNumber":16,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-10-04"},{"lineNumber":17,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":18,"author":{"gitId":"andrewtkh1"},"content":"    @Test","lastModifiedDate":"2021-10-04"},{"lineNumber":19,"author":{"gitId":"andrewtkh1"},"content":"    public void getCommand_spaces_nullReturned() throws Exception {","lastModifiedDate":"2021-10-10"},{"lineNumber":20,"author":{"gitId":"andrewtkh1"},"content":"        Command output \u003d Parser.getCommand(\"     \");","lastModifiedDate":"2021-10-05"},{"lineNumber":21,"author":{"gitId":"andrewtkh1"},"content":"        assertTrue(output instanceof UnknownCommand);","lastModifiedDate":"2021-10-05"},{"lineNumber":22,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-10-04"},{"lineNumber":23,"author":{"gitId":"andrewtkh1"},"content":"}","lastModifiedDate":"2021-10-04"}],"authorContributionMap":{"andrewtkh1":23}},{"path":"src/test/java/seedu/duke/PeopleManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"thaddyyz"},"content":"package seedu.duke;","lastModifiedDate":"2021-10-13"},{"lineNumber":2,"author":{"gitId":"thaddyyz"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":3,"author":{"gitId":"thaddyyz"},"content":"import org.junit.jupiter.api.BeforeAll;","lastModifiedDate":"2021-10-13"},{"lineNumber":4,"author":{"gitId":"thaddyyz"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-13"},{"lineNumber":5,"author":{"gitId":"thaddyyz"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":6,"author":{"gitId":"thaddyyz"},"content":"import seedu.duke.exceptions.LotsException;","lastModifiedDate":"2021-10-13"},{"lineNumber":7,"author":{"gitId":"thaddyyz"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":8,"author":{"gitId":"thaddyyz"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-13"},{"lineNumber":9,"author":{"gitId":"thaddyyz"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2021-10-13"},{"lineNumber":10,"author":{"gitId":"thaddyyz"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"//@@author thaddyz","lastModifiedDate":"2021-10-16"},{"lineNumber":12,"author":{"gitId":"-"},"content":"class PeopleManagerTest {","lastModifiedDate":"2021-10-15"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    static PeopleManager peopleManager;","lastModifiedDate":"2021-10-15"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-10-16"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * Adds 3 people into the peopleManager Class.","lastModifiedDate":"2021-10-16"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * This method will only run once for this test class.","lastModifiedDate":"2021-10-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-10-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    @BeforeAll","lastModifiedDate":"2021-10-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static void setUp() {","lastModifiedDate":"2021-10-15"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        peopleManager \u003d new PeopleManager();","lastModifiedDate":"2021-10-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        String[] names \u003d {\"Markus\", \"Adam\", \"Andrew\"};","lastModifiedDate":"2021-10-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        PeopleManager.clearListOfPeople();","lastModifiedDate":"2021-10-16"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c 3; i++) {","lastModifiedDate":"2021-10-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"            Person person \u003d new Person(names[i]);","lastModifiedDate":"2021-10-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            peopleManager.addPerson(person);","lastModifiedDate":"2021-10-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2021-10-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2021-10-16"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void getSize_listNotEmpty_normalResponse() {","lastModifiedDate":"2021-10-16"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertEquals(3, peopleManager.getSize());","lastModifiedDate":"2021-10-16"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-10-16"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2021-10-16"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public void deletePerson_InvalidPersonIndex_expectException() {","lastModifiedDate":"2021-10-16"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertThrows(LotsException.class, () -\u003e {","lastModifiedDate":"2021-10-16"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            peopleManager.deletePerson(8);","lastModifiedDate":"2021-10-16"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        });","lastModifiedDate":"2021-10-16"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-10-16"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2021-10-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public void isEmpty_listOfPeopleNotEmpty_falseReturned() {","lastModifiedDate":"2021-10-15"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertEquals(false, peopleManager.isEmpty());","lastModifiedDate":"2021-10-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-10-13"}],"authorContributionMap":{"thaddyyz":10,"-":40}},{"path":"src/test/java/seedu/duke/PersonTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"WaiKit-nus"},"content":"package seedu.duke;","lastModifiedDate":"2021-10-07"},{"lineNumber":2,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":3,"author":{"gitId":"WaiKit-nus"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-07"},{"lineNumber":4,"author":{"gitId":"thaddyyz"},"content":"import seedu.duke.exceptions.LotsException;","lastModifiedDate":"2021-10-13"},{"lineNumber":5,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":6,"author":{"gitId":"thaddyyz"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2021-10-13"},{"lineNumber":7,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":8,"author":{"gitId":"WaiKit-nus"},"content":"public class PersonTest {","lastModifiedDate":"2021-10-07"},{"lineNumber":9,"author":{"gitId":"thaddyyz"},"content":"    private static final String TEST_NAME \u003d \"hello\";","lastModifiedDate":"2021-10-13"},{"lineNumber":10,"author":{"gitId":"thaddyyz"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":11,"author":{"gitId":"thaddyyz"},"content":"    @Test","lastModifiedDate":"2021-10-13"},{"lineNumber":12,"author":{"gitId":"thaddyyz"},"content":"    public void addFoodToIndividualFoodOrders_menuIndexLessThanOne_expectException() {","lastModifiedDate":"2021-10-15"},{"lineNumber":13,"author":{"gitId":"thaddyyz"},"content":"        Person person \u003d new Person(TEST_NAME);","lastModifiedDate":"2021-10-13"},{"lineNumber":14,"author":{"gitId":"thaddyyz"},"content":"        assertThrows(LotsException.class, () -\u003e {","lastModifiedDate":"2021-10-13"},{"lineNumber":15,"author":{"gitId":"thaddyyz"},"content":"            person.addFoodToIndividualFoodOrders(-1);","lastModifiedDate":"2021-10-13"},{"lineNumber":16,"author":{"gitId":"thaddyyz"},"content":"        });","lastModifiedDate":"2021-10-13"},{"lineNumber":17,"author":{"gitId":"thaddyyz"},"content":"        assertThrows(LotsException.class, () -\u003e {","lastModifiedDate":"2021-10-13"},{"lineNumber":18,"author":{"gitId":"thaddyyz"},"content":"            person.addFoodToIndividualFoodOrders(0);","lastModifiedDate":"2021-10-13"},{"lineNumber":19,"author":{"gitId":"thaddyyz"},"content":"        });","lastModifiedDate":"2021-10-13"},{"lineNumber":20,"author":{"gitId":"thaddyyz"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":21,"author":{"gitId":"thaddyyz"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":22,"author":{"gitId":"thaddyyz"},"content":"    @Test","lastModifiedDate":"2021-10-13"},{"lineNumber":23,"author":{"gitId":"thaddyyz"},"content":"    public void addFoodToIndividualFoodOrders_menuIndexOutOfBounds_expectException() {","lastModifiedDate":"2021-10-15"},{"lineNumber":24,"author":{"gitId":"thaddyyz"},"content":"        Person person \u003d new Person(TEST_NAME);","lastModifiedDate":"2021-10-13"},{"lineNumber":25,"author":{"gitId":"thaddyyz"},"content":"        assertThrows(LotsException.class, () -\u003e {","lastModifiedDate":"2021-10-13"},{"lineNumber":26,"author":{"gitId":"thaddyyz"},"content":"            person.addFoodToIndividualFoodOrders(88);","lastModifiedDate":"2021-10-13"},{"lineNumber":27,"author":{"gitId":"thaddyyz"},"content":"        });","lastModifiedDate":"2021-10-13"},{"lineNumber":28,"author":{"gitId":"thaddyyz"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":29,"author":{"gitId":"thaddyyz"},"content":"    ","lastModifiedDate":"2021-10-13"},{"lineNumber":30,"author":{"gitId":"thaddyyz"},"content":"    @Test","lastModifiedDate":"2021-10-13"},{"lineNumber":31,"author":{"gitId":"thaddyyz"},"content":"    public void removeFoodFromIndividualFoodOrders_menuIndexLessThanOne_expectException() {","lastModifiedDate":"2021-10-15"},{"lineNumber":32,"author":{"gitId":"thaddyyz"},"content":"        Person person \u003d new Person(TEST_NAME);","lastModifiedDate":"2021-10-13"},{"lineNumber":33,"author":{"gitId":"thaddyyz"},"content":"        assertThrows(LotsException.class, () -\u003e {","lastModifiedDate":"2021-10-13"},{"lineNumber":34,"author":{"gitId":"thaddyyz"},"content":"            person.removeFoodFromIndividualFoodOrders(-1,1);","lastModifiedDate":"2021-10-13"},{"lineNumber":35,"author":{"gitId":"thaddyyz"},"content":"        });","lastModifiedDate":"2021-10-13"},{"lineNumber":36,"author":{"gitId":"thaddyyz"},"content":"        assertThrows(LotsException.class, () -\u003e {","lastModifiedDate":"2021-10-13"},{"lineNumber":37,"author":{"gitId":"thaddyyz"},"content":"            person.removeFoodFromIndividualFoodOrders(0,1);","lastModifiedDate":"2021-10-13"},{"lineNumber":38,"author":{"gitId":"thaddyyz"},"content":"        });","lastModifiedDate":"2021-10-13"},{"lineNumber":39,"author":{"gitId":"thaddyyz"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":40,"author":{"gitId":"thaddyyz"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":41,"author":{"gitId":"thaddyyz"},"content":"    @Test","lastModifiedDate":"2021-10-13"},{"lineNumber":42,"author":{"gitId":"thaddyyz"},"content":"    public void removeFoodFromIndividualFoodOrders_moreThantotalMenuItems_expectException() {","lastModifiedDate":"2021-10-13"},{"lineNumber":43,"author":{"gitId":"thaddyyz"},"content":"        Person person \u003d new Person(TEST_NAME);","lastModifiedDate":"2021-10-13"},{"lineNumber":44,"author":{"gitId":"thaddyyz"},"content":"        assertThrows(LotsException.class, () -\u003e {","lastModifiedDate":"2021-10-13"},{"lineNumber":45,"author":{"gitId":"thaddyyz"},"content":"            person.removeFoodFromIndividualFoodOrders(88,1);","lastModifiedDate":"2021-10-13"},{"lineNumber":46,"author":{"gitId":"thaddyyz"},"content":"        });","lastModifiedDate":"2021-10-13"},{"lineNumber":47,"author":{"gitId":"thaddyyz"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":48,"author":{"gitId":"thaddyyz"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":49,"author":{"gitId":"thaddyyz"},"content":"    /*@Test","lastModifiedDate":"2021-10-13"},{"lineNumber":50,"author":{"gitId":"thaddyyz"},"content":"    public void deleteParticularOrder_menuIndexOutOfBounds_throwsLotsException() {","lastModifiedDate":"2021-10-15"},{"lineNumber":51,"author":{"gitId":"thaddyyz"},"content":"        Person person \u003d new Person(TEST_NAME);","lastModifiedDate":"2021-10-13"},{"lineNumber":52,"author":{"gitId":"thaddyyz"},"content":"        assertThrows(LotsException.class, () -\u003e {","lastModifiedDate":"2021-10-13"},{"lineNumber":53,"author":{"gitId":"thaddyyz"},"content":"            person.deleteParticularOrder(person.numberOfOrders+1);","lastModifiedDate":"2021-10-13"},{"lineNumber":54,"author":{"gitId":"thaddyyz"},"content":"        } );","lastModifiedDate":"2021-10-13"},{"lineNumber":55,"author":{"gitId":"thaddyyz"},"content":"    }*/","lastModifiedDate":"2021-10-13"},{"lineNumber":56,"author":{"gitId":"WaiKit-nus"},"content":" ","lastModifiedDate":"2021-10-07"},{"lineNumber":57,"author":{"gitId":"WaiKit-nus"},"content":"}","lastModifiedDate":"2021-10-07"}],"authorContributionMap":{"WaiKit-nus":8,"thaddyyz":49}},{"path":"src/test/java/seedu/duke/UiTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"andrewtkh1"},"content":"package seedu.duke;","lastModifiedDate":"2021-10-08"},{"lineNumber":2,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":3,"author":{"gitId":"andrewtkh1"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-08"},{"lineNumber":4,"author":{"gitId":"mohamad-adam8991"},"content":"import seedu.duke.command.Command;","lastModifiedDate":"2021-10-12"},{"lineNumber":5,"author":{"gitId":"mohamad-adam8991"},"content":"import seedu.duke.exceptions.LotsException;","lastModifiedDate":"2021-10-12"},{"lineNumber":6,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":7,"author":{"gitId":"andrewtkh1"},"content":"public class UiTest {","lastModifiedDate":"2021-10-08"},{"lineNumber":8,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":9,"author":{"gitId":"mohamad-adam8991"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":10,"author":{"gitId":"mohamad-adam8991"},"content":"    void execute_inputContainsExtraInputs_throwsLotsException() throws LotsException {","lastModifiedDate":"2021-10-12"},{"lineNumber":11,"author":{"gitId":"mohamad-adam8991"},"content":"        try {","lastModifiedDate":"2021-10-12"},{"lineNumber":12,"author":{"gitId":"mohamad-adam8991"},"content":"            Command command;","lastModifiedDate":"2021-10-12"},{"lineNumber":13,"author":{"gitId":"mohamad-adam8991"},"content":"            command \u003d Parser.getCommand(\"list a\");","lastModifiedDate":"2021-10-12"},{"lineNumber":14,"author":{"gitId":"mohamad-adam8991"},"content":"            command.execute();","lastModifiedDate":"2021-10-12"},{"lineNumber":15,"author":{"gitId":"mohamad-adam8991"},"content":"        } catch (LotsException e) {","lastModifiedDate":"2021-10-12"},{"lineNumber":16,"author":{"gitId":"mohamad-adam8991"},"content":"            System.out.println(\"Please make sure there is no inputs after the list command!\");","lastModifiedDate":"2021-10-12"},{"lineNumber":17,"author":{"gitId":"mohamad-adam8991"},"content":"        }","lastModifiedDate":"2021-10-12"},{"lineNumber":18,"author":{"gitId":"mohamad-adam8991"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":19,"author":{"gitId":"mohamad-adam8991"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":20,"author":{"gitId":"andrewtkh1"},"content":"}","lastModifiedDate":"2021-10-08"}],"authorContributionMap":{"mohamad-adam8991":13,"andrewtkh1":7}}]
