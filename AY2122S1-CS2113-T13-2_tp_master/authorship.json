[{"path":"build.gradle","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"thaddyyz"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.6.0\u0027","lastModifiedDate":"2021-10-13"},{"lineNumber":14,"author":{"gitId":"thaddyyz"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.6.0\u0027","lastModifiedDate":"2021-10-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    mainClassName \u003d \"seedu.duke.Duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"checkstyle {","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.23\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"andrewtkh1"},"content":"    enableAssertions \u003d true","lastModifiedDate":"2021-10-12"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"andrewtkh1":1,"thaddyyz":2,"-":44}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# About us","lastModifiedDate":"2020-05-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"Display | Name | Github Profile | Portfolio ","lastModifiedDate":"2020-05-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"--------|:----:|:--------------:|:---------:","lastModifiedDate":"2020-05-24"},{"lineNumber":5,"author":{"gitId":"thaddyyz"},"content":"![](https://via.placeholder.com/100.png?text\u003dPhoto) | Yi Zheng | [Github](https://github.com/thaddyyz) | [Portfolio](docs/team/thaddyyz.md)","lastModifiedDate":"2021-09-30"},{"lineNumber":6,"author":{"gitId":"WaiKit-nus"},"content":"![](https://via.placeholder.com/100.png?text\u003dPhoto) | Lau Wai Kit | [Github](https://github.com/WaiKit-nus) | [Portfolio](docs/team/waikit-nus.md)","lastModifiedDate":"2021-09-30"},{"lineNumber":7,"author":{"gitId":"markuslyq"},"content":"![](https://via.placeholder.com/100.png?text\u003dPhoto) | Markus Lim | [Github](https://github.com/markuslyq) | [Portfolio](docs/team/markuslyq.md)","lastModifiedDate":"2021-09-30"},{"lineNumber":8,"author":{"gitId":"andrewtkh1"},"content":"![](https://via.placeholder.com/100.png?text\u003dPhoto) | Andrew Tan | [Github](https://github.com/andrewtkh1) | [Portfolio](docs/team/andrewtkh1.md)","lastModifiedDate":"2021-09-30"},{"lineNumber":9,"author":{"gitId":"mohamad-adam8991"},"content":"![](https://via.placeholder.com/100.png?text\u003dPhoto) | Mohamad Adam Bin Mohamad Yazid | [Github](https://github.com/mohamad-adam8991) | [Portfolio](docs/team/mohamad-adam8991.md)","lastModifiedDate":"2021-09-30"}],"authorContributionMap":{"markuslyq":1,"mohamad-adam8991":1,"andrewtkh1":1,"thaddyyz":1,"WaiKit-nus":1,"-":4}},{"path":"docs/AdamDG.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"mohamad-adam8991"},"content":"# Developer Guide","lastModifiedDate":"2021-10-20"},{"lineNumber":2,"author":{"gitId":"mohamad-adam8991"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":3,"author":{"gitId":"mohamad-adam8991"},"content":"## Acknowledgements","lastModifiedDate":"2021-10-20"},{"lineNumber":4,"author":{"gitId":"mohamad-adam8991"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":5,"author":{"gitId":"mohamad-adam8991"},"content":"{list here sources of all reused/adapted ideas, code, documentation, and third-party libraries -- include links to the original source as well}","lastModifiedDate":"2021-10-20"},{"lineNumber":6,"author":{"gitId":"mohamad-adam8991"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":7,"author":{"gitId":"mohamad-adam8991"},"content":"## Design \u0026 implementation","lastModifiedDate":"2021-10-20"},{"lineNumber":8,"author":{"gitId":"mohamad-adam8991"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":9,"author":{"gitId":"mohamad-adam8991"},"content":"### Orders Command","lastModifiedDate":"2021-10-20"},{"lineNumber":10,"author":{"gitId":"mohamad-adam8991"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":11,"author":{"gitId":"mohamad-adam8991"},"content":"The purpose of the OrdersCommand is to display the list of current orders stored. The class diagram below shows the structure of","lastModifiedDate":"2021-10-20"},{"lineNumber":12,"author":{"gitId":"mohamad-adam8991"},"content":"the OrdersCommand class and how it is related to the other classes.","lastModifiedDate":"2021-10-20"},{"lineNumber":13,"author":{"gitId":"mohamad-adam8991"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":14,"author":{"gitId":"mohamad-adam8991"},"content":"\u003cbr\u003e![OrdersCommand Diagram](https://github.com/mohamad-adam8991/tp/blob/AdamDG_MA/UMLdiagrams/OrderCommandDiagram/OrderCommand%20Diagram.jpg)","lastModifiedDate":"2021-10-20"},{"lineNumber":15,"author":{"gitId":"mohamad-adam8991"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2021-10-20"},{"lineNumber":16,"author":{"gitId":"mohamad-adam8991"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":17,"author":{"gitId":"mohamad-adam8991"},"content":":information_source: **Note:** This diagram only shows methods and attributes related to the OrdersCommand class.","lastModifiedDate":"2021-10-20"},{"lineNumber":18,"author":{"gitId":"mohamad-adam8991"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":19,"author":{"gitId":"mohamad-adam8991"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-10-20"},{"lineNumber":20,"author":{"gitId":"mohamad-adam8991"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":21,"author":{"gitId":"mohamad-adam8991"},"content":"Below is an example of how the OrdersCommand is used, assuming that there are orders currently stored.","lastModifiedDate":"2021-10-20"},{"lineNumber":22,"author":{"gitId":"mohamad-adam8991"},"content":"1) Taking in the input `list`, the parser will instantiate an OrdersCommand object, which in turn is returned to the ","lastModifiedDate":"2021-10-20"},{"lineNumber":23,"author":{"gitId":"mohamad-adam8991"},"content":"main duke program.","lastModifiedDate":"2021-10-20"},{"lineNumber":24,"author":{"gitId":"mohamad-adam8991"},"content":"2) When the main duke program calls the `execute()` method of OrdersCommand, the `printOrdersList()` method of the UI ","lastModifiedDate":"2021-10-20"},{"lineNumber":25,"author":{"gitId":"mohamad-adam8991"},"content":"class is executed.","lastModifiedDate":"2021-10-20"},{"lineNumber":26,"author":{"gitId":"mohamad-adam8991"},"content":"3) Within the `printOrdersList()` method, the method loops through each person stored in the PeopleManager to print the ","lastModifiedDate":"2021-10-20"},{"lineNumber":27,"author":{"gitId":"mohamad-adam8991"},"content":"names of all persons currently stored. On top of that, `printIndividualPersonOrder()` is called to print the `foodIndex` and","lastModifiedDate":"2021-10-20"},{"lineNumber":28,"author":{"gitId":"mohamad-adam8991"},"content":"`quantity` data stored for each person.","lastModifiedDate":"2021-10-20"},{"lineNumber":29,"author":{"gitId":"mohamad-adam8991"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":30,"author":{"gitId":"mohamad-adam8991"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":31,"author":{"gitId":"mohamad-adam8991"},"content":"## Product scope","lastModifiedDate":"2021-10-20"},{"lineNumber":32,"author":{"gitId":"mohamad-adam8991"},"content":"### Target user profile","lastModifiedDate":"2021-10-20"},{"lineNumber":33,"author":{"gitId":"mohamad-adam8991"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":34,"author":{"gitId":"mohamad-adam8991"},"content":"{Describe the target user profile}","lastModifiedDate":"2021-10-20"},{"lineNumber":35,"author":{"gitId":"mohamad-adam8991"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":36,"author":{"gitId":"mohamad-adam8991"},"content":"### Value proposition","lastModifiedDate":"2021-10-20"},{"lineNumber":37,"author":{"gitId":"mohamad-adam8991"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":38,"author":{"gitId":"mohamad-adam8991"},"content":"{Describe the value proposition: what problem does it solve?}","lastModifiedDate":"2021-10-20"},{"lineNumber":39,"author":{"gitId":"mohamad-adam8991"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":40,"author":{"gitId":"mohamad-adam8991"},"content":"## User Stories","lastModifiedDate":"2021-10-20"},{"lineNumber":41,"author":{"gitId":"mohamad-adam8991"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":42,"author":{"gitId":"mohamad-adam8991"},"content":"|Version| As a ... | I want to ... | So that I can ...|","lastModifiedDate":"2021-10-20"},{"lineNumber":43,"author":{"gitId":"mohamad-adam8991"},"content":"|--------|----------|---------------|------------------|","lastModifiedDate":"2021-10-20"},{"lineNumber":44,"author":{"gitId":"mohamad-adam8991"},"content":"|v1.0|new user|see usage instructions|refer to them when I forget how to use the application|","lastModifiedDate":"2021-10-20"},{"lineNumber":45,"author":{"gitId":"mohamad-adam8991"},"content":"|v2.0|user|find a to-do item by name|locate a to-do without having to go through the entire list|","lastModifiedDate":"2021-10-20"},{"lineNumber":46,"author":{"gitId":"mohamad-adam8991"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":47,"author":{"gitId":"mohamad-adam8991"},"content":"## Non-Functional Requirements","lastModifiedDate":"2021-10-20"},{"lineNumber":48,"author":{"gitId":"mohamad-adam8991"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":49,"author":{"gitId":"mohamad-adam8991"},"content":"{Give non-functional requirements}","lastModifiedDate":"2021-10-20"},{"lineNumber":50,"author":{"gitId":"mohamad-adam8991"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":51,"author":{"gitId":"mohamad-adam8991"},"content":"## Glossary","lastModifiedDate":"2021-10-20"},{"lineNumber":52,"author":{"gitId":"mohamad-adam8991"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":53,"author":{"gitId":"mohamad-adam8991"},"content":"* *glossary item* - Definition","lastModifiedDate":"2021-10-20"},{"lineNumber":54,"author":{"gitId":"mohamad-adam8991"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":55,"author":{"gitId":"mohamad-adam8991"},"content":"## Instructions for manual testing","lastModifiedDate":"2021-10-20"},{"lineNumber":56,"author":{"gitId":"mohamad-adam8991"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":57,"author":{"gitId":"mohamad-adam8991"},"content":"{Give instructions on how to do a manual product testing e.g., how to load sample data to be used for testing}","lastModifiedDate":"2021-10-20"}],"authorContributionMap":{"mohamad-adam8991":57}},{"path":"docs/AndrewsDG.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"andrewtkh1"},"content":"# Developer Guide","lastModifiedDate":"2021-10-16"},{"lineNumber":2,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":3,"author":{"gitId":"andrewtkh1"},"content":"## Acknowledgements","lastModifiedDate":"2021-10-16"},{"lineNumber":4,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":5,"author":{"gitId":"andrewtkh1"},"content":"{list here sources of all reused/adapted ideas, code, documentation, and third-party libraries -- include links to the original source as well}","lastModifiedDate":"2021-10-16"},{"lineNumber":6,"author":{"gitId":"andrewtkh1"},"content":"## Architecture","lastModifiedDate":"2021-10-24"},{"lineNumber":7,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":8,"author":{"gitId":"andrewtkh1"},"content":"## Design","lastModifiedDate":"2021-10-24"},{"lineNumber":9,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":10,"author":{"gitId":"andrewtkh1"},"content":"### Logical Component","lastModifiedDate":"2021-10-24"},{"lineNumber":11,"author":{"gitId":"andrewtkh1"},"content":"The logical component of the program consists multiple classes. Namely: `Parser`,`Command` \u0026","lastModifiedDate":"2021-10-24"},{"lineNumber":12,"author":{"gitId":"andrewtkh1"},"content":"the various child class of `Command`.","lastModifiedDate":"2021-10-24"},{"lineNumber":13,"author":{"gitId":"andrewtkh1"},"content":"The class diagram below is a brief overview of how the `Parser` \u0026 the various `Command` class","lastModifiedDate":"2021-10-24"},{"lineNumber":14,"author":{"gitId":"andrewtkh1"},"content":"are related to one another.","lastModifiedDate":"2021-10-24"},{"lineNumber":15,"author":{"gitId":"andrewtkh1"},"content":"\u003cbr\u003eInsert Abstract Class diagram here","lastModifiedDate":"2021-10-25"},{"lineNumber":16,"author":{"gitId":"andrewtkh1"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2021-10-17"},{"lineNumber":17,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":18,"author":{"gitId":"andrewtkh1"},"content":":information_source: **Note:** Details of each specific command class \u0026 Duke have been omitted from this diagram.","lastModifiedDate":"2021-10-17"},{"lineNumber":19,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":20,"author":{"gitId":"andrewtkh1"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-10-17"},{"lineNumber":21,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":22,"author":{"gitId":"andrewtkh1"},"content":"Below is a brief explanation on how the logical component works.","lastModifiedDate":"2021-10-24"},{"lineNumber":23,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":24,"author":{"gitId":"andrewtkh1"},"content":"1) When the user key\u0027s in an input, `Duke.class` passes the entire String into the `Parser` class to be processed.","lastModifiedDate":"2021-10-24"},{"lineNumber":25,"author":{"gitId":"andrewtkh1"},"content":"2) The `Parser` class will then decide based on the input, which specific command type to be returned.","lastModifiedDate":"2021-10-24"},{"lineNumber":26,"author":{"gitId":"andrewtkh1"},"content":"   (e.g. `AddCommand`,`EditCommand`, etc...)","lastModifiedDate":"2021-10-24"},{"lineNumber":27,"author":{"gitId":"andrewtkh1"},"content":"3) The `PeopleManager` for each Command Class is then setup by calling the ","lastModifiedDate":"2021-10-24"},{"lineNumber":28,"author":{"gitId":"andrewtkh1"},"content":"   `setData(People Manager)` function.","lastModifiedDate":"2021-10-24"},{"lineNumber":29,"author":{"gitId":"andrewtkh1"},"content":"4) Next, the `execute()` function is called to perform whatever operation the","lastModifiedDate":"2021-10-24"},{"lineNumber":30,"author":{"gitId":"andrewtkh1"},"content":"   command is supposed to do.","lastModifiedDate":"2021-10-24"},{"lineNumber":31,"author":{"gitId":"andrewtkh1"},"content":"5) Depending on the which specific Command type it is, the `Command` might be able to ","lastModifiedDate":"2021-10-24"},{"lineNumber":32,"author":{"gitId":"andrewtkh1"},"content":"   communicate with other components such as the `Menu` \u0026 `Ui` class to perform it\u0027s respective","lastModifiedDate":"2021-10-24"},{"lineNumber":33,"author":{"gitId":"andrewtkh1"},"content":"   tasks. (e.g. Printing the Menu)","lastModifiedDate":"2021-10-24"},{"lineNumber":34,"author":{"gitId":"andrewtkh1"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":35,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":36,"author":{"gitId":"andrewtkh1"},"content":"All the specific types of command class are a child class of `Command` to allow the program","lastModifiedDate":"2021-10-24"},{"lineNumber":37,"author":{"gitId":"andrewtkh1"},"content":"to treat all commands the same when they return from the `Parser` class. Below is a quick overview","lastModifiedDate":"2021-10-24"},{"lineNumber":38,"author":{"gitId":"andrewtkh1"},"content":"of how the `Parser` class works.","lastModifiedDate":"2021-10-24"},{"lineNumber":39,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":40,"author":{"gitId":"andrewtkh1"},"content":"![Class Diagram](https://raw.githubusercontent.com/AY2122S1-CS2113-T13-2/tp/master/UMLdiagrams/ParserDiagrams/ParserClassDiag-Page-1.jpg)","lastModifiedDate":"2021-10-25"},{"lineNumber":41,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":42,"author":{"gitId":"andrewtkh1"},"content":"1) `Parser` checks to make sure input is neither blank nor empty.","lastModifiedDate":"2021-10-24"},{"lineNumber":43,"author":{"gitId":"andrewtkh1"},"content":"2) The command word of the input (e.g.`\"add\"`, `\"edit\"`) is put through a switch statement.","lastModifiedDate":"2021-10-24"},{"lineNumber":44,"author":{"gitId":"andrewtkh1"},"content":"3) The return item is then determined by which case of the switch statement the command word","lastModifiedDate":"2021-10-24"},{"lineNumber":45,"author":{"gitId":"andrewtkh1"},"content":"falls into.","lastModifiedDate":"2021-10-24"},{"lineNumber":46,"author":{"gitId":"andrewtkh1"},"content":"   ","lastModifiedDate":"2021-10-24"},{"lineNumber":47,"author":{"gitId":"andrewtkh1"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":48,"author":{"gitId":"andrewtkh1"},"content":"Below is a sequence diagram modeling how the `Parser` class works.","lastModifiedDate":"2021-10-24"},{"lineNumber":49,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":50,"author":{"gitId":"andrewtkh1"},"content":"![Squence Diagram of Parser](https://raw.githubusercontent.com/AY2122S1-CS2113-T13-2/tp/master/UMLdiagrams/ParserDiagrams/Parser%20Sequence%20Diag.jpg)","lastModifiedDate":"2021-10-24"},{"lineNumber":51,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":52,"author":{"gitId":"andrewtkh1"},"content":"### Delete Command","lastModifiedDate":"2021-10-24"},{"lineNumber":53,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":54,"author":{"gitId":"andrewtkh1"},"content":"The purpose of the delete command is to delete a specific order from a particular person. The class diagram below shows the structure of the deleteCommand class and its relationship with other classes.  ","lastModifiedDate":"2021-10-24"},{"lineNumber":55,"author":{"gitId":"andrewtkh1"},"content":"\u003cbr\u003e![Class Diagram](https://raw.githubusercontent.com/AY2122S1-CS2113-T13-2/tp/master/UMLdiagrams/DeleteCommandDiagram/DeleteCommand%20Diagram.jpg?raw\u003dtrue)","lastModifiedDate":"2021-10-24"},{"lineNumber":56,"author":{"gitId":"andrewtkh1"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":57,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":58,"author":{"gitId":"andrewtkh1"},"content":":information_source: **Note:** This is not a full representation of all the classes. Only methods and attributes associated with the deleteCommand class is being shown.","lastModifiedDate":"2021-10-24"},{"lineNumber":59,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":60,"author":{"gitId":"andrewtkh1"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":61,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":62,"author":{"gitId":"andrewtkh1"},"content":"Below is an example of how the deleteCommand class behaves at each step.","lastModifiedDate":"2021-10-24"},{"lineNumber":63,"author":{"gitId":"andrewtkh1"},"content":"Assume that there are 3 persons with 3 orders each.","lastModifiedDate":"2021-10-24"},{"lineNumber":64,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":65,"author":{"gitId":"andrewtkh1"},"content":"Step 1:\u003cbr\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":66,"author":{"gitId":"andrewtkh1"},"content":"Assuming that the user execute `delete 1/2` command to delete the the order of index `‘2’` from the person of index `‘1’`, the parser would instantiate an object of deleteCommand class, which is a subclass of the Command class. In the constructor of the deleteCommand class, the input entered by the user would then be taken as a parameter.","lastModifiedDate":"2021-10-24"},{"lineNumber":67,"author":{"gitId":"andrewtkh1"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":68,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":69,"author":{"gitId":"andrewtkh1"},"content":"Step 2:\u003cbr\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":70,"author":{"gitId":"andrewtkh1"},"content":"The input is then split and initialised to its respectively attributes using the `getPersonIndex()` and `getFoodIndex()` methods. In this case, `\u00271\u0027` would be initialised as personIndex and `\u00272\u0027` as foodIndex. The deleteCommand class is then returned to Duke, the main program, via the Parser class.","lastModifiedDate":"2021-10-24"},{"lineNumber":71,"author":{"gitId":"andrewtkh1"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":72,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":73,"author":{"gitId":"andrewtkh1"},"content":"Step 3:\u003cbr\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":74,"author":{"gitId":"andrewtkh1"},"content":"Duke calls the `execute()` method of deleteCommand, which executes `deleteOrder()`. An instance of peopleManager, initialised in the Command class, is then parsed as a paramenter.","lastModifiedDate":"2021-10-24"},{"lineNumber":75,"author":{"gitId":"andrewtkh1"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":76,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":77,"author":{"gitId":"andrewtkh1"},"content":"Step 4:\u003cbr\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":78,"author":{"gitId":"andrewtkh1"},"content":"Within the `deleteOrder()` method, the person whose order is to be deleted is initialised and the deletion of the order is done via `deleteParticularOrder()` of the Person class as only the Person class has access to the Order class which holds the quantity of the order. The quantity of that particular order is then changed to 0 using `setQuantity()` in the Order class. This is to encapsulate the quantity attribute so as to prevent any unauthorised parties from accessing them directly.","lastModifiedDate":"2021-10-24"},{"lineNumber":79,"author":{"gitId":"andrewtkh1"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":80,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":81,"author":{"gitId":"andrewtkh1"},"content":"Step 5:\u003cbr\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":82,"author":{"gitId":"andrewtkh1"},"content":"`printDeleteMessage()` is called to notify the user of the deletion and if the person no longer has any orders tagged to him, that paricular person would be deleted from the list too.","lastModifiedDate":"2021-10-24"},{"lineNumber":83,"author":{"gitId":"andrewtkh1"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":84,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":85,"author":{"gitId":"andrewtkh1"},"content":"### Orders Command","lastModifiedDate":"2021-10-24"},{"lineNumber":86,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":87,"author":{"gitId":"andrewtkh1"},"content":"The purpose of the OrdersCommand is to display the list of current orders stored. The class diagram below shows the structure of","lastModifiedDate":"2021-10-24"},{"lineNumber":88,"author":{"gitId":"andrewtkh1"},"content":"the OrdersCommand class and how it is related to the other classes.","lastModifiedDate":"2021-10-24"},{"lineNumber":89,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":90,"author":{"gitId":"andrewtkh1"},"content":"\u003cbr\u003e![OrdersCommand Diagram](https://raw.githubusercontent.com/AY2122S1-CS2113-T13-2/tp/master/UMLdiagrams/OrderCommandDiagram/OrderCommand%20Diagram.jpg)","lastModifiedDate":"2021-10-24"},{"lineNumber":91,"author":{"gitId":"andrewtkh1"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":92,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":93,"author":{"gitId":"andrewtkh1"},"content":":information_source: **Note:** This diagram only shows methods and attributes related to the OrdersCommand class.","lastModifiedDate":"2021-10-24"},{"lineNumber":94,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":95,"author":{"gitId":"andrewtkh1"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":96,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":97,"author":{"gitId":"andrewtkh1"},"content":"Below is an example of how the OrdersCommand is used, assuming that there are orders currently stored.","lastModifiedDate":"2021-10-24"},{"lineNumber":98,"author":{"gitId":"andrewtkh1"},"content":"1) Taking in the input `list`, the parser will instantiate an OrdersCommand object, which in turn is returned to the","lastModifiedDate":"2021-10-24"},{"lineNumber":99,"author":{"gitId":"andrewtkh1"},"content":"   main duke program.","lastModifiedDate":"2021-10-24"},{"lineNumber":100,"author":{"gitId":"andrewtkh1"},"content":"2) When the main duke program calls the `execute()` method of OrdersCommand, the `printOrdersList()` method of the UI","lastModifiedDate":"2021-10-24"},{"lineNumber":101,"author":{"gitId":"andrewtkh1"},"content":"   class is executed.","lastModifiedDate":"2021-10-24"},{"lineNumber":102,"author":{"gitId":"andrewtkh1"},"content":"3) Within the `printOrdersList()` method, the method loops through each person stored in the PeopleManager to print the","lastModifiedDate":"2021-10-24"},{"lineNumber":103,"author":{"gitId":"andrewtkh1"},"content":"   names of all persons currently stored. On top of that, `printIndividualPersonOrder()` is called to print the `foodIndex` and","lastModifiedDate":"2021-10-24"},{"lineNumber":104,"author":{"gitId":"andrewtkh1"},"content":"   `quantity` data stored for each person.","lastModifiedDate":"2021-10-24"},{"lineNumber":105,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":106,"author":{"gitId":"andrewtkh1"},"content":"### Add Command","lastModifiedDate":"2021-10-24"},{"lineNumber":107,"author":{"gitId":"andrewtkh1"},"content":"The purpose of the AddCommand is to take in the user input and split the input to three different categories.","lastModifiedDate":"2021-10-24"},{"lineNumber":108,"author":{"gitId":"andrewtkh1"},"content":"The three categories are the input name, order index and quantity. These data will then be added into a new Person object,","lastModifiedDate":"2021-10-24"},{"lineNumber":109,"author":{"gitId":"andrewtkh1"},"content":"which will be added into the list of People.","lastModifiedDate":"2021-10-24"},{"lineNumber":110,"author":{"gitId":"andrewtkh1"},"content":"The class diagram below is a brief overview of how the AddCommand is related to other classes.","lastModifiedDate":"2021-10-24"},{"lineNumber":111,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":112,"author":{"gitId":"andrewtkh1"},"content":"\u003cbr\u003e![AddCommandDiagram](https://raw.githubusercontent.com/WaiKit-nus/tp/AddCommandClassDG-WK/UMLdiagrams/AddCommandDiagram/AddCommandDiagram.jpg)","lastModifiedDate":"2021-10-24"},{"lineNumber":113,"author":{"gitId":"andrewtkh1"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":114,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":115,"author":{"gitId":"andrewtkh1"},"content":":information_source: **Note:** Details of each specific command class \u0026 Duke have been omitted from this diagram.","lastModifiedDate":"2021-10-24"},{"lineNumber":116,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":117,"author":{"gitId":"andrewtkh1"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":118,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":119,"author":{"gitId":"andrewtkh1"},"content":"Listed below is an example on the usage of Add Command.","lastModifiedDate":"2021-10-24"},{"lineNumber":120,"author":{"gitId":"andrewtkh1"},"content":"1) Example Command: `add /n Jacob /i 3 /q 2`. This command translates into adding a person named Jacob, ordering the 3rd food on the menu with 2 quantity.","lastModifiedDate":"2021-10-24"},{"lineNumber":121,"author":{"gitId":"andrewtkh1"},"content":"2) The Add command will take in this input from the Parser class, which will then split this input string into `personName`, `foodIndex` and `foodQuantity` respectively.","lastModifiedDate":"2021-10-24"},{"lineNumber":122,"author":{"gitId":"andrewtkh1"},"content":"   A new `Person` object will be instantiated and the data `personName`, `foodIndex` and `foodQuantity` is passed into this object.","lastModifiedDate":"2021-10-24"},{"lineNumber":123,"author":{"gitId":"andrewtkh1"},"content":"3) This `Person` object will be added into the `listOfPeople` in the `PeopleManager` class.","lastModifiedDate":"2021-10-24"},{"lineNumber":124,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":125,"author":{"gitId":"andrewtkh1"},"content":"## Implementation","lastModifiedDate":"2021-10-24"},{"lineNumber":126,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":127,"author":{"gitId":"andrewtkh1"},"content":"### Logical Components","lastModifiedDate":"2021-10-24"},{"lineNumber":128,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":129,"author":{"gitId":"andrewtkh1"},"content":"Below is a step by step example on how the Logical components interact when a user keys in an input.","lastModifiedDate":"2021-10-24"},{"lineNumber":130,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":131,"author":{"gitId":"andrewtkh1"},"content":"Step 1)\u003cbr\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":132,"author":{"gitId":"andrewtkh1"},"content":"Lets assume the user input is `delete 1/2`. `Duke` will then call the method ","lastModifiedDate":"2021-10-24"},{"lineNumber":133,"author":{"gitId":"andrewtkh1"},"content":"`Parser.getCommand(\"delete 1/2\")`. The method would split the user\u0027s input into an array of","lastModifiedDate":"2021-10-24"},{"lineNumber":134,"author":{"gitId":"andrewtkh1"},"content":"strings along the spaces and store them in the array `listOfInputs`. After which,","lastModifiedDate":"2021-10-24"},{"lineNumber":135,"author":{"gitId":"andrewtkh1"},"content":"it will get the string `\"delete\"` from the 0th element of `listOfInputs` and store ","lastModifiedDate":"2021-10-24"},{"lineNumber":136,"author":{"gitId":"andrewtkh1"},"content":"it in `commandInString`.","lastModifiedDate":"2021-10-24"},{"lineNumber":137,"author":{"gitId":"andrewtkh1"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-10-17"},{"lineNumber":138,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":139,"author":{"gitId":"andrewtkh1"},"content":"Step 2)\u003cbr\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":140,"author":{"gitId":"andrewtkh1"},"content":"The method will then parse `commandInString` through the switch cases and try to match it with","lastModifiedDate":"2021-10-16"},{"lineNumber":141,"author":{"gitId":"andrewtkh1"},"content":"one of the known commands words stored in each respective command\u0027s class attribute called `COMMAND_WORD`.","lastModifiedDate":"2021-10-24"},{"lineNumber":142,"author":{"gitId":"andrewtkh1"},"content":"In this case, the `\"delete\"` command will cause the parser to return a `DeleteCommand` object.","lastModifiedDate":"2021-10-24"},{"lineNumber":143,"author":{"gitId":"andrewtkh1"},"content":"The image below shows the codes for the switch statement.","lastModifiedDate":"2021-10-24"},{"lineNumber":144,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":145,"author":{"gitId":"andrewtkh1"},"content":"![Switch case Code](https://raw.githubusercontent.com/AY2122S1-CS2113-T13-2/tp/master/UMLdiagrams/ParserDiagrams/SwitchClassCode.jpg)","lastModifiedDate":"2021-10-24"},{"lineNumber":146,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":147,"author":{"gitId":"andrewtkh1"},"content":"Step 3)\u003cbr\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":148,"author":{"gitId":"andrewtkh1"},"content":"Next, `Duke` will then use the returned command to call `Command.execute()` which will interact","lastModifiedDate":"2021-10-24"},{"lineNumber":149,"author":{"gitId":"andrewtkh1"},"content":"with the `Manager Components` of the program who will then remove the 2nd order from the first","lastModifiedDate":"2021-10-24"},{"lineNumber":150,"author":{"gitId":"andrewtkh1"},"content":"person in the list.","lastModifiedDate":"2021-10-24"},{"lineNumber":151,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":152,"author":{"gitId":"andrewtkh1"},"content":"Below is a Sequence diagram for the entire process mentioned above.","lastModifiedDate":"2021-10-24"},{"lineNumber":153,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":154,"author":{"gitId":"andrewtkh1"},"content":"![Squence Diagram of Logic](https://raw.githubusercontent.com/AY2122S1-CS2113-T13-2/tp/master/UMLdiagrams/ParserDiagrams/LogicSequenceDiag.jpg)","lastModifiedDate":"2021-10-24"},{"lineNumber":155,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":156,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":157,"author":{"gitId":"andrewtkh1"},"content":"#### Alternate implementation","lastModifiedDate":"2021-10-24"},{"lineNumber":158,"author":{"gitId":"andrewtkh1"},"content":"For the `Parser` class, we initially had thought of having each command\u0027s respective ","lastModifiedDate":"2021-10-24"},{"lineNumber":159,"author":{"gitId":"andrewtkh1"},"content":"functions to be executed inside the switch statement.","lastModifiedDate":"2021-10-24"},{"lineNumber":160,"author":{"gitId":"andrewtkh1"},"content":"A rough example of the `delete` and `add` function can be seen below.","lastModifiedDate":"2021-10-17"},{"lineNumber":161,"author":{"gitId":"andrewtkh1"},"content":"```","lastModifiedDate":"2021-10-17"},{"lineNumber":162,"author":{"gitId":"andrewtkh1"},"content":"case \"delete\":","lastModifiedDate":"2021-10-17"},{"lineNumber":163,"author":{"gitId":"andrewtkh1"},"content":"    functionToDeleteTask(input);","lastModifiedDate":"2021-10-17"},{"lineNumber":164,"author":{"gitId":"andrewtkh1"},"content":"    break;","lastModifiedDate":"2021-10-17"},{"lineNumber":165,"author":{"gitId":"andrewtkh1"},"content":"case \"add\":","lastModifiedDate":"2021-10-17"},{"lineNumber":166,"author":{"gitId":"andrewtkh1"},"content":"    functionToAddTask(input);","lastModifiedDate":"2021-10-17"},{"lineNumber":167,"author":{"gitId":"andrewtkh1"},"content":"    break;","lastModifiedDate":"2021-10-17"},{"lineNumber":168,"author":{"gitId":"andrewtkh1"},"content":"```","lastModifiedDate":"2021-10-17"},{"lineNumber":169,"author":{"gitId":"andrewtkh1"},"content":"The upside of doing would be that there is less code overall.","lastModifiedDate":"2021-10-17"},{"lineNumber":170,"author":{"gitId":"andrewtkh1"},"content":"However, doing so would cause our code to have a higher amount of coupling and would also ","lastModifiedDate":"2021-10-24"},{"lineNumber":171,"author":{"gitId":"andrewtkh1"},"content":"cause the code to be messier and therefore harder to read. By having a command class","lastModifiedDate":"2021-10-24"},{"lineNumber":172,"author":{"gitId":"andrewtkh1"},"content":"for each respective command, this allows us to segregate all the necessary functions","lastModifiedDate":"2021-10-24"},{"lineNumber":173,"author":{"gitId":"andrewtkh1"},"content":"for each command in their own respective class, therefore making testing easier too.","lastModifiedDate":"2021-10-24"},{"lineNumber":174,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":175,"author":{"gitId":"andrewtkh1"},"content":"## Product scope","lastModifiedDate":"2021-10-16"},{"lineNumber":176,"author":{"gitId":"andrewtkh1"},"content":"### Target user profile","lastModifiedDate":"2021-10-16"},{"lineNumber":177,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":178,"author":{"gitId":"andrewtkh1"},"content":"* User has good typing skills.","lastModifiedDate":"2021-10-16"},{"lineNumber":179,"author":{"gitId":"andrewtkh1"},"content":"* Is comfortable without GUI.","lastModifiedDate":"2021-10-16"},{"lineNumber":180,"author":{"gitId":"andrewtkh1"},"content":"* Tends to make large orders of food.","lastModifiedDate":"2021-10-16"},{"lineNumber":181,"author":{"gitId":"andrewtkh1"},"content":"* Wishes to track multiple different orders of food.","lastModifiedDate":"2021-10-16"},{"lineNumber":182,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":183,"author":{"gitId":"andrewtkh1"},"content":"### Value proposition","lastModifiedDate":"2021-10-16"},{"lineNumber":184,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":185,"author":{"gitId":"andrewtkh1"},"content":"* Large orders can be confusing to keep track, especially if orders are to different stores.","lastModifiedDate":"2021-10-16"},{"lineNumber":186,"author":{"gitId":"andrewtkh1"},"content":"* Allows users to keep track of bulk orders easily.","lastModifiedDate":"2021-10-16"},{"lineNumber":187,"author":{"gitId":"andrewtkh1"},"content":"* Easily keep track of costs.","lastModifiedDate":"2021-10-16"},{"lineNumber":188,"author":{"gitId":"andrewtkh1"},"content":"* Ensures that no orders are left out.","lastModifiedDate":"2021-10-16"},{"lineNumber":189,"author":{"gitId":"andrewtkh1"},"content":"* Knows which order belongs to which store.","lastModifiedDate":"2021-10-16"},{"lineNumber":190,"author":{"gitId":"andrewtkh1"},"content":"* Allow flexibility and control over what description you would like of your friends.","lastModifiedDate":"2021-10-16"},{"lineNumber":191,"author":{"gitId":"andrewtkh1"},"content":"* Users are able to delete/edit entries quickly.","lastModifiedDate":"2021-10-16"},{"lineNumber":192,"author":{"gitId":"andrewtkh1"},"content":"* Comments on the food can also be described by you (e.g. No meat for BanMian).","lastModifiedDate":"2021-10-16"},{"lineNumber":193,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":194,"author":{"gitId":"andrewtkh1"},"content":"## User Stories","lastModifiedDate":"2021-10-16"},{"lineNumber":195,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":196,"author":{"gitId":"andrewtkh1"},"content":"|Version| As a ... | I want to ... | So that I can ...|","lastModifiedDate":"2021-10-16"},{"lineNumber":197,"author":{"gitId":"andrewtkh1"},"content":"|--------|----------|---------------|------------------|","lastModifiedDate":"2021-10-16"},{"lineNumber":198,"author":{"gitId":"andrewtkh1"},"content":"|v1.0|New student on campus|View the menu.|Avoid having to go down physically to the shops.|","lastModifiedDate":"2021-10-25"},{"lineNumber":199,"author":{"gitId":"andrewtkh1"},"content":"|v1.0|User|View the current orders with their names attached.|Able to track who ordered what.|","lastModifiedDate":"2021-10-25"},{"lineNumber":200,"author":{"gitId":"andrewtkh1"},"content":"|v1.0|User|Add my choices of food from the menu.| Track what orders I plan to get.|","lastModifiedDate":"2021-10-25"},{"lineNumber":201,"author":{"gitId":"andrewtkh1"},"content":"|v1.0|User|Delete order\u0027s that I\u0027ve added.|So i can remove orders if someone changes their mind.|","lastModifiedDate":"2021-10-25"},{"lineNumber":202,"author":{"gitId":"andrewtkh1"},"content":"|v2.0|New User|Easily understand how to use the app.| Navigate the program with ease.| ","lastModifiedDate":"2021-10-25"},{"lineNumber":203,"author":{"gitId":"andrewtkh1"},"content":"|v2.0|Person ordering for a group.|View the cost breakdown for the current order.| Know how much each person owes me.|","lastModifiedDate":"2021-10-25"},{"lineNumber":204,"author":{"gitId":"andrewtkh1"},"content":"|v2.0|Person ordering for a large group.|View the total number of orders keyed in.| Ensure that everyone has ordered.|","lastModifiedDate":"2021-10-25"},{"lineNumber":205,"author":{"gitId":"andrewtkh1"},"content":"|v2.0|User|Amend existing orders.|Edit an order without having to re-type it.|","lastModifiedDate":"2021-10-25"},{"lineNumber":206,"author":{"gitId":"andrewtkh1"},"content":"|v2.0|Person ordering for a large group.|Find a specific order by name.|Easy know what they ordered without having to scroll through.|","lastModifiedDate":"2021-10-25"},{"lineNumber":207,"author":{"gitId":"andrewtkh1"},"content":"|v2.5|Tech illiterate| View a user guide.| Learn how to use the program.|","lastModifiedDate":"2021-10-25"},{"lineNumber":208,"author":{"gitId":"andrewtkh1"},"content":"|-|Person ordering for a group| Track everyone\u0027s food allergies.| Avoid ordering the wrong order.|","lastModifiedDate":"2021-10-25"},{"lineNumber":209,"author":{"gitId":"andrewtkh1"},"content":"|-|Person ordering food for friends| Track what add-ons my friends want.|Track how much it is and won\u0027t forget about it.|","lastModifiedDate":"2021-10-25"},{"lineNumber":210,"author":{"gitId":"andrewtkh1"},"content":"|-|Lecturer| Know how many people does a food serve.|Easily order food for the class.|","lastModifiedDate":"2021-10-25"},{"lineNumber":211,"author":{"gitId":"andrewtkh1"},"content":"|-|Host of a party| Sort the menu based on categories| Keep track of different varieties of food.|","lastModifiedDate":"2021-10-25"},{"lineNumber":212,"author":{"gitId":"andrewtkh1"},"content":"|-|Indecisive user| View recommendations based on my frequent orders.| Simplify my ordering process.|","lastModifiedDate":"2021-10-25"},{"lineNumber":213,"author":{"gitId":"andrewtkh1"},"content":"|-|Non-local| View the menu with descriptions in multiple languages.| Order food without a language barrier.|","lastModifiedDate":"2021-10-25"},{"lineNumber":214,"author":{"gitId":"andrewtkh1"},"content":"|-|User with poor data| Download the menu and order list.| Track my orders even without the internet.|","lastModifiedDate":"2021-10-25"},{"lineNumber":215,"author":{"gitId":"andrewtkh1"},"content":"|-|User| View if a food item is sold out.| Decide whether to order from another store.|","lastModifiedDate":"2021-10-25"},{"lineNumber":216,"author":{"gitId":"andrewtkh1"},"content":"|-|Health conscious user| View the nutritional value of a food.| Easily track my diet.|","lastModifiedDate":"2021-10-25"},{"lineNumber":217,"author":{"gitId":"andrewtkh1"},"content":"|-|Ordering for a large group| View the recommended serving size.| Decide on how much food to order.|","lastModifiedDate":"2021-10-25"},{"lineNumber":218,"author":{"gitId":"andrewtkh1"},"content":"|-|Recurring user| Store my favourite food| Easily find what I like.|","lastModifiedDate":"2021-10-25"},{"lineNumber":219,"author":{"gitId":"andrewtkh1"},"content":"|-|Recurring user| Saved my food orders| Easily place my regular order again.|","lastModifiedDate":"2021-10-25"},{"lineNumber":220,"author":{"gitId":"andrewtkh1"},"content":"|-|User| Retrieve my previous order.| Place my previous orders again.|","lastModifiedDate":"2021-10-25"},{"lineNumber":221,"author":{"gitId":"andrewtkh1"},"content":"|-|User| View menu from a file| Avoid having to scroll through the whole menu.|","lastModifiedDate":"2021-10-25"},{"lineNumber":222,"author":{"gitId":"andrewtkh1"},"content":"|-|User| Track who has paid| Know who still owes me money.|","lastModifiedDate":"2021-10-25"},{"lineNumber":223,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":224,"author":{"gitId":"andrewtkh1"},"content":"## Non-Functional Requirements","lastModifiedDate":"2021-10-16"},{"lineNumber":225,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":226,"author":{"gitId":"andrewtkh1"},"content":"- Program should be able to work on most Operating Systems such as `Windows`, `Linux`,","lastModifiedDate":"2021-10-25"},{"lineNumber":227,"author":{"gitId":"andrewtkh1"},"content":"`OS-X` \u0026 `Unix`.","lastModifiedDate":"2021-10-25"},{"lineNumber":228,"author":{"gitId":"andrewtkh1"},"content":"  ","lastModifiedDate":"2021-10-25"},{"lineNumber":229,"author":{"gitId":"andrewtkh1"},"content":"- User needs to have Java `11` or above installed in order for the program to work.","lastModifiedDate":"2021-10-25"},{"lineNumber":230,"author":{"gitId":"andrewtkh1"},"content":"  ","lastModifiedDate":"2021-10-25"},{"lineNumber":231,"author":{"gitId":"andrewtkh1"},"content":"- The program should be able to support up to all these values stated below.","lastModifiedDate":"2021-10-25"},{"lineNumber":232,"author":{"gitId":"andrewtkh1"},"content":"   - Up to `99` _Unique person_ at a time. ","lastModifiedDate":"2021-10-25"},{"lineNumber":233,"author":{"gitId":"andrewtkh1"},"content":"   - Maximum of `99` _Unique Food_ items in the menu.","lastModifiedDate":"2021-10-25"},{"lineNumber":234,"author":{"gitId":"andrewtkh1"},"content":"   - Maximum of `999` quantity for each distinct food item in a person\u0027s order.","lastModifiedDate":"2021-10-25"},{"lineNumber":235,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":236,"author":{"gitId":"andrewtkh1"},"content":"## Glossary","lastModifiedDate":"2021-10-16"},{"lineNumber":237,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":238,"author":{"gitId":"andrewtkh1"},"content":"* `Unique Person` - Every entry with a different name counts as a unique person.","lastModifiedDate":"2021-10-25"},{"lineNumber":239,"author":{"gitId":"andrewtkh1"},"content":"* `Unique Food`   - Every element in the food array menu counts as a unique food.","lastModifiedDate":"2021-10-25"},{"lineNumber":240,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":241,"author":{"gitId":"andrewtkh1"},"content":"## Instructions for manual testing","lastModifiedDate":"2021-10-16"},{"lineNumber":242,"author":{"gitId":"andrewtkh1"},"content":"The instructions below give a brief overview on how to test the functions manually.","lastModifiedDate":"2021-10-25"},{"lineNumber":243,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":244,"author":{"gitId":"andrewtkh1"},"content":"- :information_source: More test cases can be found in each of their respective test class under","lastModifiedDate":"2021-10-25"},{"lineNumber":245,"author":{"gitId":"andrewtkh1"},"content":"`src/test/java/seedu.duke`","lastModifiedDate":"2021-10-25"},{"lineNumber":246,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":247,"author":{"gitId":"andrewtkh1"},"content":"[Starting up \u0026 Shutting down](#Starting-up-\u0026-Shutting-down)","lastModifiedDate":"2021-10-25"},{"lineNumber":248,"author":{"gitId":"andrewtkh1"},"content":"\u003cbr\u003e [Add function](#Add-Function)","lastModifiedDate":"2021-10-25"},{"lineNumber":249,"author":{"gitId":"andrewtkh1"},"content":"\u003cbr\u003e [Edit function](#Edit-Function)","lastModifiedDate":"2021-10-25"},{"lineNumber":250,"author":{"gitId":"andrewtkh1"},"content":"\u003cbr\u003e [Find function](#Find-Function)","lastModifiedDate":"2021-10-25"},{"lineNumber":251,"author":{"gitId":"andrewtkh1"},"content":"\u003cbr\u003e [Delete function](#Delete-Function)","lastModifiedDate":"2021-10-25"},{"lineNumber":252,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":253,"author":{"gitId":"andrewtkh1"},"content":"---","lastModifiedDate":"2021-10-25"},{"lineNumber":254,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":255,"author":{"gitId":"andrewtkh1"},"content":"### Starting up \u0026 Shutting down","lastModifiedDate":"2021-10-25"},{"lineNumber":256,"author":{"gitId":"andrewtkh1"},"content":"1) To begin, download the .jar file and place it in a folder.","lastModifiedDate":"2021-10-25"},{"lineNumber":257,"author":{"gitId":"andrewtkh1"},"content":"2) Open the CLI at the file location and run by the jar file by giving the command,","lastModifiedDate":"2021-10-25"},{"lineNumber":258,"author":{"gitId":"andrewtkh1"},"content":"`java -jar \u003cjar file name\u003e.jar`","lastModifiedDate":"2021-10-25"},{"lineNumber":259,"author":{"gitId":"andrewtkh1"},"content":"   - E.g) With `CS2113T.jar` the command would be `java -jar CS2113T.jar`","lastModifiedDate":"2021-10-25"},{"lineNumber":260,"author":{"gitId":"andrewtkh1"},"content":"3) To end the program, enter the command `bye` or simply close the CLI window.","lastModifiedDate":"2021-10-25"},{"lineNumber":261,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":262,"author":{"gitId":"andrewtkh1"},"content":"---","lastModifiedDate":"2021-10-25"},{"lineNumber":263,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":264,"author":{"gitId":"andrewtkh1"},"content":"### Add Function","lastModifiedDate":"2021-10-25"},{"lineNumber":265,"author":{"gitId":"andrewtkh1"},"content":"- The format of the command is `add /n \u003cname\u003e /i \u003cindex\u003e /q \u003cquanity\u003e`","lastModifiedDate":"2021-10-25"},{"lineNumber":266,"author":{"gitId":"andrewtkh1"},"content":"- Prerequisite: The `Menu` has to contain at least `2` food item.","lastModifiedDate":"2021-10-25"},{"lineNumber":267,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":268,"author":{"gitId":"andrewtkh1"},"content":"| **Test Case** | **Command** | **Expected Result** |","lastModifiedDate":"2021-10-25"},{"lineNumber":269,"author":{"gitId":"andrewtkh1"},"content":"|:------------:|:-------------|:--------------------|","lastModifiedDate":"2021-10-25"},{"lineNumber":270,"author":{"gitId":"andrewtkh1"},"content":"|Add 1 person.|`add /n abc /i 1 /q 2`| Adds person named `abc` with `2` quantities of item `1`|","lastModifiedDate":"2021-10-25"},{"lineNumber":271,"author":{"gitId":"andrewtkh1"},"content":"|Add a different order to the same person.| `add /n abc /i 2 /q 1`| Person `abc` should have 2 distinct orders under him|","lastModifiedDate":"2021-10-25"},{"lineNumber":272,"author":{"gitId":"andrewtkh1"},"content":"|Add on to an existing order.| `add /n abc /i 1 /q 1`| Person `abc` order `1` quantity should increase by 1|","lastModifiedDate":"2021-10-25"},{"lineNumber":273,"author":{"gitId":"andrewtkh1"},"content":"|Missing parameters| `add /n /i /q`| Error message to user|","lastModifiedDate":"2021-10-25"},{"lineNumber":274,"author":{"gitId":"andrewtkh1"},"content":"|Exceeding more than 999 quantity| `add /n abc /i 1 /q 1000`| Error message to user|","lastModifiedDate":"2021-10-25"},{"lineNumber":275,"author":{"gitId":"andrewtkh1"},"content":"|Food item not on the menu| `add /n abc /i 0 /q 1` | Error message to user|","lastModifiedDate":"2021-10-25"},{"lineNumber":276,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":277,"author":{"gitId":"andrewtkh1"},"content":"---","lastModifiedDate":"2021-10-25"},{"lineNumber":278,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":279,"author":{"gitId":"andrewtkh1"},"content":"### Edit Function","lastModifiedDate":"2021-10-25"},{"lineNumber":280,"author":{"gitId":"andrewtkh1"},"content":"- The format of the command is `edit \u003cperson index\u003e/\u003corder index\u003e /q \u003cquantity\u003e`","lastModifiedDate":"2021-10-25"},{"lineNumber":281,"author":{"gitId":"andrewtkh1"},"content":"- Prerequisite: The current list has to contain at least `2` person each with `2` ","lastModifiedDate":"2021-10-25"},{"lineNumber":282,"author":{"gitId":"andrewtkh1"},"content":"  distinct orders.","lastModifiedDate":"2021-10-25"},{"lineNumber":283,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":284,"author":{"gitId":"andrewtkh1"},"content":"| **Test Case** | **Command** | **Expected Result** |","lastModifiedDate":"2021-10-25"},{"lineNumber":285,"author":{"gitId":"andrewtkh1"},"content":"|:-------------:|:------------|:-------------------|","lastModifiedDate":"2021-10-25"},{"lineNumber":286,"author":{"gitId":"andrewtkh1"},"content":"|Edit order quantity to 3| `edit 1/1 /q 3`| Order 1 of person number 1 now has 3 quantity|","lastModifiedDate":"2021-10-25"},{"lineNumber":287,"author":{"gitId":"andrewtkh1"},"content":"|Edit order to 0|`edit 1/2 /q 0`| 2nd order of person number 1 should deleted|","lastModifiedDate":"2021-10-25"},{"lineNumber":288,"author":{"gitId":"andrewtkh1"},"content":"|Missing parameters| `edit 1/2 /q`| Error message to user|","lastModifiedDate":"2021-10-25"},{"lineNumber":289,"author":{"gitId":"andrewtkh1"},"content":"|Edit order to more than 999| `edit 1/1 /q 1000`| Error message to user|","lastModifiedDate":"2021-10-25"},{"lineNumber":290,"author":{"gitId":"andrewtkh1"},"content":"|Edit order out of food/person index| `edit 1/999 /q 2`| Error message to user|","lastModifiedDate":"2021-10-25"},{"lineNumber":291,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":292,"author":{"gitId":"andrewtkh1"},"content":"---","lastModifiedDate":"2021-10-25"},{"lineNumber":293,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":294,"author":{"gitId":"andrewtkh1"},"content":"### Find Function","lastModifiedDate":"2021-10-25"},{"lineNumber":295,"author":{"gitId":"andrewtkh1"},"content":"- The format of the command is `find /n \u003cname\u003e`","lastModifiedDate":"2021-10-25"},{"lineNumber":296,"author":{"gitId":"andrewtkh1"},"content":"- Prerequisite: Contains 2 person with names of `abc` \u0026 `bcd`.","lastModifiedDate":"2021-10-25"},{"lineNumber":297,"author":{"gitId":"andrewtkh1"},"content":"   - The above names are just for testing purposes.","lastModifiedDate":"2021-10-25"},{"lineNumber":298,"author":{"gitId":"andrewtkh1"},"content":"   ","lastModifiedDate":"2021-10-25"},{"lineNumber":299,"author":{"gitId":"andrewtkh1"},"content":"| **Test Case** | **Command** | **Expected Result** |","lastModifiedDate":"2021-10-25"},{"lineNumber":300,"author":{"gitId":"andrewtkh1"},"content":"|:-------------:|:----------|:---------------------|","lastModifiedDate":"2021-10-25"},{"lineNumber":301,"author":{"gitId":"andrewtkh1"},"content":"|Find person `abc`| `find /n abc`| list person `abc`|","lastModifiedDate":"2021-10-25"},{"lineNumber":302,"author":{"gitId":"andrewtkh1"},"content":"|Find person with substring| `find /n ab`| list person `abc`|","lastModifiedDate":"2021-10-25"},{"lineNumber":303,"author":{"gitId":"andrewtkh1"},"content":"|Find multiple people| `find /n bc`| list both `abc` \u0026 `bcd`|","lastModifiedDate":"2021-10-25"},{"lineNumber":304,"author":{"gitId":"andrewtkh1"},"content":"|Missing parameters| `find /n`| Error message to user|","lastModifiedDate":"2021-10-25"},{"lineNumber":305,"author":{"gitId":"andrewtkh1"},"content":"|Person does not exists| `find /n zzz`| Inform that no names match|","lastModifiedDate":"2021-10-25"},{"lineNumber":306,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":307,"author":{"gitId":"andrewtkh1"},"content":"---","lastModifiedDate":"2021-10-25"},{"lineNumber":308,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":309,"author":{"gitId":"andrewtkh1"},"content":"### Delete Function","lastModifiedDate":"2021-10-25"},{"lineNumber":310,"author":{"gitId":"andrewtkh1"},"content":"- The format of the command is `delete \u003cperson index\u003e/\u003corder index\u003e`","lastModifiedDate":"2021-10-25"},{"lineNumber":311,"author":{"gitId":"andrewtkh1"},"content":"- Prerequisite: The current list has to contain at least `2` person each with `2` ","lastModifiedDate":"2021-10-25"},{"lineNumber":312,"author":{"gitId":"andrewtkh1"},"content":"  distinct orders.","lastModifiedDate":"2021-10-25"},{"lineNumber":313,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":314,"author":{"gitId":"andrewtkh1"},"content":"| **Test Case** | **Command** | **Expected Result** |","lastModifiedDate":"2021-10-25"},{"lineNumber":315,"author":{"gitId":"andrewtkh1"},"content":"|:-------------:|:-------------|:-------------------|","lastModifiedDate":"2021-10-25"},{"lineNumber":316,"author":{"gitId":"andrewtkh1"},"content":"|Delete an order| `delete 1/1` | Order 1 of person 1 is deleted|","lastModifiedDate":"2021-10-25"},{"lineNumber":317,"author":{"gitId":"andrewtkh1"},"content":"|Delete all orders from a person| `delete 1/1`| Person should not be listed anymore|","lastModifiedDate":"2021-10-25"},{"lineNumber":318,"author":{"gitId":"andrewtkh1"},"content":"|Missing parameters| `delete 1/`| Error message to user|","lastModifiedDate":"2021-10-25"},{"lineNumber":319,"author":{"gitId":"andrewtkh1"},"content":"|Out of index| `delete 100/1`| Error message to user|","lastModifiedDate":"2021-10-25"}],"authorContributionMap":{"andrewtkh1":319}},{"path":"docs/DeveloperGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# Developer Guide","lastModifiedDate":"2021-10-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":3,"author":{"gitId":"andrewtkh1"},"content":"- [Acknowledgements](#acknowledgements)","lastModifiedDate":"2021-10-26"},{"lineNumber":4,"author":{"gitId":"andrewtkh1"},"content":"- [Architecture](#architecture)","lastModifiedDate":"2021-10-26"},{"lineNumber":5,"author":{"gitId":"andrewtkh1"},"content":"- [Design](#design)","lastModifiedDate":"2021-10-26"},{"lineNumber":6,"author":{"gitId":"andrewtkh1"},"content":"    - [Logical Component](#logical-component)","lastModifiedDate":"2021-10-26"},{"lineNumber":7,"author":{"gitId":"andrewtkh1"},"content":"    - [Manager Component](#manager-component)","lastModifiedDate":"2021-10-26"},{"lineNumber":8,"author":{"gitId":"andrewtkh1"},"content":"- [Implementation](#implementation)","lastModifiedDate":"2021-10-26"},{"lineNumber":9,"author":{"gitId":"andrewtkh1"},"content":"    - [Parser](#parser)","lastModifiedDate":"2021-10-26"},{"lineNumber":10,"author":{"gitId":"andrewtkh1"},"content":"        - [Alternate implementation](#alternate-implementation)","lastModifiedDate":"2021-10-26"},{"lineNumber":11,"author":{"gitId":"andrewtkh1"},"content":"    - [Add, Delete, Edit, Orders \u0026 Find Command Classes](#add-delete-edit-orders-and-find-command-classes)","lastModifiedDate":"2021-10-26"},{"lineNumber":12,"author":{"gitId":"andrewtkh1"},"content":"    - [Menu \u0026 Order Command Classes](#menu-and-order-command-classes)","lastModifiedDate":"2021-10-26"},{"lineNumber":13,"author":{"gitId":"andrewtkh1"},"content":"- [Product Scope](#product-scope)","lastModifiedDate":"2021-10-26"},{"lineNumber":14,"author":{"gitId":"andrewtkh1"},"content":"    - [Target user profile](#target-user-profile)","lastModifiedDate":"2021-10-26"},{"lineNumber":15,"author":{"gitId":"andrewtkh1"},"content":"    - [Value proposition](#value-proposition)","lastModifiedDate":"2021-10-26"},{"lineNumber":16,"author":{"gitId":"andrewtkh1"},"content":"- [User Stories](#user-stories)","lastModifiedDate":"2021-10-26"},{"lineNumber":17,"author":{"gitId":"andrewtkh1"},"content":"- [Non-Functional Requirements](#non-functional-requirements)","lastModifiedDate":"2021-10-26"},{"lineNumber":18,"author":{"gitId":"andrewtkh1"},"content":"- [Instructions for manual testing](#instructions-for-manual-testing)","lastModifiedDate":"2021-10-26"},{"lineNumber":19,"author":{"gitId":"andrewtkh1"},"content":"- [Glossary](#glossary)","lastModifiedDate":"2021-10-26"},{"lineNumber":20,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":21,"author":{"gitId":"-"},"content":"## Acknowledgements","lastModifiedDate":"2020-05-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"{list here sources of all reused/adapted ideas, code, documentation, and third-party libraries -- include links to the original source as well}","lastModifiedDate":"2020-05-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":25,"author":{"gitId":"andrewtkh1"},"content":"## Architecture","lastModifiedDate":"2021-10-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":27,"author":{"gitId":"andrewtkh1"},"content":"## Design","lastModifiedDate":"2021-10-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":29,"author":{"gitId":"andrewtkh1"},"content":"### Logical Component","lastModifiedDate":"2021-10-25"},{"lineNumber":30,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":31,"author":{"gitId":"andrewtkh1"},"content":"The logical component of the program consists multiple classes. Namely: `Parser`,`Command` \u0026","lastModifiedDate":"2021-10-25"},{"lineNumber":32,"author":{"gitId":"andrewtkh1"},"content":"the various child class of `Command`.","lastModifiedDate":"2021-10-25"},{"lineNumber":33,"author":{"gitId":"andrewtkh1"},"content":"The class diagram below is a brief overview of how the `Parser`, `Manger` \u0026 the various `Command` class","lastModifiedDate":"2021-10-26"},{"lineNumber":34,"author":{"gitId":"andrewtkh1"},"content":"are related to one another.  ","lastModifiedDate":"2021-10-25"},{"lineNumber":35,"author":{"gitId":"andrewtkh1"},"content":"\u003cbr\u003e![Logical Component Partial Class Diagram](https://github.com/markuslyq/tp/blob/master/UMLdiagrams/LogicalComponentDiagrams/Logical%20Component%20Diagram-Page-2.jpg?raw\u003dtrue)","lastModifiedDate":"2021-10-26"},{"lineNumber":36,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":37,"author":{"gitId":"andrewtkh1"},"content":":information_source: **Note:** Specific command names are represented using a placeholder `\u0027Abc\u0027`, i.e. AddCommand, FindCommand.","lastModifiedDate":"2021-10-26"},{"lineNumber":38,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":39,"author":{"gitId":"andrewtkh1"},"content":"Below is a brief explanation on how the `Logical` component works.","lastModifiedDate":"2021-10-26"},{"lineNumber":40,"author":{"gitId":"andrewtkh1"},"content":"1. Upon receiving the user\u0027s input to excecute a specific command, it calls the `Parser` to interpret and parse the user\u0027s command.","lastModifiedDate":"2021-10-26"},{"lineNumber":41,"author":{"gitId":"andrewtkh1"},"content":"2. A particular `Command` object is then initialised and returned back to `Duke`, the main program.","lastModifiedDate":"2021-10-26"},{"lineNumber":42,"author":{"gitId":"andrewtkh1"},"content":"3. `Duke` executes the command, which communicates with the `Manager` to perform its specific function, i.e. add a food order.","lastModifiedDate":"2021-10-26"},{"lineNumber":43,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":44,"author":{"gitId":"andrewtkh1"},"content":"The class diagram below is a brief overview of how the `Parser` is used in parsing the user\u0027s command.","lastModifiedDate":"2021-10-26"},{"lineNumber":45,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":46,"author":{"gitId":"andrewtkh1"},"content":"![Class Diagram](https://raw.githubusercontent.com/AY2122S1-CS2113-T13-2/tp/master/UMLdiagrams/ParserDiagrams/ParserClassDiag-Page-1.jpg)","lastModifiedDate":"2021-10-26"},{"lineNumber":47,"author":{"gitId":"mohamad-adam8991"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":48,"author":{"gitId":"andrewtkh1"},"content":":information_source: **Note:** Details of each specific command class \u0026 Duke have been omitted from this diagram.","lastModifiedDate":"2021-10-26"},{"lineNumber":49,"author":{"gitId":"mohamad-adam8991"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":50,"author":{"gitId":"andrewtkh1"},"content":"Explanation on how the parsing is done:","lastModifiedDate":"2021-10-26"},{"lineNumber":51,"author":{"gitId":"andrewtkh1"},"content":"1. Upon receiving the user\u0027s input string from `Duke`, the `Parser` split the user\u0027s input into an array of strings.","lastModifiedDate":"2021-10-26"},{"lineNumber":52,"author":{"gitId":"andrewtkh1"},"content":"2. It then interprets the string and try to match it with one of the known commands.","lastModifiedDate":"2021-10-26"},{"lineNumber":53,"author":{"gitId":"andrewtkh1"},"content":"3. The respective command (i.e. `DeleteCommand`) object will be initialised and returned back to `Duke` as a `Command` object. (`UnknownCommand` object is return","lastModifiedDate":"2021-10-26"},{"lineNumber":54,"author":{"gitId":"andrewtkh1"},"content":"   if there is no match)","lastModifiedDate":"2021-10-26"},{"lineNumber":55,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":56,"author":{"gitId":"andrewtkh1"},"content":"The following sequence diagram depicts how the `Logical` components interact with one another upon receiving the user\u0027s input of `\"delete 1/2\"`.  ","lastModifiedDate":"2021-10-26"},{"lineNumber":57,"author":{"gitId":"andrewtkh1"},"content":"\u003cbr\u003e![Logical Component Partial Class Diagram](https://github.com/markuslyq/tp/blob/master/UMLdiagrams/DeleteCommandDiagram/DeleteCommand%20Sequence%20Diagram.jpg?raw\u003dtrue)","lastModifiedDate":"2021-10-26"},{"lineNumber":58,"author":{"gitId":"WaiKit-nus"},"content":"   ","lastModifiedDate":"2021-10-21"},{"lineNumber":59,"author":{"gitId":"markuslyq"},"content":"### Manager Component","lastModifiedDate":"2021-10-26"},{"lineNumber":60,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":61,"author":{"gitId":"markuslyq"},"content":"**API** : PeopleManager.java","lastModifiedDate":"2021-10-26"},{"lineNumber":62,"author":{"gitId":"markuslyq"},"content":"\u003cbr\u003e![PeopleManagerDiagram](https://raw.githubusercontent.com/AY2122S1-CS2113-T13-2/tp/master/UMLdiagrams/PeopleManagerDiagram/PeopleManagerDiagram.jpg)","lastModifiedDate":"2021-10-26"},{"lineNumber":63,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":64,"author":{"gitId":"markuslyq"},"content":":information_source: **Note:** This diagram shows the components of how the inputs are handled.","lastModifiedDate":"2021-10-26"},{"lineNumber":65,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":66,"author":{"gitId":"markuslyq"},"content":"The `PeopleManager` component,","lastModifiedDate":"2021-10-26"},{"lineNumber":67,"author":{"gitId":"markuslyq"},"content":"* Stores a list of people, named: `listOfPeople`. This list stores all `Person` objects.","lastModifiedDate":"2021-10-26"},{"lineNumber":68,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":69,"author":{"gitId":"markuslyq"},"content":"The `Person` component,","lastModifiedDate":"2021-10-26"},{"lineNumber":70,"author":{"gitId":"markuslyq"},"content":"* Store details of the person.","lastModifiedDate":"2021-10-26"},{"lineNumber":71,"author":{"gitId":"markuslyq"},"content":"   * It stores the name of the person, using a String Variable named `personName`.","lastModifiedDate":"2021-10-26"},{"lineNumber":72,"author":{"gitId":"markuslyq"},"content":"   * It also stores the orders of the person, using a list of Order, named `individualFoodOrders`.","lastModifiedDate":"2021-10-26"},{"lineNumber":73,"author":{"gitId":"markuslyq"},"content":"   ","lastModifiedDate":"2021-10-26"},{"lineNumber":74,"author":{"gitId":"markuslyq"},"content":"The `Order` component,","lastModifiedDate":"2021-10-26"},{"lineNumber":75,"author":{"gitId":"markuslyq"},"content":"* Stores details of the order.","lastModifiedDate":"2021-10-26"},{"lineNumber":76,"author":{"gitId":"markuslyq"},"content":"   * It stores the name of the order, using a String Variable named `foodName`.","lastModifiedDate":"2021-10-26"},{"lineNumber":77,"author":{"gitId":"markuslyq"},"content":"   * It stores the index of the order, using an int Variable named `foodIndex`.","lastModifiedDate":"2021-10-26"},{"lineNumber":78,"author":{"gitId":"markuslyq"},"content":"   * It stores the quantity of the order, using a String Variable named `quantity`.","lastModifiedDate":"2021-10-26"},{"lineNumber":79,"author":{"gitId":"markuslyq"},"content":"   * It stores the cost of the order, using a double Variable named `costOfOrder`.","lastModifiedDate":"2021-10-26"},{"lineNumber":80,"author":{"gitId":"markuslyq"},"content":"   ","lastModifiedDate":"2021-10-26"},{"lineNumber":81,"author":{"gitId":"markuslyq"},"content":"When the input is passed in through the `logical` component, the `PeopleManager` component will be responsible for managing the input, ","lastModifiedDate":"2021-10-26"},{"lineNumber":82,"author":{"gitId":"markuslyq"},"content":"by creating variables needed to store the data, and storing this newly created variables into the `listOfPeople`.","lastModifiedDate":"2021-10-26"},{"lineNumber":83,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":84,"author":{"gitId":"andrewtkh1"},"content":"## Implementation","lastModifiedDate":"2021-10-26"},{"lineNumber":85,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":86,"author":{"gitId":"andrewtkh1"},"content":"### Parser","lastModifiedDate":"2021-10-26"},{"lineNumber":87,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":88,"author":{"gitId":"andrewtkh1"},"content":"This is a sequence diagram of the `Parser` class.","lastModifiedDate":"2021-10-26"},{"lineNumber":89,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":90,"author":{"gitId":"andrewtkh1"},"content":"![Squence Diagram of Parser](https://raw.githubusercontent.com/AY2122S1-CS2113-T13-2/tp/master/UMLdiagrams/ParserDiagrams/Parser%20Sequence%20Diag.jpg)","lastModifiedDate":"2021-10-26"},{"lineNumber":91,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":92,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":93,"author":{"gitId":"andrewtkh1"},"content":"Below is a step by step example on how the `Parser` interacts when a user keys in an input.","lastModifiedDate":"2021-10-26"},{"lineNumber":94,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":95,"author":{"gitId":"andrewtkh1"},"content":"Step 1)\u003cbr\u003e","lastModifiedDate":"2021-10-25"},{"lineNumber":96,"author":{"gitId":"andrewtkh1"},"content":"Lets assume the user input is `delete 1/2`. `Duke` will then call the method","lastModifiedDate":"2021-10-25"},{"lineNumber":97,"author":{"gitId":"andrewtkh1"},"content":"`Parser.getCommand(\"delete 1/2\")`. The method would split the user\u0027s input into an array of","lastModifiedDate":"2021-10-25"},{"lineNumber":98,"author":{"gitId":"andrewtkh1"},"content":"strings along the spaces and store them in the array `listOfInputs`. After which,","lastModifiedDate":"2021-10-25"},{"lineNumber":99,"author":{"gitId":"andrewtkh1"},"content":"it will get the string `\"delete\"` from the 0th element of `listOfInputs` and store","lastModifiedDate":"2021-10-25"},{"lineNumber":100,"author":{"gitId":"andrewtkh1"},"content":"it in `commandInString`.","lastModifiedDate":"2021-10-25"},{"lineNumber":101,"author":{"gitId":"thaddyyz"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-10-22"},{"lineNumber":102,"author":{"gitId":"thaddyyz"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":103,"author":{"gitId":"andrewtkh1"},"content":"Step 2)\u003cbr\u003e","lastModifiedDate":"2021-10-25"},{"lineNumber":104,"author":{"gitId":"andrewtkh1"},"content":"The method will then parse `commandInString` through the switch cases and try to match it with","lastModifiedDate":"2021-10-25"},{"lineNumber":105,"author":{"gitId":"andrewtkh1"},"content":"one of the known commands words stored in each respective command\u0027s class attribute called `COMMAND_WORD`.","lastModifiedDate":"2021-10-25"},{"lineNumber":106,"author":{"gitId":"andrewtkh1"},"content":"In this case, the `\"delete\"` command will cause the parser to return a `DeleteCommand` object.","lastModifiedDate":"2021-10-25"},{"lineNumber":107,"author":{"gitId":"andrewtkh1"},"content":"The image below shows the codes for the switch statement.","lastModifiedDate":"2021-10-25"},{"lineNumber":108,"author":{"gitId":"thaddyyz"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":109,"author":{"gitId":"andrewtkh1"},"content":"![Switch case Code](https://raw.githubusercontent.com/AY2122S1-CS2113-T13-2/tp/master/UMLdiagrams/ParserDiagrams/SwitchClassCode.jpg)","lastModifiedDate":"2021-10-25"},{"lineNumber":110,"author":{"gitId":"thaddyyz"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":111,"author":{"gitId":"andrewtkh1"},"content":"Step 3)\u003cbr\u003e","lastModifiedDate":"2021-10-25"},{"lineNumber":112,"author":{"gitId":"andrewtkh1"},"content":"Next, `Duke` will then use the returned command to call `Command.execute()` which will interact","lastModifiedDate":"2021-10-25"},{"lineNumber":113,"author":{"gitId":"andrewtkh1"},"content":"with the `Manager Components` of the program who will then remove the 2nd order from the first","lastModifiedDate":"2021-10-25"},{"lineNumber":114,"author":{"gitId":"andrewtkh1"},"content":"person in the list.","lastModifiedDate":"2021-10-25"},{"lineNumber":115,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":116,"author":{"gitId":"andrewtkh1"},"content":"#### Alternate implementation","lastModifiedDate":"2021-10-25"},{"lineNumber":117,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":118,"author":{"gitId":"andrewtkh1"},"content":"For the `Parser` class, we initially had thought of having each command\u0027s respective","lastModifiedDate":"2021-10-25"},{"lineNumber":119,"author":{"gitId":"andrewtkh1"},"content":"functions to be executed inside the switch statement.","lastModifiedDate":"2021-10-25"},{"lineNumber":120,"author":{"gitId":"andrewtkh1"},"content":"A rough example of the `delete` and `add` function can be seen below.","lastModifiedDate":"2021-10-25"},{"lineNumber":121,"author":{"gitId":"andrewtkh1"},"content":"```","lastModifiedDate":"2021-10-25"},{"lineNumber":122,"author":{"gitId":"andrewtkh1"},"content":"case \"delete\":","lastModifiedDate":"2021-10-25"},{"lineNumber":123,"author":{"gitId":"andrewtkh1"},"content":"    functionToDeleteTask(input);","lastModifiedDate":"2021-10-25"},{"lineNumber":124,"author":{"gitId":"andrewtkh1"},"content":"    break;","lastModifiedDate":"2021-10-25"},{"lineNumber":125,"author":{"gitId":"andrewtkh1"},"content":"case \"add\":","lastModifiedDate":"2021-10-25"},{"lineNumber":126,"author":{"gitId":"andrewtkh1"},"content":"    functionToAddTask(input);","lastModifiedDate":"2021-10-25"},{"lineNumber":127,"author":{"gitId":"andrewtkh1"},"content":"    break;","lastModifiedDate":"2021-10-25"},{"lineNumber":128,"author":{"gitId":"andrewtkh1"},"content":"```","lastModifiedDate":"2021-10-25"},{"lineNumber":129,"author":{"gitId":"thaddyyz"},"content":"The upside of doing would be that there is less code overall.","lastModifiedDate":"2021-10-22"},{"lineNumber":130,"author":{"gitId":"andrewtkh1"},"content":"However, doing so would cause our code to have a higher amount of coupling and would also","lastModifiedDate":"2021-10-25"},{"lineNumber":131,"author":{"gitId":"andrewtkh1"},"content":"cause the code to be messier and therefore harder to read. By having a command class","lastModifiedDate":"2021-10-25"},{"lineNumber":132,"author":{"gitId":"andrewtkh1"},"content":"for each respective command, this allows us to segregate all the necessary functions","lastModifiedDate":"2021-10-25"},{"lineNumber":133,"author":{"gitId":"andrewtkh1"},"content":"for each command in their own respective class, therefore making testing easier too.","lastModifiedDate":"2021-10-25"},{"lineNumber":134,"author":{"gitId":"thaddyyz"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":135,"author":{"gitId":"markuslyq"},"content":"This section describes how the commands are implemented. ","lastModifiedDate":"2021-10-26"},{"lineNumber":136,"author":{"gitId":"markuslyq"},"content":"Explanations and sequence diagrams are used to describe the implementation process.","lastModifiedDate":"2021-10-26"},{"lineNumber":137,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":138,"author":{"gitId":"markuslyq"},"content":"### Add, Delete, Edit, Orders and Find Command Classes","lastModifiedDate":"2021-10-26"},{"lineNumber":139,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":140,"author":{"gitId":"markuslyq"},"content":"The commands `add`, `delete`, `edit`, `orders` and `find` have similar implementation, with a few differences in terms of the methods called.","lastModifiedDate":"2021-10-26"},{"lineNumber":141,"author":{"gitId":"markuslyq"},"content":"Here is an overview of their class diagram.  ","lastModifiedDate":"2021-10-26"},{"lineNumber":142,"author":{"gitId":"markuslyq"},"content":"\u003cbr\u003e![OverallClassDiagram](https://raw.githubusercontent.com/AY2122S1-CS2113-T13-2/tp/master/UMLdiagrams/LogicalComponentDiagrams/OverallClassDiagram.jpg)","lastModifiedDate":"2021-10-26"},{"lineNumber":143,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":144,"author":{"gitId":"markuslyq"},"content":":information_source: **Note:** The diagram is shared between the AddCommand, DeleteCommand, EditCommand, OrdersCommand and FindCommand.","lastModifiedDate":"2021-10-26"},{"lineNumber":145,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":146,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":147,"author":{"gitId":"markuslyq"},"content":"From the above class diagram, we can replace the **AbcCommand** with whichever command we are looking at. For example, if we are ","lastModifiedDate":"2021-10-26"},{"lineNumber":148,"author":{"gitId":"markuslyq"},"content":"looking at the `AddCommand` class, we replace the **AbcCommand** with **AddCommand**. Same goes for all the other command classes. ","lastModifiedDate":"2021-10-26"},{"lineNumber":149,"author":{"gitId":"markuslyq"},"content":"The overview class diagram is listed here to show how the command classes interact on the logical component to the manager component.","lastModifiedDate":"2021-10-26"},{"lineNumber":150,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":151,"author":{"gitId":"markuslyq"},"content":"### Menu and Order Command Classes","lastModifiedDate":"2021-10-26"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":153,"author":{"gitId":"markuslyq"},"content":"Command word to invoke the Menu Command and Order Command: `menu` and `list`.","lastModifiedDate":"2021-10-26"},{"lineNumber":154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":155,"author":{"gitId":"markuslyq"},"content":"The purpose of Menu Command class is to instantiate the menu of which the user can order from. By invoking `menu`, the menu will be printed on the console for the user to see.","lastModifiedDate":"2021-10-26"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":157,"author":{"gitId":"markuslyq"},"content":"The purpose of Order Command class is to print the orders which the user has ordered onto the console. By invoking `list`, the order will be printed in a list format for the user to view. ","lastModifiedDate":"2021-10-26"},{"lineNumber":158,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":159,"author":{"gitId":"markuslyq"},"content":"Hence, the sequence of which how Menu Command class and Order Command class are very similar. To prevent repeating of Sequence diagrams, a shared diagram will be listed below for the Menu Command Class and the Order Command class.  ","lastModifiedDate":"2021-10-26"},{"lineNumber":160,"author":{"gitId":"markuslyq"},"content":"   ","lastModifiedDate":"2021-10-26"},{"lineNumber":161,"author":{"gitId":"markuslyq"},"content":"\u003cbr\u003e![MenuAndOrdersSequenceDiagram](https://raw.githubusercontent.com/AY2122S1-CS2113-T13-2/tp/master/UMLdiagrams/MenuAndOrdersSequenceDiagram/MenuAndOrdersSequenceDiagram.jpg)    ","lastModifiedDate":"2021-10-26"},{"lineNumber":162,"author":{"gitId":"markuslyq"},"content":":information_source: **Note:** The diagram is shared between Menu Command Class and Orders Command Class.","lastModifiedDate":"2021-10-26"},{"lineNumber":163,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":164,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":165,"author":{"gitId":"markuslyq"},"content":"The steps to using the `menu` and `list` command can be seen from the sequence diagram. In short: ","lastModifiedDate":"2021-10-26"},{"lineNumber":166,"author":{"gitId":"markuslyq"},"content":"1) Invoke the Menu Command class by calling `menu`. The menu will display in the terminal.","lastModifiedDate":"2021-10-26"},{"lineNumber":167,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":168,"author":{"gitId":"andrewtkh1"},"content":"\u003cbr\u003e![MenuCommandTerminalOutput](https://raw.githubusercontent.com/AY2122S1-CS2113-T13-2/tp/master/UMLdiagrams/MenuAndOrdersSequenceDiagram/MenuCommandTerminalOutput.jpg)   ","lastModifiedDate":"2021-10-26"},{"lineNumber":169,"author":{"gitId":"markuslyq"},"content":":information_source: **Note:** The output is an example of what you will see when the `menu` command is entered.","lastModifiedDate":"2021-10-26"},{"lineNumber":170,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":171,"author":{"gitId":"markuslyq"},"content":"2) After adding orders, invoke `list` command to see the orders added into the list.","lastModifiedDate":"2021-10-26"},{"lineNumber":172,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":173,"author":{"gitId":"andrewtkh1"},"content":"\u003cbr\u003e![ListCommandTerminalOutput](https://raw.githubusercontent.com/AY2122S1-CS2113-T13-2/tp/master/UMLdiagrams/MenuAndOrdersSequenceDiagram/ListCommandTerminalOutput.jpg)    ","lastModifiedDate":"2021-10-26"},{"lineNumber":174,"author":{"gitId":"markuslyq"},"content":":information_source: **Note:** The output is an example of what you will see when the `list` command is entered.","lastModifiedDate":"2021-10-26"},{"lineNumber":175,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":176,"author":{"gitId":"markuslyq"},"content":"**Note:** The command `menu` and `list` are just these two strings. Any edits to these two commands will result in an exception being thrown.","lastModifiedDate":"2021-10-26"},{"lineNumber":177,"author":{"gitId":"markuslyq"},"content":"   ","lastModifiedDate":"2021-10-26"},{"lineNumber":178,"author":{"gitId":"-"},"content":"## Product scope","lastModifiedDate":"2020-05-24"},{"lineNumber":179,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":180,"author":{"gitId":"-"},"content":"### Target user profile","lastModifiedDate":"2020-05-24"},{"lineNumber":181,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":182,"author":{"gitId":"andrewtkh1"},"content":"* User has good typing skills.","lastModifiedDate":"2021-10-19"},{"lineNumber":183,"author":{"gitId":"andrewtkh1"},"content":"* Is comfortable without GUI.","lastModifiedDate":"2021-10-19"},{"lineNumber":184,"author":{"gitId":"andrewtkh1"},"content":"* Tends to make large orders of food.","lastModifiedDate":"2021-10-19"},{"lineNumber":185,"author":{"gitId":"andrewtkh1"},"content":"* Wishes to track multiple different orders of food.","lastModifiedDate":"2021-10-19"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":187,"author":{"gitId":"-"},"content":"### Value proposition","lastModifiedDate":"2020-05-24"},{"lineNumber":188,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":189,"author":{"gitId":"andrewtkh1"},"content":"* Large orders can be confusing to keep track, especially if orders are to different stores.","lastModifiedDate":"2021-10-19"},{"lineNumber":190,"author":{"gitId":"andrewtkh1"},"content":"* Allows users to keep track of bulk orders easily.","lastModifiedDate":"2021-10-19"},{"lineNumber":191,"author":{"gitId":"andrewtkh1"},"content":"* Easily keep track of costs.","lastModifiedDate":"2021-10-19"},{"lineNumber":192,"author":{"gitId":"andrewtkh1"},"content":"* Ensures that no orders are left out.","lastModifiedDate":"2021-10-19"},{"lineNumber":193,"author":{"gitId":"andrewtkh1"},"content":"* Knows which order belongs to which store.","lastModifiedDate":"2021-10-19"},{"lineNumber":194,"author":{"gitId":"andrewtkh1"},"content":"* Allow flexibility and control over what description you would like of your friends.","lastModifiedDate":"2021-10-19"},{"lineNumber":195,"author":{"gitId":"andrewtkh1"},"content":"* Users are able to delete/edit entries quickly.","lastModifiedDate":"2021-10-19"},{"lineNumber":196,"author":{"gitId":"andrewtkh1"},"content":"* Comments on the food can also be described by you (e.g. No meat for BanMian).","lastModifiedDate":"2021-10-19"},{"lineNumber":197,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":198,"author":{"gitId":"-"},"content":"## User Stories","lastModifiedDate":"2020-05-24"},{"lineNumber":199,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":200,"author":{"gitId":"-"},"content":"|Version| As a ... | I want to ... | So that I can ...|","lastModifiedDate":"2020-05-24"},{"lineNumber":201,"author":{"gitId":"-"},"content":"|--------|----------|---------------|------------------|","lastModifiedDate":"2020-05-24"},{"lineNumber":202,"author":{"gitId":"andrewtkh1"},"content":"|v1.0|New student on campus|View the menu.|Avoid having to go down physically to the shops.|","lastModifiedDate":"2021-10-25"},{"lineNumber":203,"author":{"gitId":"andrewtkh1"},"content":"|v1.0|User|View the current orders with their names attached.|Able to track who ordered what.|","lastModifiedDate":"2021-10-25"},{"lineNumber":204,"author":{"gitId":"andrewtkh1"},"content":"|v1.0|User|Add my choices of food from the menu.| Track what orders I plan to get.|","lastModifiedDate":"2021-10-25"},{"lineNumber":205,"author":{"gitId":"andrewtkh1"},"content":"|v1.0|User|Delete order\u0027s that I\u0027ve added.|So i can remove orders if someone changes their mind.|","lastModifiedDate":"2021-10-25"},{"lineNumber":206,"author":{"gitId":"andrewtkh1"},"content":"|v2.0|New User|Easily understand how to use the app.| Navigate the program with ease.| ","lastModifiedDate":"2021-10-25"},{"lineNumber":207,"author":{"gitId":"andrewtkh1"},"content":"|v2.0|Person ordering for a group.|View the cost breakdown for the current order.| Know how much each person owes me.|","lastModifiedDate":"2021-10-25"},{"lineNumber":208,"author":{"gitId":"andrewtkh1"},"content":"|v2.0|Person ordering for a large group.|View the total number of orders keyed in.| Ensure that everyone has ordered.|","lastModifiedDate":"2021-10-25"},{"lineNumber":209,"author":{"gitId":"andrewtkh1"},"content":"|v2.0|User|Amend existing orders.|Edit an order without having to re-type it.|","lastModifiedDate":"2021-10-25"},{"lineNumber":210,"author":{"gitId":"andrewtkh1"},"content":"|v2.0|Person ordering for a large group.|Find a specific order by name.|Easy know what they ordered without having to scroll through.|","lastModifiedDate":"2021-10-25"},{"lineNumber":211,"author":{"gitId":"andrewtkh1"},"content":"|v2.5|Tech illiterate| View a user guide.| Learn how to use the program.|","lastModifiedDate":"2021-10-25"},{"lineNumber":212,"author":{"gitId":"andrewtkh1"},"content":"|-|Person ordering for a group| Track everyone\u0027s food allergies.| Avoid ordering the wrong order.|","lastModifiedDate":"2021-10-25"},{"lineNumber":213,"author":{"gitId":"andrewtkh1"},"content":"|-|Person ordering food for friends| Track what add-ons my friends want.|Track how much it is and won\u0027t forget about it.|","lastModifiedDate":"2021-10-25"},{"lineNumber":214,"author":{"gitId":"andrewtkh1"},"content":"|-|Lecturer| Know how many people does a food serve.|Easily order food for the class.|","lastModifiedDate":"2021-10-25"},{"lineNumber":215,"author":{"gitId":"andrewtkh1"},"content":"|-|Host of a party| Sort the menu based on categories| Keep track of different varieties of food.|","lastModifiedDate":"2021-10-25"},{"lineNumber":216,"author":{"gitId":"andrewtkh1"},"content":"|-|Indecisive user| View recommendations based on my frequent orders.| Simplify my ordering process.|","lastModifiedDate":"2021-10-25"},{"lineNumber":217,"author":{"gitId":"andrewtkh1"},"content":"|-|Non-local| View the menu with descriptions in multiple languages.| Order food without a language barrier.|","lastModifiedDate":"2021-10-25"},{"lineNumber":218,"author":{"gitId":"andrewtkh1"},"content":"|-|User with poor data| Download the menu and order list.| Track my orders even without the internet.|","lastModifiedDate":"2021-10-25"},{"lineNumber":219,"author":{"gitId":"andrewtkh1"},"content":"|-|User| View if a food item is sold out.| Decide whether to order from another store.|","lastModifiedDate":"2021-10-25"},{"lineNumber":220,"author":{"gitId":"andrewtkh1"},"content":"|-|Health conscious user| View the nutritional value of a food.| Easily track my diet.|","lastModifiedDate":"2021-10-25"},{"lineNumber":221,"author":{"gitId":"andrewtkh1"},"content":"|-|Ordering for a large group| View the recommended serving size.| Decide on how much food to order.|","lastModifiedDate":"2021-10-25"},{"lineNumber":222,"author":{"gitId":"andrewtkh1"},"content":"|-|Recurring user| Store my favourite food| Easily find what I like.|","lastModifiedDate":"2021-10-25"},{"lineNumber":223,"author":{"gitId":"andrewtkh1"},"content":"|-|Recurring user| Saved my food orders| Easily place my regular order again.|","lastModifiedDate":"2021-10-25"},{"lineNumber":224,"author":{"gitId":"andrewtkh1"},"content":"|-|User| Retrieve my previous order.| Place my previous orders again.|","lastModifiedDate":"2021-10-25"},{"lineNumber":225,"author":{"gitId":"andrewtkh1"},"content":"|-|User| View menu from a file| Avoid having to scroll through the whole menu.|","lastModifiedDate":"2021-10-25"},{"lineNumber":226,"author":{"gitId":"andrewtkh1"},"content":"|-|User| Track who has paid| Know who still owes me money.|","lastModifiedDate":"2021-10-25"},{"lineNumber":227,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":228,"author":{"gitId":"-"},"content":"## Non-Functional Requirements","lastModifiedDate":"2020-05-24"},{"lineNumber":229,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":230,"author":{"gitId":"andrewtkh1"},"content":"- Program should be able to work on most Operating Systems such as `Windows`, `Linux`,","lastModifiedDate":"2021-10-25"},{"lineNumber":231,"author":{"gitId":"andrewtkh1"},"content":"  `OS-X` \u0026 `Unix`.","lastModifiedDate":"2021-10-25"},{"lineNumber":232,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":233,"author":{"gitId":"andrewtkh1"},"content":"- User needs to have Java `11` or above installed in order for the program to work.","lastModifiedDate":"2021-10-25"},{"lineNumber":234,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":235,"author":{"gitId":"andrewtkh1"},"content":"- The program should be able to support up to all these values stated below.","lastModifiedDate":"2021-10-25"},{"lineNumber":236,"author":{"gitId":"andrewtkh1"},"content":"   - Up to `99` _Unique person_ at a time.","lastModifiedDate":"2021-10-25"},{"lineNumber":237,"author":{"gitId":"andrewtkh1"},"content":"   - Maximum of `99` _Unique Food_ items in the menu.","lastModifiedDate":"2021-10-25"},{"lineNumber":238,"author":{"gitId":"andrewtkh1"},"content":"   - Maximum of `999` quantity for each distinct food item in a person\u0027s order.","lastModifiedDate":"2021-10-25"},{"lineNumber":239,"author":{"gitId":"-"},"content":"    ","lastModifiedDate":"2020-05-24"},{"lineNumber":240,"author":{"gitId":"-"},"content":"## Instructions for manual testing","lastModifiedDate":"2020-05-24"},{"lineNumber":241,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":242,"author":{"gitId":"andrewtkh1"},"content":"The instructions below give a brief overview on how to test the functions manually.","lastModifiedDate":"2021-10-25"},{"lineNumber":243,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":244,"author":{"gitId":"andrewtkh1"},"content":"- :information_source: More test cases can be found in each of their respective test class under","lastModifiedDate":"2021-10-25"},{"lineNumber":245,"author":{"gitId":"andrewtkh1"},"content":"  `src/test/java/seedu.duke`","lastModifiedDate":"2021-10-25"},{"lineNumber":246,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":247,"author":{"gitId":"andrewtkh1"},"content":"[Starting up and Shutting down](#starting-up-and-shutting-down)","lastModifiedDate":"2021-10-25"},{"lineNumber":248,"author":{"gitId":"andrewtkh1"},"content":"\u003cbr\u003e [Add function](#add-function)","lastModifiedDate":"2021-10-25"},{"lineNumber":249,"author":{"gitId":"andrewtkh1"},"content":"\u003cbr\u003e [Edit function](#edit-function)","lastModifiedDate":"2021-10-25"},{"lineNumber":250,"author":{"gitId":"andrewtkh1"},"content":"\u003cbr\u003e [Find function](#find-function)","lastModifiedDate":"2021-10-25"},{"lineNumber":251,"author":{"gitId":"andrewtkh1"},"content":"\u003cbr\u003e [Delete function](#delete-function)","lastModifiedDate":"2021-10-25"},{"lineNumber":252,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":253,"author":{"gitId":"andrewtkh1"},"content":"---","lastModifiedDate":"2021-10-25"},{"lineNumber":254,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":255,"author":{"gitId":"andrewtkh1"},"content":"### Starting up and Shutting down","lastModifiedDate":"2021-10-25"},{"lineNumber":256,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":257,"author":{"gitId":"andrewtkh1"},"content":"1) To begin, download the .jar file and place it in a folder.","lastModifiedDate":"2021-10-25"},{"lineNumber":258,"author":{"gitId":"andrewtkh1"},"content":"2) Open the CLI at the file location and run by the jar file by giving the command,","lastModifiedDate":"2021-10-25"},{"lineNumber":259,"author":{"gitId":"andrewtkh1"},"content":"   `java -jar \u003cjar file name\u003e.jar`","lastModifiedDate":"2021-10-25"},{"lineNumber":260,"author":{"gitId":"andrewtkh1"},"content":"   - E.g) With `CS2113T.jar` the command would be `java -jar CS2113T.jar`","lastModifiedDate":"2021-10-25"},{"lineNumber":261,"author":{"gitId":"andrewtkh1"},"content":"3) To end the program, enter the command `bye` or simply close the CLI window.","lastModifiedDate":"2021-10-25"},{"lineNumber":262,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":263,"author":{"gitId":"andrewtkh1"},"content":"---","lastModifiedDate":"2021-10-25"},{"lineNumber":264,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":265,"author":{"gitId":"andrewtkh1"},"content":"### Add Function","lastModifiedDate":"2021-10-25"},{"lineNumber":266,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":267,"author":{"gitId":"andrewtkh1"},"content":"- The format of the command is `add /n \u003cname\u003e /i \u003cindex\u003e /q \u003cquanity\u003e`","lastModifiedDate":"2021-10-25"},{"lineNumber":268,"author":{"gitId":"andrewtkh1"},"content":"- Prerequisite: The `Menu` has to contain at least `2` food item.","lastModifiedDate":"2021-10-25"},{"lineNumber":269,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":270,"author":{"gitId":"andrewtkh1"},"content":"| **Test Case** | **Command** | **Expected Result** |","lastModifiedDate":"2021-10-25"},{"lineNumber":271,"author":{"gitId":"andrewtkh1"},"content":"|:------------:|:-------------|:--------------------|","lastModifiedDate":"2021-10-25"},{"lineNumber":272,"author":{"gitId":"andrewtkh1"},"content":"|Add 1 person.|`add /n abc /i 1 /q 2`| Adds person named `abc` with `2` quantities of item `1`|","lastModifiedDate":"2021-10-25"},{"lineNumber":273,"author":{"gitId":"andrewtkh1"},"content":"|Add a different order to the same person.| `add /n abc /i 2 /q 1`| Person `abc` should have 2 distinct orders under him|","lastModifiedDate":"2021-10-25"},{"lineNumber":274,"author":{"gitId":"andrewtkh1"},"content":"|Add on to an existing order.| `add /n abc /i 1 /q 1`| Person `abc` order `1` quantity should increase by 1|","lastModifiedDate":"2021-10-25"},{"lineNumber":275,"author":{"gitId":"andrewtkh1"},"content":"|Missing parameters| `add /n /i /q`| Error message to user|","lastModifiedDate":"2021-10-25"},{"lineNumber":276,"author":{"gitId":"andrewtkh1"},"content":"|Exceeding more than 999 quantity| `add /n abc /i 1 /q 1000`| Error message to user|","lastModifiedDate":"2021-10-25"},{"lineNumber":277,"author":{"gitId":"andrewtkh1"},"content":"|Food item not on the menu| `add /n abc /i 0 /q 1` | Error message to user|","lastModifiedDate":"2021-10-25"},{"lineNumber":278,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":279,"author":{"gitId":"andrewtkh1"},"content":"---","lastModifiedDate":"2021-10-25"},{"lineNumber":280,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":281,"author":{"gitId":"andrewtkh1"},"content":"### Edit Function","lastModifiedDate":"2021-10-25"},{"lineNumber":282,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":283,"author":{"gitId":"andrewtkh1"},"content":"- The format of the command is `edit \u003cperson index\u003e/\u003corder index\u003e /q \u003cquantity\u003e`","lastModifiedDate":"2021-10-25"},{"lineNumber":284,"author":{"gitId":"andrewtkh1"},"content":"- Prerequisite: The current list has to contain at least `2` person each with `2`","lastModifiedDate":"2021-10-25"},{"lineNumber":285,"author":{"gitId":"andrewtkh1"},"content":"  distinct orders.","lastModifiedDate":"2021-10-25"},{"lineNumber":286,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":287,"author":{"gitId":"andrewtkh1"},"content":"| **Test Case** | **Command** | **Expected Result** |","lastModifiedDate":"2021-10-25"},{"lineNumber":288,"author":{"gitId":"andrewtkh1"},"content":"|:-------------:|:------------|:-------------------|","lastModifiedDate":"2021-10-25"},{"lineNumber":289,"author":{"gitId":"andrewtkh1"},"content":"|Edit order quantity to 3| `edit 1/1 /q 3`| Order 1 of person number 1 now has 3 quantity|","lastModifiedDate":"2021-10-25"},{"lineNumber":290,"author":{"gitId":"andrewtkh1"},"content":"|Edit order to 0|`edit 1/2 /q 0`| 2nd order of person number 1 should deleted|","lastModifiedDate":"2021-10-25"},{"lineNumber":291,"author":{"gitId":"andrewtkh1"},"content":"|Missing parameters| `edit 1/2 /q`| Error message to user|","lastModifiedDate":"2021-10-25"},{"lineNumber":292,"author":{"gitId":"andrewtkh1"},"content":"|Edit order to more than 999| `edit 1/1 /q 1000`| Error message to user|","lastModifiedDate":"2021-10-25"},{"lineNumber":293,"author":{"gitId":"andrewtkh1"},"content":"|Edit order out of food/person index| `edit 1/999 /q 2`| Error message to user|","lastModifiedDate":"2021-10-25"},{"lineNumber":294,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":295,"author":{"gitId":"andrewtkh1"},"content":"---","lastModifiedDate":"2021-10-25"},{"lineNumber":296,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":297,"author":{"gitId":"andrewtkh1"},"content":"### Find Function","lastModifiedDate":"2021-10-25"},{"lineNumber":298,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":299,"author":{"gitId":"andrewtkh1"},"content":"- The format of the command is `find /n \u003cname\u003e`","lastModifiedDate":"2021-10-25"},{"lineNumber":300,"author":{"gitId":"andrewtkh1"},"content":"- Prerequisite: Contains 2 person with names of `abc` \u0026 `bcd`.","lastModifiedDate":"2021-10-25"},{"lineNumber":301,"author":{"gitId":"andrewtkh1"},"content":"   - The above names are just for testing purposes.","lastModifiedDate":"2021-10-25"},{"lineNumber":302,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":303,"author":{"gitId":"andrewtkh1"},"content":"| **Test Case** | **Command** | **Expected Result** |","lastModifiedDate":"2021-10-25"},{"lineNumber":304,"author":{"gitId":"andrewtkh1"},"content":"|:-------------:|:----------|:---------------------|","lastModifiedDate":"2021-10-25"},{"lineNumber":305,"author":{"gitId":"andrewtkh1"},"content":"|Find person `abc`| `find /n abc`| list person `abc`|","lastModifiedDate":"2021-10-25"},{"lineNumber":306,"author":{"gitId":"andrewtkh1"},"content":"|Find person with substring| `find /n ab`| list person `abc`|","lastModifiedDate":"2021-10-25"},{"lineNumber":307,"author":{"gitId":"andrewtkh1"},"content":"|Find multiple people| `find /n bc`| list both `abc` \u0026 `bcd`|","lastModifiedDate":"2021-10-25"},{"lineNumber":308,"author":{"gitId":"andrewtkh1"},"content":"|Missing parameters| `find /n`| Error message to user|","lastModifiedDate":"2021-10-25"},{"lineNumber":309,"author":{"gitId":"andrewtkh1"},"content":"|Person does not exists| `find /n zzz`| Inform that no names match|","lastModifiedDate":"2021-10-25"},{"lineNumber":310,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":311,"author":{"gitId":"andrewtkh1"},"content":"---","lastModifiedDate":"2021-10-25"},{"lineNumber":312,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":313,"author":{"gitId":"andrewtkh1"},"content":"### Delete Function","lastModifiedDate":"2021-10-25"},{"lineNumber":314,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":315,"author":{"gitId":"andrewtkh1"},"content":"- The format of the command is `delete \u003cperson index\u003e/\u003corder index\u003e`","lastModifiedDate":"2021-10-25"},{"lineNumber":316,"author":{"gitId":"andrewtkh1"},"content":"- Prerequisite: The current list has to contain at least `2` person each with `2`","lastModifiedDate":"2021-10-25"},{"lineNumber":317,"author":{"gitId":"andrewtkh1"},"content":"  distinct orders.","lastModifiedDate":"2021-10-25"},{"lineNumber":318,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":319,"author":{"gitId":"andrewtkh1"},"content":"| **Test Case** | **Command** | **Expected Result** |","lastModifiedDate":"2021-10-25"},{"lineNumber":320,"author":{"gitId":"andrewtkh1"},"content":"|:-------------:|:-------------|:-------------------|","lastModifiedDate":"2021-10-25"},{"lineNumber":321,"author":{"gitId":"andrewtkh1"},"content":"|Delete an order| `delete 1/1` | Order 1 of person 1 is deleted|","lastModifiedDate":"2021-10-25"},{"lineNumber":322,"author":{"gitId":"andrewtkh1"},"content":"|Delete all orders from a person| `delete 1/1`| Person should not be listed anymore|","lastModifiedDate":"2021-10-25"},{"lineNumber":323,"author":{"gitId":"andrewtkh1"},"content":"|Missing parameters| `delete 1/`| Error message to user|","lastModifiedDate":"2021-10-25"},{"lineNumber":324,"author":{"gitId":"andrewtkh1"},"content":"|Out of index| `delete 100/1`| Error message to user|","lastModifiedDate":"2021-10-25"},{"lineNumber":325,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":326,"author":{"gitId":"andrewtkh1"},"content":"## Glossary","lastModifiedDate":"2021-10-26"},{"lineNumber":327,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":328,"author":{"gitId":"andrewtkh1"},"content":"* `Unique Person` - Every entry with a different name counts as a unique person.","lastModifiedDate":"2021-10-26"},{"lineNumber":329,"author":{"gitId":"andrewtkh1"},"content":"* `Unique Food`   - Every element in the food array menu counts as a unique food.","lastModifiedDate":"2021-10-26"}],"authorContributionMap":{"markuslyq":65,"mohamad-adam8991":2,"andrewtkh1":221,"WaiKit-nus":5,"thaddyyz":6,"-":30}},{"path":"docs/MarkusDG.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":2,"author":{"gitId":"markuslyq"},"content":"## Acknowledgements","lastModifiedDate":"2021-10-19"},{"lineNumber":3,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":4,"author":{"gitId":"markuslyq"},"content":"{list here sources of all reused/adapted ideas, code, documentation, and third-party libraries -- include links to the original source as well}","lastModifiedDate":"2021-10-19"},{"lineNumber":5,"author":{"gitId":"markuslyq"},"content":"## Architecture","lastModifiedDate":"2021-10-26"},{"lineNumber":6,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":7,"author":{"gitId":"markuslyq"},"content":"## Design","lastModifiedDate":"2021-10-25"},{"lineNumber":8,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":9,"author":{"gitId":"markuslyq"},"content":"### Logical Component","lastModifiedDate":"2021-10-25"},{"lineNumber":10,"author":{"gitId":"markuslyq"},"content":"The partial class diagram of the `Logical` compoenet is as such:  ","lastModifiedDate":"2021-10-26"},{"lineNumber":11,"author":{"gitId":"markuslyq"},"content":"\u003cbr\u003e![Logical Component Partial Class Diagram](https://github.com/markuslyq/tp/blob/master/UMLdiagrams/LogicalComponentDiagrams/Logical%20Component%20Diagram-Page-2.jpg?raw\u003dtrue)","lastModifiedDate":"2021-10-26"},{"lineNumber":12,"author":{"gitId":"markuslyq"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2021-10-25"},{"lineNumber":13,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":14,"author":{"gitId":"markuslyq"},"content":":information_source: **Note:** Specific command names are represented using a placeholder `\u0027Abc\u0027`, i.e. AddCommand, FindCommand.","lastModifiedDate":"2021-10-26"},{"lineNumber":15,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":16,"author":{"gitId":"markuslyq"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-10-25"},{"lineNumber":17,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":18,"author":{"gitId":"markuslyq"},"content":"Explanation on the way the `Logical` componenet works:","lastModifiedDate":"2021-10-26"},{"lineNumber":19,"author":{"gitId":"markuslyq"},"content":"1. Upon receiving the user\u0027s input to excecute a specific command, it calls the `Parser` to interpret and parse the user\u0027s command.","lastModifiedDate":"2021-10-26"},{"lineNumber":20,"author":{"gitId":"markuslyq"},"content":"2. A particular `Command` object is then initialised and returned back to `Duke`, the main program.","lastModifiedDate":"2021-10-26"},{"lineNumber":21,"author":{"gitId":"markuslyq"},"content":"3. `Duke` executes the command, which communicates with the `Manager` to perform its specific function, i.e. add a food order.","lastModifiedDate":"2021-10-26"},{"lineNumber":22,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":23,"author":{"gitId":"markuslyq"},"content":"The class diagram below is a brief overview of how the `Parser` is used in parsing the user\u0027s command.  ","lastModifiedDate":"2021-10-26"},{"lineNumber":24,"author":{"gitId":"markuslyq"},"content":"\u003cbr\u003e![Parser Class Diagram](https://raw.githubusercontent.com/AY2122S1-CS2113-T13-2/tp/master/UMLdiagrams/ParserDiagrams/ParserClassDiag-Page-1.jpg)","lastModifiedDate":"2021-10-26"},{"lineNumber":25,"author":{"gitId":"markuslyq"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2021-10-19"},{"lineNumber":26,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":27,"author":{"gitId":"markuslyq"},"content":":information_source: **Note:** Details of each specific command class \u0026 Duke have been omitted from this diagram.","lastModifiedDate":"2021-10-19"},{"lineNumber":28,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":29,"author":{"gitId":"markuslyq"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-10-19"},{"lineNumber":30,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":31,"author":{"gitId":"markuslyq"},"content":"Explanation on how the parsing is done:","lastModifiedDate":"2021-10-26"},{"lineNumber":32,"author":{"gitId":"markuslyq"},"content":"1. Upon receiving the user\u0027s input string from `Duke`, the `Parser` split the user\u0027s input into an array of strings.","lastModifiedDate":"2021-10-26"},{"lineNumber":33,"author":{"gitId":"markuslyq"},"content":"2. It then interprets the string and try to match it with one of the known commands.","lastModifiedDate":"2021-10-26"},{"lineNumber":34,"author":{"gitId":"markuslyq"},"content":"3. The respective command (i.e. `DeleteCommand`) object will be initialised and returned back to `Duke` as a `Command` object. (`UnknownCommand` object is return","lastModifiedDate":"2021-10-26"},{"lineNumber":35,"author":{"gitId":"markuslyq"},"content":"   if there is no match)","lastModifiedDate":"2021-10-26"},{"lineNumber":36,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":37,"author":{"gitId":"markuslyq"},"content":"The following sequence diagram depicts how the `Logical` components interact with one another upon receiving the user\u0027s input of `\"delete 1/2\"`.  ","lastModifiedDate":"2021-10-26"},{"lineNumber":38,"author":{"gitId":"markuslyq"},"content":"\u003cbr\u003e![Logical Component Partial Class Diagram](https://github.com/markuslyq/tp/blob/master/UMLdiagrams/DeleteCommandDiagram/DeleteCommand%20Sequence%20Diagram.jpg?raw\u003dtrue)","lastModifiedDate":"2021-10-26"},{"lineNumber":39,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":40,"author":{"gitId":"markuslyq"},"content":"## Implementation  ","lastModifiedDate":"2021-10-26"},{"lineNumber":41,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":42,"author":{"gitId":"markuslyq"},"content":"### Logical Components","lastModifiedDate":"2021-10-26"},{"lineNumber":43,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":44,"author":{"gitId":"markuslyq"},"content":"Below is a step by step example on how the Logical components interact when a user keys in an input.","lastModifiedDate":"2021-10-26"},{"lineNumber":45,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":46,"author":{"gitId":"markuslyq"},"content":"Step 1)\u003cbr\u003e","lastModifiedDate":"2021-10-26"},{"lineNumber":47,"author":{"gitId":"markuslyq"},"content":"Lets assume the user input is `delete 1/2`. `Duke` will then call the method","lastModifiedDate":"2021-10-26"},{"lineNumber":48,"author":{"gitId":"markuslyq"},"content":"`Parser.getCommand(\"delete 1/2\")`. The method would split the user\u0027s input into an array of","lastModifiedDate":"2021-10-26"},{"lineNumber":49,"author":{"gitId":"markuslyq"},"content":"strings along the spaces and store them in the array `listOfInputs`. After which,","lastModifiedDate":"2021-10-26"},{"lineNumber":50,"author":{"gitId":"markuslyq"},"content":"it will get the string `\"delete\"` from the 0th element of `listOfInputs` and store","lastModifiedDate":"2021-10-26"},{"lineNumber":51,"author":{"gitId":"markuslyq"},"content":"it in `commandInString`.","lastModifiedDate":"2021-10-26"},{"lineNumber":52,"author":{"gitId":"markuslyq"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-10-26"},{"lineNumber":53,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":54,"author":{"gitId":"markuslyq"},"content":"Step 2)\u003cbr\u003e","lastModifiedDate":"2021-10-26"},{"lineNumber":55,"author":{"gitId":"markuslyq"},"content":"The method will then parse `commandInString` through the switch cases and try to match it with","lastModifiedDate":"2021-10-26"},{"lineNumber":56,"author":{"gitId":"markuslyq"},"content":"one of the known commands words stored in each respective command\u0027s class attribute called `COMMAND_WORD`.","lastModifiedDate":"2021-10-26"},{"lineNumber":57,"author":{"gitId":"markuslyq"},"content":"In this case, the `\"delete\"` command will cause the parser to return a `DeleteCommand` object.","lastModifiedDate":"2021-10-26"},{"lineNumber":58,"author":{"gitId":"markuslyq"},"content":"The image below shows the codes for the switch statement.","lastModifiedDate":"2021-10-26"},{"lineNumber":59,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":60,"author":{"gitId":"markuslyq"},"content":"![Switch case Code](https://raw.githubusercontent.com/AY2122S1-CS2113-T13-2/tp/master/UMLdiagrams/ParserDiagrams/SwitchClassCode.jpg)","lastModifiedDate":"2021-10-26"},{"lineNumber":61,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":62,"author":{"gitId":"markuslyq"},"content":"Step 3)\u003cbr\u003e","lastModifiedDate":"2021-10-26"},{"lineNumber":63,"author":{"gitId":"markuslyq"},"content":"Next, `Duke` will then use the returned command to call `Command.execute()` which will interact","lastModifiedDate":"2021-10-26"},{"lineNumber":64,"author":{"gitId":"markuslyq"},"content":"with the `Manager Components` of the program who will then remove the 2nd order from the first","lastModifiedDate":"2021-10-26"},{"lineNumber":65,"author":{"gitId":"markuslyq"},"content":"person in the list.","lastModifiedDate":"2021-10-26"},{"lineNumber":66,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":67,"author":{"gitId":"markuslyq"},"content":"Below is a Sequence diagram for the entire process mentioned above.","lastModifiedDate":"2021-10-26"},{"lineNumber":68,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":69,"author":{"gitId":"markuslyq"},"content":"![Squence Diagram of Logic](https://raw.githubusercontent.com/AY2122S1-CS2113-T13-2/tp/master/UMLdiagrams/ParserDiagrams/LogicSequenceDiag.jpg)","lastModifiedDate":"2021-10-26"},{"lineNumber":70,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":71,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":72,"author":{"gitId":"markuslyq"},"content":"#### Alternate implementation","lastModifiedDate":"2021-10-26"},{"lineNumber":73,"author":{"gitId":"markuslyq"},"content":"For the `Parser` class, we initially had thought of having each command\u0027s respective","lastModifiedDate":"2021-10-26"},{"lineNumber":74,"author":{"gitId":"markuslyq"},"content":"functions to be executed inside the switch statement.","lastModifiedDate":"2021-10-26"},{"lineNumber":75,"author":{"gitId":"markuslyq"},"content":"A rough example of the `delete` and `add` function can be seen below.","lastModifiedDate":"2021-10-19"},{"lineNumber":76,"author":{"gitId":"markuslyq"},"content":"```","lastModifiedDate":"2021-10-19"},{"lineNumber":77,"author":{"gitId":"markuslyq"},"content":"case \"delete\":","lastModifiedDate":"2021-10-19"},{"lineNumber":78,"author":{"gitId":"markuslyq"},"content":"    functionToDeleteTask(input);","lastModifiedDate":"2021-10-19"},{"lineNumber":79,"author":{"gitId":"markuslyq"},"content":"    break;","lastModifiedDate":"2021-10-19"},{"lineNumber":80,"author":{"gitId":"markuslyq"},"content":"case \"add\":","lastModifiedDate":"2021-10-19"},{"lineNumber":81,"author":{"gitId":"markuslyq"},"content":"    functionToAddTask(input);","lastModifiedDate":"2021-10-19"},{"lineNumber":82,"author":{"gitId":"markuslyq"},"content":"    break;","lastModifiedDate":"2021-10-19"},{"lineNumber":83,"author":{"gitId":"markuslyq"},"content":"```","lastModifiedDate":"2021-10-19"},{"lineNumber":84,"author":{"gitId":"markuslyq"},"content":"The upside of doing would be that there is less code overall.","lastModifiedDate":"2021-10-19"},{"lineNumber":85,"author":{"gitId":"markuslyq"},"content":"However, doing so would cause our code to have a higher amount of coupling and would also","lastModifiedDate":"2021-10-26"},{"lineNumber":86,"author":{"gitId":"markuslyq"},"content":"cause the code to be messier and therefore harder to read. By having a command class","lastModifiedDate":"2021-10-26"},{"lineNumber":87,"author":{"gitId":"markuslyq"},"content":"for each respective command, this allows us to segregate all the necessary functions","lastModifiedDate":"2021-10-26"},{"lineNumber":88,"author":{"gitId":"markuslyq"},"content":"for each command in their own respective class, therefore making testing easier too.","lastModifiedDate":"2021-10-26"},{"lineNumber":89,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":90,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":91,"author":{"gitId":"markuslyq"},"content":"### Delete Command","lastModifiedDate":"2021-10-19"},{"lineNumber":92,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":93,"author":{"gitId":"markuslyq"},"content":"The purpose of the delete command is to delete a specific order from a particular person. The class diagram below shows the structure of the deleteCommand class and its relationship with other classes.  ","lastModifiedDate":"2021-10-19"},{"lineNumber":94,"author":{"gitId":"markuslyq"},"content":"\u003cbr\u003e![Class Diagram](https://raw.githubusercontent.com/AY2122S1-CS2113-T13-2/tp/master/UMLdiagrams/DeleteCommandDiagram/DeleteCommand%20Diagram.jpg?raw\u003dtrue)","lastModifiedDate":"2021-10-25"},{"lineNumber":95,"author":{"gitId":"markuslyq"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2021-10-19"},{"lineNumber":96,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":97,"author":{"gitId":"markuslyq"},"content":":information_source: **Note:** This is not a full representation of all the classes. Only methods and attributes associated with the deleteCommand class is being shown.","lastModifiedDate":"2021-10-19"},{"lineNumber":98,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":99,"author":{"gitId":"markuslyq"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-10-19"},{"lineNumber":100,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":101,"author":{"gitId":"markuslyq"},"content":"Below is an example of how the deleteCommand class behaves at each step.","lastModifiedDate":"2021-10-19"},{"lineNumber":102,"author":{"gitId":"markuslyq"},"content":"Assume that there are 3 persons with 3 orders each.","lastModifiedDate":"2021-10-19"},{"lineNumber":103,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":104,"author":{"gitId":"markuslyq"},"content":"Step 1:\u003cbr\u003e","lastModifiedDate":"2021-10-20"},{"lineNumber":105,"author":{"gitId":"markuslyq"},"content":"Assuming that the user execute `delete 1/2` command to delete the the order of index `‘2’` from the person of index `‘1’`, the parser would instantiate an object of deleteCommand class, which is a subclass of the Command class. In the constructor of the deleteCommand class, the input entered by the user would then be taken as a parameter.","lastModifiedDate":"2021-10-20"},{"lineNumber":106,"author":{"gitId":"markuslyq"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-10-19"},{"lineNumber":107,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":108,"author":{"gitId":"markuslyq"},"content":"Step 2:\u003cbr\u003e","lastModifiedDate":"2021-10-20"},{"lineNumber":109,"author":{"gitId":"markuslyq"},"content":"The input is then split and initialised to its respectively attributes using the `getPersonIndex()` and `getFoodIndex()` methods. In this case, `\u00271\u0027` would be initialised as personIndex and `\u00272\u0027` as foodIndex. The deleteCommand class is then returned to Duke, the main program, via the Parser class.","lastModifiedDate":"2021-10-20"},{"lineNumber":110,"author":{"gitId":"markuslyq"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-10-20"},{"lineNumber":111,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":112,"author":{"gitId":"markuslyq"},"content":"Step 3:\u003cbr\u003e","lastModifiedDate":"2021-10-20"},{"lineNumber":113,"author":{"gitId":"markuslyq"},"content":"Duke calls the `execute()` method of deleteCommand, which executes `deleteOrder()`. An instance of peopleManager, initialised in the Command class, is then parsed as a paramenter.","lastModifiedDate":"2021-10-25"},{"lineNumber":114,"author":{"gitId":"markuslyq"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-10-20"},{"lineNumber":115,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":116,"author":{"gitId":"markuslyq"},"content":"Step 4:\u003cbr\u003e","lastModifiedDate":"2021-10-20"},{"lineNumber":117,"author":{"gitId":"markuslyq"},"content":"Within the `deleteOrder()` method, the person whose order is to be deleted is initialised and the deletion of the order is done via `deleteParticularOrder()` of the Person class as only the Person class has access to the Order class which holds the quantity of the order. The quantity of that particular order is then changed to 0 using `setQuantity()` in the Order class. This is to encapsulate the quantity attribute so as to prevent any unauthorised parties from accessing them directly.","lastModifiedDate":"2021-10-20"},{"lineNumber":118,"author":{"gitId":"markuslyq"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-10-20"},{"lineNumber":119,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":120,"author":{"gitId":"markuslyq"},"content":"Step 5:\u003cbr\u003e","lastModifiedDate":"2021-10-20"},{"lineNumber":121,"author":{"gitId":"markuslyq"},"content":"`printDeleteMessage()` is called to notify the user of the deletion and if the person no longer has any orders tagged to him, that paricular person would be deleted from the list too.","lastModifiedDate":"2021-10-25"},{"lineNumber":122,"author":{"gitId":"markuslyq"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-10-20"},{"lineNumber":123,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":124,"author":{"gitId":"markuslyq"},"content":"### Orders Command","lastModifiedDate":"2021-10-25"},{"lineNumber":125,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":126,"author":{"gitId":"markuslyq"},"content":"The purpose of the OrdersCommand is to display the list of current orders stored. The class diagram below shows the structure of","lastModifiedDate":"2021-10-25"},{"lineNumber":127,"author":{"gitId":"markuslyq"},"content":"the OrdersCommand class and how it is related to the other classes.","lastModifiedDate":"2021-10-25"},{"lineNumber":128,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":129,"author":{"gitId":"markuslyq"},"content":"\u003cbr\u003e![OrdersCommand Diagram](https://raw.githubusercontent.com/AY2122S1-CS2113-T13-2/tp/master/UMLdiagrams/OrderCommandDiagram/OrderCommand%20Diagram.jpg)","lastModifiedDate":"2021-10-25"},{"lineNumber":130,"author":{"gitId":"markuslyq"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2021-10-25"},{"lineNumber":131,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":132,"author":{"gitId":"markuslyq"},"content":":information_source: **Note:** This diagram only shows methods and attributes related to the OrdersCommand class.","lastModifiedDate":"2021-10-25"},{"lineNumber":133,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":134,"author":{"gitId":"markuslyq"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-10-25"},{"lineNumber":135,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":136,"author":{"gitId":"markuslyq"},"content":"Below is an example of how the OrdersCommand is used, assuming that there are orders currently stored.","lastModifiedDate":"2021-10-25"},{"lineNumber":137,"author":{"gitId":"markuslyq"},"content":"1) Taking in the input `list`, the parser will instantiate an OrdersCommand object, which in turn is returned to the","lastModifiedDate":"2021-10-25"},{"lineNumber":138,"author":{"gitId":"markuslyq"},"content":"   main duke program.","lastModifiedDate":"2021-10-25"},{"lineNumber":139,"author":{"gitId":"markuslyq"},"content":"2) When the main duke program calls the `execute()` method of OrdersCommand, the `printOrdersList()` method of the UI","lastModifiedDate":"2021-10-25"},{"lineNumber":140,"author":{"gitId":"markuslyq"},"content":"   class is executed.","lastModifiedDate":"2021-10-25"},{"lineNumber":141,"author":{"gitId":"markuslyq"},"content":"3) Within the `printOrdersList()` method, the method loops through each person stored in the PeopleManager to print the","lastModifiedDate":"2021-10-25"},{"lineNumber":142,"author":{"gitId":"markuslyq"},"content":"   names of all persons currently stored. On top of that, `printIndividualPersonOrder()` is called to print the `foodIndex` and","lastModifiedDate":"2021-10-25"},{"lineNumber":143,"author":{"gitId":"markuslyq"},"content":"   `quantity` data stored for each person.","lastModifiedDate":"2021-10-25"},{"lineNumber":144,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":145,"author":{"gitId":"markuslyq"},"content":"### Add Command","lastModifiedDate":"2021-10-25"},{"lineNumber":146,"author":{"gitId":"markuslyq"},"content":"The purpose of the AddCommand is to take in the user input and split the input to three different categories.","lastModifiedDate":"2021-10-25"},{"lineNumber":147,"author":{"gitId":"markuslyq"},"content":"The three categories are the input name, order index and quantity. These data will then be added into a new Person object,","lastModifiedDate":"2021-10-25"},{"lineNumber":148,"author":{"gitId":"markuslyq"},"content":"which will be added into the list of People.","lastModifiedDate":"2021-10-25"},{"lineNumber":149,"author":{"gitId":"markuslyq"},"content":"The class diagram below is a brief overview of how the AddCommand is related to other classes.","lastModifiedDate":"2021-10-25"},{"lineNumber":150,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":151,"author":{"gitId":"markuslyq"},"content":"\u003cbr\u003e![AddCommandDiagram](https://raw.githubusercontent.com/WaiKit-nus/tp/AddCommandClassDG-WK/UMLdiagrams/AddCommandDiagram/AddCommandDiagram.jpg)","lastModifiedDate":"2021-10-25"},{"lineNumber":152,"author":{"gitId":"markuslyq"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2021-10-25"},{"lineNumber":153,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":154,"author":{"gitId":"markuslyq"},"content":":information_source: **Note:** Details of each specific command class \u0026 Duke have been omitted from this diagram.","lastModifiedDate":"2021-10-25"},{"lineNumber":155,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":156,"author":{"gitId":"markuslyq"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-10-25"},{"lineNumber":157,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":158,"author":{"gitId":"markuslyq"},"content":"Listed below is an example on the usage of Add Command.","lastModifiedDate":"2021-10-25"},{"lineNumber":159,"author":{"gitId":"markuslyq"},"content":"1) Example Command: `add /n Jacob /i 3 /q 2`. This command translates into adding a person named Jacob, ordering the 3rd food on the menu with 2 quantity.","lastModifiedDate":"2021-10-25"},{"lineNumber":160,"author":{"gitId":"markuslyq"},"content":"2) The Add command will take in this input from the Parser class, which will then split this input string into `personName`, `foodIndex` and `foodQuantity` respectively.","lastModifiedDate":"2021-10-25"},{"lineNumber":161,"author":{"gitId":"markuslyq"},"content":"   A new `Person` object will be instantiated and the data `personName`, `foodIndex` and `foodQuantity` is passed into this object.","lastModifiedDate":"2021-10-25"},{"lineNumber":162,"author":{"gitId":"markuslyq"},"content":"3) This `Person` object will be added into the `listOfPeople` in the `PeopleManager` class.","lastModifiedDate":"2021-10-25"},{"lineNumber":163,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":164,"author":{"gitId":"markuslyq"},"content":"## Product scope","lastModifiedDate":"2021-10-19"},{"lineNumber":165,"author":{"gitId":"markuslyq"},"content":"### Target user profile","lastModifiedDate":"2021-10-19"},{"lineNumber":166,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":167,"author":{"gitId":"markuslyq"},"content":"* User has good typing skills.","lastModifiedDate":"2021-10-19"},{"lineNumber":168,"author":{"gitId":"markuslyq"},"content":"* Is comfortable without GUI.","lastModifiedDate":"2021-10-19"},{"lineNumber":169,"author":{"gitId":"markuslyq"},"content":"* Tends to make large orders of food.","lastModifiedDate":"2021-10-19"},{"lineNumber":170,"author":{"gitId":"markuslyq"},"content":"* Wishes to track multiple different orders of food.","lastModifiedDate":"2021-10-19"},{"lineNumber":171,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":172,"author":{"gitId":"markuslyq"},"content":"### Value proposition","lastModifiedDate":"2021-10-19"},{"lineNumber":173,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":174,"author":{"gitId":"markuslyq"},"content":"* Large orders can be confusing to keep track, especially if orders are to different stores.","lastModifiedDate":"2021-10-19"},{"lineNumber":175,"author":{"gitId":"markuslyq"},"content":"* Allows users to keep track of bulk orders easily.","lastModifiedDate":"2021-10-19"},{"lineNumber":176,"author":{"gitId":"markuslyq"},"content":"* Easily keep track of costs.","lastModifiedDate":"2021-10-19"},{"lineNumber":177,"author":{"gitId":"markuslyq"},"content":"* Ensures that no orders are left out.","lastModifiedDate":"2021-10-19"},{"lineNumber":178,"author":{"gitId":"markuslyq"},"content":"* Knows which order belongs to which store.","lastModifiedDate":"2021-10-19"},{"lineNumber":179,"author":{"gitId":"markuslyq"},"content":"* Allow flexibility and control over what description you would like of your friends.","lastModifiedDate":"2021-10-19"},{"lineNumber":180,"author":{"gitId":"markuslyq"},"content":"* Users are able to delete/edit entries quickly.","lastModifiedDate":"2021-10-19"},{"lineNumber":181,"author":{"gitId":"markuslyq"},"content":"* Comments on the food can also be described by you (e.g. No meat for BanMian).","lastModifiedDate":"2021-10-19"},{"lineNumber":182,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":183,"author":{"gitId":"markuslyq"},"content":"## User Stories","lastModifiedDate":"2021-10-19"},{"lineNumber":184,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":185,"author":{"gitId":"markuslyq"},"content":"|Version| As a ... | I want to ... | So that I can ...|","lastModifiedDate":"2021-10-19"},{"lineNumber":186,"author":{"gitId":"markuslyq"},"content":"|--------|----------|---------------|------------------|","lastModifiedDate":"2021-10-19"},{"lineNumber":187,"author":{"gitId":"markuslyq"},"content":"|v1.0|New student on campus|View the menu.|Avoid having to go down physically to the shops.|","lastModifiedDate":"2021-10-26"},{"lineNumber":188,"author":{"gitId":"markuslyq"},"content":"|v1.0|User|View the current orders with their names attached.|Able to track who ordered what.|","lastModifiedDate":"2021-10-26"},{"lineNumber":189,"author":{"gitId":"markuslyq"},"content":"|v1.0|User|Add my choices of food from the menu.| Track what orders I plan to get.|","lastModifiedDate":"2021-10-26"},{"lineNumber":190,"author":{"gitId":"markuslyq"},"content":"|v1.0|User|Delete order\u0027s that I\u0027ve added.|So i can remove orders if someone changes their mind.|","lastModifiedDate":"2021-10-26"},{"lineNumber":191,"author":{"gitId":"markuslyq"},"content":"|v2.0|New User|Easily understand how to use the app.| Navigate the program with ease.| ","lastModifiedDate":"2021-10-26"},{"lineNumber":192,"author":{"gitId":"markuslyq"},"content":"|v2.0|Person ordering for a group.|View the cost breakdown for the current order.| Know how much each person owes me.|","lastModifiedDate":"2021-10-26"},{"lineNumber":193,"author":{"gitId":"markuslyq"},"content":"|v2.0|Person ordering for a large group.|View the total number of orders keyed in.| Ensure that everyone has ordered.|","lastModifiedDate":"2021-10-26"},{"lineNumber":194,"author":{"gitId":"markuslyq"},"content":"|v2.0|User|Amend existing orders.|Edit an order without having to re-type it.|","lastModifiedDate":"2021-10-26"},{"lineNumber":195,"author":{"gitId":"markuslyq"},"content":"|v2.0|Person ordering for a large group.|Find a specific order by name.|Easy know what they ordered without having to scroll through.|","lastModifiedDate":"2021-10-26"},{"lineNumber":196,"author":{"gitId":"markuslyq"},"content":"|v2.5|Tech illiterate| View a user guide.| Learn how to use the program.|","lastModifiedDate":"2021-10-26"},{"lineNumber":197,"author":{"gitId":"markuslyq"},"content":"|-|Person ordering for a group| Track everyone\u0027s food allergies.| Avoid ordering the wrong order.|","lastModifiedDate":"2021-10-26"},{"lineNumber":198,"author":{"gitId":"markuslyq"},"content":"|-|Person ordering food for friends| Track what add-ons my friends want.|Track how much it is and won\u0027t forget about it.|","lastModifiedDate":"2021-10-26"},{"lineNumber":199,"author":{"gitId":"markuslyq"},"content":"|-|Lecturer| Know how many people does a food serve.|Easily order food for the class.|","lastModifiedDate":"2021-10-26"},{"lineNumber":200,"author":{"gitId":"markuslyq"},"content":"|-|Host of a party| Sort the menu based on categories| Keep track of different varieties of food.|","lastModifiedDate":"2021-10-26"},{"lineNumber":201,"author":{"gitId":"markuslyq"},"content":"|-|Indecisive user| View recommendations based on my frequent orders.| Simplify my ordering process.|","lastModifiedDate":"2021-10-26"},{"lineNumber":202,"author":{"gitId":"markuslyq"},"content":"|-|Non-local| View the menu with descriptions in multiple languages.| Order food without a language barrier.|","lastModifiedDate":"2021-10-26"},{"lineNumber":203,"author":{"gitId":"markuslyq"},"content":"|-|User with poor data| Download the menu and order list.| Track my orders even without the internet.|","lastModifiedDate":"2021-10-26"},{"lineNumber":204,"author":{"gitId":"markuslyq"},"content":"|-|User| View if a food item is sold out.| Decide whether to order from another store.|","lastModifiedDate":"2021-10-26"},{"lineNumber":205,"author":{"gitId":"markuslyq"},"content":"|-|Health conscious user| View the nutritional value of a food.| Easily track my diet.|","lastModifiedDate":"2021-10-26"},{"lineNumber":206,"author":{"gitId":"markuslyq"},"content":"|-|Ordering for a large group| View the recommended serving size.| Decide on how much food to order.|","lastModifiedDate":"2021-10-26"},{"lineNumber":207,"author":{"gitId":"markuslyq"},"content":"|-|Recurring user| Store my favourite food| Easily find what I like.|","lastModifiedDate":"2021-10-26"},{"lineNumber":208,"author":{"gitId":"markuslyq"},"content":"|-|Recurring user| Saved my food orders| Easily place my regular order again.|","lastModifiedDate":"2021-10-26"},{"lineNumber":209,"author":{"gitId":"markuslyq"},"content":"|-|User| Retrieve my previous order.| Place my previous orders again.|","lastModifiedDate":"2021-10-26"},{"lineNumber":210,"author":{"gitId":"markuslyq"},"content":"|-|User| View menu from a file| Avoid having to scroll through the whole menu.|","lastModifiedDate":"2021-10-26"},{"lineNumber":211,"author":{"gitId":"markuslyq"},"content":"|-|User| Track who has paid| Know who still owes me money.|","lastModifiedDate":"2021-10-26"},{"lineNumber":212,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":213,"author":{"gitId":"markuslyq"},"content":"## Non-Functional Requirements","lastModifiedDate":"2021-10-19"},{"lineNumber":214,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":215,"author":{"gitId":"markuslyq"},"content":"- Program should be able to work on most Operating Systems such as `Windows`, `Linux`,","lastModifiedDate":"2021-10-26"},{"lineNumber":216,"author":{"gitId":"markuslyq"},"content":"  `OS-X` \u0026 `Unix`.","lastModifiedDate":"2021-10-26"},{"lineNumber":217,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":218,"author":{"gitId":"markuslyq"},"content":"- User needs to have Java `11` or above installed in order for the program to work.","lastModifiedDate":"2021-10-26"},{"lineNumber":219,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":220,"author":{"gitId":"markuslyq"},"content":"- The program should be able to support up to all these values stated below.","lastModifiedDate":"2021-10-26"},{"lineNumber":221,"author":{"gitId":"markuslyq"},"content":"   - Up to `99` _Unique person_ at a time.","lastModifiedDate":"2021-10-26"},{"lineNumber":222,"author":{"gitId":"markuslyq"},"content":"   - Maximum of `99` _Unique Food_ items in the menu.","lastModifiedDate":"2021-10-26"},{"lineNumber":223,"author":{"gitId":"markuslyq"},"content":"   - Maximum of `999` quantity for each distinct food item in a person\u0027s order.","lastModifiedDate":"2021-10-26"},{"lineNumber":224,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":225,"author":{"gitId":"markuslyq"},"content":"## Glossary","lastModifiedDate":"2021-10-19"},{"lineNumber":226,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":227,"author":{"gitId":"markuslyq"},"content":"* `Unique Person` - Every entry with a different name counts as a unique person.","lastModifiedDate":"2021-10-26"},{"lineNumber":228,"author":{"gitId":"markuslyq"},"content":"* `Unique Food`   - Every element in the food array menu counts as a unique food.","lastModifiedDate":"2021-10-26"},{"lineNumber":229,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":230,"author":{"gitId":"markuslyq"},"content":"## Instructions for manual testing","lastModifiedDate":"2021-10-19"},{"lineNumber":231,"author":{"gitId":"markuslyq"},"content":"The instructions below give a brief overview on how to test the functions manually.","lastModifiedDate":"2021-10-26"},{"lineNumber":232,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":233,"author":{"gitId":"markuslyq"},"content":"- :information_source: More test cases can be found in each of their respective test class under","lastModifiedDate":"2021-10-26"},{"lineNumber":234,"author":{"gitId":"markuslyq"},"content":"  `src/test/java/seedu.duke`","lastModifiedDate":"2021-10-26"},{"lineNumber":235,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":236,"author":{"gitId":"markuslyq"},"content":"[Starting up \u0026 Shutting down](#Starting-up-\u0026-Shutting-down)","lastModifiedDate":"2021-10-26"},{"lineNumber":237,"author":{"gitId":"markuslyq"},"content":"\u003cbr\u003e [Add function](#Add-Function)","lastModifiedDate":"2021-10-26"},{"lineNumber":238,"author":{"gitId":"markuslyq"},"content":"\u003cbr\u003e [Edit function](#Edit-Function)","lastModifiedDate":"2021-10-26"},{"lineNumber":239,"author":{"gitId":"markuslyq"},"content":"\u003cbr\u003e [Find function](#Find-Function)","lastModifiedDate":"2021-10-26"},{"lineNumber":240,"author":{"gitId":"markuslyq"},"content":"\u003cbr\u003e [Delete function](#Delete-Function)","lastModifiedDate":"2021-10-26"},{"lineNumber":241,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":242,"author":{"gitId":"markuslyq"},"content":"---","lastModifiedDate":"2021-10-26"},{"lineNumber":243,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":244,"author":{"gitId":"markuslyq"},"content":"### Starting up \u0026 Shutting down","lastModifiedDate":"2021-10-26"},{"lineNumber":245,"author":{"gitId":"markuslyq"},"content":"1) To begin, download the .jar file and place it in a folder.","lastModifiedDate":"2021-10-26"},{"lineNumber":246,"author":{"gitId":"markuslyq"},"content":"2) Open the CLI at the file location and run by the jar file by giving the command,","lastModifiedDate":"2021-10-26"},{"lineNumber":247,"author":{"gitId":"markuslyq"},"content":"   `java -jar \u003cjar file name\u003e.jar`","lastModifiedDate":"2021-10-26"},{"lineNumber":248,"author":{"gitId":"markuslyq"},"content":"   - E.g) With `CS2113T.jar` the command would be `java -jar CS2113T.jar`","lastModifiedDate":"2021-10-26"},{"lineNumber":249,"author":{"gitId":"markuslyq"},"content":"3) To end the program, enter the command `bye` or simply close the CLI window.","lastModifiedDate":"2021-10-26"},{"lineNumber":250,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":251,"author":{"gitId":"markuslyq"},"content":"---","lastModifiedDate":"2021-10-26"},{"lineNumber":252,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":253,"author":{"gitId":"markuslyq"},"content":"### Add Function","lastModifiedDate":"2021-10-26"},{"lineNumber":254,"author":{"gitId":"markuslyq"},"content":"- The format of the command is `add /n \u003cname\u003e /i \u003cindex\u003e /q \u003cquanity\u003e`","lastModifiedDate":"2021-10-26"},{"lineNumber":255,"author":{"gitId":"markuslyq"},"content":"- Prerequisite: The `Menu` has to contain at least `2` food item.","lastModifiedDate":"2021-10-26"},{"lineNumber":256,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":257,"author":{"gitId":"markuslyq"},"content":"| **Test Case** | **Command** | **Expected Result** |","lastModifiedDate":"2021-10-26"},{"lineNumber":258,"author":{"gitId":"markuslyq"},"content":"|:------------:|:-------------|:--------------------|","lastModifiedDate":"2021-10-26"},{"lineNumber":259,"author":{"gitId":"markuslyq"},"content":"|Add 1 person.|`add /n abc /i 1 /q 2`| Adds person named `abc` with `2` quantities of item `1`|","lastModifiedDate":"2021-10-26"},{"lineNumber":260,"author":{"gitId":"markuslyq"},"content":"|Add a different order to the same person.| `add /n abc /i 2 /q 1`| Person `abc` should have 2 distinct orders under him|","lastModifiedDate":"2021-10-26"},{"lineNumber":261,"author":{"gitId":"markuslyq"},"content":"|Add on to an existing order.| `add /n abc /i 1 /q 1`| Person `abc` order `1` quantity should increase by 1|","lastModifiedDate":"2021-10-26"},{"lineNumber":262,"author":{"gitId":"markuslyq"},"content":"|Missing parameters| `add /n /i /q`| Error message to user|","lastModifiedDate":"2021-10-26"},{"lineNumber":263,"author":{"gitId":"markuslyq"},"content":"|Exceeding more than 999 quantity| `add /n abc /i 1 /q 1000`| Error message to user|","lastModifiedDate":"2021-10-26"},{"lineNumber":264,"author":{"gitId":"markuslyq"},"content":"|Food item not on the menu| `add /n abc /i 0 /q 1` | Error message to user|","lastModifiedDate":"2021-10-26"},{"lineNumber":265,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":266,"author":{"gitId":"markuslyq"},"content":"---","lastModifiedDate":"2021-10-26"},{"lineNumber":267,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":268,"author":{"gitId":"markuslyq"},"content":"### Edit Function","lastModifiedDate":"2021-10-26"},{"lineNumber":269,"author":{"gitId":"markuslyq"},"content":"- The format of the command is `edit \u003cperson index\u003e/\u003corder index\u003e /q \u003cquantity\u003e`","lastModifiedDate":"2021-10-26"},{"lineNumber":270,"author":{"gitId":"markuslyq"},"content":"- Prerequisite: The current list has to contain at least `2` person each with `2`","lastModifiedDate":"2021-10-26"},{"lineNumber":271,"author":{"gitId":"markuslyq"},"content":"  distinct orders.","lastModifiedDate":"2021-10-26"},{"lineNumber":272,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":273,"author":{"gitId":"markuslyq"},"content":"| **Test Case** | **Command** | **Expected Result** |","lastModifiedDate":"2021-10-26"},{"lineNumber":274,"author":{"gitId":"markuslyq"},"content":"|:-------------:|:------------|:-------------------|","lastModifiedDate":"2021-10-26"},{"lineNumber":275,"author":{"gitId":"markuslyq"},"content":"|Edit order quantity to 3| `edit 1/1 /q 3`| Order 1 of person number 1 now has 3 quantity|","lastModifiedDate":"2021-10-26"},{"lineNumber":276,"author":{"gitId":"markuslyq"},"content":"|Edit order to 0|`edit 1/2 /q 0`| 2nd order of person number 1 should deleted|","lastModifiedDate":"2021-10-26"},{"lineNumber":277,"author":{"gitId":"markuslyq"},"content":"|Missing parameters| `edit 1/2 /q`| Error message to user|","lastModifiedDate":"2021-10-26"},{"lineNumber":278,"author":{"gitId":"markuslyq"},"content":"|Edit order to more than 999| `edit 1/1 /q 1000`| Error message to user|","lastModifiedDate":"2021-10-26"},{"lineNumber":279,"author":{"gitId":"markuslyq"},"content":"|Edit order out of food/person index| `edit 1/999 /q 2`| Error message to user|","lastModifiedDate":"2021-10-26"},{"lineNumber":280,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":281,"author":{"gitId":"markuslyq"},"content":"---","lastModifiedDate":"2021-10-26"},{"lineNumber":282,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":283,"author":{"gitId":"markuslyq"},"content":"### Find Function","lastModifiedDate":"2021-10-26"},{"lineNumber":284,"author":{"gitId":"markuslyq"},"content":"- The format of the command is `find /n \u003cname\u003e`","lastModifiedDate":"2021-10-26"},{"lineNumber":285,"author":{"gitId":"markuslyq"},"content":"- Prerequisite: Contains 2 person with names of `abc` \u0026 `bcd`.","lastModifiedDate":"2021-10-26"},{"lineNumber":286,"author":{"gitId":"markuslyq"},"content":"   - The above names are just for testing purposes.","lastModifiedDate":"2021-10-26"},{"lineNumber":287,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":288,"author":{"gitId":"markuslyq"},"content":"| **Test Case** | **Command** | **Expected Result** |","lastModifiedDate":"2021-10-26"},{"lineNumber":289,"author":{"gitId":"markuslyq"},"content":"|:-------------:|:----------|:---------------------|","lastModifiedDate":"2021-10-26"},{"lineNumber":290,"author":{"gitId":"markuslyq"},"content":"|Find person `abc`| `find /n abc`| list person `abc`|","lastModifiedDate":"2021-10-26"},{"lineNumber":291,"author":{"gitId":"markuslyq"},"content":"|Find person with substring| `find /n ab`| list person `abc`|","lastModifiedDate":"2021-10-26"},{"lineNumber":292,"author":{"gitId":"markuslyq"},"content":"|Find multiple people| `find /n bc`| list both `abc` \u0026 `bcd`|","lastModifiedDate":"2021-10-26"},{"lineNumber":293,"author":{"gitId":"markuslyq"},"content":"|Missing parameters| `find /n`| Error message to user|","lastModifiedDate":"2021-10-26"},{"lineNumber":294,"author":{"gitId":"markuslyq"},"content":"|Person does not exists| `find /n zzz`| Inform that no names match|","lastModifiedDate":"2021-10-26"},{"lineNumber":295,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":296,"author":{"gitId":"markuslyq"},"content":"---","lastModifiedDate":"2021-10-26"},{"lineNumber":297,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":298,"author":{"gitId":"markuslyq"},"content":"### Delete Function","lastModifiedDate":"2021-10-26"},{"lineNumber":299,"author":{"gitId":"markuslyq"},"content":"- The format of the command is `delete \u003cperson index\u003e/\u003corder index\u003e`","lastModifiedDate":"2021-10-26"},{"lineNumber":300,"author":{"gitId":"markuslyq"},"content":"- Prerequisite: The current list has to contain at least `2` person each with `2`","lastModifiedDate":"2021-10-26"},{"lineNumber":301,"author":{"gitId":"markuslyq"},"content":"  distinct orders.","lastModifiedDate":"2021-10-26"},{"lineNumber":302,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":303,"author":{"gitId":"markuslyq"},"content":"| **Test Case** | **Command** | **Expected Result** |","lastModifiedDate":"2021-10-26"},{"lineNumber":304,"author":{"gitId":"markuslyq"},"content":"|:-------------:|:-------------|:-------------------|","lastModifiedDate":"2021-10-26"},{"lineNumber":305,"author":{"gitId":"markuslyq"},"content":"|Delete an order| `delete 1/1` | Order 1 of person 1 is deleted|","lastModifiedDate":"2021-10-26"},{"lineNumber":306,"author":{"gitId":"markuslyq"},"content":"|Delete all orders from a person| `delete 1/1`| Person should not be listed anymore|","lastModifiedDate":"2021-10-26"},{"lineNumber":307,"author":{"gitId":"markuslyq"},"content":"|Missing parameters| `delete 1/`| Error message to user|","lastModifiedDate":"2021-10-26"},{"lineNumber":308,"author":{"gitId":"markuslyq"},"content":"|Out of index| `delete 100/1`| Error message to user|","lastModifiedDate":"2021-10-26"}],"authorContributionMap":{"markuslyq":308}},{"path":"docs/README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"andrewtkh1"},"content":"# Large Order Tracking System (LOTS)","lastModifiedDate":"2021-10-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":3,"author":{"gitId":"andrewtkh1"},"content":"Welcome to LOTS!","lastModifiedDate":"2021-10-19"},{"lineNumber":4,"author":{"gitId":"andrewtkh1"},"content":"- insert Image of menu here","lastModifiedDate":"2021-10-19"},{"lineNumber":5,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":6,"author":{"gitId":"andrewtkh1"},"content":"Large Order Tracking System (LOTS) is a Command Line (CLI) program that enables users to","lastModifiedDate":"2021-10-19"},{"lineNumber":7,"author":{"gitId":"andrewtkh1"},"content":"keep track of multiple food orders from a pre-set list of food items from different stores.","lastModifiedDate":"2021-10-19"},{"lineNumber":8,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":9,"author":{"gitId":"andrewtkh1"},"content":"- Head over to [User Guide](UserGuide.md) to learn how to use LOTS.","lastModifiedDate":"2021-10-19"},{"lineNumber":10,"author":{"gitId":"andrewtkh1"},"content":"- If you are interested in the backend of LOTS, head over to the [Developer Guide](DeveloperGuide.md) to find out more!","lastModifiedDate":"2021-10-19"},{"lineNumber":11,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":12,"author":{"gitId":"andrewtkh1"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-10-19"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":14,"author":{"gitId":"-"},"content":"Useful links:","lastModifiedDate":"2020-05-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"* [User Guide](UserGuide.md)","lastModifiedDate":"2020-05-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"* [Developer Guide](DeveloperGuide.md)","lastModifiedDate":"2020-05-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"* [About Us](AboutUs.md)","lastModifiedDate":"2020-05-24"},{"lineNumber":18,"author":{"gitId":"andrewtkh1"},"content":"* [Setup For Developers](settingUp.md)","lastModifiedDate":"2021-10-19"}],"authorContributionMap":{"andrewtkh1":12,"-":6}},{"path":"docs/WKDG.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"WaiKit-nus"},"content":"# Developer Guide","lastModifiedDate":"2021-10-19"},{"lineNumber":2,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":3,"author":{"gitId":"WaiKit-nus"},"content":"## Acknowledgements","lastModifiedDate":"2021-10-19"},{"lineNumber":4,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":5,"author":{"gitId":"WaiKit-nus"},"content":"{list here sources of all reused/adapted ideas, code, documentation, and third-party libraries -- include links to the original source as well}","lastModifiedDate":"2021-10-19"},{"lineNumber":6,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":7,"author":{"gitId":"WaiKit-nus"},"content":"## Design \u0026 implementation","lastModifiedDate":"2021-10-19"},{"lineNumber":8,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":9,"author":{"gitId":"WaiKit-nus"},"content":"###PeopleManager Component","lastModifiedDate":"2021-10-26"},{"lineNumber":10,"author":{"gitId":"WaiKit-nus"},"content":"**API** : PeopleManager.java","lastModifiedDate":"2021-10-26"},{"lineNumber":11,"author":{"gitId":"WaiKit-nus"},"content":"\u003cbr\u003e![PeopleManagerDiagram](https://raw.githubusercontent.com/AY2122S1-CS2113-T13-2/tp/master/UMLdiagrams/PeopleManagerDiagram/PeopleManagerDiagram.jpg)","lastModifiedDate":"2021-10-26"},{"lineNumber":12,"author":{"gitId":"WaiKit-nus"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2021-10-26"},{"lineNumber":13,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":14,"author":{"gitId":"WaiKit-nus"},"content":":information_source: **Note:** This diagram shows the components of how the inputs are handled.","lastModifiedDate":"2021-10-26"},{"lineNumber":15,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":16,"author":{"gitId":"WaiKit-nus"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-10-26"},{"lineNumber":17,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":18,"author":{"gitId":"WaiKit-nus"},"content":"The `PeopleManager` component,","lastModifiedDate":"2021-10-26"},{"lineNumber":19,"author":{"gitId":"WaiKit-nus"},"content":"* Stores a list of people, named: `listOfPeople`. This list stores all `Person` objects.","lastModifiedDate":"2021-10-26"},{"lineNumber":20,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":21,"author":{"gitId":"WaiKit-nus"},"content":"The `Person` component,","lastModifiedDate":"2021-10-26"},{"lineNumber":22,"author":{"gitId":"WaiKit-nus"},"content":"* Store details of the person.","lastModifiedDate":"2021-10-26"},{"lineNumber":23,"author":{"gitId":"WaiKit-nus"},"content":"   * It stores the name of the person, using a String Variable named `personName`.","lastModifiedDate":"2021-10-26"},{"lineNumber":24,"author":{"gitId":"WaiKit-nus"},"content":"   * It also stores the orders of the person, using a list of Order, named `individualFoodOrders`.","lastModifiedDate":"2021-10-26"},{"lineNumber":25,"author":{"gitId":"WaiKit-nus"},"content":"   ","lastModifiedDate":"2021-10-26"},{"lineNumber":26,"author":{"gitId":"WaiKit-nus"},"content":"The `Order` component,","lastModifiedDate":"2021-10-26"},{"lineNumber":27,"author":{"gitId":"WaiKit-nus"},"content":"* Stores details of the order.","lastModifiedDate":"2021-10-26"},{"lineNumber":28,"author":{"gitId":"WaiKit-nus"},"content":"   * It stores the name of the order, using a String Variable named `foodName`.","lastModifiedDate":"2021-10-26"},{"lineNumber":29,"author":{"gitId":"WaiKit-nus"},"content":"   * It stores the index of the order, using an int Variable named `foodIndex`.","lastModifiedDate":"2021-10-26"},{"lineNumber":30,"author":{"gitId":"WaiKit-nus"},"content":"   * It stores the quantity of the order, using a String Variable named `quantity`.","lastModifiedDate":"2021-10-26"},{"lineNumber":31,"author":{"gitId":"WaiKit-nus"},"content":"   * It stores the cost of the order, using a double Variable named `costOfOrder`.","lastModifiedDate":"2021-10-26"},{"lineNumber":32,"author":{"gitId":"WaiKit-nus"},"content":"   ","lastModifiedDate":"2021-10-26"},{"lineNumber":33,"author":{"gitId":"WaiKit-nus"},"content":"When the input is passed in through the `logical` component, the `PeopleManager` component will be responsible for managing the input, ","lastModifiedDate":"2021-10-26"},{"lineNumber":34,"author":{"gitId":"WaiKit-nus"},"content":"by creating variables needed to store the data, and storing this newly created variables into the `listOfPeople`.","lastModifiedDate":"2021-10-26"},{"lineNumber":35,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":36,"author":{"gitId":"WaiKit-nus"},"content":"###Add Command","lastModifiedDate":"2021-10-19"},{"lineNumber":37,"author":{"gitId":"WaiKit-nus"},"content":"The purpose of the AddCommand is to take in the user input and split the input to three different categories. ","lastModifiedDate":"2021-10-19"},{"lineNumber":38,"author":{"gitId":"WaiKit-nus"},"content":"The three categories are the input name, order index and quantity. These data will then be added into a new Person object, ","lastModifiedDate":"2021-10-19"},{"lineNumber":39,"author":{"gitId":"WaiKit-nus"},"content":"which will be added into the list of People.","lastModifiedDate":"2021-10-19"},{"lineNumber":40,"author":{"gitId":"WaiKit-nus"},"content":"The class diagram below is a brief overview of how the Parser is related to other classes.","lastModifiedDate":"2021-10-19"},{"lineNumber":41,"author":{"gitId":"WaiKit-nus"},"content":"\u003cbr\u003e![AddCommandDiagram](https://raw.githubusercontent.com/AY2122S1-CS2113-T13-2/tp/master/UMLdiagrams/AddCommandDiagram/AddCommandDiagram.jpg)","lastModifiedDate":"2021-10-26"},{"lineNumber":42,"author":{"gitId":"WaiKit-nus"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2021-10-19"},{"lineNumber":43,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":44,"author":{"gitId":"WaiKit-nus"},"content":":information_source: **Note:** Details of each specific command class \u0026 Duke have been omitted from this diagram.","lastModifiedDate":"2021-10-19"},{"lineNumber":45,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":46,"author":{"gitId":"WaiKit-nus"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-10-19"},{"lineNumber":47,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":48,"author":{"gitId":"WaiKit-nus"},"content":"Listed below is an example on the usage of Add Command.","lastModifiedDate":"2021-10-20"},{"lineNumber":49,"author":{"gitId":"WaiKit-nus"},"content":"1) Example Command: `add /n Jacob /i 3 /q 2`. This command translates into adding a person named Jacob, ordering the 3rd food on the menu with 2 quantity.","lastModifiedDate":"2021-10-20"},{"lineNumber":50,"author":{"gitId":"WaiKit-nus"},"content":"2) The Add command will take in this input from the Parser class, which will then split this input string into `personName`, `foodIndex` and `foodQuantity` respectively.","lastModifiedDate":"2021-10-20"},{"lineNumber":51,"author":{"gitId":"WaiKit-nus"},"content":"A new `Person` object will be instantiated and the data `personName`, `foodIndex` and `foodQuantity` is passed into this object. ","lastModifiedDate":"2021-10-20"},{"lineNumber":52,"author":{"gitId":"WaiKit-nus"},"content":"3) This `Person` object will be added into the `listOfPeople` in the `PeopleManager` class.  ","lastModifiedDate":"2021-10-20"},{"lineNumber":53,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":54,"author":{"gitId":"WaiKit-nus"},"content":"## Implementation","lastModifiedDate":"2021-10-26"},{"lineNumber":55,"author":{"gitId":"WaiKit-nus"},"content":"This section describes how the commands are implemented. ","lastModifiedDate":"2021-10-26"},{"lineNumber":56,"author":{"gitId":"WaiKit-nus"},"content":"Explanations and sequence diagrams are used to describe the implementation process.","lastModifiedDate":"2021-10-26"},{"lineNumber":57,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":58,"author":{"gitId":"WaiKit-nus"},"content":"###Add, Delete, Edit, Orders, Find Implementation","lastModifiedDate":"2021-10-26"},{"lineNumber":59,"author":{"gitId":"WaiKit-nus"},"content":"The commands `add`, `delete`, `edit`, `orders` and `find` have similar implementation, with a few differences in terms of the methods called.","lastModifiedDate":"2021-10-26"},{"lineNumber":60,"author":{"gitId":"WaiKit-nus"},"content":"Here is an overview of their class diagram.","lastModifiedDate":"2021-10-26"},{"lineNumber":61,"author":{"gitId":"WaiKit-nus"},"content":"\u003cbr\u003e![OverallClassDiagram](https://raw.githubusercontent.com/AY2122S1-CS2113-T13-2/tp/master/UMLdiagrams/LogicalComponentDiagrams/OverallClassDiagram.jpg)","lastModifiedDate":"2021-10-26"},{"lineNumber":62,"author":{"gitId":"WaiKit-nus"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2021-10-26"},{"lineNumber":63,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":64,"author":{"gitId":"WaiKit-nus"},"content":":information_source: **Note:** The diagram is shared between the AddCommand, DeleteCommand, EditCommand, OrdersCommand and FindCommand.","lastModifiedDate":"2021-10-26"},{"lineNumber":65,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":66,"author":{"gitId":"WaiKit-nus"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-10-26"},{"lineNumber":67,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":68,"author":{"gitId":"WaiKit-nus"},"content":"From the above class diagram, we can replace the **AbcCommand** with whichever command we are looking at. For example, if we are ","lastModifiedDate":"2021-10-26"},{"lineNumber":69,"author":{"gitId":"WaiKit-nus"},"content":"looking at the `AddCommand` class, we replace the **AbcCommand** with **AddCommand**. Same goes for all the other command classes. ","lastModifiedDate":"2021-10-26"},{"lineNumber":70,"author":{"gitId":"WaiKit-nus"},"content":"The overview class diagram is listed here to show how the command classes interact on the logical component to the manager component.","lastModifiedDate":"2021-10-26"},{"lineNumber":71,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":72,"author":{"gitId":"WaiKit-nus"},"content":"###Implementation for Menu Command Class and Order Command Class","lastModifiedDate":"2021-10-26"},{"lineNumber":73,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":74,"author":{"gitId":"WaiKit-nus"},"content":"Command word to invoke the Menu Command and Order Command: `menu` and `list`.","lastModifiedDate":"2021-10-26"},{"lineNumber":75,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":76,"author":{"gitId":"WaiKit-nus"},"content":"The purpose of Menu Command class is to instantiate the menu of which the user can order from. By invoking `menu`, the menu will be printed on the console for the user to see.","lastModifiedDate":"2021-10-26"},{"lineNumber":77,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":78,"author":{"gitId":"WaiKit-nus"},"content":"The purpose of Order Command class is to print the orders which the user has ordered onto the console. By invoking `list`, the order will be printed in a list format for the user to view. ","lastModifiedDate":"2021-10-26"},{"lineNumber":79,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":80,"author":{"gitId":"WaiKit-nus"},"content":"Hence, the sequence of which how Menu Command class and Order Command class are very similar. To prevent repeating of Sequence diagrams, a shared diagram will be listed below for the Menu Command Class and the Order Command class.","lastModifiedDate":"2021-10-26"},{"lineNumber":81,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":82,"author":{"gitId":"WaiKit-nus"},"content":"\u003cbr\u003e![MenuAndOrdersSequenceDiagram](https://raw.githubusercontent.com/AY2122S1-CS2113-T13-2/tp/master/UMLdiagrams/MenuAndOrdersSequenceDiagram/MenuAndOrdersSequenceDiagram.jpg)","lastModifiedDate":"2021-10-26"},{"lineNumber":83,"author":{"gitId":"WaiKit-nus"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2021-10-26"},{"lineNumber":84,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":85,"author":{"gitId":"WaiKit-nus"},"content":":information_source: **Note:** The diagram is shared between Menu Command Class and Orders Command Class.","lastModifiedDate":"2021-10-26"},{"lineNumber":86,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":87,"author":{"gitId":"WaiKit-nus"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-10-26"},{"lineNumber":88,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":89,"author":{"gitId":"WaiKit-nus"},"content":"The steps to using the `menu` and `list` command can be seen from the sequence diagram. In short: ","lastModifiedDate":"2021-10-26"},{"lineNumber":90,"author":{"gitId":"WaiKit-nus"},"content":"1) Invoke the Menu Command class by calling `menu`. The menu will display in the terminal.","lastModifiedDate":"2021-10-26"},{"lineNumber":91,"author":{"gitId":"WaiKit-nus"},"content":"   \u003cbr\u003e![MenuCommandTerminalOutput](https://raw.githubusercontent.com/AY2122S1-CS2113-T13-2/tp/master/UMLdiagrams/MenuAndOrdersSequenceDiagram/MenuCommandTerminalOutput.jpg)","lastModifiedDate":"2021-10-26"},{"lineNumber":92,"author":{"gitId":"WaiKit-nus"},"content":"   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2021-10-26"},{"lineNumber":93,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":94,"author":{"gitId":"WaiKit-nus"},"content":":information_source: **Note:** The output is an example of what you will see when the `menu` command is entered.","lastModifiedDate":"2021-10-26"},{"lineNumber":95,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":96,"author":{"gitId":"WaiKit-nus"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-10-26"},{"lineNumber":97,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":98,"author":{"gitId":"WaiKit-nus"},"content":"2) After adding orders, invoke `list` command to see the orders added into the list.","lastModifiedDate":"2021-10-26"},{"lineNumber":99,"author":{"gitId":"WaiKit-nus"},"content":"   \u003cbr\u003e![ListCommandTerminalOutput](https://raw.githubusercontent.com/AY2122S1-CS2113-T13-2/tp/master/UMLdiagrams/MenuAndOrdersSequenceDiagram/ListCommandTerminalOutput.jpg)","lastModifiedDate":"2021-10-26"},{"lineNumber":100,"author":{"gitId":"WaiKit-nus"},"content":"   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2021-10-26"},{"lineNumber":101,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":102,"author":{"gitId":"WaiKit-nus"},"content":":information_source: **Note:** The output is an example of what you will see when the `list` command is entered.","lastModifiedDate":"2021-10-26"},{"lineNumber":103,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":104,"author":{"gitId":"WaiKit-nus"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-10-26"},{"lineNumber":105,"author":{"gitId":"WaiKit-nus"},"content":"**Note:** The command `menu` and `list` are just these two strings. Any edits to these two commands will result in an exception being thrown.","lastModifiedDate":"2021-10-26"},{"lineNumber":106,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":107,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":108,"author":{"gitId":"WaiKit-nus"},"content":"### Value proposition","lastModifiedDate":"2021-10-19"},{"lineNumber":109,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":110,"author":{"gitId":"WaiKit-nus"},"content":"{Describe the value proposition: what problem does it solve?}","lastModifiedDate":"2021-10-19"},{"lineNumber":111,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":112,"author":{"gitId":"WaiKit-nus"},"content":"## User Stories","lastModifiedDate":"2021-10-19"},{"lineNumber":113,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":114,"author":{"gitId":"WaiKit-nus"},"content":"|Version| As a ... | I want to ... | So that I can ...|","lastModifiedDate":"2021-10-19"},{"lineNumber":115,"author":{"gitId":"WaiKit-nus"},"content":"|--------|----------|---------------|------------------|","lastModifiedDate":"2021-10-19"},{"lineNumber":116,"author":{"gitId":"WaiKit-nus"},"content":"|v1.0|new user|see usage instructions|refer to them when I forget how to use the application|","lastModifiedDate":"2021-10-19"},{"lineNumber":117,"author":{"gitId":"WaiKit-nus"},"content":"|v2.0|user|find a to-do item by name|locate a to-do without having to go through the entire list|","lastModifiedDate":"2021-10-19"},{"lineNumber":118,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":119,"author":{"gitId":"WaiKit-nus"},"content":"## Non-Functional Requirements","lastModifiedDate":"2021-10-19"},{"lineNumber":120,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":121,"author":{"gitId":"WaiKit-nus"},"content":"{Give non-functional requirements}","lastModifiedDate":"2021-10-19"},{"lineNumber":122,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":123,"author":{"gitId":"WaiKit-nus"},"content":"## Glossary","lastModifiedDate":"2021-10-19"},{"lineNumber":124,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":125,"author":{"gitId":"WaiKit-nus"},"content":"* *glossary item* - Definition","lastModifiedDate":"2021-10-19"},{"lineNumber":126,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":127,"author":{"gitId":"WaiKit-nus"},"content":"## Instructions for manual testing","lastModifiedDate":"2021-10-19"},{"lineNumber":128,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":129,"author":{"gitId":"WaiKit-nus"},"content":"{Give instructions on how to do a manual product testing e.g., how to load sample data to be used for testing}","lastModifiedDate":"2021-10-19"}],"authorContributionMap":{"WaiKit-nus":129}},{"path":"docs/YZDeveloperGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"thaddyyz"},"content":"# Developer Guide","lastModifiedDate":"2021-10-17"},{"lineNumber":2,"author":{"gitId":"thaddyyz"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":3,"author":{"gitId":"thaddyyz"},"content":"## Acknowledgements","lastModifiedDate":"2021-10-17"},{"lineNumber":4,"author":{"gitId":"thaddyyz"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":5,"author":{"gitId":"thaddyyz"},"content":"## Design","lastModifiedDate":"2021-10-26"},{"lineNumber":6,"author":{"gitId":"thaddyyz"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":7,"author":{"gitId":"thaddyyz"},"content":"### Implementation","lastModifiedDate":"2021-10-26"},{"lineNumber":8,"author":{"gitId":"thaddyyz"},"content":"The Sequence Diagram below represents the interactions between components when user inputs command `add /n tom /i 1 /q 2`","lastModifiedDate":"2021-10-26"},{"lineNumber":9,"author":{"gitId":"thaddyyz"},"content":"\u003cbr\u003e![Sequence Diagram](https://raw.githubusercontent.com/thaddyyz/tp/master/UMLdiagrams/EditCommandDiagrams/AddCommandSeqDiagram.png)","lastModifiedDate":"2021-10-26"},{"lineNumber":10,"author":{"gitId":"thaddyyz"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":11,"author":{"gitId":"thaddyyz"},"content":"The Sequence Diagram below represents the interactions between components when user inputs command `delete 1/2`","lastModifiedDate":"2021-10-26"},{"lineNumber":12,"author":{"gitId":"thaddyyz"},"content":"\u003cbr\u003e![Sequence Diagram 2](https://raw.githubusercontent.com/thaddyyz/tp/master/UMLdiagrams/EditCommandDiagrams/deleteCommandSeqDiagram.png)","lastModifiedDate":"2021-10-26"},{"lineNumber":13,"author":{"gitId":"thaddyyz"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2021-10-26"},{"lineNumber":14,"author":{"gitId":"thaddyyz"},"content":"This show the interaction between the Logical and Manager components during the add and delete situation.","lastModifiedDate":"2021-10-26"},{"lineNumber":15,"author":{"gitId":"thaddyyz"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-10-26"},{"lineNumber":16,"author":{"gitId":"thaddyyz"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":17,"author":{"gitId":"thaddyyz"},"content":"`Find`command goes through similar sequence as compared to the `delete` command sequence diagram.","lastModifiedDate":"2021-10-26"},{"lineNumber":18,"author":{"gitId":"thaddyyz"},"content":"The main differences are:","lastModifiedDate":"2021-10-26"},{"lineNumber":19,"author":{"gitId":"thaddyyz"},"content":"1. deleteOrder() is replaced with checkIfMatchAndPrint().","lastModifiedDate":"2021-10-26"},{"lineNumber":20,"author":{"gitId":"thaddyyz"},"content":"2. deleteParticularOrder() is replaced with getPersonName().","lastModifiedDate":"2021-10-26"},{"lineNumber":21,"author":{"gitId":"thaddyyz"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":22,"author":{"gitId":"thaddyyz"},"content":"`Edit`command goes through similar sequence as compared to the `delete` command sequence diagram.","lastModifiedDate":"2021-10-26"},{"lineNumber":23,"author":{"gitId":"thaddyyz"},"content":"The main differences are:","lastModifiedDate":"2021-10-26"},{"lineNumber":24,"author":{"gitId":"thaddyyz"},"content":"1. additional getQuantity() method under EditCommand class.","lastModifiedDate":"2021-10-26"},{"lineNumber":25,"author":{"gitId":"thaddyyz"},"content":"2. deleteOrder() is replaced with editOrder().","lastModifiedDate":"2021-10-26"},{"lineNumber":26,"author":{"gitId":"thaddyyz"},"content":"3. editParticularOrder() is called directly from the EditCommand class instead of through a method in Person class.","lastModifiedDate":"2021-10-26"},{"lineNumber":27,"author":{"gitId":"thaddyyz"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":28,"author":{"gitId":"thaddyyz"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":29,"author":{"gitId":"thaddyyz"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":30,"author":{"gitId":"thaddyyz"},"content":"#### Alternate implementation","lastModifiedDate":"2021-10-26"},{"lineNumber":31,"author":{"gitId":"thaddyyz"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":32,"author":{"gitId":"thaddyyz"},"content":"The EditCommand function can be integrated with the deleteCommand class.","lastModifiedDate":"2021-10-26"},{"lineNumber":33,"author":{"gitId":"thaddyyz"},"content":"```","lastModifiedDate":"2021-10-26"},{"lineNumber":34,"author":{"gitId":"thaddyyz"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":35,"author":{"gitId":"thaddyyz"},"content":"```","lastModifiedDate":"2021-10-26"},{"lineNumber":36,"author":{"gitId":"thaddyyz"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":37,"author":{"gitId":"thaddyyz"},"content":"The upside of doing would be that there is less code overall.","lastModifiedDate":"2021-10-26"},{"lineNumber":38,"author":{"gitId":"thaddyyz"},"content":"However, doing so would result in multiple functions being in the same class which would:","lastModifiedDate":"2021-10-26"},{"lineNumber":39,"author":{"gitId":"thaddyyz"},"content":"1. Make the code messier.","lastModifiedDate":"2021-10-26"},{"lineNumber":40,"author":{"gitId":"thaddyyz"},"content":"2. Make the code more vulnerable to functionality bugs.","lastModifiedDate":"2021-10-26"},{"lineNumber":41,"author":{"gitId":"thaddyyz"},"content":"3. Make the code more complex to debug.","lastModifiedDate":"2021-10-26"},{"lineNumber":42,"author":{"gitId":"thaddyyz"},"content":"4. Make testing process more complicated.","lastModifiedDate":"2021-10-26"},{"lineNumber":43,"author":{"gitId":"thaddyyz"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":44,"author":{"gitId":"thaddyyz"},"content":"### Edit Command","lastModifiedDate":"2021-10-21"},{"lineNumber":45,"author":{"gitId":"thaddyyz"},"content":"The purpose of the edit is allow the user to edit his order quantity.","lastModifiedDate":"2021-10-21"},{"lineNumber":46,"author":{"gitId":"thaddyyz"},"content":"The class diagram below is a brief overview of how the EditCommand class is related to other classes.","lastModifiedDate":"2021-10-21"},{"lineNumber":47,"author":{"gitId":"thaddyyz"},"content":"\u003cbr\u003e![Class Diagram](https://raw.githubusercontent.com/thaddyyz/tp/master/UMLdiagrams/EditCommandDiagrams/editCommandClassDiagram.jpg)","lastModifiedDate":"2021-10-21"},{"lineNumber":48,"author":{"gitId":"thaddyyz"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":49,"author":{"gitId":"thaddyyz"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":50,"author":{"gitId":"thaddyyz"},"content":":information_source: **Note:** Details of each specific command class \u0026 Duke have been omitted from this diagram.","lastModifiedDate":"2021-10-21"},{"lineNumber":51,"author":{"gitId":"thaddyyz"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":52,"author":{"gitId":"thaddyyz"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":53,"author":{"gitId":"thaddyyz"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":54,"author":{"gitId":"thaddyyz"},"content":"Below is a step by step example on how the parser is used when a user keys in an input.","lastModifiedDate":"2021-10-21"},{"lineNumber":55,"author":{"gitId":"thaddyyz"},"content":"Assuming the input is not going to be **null** or **blank**,","lastModifiedDate":"2021-10-21"},{"lineNumber":56,"author":{"gitId":"thaddyyz"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":57,"author":{"gitId":"thaddyyz"},"content":"Step 1)\u003cbr\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":58,"author":{"gitId":"thaddyyz"},"content":"Lets assume the input passed in is `delete 1/2`. The method `getCommand()` would then split the user\u0027s","lastModifiedDate":"2021-10-21"},{"lineNumber":59,"author":{"gitId":"thaddyyz"},"content":"input into an array of strings along the spaces and store them in the array `listOfInputs`. After which,","lastModifiedDate":"2021-10-21"},{"lineNumber":60,"author":{"gitId":"thaddyyz"},"content":"it will get the user\u0027s command from the 0th array element and store it in another variable called `commandInString`.","lastModifiedDate":"2021-10-21"},{"lineNumber":61,"author":{"gitId":"thaddyyz"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":62,"author":{"gitId":"thaddyyz"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":63,"author":{"gitId":"thaddyyz"},"content":"#### Alternate implementation","lastModifiedDate":"2021-10-21"},{"lineNumber":64,"author":{"gitId":"thaddyyz"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":65,"author":{"gitId":"thaddyyz"},"content":"The EditCommand function can be integrated with the deleteCommand class.","lastModifiedDate":"2021-10-21"},{"lineNumber":66,"author":{"gitId":"thaddyyz"},"content":"```","lastModifiedDate":"2021-10-21"},{"lineNumber":67,"author":{"gitId":"thaddyyz"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":68,"author":{"gitId":"thaddyyz"},"content":"```","lastModifiedDate":"2021-10-21"},{"lineNumber":69,"author":{"gitId":"thaddyyz"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":70,"author":{"gitId":"thaddyyz"},"content":"The upside of doing would be that there is less code overall.","lastModifiedDate":"2021-10-21"},{"lineNumber":71,"author":{"gitId":"thaddyyz"},"content":"However, doing so would result in multiple functions being in the same class which would:","lastModifiedDate":"2021-10-21"},{"lineNumber":72,"author":{"gitId":"thaddyyz"},"content":"1. Make the code messier.","lastModifiedDate":"2021-10-21"},{"lineNumber":73,"author":{"gitId":"thaddyyz"},"content":"2. Make the code more vulnerable to functionality bugs.","lastModifiedDate":"2021-10-21"},{"lineNumber":74,"author":{"gitId":"thaddyyz"},"content":"3. Make the code more complex to debug.","lastModifiedDate":"2021-10-21"},{"lineNumber":75,"author":{"gitId":"thaddyyz"},"content":"4. Make testing process more complicated.","lastModifiedDate":"2021-10-21"},{"lineNumber":76,"author":{"gitId":"thaddyyz"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":77,"author":{"gitId":"thaddyyz"},"content":"## Product scope","lastModifiedDate":"2021-10-17"},{"lineNumber":78,"author":{"gitId":"thaddyyz"},"content":"### Target user profile","lastModifiedDate":"2021-10-17"},{"lineNumber":79,"author":{"gitId":"thaddyyz"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":80,"author":{"gitId":"thaddyyz"},"content":"### Value proposition","lastModifiedDate":"2021-10-17"},{"lineNumber":81,"author":{"gitId":"thaddyyz"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":82,"author":{"gitId":"thaddyyz"},"content":"## User Stories","lastModifiedDate":"2021-10-17"},{"lineNumber":83,"author":{"gitId":"thaddyyz"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":84,"author":{"gitId":"thaddyyz"},"content":"|Version| As a ... | I want to ... | So that I can ...|","lastModifiedDate":"2021-10-17"},{"lineNumber":85,"author":{"gitId":"thaddyyz"},"content":"|--------|----------|---------------|------------------|","lastModifiedDate":"2021-10-17"},{"lineNumber":86,"author":{"gitId":"thaddyyz"},"content":"|v1.0|new user|see usage instructions|refer to them when I forget how to use the application|","lastModifiedDate":"2021-10-17"},{"lineNumber":87,"author":{"gitId":"thaddyyz"},"content":"|v2.0|user|find a to-do item by name|locate a to-do without having to go through the entire list|","lastModifiedDate":"2021-10-17"},{"lineNumber":88,"author":{"gitId":"thaddyyz"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":89,"author":{"gitId":"thaddyyz"},"content":"## Non-Functional Requirements","lastModifiedDate":"2021-10-17"},{"lineNumber":90,"author":{"gitId":"thaddyyz"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":91,"author":{"gitId":"thaddyyz"},"content":"{Give non-functional requirements}","lastModifiedDate":"2021-10-17"},{"lineNumber":92,"author":{"gitId":"thaddyyz"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":93,"author":{"gitId":"thaddyyz"},"content":"## Glossary","lastModifiedDate":"2021-10-17"},{"lineNumber":94,"author":{"gitId":"thaddyyz"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":95,"author":{"gitId":"thaddyyz"},"content":"* *glossary item* - Definition","lastModifiedDate":"2021-10-17"},{"lineNumber":96,"author":{"gitId":"thaddyyz"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":97,"author":{"gitId":"thaddyyz"},"content":"## Instructions for manual testing","lastModifiedDate":"2021-10-17"},{"lineNumber":98,"author":{"gitId":"thaddyyz"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":99,"author":{"gitId":"thaddyyz"},"content":"{Give instructions on how to do a manual product testing e.g., how to load sample data to be used for testing}","lastModifiedDate":"2021-10-17"}],"authorContributionMap":{"thaddyyz":99}},{"path":"docs/settingUp.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"andrewtkh1"},"content":"# Setting up and getting started","lastModifiedDate":"2021-10-19"},{"lineNumber":2,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":3,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":4,"author":{"gitId":"andrewtkh1"},"content":"* [Setting up the project](#setting-up-the-project)","lastModifiedDate":"2021-10-19"},{"lineNumber":5,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":6,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":7,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":8,"author":{"gitId":"andrewtkh1"},"content":"## Setting up the project","lastModifiedDate":"2021-10-19"},{"lineNumber":9,"author":{"gitId":"andrewtkh1"},"content":":exclamation: **Important:** Follow these steps carefully prior to amending or running any test.","lastModifiedDate":"2021-10-19"},{"lineNumber":10,"author":{"gitId":"andrewtkh1"},"content":"The code might not work as intended if you omit certain steps along the way.\u003cbr\u003e","lastModifiedDate":"2021-10-19"},{"lineNumber":11,"author":{"gitId":"andrewtkh1"},"content":"```","lastModifiedDate":"2021-10-19"},{"lineNumber":12,"author":{"gitId":"andrewtkh1"},"content":"It is strongly recommended to use an IDE that supports Gradle. (e.g, Intellij IDEA)","lastModifiedDate":"2021-10-19"},{"lineNumber":13,"author":{"gitId":"andrewtkh1"},"content":"```","lastModifiedDate":"2021-10-19"},{"lineNumber":14,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":15,"author":{"gitId":"andrewtkh1"},"content":"1) Fork the entire repo from GitHub \u0026 clone it to your own machine.","lastModifiedDate":"2021-10-19"},{"lineNumber":16,"author":{"gitId":"andrewtkh1"},"content":"2) Configure your IDE to operate with **JDK 11**.","lastModifiedDate":"2021-10-19"},{"lineNumber":17,"author":{"gitId":"andrewtkh1"},"content":"3) Import the project as a **Gradle** project. ","lastModifiedDate":"2021-10-19"},{"lineNumber":18,"author":{"gitId":"andrewtkh1"},"content":"    - :exclamation: Not doing so might cause certain tests/files to fail.","lastModifiedDate":"2021-10-19"},{"lineNumber":19,"author":{"gitId":"andrewtkh1"},"content":"4) Run the **main** function in `Duke.java` or run using Gradle to test some of the commands and ensure","lastModifiedDate":"2021-10-19"},{"lineNumber":20,"author":{"gitId":"andrewtkh1"},"content":"that the code works as intended.","lastModifiedDate":"2021-10-19"}],"authorContributionMap":{"andrewtkh1":20}},{"path":"src/main/java/seedu/duke/Duke.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.duke;","lastModifiedDate":"2020-05-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":3,"author":{"gitId":"andrewtkh1"},"content":"import seedu.duke.command.ByeCommand;","lastModifiedDate":"2021-10-12"},{"lineNumber":4,"author":{"gitId":"andrewtkh1"},"content":"import seedu.duke.command.Command;","lastModifiedDate":"2021-10-12"},{"lineNumber":5,"author":{"gitId":"andrewtkh1"},"content":"import seedu.duke.exceptions.LotsException;","lastModifiedDate":"2021-10-12"},{"lineNumber":6,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":7,"author":{"gitId":"andrewtkh1"},"content":"import java.util.logging.Level;","lastModifiedDate":"2021-10-12"},{"lineNumber":8,"author":{"gitId":"andrewtkh1"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-10-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"     * Main entry-point for the java.duke.Duke application.","lastModifiedDate":"2020-05-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-24"},{"lineNumber":14,"author":{"gitId":"andrewtkh1"},"content":"    public static Logger log \u003d Logger.getLogger(\"LOTS\");","lastModifiedDate":"2021-10-11"},{"lineNumber":15,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2019-07-29"},{"lineNumber":17,"author":{"gitId":"andrewtkh1"},"content":"        Ui.printWelcome();","lastModifiedDate":"2021-10-08"},{"lineNumber":18,"author":{"gitId":"andrewtkh1"},"content":"        runDuke();","lastModifiedDate":"2021-10-11"},{"lineNumber":19,"author":{"gitId":"andrewtkh1"},"content":"        Ui.printGoodbye();","lastModifiedDate":"2021-10-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":22,"author":{"gitId":"andrewtkh1"},"content":"    /**","lastModifiedDate":"2021-10-12"},{"lineNumber":23,"author":{"gitId":"andrewtkh1"},"content":"     * The main function that duke runs on.","lastModifiedDate":"2021-10-12"},{"lineNumber":24,"author":{"gitId":"andrewtkh1"},"content":"     */","lastModifiedDate":"2021-10-12"},{"lineNumber":25,"author":{"gitId":"andrewtkh1"},"content":"    private static void runDuke() {","lastModifiedDate":"2021-10-11"},{"lineNumber":26,"author":{"gitId":"andrewtkh1"},"content":"        Command currentCommand;","lastModifiedDate":"2021-10-11"},{"lineNumber":27,"author":{"gitId":"andrewtkh1"},"content":"        PeopleManager manager \u003d new PeopleManager();","lastModifiedDate":"2021-10-11"},{"lineNumber":28,"author":{"gitId":"andrewtkh1"},"content":"        boolean isEnd \u003d false;","lastModifiedDate":"2021-10-11"},{"lineNumber":29,"author":{"gitId":"andrewtkh1"},"content":"        while (!isEnd) {","lastModifiedDate":"2021-10-11"},{"lineNumber":30,"author":{"gitId":"andrewtkh1"},"content":"            try {","lastModifiedDate":"2021-10-11"},{"lineNumber":31,"author":{"gitId":"andrewtkh1"},"content":"                String userInput \u003d Ui.readInput();","lastModifiedDate":"2021-10-11"},{"lineNumber":32,"author":{"gitId":"andrewtkh1"},"content":"                currentCommand \u003d Parser.getCommand(userInput);","lastModifiedDate":"2021-10-11"},{"lineNumber":33,"author":{"gitId":"andrewtkh1"},"content":"                assert currentCommand !\u003d null : \"Command returned cannot be null!\";","lastModifiedDate":"2021-10-12"},{"lineNumber":34,"author":{"gitId":"andrewtkh1"},"content":"                currentCommand.setData(manager);","lastModifiedDate":"2021-10-11"},{"lineNumber":35,"author":{"gitId":"andrewtkh1"},"content":"                currentCommand.execute();","lastModifiedDate":"2021-10-11"},{"lineNumber":36,"author":{"gitId":"andrewtkh1"},"content":"                if (currentCommand instanceof ByeCommand) {","lastModifiedDate":"2021-10-11"},{"lineNumber":37,"author":{"gitId":"andrewtkh1"},"content":"                    isEnd \u003d true;","lastModifiedDate":"2021-10-11"},{"lineNumber":38,"author":{"gitId":"andrewtkh1"},"content":"                }","lastModifiedDate":"2021-10-11"},{"lineNumber":39,"author":{"gitId":"andrewtkh1"},"content":"            } catch (LotsException e) {","lastModifiedDate":"2021-10-11"},{"lineNumber":40,"author":{"gitId":"andrewtkh1"},"content":"                Ui.printWithBorder(e.getMessage());","lastModifiedDate":"2021-10-11"},{"lineNumber":41,"author":{"gitId":"andrewtkh1"},"content":"            } catch (Exception x) {","lastModifiedDate":"2021-10-11"},{"lineNumber":42,"author":{"gitId":"andrewtkh1"},"content":"                Ui.printWithBorder(\"Oops! Unknown error. Please try again.\");","lastModifiedDate":"2021-10-11"},{"lineNumber":43,"author":{"gitId":"andrewtkh1"},"content":"                log.log(Level.SEVERE, x.getMessage());","lastModifiedDate":"2021-10-12"},{"lineNumber":44,"author":{"gitId":"andrewtkh1"},"content":"                //x.printStackTrace();","lastModifiedDate":"2021-10-12"},{"lineNumber":45,"author":{"gitId":"andrewtkh1"},"content":"            }","lastModifiedDate":"2021-10-11"},{"lineNumber":46,"author":{"gitId":"andrewtkh1"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":48,"author":{"gitId":"thaddyyz"},"content":"}","lastModifiedDate":"2021-10-04"}],"authorContributionMap":{"andrewtkh1":36,"thaddyyz":1,"-":11}},{"path":"src/main/java/seedu/duke/Menu.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"thaddyyz"},"content":"package seedu.duke;","lastModifiedDate":"2021-09-30"},{"lineNumber":2,"author":{"gitId":"thaddyyz"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":3,"author":{"gitId":"andrewtkh1"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-10"},{"lineNumber":4,"author":{"gitId":"andrewtkh1"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-10-10"},{"lineNumber":5,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":6,"author":{"gitId":"andrewtkh1"},"content":"public class Menu {","lastModifiedDate":"2021-10-10"},{"lineNumber":7,"author":{"gitId":"thaddyyz"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":8,"author":{"gitId":"andrewtkh1"},"content":"    private static String[] FOODS \u003d {\"Ban Mian\", \"Chicken Rice\", \"Fried Prawn Noodles (Hokkien Mee)\",","lastModifiedDate":"2021-10-10"},{"lineNumber":9,"author":{"gitId":"andrewtkh1"},"content":"                                     \"Minced MeatNoodles(Ba Chor Mee)\", \"Fried Carrot Cake\",","lastModifiedDate":"2021-10-10"},{"lineNumber":10,"author":{"gitId":"andrewtkh1"},"content":"                                     \"Fried Kway Teow (Char Kway Teow)\",","lastModifiedDate":"2021-10-10"},{"lineNumber":11,"author":{"gitId":"thaddyyz"},"content":"                                     \"Pork Rib Soup (Bak Kut Teh)\", \"Nasi Lemak\"};","lastModifiedDate":"2021-09-30"},{"lineNumber":12,"author":{"gitId":"andrewtkh1"},"content":"    private static final Double[] PRICES \u003d {3.0, 3.0, 3.5, 3.0, 3.0, 3.0, 5.0, 3.6};","lastModifiedDate":"2021-10-10"},{"lineNumber":13,"author":{"gitId":"thaddyyz"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":14,"author":{"gitId":"andrewtkh1"},"content":"    public static final int TOTAL_MENU_ITEMS \u003d PRICES.length;","lastModifiedDate":"2021-10-10"},{"lineNumber":15,"author":{"gitId":"andrewtkh1"},"content":"    public static final ArrayList\u003cString\u003e FOODLIST \u003d new ArrayList\u003c\u003e(Arrays.asList(FOODS));","lastModifiedDate":"2021-10-10"},{"lineNumber":16,"author":{"gitId":"andrewtkh1"},"content":"    public static final ArrayList\u003cDouble\u003e PRICELIST \u003d new ArrayList\u003c\u003e(Arrays.asList(PRICES));","lastModifiedDate":"2021-10-10"},{"lineNumber":17,"author":{"gitId":"thaddyyz"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":18,"author":{"gitId":"thaddyyz"},"content":"}","lastModifiedDate":"2021-09-30"}],"authorContributionMap":{"andrewtkh1":10,"thaddyyz":7,"WaiKit-nus":1}},{"path":"src/main/java/seedu/duke/Order.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"markuslyq"},"content":"package seedu.duke;","lastModifiedDate":"2021-10-17"},{"lineNumber":2,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":3,"author":{"gitId":"markuslyq"},"content":"import seedu.duke.exceptions.LotsException;","lastModifiedDate":"2021-10-24"},{"lineNumber":4,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":5,"author":{"gitId":"markuslyq"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-17"},{"lineNumber":6,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":7,"author":{"gitId":"markuslyq"},"content":"public class Order {","lastModifiedDate":"2021-10-17"},{"lineNumber":8,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":9,"author":{"gitId":"markuslyq"},"content":"    private String foodName;","lastModifiedDate":"2021-10-17"},{"lineNumber":10,"author":{"gitId":"markuslyq"},"content":"    private int foodIndex;","lastModifiedDate":"2021-10-17"},{"lineNumber":11,"author":{"gitId":"markuslyq"},"content":"    private int quantity;","lastModifiedDate":"2021-10-17"},{"lineNumber":12,"author":{"gitId":"markuslyq"},"content":"    private double costOfOrder;","lastModifiedDate":"2021-10-17"},{"lineNumber":13,"author":{"gitId":"markuslyq"},"content":"    private static ArrayList\u003cString\u003e menuList \u003d Menu.FOODLIST;","lastModifiedDate":"2021-10-17"},{"lineNumber":14,"author":{"gitId":"markuslyq"},"content":"    private static ArrayList\u003cDouble\u003e priceList \u003d Menu.PRICELIST;","lastModifiedDate":"2021-10-17"},{"lineNumber":15,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":16,"author":{"gitId":"markuslyq"},"content":"    //@@author markuslyq","lastModifiedDate":"2021-10-25"},{"lineNumber":17,"author":{"gitId":"markuslyq"},"content":"    /**","lastModifiedDate":"2021-10-22"},{"lineNumber":18,"author":{"gitId":"markuslyq"},"content":"     * Constructor for Order.","lastModifiedDate":"2021-10-22"},{"lineNumber":19,"author":{"gitId":"markuslyq"},"content":"     *","lastModifiedDate":"2021-10-22"},{"lineNumber":20,"author":{"gitId":"markuslyq"},"content":"     * @param foodIndex Index of food to be added to the order.","lastModifiedDate":"2021-10-22"},{"lineNumber":21,"author":{"gitId":"markuslyq"},"content":"     * @param quantity Quantity of food items to be added to the order.","lastModifiedDate":"2021-10-22"},{"lineNumber":22,"author":{"gitId":"markuslyq"},"content":"     * @throws LotsException if the quantity for this particular food exceeds 999.","lastModifiedDate":"2021-10-24"},{"lineNumber":23,"author":{"gitId":"markuslyq"},"content":"     */","lastModifiedDate":"2021-10-22"},{"lineNumber":24,"author":{"gitId":"markuslyq"},"content":"    public Order(int foodIndex, int quantity) throws LotsException {","lastModifiedDate":"2021-10-24"},{"lineNumber":25,"author":{"gitId":"markuslyq"},"content":"        this.foodIndex \u003d foodIndex;","lastModifiedDate":"2021-10-17"},{"lineNumber":26,"author":{"gitId":"markuslyq"},"content":"        this.foodName \u003d menuList.get(foodIndex);","lastModifiedDate":"2021-10-17"},{"lineNumber":27,"author":{"gitId":"markuslyq"},"content":"        this.quantity \u003d quantity;","lastModifiedDate":"2021-10-17"},{"lineNumber":28,"author":{"gitId":"markuslyq"},"content":"        this.costOfOrder \u003d quantity * priceList.get(foodIndex);","lastModifiedDate":"2021-10-17"},{"lineNumber":29,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":30,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":31,"author":{"gitId":"markuslyq"},"content":"    /**","lastModifiedDate":"2021-10-22"},{"lineNumber":32,"author":{"gitId":"markuslyq"},"content":"     * Function to update quantity of a particular order to a specified value.","lastModifiedDate":"2021-10-22"},{"lineNumber":33,"author":{"gitId":"markuslyq"},"content":"     * @param quantityToSet Quantity of food items to be set.","lastModifiedDate":"2021-10-22"},{"lineNumber":34,"author":{"gitId":"markuslyq"},"content":"     */","lastModifiedDate":"2021-10-22"},{"lineNumber":35,"author":{"gitId":"markuslyq"},"content":"    public void setQuantity(int quantityToSet) {","lastModifiedDate":"2021-10-25"},{"lineNumber":36,"author":{"gitId":"markuslyq"},"content":"        this.quantity \u003d quantityToSet;","lastModifiedDate":"2021-10-17"},{"lineNumber":37,"author":{"gitId":"markuslyq"},"content":"        this.costOfOrder \u003d quantityToSet * priceList.get(foodIndex);","lastModifiedDate":"2021-10-17"},{"lineNumber":38,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":39,"author":{"gitId":"markuslyq"},"content":"    //@@author","lastModifiedDate":"2021-10-25"},{"lineNumber":40,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":41,"author":{"gitId":"mohamad-adam8991"},"content":"    /**","lastModifiedDate":"2021-10-22"},{"lineNumber":42,"author":{"gitId":"mohamad-adam8991"},"content":"     * Function to get quantity of a particular order.","lastModifiedDate":"2021-10-22"},{"lineNumber":43,"author":{"gitId":"mohamad-adam8991"},"content":"     *","lastModifiedDate":"2021-10-22"},{"lineNumber":44,"author":{"gitId":"mohamad-adam8991"},"content":"     * @return Returns the quantity of a particular order.","lastModifiedDate":"2021-10-22"},{"lineNumber":45,"author":{"gitId":"mohamad-adam8991"},"content":"     */","lastModifiedDate":"2021-10-22"},{"lineNumber":46,"author":{"gitId":"markuslyq"},"content":"    public int getQuantity() {","lastModifiedDate":"2021-10-17"},{"lineNumber":47,"author":{"gitId":"markuslyq"},"content":"        return quantity;","lastModifiedDate":"2021-10-17"},{"lineNumber":48,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":49,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":50,"author":{"gitId":"mohamad-adam8991"},"content":"    /**","lastModifiedDate":"2021-10-22"},{"lineNumber":51,"author":{"gitId":"mohamad-adam8991"},"content":"     * Function to get total cost of a particular order.","lastModifiedDate":"2021-10-22"},{"lineNumber":52,"author":{"gitId":"mohamad-adam8991"},"content":"     *","lastModifiedDate":"2021-10-22"},{"lineNumber":53,"author":{"gitId":"mohamad-adam8991"},"content":"     * @return Returns the total cost of a particular order.","lastModifiedDate":"2021-10-22"},{"lineNumber":54,"author":{"gitId":"mohamad-adam8991"},"content":"     */","lastModifiedDate":"2021-10-22"},{"lineNumber":55,"author":{"gitId":"markuslyq"},"content":"    public double getCost() {","lastModifiedDate":"2021-10-17"},{"lineNumber":56,"author":{"gitId":"markuslyq"},"content":"        return costOfOrder;","lastModifiedDate":"2021-10-17"},{"lineNumber":57,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":58,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":59,"author":{"gitId":"mohamad-adam8991"},"content":"    /**","lastModifiedDate":"2021-10-22"},{"lineNumber":60,"author":{"gitId":"mohamad-adam8991"},"content":"     * Function to represent the order data in a String format.","lastModifiedDate":"2021-10-22"},{"lineNumber":61,"author":{"gitId":"mohamad-adam8991"},"content":"     *","lastModifiedDate":"2021-10-22"},{"lineNumber":62,"author":{"gitId":"mohamad-adam8991"},"content":"     * @return Returns the data of a particular order as a String.","lastModifiedDate":"2021-10-22"},{"lineNumber":63,"author":{"gitId":"mohamad-adam8991"},"content":"     */","lastModifiedDate":"2021-10-22"},{"lineNumber":64,"author":{"gitId":"markuslyq"},"content":"    public String toString() {","lastModifiedDate":"2021-10-17"},{"lineNumber":65,"author":{"gitId":"markuslyq"},"content":"        return foodName + \" | Quantity \u003d \" + quantity + \" | Cost \u003d $\" + String.format(\"%.2f\", costOfOrder);","lastModifiedDate":"2021-10-17"},{"lineNumber":66,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":67,"author":{"gitId":"markuslyq"},"content":"}","lastModifiedDate":"2021-10-17"}],"authorContributionMap":{"markuslyq":52,"mohamad-adam8991":15}},{"path":"src/main/java/seedu/duke/Parser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"andrewtkh1"},"content":"package seedu.duke;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":3,"author":{"gitId":"andrewtkh1"},"content":"import seedu.duke.command.AddCommand;","lastModifiedDate":"2021-10-12"},{"lineNumber":4,"author":{"gitId":"andrewtkh1"},"content":"import seedu.duke.command.ByeCommand;","lastModifiedDate":"2021-10-12"},{"lineNumber":5,"author":{"gitId":"andrewtkh1"},"content":"import seedu.duke.command.Command;","lastModifiedDate":"2021-10-12"},{"lineNumber":6,"author":{"gitId":"andrewtkh1"},"content":"import seedu.duke.command.DeleteCommand;","lastModifiedDate":"2021-10-12"},{"lineNumber":7,"author":{"gitId":"andrewtkh1"},"content":"import seedu.duke.command.FindCommand;","lastModifiedDate":"2021-10-18"},{"lineNumber":8,"author":{"gitId":"andrewtkh1"},"content":"import seedu.duke.command.MenuCommand;","lastModifiedDate":"2021-10-12"},{"lineNumber":9,"author":{"gitId":"andrewtkh1"},"content":"import seedu.duke.command.OrdersCommand;","lastModifiedDate":"2021-10-12"},{"lineNumber":10,"author":{"gitId":"andrewtkh1"},"content":"import seedu.duke.command.UnknownCommand;","lastModifiedDate":"2021-10-12"},{"lineNumber":11,"author":{"gitId":"thaddyyz"},"content":"import seedu.duke.command.EditCommand;","lastModifiedDate":"2021-10-16"},{"lineNumber":12,"author":{"gitId":"andrewtkh1"},"content":"import seedu.duke.exceptions.LotsException;","lastModifiedDate":"2021-10-12"},{"lineNumber":13,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":14,"author":{"gitId":"andrewtkh1"},"content":"public class Parser {","lastModifiedDate":"2021-10-04"},{"lineNumber":15,"author":{"gitId":"andrewtkh1"},"content":"    /**","lastModifiedDate":"2021-10-04"},{"lineNumber":16,"author":{"gitId":"andrewtkh1"},"content":"     * Returns a Command object based on the user\u0027s input","lastModifiedDate":"2021-10-05"},{"lineNumber":17,"author":{"gitId":"andrewtkh1"},"content":"     * string, else unknown command Type.","lastModifiedDate":"2021-10-05"},{"lineNumber":18,"author":{"gitId":"andrewtkh1"},"content":"     *","lastModifiedDate":"2021-10-04"},{"lineNumber":19,"author":{"gitId":"andrewtkh1"},"content":"     * @param input The user\u0027s input in String.","lastModifiedDate":"2021-10-04"},{"lineNumber":20,"author":{"gitId":"andrewtkh1"},"content":"     * @return The respective Command type.","lastModifiedDate":"2021-10-05"},{"lineNumber":21,"author":{"gitId":"andrewtkh1"},"content":"     */","lastModifiedDate":"2021-10-04"},{"lineNumber":22,"author":{"gitId":"andrewtkh1"},"content":"    public static Command getCommand(String input) throws LotsException {","lastModifiedDate":"2021-10-11"},{"lineNumber":23,"author":{"gitId":"andrewtkh1"},"content":"        assert input !\u003d null : \"Input to getCommand Cannot be NULL!\";","lastModifiedDate":"2021-10-10"},{"lineNumber":24,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":25,"author":{"gitId":"andrewtkh1"},"content":"        if (input.isBlank() || input.isEmpty()) {","lastModifiedDate":"2021-10-04"},{"lineNumber":26,"author":{"gitId":"andrewtkh1"},"content":"            return new UnknownCommand();","lastModifiedDate":"2021-10-05"},{"lineNumber":27,"author":{"gitId":"andrewtkh1"},"content":"        }","lastModifiedDate":"2021-10-04"},{"lineNumber":28,"author":{"gitId":"andrewtkh1"},"content":"        String[] listOfInputs \u003d input.split(\" \");","lastModifiedDate":"2021-10-04"},{"lineNumber":29,"author":{"gitId":"andrewtkh1"},"content":"        String commandInString \u003d listOfInputs[0].toLowerCase();","lastModifiedDate":"2021-10-05"},{"lineNumber":30,"author":{"gitId":"andrewtkh1"},"content":"        ","lastModifiedDate":"2021-10-05"},{"lineNumber":31,"author":{"gitId":"andrewtkh1"},"content":"        switch (commandInString) {","lastModifiedDate":"2021-10-05"},{"lineNumber":32,"author":{"gitId":"andrewtkh1"},"content":"        case (AddCommand.COMMAND_WORD):","lastModifiedDate":"2021-10-10"},{"lineNumber":33,"author":{"gitId":"andrewtkh1"},"content":"            return new AddCommand(input);","lastModifiedDate":"2021-10-10"},{"lineNumber":34,"author":{"gitId":"markuslyq"},"content":"        case (DeleteCommand.COMMAND_WORD):","lastModifiedDate":"2021-10-08"},{"lineNumber":35,"author":{"gitId":"mohamad-adam8991"},"content":"            return new DeleteCommand(input);","lastModifiedDate":"2021-10-08"},{"lineNumber":36,"author":{"gitId":"thaddyyz"},"content":"        case (EditCommand.COMMAND_WORD):","lastModifiedDate":"2021-10-16"},{"lineNumber":37,"author":{"gitId":"thaddyyz"},"content":"            return new EditCommand(input);","lastModifiedDate":"2021-10-16"},{"lineNumber":38,"author":{"gitId":"mohamad-adam8991"},"content":"        case (OrdersCommand.COMMAND_WORD):","lastModifiedDate":"2021-10-08"},{"lineNumber":39,"author":{"gitId":"mohamad-adam8991"},"content":"            return new OrdersCommand(input);","lastModifiedDate":"2021-10-12"},{"lineNumber":40,"author":{"gitId":"andrewtkh1"},"content":"        case (MenuCommand.COMMAND_WORD):","lastModifiedDate":"2021-10-10"},{"lineNumber":41,"author":{"gitId":"WaiKit-nus"},"content":"            return new MenuCommand(input);","lastModifiedDate":"2021-10-26"},{"lineNumber":42,"author":{"gitId":"andrewtkh1"},"content":"        case (FindCommand.COMMAND_WORD):","lastModifiedDate":"2021-10-18"},{"lineNumber":43,"author":{"gitId":"andrewtkh1"},"content":"            return new FindCommand(input);","lastModifiedDate":"2021-10-18"},{"lineNumber":44,"author":{"gitId":"mohamad-adam8991"},"content":"        case (ByeCommand.COMMAND_WORD):","lastModifiedDate":"2021-10-11"},{"lineNumber":45,"author":{"gitId":"mohamad-adam8991"},"content":"            return new ByeCommand();","lastModifiedDate":"2021-10-11"},{"lineNumber":46,"author":{"gitId":"andrewtkh1"},"content":"        default:","lastModifiedDate":"2021-10-05"},{"lineNumber":47,"author":{"gitId":"andrewtkh1"},"content":"            return new UnknownCommand();","lastModifiedDate":"2021-10-05"},{"lineNumber":48,"author":{"gitId":"andrewtkh1"},"content":"        }","lastModifiedDate":"2021-10-05"},{"lineNumber":49,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-10-04"},{"lineNumber":50,"author":{"gitId":"andrewtkh1"},"content":"}","lastModifiedDate":"2021-10-04"}],"authorContributionMap":{"markuslyq":1,"mohamad-adam8991":5,"andrewtkh1":40,"thaddyyz":3,"WaiKit-nus":1}},{"path":"src/main/java/seedu/duke/PeopleManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"WaiKit-nus"},"content":"package seedu.duke;","lastModifiedDate":"2021-10-06"},{"lineNumber":2,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":3,"author":{"gitId":"andrewtkh1"},"content":"import seedu.duke.exceptions.LotsException;","lastModifiedDate":"2021-10-12"},{"lineNumber":4,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":5,"author":{"gitId":"WaiKit-nus"},"content":"import java.util.LinkedList;","lastModifiedDate":"2021-10-06"},{"lineNumber":6,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":7,"author":{"gitId":"WaiKit-nus"},"content":"public class PeopleManager {","lastModifiedDate":"2021-10-06"},{"lineNumber":8,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":9,"author":{"gitId":"andrewtkh1"},"content":"    private static LinkedList\u003cPerson\u003e listOfPeople \u003d new LinkedList\u003cPerson\u003e();","lastModifiedDate":"2021-10-12"},{"lineNumber":10,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":11,"author":{"gitId":"WaiKit-nus"},"content":"    public PeopleManager() {","lastModifiedDate":"2021-10-06"},{"lineNumber":12,"author":{"gitId":"WaiKit-nus"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":13,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":14,"author":{"gitId":"markuslyq"},"content":"    /**","lastModifiedDate":"2021-10-11"},{"lineNumber":15,"author":{"gitId":"markuslyq"},"content":"     * Returns the person object given its index.","lastModifiedDate":"2021-10-11"},{"lineNumber":16,"author":{"gitId":"markuslyq"},"content":"     *","lastModifiedDate":"2021-10-11"},{"lineNumber":17,"author":{"gitId":"markuslyq"},"content":"     * @param personIndex The index of the person to retrieve.","lastModifiedDate":"2021-10-11"},{"lineNumber":18,"author":{"gitId":"markuslyq"},"content":"     * @return Returns a Person object of a particular index.","lastModifiedDate":"2021-10-11"},{"lineNumber":19,"author":{"gitId":"markuslyq"},"content":"     */","lastModifiedDate":"2021-10-11"},{"lineNumber":20,"author":{"gitId":"markuslyq"},"content":"    public Person getPerson(int personIndex) {","lastModifiedDate":"2021-10-11"},{"lineNumber":21,"author":{"gitId":"markuslyq"},"content":"        return listOfPeople.get(personIndex);","lastModifiedDate":"2021-10-11"},{"lineNumber":22,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":23,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":24,"author":{"gitId":"markuslyq"},"content":"    /**","lastModifiedDate":"2021-10-11"},{"lineNumber":25,"author":{"gitId":"markuslyq"},"content":"     * Adds a person object to the list of people.","lastModifiedDate":"2021-10-11"},{"lineNumber":26,"author":{"gitId":"markuslyq"},"content":"     *","lastModifiedDate":"2021-10-11"},{"lineNumber":27,"author":{"gitId":"markuslyq"},"content":"     * @param person Person to be added to the list.","lastModifiedDate":"2021-10-11"},{"lineNumber":28,"author":{"gitId":"markuslyq"},"content":"     */","lastModifiedDate":"2021-10-11"},{"lineNumber":29,"author":{"gitId":"markuslyq"},"content":"    public void addPerson(Person person) {","lastModifiedDate":"2021-10-11"},{"lineNumber":30,"author":{"gitId":"markuslyq"},"content":"        listOfPeople.add(person);","lastModifiedDate":"2021-10-11"},{"lineNumber":31,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":32,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":33,"author":{"gitId":"markuslyq"},"content":"    /**","lastModifiedDate":"2021-10-12"},{"lineNumber":34,"author":{"gitId":"markuslyq"},"content":"     * Remove a particular person given its index.","lastModifiedDate":"2021-10-12"},{"lineNumber":35,"author":{"gitId":"markuslyq"},"content":"     *","lastModifiedDate":"2021-10-12"},{"lineNumber":36,"author":{"gitId":"markuslyq"},"content":"     * @param personIndex Index of the person to be removed.","lastModifiedDate":"2021-10-12"},{"lineNumber":37,"author":{"gitId":"markuslyq"},"content":"     */","lastModifiedDate":"2021-10-12"},{"lineNumber":38,"author":{"gitId":"andrewtkh1"},"content":"    public void deletePerson(int personIndex) throws LotsException {","lastModifiedDate":"2021-10-11"},{"lineNumber":39,"author":{"gitId":"andrewtkh1"},"content":"        try {","lastModifiedDate":"2021-10-11"},{"lineNumber":40,"author":{"gitId":"andrewtkh1"},"content":"            listOfPeople.remove(personIndex);","lastModifiedDate":"2021-10-11"},{"lineNumber":41,"author":{"gitId":"andrewtkh1"},"content":"        } catch (Exception e) {","lastModifiedDate":"2021-10-11"},{"lineNumber":42,"author":{"gitId":"andrewtkh1"},"content":"            throw new LotsException(e.getMessage());","lastModifiedDate":"2021-10-11"},{"lineNumber":43,"author":{"gitId":"andrewtkh1"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":44,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":45,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":46,"author":{"gitId":"mohamad-adam8991"},"content":"    /**","lastModifiedDate":"2021-10-18"},{"lineNumber":47,"author":{"gitId":"mohamad-adam8991"},"content":"     * Returns the name of the person object given the index.","lastModifiedDate":"2021-10-18"},{"lineNumber":48,"author":{"gitId":"mohamad-adam8991"},"content":"     *","lastModifiedDate":"2021-10-18"},{"lineNumber":49,"author":{"gitId":"mohamad-adam8991"},"content":"     * @param personIndex The index of the person to retrieve.","lastModifiedDate":"2021-10-18"},{"lineNumber":50,"author":{"gitId":"mohamad-adam8991"},"content":"     * @return Returns the String name of a particular index.","lastModifiedDate":"2021-10-18"},{"lineNumber":51,"author":{"gitId":"mohamad-adam8991"},"content":"     */","lastModifiedDate":"2021-10-18"},{"lineNumber":52,"author":{"gitId":"mohamad-adam8991"},"content":"    public String getName(int personIndex) {","lastModifiedDate":"2021-10-18"},{"lineNumber":53,"author":{"gitId":"mohamad-adam8991"},"content":"        return listOfPeople.get(personIndex).personName;","lastModifiedDate":"2021-10-18"},{"lineNumber":54,"author":{"gitId":"mohamad-adam8991"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":55,"author":{"gitId":"mohamad-adam8991"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":56,"author":{"gitId":"markuslyq"},"content":"    /**","lastModifiedDate":"2021-10-11"},{"lineNumber":57,"author":{"gitId":"markuslyq"},"content":"     * Returns the number of people in the linked list.","lastModifiedDate":"2021-10-11"},{"lineNumber":58,"author":{"gitId":"markuslyq"},"content":"     *","lastModifiedDate":"2021-10-11"},{"lineNumber":59,"author":{"gitId":"markuslyq"},"content":"     * @return Returns the length of the linked list.","lastModifiedDate":"2021-10-11"},{"lineNumber":60,"author":{"gitId":"markuslyq"},"content":"     */","lastModifiedDate":"2021-10-11"},{"lineNumber":61,"author":{"gitId":"markuslyq"},"content":"    public int getSize() {","lastModifiedDate":"2021-10-11"},{"lineNumber":62,"author":{"gitId":"markuslyq"},"content":"        return listOfPeople.size();","lastModifiedDate":"2021-10-11"},{"lineNumber":63,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":64,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":65,"author":{"gitId":"markuslyq"},"content":"    public boolean isEmpty() {","lastModifiedDate":"2021-10-12"},{"lineNumber":66,"author":{"gitId":"markuslyq"},"content":"        return listOfPeople.isEmpty();","lastModifiedDate":"2021-10-12"},{"lineNumber":67,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":68,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":69,"author":{"gitId":"WaiKit-nus"},"content":"    /**","lastModifiedDate":"2021-10-21"},{"lineNumber":70,"author":{"gitId":"WaiKit-nus"},"content":"     * Get total number of orders for everyone.","lastModifiedDate":"2021-10-21"},{"lineNumber":71,"author":{"gitId":"WaiKit-nus"},"content":"     * @return total number of orders for everyone.","lastModifiedDate":"2021-10-21"},{"lineNumber":72,"author":{"gitId":"WaiKit-nus"},"content":"     */","lastModifiedDate":"2021-10-21"},{"lineNumber":73,"author":{"gitId":"WaiKit-nus"},"content":"    public int getTotalNumberOfOrdersEveryone() {","lastModifiedDate":"2021-10-21"},{"lineNumber":74,"author":{"gitId":"WaiKit-nus"},"content":"        int totalQuantity \u003d 0;","lastModifiedDate":"2021-10-21"},{"lineNumber":75,"author":{"gitId":"WaiKit-nus"},"content":"        for (int i \u003d 0; i \u003c listOfPeople.size(); i++) {","lastModifiedDate":"2021-10-21"},{"lineNumber":76,"author":{"gitId":"WaiKit-nus"},"content":"            totalQuantity \u003d totalQuantity + listOfPeople.get(i).getTotalNumberOfOrders();","lastModifiedDate":"2021-10-21"},{"lineNumber":77,"author":{"gitId":"WaiKit-nus"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":78,"author":{"gitId":"WaiKit-nus"},"content":"        return totalQuantity;","lastModifiedDate":"2021-10-21"},{"lineNumber":79,"author":{"gitId":"WaiKit-nus"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":80,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":81,"author":{"gitId":"andrewtkh1"},"content":"    /**","lastModifiedDate":"2021-10-16"},{"lineNumber":82,"author":{"gitId":"andrewtkh1"},"content":"     * Clears the arraylist of people","lastModifiedDate":"2021-10-16"},{"lineNumber":83,"author":{"gitId":"andrewtkh1"},"content":"     * stored. Mainly used before each test method.","lastModifiedDate":"2021-10-16"},{"lineNumber":84,"author":{"gitId":"andrewtkh1"},"content":"     */","lastModifiedDate":"2021-10-16"},{"lineNumber":85,"author":{"gitId":"andrewtkh1"},"content":"    public static void clearListOfPeople() {","lastModifiedDate":"2021-10-16"},{"lineNumber":86,"author":{"gitId":"andrewtkh1"},"content":"        listOfPeople.clear();","lastModifiedDate":"2021-10-16"},{"lineNumber":87,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-10-16"},{"lineNumber":88,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":89,"author":{"gitId":"WaiKit-nus"},"content":"}","lastModifiedDate":"2021-10-06"}],"authorContributionMap":{"markuslyq":37,"mohamad-adam8991":10,"andrewtkh1":19,"WaiKit-nus":23}},{"path":"src/main/java/seedu/duke/Person.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"WaiKit-nus"},"content":"package seedu.duke;","lastModifiedDate":"2021-10-05"},{"lineNumber":2,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":3,"author":{"gitId":"andrewtkh1"},"content":"import seedu.duke.exceptions.LotsException;","lastModifiedDate":"2021-10-12"},{"lineNumber":4,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":5,"author":{"gitId":"WaiKit-nus"},"content":"public class Person {","lastModifiedDate":"2021-10-05"},{"lineNumber":6,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":7,"author":{"gitId":"WaiKit-nus"},"content":"    protected int totalMenuItems \u003d Menu.TOTAL_MENU_ITEMS;","lastModifiedDate":"2021-10-05"},{"lineNumber":8,"author":{"gitId":"WaiKit-nus"},"content":"    protected String personName;","lastModifiedDate":"2021-10-05"},{"lineNumber":9,"author":{"gitId":"markuslyq"},"content":"    protected Order[] individualFoodOrders \u003d new Order[totalMenuItems];","lastModifiedDate":"2021-10-17"},{"lineNumber":10,"author":{"gitId":"WaiKit-nus"},"content":"    private String foodIndexOutOfBoundsErrorMessage \u003d \"Please enter the right menu number!\";","lastModifiedDate":"2021-10-07"},{"lineNumber":11,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":12,"author":{"gitId":"WaiKit-nus"},"content":"    /**","lastModifiedDate":"2021-10-21"},{"lineNumber":13,"author":{"gitId":"WaiKit-nus"},"content":"     * Function to get the total number of orders for a person.","lastModifiedDate":"2021-10-21"},{"lineNumber":14,"author":{"gitId":"WaiKit-nus"},"content":"     * @return quantity of orders.","lastModifiedDate":"2021-10-21"},{"lineNumber":15,"author":{"gitId":"WaiKit-nus"},"content":"     */","lastModifiedDate":"2021-10-21"},{"lineNumber":16,"author":{"gitId":"WaiKit-nus"},"content":"    public int getTotalNumberOfOrders() {","lastModifiedDate":"2021-10-21"},{"lineNumber":17,"author":{"gitId":"WaiKit-nus"},"content":"        int counter \u003d 0;","lastModifiedDate":"2021-10-21"},{"lineNumber":18,"author":{"gitId":"WaiKit-nus"},"content":"        for (int i \u003d 0; i \u003c individualFoodOrders.length; i++) {","lastModifiedDate":"2021-10-21"},{"lineNumber":19,"author":{"gitId":"WaiKit-nus"},"content":"            if (individualFoodOrders[i].getQuantity() !\u003d 0) {","lastModifiedDate":"2021-10-21"},{"lineNumber":20,"author":{"gitId":"WaiKit-nus"},"content":"                counter \u003d counter + individualFoodOrders[i].getQuantity();","lastModifiedDate":"2021-10-21"},{"lineNumber":21,"author":{"gitId":"WaiKit-nus"},"content":"            }","lastModifiedDate":"2021-10-21"},{"lineNumber":22,"author":{"gitId":"WaiKit-nus"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":23,"author":{"gitId":"WaiKit-nus"},"content":"        return counter;","lastModifiedDate":"2021-10-21"},{"lineNumber":24,"author":{"gitId":"WaiKit-nus"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":25,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":26,"author":{"gitId":"WaiKit-nus"},"content":"    /**","lastModifiedDate":"2021-10-05"},{"lineNumber":27,"author":{"gitId":"WaiKit-nus"},"content":"     * Constructor for Person.","lastModifiedDate":"2021-10-05"},{"lineNumber":28,"author":{"gitId":"WaiKit-nus"},"content":"     * Individual Food order list will be populated with 0 on initialisation.","lastModifiedDate":"2021-10-05"},{"lineNumber":29,"author":{"gitId":"markuslyq"},"content":"     *","lastModifiedDate":"2021-10-11"},{"lineNumber":30,"author":{"gitId":"WaiKit-nus"},"content":"     * @param personName Name of the person.","lastModifiedDate":"2021-10-05"},{"lineNumber":31,"author":{"gitId":"thaddyyz"},"content":"     * @throws LotsException if the quantity for this particular food exceeds 999.","lastModifiedDate":"2021-10-24"},{"lineNumber":32,"author":{"gitId":"WaiKit-nus"},"content":"     */","lastModifiedDate":"2021-10-05"},{"lineNumber":33,"author":{"gitId":"thaddyyz"},"content":"    public Person(String personName) throws LotsException {","lastModifiedDate":"2021-10-24"},{"lineNumber":34,"author":{"gitId":"WaiKit-nus"},"content":"        this.personName \u003d personName;","lastModifiedDate":"2021-10-05"},{"lineNumber":35,"author":{"gitId":"WaiKit-nus"},"content":"        setupIndividualFoodOrders();","lastModifiedDate":"2021-10-05"},{"lineNumber":36,"author":{"gitId":"WaiKit-nus"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":37,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":38,"author":{"gitId":"WaiKit-nus"},"content":"    /**","lastModifiedDate":"2021-10-05"},{"lineNumber":39,"author":{"gitId":"WaiKit-nus"},"content":"     * Used to populate the array with 0 from index 1 to total_menu_items(10).","lastModifiedDate":"2021-10-12"},{"lineNumber":40,"author":{"gitId":"thaddyyz"},"content":"     *","lastModifiedDate":"2021-10-24"},{"lineNumber":41,"author":{"gitId":"thaddyyz"},"content":"     * @throws LotsException if the quantity for this particular food exceeds 999.","lastModifiedDate":"2021-10-24"},{"lineNumber":42,"author":{"gitId":"WaiKit-nus"},"content":"     */","lastModifiedDate":"2021-10-05"},{"lineNumber":43,"author":{"gitId":"thaddyyz"},"content":"    private void setupIndividualFoodOrders() throws LotsException {","lastModifiedDate":"2021-10-24"},{"lineNumber":44,"author":{"gitId":"andrewtkh1"},"content":"        for (int i \u003d 0; i \u003c totalMenuItems; i++) {","lastModifiedDate":"2021-10-12"},{"lineNumber":45,"author":{"gitId":"markuslyq"},"content":"            individualFoodOrders[i] \u003d new Order(i, 0);","lastModifiedDate":"2021-10-17"},{"lineNumber":46,"author":{"gitId":"WaiKit-nus"},"content":"        }","lastModifiedDate":"2021-10-05"},{"lineNumber":47,"author":{"gitId":"WaiKit-nus"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":48,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":49,"author":{"gitId":"WaiKit-nus"},"content":"    /**","lastModifiedDate":"2021-10-05"},{"lineNumber":50,"author":{"gitId":"markuslyq"},"content":"     * Add the quantity of the corresponding food index.","lastModifiedDate":"2021-10-17"},{"lineNumber":51,"author":{"gitId":"markuslyq"},"content":"     *","lastModifiedDate":"2021-10-11"},{"lineNumber":52,"author":{"gitId":"WaiKit-nus"},"content":"     * @param foodIndex Index of food in the menu.","lastModifiedDate":"2021-10-05"},{"lineNumber":53,"author":{"gitId":"WaiKit-nus"},"content":"     */","lastModifiedDate":"2021-10-05"},{"lineNumber":54,"author":{"gitId":"mohamad-adam8991"},"content":"    public void addFoodToIndividualFoodOrders(int foodIndex, int foodQuantity) throws LotsException {","lastModifiedDate":"2021-10-17"},{"lineNumber":55,"author":{"gitId":"andrewtkh1"},"content":"        if (foodIndex \u003c\u003d totalMenuItems \u0026\u0026 foodIndex \u003e 0) {","lastModifiedDate":"2021-10-12"},{"lineNumber":56,"author":{"gitId":"markuslyq"},"content":"            int updatedQuantity \u003d individualFoodOrders[foodIndex - 1].getQuantity() + foodQuantity;","lastModifiedDate":"2021-10-17"},{"lineNumber":57,"author":{"gitId":"andrewtkh1"},"content":"            if (updatedQuantity \u003e 999) {","lastModifiedDate":"2021-10-25"},{"lineNumber":58,"author":{"gitId":"andrewtkh1"},"content":"                throw new LotsException(\"Please keep the food quantity to less than 1000!\");","lastModifiedDate":"2021-10-25"},{"lineNumber":59,"author":{"gitId":"andrewtkh1"},"content":"            }","lastModifiedDate":"2021-10-25"},{"lineNumber":60,"author":{"gitId":"markuslyq"},"content":"            individualFoodOrders[foodIndex - 1].setQuantity(updatedQuantity);","lastModifiedDate":"2021-10-17"},{"lineNumber":61,"author":{"gitId":"WaiKit-nus"},"content":"        } else {","lastModifiedDate":"2021-10-07"},{"lineNumber":62,"author":{"gitId":"WaiKit-nus"},"content":"            throw new LotsException(foodIndexOutOfBoundsErrorMessage);","lastModifiedDate":"2021-10-12"},{"lineNumber":63,"author":{"gitId":"WaiKit-nus"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":64,"author":{"gitId":"WaiKit-nus"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":65,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":66,"author":{"gitId":"markuslyq"},"content":"    /**","lastModifiedDate":"2021-10-11"},{"lineNumber":67,"author":{"gitId":"markuslyq"},"content":"     * Sets the quantity of a particular food order in the order array to 0.","lastModifiedDate":"2021-10-11"},{"lineNumber":68,"author":{"gitId":"markuslyq"},"content":"     *","lastModifiedDate":"2021-10-11"},{"lineNumber":69,"author":{"gitId":"andrewtkh1"},"content":"     * @param foodIndex Index of the order whose quantity is getting set to 0.","lastModifiedDate":"2021-10-12"},{"lineNumber":70,"author":{"gitId":"markuslyq"},"content":"     * @throws LotsException When order index is more than the number of orders.","lastModifiedDate":"2021-10-11"},{"lineNumber":71,"author":{"gitId":"markuslyq"},"content":"     */","lastModifiedDate":"2021-10-11"},{"lineNumber":72,"author":{"gitId":"andrewtkh1"},"content":"    public void deleteParticularOrder(int foodIndex) throws LotsException {","lastModifiedDate":"2021-10-12"},{"lineNumber":73,"author":{"gitId":"markuslyq"},"content":"        editParticularOrder(foodIndex, 0);","lastModifiedDate":"2021-10-19"},{"lineNumber":74,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":75,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":76,"author":{"gitId":"thaddyyz"},"content":"    /**","lastModifiedDate":"2021-10-16"},{"lineNumber":77,"author":{"gitId":"thaddyyz"},"content":"     * Sets the quantity of a particular food to quantity requested by user.","lastModifiedDate":"2021-10-16"},{"lineNumber":78,"author":{"gitId":"thaddyyz"},"content":"     *","lastModifiedDate":"2021-10-16"},{"lineNumber":79,"author":{"gitId":"thaddyyz"},"content":"     * @param foodIndex Index of the order whose quantity is to be changed.","lastModifiedDate":"2021-10-16"},{"lineNumber":80,"author":{"gitId":"thaddyyz"},"content":"     * @param quantity  Quantity of food to be set.","lastModifiedDate":"2021-10-16"},{"lineNumber":81,"author":{"gitId":"thaddyyz"},"content":"     * @throws LotsException When foodIndex is more than number of food in menu or","lastModifiedDate":"2021-10-16"},{"lineNumber":82,"author":{"gitId":"thaddyyz"},"content":"     *                       order quantity is less than 0.","lastModifiedDate":"2021-10-16"},{"lineNumber":83,"author":{"gitId":"thaddyyz"},"content":"     */","lastModifiedDate":"2021-10-16"},{"lineNumber":84,"author":{"gitId":"thaddyyz"},"content":"    public void editParticularOrder(int foodIndex, int quantity) throws LotsException {","lastModifiedDate":"2021-10-16"},{"lineNumber":85,"author":{"gitId":"markuslyq"},"content":"        try {","lastModifiedDate":"2021-10-19"},{"lineNumber":86,"author":{"gitId":"markuslyq"},"content":"            int indexToEdit \u003d getIndexToEdit(foodIndex);","lastModifiedDate":"2021-10-19"},{"lineNumber":87,"author":{"gitId":"markuslyq"},"content":"            individualFoodOrders[indexToEdit].setQuantity(quantity);","lastModifiedDate":"2021-10-19"},{"lineNumber":88,"author":{"gitId":"markuslyq"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2021-10-19"},{"lineNumber":89,"author":{"gitId":"markuslyq"},"content":"            throw new LotsException(\"Please enter a valid order index!\" + System.lineSeparator()","lastModifiedDate":"2021-10-19"},{"lineNumber":90,"author":{"gitId":"markuslyq"},"content":"                + \"You can enter \\\"list\\\" to check your order index.\");","lastModifiedDate":"2021-10-19"},{"lineNumber":91,"author":{"gitId":"thaddyyz"},"content":"        }","lastModifiedDate":"2021-10-16"},{"lineNumber":92,"author":{"gitId":"thaddyyz"},"content":"    }","lastModifiedDate":"2021-10-16"},{"lineNumber":93,"author":{"gitId":"thaddyyz"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":94,"author":{"gitId":"thaddyyz"},"content":"    /**","lastModifiedDate":"2021-10-24"},{"lineNumber":95,"author":{"gitId":"thaddyyz"},"content":"     * Get the total food order quantity of the particular person.","lastModifiedDate":"2021-10-24"},{"lineNumber":96,"author":{"gitId":"thaddyyz"},"content":"     *","lastModifiedDate":"2021-10-24"},{"lineNumber":97,"author":{"gitId":"thaddyyz"},"content":"     * @return numOfOrders Total food order quantity.","lastModifiedDate":"2021-10-24"},{"lineNumber":98,"author":{"gitId":"thaddyyz"},"content":"     */","lastModifiedDate":"2021-10-24"},{"lineNumber":99,"author":{"gitId":"thaddyyz"},"content":"    public int getIndividualOrdersQuantity() {","lastModifiedDate":"2021-10-24"},{"lineNumber":100,"author":{"gitId":"thaddyyz"},"content":"        int numOfOrders \u003d 0;","lastModifiedDate":"2021-10-24"},{"lineNumber":101,"author":{"gitId":"thaddyyz"},"content":"        for (int i \u003d 0; i \u003c totalMenuItems; i++) {","lastModifiedDate":"2021-10-24"},{"lineNumber":102,"author":{"gitId":"thaddyyz"},"content":"            numOfOrders \u003d numOfOrders + individualFoodOrders[i].getQuantity();","lastModifiedDate":"2021-10-24"},{"lineNumber":103,"author":{"gitId":"thaddyyz"},"content":"        }","lastModifiedDate":"2021-10-24"},{"lineNumber":104,"author":{"gitId":"thaddyyz"},"content":"        return numOfOrders;","lastModifiedDate":"2021-10-24"},{"lineNumber":105,"author":{"gitId":"thaddyyz"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":106,"author":{"gitId":"thaddyyz"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":107,"author":{"gitId":"thaddyyz"},"content":"    /**","lastModifiedDate":"2021-10-16"},{"lineNumber":108,"author":{"gitId":"markuslyq"},"content":"     * Get the correct index of the Order array to be edited.","lastModifiedDate":"2021-10-19"},{"lineNumber":109,"author":{"gitId":"thaddyyz"},"content":"     *","lastModifiedDate":"2021-10-16"},{"lineNumber":110,"author":{"gitId":"thaddyyz"},"content":"     * @param foodIndex Index of the order whose quantity is to be changed.","lastModifiedDate":"2021-10-16"},{"lineNumber":111,"author":{"gitId":"markuslyq"},"content":"     * @return The index of Order array to be edited.","lastModifiedDate":"2021-10-19"},{"lineNumber":112,"author":{"gitId":"thaddyyz"},"content":"     */","lastModifiedDate":"2021-10-16"},{"lineNumber":113,"author":{"gitId":"markuslyq"},"content":"    private int getIndexToEdit(int foodIndex) {","lastModifiedDate":"2021-10-19"},{"lineNumber":114,"author":{"gitId":"markuslyq"},"content":"        int numberOfOrders \u003d 0;","lastModifiedDate":"2021-10-19"},{"lineNumber":115,"author":{"gitId":"markuslyq"},"content":"        for (int i \u003d 0; i \u003c totalMenuItems; i++) {","lastModifiedDate":"2021-10-19"},{"lineNumber":116,"author":{"gitId":"andrewtkh1"},"content":"            if (individualFoodOrders[i].getQuantity() \u003e 0) {","lastModifiedDate":"2021-10-18"},{"lineNumber":117,"author":{"gitId":"thaddyyz"},"content":"                numberOfOrders++;","lastModifiedDate":"2021-10-16"},{"lineNumber":118,"author":{"gitId":"thaddyyz"},"content":"            }","lastModifiedDate":"2021-10-16"},{"lineNumber":119,"author":{"gitId":"thaddyyz"},"content":"            if (foodIndex + 1 \u003d\u003d numberOfOrders) {","lastModifiedDate":"2021-10-16"},{"lineNumber":120,"author":{"gitId":"markuslyq"},"content":"                return i;","lastModifiedDate":"2021-10-19"},{"lineNumber":121,"author":{"gitId":"thaddyyz"},"content":"            }","lastModifiedDate":"2021-10-16"},{"lineNumber":122,"author":{"gitId":"thaddyyz"},"content":"        }","lastModifiedDate":"2021-10-16"},{"lineNumber":123,"author":{"gitId":"markuslyq"},"content":"        return -1;","lastModifiedDate":"2021-10-19"},{"lineNumber":124,"author":{"gitId":"thaddyyz"},"content":"    }","lastModifiedDate":"2021-10-16"},{"lineNumber":125,"author":{"gitId":"thaddyyz"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":126,"author":{"gitId":"markuslyq"},"content":"    /**","lastModifiedDate":"2021-10-12"},{"lineNumber":127,"author":{"gitId":"markuslyq"},"content":"     * Checks if the individual order of this person is empty by checking","lastModifiedDate":"2021-10-12"},{"lineNumber":128,"author":{"gitId":"markuslyq"},"content":"     * if the quantity of food orders are 0.","lastModifiedDate":"2021-10-12"},{"lineNumber":129,"author":{"gitId":"markuslyq"},"content":"     *","lastModifiedDate":"2021-10-12"},{"lineNumber":130,"author":{"gitId":"markuslyq"},"content":"     * @return Returns true if all the quantity of the food orders are 0, else returns false.","lastModifiedDate":"2021-10-12"},{"lineNumber":131,"author":{"gitId":"markuslyq"},"content":"     */","lastModifiedDate":"2021-10-12"},{"lineNumber":132,"author":{"gitId":"markuslyq"},"content":"    public boolean isEmpty() {","lastModifiedDate":"2021-10-12"},{"lineNumber":133,"author":{"gitId":"markuslyq"},"content":"        int numberOfOrders \u003d 0;","lastModifiedDate":"2021-10-12"},{"lineNumber":134,"author":{"gitId":"markuslyq"},"content":"        for (int i \u003d 0; i \u003c totalMenuItems; i++) {","lastModifiedDate":"2021-10-12"},{"lineNumber":135,"author":{"gitId":"markuslyq"},"content":"            if (individualFoodOrders[i].getQuantity() \u003e 0) {","lastModifiedDate":"2021-10-17"},{"lineNumber":136,"author":{"gitId":"markuslyq"},"content":"                numberOfOrders++;","lastModifiedDate":"2021-10-12"},{"lineNumber":137,"author":{"gitId":"markuslyq"},"content":"            }","lastModifiedDate":"2021-10-12"},{"lineNumber":138,"author":{"gitId":"markuslyq"},"content":"        }","lastModifiedDate":"2021-10-12"},{"lineNumber":139,"author":{"gitId":"markuslyq"},"content":"        if (numberOfOrders \u003d\u003d 0) {","lastModifiedDate":"2021-10-12"},{"lineNumber":140,"author":{"gitId":"markuslyq"},"content":"            return true;","lastModifiedDate":"2021-10-12"},{"lineNumber":141,"author":{"gitId":"markuslyq"},"content":"        }","lastModifiedDate":"2021-10-12"},{"lineNumber":142,"author":{"gitId":"markuslyq"},"content":"        return false;","lastModifiedDate":"2021-10-12"},{"lineNumber":143,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":144,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":145,"author":{"gitId":"andrewtkh1"},"content":"    public String getPersonName() {","lastModifiedDate":"2021-10-18"},{"lineNumber":146,"author":{"gitId":"andrewtkh1"},"content":"        return personName;","lastModifiedDate":"2021-10-18"},{"lineNumber":147,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":148,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":149,"author":{"gitId":"WaiKit-nus"},"content":"}","lastModifiedDate":"2021-10-05"}],"authorContributionMap":{"markuslyq":48,"mohamad-adam8991":1,"andrewtkh1":14,"WaiKit-nus":45,"thaddyyz":41}},{"path":"src/main/java/seedu/duke/Ui.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"andrewtkh1"},"content":"package seedu.duke;","lastModifiedDate":"2021-10-08"},{"lineNumber":2,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":3,"author":{"gitId":"mohamad-adam8991"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":4,"author":{"gitId":"WaiKit-nus"},"content":"import seedu.duke.command.MenuCommand;","lastModifiedDate":"2021-10-26"},{"lineNumber":5,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":6,"author":{"gitId":"WaiKit-nus"},"content":"import javax.sound.sampled.Line;","lastModifiedDate":"2021-10-21"},{"lineNumber":7,"author":{"gitId":"WaiKit-nus"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-26"},{"lineNumber":8,"author":{"gitId":"andrewtkh1"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-10-08"},{"lineNumber":9,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":10,"author":{"gitId":"andrewtkh1"},"content":"public class Ui {","lastModifiedDate":"2021-10-08"},{"lineNumber":11,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":12,"author":{"gitId":"WaiKit-nus"},"content":"    private static final String LINE \u003d \"--------------------------------------------------\";","lastModifiedDate":"2021-10-21"},{"lineNumber":13,"author":{"gitId":"andrewtkh1"},"content":"    private static final String BORDER \u003d \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\"","lastModifiedDate":"2021-10-08"},{"lineNumber":14,"author":{"gitId":"andrewtkh1"},"content":"            + \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\"","lastModifiedDate":"2021-10-08"},{"lineNumber":15,"author":{"gitId":"andrewtkh1"},"content":"            + \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\";","lastModifiedDate":"2021-10-08"},{"lineNumber":16,"author":{"gitId":"andrewtkh1"},"content":"    private static final Scanner SC \u003d new Scanner(System.in);","lastModifiedDate":"2021-10-08"},{"lineNumber":17,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":18,"author":{"gitId":"andrewtkh1"},"content":"    public static void printWelcome() {","lastModifiedDate":"2021-10-12"},{"lineNumber":19,"author":{"gitId":"andrewtkh1"},"content":"        String welcomeMsg \u003d \"Welcome to L.O.T.S! What would you like to track today?\";","lastModifiedDate":"2021-10-12"},{"lineNumber":20,"author":{"gitId":"andrewtkh1"},"content":"        printWithBorder(welcomeMsg);","lastModifiedDate":"2021-10-12"},{"lineNumber":21,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":22,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":23,"author":{"gitId":"andrewtkh1"},"content":"    public static void printGoodbye() {","lastModifiedDate":"2021-10-12"},{"lineNumber":24,"author":{"gitId":"andrewtkh1"},"content":"        String byeMsg \u003d \"Thank you for using L.O.T.S! Good bye!\";","lastModifiedDate":"2021-10-12"},{"lineNumber":25,"author":{"gitId":"andrewtkh1"},"content":"        printWithBorder(byeMsg);","lastModifiedDate":"2021-10-12"},{"lineNumber":26,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":27,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":28,"author":{"gitId":"markuslyq"},"content":"    /**","lastModifiedDate":"2021-10-19"},{"lineNumber":29,"author":{"gitId":"markuslyq"},"content":"     * Prints the border.","lastModifiedDate":"2021-10-19"},{"lineNumber":30,"author":{"gitId":"markuslyq"},"content":"     */","lastModifiedDate":"2021-10-19"},{"lineNumber":31,"author":{"gitId":"markuslyq"},"content":"    public static void printBorder() {","lastModifiedDate":"2021-10-19"},{"lineNumber":32,"author":{"gitId":"markuslyq"},"content":"        System.out.println(BORDER);","lastModifiedDate":"2021-10-19"},{"lineNumber":33,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":34,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":35,"author":{"gitId":"andrewtkh1"},"content":"    /**","lastModifiedDate":"2021-10-08"},{"lineNumber":36,"author":{"gitId":"andrewtkh1"},"content":"     * Prints the string provided followed by the border.","lastModifiedDate":"2021-10-08"},{"lineNumber":37,"author":{"gitId":"andrewtkh1"},"content":"     *","lastModifiedDate":"2021-10-08"},{"lineNumber":38,"author":{"gitId":"andrewtkh1"},"content":"     * @param stringToPrint The string to output to user.","lastModifiedDate":"2021-10-08"},{"lineNumber":39,"author":{"gitId":"andrewtkh1"},"content":"     */","lastModifiedDate":"2021-10-08"},{"lineNumber":40,"author":{"gitId":"andrewtkh1"},"content":"    public static void printWithBorder(String stringToPrint) {","lastModifiedDate":"2021-10-08"},{"lineNumber":41,"author":{"gitId":"andrewtkh1"},"content":"        System.out.println(stringToPrint);","lastModifiedDate":"2021-10-08"},{"lineNumber":42,"author":{"gitId":"andrewtkh1"},"content":"        System.out.println(BORDER);","lastModifiedDate":"2021-10-08"},{"lineNumber":43,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":44,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":45,"author":{"gitId":"andrewtkh1"},"content":"    public static void printWithoutBorder(String stringToPrint) {","lastModifiedDate":"2021-10-08"},{"lineNumber":46,"author":{"gitId":"andrewtkh1"},"content":"        System.out.println(stringToPrint);","lastModifiedDate":"2021-10-08"},{"lineNumber":47,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":48,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":49,"author":{"gitId":"andrewtkh1"},"content":"    /**","lastModifiedDate":"2021-10-08"},{"lineNumber":50,"author":{"gitId":"andrewtkh1"},"content":"     * Returns the user\u0027s input with the leading and","lastModifiedDate":"2021-10-08"},{"lineNumber":51,"author":{"gitId":"andrewtkh1"},"content":"     * trailing spaces stripped.","lastModifiedDate":"2021-10-08"},{"lineNumber":52,"author":{"gitId":"andrewtkh1"},"content":"     *","lastModifiedDate":"2021-10-08"},{"lineNumber":53,"author":{"gitId":"andrewtkh1"},"content":"     * @return The User\u0027s input in String.","lastModifiedDate":"2021-10-08"},{"lineNumber":54,"author":{"gitId":"andrewtkh1"},"content":"     */","lastModifiedDate":"2021-10-08"},{"lineNumber":55,"author":{"gitId":"andrewtkh1"},"content":"    public static String readInput() {","lastModifiedDate":"2021-10-08"},{"lineNumber":56,"author":{"gitId":"andrewtkh1"},"content":"        String input \u003d SC.nextLine();","lastModifiedDate":"2021-10-08"},{"lineNumber":57,"author":{"gitId":"markuslyq"},"content":"        return input.replaceAll(\"\\\\s{2,}\", \" \").strip();","lastModifiedDate":"2021-10-24"},{"lineNumber":58,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":59,"author":{"gitId":"mohamad-adam8991"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":60,"author":{"gitId":"mohamad-adam8991"},"content":"    /**","lastModifiedDate":"2021-10-08"},{"lineNumber":61,"author":{"gitId":"mohamad-adam8991"},"content":"     * Prints a list of all the orders made so far.","lastModifiedDate":"2021-10-08"},{"lineNumber":62,"author":{"gitId":"markuslyq"},"content":"     *","lastModifiedDate":"2021-10-11"},{"lineNumber":63,"author":{"gitId":"markuslyq"},"content":"     * @param peopleManager List of people who are ordering.","lastModifiedDate":"2021-10-11"},{"lineNumber":64,"author":{"gitId":"mohamad-adam8991"},"content":"     */","lastModifiedDate":"2021-10-08"},{"lineNumber":65,"author":{"gitId":"mohamad-adam8991"},"content":"    public static void printOrdersList(PeopleManager peopleManager) {","lastModifiedDate":"2021-10-12"},{"lineNumber":66,"author":{"gitId":"markuslyq"},"content":"        int totalNumOfPeopleOrdered \u003d peopleManager.getSize();","lastModifiedDate":"2021-10-11"},{"lineNumber":67,"author":{"gitId":"mohamad-adam8991"},"content":"        if (totalNumOfPeopleOrdered \u003d\u003d 0) {","lastModifiedDate":"2021-10-08"},{"lineNumber":68,"author":{"gitId":"andrewtkh1"},"content":"            printWithBorder(\"Your order list is empty!\");","lastModifiedDate":"2021-10-16"},{"lineNumber":69,"author":{"gitId":"mohamad-adam8991"},"content":"        } else {","lastModifiedDate":"2021-10-08"},{"lineNumber":70,"author":{"gitId":"mohamad-adam8991"},"content":"            assert totalNumOfPeopleOrdered !\u003d 0 : \"Order list cannot be empty.\";","lastModifiedDate":"2021-10-12"},{"lineNumber":71,"author":{"gitId":"WaiKit-nus"},"content":"            printSummaryForList(peopleManager);","lastModifiedDate":"2021-10-21"},{"lineNumber":72,"author":{"gitId":"mohamad-adam8991"},"content":"            for (int i \u003d 0; i \u003c totalNumOfPeopleOrdered; i++) {","lastModifiedDate":"2021-10-08"},{"lineNumber":73,"author":{"gitId":"mohamad-adam8991"},"content":"                String currentPersonName \u003d peopleManager.getName(i);","lastModifiedDate":"2021-10-18"},{"lineNumber":74,"author":{"gitId":"mohamad-adam8991"},"content":"                assert currentPersonName !\u003d null : \"Person must exist.\";","lastModifiedDate":"2021-10-12"},{"lineNumber":75,"author":{"gitId":"markuslyq"},"content":"                printWithoutBorder((i + 1) + \") \" + currentPersonName + \":\");","lastModifiedDate":"2021-10-16"},{"lineNumber":76,"author":{"gitId":"markuslyq"},"content":"                printIndividualPersonOrder(peopleManager.getPerson(i));","lastModifiedDate":"2021-10-11"},{"lineNumber":77,"author":{"gitId":"mohamad-adam8991"},"content":"            }","lastModifiedDate":"2021-10-08"},{"lineNumber":78,"author":{"gitId":"markuslyq"},"content":"            printBorder();","lastModifiedDate":"2021-10-19"},{"lineNumber":79,"author":{"gitId":"mohamad-adam8991"},"content":"        }","lastModifiedDate":"2021-10-08"},{"lineNumber":80,"author":{"gitId":"mohamad-adam8991"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":81,"author":{"gitId":"mohamad-adam8991"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":82,"author":{"gitId":"mohamad-adam8991"},"content":"    /**","lastModifiedDate":"2021-10-08"},{"lineNumber":83,"author":{"gitId":"mohamad-adam8991"},"content":"     * Prints a list of the food items that an individual person has ordered, and displays the total","lastModifiedDate":"2021-10-08"},{"lineNumber":84,"author":{"gitId":"mohamad-adam8991"},"content":"     * cost of the items.","lastModifiedDate":"2021-10-08"},{"lineNumber":85,"author":{"gitId":"mohamad-adam8991"},"content":"     *","lastModifiedDate":"2021-10-08"},{"lineNumber":86,"author":{"gitId":"mohamad-adam8991"},"content":"     * @param currentPerson Person entry in the list that is currently being accessed.","lastModifiedDate":"2021-10-08"},{"lineNumber":87,"author":{"gitId":"mohamad-adam8991"},"content":"     */","lastModifiedDate":"2021-10-08"},{"lineNumber":88,"author":{"gitId":"mohamad-adam8991"},"content":"    public static void printIndividualPersonOrder(Person currentPerson) {","lastModifiedDate":"2021-10-18"},{"lineNumber":89,"author":{"gitId":"mohamad-adam8991"},"content":"        double totalCost \u003d 0;","lastModifiedDate":"2021-10-08"},{"lineNumber":90,"author":{"gitId":"andrewtkh1"},"content":"        int currentItem \u003d 97; //97 is the ascii for \u0027a\u0027.","lastModifiedDate":"2021-10-11"},{"lineNumber":91,"author":{"gitId":"mohamad-adam8991"},"content":"        int totalMenuItems \u003d Menu.TOTAL_MENU_ITEMS;","lastModifiedDate":"2021-10-08"},{"lineNumber":92,"author":{"gitId":"markuslyq"},"content":"        Order[] currentIndividualOrders \u003d currentPerson.individualFoodOrders;","lastModifiedDate":"2021-10-17"},{"lineNumber":93,"author":{"gitId":"mohamad-adam8991"},"content":"        assert currentIndividualOrders !\u003d null : \"Person must have food orders.\";","lastModifiedDate":"2021-10-12"},{"lineNumber":94,"author":{"gitId":"markuslyq"},"content":"        int index \u003d 1;","lastModifiedDate":"2021-10-16"},{"lineNumber":95,"author":{"gitId":"mohamad-adam8991"},"content":"        for (int i \u003d 0; i \u003c totalMenuItems; i++) {","lastModifiedDate":"2021-10-08"},{"lineNumber":96,"author":{"gitId":"markuslyq"},"content":"            Order currentOrder \u003d currentIndividualOrders[i];","lastModifiedDate":"2021-10-17"},{"lineNumber":97,"author":{"gitId":"markuslyq"},"content":"            if (currentOrder.getQuantity() !\u003d 0) {","lastModifiedDate":"2021-10-17"},{"lineNumber":98,"author":{"gitId":"markuslyq"},"content":"                double currentCost \u003d currentOrder.getCost();","lastModifiedDate":"2021-10-17"},{"lineNumber":99,"author":{"gitId":"markuslyq"},"content":"                printWithoutBorder(\"\\t(\" + index + \") \" + currentOrder);","lastModifiedDate":"2021-10-17"},{"lineNumber":100,"author":{"gitId":"mohamad-adam8991"},"content":"                totalCost \u003d totalCost + currentCost;","lastModifiedDate":"2021-10-08"},{"lineNumber":101,"author":{"gitId":"mohamad-adam8991"},"content":"                currentItem++;","lastModifiedDate":"2021-10-08"},{"lineNumber":102,"author":{"gitId":"markuslyq"},"content":"                index++;","lastModifiedDate":"2021-10-16"},{"lineNumber":103,"author":{"gitId":"mohamad-adam8991"},"content":"            }","lastModifiedDate":"2021-10-08"},{"lineNumber":104,"author":{"gitId":"mohamad-adam8991"},"content":"        }","lastModifiedDate":"2021-10-08"},{"lineNumber":105,"author":{"gitId":"markuslyq"},"content":"        if (totalCost \u003e 0.00) {","lastModifiedDate":"2021-10-19"},{"lineNumber":106,"author":{"gitId":"WaiKit-nus"},"content":"            String printTotalCost \u003d \"[Total Cost \u003d $\" + String.format(\"%.2f\", totalCost) + \"]\";","lastModifiedDate":"2021-10-21"},{"lineNumber":107,"author":{"gitId":"WaiKit-nus"},"content":"            int individualQuantity \u003d currentPerson.getTotalNumberOfOrders();","lastModifiedDate":"2021-10-21"},{"lineNumber":108,"author":{"gitId":"WaiKit-nus"},"content":"            String printIndividualQuantity \u003d \"[Total Quantity \u003d \"","lastModifiedDate":"2021-10-21"},{"lineNumber":109,"author":{"gitId":"WaiKit-nus"},"content":"                    + Integer.toString(individualQuantity) + \"]\";","lastModifiedDate":"2021-10-21"},{"lineNumber":110,"author":{"gitId":"WaiKit-nus"},"content":"            printWithoutBorder(printTotalCost + \" \" + printIndividualQuantity);","lastModifiedDate":"2021-10-21"},{"lineNumber":111,"author":{"gitId":"mohamad-adam8991"},"content":"        }","lastModifiedDate":"2021-10-08"},{"lineNumber":112,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":113,"author":{"gitId":"mohamad-adam8991"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":114,"author":{"gitId":"markuslyq"},"content":"    /**","lastModifiedDate":"2021-10-11"},{"lineNumber":115,"author":{"gitId":"markuslyq"},"content":"     * Prints a message to notify the user of the deletion of an order.","lastModifiedDate":"2021-10-11"},{"lineNumber":116,"author":{"gitId":"markuslyq"},"content":"     */","lastModifiedDate":"2021-10-11"},{"lineNumber":117,"author":{"gitId":"markuslyq"},"content":"    public static void printDeleteMessage(Person person, int foodIndex) {","lastModifiedDate":"2021-10-19"},{"lineNumber":118,"author":{"gitId":"markuslyq"},"content":"        printWithoutBorder(\"Alright, order \" + (foodIndex + 1) + \" has been deleted from \" + person.personName + \"!\");","lastModifiedDate":"2021-10-19"},{"lineNumber":119,"author":{"gitId":"markuslyq"},"content":"        printIndividualPersonOrder(person);","lastModifiedDate":"2021-10-19"},{"lineNumber":120,"author":{"gitId":"markuslyq"},"content":"        printBorder();","lastModifiedDate":"2021-10-19"},{"lineNumber":121,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":122,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":123,"author":{"gitId":"thaddyyz"},"content":"    /**","lastModifiedDate":"2021-10-16"},{"lineNumber":124,"author":{"gitId":"thaddyyz"},"content":"     * Prints a message to notify the user of the edit made to his order.","lastModifiedDate":"2021-10-16"},{"lineNumber":125,"author":{"gitId":"thaddyyz"},"content":"     * Additionally, user\u0027s edited orders will printed to show changes made.","lastModifiedDate":"2021-10-16"},{"lineNumber":126,"author":{"gitId":"thaddyyz"},"content":"     */","lastModifiedDate":"2021-10-16"},{"lineNumber":127,"author":{"gitId":"thaddyyz"},"content":"    public static void printEditMessage(Person person, int foodIndex) {","lastModifiedDate":"2021-10-16"},{"lineNumber":128,"author":{"gitId":"markuslyq"},"content":"        printWithoutBorder(\"Order \" + (foodIndex + 1) + \" from \" + person.personName + \"\u0027s order has been edited\");","lastModifiedDate":"2021-10-19"},{"lineNumber":129,"author":{"gitId":"thaddyyz"},"content":"        printIndividualPersonOrder(person);","lastModifiedDate":"2021-10-16"},{"lineNumber":130,"author":{"gitId":"markuslyq"},"content":"        printBorder();","lastModifiedDate":"2021-10-19"},{"lineNumber":131,"author":{"gitId":"thaddyyz"},"content":"    }","lastModifiedDate":"2021-10-16"},{"lineNumber":132,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":133,"author":{"gitId":"markuslyq"},"content":"    /**","lastModifiedDate":"2021-10-12"},{"lineNumber":134,"author":{"gitId":"markuslyq"},"content":"     * Prints a message to notify the user of an empty order list.","lastModifiedDate":"2021-10-12"},{"lineNumber":135,"author":{"gitId":"markuslyq"},"content":"     */","lastModifiedDate":"2021-10-12"},{"lineNumber":136,"author":{"gitId":"markuslyq"},"content":"    public static void printEmptyMessage() {","lastModifiedDate":"2021-10-12"},{"lineNumber":137,"author":{"gitId":"andrewtkh1"},"content":"        printWithBorder(\"There are currently no orders!\");","lastModifiedDate":"2021-10-16"},{"lineNumber":138,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":139,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":140,"author":{"gitId":"andrewtkh1"},"content":"    /**","lastModifiedDate":"2021-10-12"},{"lineNumber":141,"author":{"gitId":"andrewtkh1"},"content":"     * Prints the details of the order that has just been added.","lastModifiedDate":"2021-10-12"},{"lineNumber":142,"author":{"gitId":"andrewtkh1"},"content":"     *","lastModifiedDate":"2021-10-12"},{"lineNumber":143,"author":{"gitId":"andrewtkh1"},"content":"     * @param person The person object that just added an order.","lastModifiedDate":"2021-10-12"},{"lineNumber":144,"author":{"gitId":"andrewtkh1"},"content":"     */","lastModifiedDate":"2021-10-12"},{"lineNumber":145,"author":{"gitId":"andrewtkh1"},"content":"    public static void printAddedOrderMessage(Person person) {","lastModifiedDate":"2021-10-11"},{"lineNumber":146,"author":{"gitId":"andrewtkh1"},"content":"        assert person !\u003d null : \"Person object cannot be null when adding!\";","lastModifiedDate":"2021-10-12"},{"lineNumber":147,"author":{"gitId":"andrewtkh1"},"content":"        printWithoutBorder(\"We have updated the order list for: \" + person.personName);","lastModifiedDate":"2021-10-16"},{"lineNumber":148,"author":{"gitId":"andrewtkh1"},"content":"        printIndividualPersonOrder(person);","lastModifiedDate":"2021-10-11"},{"lineNumber":149,"author":{"gitId":"markuslyq"},"content":"        printBorder();","lastModifiedDate":"2021-10-19"},{"lineNumber":150,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":151,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":152,"author":{"gitId":"thaddyyz"},"content":"    public static void printMenuHeader() {","lastModifiedDate":"2021-10-09"},{"lineNumber":153,"author":{"gitId":"andrewtkh1"},"content":"        printWithoutBorder(\"index | Food Name                         | Price\");","lastModifiedDate":"2021-10-16"},{"lineNumber":154,"author":{"gitId":"WaiKit-nus"},"content":"        printWithoutBorder(LINE);","lastModifiedDate":"2021-10-21"},{"lineNumber":155,"author":{"gitId":"thaddyyz"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":156,"author":{"gitId":"thaddyyz"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":157,"author":{"gitId":"andrewtkh1"},"content":"    /**","lastModifiedDate":"2021-10-10"},{"lineNumber":158,"author":{"gitId":"WaiKit-nus"},"content":"     * Prints the menu of which user can order.","lastModifiedDate":"2021-10-26"},{"lineNumber":159,"author":{"gitId":"WaiKit-nus"},"content":"     * @param priceList contains prices of the food.","lastModifiedDate":"2021-10-26"},{"lineNumber":160,"author":{"gitId":"WaiKit-nus"},"content":"     * @param foodList contains the food in the menu.","lastModifiedDate":"2021-10-26"},{"lineNumber":161,"author":{"gitId":"andrewtkh1"},"content":"     */","lastModifiedDate":"2021-10-10"},{"lineNumber":162,"author":{"gitId":"WaiKit-nus"},"content":"    public static void printMenu(ArrayList\u003cDouble\u003e priceList, ArrayList\u003cString\u003e foodList) {","lastModifiedDate":"2021-10-26"},{"lineNumber":163,"author":{"gitId":"WaiKit-nus"},"content":"        Ui.printMenuHeader();","lastModifiedDate":"2021-10-26"},{"lineNumber":164,"author":{"gitId":"WaiKit-nus"},"content":"        for (int i \u003d 0; i \u003c foodList.size(); i++) {","lastModifiedDate":"2021-10-26"},{"lineNumber":165,"author":{"gitId":"WaiKit-nus"},"content":"            System.out.format(\"%-8d%-33s%7.2f%n\", i + 1, foodList.get(i), priceList.get(i));","lastModifiedDate":"2021-10-26"},{"lineNumber":166,"author":{"gitId":"WaiKit-nus"},"content":"            printWithoutBorder(LINE);","lastModifiedDate":"2021-10-21"},{"lineNumber":167,"author":{"gitId":"WaiKit-nus"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":168,"author":{"gitId":"WaiKit-nus"},"content":"        Ui.printWithBorder(\"\");","lastModifiedDate":"2021-10-26"},{"lineNumber":169,"author":{"gitId":"WaiKit-nus"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":170,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":171,"author":{"gitId":"WaiKit-nus"},"content":"    public static void printSummaryForList(PeopleManager peopleManager) {","lastModifiedDate":"2021-10-21"},{"lineNumber":172,"author":{"gitId":"WaiKit-nus"},"content":"        String summary \u003d \"SUMMARY: [Total number of People: \" +  peopleManager.getSize()","lastModifiedDate":"2021-10-21"},{"lineNumber":173,"author":{"gitId":"WaiKit-nus"},"content":"                + \"] [Total number of Orders: \" + peopleManager.getTotalNumberOfOrdersEveryone() + \"]\";","lastModifiedDate":"2021-10-21"},{"lineNumber":174,"author":{"gitId":"WaiKit-nus"},"content":"        printWithoutBorder(summary);","lastModifiedDate":"2021-10-21"},{"lineNumber":175,"author":{"gitId":"WaiKit-nus"},"content":"        printWithoutBorder(LINE);","lastModifiedDate":"2021-10-21"},{"lineNumber":176,"author":{"gitId":"thaddyyz"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":177,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":178,"author":{"gitId":"andrewtkh1"},"content":"}","lastModifiedDate":"2021-10-08"}],"authorContributionMap":{"markuslyq":43,"mohamad-adam8991":33,"andrewtkh1":62,"WaiKit-nus":29,"thaddyyz":11}},{"path":"src/main/java/seedu/duke/command/AddCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"andrewtkh1"},"content":"package seedu.duke.command;","lastModifiedDate":"2021-10-12"},{"lineNumber":2,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":3,"author":{"gitId":"andrewtkh1"},"content":"import seedu.duke.exceptions.LotsException;","lastModifiedDate":"2021-10-12"},{"lineNumber":4,"author":{"gitId":"andrewtkh1"},"content":"import seedu.duke.Menu;","lastModifiedDate":"2021-10-12"},{"lineNumber":5,"author":{"gitId":"andrewtkh1"},"content":"import seedu.duke.Person;","lastModifiedDate":"2021-10-12"},{"lineNumber":6,"author":{"gitId":"andrewtkh1"},"content":"import seedu.duke.Ui;","lastModifiedDate":"2021-10-12"},{"lineNumber":7,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":8,"author":{"gitId":"WaiKit-nus"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2021-10-08"},{"lineNumber":9,"author":{"gitId":"WaiKit-nus"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2021-10-08"},{"lineNumber":10,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":11,"author":{"gitId":"WaiKit-nus"},"content":"public class AddCommand extends Command {","lastModifiedDate":"2021-10-07"},{"lineNumber":12,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":13,"author":{"gitId":"WaiKit-nus"},"content":"    public static final String COMMAND_WORD \u003d \"add\";","lastModifiedDate":"2021-10-07"},{"lineNumber":14,"author":{"gitId":"WaiKit-nus"},"content":"    private final String personName;","lastModifiedDate":"2021-10-07"},{"lineNumber":15,"author":{"gitId":"WaiKit-nus"},"content":"    private final int foodIndex;","lastModifiedDate":"2021-10-07"},{"lineNumber":16,"author":{"gitId":"WaiKit-nus"},"content":"    private final int foodQuantity;","lastModifiedDate":"2021-10-07"},{"lineNumber":17,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":18,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":19,"author":{"gitId":"WaiKit-nus"},"content":"    /**","lastModifiedDate":"2021-10-08"},{"lineNumber":20,"author":{"gitId":"WaiKit-nus"},"content":"     * Constructor with Regex checking input. If it does not match desirable input, then","lastModifiedDate":"2021-10-08"},{"lineNumber":21,"author":{"gitId":"WaiKit-nus"},"content":"     * variables will be initialised with a fixed input.","lastModifiedDate":"2021-10-08"},{"lineNumber":22,"author":{"gitId":"andrewtkh1"},"content":"     *","lastModifiedDate":"2021-10-11"},{"lineNumber":23,"author":{"gitId":"WaiKit-nus"},"content":"     * @param input will be returned by functions if it passes regex.","lastModifiedDate":"2021-10-08"},{"lineNumber":24,"author":{"gitId":"WaiKit-nus"},"content":"     *              will return fixed variables if it does not pass regex.","lastModifiedDate":"2021-10-11"},{"lineNumber":25,"author":{"gitId":"WaiKit-nus"},"content":"     */","lastModifiedDate":"2021-10-08"},{"lineNumber":26,"author":{"gitId":"WaiKit-nus"},"content":"    public AddCommand(String input) throws LotsException {","lastModifiedDate":"2021-10-11"},{"lineNumber":27,"author":{"gitId":"WaiKit-nus"},"content":"        if (checkUserInput(input)) {","lastModifiedDate":"2021-10-08"},{"lineNumber":28,"author":{"gitId":"WaiKit-nus"},"content":"            int[] indexOfSlashes \u003d indexOfSlashes(input);","lastModifiedDate":"2021-10-07"},{"lineNumber":29,"author":{"gitId":"andrewtkh1"},"content":"            personName \u003d getPersonName(input, indexOfSlashes[0], indexOfSlashes[1]);","lastModifiedDate":"2021-10-11"},{"lineNumber":30,"author":{"gitId":"andrewtkh1"},"content":"            foodIndex \u003d getFoodIndex(input, indexOfSlashes[1], indexOfSlashes[2]);","lastModifiedDate":"2021-10-11"},{"lineNumber":31,"author":{"gitId":"andrewtkh1"},"content":"            foodQuantity \u003d getFoodQuantity(input, indexOfSlashes[2]);","lastModifiedDate":"2021-10-11"},{"lineNumber":32,"author":{"gitId":"WaiKit-nus"},"content":"        } else {","lastModifiedDate":"2021-10-08"},{"lineNumber":33,"author":{"gitId":"WaiKit-nus"},"content":"            throw new LotsException(\"Please enter a valid Add Command!\");","lastModifiedDate":"2021-10-12"},{"lineNumber":34,"author":{"gitId":"WaiKit-nus"},"content":"        }","lastModifiedDate":"2021-10-08"},{"lineNumber":35,"author":{"gitId":"WaiKit-nus"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":36,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":37,"author":{"gitId":"WaiKit-nus"},"content":"    /**","lastModifiedDate":"2021-10-07"},{"lineNumber":38,"author":{"gitId":"mohamad-adam8991"},"content":"     * Adds a new person with the given attributes into the list of people. If person","lastModifiedDate":"2021-10-18"},{"lineNumber":39,"author":{"gitId":"mohamad-adam8991"},"content":"     * already exists in the list of people, the order will be added to the existing","lastModifiedDate":"2021-10-18"},{"lineNumber":40,"author":{"gitId":"mohamad-adam8991"},"content":"     * entries\u0027 attributes instead.","lastModifiedDate":"2021-10-18"},{"lineNumber":41,"author":{"gitId":"WaiKit-nus"},"content":"     * If it did not pass regex, it will throw new exception and no new addition of","lastModifiedDate":"2021-10-08"},{"lineNumber":42,"author":{"gitId":"WaiKit-nus"},"content":"     * person to the list of people will happen.","lastModifiedDate":"2021-10-08"},{"lineNumber":43,"author":{"gitId":"andrewtkh1"},"content":"     *","lastModifiedDate":"2021-10-11"},{"lineNumber":44,"author":{"gitId":"WaiKit-nus"},"content":"     * @throws LotsException Throws a new LotsException when the command is invalid.","lastModifiedDate":"2021-10-11"},{"lineNumber":45,"author":{"gitId":"mohamad-adam8991"},"content":"     * @throws LotsException Throws a new LotsException when exceeding limit of total people.","lastModifiedDate":"2021-10-22"},{"lineNumber":46,"author":{"gitId":"WaiKit-nus"},"content":"     */","lastModifiedDate":"2021-10-07"},{"lineNumber":47,"author":{"gitId":"WaiKit-nus"},"content":"    @Override","lastModifiedDate":"2021-10-07"},{"lineNumber":48,"author":{"gitId":"WaiKit-nus"},"content":"    public void execute() throws LotsException {","lastModifiedDate":"2021-10-11"},{"lineNumber":49,"author":{"gitId":"mohamad-adam8991"},"content":"        checkNumOfPeopleOutOfLimit();","lastModifiedDate":"2021-10-22"},{"lineNumber":50,"author":{"gitId":"markuslyq"},"content":"        //checkQuantityOutOfLimit();","lastModifiedDate":"2021-10-24"},{"lineNumber":51,"author":{"gitId":"mohamad-adam8991"},"content":"        if ((personName !\u003d \"\" || foodIndex !\u003d -1 || foodQuantity !\u003d -1)","lastModifiedDate":"2021-10-18"},{"lineNumber":52,"author":{"gitId":"mohamad-adam8991"},"content":"                \u0026\u0026 getMatchedIndex(personName) \u003e peopleManager.getSize()) {","lastModifiedDate":"2021-10-18"},{"lineNumber":53,"author":{"gitId":"WaiKit-nus"},"content":"            Person person \u003d new Person(personName);","lastModifiedDate":"2021-10-07"},{"lineNumber":54,"author":{"gitId":"mohamad-adam8991"},"content":"            person.addFoodToIndividualFoodOrders(foodIndex, foodQuantity);","lastModifiedDate":"2021-10-17"},{"lineNumber":55,"author":{"gitId":"andrewtkh1"},"content":"            super.peopleManager.addPerson(person);","lastModifiedDate":"2021-10-16"},{"lineNumber":56,"author":{"gitId":"andrewtkh1"},"content":"            Ui.printAddedOrderMessage(person);","lastModifiedDate":"2021-10-11"},{"lineNumber":57,"author":{"gitId":"mohamad-adam8991"},"content":"        } else if (getMatchedIndex(personName) \u003c\u003d peopleManager.getSize()) {","lastModifiedDate":"2021-10-18"},{"lineNumber":58,"author":{"gitId":"mohamad-adam8991"},"content":"            int currIndex \u003d getMatchedIndex(personName);","lastModifiedDate":"2021-10-18"},{"lineNumber":59,"author":{"gitId":"mohamad-adam8991"},"content":"            peopleManager.getPerson(currIndex).addFoodToIndividualFoodOrders(foodIndex, foodQuantity);","lastModifiedDate":"2021-10-18"},{"lineNumber":60,"author":{"gitId":"mohamad-adam8991"},"content":"            Ui.printAddedOrderMessage(peopleManager.getPerson(currIndex));","lastModifiedDate":"2021-10-18"},{"lineNumber":61,"author":{"gitId":"WaiKit-nus"},"content":"        } else {","lastModifiedDate":"2021-10-08"},{"lineNumber":62,"author":{"gitId":"WaiKit-nus"},"content":"            throw new LotsException(\"Please enter a valid Add Command!\");","lastModifiedDate":"2021-10-11"},{"lineNumber":63,"author":{"gitId":"WaiKit-nus"},"content":"        }","lastModifiedDate":"2021-10-08"},{"lineNumber":64,"author":{"gitId":"WaiKit-nus"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":65,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":66,"author":{"gitId":"WaiKit-nus"},"content":"    /**","lastModifiedDate":"2021-10-08"},{"lineNumber":67,"author":{"gitId":"WaiKit-nus"},"content":"     * Regex to check User Input before passing onto the class.","lastModifiedDate":"2021-10-08"},{"lineNumber":68,"author":{"gitId":"andrewtkh1"},"content":"     *","lastModifiedDate":"2021-10-11"},{"lineNumber":69,"author":{"gitId":"WaiKit-nus"},"content":"     * @param input user input.","lastModifiedDate":"2021-10-08"},{"lineNumber":70,"author":{"gitId":"WaiKit-nus"},"content":"     * @return a boolean true if the user input passes the regex.","lastModifiedDate":"2021-10-08"},{"lineNumber":71,"author":{"gitId":"WaiKit-nus"},"content":"     * @throws IllegalArgumentException when the pattern for Regex is not able to be interpreted.","lastModifiedDate":"2021-10-11"},{"lineNumber":72,"author":{"gitId":"WaiKit-nus"},"content":"     */","lastModifiedDate":"2021-10-08"},{"lineNumber":73,"author":{"gitId":"WaiKit-nus"},"content":"    private boolean checkUserInput(String input) throws IllegalArgumentException {","lastModifiedDate":"2021-10-11"},{"lineNumber":74,"author":{"gitId":"WaiKit-nus"},"content":"        try {","lastModifiedDate":"2021-10-11"},{"lineNumber":75,"author":{"gitId":"WaiKit-nus"},"content":"            Pattern pattern \u003d Pattern.compile(","lastModifiedDate":"2021-10-08"},{"lineNumber":76,"author":{"gitId":"andrewtkh1"},"content":"                    \"^add \\\\/n [a-zA-Z0-9][\\\\w \\\\d]{0,50} \\\\/i \\\\d{1,2} \\\\/q \\\\d{1,3}$\",","lastModifiedDate":"2021-10-11"},{"lineNumber":77,"author":{"gitId":"WaiKit-nus"},"content":"                    Pattern.CASE_INSENSITIVE);","lastModifiedDate":"2021-10-08"},{"lineNumber":78,"author":{"gitId":"WaiKit-nus"},"content":"            Matcher matcher \u003d pattern.matcher(input);","lastModifiedDate":"2021-10-08"},{"lineNumber":79,"author":{"gitId":"WaiKit-nus"},"content":"            boolean matchFound \u003d matcher.find();","lastModifiedDate":"2021-10-08"},{"lineNumber":80,"author":{"gitId":"WaiKit-nus"},"content":"            return matchFound;","lastModifiedDate":"2021-10-08"},{"lineNumber":81,"author":{"gitId":"WaiKit-nus"},"content":"        } catch (IllegalArgumentException e) {","lastModifiedDate":"2021-10-11"},{"lineNumber":82,"author":{"gitId":"WaiKit-nus"},"content":"            return false;","lastModifiedDate":"2021-10-11"},{"lineNumber":83,"author":{"gitId":"WaiKit-nus"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":84,"author":{"gitId":"WaiKit-nus"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":85,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":86,"author":{"gitId":"WaiKit-nus"},"content":"    /**","lastModifiedDate":"2021-10-07"},{"lineNumber":87,"author":{"gitId":"WaiKit-nus"},"content":"     * Obtain index of \"/\" in the string to be use to split input strings into substrings.","lastModifiedDate":"2021-10-07"},{"lineNumber":88,"author":{"gitId":"andrewtkh1"},"content":"     *","lastModifiedDate":"2021-10-11"},{"lineNumber":89,"author":{"gitId":"WaiKit-nus"},"content":"     * @param input User input.","lastModifiedDate":"2021-10-07"},{"lineNumber":90,"author":{"gitId":"WaiKit-nus"},"content":"     * @return an array of index of \"/\".","lastModifiedDate":"2021-10-07"},{"lineNumber":91,"author":{"gitId":"WaiKit-nus"},"content":"     */","lastModifiedDate":"2021-10-07"},{"lineNumber":92,"author":{"gitId":"WaiKit-nus"},"content":"    private static int[] indexOfSlashes(String input) {","lastModifiedDate":"2021-10-07"},{"lineNumber":93,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":94,"author":{"gitId":"WaiKit-nus"},"content":"        int[] indexOfSlashes \u003d new int[3];","lastModifiedDate":"2021-10-07"},{"lineNumber":95,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":96,"author":{"gitId":"WaiKit-nus"},"content":"        //Index firstSlashIndex to secondSlashIndex holds Person Name.","lastModifiedDate":"2021-10-07"},{"lineNumber":97,"author":{"gitId":"WaiKit-nus"},"content":"        int firstSlashIndex \u003d input.indexOf(\"/\");","lastModifiedDate":"2021-10-07"},{"lineNumber":98,"author":{"gitId":"WaiKit-nus"},"content":"        //Index secondSlashIndex to thirdSlashIndex holds index of Food.","lastModifiedDate":"2021-10-07"},{"lineNumber":99,"author":{"gitId":"WaiKit-nus"},"content":"        int secondSlashIndex \u003d input.indexOf(\"/\", firstSlashIndex + 1);","lastModifiedDate":"2021-10-07"},{"lineNumber":100,"author":{"gitId":"WaiKit-nus"},"content":"        //Index thirdSlashIndex to last index holds food quantity.","lastModifiedDate":"2021-10-07"},{"lineNumber":101,"author":{"gitId":"WaiKit-nus"},"content":"        int thirdSlashIndex \u003d input.indexOf(\"/\", secondSlashIndex + 1);","lastModifiedDate":"2021-10-07"},{"lineNumber":102,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":103,"author":{"gitId":"WaiKit-nus"},"content":"        indexOfSlashes[0] \u003d firstSlashIndex;","lastModifiedDate":"2021-10-07"},{"lineNumber":104,"author":{"gitId":"WaiKit-nus"},"content":"        indexOfSlashes[1] \u003d secondSlashIndex;","lastModifiedDate":"2021-10-07"},{"lineNumber":105,"author":{"gitId":"WaiKit-nus"},"content":"        indexOfSlashes[2] \u003d thirdSlashIndex;","lastModifiedDate":"2021-10-07"},{"lineNumber":106,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":107,"author":{"gitId":"WaiKit-nus"},"content":"        return indexOfSlashes;","lastModifiedDate":"2021-10-07"},{"lineNumber":108,"author":{"gitId":"WaiKit-nus"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":109,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":110,"author":{"gitId":"WaiKit-nus"},"content":"    /**","lastModifiedDate":"2021-10-07"},{"lineNumber":111,"author":{"gitId":"WaiKit-nus"},"content":"     * Function used to parse the user input to get person name.","lastModifiedDate":"2021-10-07"},{"lineNumber":112,"author":{"gitId":"andrewtkh1"},"content":"     *","lastModifiedDate":"2021-10-11"},{"lineNumber":113,"author":{"gitId":"WaiKit-nus"},"content":"     * @param input              User input.","lastModifiedDate":"2021-10-07"},{"lineNumber":114,"author":{"gitId":"WaiKit-nus"},"content":"     * @param indexOfFirstSlash  First \"/\" index.","lastModifiedDate":"2021-10-07"},{"lineNumber":115,"author":{"gitId":"WaiKit-nus"},"content":"     * @param indexOfSecondSlash Second \"/\" index.","lastModifiedDate":"2021-10-07"},{"lineNumber":116,"author":{"gitId":"WaiKit-nus"},"content":"     * @return Person Name in String type.","lastModifiedDate":"2021-10-07"},{"lineNumber":117,"author":{"gitId":"WaiKit-nus"},"content":"     */","lastModifiedDate":"2021-10-07"},{"lineNumber":118,"author":{"gitId":"WaiKit-nus"},"content":"    private static String getPersonName(String input, int indexOfFirstSlash, int indexOfSecondSlash) {","lastModifiedDate":"2021-10-07"},{"lineNumber":119,"author":{"gitId":"andrewtkh1"},"content":"        String tempPersonName \u003d input.substring(indexOfFirstSlash + 2, indexOfSecondSlash - 1);","lastModifiedDate":"2021-10-11"},{"lineNumber":120,"author":{"gitId":"WaiKit-nus"},"content":"        assert tempPersonName !\u003d null : \"Input to Person Name cannot be NULL!\";","lastModifiedDate":"2021-10-13"},{"lineNumber":121,"author":{"gitId":"WaiKit-nus"},"content":"        return tempPersonName.trim();","lastModifiedDate":"2021-10-08"},{"lineNumber":122,"author":{"gitId":"WaiKit-nus"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":123,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":124,"author":{"gitId":"WaiKit-nus"},"content":"    /**","lastModifiedDate":"2021-10-07"},{"lineNumber":125,"author":{"gitId":"WaiKit-nus"},"content":"     * Function used to parse the user input to get food index.","lastModifiedDate":"2021-10-07"},{"lineNumber":126,"author":{"gitId":"andrewtkh1"},"content":"     *","lastModifiedDate":"2021-10-11"},{"lineNumber":127,"author":{"gitId":"WaiKit-nus"},"content":"     * @param input              User input.","lastModifiedDate":"2021-10-07"},{"lineNumber":128,"author":{"gitId":"WaiKit-nus"},"content":"     * @param indexOfSecondSlash Second \"/\" index.","lastModifiedDate":"2021-10-07"},{"lineNumber":129,"author":{"gitId":"WaiKit-nus"},"content":"     * @param indexOfThirdSlash  Third \"/\" index.","lastModifiedDate":"2021-10-07"},{"lineNumber":130,"author":{"gitId":"WaiKit-nus"},"content":"     * @return Food index in int type.","lastModifiedDate":"2021-10-07"},{"lineNumber":131,"author":{"gitId":"WaiKit-nus"},"content":"     * @throw NumberFormatException when the index is out of range.","lastModifiedDate":"2021-10-11"},{"lineNumber":132,"author":{"gitId":"WaiKit-nus"},"content":"     */","lastModifiedDate":"2021-10-07"},{"lineNumber":133,"author":{"gitId":"WaiKit-nus"},"content":"    private static int getFoodIndex(String input, int indexOfSecondSlash, int indexOfThirdSlash)","lastModifiedDate":"2021-10-11"},{"lineNumber":134,"author":{"gitId":"WaiKit-nus"},"content":"            throws NumberFormatException, LotsException {","lastModifiedDate":"2021-10-11"},{"lineNumber":135,"author":{"gitId":"andrewtkh1"},"content":"        String subStringFoodIndex \u003d input.substring(indexOfSecondSlash + 2, indexOfThirdSlash - 1).trim();","lastModifiedDate":"2021-10-11"},{"lineNumber":136,"author":{"gitId":"WaiKit-nus"},"content":"        assert subStringFoodIndex !\u003d \"\" : \"Input to AddCommand Cannot be NULL!\";","lastModifiedDate":"2021-10-13"},{"lineNumber":137,"author":{"gitId":"WaiKit-nus"},"content":"        try {","lastModifiedDate":"2021-10-08"},{"lineNumber":138,"author":{"gitId":"WaiKit-nus"},"content":"            int foodIndex \u003d Integer.parseInt(subStringFoodIndex);","lastModifiedDate":"2021-10-08"},{"lineNumber":139,"author":{"gitId":"andrewtkh1"},"content":"            if (foodIndex \u003e Menu.TOTAL_MENU_ITEMS || foodIndex \u003c\u003d 0) {","lastModifiedDate":"2021-10-11"},{"lineNumber":140,"author":{"gitId":"WaiKit-nus"},"content":"                throw new LotsException(\"Index out of range. Please try again!\");","lastModifiedDate":"2021-10-12"},{"lineNumber":141,"author":{"gitId":"WaiKit-nus"},"content":"            } else {","lastModifiedDate":"2021-10-08"},{"lineNumber":142,"author":{"gitId":"WaiKit-nus"},"content":"                return foodIndex;","lastModifiedDate":"2021-10-07"},{"lineNumber":143,"author":{"gitId":"WaiKit-nus"},"content":"            }","lastModifiedDate":"2021-10-07"},{"lineNumber":144,"author":{"gitId":"WaiKit-nus"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2021-10-08"},{"lineNumber":145,"author":{"gitId":"WaiKit-nus"},"content":"            String errorMsg \u003d \"Please make sure the Food Index is keyed in correctly.\";","lastModifiedDate":"2021-10-08"},{"lineNumber":146,"author":{"gitId":"WaiKit-nus"},"content":"            throw new LotsException(errorMsg);","lastModifiedDate":"2021-10-11"},{"lineNumber":147,"author":{"gitId":"WaiKit-nus"},"content":"        }","lastModifiedDate":"2021-10-08"},{"lineNumber":148,"author":{"gitId":"WaiKit-nus"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":149,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":150,"author":{"gitId":"WaiKit-nus"},"content":"    /**","lastModifiedDate":"2021-10-07"},{"lineNumber":151,"author":{"gitId":"WaiKit-nus"},"content":"     * Function used to parse the user input to get food index.","lastModifiedDate":"2021-10-07"},{"lineNumber":152,"author":{"gitId":"andrewtkh1"},"content":"     *","lastModifiedDate":"2021-10-11"},{"lineNumber":153,"author":{"gitId":"WaiKit-nus"},"content":"     * @param input             User input.","lastModifiedDate":"2021-10-07"},{"lineNumber":154,"author":{"gitId":"WaiKit-nus"},"content":"     * @param indexOfThirdSlash Third \"/\" index.","lastModifiedDate":"2021-10-07"},{"lineNumber":155,"author":{"gitId":"WaiKit-nus"},"content":"     * @return Food Quantity in int type.","lastModifiedDate":"2021-10-07"},{"lineNumber":156,"author":{"gitId":"WaiKit-nus"},"content":"     * @throws NumberFormatException when the quantity is out of range.","lastModifiedDate":"2021-10-11"},{"lineNumber":157,"author":{"gitId":"WaiKit-nus"},"content":"     */","lastModifiedDate":"2021-10-07"},{"lineNumber":158,"author":{"gitId":"WaiKit-nus"},"content":"    private static int getFoodQuantity(String input, int indexOfThirdSlash)","lastModifiedDate":"2021-10-11"},{"lineNumber":159,"author":{"gitId":"WaiKit-nus"},"content":"            throws NumberFormatException, LotsException {","lastModifiedDate":"2021-10-11"},{"lineNumber":160,"author":{"gitId":"andrewtkh1"},"content":"        String subStringFoodQuantity \u003d input.substring(indexOfThirdSlash + 2).trim();","lastModifiedDate":"2021-10-11"},{"lineNumber":161,"author":{"gitId":"WaiKit-nus"},"content":"        assert subStringFoodQuantity !\u003d \"\" : \"Input to AddCommand Cannot be NULL!\";","lastModifiedDate":"2021-10-13"},{"lineNumber":162,"author":{"gitId":"WaiKit-nus"},"content":"        try {","lastModifiedDate":"2021-10-08"},{"lineNumber":163,"author":{"gitId":"WaiKit-nus"},"content":"            int foodQuantity \u003d Integer.parseInt(subStringFoodQuantity);","lastModifiedDate":"2021-10-08"},{"lineNumber":164,"author":{"gitId":"WaiKit-nus"},"content":"            if (foodQuantity \u003e 1000 || foodQuantity \u003c\u003d 0) {","lastModifiedDate":"2021-10-12"},{"lineNumber":165,"author":{"gitId":"WaiKit-nus"},"content":"                throw new LotsException(\"Quantity out of range(1 to 999) , please try again!\");","lastModifiedDate":"2021-10-12"},{"lineNumber":166,"author":{"gitId":"WaiKit-nus"},"content":"            } else {","lastModifiedDate":"2021-10-08"},{"lineNumber":167,"author":{"gitId":"WaiKit-nus"},"content":"                return foodQuantity;","lastModifiedDate":"2021-10-07"},{"lineNumber":168,"author":{"gitId":"WaiKit-nus"},"content":"            }","lastModifiedDate":"2021-10-07"},{"lineNumber":169,"author":{"gitId":"WaiKit-nus"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2021-10-08"},{"lineNumber":170,"author":{"gitId":"WaiKit-nus"},"content":"            String errorMsg \u003d \"Please make sure the Food Quantity is keyed in correctly.\";","lastModifiedDate":"2021-10-08"},{"lineNumber":171,"author":{"gitId":"WaiKit-nus"},"content":"            throw new LotsException(errorMsg);","lastModifiedDate":"2021-10-11"},{"lineNumber":172,"author":{"gitId":"WaiKit-nus"},"content":"        }","lastModifiedDate":"2021-10-08"},{"lineNumber":173,"author":{"gitId":"WaiKit-nus"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":174,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":175,"author":{"gitId":"mohamad-adam8991"},"content":"    /**","lastModifiedDate":"2021-10-18"},{"lineNumber":176,"author":{"gitId":"mohamad-adam8991"},"content":"     * Function to get the index of existing name in the list if a match is found.","lastModifiedDate":"2021-10-18"},{"lineNumber":177,"author":{"gitId":"mohamad-adam8991"},"content":"     *","lastModifiedDate":"2021-10-18"},{"lineNumber":178,"author":{"gitId":"mohamad-adam8991"},"content":"     * @param currName Name of person to be found in list.","lastModifiedDate":"2021-10-18"},{"lineNumber":179,"author":{"gitId":"mohamad-adam8991"},"content":"     * @return Index of matched entry.","lastModifiedDate":"2021-10-18"},{"lineNumber":180,"author":{"gitId":"mohamad-adam8991"},"content":"     */","lastModifiedDate":"2021-10-18"},{"lineNumber":181,"author":{"gitId":"mohamad-adam8991"},"content":"    private int getMatchedIndex(String currName) {","lastModifiedDate":"2021-10-18"},{"lineNumber":182,"author":{"gitId":"mohamad-adam8991"},"content":"        int currNumOfPeople \u003d peopleManager.getSize();","lastModifiedDate":"2021-10-18"},{"lineNumber":183,"author":{"gitId":"mohamad-adam8991"},"content":"        for (int i \u003d 0; i \u003c currNumOfPeople; i++) {","lastModifiedDate":"2021-10-18"},{"lineNumber":184,"author":{"gitId":"mohamad-adam8991"},"content":"            if (currName.equals(peopleManager.getName(i))) {","lastModifiedDate":"2021-10-18"},{"lineNumber":185,"author":{"gitId":"mohamad-adam8991"},"content":"                return i;","lastModifiedDate":"2021-10-18"},{"lineNumber":186,"author":{"gitId":"mohamad-adam8991"},"content":"            }","lastModifiedDate":"2021-10-18"},{"lineNumber":187,"author":{"gitId":"mohamad-adam8991"},"content":"        }","lastModifiedDate":"2021-10-18"},{"lineNumber":188,"author":{"gitId":"mohamad-adam8991"},"content":"        return currNumOfPeople + 1;","lastModifiedDate":"2021-10-18"},{"lineNumber":189,"author":{"gitId":"mohamad-adam8991"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":190,"author":{"gitId":"mohamad-adam8991"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":191,"author":{"gitId":"mohamad-adam8991"},"content":"    /**","lastModifiedDate":"2021-10-22"},{"lineNumber":192,"author":{"gitId":"mohamad-adam8991"},"content":"     * Function to check if the total number of people in the list will exceed the limit of 99 after adding.","lastModifiedDate":"2021-10-22"},{"lineNumber":193,"author":{"gitId":"mohamad-adam8991"},"content":"     *","lastModifiedDate":"2021-10-22"},{"lineNumber":194,"author":{"gitId":"mohamad-adam8991"},"content":"     * @throws LotsException when the total number of people exceeds the limit after adding.","lastModifiedDate":"2021-10-22"},{"lineNumber":195,"author":{"gitId":"mohamad-adam8991"},"content":"     */","lastModifiedDate":"2021-10-22"},{"lineNumber":196,"author":{"gitId":"mohamad-adam8991"},"content":"    private void checkNumOfPeopleOutOfLimit() throws LotsException {","lastModifiedDate":"2021-10-22"},{"lineNumber":197,"author":{"gitId":"mohamad-adam8991"},"content":"        int currTotalPeople \u003d peopleManager.getSize();","lastModifiedDate":"2021-10-22"},{"lineNumber":198,"author":{"gitId":"mohamad-adam8991"},"content":"        if (currTotalPeople + 1 \u003e 99) {","lastModifiedDate":"2021-10-22"},{"lineNumber":199,"author":{"gitId":"mohamad-adam8991"},"content":"            throw new LotsException(\"Maximum number of people reached! Please make sure the total number of people\"","lastModifiedDate":"2021-10-22"},{"lineNumber":200,"author":{"gitId":"mohamad-adam8991"},"content":"                    + \"ordering is less than 100.\");","lastModifiedDate":"2021-10-22"},{"lineNumber":201,"author":{"gitId":"mohamad-adam8991"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":202,"author":{"gitId":"mohamad-adam8991"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":203,"author":{"gitId":"mohamad-adam8991"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":204,"author":{"gitId":"mohamad-adam8991"},"content":"    /**","lastModifiedDate":"2021-10-22"},{"lineNumber":205,"author":{"gitId":"mohamad-adam8991"},"content":"     * Function to check if the total quantity of orders of every person in the list will exceed the limit of 999 after","lastModifiedDate":"2021-10-22"},{"lineNumber":206,"author":{"gitId":"mohamad-adam8991"},"content":"     * adding.","lastModifiedDate":"2021-10-22"},{"lineNumber":207,"author":{"gitId":"mohamad-adam8991"},"content":"     *","lastModifiedDate":"2021-10-22"},{"lineNumber":208,"author":{"gitId":"mohamad-adam8991"},"content":"     * @throws LotsException when the total quantity of orders exceeds the limit","lastModifiedDate":"2021-10-22"},{"lineNumber":209,"author":{"gitId":"mohamad-adam8991"},"content":"     */","lastModifiedDate":"2021-10-22"},{"lineNumber":210,"author":{"gitId":"mohamad-adam8991"},"content":"    private void checkQuantityOutOfLimit() throws LotsException {","lastModifiedDate":"2021-10-22"},{"lineNumber":211,"author":{"gitId":"mohamad-adam8991"},"content":"        int totalOrderQuantity \u003d foodQuantity;","lastModifiedDate":"2021-10-22"},{"lineNumber":212,"author":{"gitId":"mohamad-adam8991"},"content":"        int currTotalPeople \u003d peopleManager.getSize();","lastModifiedDate":"2021-10-22"},{"lineNumber":213,"author":{"gitId":"mohamad-adam8991"},"content":"        for (int i \u003d 0; i \u003c currTotalPeople; i++) {","lastModifiedDate":"2021-10-22"},{"lineNumber":214,"author":{"gitId":"mohamad-adam8991"},"content":"            Person currPerson \u003d peopleManager.getPerson(i);","lastModifiedDate":"2021-10-22"},{"lineNumber":215,"author":{"gitId":"mohamad-adam8991"},"content":"            int currPersonFoodQuantity \u003d currPerson.getIndividualOrdersQuantity();","lastModifiedDate":"2021-10-22"},{"lineNumber":216,"author":{"gitId":"mohamad-adam8991"},"content":"            totalOrderQuantity \u003d totalOrderQuantity + currPersonFoodQuantity;","lastModifiedDate":"2021-10-22"},{"lineNumber":217,"author":{"gitId":"mohamad-adam8991"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":218,"author":{"gitId":"mohamad-adam8991"},"content":"        if (totalOrderQuantity \u003e 999) {","lastModifiedDate":"2021-10-22"},{"lineNumber":219,"author":{"gitId":"mohamad-adam8991"},"content":"            throw new LotsException(\"Total quantity of food orders has exceeded the limit! \"","lastModifiedDate":"2021-10-22"},{"lineNumber":220,"author":{"gitId":"mohamad-adam8991"},"content":"                    + \"Please make sure that the total quantity of all orders is less than 1000\");","lastModifiedDate":"2021-10-22"},{"lineNumber":221,"author":{"gitId":"mohamad-adam8991"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":222,"author":{"gitId":"mohamad-adam8991"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":223,"author":{"gitId":"mohamad-adam8991"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":224,"author":{"gitId":"WaiKit-nus"},"content":"}","lastModifiedDate":"2021-10-07"}],"authorContributionMap":{"markuslyq":1,"mohamad-adam8991":61,"andrewtkh1":23,"WaiKit-nus":139}},{"path":"src/main/java/seedu/duke/command/ByeCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"andrewtkh1"},"content":"package seedu.duke.command;","lastModifiedDate":"2021-10-12"},{"lineNumber":2,"author":{"gitId":"mohamad-adam8991"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":3,"author":{"gitId":"mohamad-adam8991"},"content":"public class ByeCommand extends Command {","lastModifiedDate":"2021-10-11"},{"lineNumber":4,"author":{"gitId":"mohamad-adam8991"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":5,"author":{"gitId":"mohamad-adam8991"},"content":"    public static final String COMMAND_WORD \u003d \"bye\";","lastModifiedDate":"2021-10-11"},{"lineNumber":6,"author":{"gitId":"mohamad-adam8991"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":7,"author":{"gitId":"mohamad-adam8991"},"content":"    @Override","lastModifiedDate":"2021-10-11"},{"lineNumber":8,"author":{"gitId":"mohamad-adam8991"},"content":"    public void execute() {","lastModifiedDate":"2021-10-11"},{"lineNumber":9,"author":{"gitId":"mohamad-adam8991"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":10,"author":{"gitId":"mohamad-adam8991"},"content":"}","lastModifiedDate":"2021-10-11"}],"authorContributionMap":{"mohamad-adam8991":9,"andrewtkh1":1}},{"path":"src/main/java/seedu/duke/command/Command.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"andrewtkh1"},"content":"package seedu.duke.command;","lastModifiedDate":"2021-10-12"},{"lineNumber":2,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":3,"author":{"gitId":"andrewtkh1"},"content":"import seedu.duke.exceptions.LotsException;","lastModifiedDate":"2021-10-12"},{"lineNumber":4,"author":{"gitId":"andrewtkh1"},"content":"import seedu.duke.PeopleManager;","lastModifiedDate":"2021-10-12"},{"lineNumber":5,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":6,"author":{"gitId":"markuslyq"},"content":"public class Command {","lastModifiedDate":"2021-10-05"},{"lineNumber":7,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":8,"author":{"gitId":"markuslyq"},"content":"    protected PeopleManager peopleManager;","lastModifiedDate":"2021-10-08"},{"lineNumber":9,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":10,"author":{"gitId":"markuslyq"},"content":"    //Constructor","lastModifiedDate":"2021-10-05"},{"lineNumber":11,"author":{"gitId":"markuslyq"},"content":"    public Command() {","lastModifiedDate":"2021-10-05"},{"lineNumber":12,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":13,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":14,"author":{"gitId":"markuslyq"},"content":"    /**","lastModifiedDate":"2021-10-05"},{"lineNumber":15,"author":{"gitId":"markuslyq"},"content":"     * Initialise the person list to be edited by the user.","lastModifiedDate":"2021-10-05"},{"lineNumber":16,"author":{"gitId":"markuslyq"},"content":"     */","lastModifiedDate":"2021-10-05"},{"lineNumber":17,"author":{"gitId":"markuslyq"},"content":"    public void setData(PeopleManager manager) {","lastModifiedDate":"2021-10-08"},{"lineNumber":18,"author":{"gitId":"markuslyq"},"content":"        peopleManager \u003d manager;","lastModifiedDate":"2021-10-08"},{"lineNumber":19,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":20,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":21,"author":{"gitId":"markuslyq"},"content":"    /**","lastModifiedDate":"2021-10-05"},{"lineNumber":22,"author":{"gitId":"markuslyq"},"content":"     * Execute different set of instructions in the subclass based on the user\u0027s command.","lastModifiedDate":"2021-10-05"},{"lineNumber":23,"author":{"gitId":"markuslyq"},"content":"     */","lastModifiedDate":"2021-10-05"},{"lineNumber":24,"author":{"gitId":"markuslyq"},"content":"    public void execute() throws LotsException {","lastModifiedDate":"2021-10-08"},{"lineNumber":25,"author":{"gitId":"markuslyq"},"content":"        throw new UnsupportedOperationException(\"This method is to be implemented by child classes\");","lastModifiedDate":"2021-10-05"},{"lineNumber":26,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":27,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":28,"author":{"gitId":"markuslyq"},"content":"}","lastModifiedDate":"2021-10-05"}],"authorContributionMap":{"markuslyq":24,"andrewtkh1":4}},{"path":"src/main/java/seedu/duke/command/DeleteCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"andrewtkh1"},"content":"package seedu.duke.command;","lastModifiedDate":"2021-10-12"},{"lineNumber":2,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":3,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":4,"author":{"gitId":"andrewtkh1"},"content":"import seedu.duke.exceptions.LotsException;","lastModifiedDate":"2021-10-12"},{"lineNumber":5,"author":{"gitId":"andrewtkh1"},"content":"import seedu.duke.PeopleManager;","lastModifiedDate":"2021-10-12"},{"lineNumber":6,"author":{"gitId":"andrewtkh1"},"content":"import seedu.duke.Person;","lastModifiedDate":"2021-10-12"},{"lineNumber":7,"author":{"gitId":"andrewtkh1"},"content":"import seedu.duke.Ui;","lastModifiedDate":"2021-10-12"},{"lineNumber":8,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":9,"author":{"gitId":"markuslyq"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2021-10-12"},{"lineNumber":10,"author":{"gitId":"markuslyq"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2021-10-12"},{"lineNumber":11,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":12,"author":{"gitId":"markuslyq"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2021-10-08"},{"lineNumber":13,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":14,"author":{"gitId":"markuslyq"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";","lastModifiedDate":"2021-10-08"},{"lineNumber":15,"author":{"gitId":"markuslyq"},"content":"    private int personIndex;","lastModifiedDate":"2021-10-08"},{"lineNumber":16,"author":{"gitId":"andrewtkh1"},"content":"    private int foodIndex;","lastModifiedDate":"2021-10-12"},{"lineNumber":17,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":18,"author":{"gitId":"markuslyq"},"content":"    /**","lastModifiedDate":"2021-10-08"},{"lineNumber":19,"author":{"gitId":"markuslyq"},"content":"     * Splits the input given the regular expression of a whitespace and","lastModifiedDate":"2021-10-08"},{"lineNumber":20,"author":{"gitId":"markuslyq"},"content":"     * initialise the personIndex and orderIndex.","lastModifiedDate":"2021-10-08"},{"lineNumber":21,"author":{"gitId":"markuslyq"},"content":"     *","lastModifiedDate":"2021-10-08"},{"lineNumber":22,"author":{"gitId":"markuslyq"},"content":"     * @param input The entire line of command entered by the user.","lastModifiedDate":"2021-10-08"},{"lineNumber":23,"author":{"gitId":"markuslyq"},"content":"     * @throws LotsException If there is no input after the delete command or when the personIndex is not an integer.","lastModifiedDate":"2021-10-08"},{"lineNumber":24,"author":{"gitId":"markuslyq"},"content":"     */","lastModifiedDate":"2021-10-08"},{"lineNumber":25,"author":{"gitId":"markuslyq"},"content":"    public DeleteCommand(String input) throws LotsException {","lastModifiedDate":"2021-10-08"},{"lineNumber":26,"author":{"gitId":"markuslyq"},"content":"        String[] splitInput \u003d input.split(\" \");","lastModifiedDate":"2021-10-08"},{"lineNumber":27,"author":{"gitId":"markuslyq"},"content":"        if (!checkUserInput(input)) {","lastModifiedDate":"2021-10-12"},{"lineNumber":28,"author":{"gitId":"markuslyq"},"content":"            throw new LotsException(\"Please enter a valid person\u0027s index followed by the order index! i.e. delete 1/a\");","lastModifiedDate":"2021-10-12"},{"lineNumber":29,"author":{"gitId":"markuslyq"},"content":"        }","lastModifiedDate":"2021-10-12"},{"lineNumber":30,"author":{"gitId":"markuslyq"},"content":"        assert checkUserInput(input) \u003d\u003d true : \"Invalid delete input command\";","lastModifiedDate":"2021-10-12"},{"lineNumber":31,"author":{"gitId":"markuslyq"},"content":"        try {","lastModifiedDate":"2021-10-08"},{"lineNumber":32,"author":{"gitId":"markuslyq"},"content":"            personIndex \u003d getPersonIndex(splitInput[1]);","lastModifiedDate":"2021-10-08"},{"lineNumber":33,"author":{"gitId":"markuslyq"},"content":"            foodIndex \u003d getFoodIndex(splitInput[1]);","lastModifiedDate":"2021-10-19"},{"lineNumber":34,"author":{"gitId":"markuslyq"},"content":"        } catch (NullPointerException | IndexOutOfBoundsException | NumberFormatException e) {","lastModifiedDate":"2021-10-08"},{"lineNumber":35,"author":{"gitId":"markuslyq"},"content":"            throw new LotsException(\"Please enter a valid person\u0027s index followed by the order index! i.e. delete 1/a\");","lastModifiedDate":"2021-10-12"},{"lineNumber":36,"author":{"gitId":"markuslyq"},"content":"        }","lastModifiedDate":"2021-10-12"},{"lineNumber":37,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":38,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":39,"author":{"gitId":"markuslyq"},"content":"    /**","lastModifiedDate":"2021-10-12"},{"lineNumber":40,"author":{"gitId":"markuslyq"},"content":"     * Regex to check User Input before passing onto the class.","lastModifiedDate":"2021-10-12"},{"lineNumber":41,"author":{"gitId":"markuslyq"},"content":"     *","lastModifiedDate":"2021-10-12"},{"lineNumber":42,"author":{"gitId":"markuslyq"},"content":"     * @param input user input.","lastModifiedDate":"2021-10-12"},{"lineNumber":43,"author":{"gitId":"markuslyq"},"content":"     * @return a boolean true if the user input passes the regex.","lastModifiedDate":"2021-10-12"},{"lineNumber":44,"author":{"gitId":"markuslyq"},"content":"     * @throws IllegalArgumentException when the pattern for Regex is not able to be interpreted.","lastModifiedDate":"2021-10-12"},{"lineNumber":45,"author":{"gitId":"markuslyq"},"content":"     */","lastModifiedDate":"2021-10-12"},{"lineNumber":46,"author":{"gitId":"markuslyq"},"content":"    private boolean checkUserInput(String input) throws IllegalArgumentException {","lastModifiedDate":"2021-10-12"},{"lineNumber":47,"author":{"gitId":"markuslyq"},"content":"        try {","lastModifiedDate":"2021-10-12"},{"lineNumber":48,"author":{"gitId":"markuslyq"},"content":"            Pattern pattern \u003d Pattern.compile(","lastModifiedDate":"2021-10-12"},{"lineNumber":49,"author":{"gitId":"andrewtkh1"},"content":"                \"^delete [1-9][0-9]?/[1-9][0-9]?$\", //max 99 food orders per pax","lastModifiedDate":"2021-10-16"},{"lineNumber":50,"author":{"gitId":"markuslyq"},"content":"                Pattern.CASE_INSENSITIVE);","lastModifiedDate":"2021-10-12"},{"lineNumber":51,"author":{"gitId":"markuslyq"},"content":"            Matcher matcher \u003d pattern.matcher(input);","lastModifiedDate":"2021-10-12"},{"lineNumber":52,"author":{"gitId":"markuslyq"},"content":"            return matcher.find();","lastModifiedDate":"2021-10-12"},{"lineNumber":53,"author":{"gitId":"markuslyq"},"content":"        } catch (IllegalArgumentException e) {","lastModifiedDate":"2021-10-12"},{"lineNumber":54,"author":{"gitId":"markuslyq"},"content":"            return false;","lastModifiedDate":"2021-10-12"},{"lineNumber":55,"author":{"gitId":"markuslyq"},"content":"        }","lastModifiedDate":"2021-10-08"},{"lineNumber":56,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":57,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":58,"author":{"gitId":"markuslyq"},"content":"    /**","lastModifiedDate":"2021-10-08"},{"lineNumber":59,"author":{"gitId":"markuslyq"},"content":"     * Get the index of the person whose order is to be deleted.","lastModifiedDate":"2021-10-08"},{"lineNumber":60,"author":{"gitId":"markuslyq"},"content":"     *","lastModifiedDate":"2021-10-08"},{"lineNumber":61,"author":{"gitId":"markuslyq"},"content":"     * @param deleteParams String from the user input after the delete command word.","lastModifiedDate":"2021-10-08"},{"lineNumber":62,"author":{"gitId":"markuslyq"},"content":"     * @return Returns the index of the person in the form of an integer.","lastModifiedDate":"2021-10-08"},{"lineNumber":63,"author":{"gitId":"andrewtkh1"},"content":"     * @throws IndexOutOfBoundsException When \"/\" is not found in the string.","lastModifiedDate":"2021-10-08"},{"lineNumber":64,"author":{"gitId":"andrewtkh1"},"content":"     * @throws NumberFormatException     When the person index can\u0027t be parsed into an integer.","lastModifiedDate":"2021-10-08"},{"lineNumber":65,"author":{"gitId":"markuslyq"},"content":"     */","lastModifiedDate":"2021-10-08"},{"lineNumber":66,"author":{"gitId":"andrewtkh1"},"content":"    private int getPersonIndex(String deleteParams) throws IndexOutOfBoundsException, NumberFormatException {","lastModifiedDate":"2021-10-08"},{"lineNumber":67,"author":{"gitId":"markuslyq"},"content":"        int slashIndex \u003d deleteParams.indexOf(\u0027/\u0027);","lastModifiedDate":"2021-10-08"},{"lineNumber":68,"author":{"gitId":"markuslyq"},"content":"        String personIndexInString \u003d deleteParams.substring(0, slashIndex);","lastModifiedDate":"2021-10-08"},{"lineNumber":69,"author":{"gitId":"andrewtkh1"},"content":"        return Integer.parseInt(personIndexInString) - 1;","lastModifiedDate":"2021-10-11"},{"lineNumber":70,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":71,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":72,"author":{"gitId":"markuslyq"},"content":"    /**","lastModifiedDate":"2021-10-08"},{"lineNumber":73,"author":{"gitId":"markuslyq"},"content":"     * Get the index of the order to be deleted.","lastModifiedDate":"2021-10-08"},{"lineNumber":74,"author":{"gitId":"markuslyq"},"content":"     *","lastModifiedDate":"2021-10-08"},{"lineNumber":75,"author":{"gitId":"markuslyq"},"content":"     * @param deleteParams String from the user input after the delete command word.","lastModifiedDate":"2021-10-08"},{"lineNumber":76,"author":{"gitId":"markuslyq"},"content":"     * @return Returns the index of the order to be deleted in the form of an integer.","lastModifiedDate":"2021-10-12"},{"lineNumber":77,"author":{"gitId":"andrewtkh1"},"content":"     * @throws IndexOutOfBoundsException When \"/\" is not found in the string.","lastModifiedDate":"2021-10-08"},{"lineNumber":78,"author":{"gitId":"markuslyq"},"content":"     * @throws LotsException             When the order index is out of range.","lastModifiedDate":"2021-10-11"},{"lineNumber":79,"author":{"gitId":"markuslyq"},"content":"     */","lastModifiedDate":"2021-10-08"},{"lineNumber":80,"author":{"gitId":"markuslyq"},"content":"    private int getFoodIndex(String deleteParams) throws IndexOutOfBoundsException, LotsException {","lastModifiedDate":"2021-10-19"},{"lineNumber":81,"author":{"gitId":"markuslyq"},"content":"        int slashIndex \u003d deleteParams.indexOf(\u0027/\u0027);","lastModifiedDate":"2021-10-08"},{"lineNumber":82,"author":{"gitId":"markuslyq"},"content":"        String foodIndexInString \u003d deleteParams.substring(slashIndex + 1);","lastModifiedDate":"2021-10-19"},{"lineNumber":83,"author":{"gitId":"markuslyq"},"content":"        int foodIndexInInteger \u003d Integer.parseInt(foodIndexInString) - 1;","lastModifiedDate":"2021-10-19"},{"lineNumber":84,"author":{"gitId":"markuslyq"},"content":"        if (foodIndexInInteger \u003c 0) {","lastModifiedDate":"2021-10-19"},{"lineNumber":85,"author":{"gitId":"markuslyq"},"content":"            throw new LotsException(\"Please enter a valid order index!\");","lastModifiedDate":"2021-10-11"},{"lineNumber":86,"author":{"gitId":"markuslyq"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":87,"author":{"gitId":"markuslyq"},"content":"        assert foodIndexInInteger \u003e\u003d 0 : \"Order index cannot be negative.\";","lastModifiedDate":"2021-10-19"},{"lineNumber":88,"author":{"gitId":"markuslyq"},"content":"        return foodIndexInInteger;","lastModifiedDate":"2021-10-19"},{"lineNumber":89,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":90,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":91,"author":{"gitId":"markuslyq"},"content":"    /**","lastModifiedDate":"2021-10-08"},{"lineNumber":92,"author":{"gitId":"markuslyq"},"content":"     * Deletes a specific order from a particular person.","lastModifiedDate":"2021-10-08"},{"lineNumber":93,"author":{"gitId":"markuslyq"},"content":"     *","lastModifiedDate":"2021-10-08"},{"lineNumber":94,"author":{"gitId":"markuslyq"},"content":"     * @throws LotsException If the order or person\u0027s index to be deleted is out of bounds.","lastModifiedDate":"2021-10-08"},{"lineNumber":95,"author":{"gitId":"markuslyq"},"content":"     */","lastModifiedDate":"2021-10-08"},{"lineNumber":96,"author":{"gitId":"markuslyq"},"content":"    @Override","lastModifiedDate":"2021-10-08"},{"lineNumber":97,"author":{"gitId":"markuslyq"},"content":"    public void execute() throws LotsException {","lastModifiedDate":"2021-10-08"},{"lineNumber":98,"author":{"gitId":"markuslyq"},"content":"        try {","lastModifiedDate":"2021-10-08"},{"lineNumber":99,"author":{"gitId":"andrewtkh1"},"content":"            deleteOrder(super.peopleManager);","lastModifiedDate":"2021-10-16"},{"lineNumber":100,"author":{"gitId":"markuslyq"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2021-10-08"},{"lineNumber":101,"author":{"gitId":"markuslyq"},"content":"            throw new LotsException(\"Please enter a valid person\u0027s index followed by the order index! i.e. delete 1/a\");","lastModifiedDate":"2021-10-12"},{"lineNumber":102,"author":{"gitId":"markuslyq"},"content":"        }","lastModifiedDate":"2021-10-08"},{"lineNumber":103,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":104,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":105,"author":{"gitId":"markuslyq"},"content":"    /**","lastModifiedDate":"2021-10-08"},{"lineNumber":106,"author":{"gitId":"markuslyq"},"content":"     * Change the quantity of that particular order index to 0.","lastModifiedDate":"2021-10-08"},{"lineNumber":107,"author":{"gitId":"markuslyq"},"content":"     *","lastModifiedDate":"2021-10-08"},{"lineNumber":108,"author":{"gitId":"markuslyq"},"content":"     * @param manager The list of people that are ordering.","lastModifiedDate":"2021-10-08"},{"lineNumber":109,"author":{"gitId":"andrewtkh1"},"content":"     * @throws IndexOutOfBoundsException Throws when personIndex given is larger than the number of people.","lastModifiedDate":"2021-10-08"},{"lineNumber":110,"author":{"gitId":"markuslyq"},"content":"     */","lastModifiedDate":"2021-10-08"},{"lineNumber":111,"author":{"gitId":"markuslyq"},"content":"    private void deleteOrder(PeopleManager manager) throws IndexOutOfBoundsException, LotsException {","lastModifiedDate":"2021-10-11"},{"lineNumber":112,"author":{"gitId":"markuslyq"},"content":"        if (manager.isEmpty()) {","lastModifiedDate":"2021-10-12"},{"lineNumber":113,"author":{"gitId":"markuslyq"},"content":"            Ui.printEmptyMessage();","lastModifiedDate":"2021-10-12"},{"lineNumber":114,"author":{"gitId":"markuslyq"},"content":"        } else {","lastModifiedDate":"2021-10-12"},{"lineNumber":115,"author":{"gitId":"markuslyq"},"content":"            Person personToDeleteFrom \u003d manager.getPerson(personIndex);","lastModifiedDate":"2021-10-11"},{"lineNumber":116,"author":{"gitId":"markuslyq"},"content":"            assert personToDeleteFrom !\u003d null : \"Person does not exists.\";","lastModifiedDate":"2021-10-12"},{"lineNumber":117,"author":{"gitId":"andrewtkh1"},"content":"            personToDeleteFrom.deleteParticularOrder(foodIndex);","lastModifiedDate":"2021-10-12"},{"lineNumber":118,"author":{"gitId":"markuslyq"},"content":"            Ui.printDeleteMessage(personToDeleteFrom, foodIndex);","lastModifiedDate":"2021-10-19"},{"lineNumber":119,"author":{"gitId":"markuslyq"},"content":"            deletePersonIfEmpty(manager, personToDeleteFrom);","lastModifiedDate":"2021-10-12"},{"lineNumber":120,"author":{"gitId":"markuslyq"},"content":"        }","lastModifiedDate":"2021-10-12"},{"lineNumber":121,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":122,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":123,"author":{"gitId":"markuslyq"},"content":"    /**","lastModifiedDate":"2021-10-12"},{"lineNumber":124,"author":{"gitId":"markuslyq"},"content":"     * Removes the person the list if his individual order list is empty.","lastModifiedDate":"2021-10-12"},{"lineNumber":125,"author":{"gitId":"markuslyq"},"content":"     *","lastModifiedDate":"2021-10-12"},{"lineNumber":126,"author":{"gitId":"markuslyq"},"content":"     * @param manager            The list of people that are ordering.","lastModifiedDate":"2021-10-12"},{"lineNumber":127,"author":{"gitId":"markuslyq"},"content":"     * @param personToDeleteFrom Person whose order is to be deleted from.","lastModifiedDate":"2021-10-12"},{"lineNumber":128,"author":{"gitId":"markuslyq"},"content":"     * @throws LotsException When there is an error in removing the person from the people manager.","lastModifiedDate":"2021-10-12"},{"lineNumber":129,"author":{"gitId":"markuslyq"},"content":"     */","lastModifiedDate":"2021-10-12"},{"lineNumber":130,"author":{"gitId":"markuslyq"},"content":"    private void deletePersonIfEmpty(PeopleManager manager, Person personToDeleteFrom) throws LotsException {","lastModifiedDate":"2021-10-12"},{"lineNumber":131,"author":{"gitId":"markuslyq"},"content":"        if (personToDeleteFrom.isEmpty()) {","lastModifiedDate":"2021-10-12"},{"lineNumber":132,"author":{"gitId":"andrewtkh1"},"content":"            manager.deletePerson(personIndex);","lastModifiedDate":"2021-10-11"},{"lineNumber":133,"author":{"gitId":"markuslyq"},"content":"        }","lastModifiedDate":"2021-10-12"},{"lineNumber":134,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":135,"author":{"gitId":"markuslyq"},"content":"}","lastModifiedDate":"2021-10-08"}],"authorContributionMap":{"markuslyq":117,"andrewtkh1":18}},{"path":"src/main/java/seedu/duke/command/EditCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"thaddyyz"},"content":"package seedu.duke.command;","lastModifiedDate":"2021-10-16"},{"lineNumber":2,"author":{"gitId":"thaddyyz"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":3,"author":{"gitId":"thaddyyz"},"content":"import seedu.duke.exceptions.LotsException;","lastModifiedDate":"2021-10-16"},{"lineNumber":4,"author":{"gitId":"thaddyyz"},"content":"import seedu.duke.PeopleManager;","lastModifiedDate":"2021-10-16"},{"lineNumber":5,"author":{"gitId":"thaddyyz"},"content":"import seedu.duke.Person;","lastModifiedDate":"2021-10-16"},{"lineNumber":6,"author":{"gitId":"thaddyyz"},"content":"import seedu.duke.Ui;","lastModifiedDate":"2021-10-16"},{"lineNumber":7,"author":{"gitId":"thaddyyz"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":8,"author":{"gitId":"thaddyyz"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2021-10-16"},{"lineNumber":9,"author":{"gitId":"thaddyyz"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2021-10-16"},{"lineNumber":10,"author":{"gitId":"thaddyyz"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":11,"author":{"gitId":"thaddyyz"},"content":"public class EditCommand extends Command {","lastModifiedDate":"2021-10-16"},{"lineNumber":12,"author":{"gitId":"thaddyyz"},"content":"    ","lastModifiedDate":"2021-10-16"},{"lineNumber":13,"author":{"gitId":"thaddyyz"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";","lastModifiedDate":"2021-10-16"},{"lineNumber":14,"author":{"gitId":"thaddyyz"},"content":"    private int personIndex;","lastModifiedDate":"2021-10-16"},{"lineNumber":15,"author":{"gitId":"thaddyyz"},"content":"    private int foodIndex;","lastModifiedDate":"2021-10-16"},{"lineNumber":16,"author":{"gitId":"thaddyyz"},"content":"    private int quantity;","lastModifiedDate":"2021-10-16"},{"lineNumber":17,"author":{"gitId":"thaddyyz"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":18,"author":{"gitId":"thaddyyz"},"content":"    /**","lastModifiedDate":"2021-10-16"},{"lineNumber":19,"author":{"gitId":"thaddyyz"},"content":"     * Splits the input given the regular expression of a whitespace and","lastModifiedDate":"2021-10-16"},{"lineNumber":20,"author":{"gitId":"thaddyyz"},"content":"     * initialise the personIndex, orderIndex and quantity.","lastModifiedDate":"2021-10-16"},{"lineNumber":21,"author":{"gitId":"thaddyyz"},"content":"     * ","lastModifiedDate":"2021-10-16"},{"lineNumber":22,"author":{"gitId":"thaddyyz"},"content":"     * @param input The entire line of command entered by the user.","lastModifiedDate":"2021-10-16"},{"lineNumber":23,"author":{"gitId":"thaddyyz"},"content":"     * @throws LotsException If there is no input after the edit command or when the personIndex,","lastModifiedDate":"2021-10-16"},{"lineNumber":24,"author":{"gitId":"thaddyyz"},"content":"     *     foodIndex or quantity is not a positive integer.","lastModifiedDate":"2021-10-16"},{"lineNumber":25,"author":{"gitId":"thaddyyz"},"content":"     */","lastModifiedDate":"2021-10-16"},{"lineNumber":26,"author":{"gitId":"thaddyyz"},"content":"    public EditCommand(String input) throws LotsException {","lastModifiedDate":"2021-10-16"},{"lineNumber":27,"author":{"gitId":"thaddyyz"},"content":"        String[] splitInput \u003d input.split(\" \");","lastModifiedDate":"2021-10-16"},{"lineNumber":28,"author":{"gitId":"thaddyyz"},"content":"        if (!checkUserInput(input)) {","lastModifiedDate":"2021-10-16"},{"lineNumber":29,"author":{"gitId":"thaddyyz"},"content":"            throw new LotsException(\"Please enter a valid person\u0027s index followed by the order index\"","lastModifiedDate":"2021-10-16"},{"lineNumber":30,"author":{"gitId":"thaddyyz"},"content":"                                    + \" and order quantity! i.e. edit 1/1 /q 8\");","lastModifiedDate":"2021-10-17"},{"lineNumber":31,"author":{"gitId":"thaddyyz"},"content":"        }","lastModifiedDate":"2021-10-16"},{"lineNumber":32,"author":{"gitId":"thaddyyz"},"content":"        assert checkUserInput(input) \u003d\u003d true : \"Invalid edit input command\";","lastModifiedDate":"2021-10-16"},{"lineNumber":33,"author":{"gitId":"thaddyyz"},"content":"        try {","lastModifiedDate":"2021-10-16"},{"lineNumber":34,"author":{"gitId":"thaddyyz"},"content":"            personIndex \u003d getPersonIndex(splitInput[1]);","lastModifiedDate":"2021-10-16"},{"lineNumber":35,"author":{"gitId":"thaddyyz"},"content":"            foodIndex \u003d getOrderIndex(splitInput[1]);","lastModifiedDate":"2021-10-16"},{"lineNumber":36,"author":{"gitId":"thaddyyz"},"content":"            quantity \u003d getQuantity(splitInput[3]);","lastModifiedDate":"2021-10-16"},{"lineNumber":37,"author":{"gitId":"thaddyyz"},"content":"        } catch (NullPointerException | IndexOutOfBoundsException | NumberFormatException e) {","lastModifiedDate":"2021-10-16"},{"lineNumber":38,"author":{"gitId":"thaddyyz"},"content":"            throw new LotsException(\"Please enter a valid person\u0027s index followed by the order index\"","lastModifiedDate":"2021-10-16"},{"lineNumber":39,"author":{"gitId":"thaddyyz"},"content":"                                    + \" and order quantity! i.e. edit 1/1 /q 8\");","lastModifiedDate":"2021-10-16"},{"lineNumber":40,"author":{"gitId":"thaddyyz"},"content":"        }","lastModifiedDate":"2021-10-16"},{"lineNumber":41,"author":{"gitId":"thaddyyz"},"content":"    }","lastModifiedDate":"2021-10-16"},{"lineNumber":42,"author":{"gitId":"thaddyyz"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":43,"author":{"gitId":"thaddyyz"},"content":"    /**","lastModifiedDate":"2021-10-16"},{"lineNumber":44,"author":{"gitId":"thaddyyz"},"content":"     * Regex to check User Input before passing onto the class.","lastModifiedDate":"2021-10-16"},{"lineNumber":45,"author":{"gitId":"thaddyyz"},"content":"     * ","lastModifiedDate":"2021-10-16"},{"lineNumber":46,"author":{"gitId":"thaddyyz"},"content":"     * @param input The entire line of command entered by the user.","lastModifiedDate":"2021-10-16"},{"lineNumber":47,"author":{"gitId":"thaddyyz"},"content":"     * @return a boolean true if the user input passes the regex.","lastModifiedDate":"2021-10-16"},{"lineNumber":48,"author":{"gitId":"thaddyyz"},"content":"     */","lastModifiedDate":"2021-10-16"},{"lineNumber":49,"author":{"gitId":"thaddyyz"},"content":"    private boolean checkUserInput(String input) {","lastModifiedDate":"2021-10-17"},{"lineNumber":50,"author":{"gitId":"thaddyyz"},"content":"        try {","lastModifiedDate":"2021-10-16"},{"lineNumber":51,"author":{"gitId":"thaddyyz"},"content":"            Pattern pattern \u003d Pattern.compile(","lastModifiedDate":"2021-10-16"},{"lineNumber":52,"author":{"gitId":"thaddyyz"},"content":"                \"^edit [1-9][0-9]?/[1-9][0-9]? /q \\\\d{1,3}?$\", //max 99 food orders and quantity per pax","lastModifiedDate":"2021-10-17"},{"lineNumber":53,"author":{"gitId":"thaddyyz"},"content":"                Pattern.CASE_INSENSITIVE);","lastModifiedDate":"2021-10-16"},{"lineNumber":54,"author":{"gitId":"thaddyyz"},"content":"            Matcher matcher \u003d pattern.matcher(input);","lastModifiedDate":"2021-10-16"},{"lineNumber":55,"author":{"gitId":"thaddyyz"},"content":"            return matcher.find();","lastModifiedDate":"2021-10-16"},{"lineNumber":56,"author":{"gitId":"thaddyyz"},"content":"        } catch (IllegalArgumentException e) {","lastModifiedDate":"2021-10-16"},{"lineNumber":57,"author":{"gitId":"thaddyyz"},"content":"            return false;","lastModifiedDate":"2021-10-16"},{"lineNumber":58,"author":{"gitId":"thaddyyz"},"content":"        }","lastModifiedDate":"2021-10-16"},{"lineNumber":59,"author":{"gitId":"thaddyyz"},"content":"    }","lastModifiedDate":"2021-10-16"},{"lineNumber":60,"author":{"gitId":"thaddyyz"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":61,"author":{"gitId":"thaddyyz"},"content":"    /**","lastModifiedDate":"2021-10-16"},{"lineNumber":62,"author":{"gitId":"thaddyyz"},"content":"     * Get the index of the person whose order is to be edited.","lastModifiedDate":"2021-10-16"},{"lineNumber":63,"author":{"gitId":"thaddyyz"},"content":"     * ","lastModifiedDate":"2021-10-16"},{"lineNumber":64,"author":{"gitId":"thaddyyz"},"content":"     * @param editParams String from the user input after the edit command word.","lastModifiedDate":"2021-10-16"},{"lineNumber":65,"author":{"gitId":"thaddyyz"},"content":"     * @return Returns the index of the person in the form of an integer.","lastModifiedDate":"2021-10-16"},{"lineNumber":66,"author":{"gitId":"thaddyyz"},"content":"     * @throws IndexOutOfBoundsException When \"/\" is not found in the string.","lastModifiedDate":"2021-10-16"},{"lineNumber":67,"author":{"gitId":"thaddyyz"},"content":"     * @throws NumberFormatException When the person index can\u0027t be parsed into an integer.","lastModifiedDate":"2021-10-16"},{"lineNumber":68,"author":{"gitId":"thaddyyz"},"content":"     */","lastModifiedDate":"2021-10-16"},{"lineNumber":69,"author":{"gitId":"thaddyyz"},"content":"    private int getPersonIndex(String editParams) throws IndexOutOfBoundsException, NumberFormatException {","lastModifiedDate":"2021-10-16"},{"lineNumber":70,"author":{"gitId":"thaddyyz"},"content":"        int slashIndex \u003d editParams.indexOf(\u0027/\u0027);","lastModifiedDate":"2021-10-16"},{"lineNumber":71,"author":{"gitId":"thaddyyz"},"content":"        String personIndexInString \u003d editParams.substring(0, slashIndex);","lastModifiedDate":"2021-10-16"},{"lineNumber":72,"author":{"gitId":"thaddyyz"},"content":"        return Integer.parseInt(personIndexInString) - 1;","lastModifiedDate":"2021-10-16"},{"lineNumber":73,"author":{"gitId":"thaddyyz"},"content":"    }","lastModifiedDate":"2021-10-16"},{"lineNumber":74,"author":{"gitId":"thaddyyz"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":75,"author":{"gitId":"thaddyyz"},"content":"    /**","lastModifiedDate":"2021-10-16"},{"lineNumber":76,"author":{"gitId":"thaddyyz"},"content":"     * Get the index of the order to be edited.","lastModifiedDate":"2021-10-16"},{"lineNumber":77,"author":{"gitId":"thaddyyz"},"content":"     * ","lastModifiedDate":"2021-10-16"},{"lineNumber":78,"author":{"gitId":"thaddyyz"},"content":"     * @param editParams String from the user input after the edit command word.","lastModifiedDate":"2021-10-16"},{"lineNumber":79,"author":{"gitId":"thaddyyz"},"content":"     * @return Returns the index of the order to be edited in the form of an integer.","lastModifiedDate":"2021-10-16"},{"lineNumber":80,"author":{"gitId":"thaddyyz"},"content":"     * @throws IndexOutOfBoundsException When \"/\" is not found in the string.","lastModifiedDate":"2021-10-16"},{"lineNumber":81,"author":{"gitId":"thaddyyz"},"content":"     * @throws LotsException When the order index is out of range.","lastModifiedDate":"2021-10-16"},{"lineNumber":82,"author":{"gitId":"thaddyyz"},"content":"     */","lastModifiedDate":"2021-10-16"},{"lineNumber":83,"author":{"gitId":"thaddyyz"},"content":"    private int getOrderIndex(String editParams) throws IndexOutOfBoundsException, LotsException {","lastModifiedDate":"2021-10-16"},{"lineNumber":84,"author":{"gitId":"thaddyyz"},"content":"        int slashIndex \u003d editParams.indexOf(\u0027/\u0027);","lastModifiedDate":"2021-10-16"},{"lineNumber":85,"author":{"gitId":"thaddyyz"},"content":"        String orderIndexInString \u003d editParams.substring(slashIndex + 1);","lastModifiedDate":"2021-10-16"},{"lineNumber":86,"author":{"gitId":"thaddyyz"},"content":"        int orderIndexInInteger \u003d Integer.parseInt(orderIndexInString) - 1;","lastModifiedDate":"2021-10-16"},{"lineNumber":87,"author":{"gitId":"thaddyyz"},"content":"        if (orderIndexInInteger \u003c 0) {","lastModifiedDate":"2021-10-16"},{"lineNumber":88,"author":{"gitId":"thaddyyz"},"content":"            throw new LotsException(\"Please enter a valid order index!\");","lastModifiedDate":"2021-10-16"},{"lineNumber":89,"author":{"gitId":"thaddyyz"},"content":"        }","lastModifiedDate":"2021-10-16"},{"lineNumber":90,"author":{"gitId":"thaddyyz"},"content":"        assert orderIndexInInteger \u003e\u003d 0 : \"Order index cannot be negative.\";","lastModifiedDate":"2021-10-16"},{"lineNumber":91,"author":{"gitId":"thaddyyz"},"content":"        return orderIndexInInteger;","lastModifiedDate":"2021-10-16"},{"lineNumber":92,"author":{"gitId":"thaddyyz"},"content":"    }","lastModifiedDate":"2021-10-16"},{"lineNumber":93,"author":{"gitId":"thaddyyz"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":94,"author":{"gitId":"thaddyyz"},"content":"    /**","lastModifiedDate":"2021-10-16"},{"lineNumber":95,"author":{"gitId":"thaddyyz"},"content":"     * Get the edited quantity.","lastModifiedDate":"2021-10-16"},{"lineNumber":96,"author":{"gitId":"thaddyyz"},"content":"     * ","lastModifiedDate":"2021-10-16"},{"lineNumber":97,"author":{"gitId":"thaddyyz"},"content":"     * @param editParams String from the user input after /q.","lastModifiedDate":"2021-10-16"},{"lineNumber":98,"author":{"gitId":"thaddyyz"},"content":"     * @return Returns the edited quantity in the form of an integer.","lastModifiedDate":"2021-10-16"},{"lineNumber":99,"author":{"gitId":"thaddyyz"},"content":"     * @throws LotsException When the quantity is out of range.","lastModifiedDate":"2021-10-16"},{"lineNumber":100,"author":{"gitId":"thaddyyz"},"content":"     */","lastModifiedDate":"2021-10-16"},{"lineNumber":101,"author":{"gitId":"thaddyyz"},"content":"    private int getQuantity(String editParams) throws LotsException {","lastModifiedDate":"2021-10-16"},{"lineNumber":102,"author":{"gitId":"thaddyyz"},"content":"        int quantityInInteger \u003d Integer.parseInt(editParams);","lastModifiedDate":"2021-10-16"},{"lineNumber":103,"author":{"gitId":"thaddyyz"},"content":"        if (quantityInInteger \u003c 0) {","lastModifiedDate":"2021-10-16"},{"lineNumber":104,"author":{"gitId":"thaddyyz"},"content":"            throw new LotsException(\"Please enter a valid quantity number!\");","lastModifiedDate":"2021-10-16"},{"lineNumber":105,"author":{"gitId":"thaddyyz"},"content":"        }","lastModifiedDate":"2021-10-16"},{"lineNumber":106,"author":{"gitId":"thaddyyz"},"content":"        assert quantityInInteger \u003e\u003d 0 : \"Quantity number cannot be negative.\";","lastModifiedDate":"2021-10-16"},{"lineNumber":107,"author":{"gitId":"thaddyyz"},"content":"        return quantityInInteger;","lastModifiedDate":"2021-10-16"},{"lineNumber":108,"author":{"gitId":"thaddyyz"},"content":"    }","lastModifiedDate":"2021-10-16"},{"lineNumber":109,"author":{"gitId":"thaddyyz"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":110,"author":{"gitId":"thaddyyz"},"content":"    /**","lastModifiedDate":"2021-10-16"},{"lineNumber":111,"author":{"gitId":"thaddyyz"},"content":"     * Edits the quantity of a specific order from a particular person.","lastModifiedDate":"2021-10-16"},{"lineNumber":112,"author":{"gitId":"thaddyyz"},"content":"     *","lastModifiedDate":"2021-10-16"},{"lineNumber":113,"author":{"gitId":"thaddyyz"},"content":"     * @throws LotsException If the order or person\u0027s index to be deleted is out of bounds.","lastModifiedDate":"2021-10-16"},{"lineNumber":114,"author":{"gitId":"thaddyyz"},"content":"     */","lastModifiedDate":"2021-10-16"},{"lineNumber":115,"author":{"gitId":"thaddyyz"},"content":"    @Override","lastModifiedDate":"2021-10-16"},{"lineNumber":116,"author":{"gitId":"thaddyyz"},"content":"    public void execute() throws LotsException {","lastModifiedDate":"2021-10-16"},{"lineNumber":117,"author":{"gitId":"thaddyyz"},"content":"        try {","lastModifiedDate":"2021-10-16"},{"lineNumber":118,"author":{"gitId":"thaddyyz"},"content":"            editOrder(super.peopleManager);","lastModifiedDate":"2021-10-16"},{"lineNumber":119,"author":{"gitId":"thaddyyz"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2021-10-16"},{"lineNumber":120,"author":{"gitId":"thaddyyz"},"content":"            throw new LotsException(\"Please enter a valid person\u0027s index followed by the order index\"","lastModifiedDate":"2021-10-16"},{"lineNumber":121,"author":{"gitId":"thaddyyz"},"content":"                                    + \" and order quantity! i.e. edit 1/1 /q 8\");","lastModifiedDate":"2021-10-16"},{"lineNumber":122,"author":{"gitId":"thaddyyz"},"content":"        }","lastModifiedDate":"2021-10-16"},{"lineNumber":123,"author":{"gitId":"thaddyyz"},"content":"    }","lastModifiedDate":"2021-10-16"},{"lineNumber":124,"author":{"gitId":"thaddyyz"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":125,"author":{"gitId":"thaddyyz"},"content":"    /**","lastModifiedDate":"2021-10-16"},{"lineNumber":126,"author":{"gitId":"thaddyyz"},"content":"     * Change the quantity of that particular order index to the specified quantity.","lastModifiedDate":"2021-10-16"},{"lineNumber":127,"author":{"gitId":"thaddyyz"},"content":"     * ","lastModifiedDate":"2021-10-16"},{"lineNumber":128,"author":{"gitId":"thaddyyz"},"content":"     * @param manager The list of people that are ordering.","lastModifiedDate":"2021-10-16"},{"lineNumber":129,"author":{"gitId":"thaddyyz"},"content":"     * @throws IndexOutOfBoundsException Throws when personIndex given is larger than the number of people.","lastModifiedDate":"2021-10-16"},{"lineNumber":130,"author":{"gitId":"thaddyyz"},"content":"     * @throws LotsException When there is an error in editing the quanity in Person.","lastModifiedDate":"2021-10-16"},{"lineNumber":131,"author":{"gitId":"thaddyyz"},"content":"     */","lastModifiedDate":"2021-10-16"},{"lineNumber":132,"author":{"gitId":"thaddyyz"},"content":"    private void editOrder(PeopleManager manager) throws IndexOutOfBoundsException, LotsException {","lastModifiedDate":"2021-10-16"},{"lineNumber":133,"author":{"gitId":"thaddyyz"},"content":"        if (manager.isEmpty()) {","lastModifiedDate":"2021-10-16"},{"lineNumber":134,"author":{"gitId":"thaddyyz"},"content":"            Ui.printEmptyMessage();","lastModifiedDate":"2021-10-16"},{"lineNumber":135,"author":{"gitId":"thaddyyz"},"content":"        } else {","lastModifiedDate":"2021-10-16"},{"lineNumber":136,"author":{"gitId":"thaddyyz"},"content":"            Person personToEditFrom \u003d manager.getPerson(personIndex);","lastModifiedDate":"2021-10-16"},{"lineNumber":137,"author":{"gitId":"thaddyyz"},"content":"            assert personToEditFrom !\u003d null : \"Person does not exists.\";","lastModifiedDate":"2021-10-16"},{"lineNumber":138,"author":{"gitId":"thaddyyz"},"content":"            personToEditFrom.editParticularOrder(foodIndex, quantity);","lastModifiedDate":"2021-10-16"},{"lineNumber":139,"author":{"gitId":"thaddyyz"},"content":"            Ui.printEditMessage(personToEditFrom, foodIndex);","lastModifiedDate":"2021-10-16"},{"lineNumber":140,"author":{"gitId":"thaddyyz"},"content":"            //delete order if quantity 0","lastModifiedDate":"2021-10-16"},{"lineNumber":141,"author":{"gitId":"thaddyyz"},"content":"            deletePersonIfEmpty(manager, personToEditFrom);","lastModifiedDate":"2021-10-16"},{"lineNumber":142,"author":{"gitId":"thaddyyz"},"content":"        }","lastModifiedDate":"2021-10-16"},{"lineNumber":143,"author":{"gitId":"thaddyyz"},"content":"    }","lastModifiedDate":"2021-10-16"},{"lineNumber":144,"author":{"gitId":"thaddyyz"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":145,"author":{"gitId":"thaddyyz"},"content":"    /**","lastModifiedDate":"2021-10-16"},{"lineNumber":146,"author":{"gitId":"thaddyyz"},"content":"     * Removes the person the list if his individual order list is empty.","lastModifiedDate":"2021-10-16"},{"lineNumber":147,"author":{"gitId":"thaddyyz"},"content":"     *","lastModifiedDate":"2021-10-16"},{"lineNumber":148,"author":{"gitId":"thaddyyz"},"content":"     * @param manager The list of people that are ordering.","lastModifiedDate":"2021-10-16"},{"lineNumber":149,"author":{"gitId":"thaddyyz"},"content":"     * @param personToDeleteFrom Person whose order is to be deleted from.","lastModifiedDate":"2021-10-16"},{"lineNumber":150,"author":{"gitId":"thaddyyz"},"content":"     * @throws LotsException When there is an error in removing the person from the people manager.","lastModifiedDate":"2021-10-16"},{"lineNumber":151,"author":{"gitId":"thaddyyz"},"content":"     */","lastModifiedDate":"2021-10-16"},{"lineNumber":152,"author":{"gitId":"thaddyyz"},"content":"    private void deletePersonIfEmpty(PeopleManager manager, Person personToDeleteFrom) throws LotsException {","lastModifiedDate":"2021-10-16"},{"lineNumber":153,"author":{"gitId":"thaddyyz"},"content":"        if (personToDeleteFrom.isEmpty()) {","lastModifiedDate":"2021-10-16"},{"lineNumber":154,"author":{"gitId":"thaddyyz"},"content":"            manager.deletePerson(personIndex);","lastModifiedDate":"2021-10-16"},{"lineNumber":155,"author":{"gitId":"thaddyyz"},"content":"        }","lastModifiedDate":"2021-10-16"},{"lineNumber":156,"author":{"gitId":"thaddyyz"},"content":"    }","lastModifiedDate":"2021-10-16"},{"lineNumber":157,"author":{"gitId":"thaddyyz"},"content":"}","lastModifiedDate":"2021-10-16"}],"authorContributionMap":{"thaddyyz":157}},{"path":"src/main/java/seedu/duke/command/FindCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"andrewtkh1"},"content":"package seedu.duke.command;","lastModifiedDate":"2021-10-18"},{"lineNumber":2,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":3,"author":{"gitId":"andrewtkh1"},"content":"import seedu.duke.Person;","lastModifiedDate":"2021-10-18"},{"lineNumber":4,"author":{"gitId":"andrewtkh1"},"content":"import seedu.duke.Ui;","lastModifiedDate":"2021-10-18"},{"lineNumber":5,"author":{"gitId":"andrewtkh1"},"content":"import seedu.duke.exceptions.LotsException;","lastModifiedDate":"2021-10-18"},{"lineNumber":6,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":7,"author":{"gitId":"andrewtkh1"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2021-10-18"},{"lineNumber":8,"author":{"gitId":"andrewtkh1"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2021-10-18"},{"lineNumber":9,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":10,"author":{"gitId":"andrewtkh1"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2021-10-18"},{"lineNumber":11,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":12,"author":{"gitId":"andrewtkh1"},"content":"    public static final String COMMAND_WORD \u003d \"find\";","lastModifiedDate":"2021-10-18"},{"lineNumber":13,"author":{"gitId":"andrewtkh1"},"content":"    private String stringToFind;","lastModifiedDate":"2021-10-18"},{"lineNumber":14,"author":{"gitId":"andrewtkh1"},"content":"    private static final String REGEX \u003d \"^find /n [a-zA-Z0-9][\\\\w ]{0,50}$\";","lastModifiedDate":"2021-10-18"},{"lineNumber":15,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":16,"author":{"gitId":"andrewtkh1"},"content":"    public FindCommand(String input) throws LotsException {","lastModifiedDate":"2021-10-18"},{"lineNumber":17,"author":{"gitId":"andrewtkh1"},"content":"        if (checkUserInput(input)) {","lastModifiedDate":"2021-10-18"},{"lineNumber":18,"author":{"gitId":"andrewtkh1"},"content":"            stringToFind \u003d getSearchString(input).toLowerCase();","lastModifiedDate":"2021-10-18"},{"lineNumber":19,"author":{"gitId":"andrewtkh1"},"content":"        } else {","lastModifiedDate":"2021-10-18"},{"lineNumber":20,"author":{"gitId":"andrewtkh1"},"content":"            throw new LotsException(\"Wrong format for command Find. E.g) find /n \u003cString to find\u003e\");","lastModifiedDate":"2021-10-18"},{"lineNumber":21,"author":{"gitId":"andrewtkh1"},"content":"        }","lastModifiedDate":"2021-10-18"},{"lineNumber":22,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":23,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":24,"author":{"gitId":"andrewtkh1"},"content":"    /**","lastModifiedDate":"2021-10-18"},{"lineNumber":25,"author":{"gitId":"andrewtkh1"},"content":"     * Checks if the search is contained in any of the names","lastModifiedDate":"2021-10-18"},{"lineNumber":26,"author":{"gitId":"andrewtkh1"},"content":"     * of the current order. If yes, prints it out.","lastModifiedDate":"2021-10-18"},{"lineNumber":27,"author":{"gitId":"andrewtkh1"},"content":"     * If not, prints the no names matched line.","lastModifiedDate":"2021-10-18"},{"lineNumber":28,"author":{"gitId":"andrewtkh1"},"content":"     *","lastModifiedDate":"2021-10-18"},{"lineNumber":29,"author":{"gitId":"andrewtkh1"},"content":"     * @throws LotsException If there\u0027s any error that only an admin can resolve.","lastModifiedDate":"2021-10-18"},{"lineNumber":30,"author":{"gitId":"andrewtkh1"},"content":"     */","lastModifiedDate":"2021-10-18"},{"lineNumber":31,"author":{"gitId":"andrewtkh1"},"content":"    @Override","lastModifiedDate":"2021-10-18"},{"lineNumber":32,"author":{"gitId":"andrewtkh1"},"content":"    public void execute() throws LotsException {","lastModifiedDate":"2021-10-18"},{"lineNumber":33,"author":{"gitId":"andrewtkh1"},"content":"        boolean hasMatch;","lastModifiedDate":"2021-10-18"},{"lineNumber":34,"author":{"gitId":"andrewtkh1"},"content":"        hasMatch \u003d checkIfMatchAndPrint();","lastModifiedDate":"2021-10-18"},{"lineNumber":35,"author":{"gitId":"andrewtkh1"},"content":"        if (!hasMatch) {","lastModifiedDate":"2021-10-18"},{"lineNumber":36,"author":{"gitId":"andrewtkh1"},"content":"            Ui.printWithBorder(\"No names matched your input.\");","lastModifiedDate":"2021-10-18"},{"lineNumber":37,"author":{"gitId":"andrewtkh1"},"content":"        }","lastModifiedDate":"2021-10-18"},{"lineNumber":38,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":39,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":40,"author":{"gitId":"andrewtkh1"},"content":"    /**","lastModifiedDate":"2021-10-18"},{"lineNumber":41,"author":{"gitId":"andrewtkh1"},"content":"     * Returns true if there was a match with the search input given,","lastModifiedDate":"2021-10-18"},{"lineNumber":42,"author":{"gitId":"andrewtkh1"},"content":"     * false otherwise.","lastModifiedDate":"2021-10-18"},{"lineNumber":43,"author":{"gitId":"andrewtkh1"},"content":"     *","lastModifiedDate":"2021-10-18"},{"lineNumber":44,"author":{"gitId":"andrewtkh1"},"content":"     * @return True if there was a match, else false.","lastModifiedDate":"2021-10-18"},{"lineNumber":45,"author":{"gitId":"andrewtkh1"},"content":"     * @throws LotsException LotsException If there is an error in the indexing.","lastModifiedDate":"2021-10-18"},{"lineNumber":46,"author":{"gitId":"andrewtkh1"},"content":"     */","lastModifiedDate":"2021-10-18"},{"lineNumber":47,"author":{"gitId":"andrewtkh1"},"content":"    private boolean checkIfMatchAndPrint() throws LotsException {","lastModifiedDate":"2021-10-18"},{"lineNumber":48,"author":{"gitId":"andrewtkh1"},"content":"        int totalPeople \u003d super.peopleManager.getSize();","lastModifiedDate":"2021-10-18"},{"lineNumber":49,"author":{"gitId":"andrewtkh1"},"content":"        Person currentPerson;","lastModifiedDate":"2021-10-18"},{"lineNumber":50,"author":{"gitId":"andrewtkh1"},"content":"        boolean hasMatch \u003d false;","lastModifiedDate":"2021-10-18"},{"lineNumber":51,"author":{"gitId":"andrewtkh1"},"content":"        assert stringToFind !\u003d null : \"stringToFind Cannot be null\";","lastModifiedDate":"2021-10-18"},{"lineNumber":52,"author":{"gitId":"andrewtkh1"},"content":"        try {","lastModifiedDate":"2021-10-18"},{"lineNumber":53,"author":{"gitId":"andrewtkh1"},"content":"            for (int i \u003d 0; i \u003c totalPeople; i++) {","lastModifiedDate":"2021-10-18"},{"lineNumber":54,"author":{"gitId":"andrewtkh1"},"content":"                currentPerson \u003d super.peopleManager.getPerson(i);","lastModifiedDate":"2021-10-18"},{"lineNumber":55,"author":{"gitId":"andrewtkh1"},"content":"                String name \u003d currentPerson.getPersonName().toLowerCase();","lastModifiedDate":"2021-10-18"},{"lineNumber":56,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":57,"author":{"gitId":"andrewtkh1"},"content":"                if (name.contains(stringToFind)) {","lastModifiedDate":"2021-10-18"},{"lineNumber":58,"author":{"gitId":"andrewtkh1"},"content":"                    Ui.printWithoutBorder((i + 1) + \") \" + name + \":\");","lastModifiedDate":"2021-10-18"},{"lineNumber":59,"author":{"gitId":"andrewtkh1"},"content":"                    Ui.printIndividualPersonOrder(currentPerson);","lastModifiedDate":"2021-10-18"},{"lineNumber":60,"author":{"gitId":"andrewtkh1"},"content":"                    hasMatch \u003d true;","lastModifiedDate":"2021-10-18"},{"lineNumber":61,"author":{"gitId":"andrewtkh1"},"content":"                }","lastModifiedDate":"2021-10-18"},{"lineNumber":62,"author":{"gitId":"andrewtkh1"},"content":"            }","lastModifiedDate":"2021-10-18"},{"lineNumber":63,"author":{"gitId":"andrewtkh1"},"content":"            Ui.printWithBorder(\"\");","lastModifiedDate":"2021-10-18"},{"lineNumber":64,"author":{"gitId":"andrewtkh1"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2021-10-18"},{"lineNumber":65,"author":{"gitId":"andrewtkh1"},"content":"            throw new LotsException(\"Find command error! Please contact an admin.\");","lastModifiedDate":"2021-10-18"},{"lineNumber":66,"author":{"gitId":"andrewtkh1"},"content":"        }","lastModifiedDate":"2021-10-18"},{"lineNumber":67,"author":{"gitId":"andrewtkh1"},"content":"        return hasMatch;","lastModifiedDate":"2021-10-18"},{"lineNumber":68,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":69,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":70,"author":{"gitId":"andrewtkh1"},"content":"    /**","lastModifiedDate":"2021-10-18"},{"lineNumber":71,"author":{"gitId":"andrewtkh1"},"content":"     * Returns the string that the user wishes to search for.","lastModifiedDate":"2021-10-18"},{"lineNumber":72,"author":{"gitId":"andrewtkh1"},"content":"     *","lastModifiedDate":"2021-10-18"},{"lineNumber":73,"author":{"gitId":"andrewtkh1"},"content":"     * @param input The user input in String.","lastModifiedDate":"2021-10-18"},{"lineNumber":74,"author":{"gitId":"andrewtkh1"},"content":"     * @return The substring that the user wants to search.","lastModifiedDate":"2021-10-18"},{"lineNumber":75,"author":{"gitId":"andrewtkh1"},"content":"     * @throws LotsException If unable to find","lastModifiedDate":"2021-10-18"},{"lineNumber":76,"author":{"gitId":"andrewtkh1"},"content":"     */","lastModifiedDate":"2021-10-18"},{"lineNumber":77,"author":{"gitId":"andrewtkh1"},"content":"    private String getSearchString(String input) throws LotsException {","lastModifiedDate":"2021-10-18"},{"lineNumber":78,"author":{"gitId":"andrewtkh1"},"content":"        String stringToReturn;","lastModifiedDate":"2021-10-18"},{"lineNumber":79,"author":{"gitId":"andrewtkh1"},"content":"        assert input !\u003d null : \"Input string cannot be null\";","lastModifiedDate":"2021-10-18"},{"lineNumber":80,"author":{"gitId":"andrewtkh1"},"content":"        int indexOfSlash \u003d getIndexOfSlash(input);","lastModifiedDate":"2021-10-18"},{"lineNumber":81,"author":{"gitId":"andrewtkh1"},"content":"        try {","lastModifiedDate":"2021-10-18"},{"lineNumber":82,"author":{"gitId":"andrewtkh1"},"content":"            stringToReturn \u003d input.substring(indexOfSlash).strip();","lastModifiedDate":"2021-10-18"},{"lineNumber":83,"author":{"gitId":"andrewtkh1"},"content":"            return stringToReturn;","lastModifiedDate":"2021-10-18"},{"lineNumber":84,"author":{"gitId":"andrewtkh1"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2021-10-18"},{"lineNumber":85,"author":{"gitId":"andrewtkh1"},"content":"            throw new LotsException(\"Error in Find command. Please contact an Admin.\");","lastModifiedDate":"2021-10-18"},{"lineNumber":86,"author":{"gitId":"andrewtkh1"},"content":"        }","lastModifiedDate":"2021-10-18"},{"lineNumber":87,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":88,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":89,"author":{"gitId":"andrewtkh1"},"content":"    /**","lastModifiedDate":"2021-10-18"},{"lineNumber":90,"author":{"gitId":"andrewtkh1"},"content":"     * Returns the index + 2 of the first \"/\"  in the input.","lastModifiedDate":"2021-10-18"},{"lineNumber":91,"author":{"gitId":"andrewtkh1"},"content":"     * else, throws a LotsException.","lastModifiedDate":"2021-10-18"},{"lineNumber":92,"author":{"gitId":"andrewtkh1"},"content":"     *","lastModifiedDate":"2021-10-18"},{"lineNumber":93,"author":{"gitId":"andrewtkh1"},"content":"     * @param input The String containing whole user input.","lastModifiedDate":"2021-10-18"},{"lineNumber":94,"author":{"gitId":"andrewtkh1"},"content":"     * @return Returns the index + 2 of the first \"/\"","lastModifiedDate":"2021-10-18"},{"lineNumber":95,"author":{"gitId":"andrewtkh1"},"content":"     * @throws LotsException Thrown if unable to find a \"/\" in the input.","lastModifiedDate":"2021-10-18"},{"lineNumber":96,"author":{"gitId":"andrewtkh1"},"content":"     */","lastModifiedDate":"2021-10-18"},{"lineNumber":97,"author":{"gitId":"andrewtkh1"},"content":"    private int getIndexOfSlash(String input) throws LotsException {","lastModifiedDate":"2021-10-18"},{"lineNumber":98,"author":{"gitId":"andrewtkh1"},"content":"        int index;","lastModifiedDate":"2021-10-18"},{"lineNumber":99,"author":{"gitId":"andrewtkh1"},"content":"        index \u003d input.indexOf(\"/\") + 2; // +2 to skip over /n","lastModifiedDate":"2021-10-18"},{"lineNumber":100,"author":{"gitId":"andrewtkh1"},"content":"        assert index \u003e\u003d 1 : \"/ index in find command cannot be less than 1 (-1 + 2).\";","lastModifiedDate":"2021-10-18"},{"lineNumber":101,"author":{"gitId":"andrewtkh1"},"content":"        if (index \u003d\u003d 1) {","lastModifiedDate":"2021-10-18"},{"lineNumber":102,"author":{"gitId":"andrewtkh1"},"content":"            throw new LotsException(\"Wrong format for command Find! /n is not found in input.\");","lastModifiedDate":"2021-10-18"},{"lineNumber":103,"author":{"gitId":"andrewtkh1"},"content":"        }","lastModifiedDate":"2021-10-18"},{"lineNumber":104,"author":{"gitId":"andrewtkh1"},"content":"        return index;","lastModifiedDate":"2021-10-18"},{"lineNumber":105,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":106,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":107,"author":{"gitId":"andrewtkh1"},"content":"    /**","lastModifiedDate":"2021-10-18"},{"lineNumber":108,"author":{"gitId":"andrewtkh1"},"content":"     * Returns true if input matches the regex provided,","lastModifiedDate":"2021-10-18"},{"lineNumber":109,"author":{"gitId":"andrewtkh1"},"content":"     * else false.","lastModifiedDate":"2021-10-18"},{"lineNumber":110,"author":{"gitId":"andrewtkh1"},"content":"     *","lastModifiedDate":"2021-10-18"},{"lineNumber":111,"author":{"gitId":"andrewtkh1"},"content":"     * @param input The user input in String.","lastModifiedDate":"2021-10-18"},{"lineNumber":112,"author":{"gitId":"andrewtkh1"},"content":"     * @return True if the user input matches the regex. Else false.","lastModifiedDate":"2021-10-18"},{"lineNumber":113,"author":{"gitId":"andrewtkh1"},"content":"     * @throws IllegalArgumentException Thrown when there is a pattern error.","lastModifiedDate":"2021-10-18"},{"lineNumber":114,"author":{"gitId":"andrewtkh1"},"content":"     */","lastModifiedDate":"2021-10-18"},{"lineNumber":115,"author":{"gitId":"andrewtkh1"},"content":"    private boolean checkUserInput(String input) {","lastModifiedDate":"2021-10-18"},{"lineNumber":116,"author":{"gitId":"andrewtkh1"},"content":"        try {","lastModifiedDate":"2021-10-18"},{"lineNumber":117,"author":{"gitId":"andrewtkh1"},"content":"            Pattern pattern \u003d Pattern.compile(REGEX, Pattern.CASE_INSENSITIVE);","lastModifiedDate":"2021-10-18"},{"lineNumber":118,"author":{"gitId":"andrewtkh1"},"content":"            Matcher matcher \u003d pattern.matcher(input);","lastModifiedDate":"2021-10-18"},{"lineNumber":119,"author":{"gitId":"andrewtkh1"},"content":"            boolean matchFound \u003d matcher.find();","lastModifiedDate":"2021-10-18"},{"lineNumber":120,"author":{"gitId":"andrewtkh1"},"content":"            return matchFound;","lastModifiedDate":"2021-10-18"},{"lineNumber":121,"author":{"gitId":"andrewtkh1"},"content":"        } catch (IllegalArgumentException e) {","lastModifiedDate":"2021-10-18"},{"lineNumber":122,"author":{"gitId":"andrewtkh1"},"content":"            return false;","lastModifiedDate":"2021-10-18"},{"lineNumber":123,"author":{"gitId":"andrewtkh1"},"content":"        }","lastModifiedDate":"2021-10-18"},{"lineNumber":124,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":125,"author":{"gitId":"andrewtkh1"},"content":"}","lastModifiedDate":"2021-10-18"}],"authorContributionMap":{"andrewtkh1":125}},{"path":"src/main/java/seedu/duke/command/MenuCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"andrewtkh1"},"content":"package seedu.duke.command;","lastModifiedDate":"2021-10-12"},{"lineNumber":2,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":3,"author":{"gitId":"andrewtkh1"},"content":"import seedu.duke.Menu;","lastModifiedDate":"2021-10-12"},{"lineNumber":4,"author":{"gitId":"andrewtkh1"},"content":"import seedu.duke.Ui;","lastModifiedDate":"2021-10-12"},{"lineNumber":5,"author":{"gitId":"WaiKit-nus"},"content":"import seedu.duke.exceptions.LotsException;","lastModifiedDate":"2021-10-26"},{"lineNumber":6,"author":{"gitId":"thaddyyz"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":7,"author":{"gitId":"thaddyyz"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-09"},{"lineNumber":8,"author":{"gitId":"thaddyyz"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":9,"author":{"gitId":"thaddyyz"},"content":"public class MenuCommand extends Command {","lastModifiedDate":"2021-10-09"},{"lineNumber":10,"author":{"gitId":"thaddyyz"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":11,"author":{"gitId":"andrewtkh1"},"content":"    public static final String COMMAND_WORD \u003d \"menu\";","lastModifiedDate":"2021-10-10"},{"lineNumber":12,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":13,"author":{"gitId":"andrewtkh1"},"content":"    private ArrayList\u003cDouble\u003e priceList;","lastModifiedDate":"2021-10-16"},{"lineNumber":14,"author":{"gitId":"andrewtkh1"},"content":"    private ArrayList\u003cString\u003e foodList;","lastModifiedDate":"2021-10-16"},{"lineNumber":15,"author":{"gitId":"thaddyyz"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":16,"author":{"gitId":"thaddyyz"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":17,"author":{"gitId":"thaddyyz"},"content":"     * MenuCommand calls access to file to retrieve stored menu.","lastModifiedDate":"2021-10-10"},{"lineNumber":18,"author":{"gitId":"andrewtkh1"},"content":"     */","lastModifiedDate":"2021-10-10"},{"lineNumber":19,"author":{"gitId":"WaiKit-nus"},"content":"    public MenuCommand(String input) throws LotsException {","lastModifiedDate":"2021-10-26"},{"lineNumber":20,"author":{"gitId":"WaiKit-nus"},"content":"        String[] splitInput \u003d input.split(\" \");","lastModifiedDate":"2021-10-26"},{"lineNumber":21,"author":{"gitId":"WaiKit-nus"},"content":"        if (splitInput.length \u003e 1) {","lastModifiedDate":"2021-10-26"},{"lineNumber":22,"author":{"gitId":"WaiKit-nus"},"content":"            throw new LotsException(\"Please make sure there is no inputs after the menu command!\");","lastModifiedDate":"2021-10-26"},{"lineNumber":23,"author":{"gitId":"WaiKit-nus"},"content":"        } else {","lastModifiedDate":"2021-10-26"},{"lineNumber":24,"author":{"gitId":"andrewtkh1"},"content":"            priceList \u003d Menu.PRICELIST;","lastModifiedDate":"2021-10-12"},{"lineNumber":25,"author":{"gitId":"andrewtkh1"},"content":"            foodList \u003d Menu.FOODLIST;","lastModifiedDate":"2021-10-12"},{"lineNumber":26,"author":{"gitId":"thaddyyz"},"content":"        }","lastModifiedDate":"2021-10-10"},{"lineNumber":27,"author":{"gitId":"WaiKit-nus"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":28,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":29,"author":{"gitId":"thaddyyz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":30,"author":{"gitId":"thaddyyz"},"content":"    /**","lastModifiedDate":"2021-10-10"},{"lineNumber":31,"author":{"gitId":"andrewtkh1"},"content":"     * Prints menu in the format of index, foodname and price with column headers.","lastModifiedDate":"2021-10-10"},{"lineNumber":32,"author":{"gitId":"thaddyyz"},"content":"     */","lastModifiedDate":"2021-10-10"},{"lineNumber":33,"author":{"gitId":"thaddyyz"},"content":"    @Override","lastModifiedDate":"2021-10-10"},{"lineNumber":34,"author":{"gitId":"thaddyyz"},"content":"    public void execute() {","lastModifiedDate":"2021-10-10"},{"lineNumber":35,"author":{"gitId":"WaiKit-nus"},"content":"        Ui.printMenu(priceList,foodList);","lastModifiedDate":"2021-10-26"},{"lineNumber":36,"author":{"gitId":"thaddyyz"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":37,"author":{"gitId":"thaddyyz"},"content":"}","lastModifiedDate":"2021-10-09"}],"authorContributionMap":{"andrewtkh1":12,"WaiKit-nus":9,"thaddyyz":16}},{"path":"src/main/java/seedu/duke/command/OrdersCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"andrewtkh1"},"content":"package seedu.duke.command;","lastModifiedDate":"2021-10-12"},{"lineNumber":2,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":3,"author":{"gitId":"andrewtkh1"},"content":"import seedu.duke.Ui;","lastModifiedDate":"2021-10-12"},{"lineNumber":4,"author":{"gitId":"mohamad-adam8991"},"content":"import seedu.duke.exceptions.LotsException;","lastModifiedDate":"2021-10-12"},{"lineNumber":5,"author":{"gitId":"mohamad-adam8991"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":6,"author":{"gitId":"mohamad-adam8991"},"content":"public class OrdersCommand extends Command {","lastModifiedDate":"2021-10-08"},{"lineNumber":7,"author":{"gitId":"mohamad-adam8991"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":8,"author":{"gitId":"mohamad-adam8991"},"content":"    public static final String COMMAND_WORD \u003d \"list\";","lastModifiedDate":"2021-10-08"},{"lineNumber":9,"author":{"gitId":"mohamad-adam8991"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":10,"author":{"gitId":"mohamad-adam8991"},"content":"    /**","lastModifiedDate":"2021-10-12"},{"lineNumber":11,"author":{"gitId":"mohamad-adam8991"},"content":"     * Checks input for characters after list command.","lastModifiedDate":"2021-10-12"},{"lineNumber":12,"author":{"gitId":"mohamad-adam8991"},"content":"     *","lastModifiedDate":"2021-10-12"},{"lineNumber":13,"author":{"gitId":"mohamad-adam8991"},"content":"     * @param input Input entered by the user.","lastModifiedDate":"2021-10-12"},{"lineNumber":14,"author":{"gitId":"mohamad-adam8991"},"content":"     * @throws LotsException If characters exist in the input after the list command.","lastModifiedDate":"2021-10-12"},{"lineNumber":15,"author":{"gitId":"mohamad-adam8991"},"content":"     */","lastModifiedDate":"2021-10-12"},{"lineNumber":16,"author":{"gitId":"mohamad-adam8991"},"content":"    public OrdersCommand(String input) throws LotsException {","lastModifiedDate":"2021-10-12"},{"lineNumber":17,"author":{"gitId":"mohamad-adam8991"},"content":"        String[] splitInput \u003d input.split(\" \");","lastModifiedDate":"2021-10-12"},{"lineNumber":18,"author":{"gitId":"mohamad-adam8991"},"content":"        if (splitInput.length \u003e 1) {","lastModifiedDate":"2021-10-12"},{"lineNumber":19,"author":{"gitId":"mohamad-adam8991"},"content":"            throw new LotsException(\"Please make sure there is no inputs after the list command!\");","lastModifiedDate":"2021-10-12"},{"lineNumber":20,"author":{"gitId":"mohamad-adam8991"},"content":"        }","lastModifiedDate":"2021-10-12"},{"lineNumber":21,"author":{"gitId":"mohamad-adam8991"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":22,"author":{"gitId":"mohamad-adam8991"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":23,"author":{"gitId":"mohamad-adam8991"},"content":"    /**","lastModifiedDate":"2021-10-08"},{"lineNumber":24,"author":{"gitId":"mohamad-adam8991"},"content":"     * Prints all the current orders.","lastModifiedDate":"2021-10-08"},{"lineNumber":25,"author":{"gitId":"mohamad-adam8991"},"content":"     */","lastModifiedDate":"2021-10-08"},{"lineNumber":26,"author":{"gitId":"mohamad-adam8991"},"content":"    @Override","lastModifiedDate":"2021-10-08"},{"lineNumber":27,"author":{"gitId":"mohamad-adam8991"},"content":"    public void execute() throws LotsException {","lastModifiedDate":"2021-10-12"},{"lineNumber":28,"author":{"gitId":"andrewtkh1"},"content":"        Ui.printOrdersList(super.peopleManager);","lastModifiedDate":"2021-10-16"},{"lineNumber":29,"author":{"gitId":"mohamad-adam8991"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":30,"author":{"gitId":"mohamad-adam8991"},"content":"}","lastModifiedDate":"2021-10-08"}],"authorContributionMap":{"mohamad-adam8991":26,"andrewtkh1":4}},{"path":"src/main/java/seedu/duke/command/UnknownCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"andrewtkh1"},"content":"package seedu.duke.command;","lastModifiedDate":"2021-10-12"},{"lineNumber":2,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":3,"author":{"gitId":"andrewtkh1"},"content":"import seedu.duke.Ui;","lastModifiedDate":"2021-10-12"},{"lineNumber":4,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":5,"author":{"gitId":"andrewtkh1"},"content":"/**","lastModifiedDate":"2021-10-05"},{"lineNumber":6,"author":{"gitId":"andrewtkh1"},"content":" * The command class in the command","lastModifiedDate":"2021-10-05"},{"lineNumber":7,"author":{"gitId":"andrewtkh1"},"content":" * is unknown.","lastModifiedDate":"2021-10-05"},{"lineNumber":8,"author":{"gitId":"andrewtkh1"},"content":" */","lastModifiedDate":"2021-10-05"},{"lineNumber":9,"author":{"gitId":"andrewtkh1"},"content":"public class UnknownCommand extends Command {","lastModifiedDate":"2021-10-05"},{"lineNumber":10,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":11,"author":{"gitId":"andrewtkh1"},"content":"    public void execute() {","lastModifiedDate":"2021-10-05"},{"lineNumber":12,"author":{"gitId":"andrewtkh1"},"content":"        Ui.printWithBorder(\"Unknown command. Please try again.\");","lastModifiedDate":"2021-10-11"},{"lineNumber":13,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":14,"author":{"gitId":"andrewtkh1"},"content":"}","lastModifiedDate":"2021-10-05"}],"authorContributionMap":{"andrewtkh1":14}},{"path":"src/main/java/seedu/duke/exceptions/LotsException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"andrewtkh1"},"content":"package seedu.duke.exceptions;","lastModifiedDate":"2021-10-12"},{"lineNumber":2,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":3,"author":{"gitId":"markuslyq"},"content":"public class LotsException extends Exception {","lastModifiedDate":"2021-10-08"},{"lineNumber":4,"author":{"gitId":"markuslyq"},"content":"    public LotsException(String errorMessage) {","lastModifiedDate":"2021-10-08"},{"lineNumber":5,"author":{"gitId":"markuslyq"},"content":"        super(errorMessage);","lastModifiedDate":"2021-10-08"},{"lineNumber":6,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":7,"author":{"gitId":"markuslyq"},"content":"}","lastModifiedDate":"2021-10-08"}],"authorContributionMap":{"markuslyq":6,"andrewtkh1":1}},{"path":"src/test/java/seedu/duke/AddCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"WaiKit-nus"},"content":"package seedu.duke;","lastModifiedDate":"2021-10-12"},{"lineNumber":2,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":3,"author":{"gitId":"mohamad-adam8991"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2021-10-18"},{"lineNumber":4,"author":{"gitId":"WaiKit-nus"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-12"},{"lineNumber":5,"author":{"gitId":"mohamad-adam8991"},"content":"import seedu.duke.command.AddCommand;","lastModifiedDate":"2021-10-18"},{"lineNumber":6,"author":{"gitId":"andrewtkh1"},"content":"import seedu.duke.command.Command;","lastModifiedDate":"2021-10-12"},{"lineNumber":7,"author":{"gitId":"andrewtkh1"},"content":"import seedu.duke.exceptions.LotsException;","lastModifiedDate":"2021-10-12"},{"lineNumber":8,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":9,"author":{"gitId":"mohamad-adam8991"},"content":"import java.util.LongSummaryStatistics;","lastModifiedDate":"2021-10-22"},{"lineNumber":10,"author":{"gitId":"mohamad-adam8991"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":11,"author":{"gitId":"mohamad-adam8991"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-18"},{"lineNumber":12,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":13,"author":{"gitId":"WaiKit-nus"},"content":"public class AddCommandTest {","lastModifiedDate":"2021-10-12"},{"lineNumber":14,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":15,"author":{"gitId":"mohamad-adam8991"},"content":"    protected PeopleManager peopleManager \u003d new PeopleManager();","lastModifiedDate":"2021-10-18"},{"lineNumber":16,"author":{"gitId":"mohamad-adam8991"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":17,"author":{"gitId":"mohamad-adam8991"},"content":"    @BeforeEach","lastModifiedDate":"2021-10-18"},{"lineNumber":18,"author":{"gitId":"mohamad-adam8991"},"content":"     void setUp() throws LotsException {","lastModifiedDate":"2021-10-18"},{"lineNumber":19,"author":{"gitId":"mohamad-adam8991"},"content":"        String[] names \u003d {\"Adam\", \"Markus\", \"Andrew\"};","lastModifiedDate":"2021-10-18"},{"lineNumber":20,"author":{"gitId":"mohamad-adam8991"},"content":"        String[] foodIndex \u003d {\"2\", \"3\", \"4\"};","lastModifiedDate":"2021-10-18"},{"lineNumber":21,"author":{"gitId":"mohamad-adam8991"},"content":"        PeopleManager.clearListOfPeople();","lastModifiedDate":"2021-10-18"},{"lineNumber":22,"author":{"gitId":"mohamad-adam8991"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":23,"author":{"gitId":"mohamad-adam8991"},"content":"        for (int i \u003d 0; i \u003c 3; i++) {","lastModifiedDate":"2021-10-18"},{"lineNumber":24,"author":{"gitId":"mohamad-adam8991"},"content":"            String sampleInput \u003d \"add /n \" + names[i] + \" /i \" + foodIndex[i] + \" /q 1\";","lastModifiedDate":"2021-10-18"},{"lineNumber":25,"author":{"gitId":"mohamad-adam8991"},"content":"            Command command \u003d new AddCommand(sampleInput);","lastModifiedDate":"2021-10-18"},{"lineNumber":26,"author":{"gitId":"mohamad-adam8991"},"content":"            command.setData(peopleManager);","lastModifiedDate":"2021-10-18"},{"lineNumber":27,"author":{"gitId":"mohamad-adam8991"},"content":"            command.execute();","lastModifiedDate":"2021-10-18"},{"lineNumber":28,"author":{"gitId":"mohamad-adam8991"},"content":"        }","lastModifiedDate":"2021-10-18"},{"lineNumber":29,"author":{"gitId":"mohamad-adam8991"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":30,"author":{"gitId":"mohamad-adam8991"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":31,"author":{"gitId":"mohamad-adam8991"},"content":"    @Test","lastModifiedDate":"2021-10-18"},{"lineNumber":32,"author":{"gitId":"mohamad-adam8991"},"content":"    public void execute_sameNameInput_listSizeRemainsThree() throws LotsException {","lastModifiedDate":"2021-10-18"},{"lineNumber":33,"author":{"gitId":"mohamad-adam8991"},"content":"        String input \u003d \"add /n Adam /i 3 /q 3\";","lastModifiedDate":"2021-10-18"},{"lineNumber":34,"author":{"gitId":"mohamad-adam8991"},"content":"        Command command \u003d new AddCommand(input);","lastModifiedDate":"2021-10-18"},{"lineNumber":35,"author":{"gitId":"mohamad-adam8991"},"content":"        command.setData(peopleManager);","lastModifiedDate":"2021-10-18"},{"lineNumber":36,"author":{"gitId":"mohamad-adam8991"},"content":"        command.execute();","lastModifiedDate":"2021-10-18"},{"lineNumber":37,"author":{"gitId":"mohamad-adam8991"},"content":"        assertEquals(3, peopleManager.getSize());","lastModifiedDate":"2021-10-18"},{"lineNumber":38,"author":{"gitId":"mohamad-adam8991"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":39,"author":{"gitId":"mohamad-adam8991"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":40,"author":{"gitId":"WaiKit-nus"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":41,"author":{"gitId":"WaiKit-nus"},"content":"    public void execute_foodIndexIsNegative_throwsLotsException()","lastModifiedDate":"2021-10-12"},{"lineNumber":42,"author":{"gitId":"WaiKit-nus"},"content":"            throws Exception {","lastModifiedDate":"2021-10-12"},{"lineNumber":43,"author":{"gitId":"WaiKit-nus"},"content":"        try {","lastModifiedDate":"2021-10-12"},{"lineNumber":44,"author":{"gitId":"WaiKit-nus"},"content":"            Command command;","lastModifiedDate":"2021-10-12"},{"lineNumber":45,"author":{"gitId":"WaiKit-nus"},"content":"            command \u003d Parser.getCommand(\"add /n jacob /i -1 /q 10\");","lastModifiedDate":"2021-10-12"},{"lineNumber":46,"author":{"gitId":"WaiKit-nus"},"content":"            command.execute();","lastModifiedDate":"2021-10-12"},{"lineNumber":47,"author":{"gitId":"WaiKit-nus"},"content":"        } catch (LotsException | NumberFormatException e) {","lastModifiedDate":"2021-10-12"},{"lineNumber":48,"author":{"gitId":"WaiKit-nus"},"content":"            System.out.println(\"Food Index is Negative. \\n\");","lastModifiedDate":"2021-10-12"},{"lineNumber":49,"author":{"gitId":"WaiKit-nus"},"content":"        }","lastModifiedDate":"2021-10-12"},{"lineNumber":50,"author":{"gitId":"WaiKit-nus"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":51,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":52,"author":{"gitId":"WaiKit-nus"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":53,"author":{"gitId":"WaiKit-nus"},"content":"    public void execute_quantityIsNegative_throwsLotsException()","lastModifiedDate":"2021-10-12"},{"lineNumber":54,"author":{"gitId":"WaiKit-nus"},"content":"            throws Exception {","lastModifiedDate":"2021-10-12"},{"lineNumber":55,"author":{"gitId":"WaiKit-nus"},"content":"        try {","lastModifiedDate":"2021-10-12"},{"lineNumber":56,"author":{"gitId":"WaiKit-nus"},"content":"            Command command;","lastModifiedDate":"2021-10-12"},{"lineNumber":57,"author":{"gitId":"WaiKit-nus"},"content":"            command \u003d Parser.getCommand(\"add /n jacob /i 2 /q -10\");","lastModifiedDate":"2021-10-12"},{"lineNumber":58,"author":{"gitId":"WaiKit-nus"},"content":"            command.execute();","lastModifiedDate":"2021-10-12"},{"lineNumber":59,"author":{"gitId":"WaiKit-nus"},"content":"        } catch (LotsException | NumberFormatException e) {","lastModifiedDate":"2021-10-12"},{"lineNumber":60,"author":{"gitId":"WaiKit-nus"},"content":"            System.out.println(\"Quantity is Negative. \\n\");","lastModifiedDate":"2021-10-12"},{"lineNumber":61,"author":{"gitId":"WaiKit-nus"},"content":"        }","lastModifiedDate":"2021-10-12"},{"lineNumber":62,"author":{"gitId":"WaiKit-nus"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":63,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":64,"author":{"gitId":"WaiKit-nus"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":65,"author":{"gitId":"WaiKit-nus"},"content":"    public void execute_foodIndexIsZero_throwsLotsException()","lastModifiedDate":"2021-10-12"},{"lineNumber":66,"author":{"gitId":"WaiKit-nus"},"content":"            throws Exception {","lastModifiedDate":"2021-10-12"},{"lineNumber":67,"author":{"gitId":"WaiKit-nus"},"content":"        try {","lastModifiedDate":"2021-10-12"},{"lineNumber":68,"author":{"gitId":"WaiKit-nus"},"content":"            Command command;","lastModifiedDate":"2021-10-12"},{"lineNumber":69,"author":{"gitId":"WaiKit-nus"},"content":"            command \u003d Parser.getCommand(\"add /n jacob /i 0 /q 10\");","lastModifiedDate":"2021-10-12"},{"lineNumber":70,"author":{"gitId":"WaiKit-nus"},"content":"            command.execute();","lastModifiedDate":"2021-10-12"},{"lineNumber":71,"author":{"gitId":"WaiKit-nus"},"content":"        } catch (LotsException | NumberFormatException e) {","lastModifiedDate":"2021-10-12"},{"lineNumber":72,"author":{"gitId":"WaiKit-nus"},"content":"            System.out.println(\"Food Index is zero. \\n\");","lastModifiedDate":"2021-10-12"},{"lineNumber":73,"author":{"gitId":"WaiKit-nus"},"content":"        }","lastModifiedDate":"2021-10-12"},{"lineNumber":74,"author":{"gitId":"WaiKit-nus"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":75,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":76,"author":{"gitId":"WaiKit-nus"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":77,"author":{"gitId":"WaiKit-nus"},"content":"    public void execute_quantityIsZero_throwsLotsException()","lastModifiedDate":"2021-10-12"},{"lineNumber":78,"author":{"gitId":"WaiKit-nus"},"content":"            throws Exception {","lastModifiedDate":"2021-10-12"},{"lineNumber":79,"author":{"gitId":"WaiKit-nus"},"content":"        try {","lastModifiedDate":"2021-10-12"},{"lineNumber":80,"author":{"gitId":"WaiKit-nus"},"content":"            Command command;","lastModifiedDate":"2021-10-12"},{"lineNumber":81,"author":{"gitId":"WaiKit-nus"},"content":"            command \u003d Parser.getCommand(\"add /n jacob /i 2 /q 0\");","lastModifiedDate":"2021-10-12"},{"lineNumber":82,"author":{"gitId":"WaiKit-nus"},"content":"            command.execute();","lastModifiedDate":"2021-10-12"},{"lineNumber":83,"author":{"gitId":"WaiKit-nus"},"content":"        } catch (LotsException | NumberFormatException e) {","lastModifiedDate":"2021-10-12"},{"lineNumber":84,"author":{"gitId":"WaiKit-nus"},"content":"            System.out.println(\"Quantity is zero. \\n\");","lastModifiedDate":"2021-10-12"},{"lineNumber":85,"author":{"gitId":"WaiKit-nus"},"content":"        }","lastModifiedDate":"2021-10-12"},{"lineNumber":86,"author":{"gitId":"WaiKit-nus"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":87,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":88,"author":{"gitId":"WaiKit-nus"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":89,"author":{"gitId":"WaiKit-nus"},"content":"    public void execute_foodIndexPositiveButOutOfRange_throwsLotsException()","lastModifiedDate":"2021-10-12"},{"lineNumber":90,"author":{"gitId":"WaiKit-nus"},"content":"            throws Exception {","lastModifiedDate":"2021-10-12"},{"lineNumber":91,"author":{"gitId":"WaiKit-nus"},"content":"        try {","lastModifiedDate":"2021-10-12"},{"lineNumber":92,"author":{"gitId":"WaiKit-nus"},"content":"            Command command;","lastModifiedDate":"2021-10-12"},{"lineNumber":93,"author":{"gitId":"WaiKit-nus"},"content":"            command \u003d Parser.getCommand(\"add /n jacob /i 13 /q 10\");","lastModifiedDate":"2021-10-12"},{"lineNumber":94,"author":{"gitId":"WaiKit-nus"},"content":"            command.execute();","lastModifiedDate":"2021-10-12"},{"lineNumber":95,"author":{"gitId":"WaiKit-nus"},"content":"        } catch (LotsException | NumberFormatException e) {","lastModifiedDate":"2021-10-12"},{"lineNumber":96,"author":{"gitId":"WaiKit-nus"},"content":"            System.out.println(\"Food Index Positive but out of range. \\n\");","lastModifiedDate":"2021-10-12"},{"lineNumber":97,"author":{"gitId":"WaiKit-nus"},"content":"        }","lastModifiedDate":"2021-10-12"},{"lineNumber":98,"author":{"gitId":"WaiKit-nus"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":99,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":100,"author":{"gitId":"WaiKit-nus"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":101,"author":{"gitId":"WaiKit-nus"},"content":"    public void execute_quantityPositiveButOutOfRange_throwsLotsException()","lastModifiedDate":"2021-10-12"},{"lineNumber":102,"author":{"gitId":"WaiKit-nus"},"content":"            throws Exception {","lastModifiedDate":"2021-10-12"},{"lineNumber":103,"author":{"gitId":"WaiKit-nus"},"content":"        try {","lastModifiedDate":"2021-10-12"},{"lineNumber":104,"author":{"gitId":"WaiKit-nus"},"content":"            Command command;","lastModifiedDate":"2021-10-12"},{"lineNumber":105,"author":{"gitId":"WaiKit-nus"},"content":"            command \u003d Parser.getCommand(\"add /n jacob /i 2 /q 1000\");","lastModifiedDate":"2021-10-12"},{"lineNumber":106,"author":{"gitId":"WaiKit-nus"},"content":"            command.execute();","lastModifiedDate":"2021-10-12"},{"lineNumber":107,"author":{"gitId":"WaiKit-nus"},"content":"        } catch (LotsException | NumberFormatException e) {","lastModifiedDate":"2021-10-12"},{"lineNumber":108,"author":{"gitId":"WaiKit-nus"},"content":"            System.out.println(\"Quantity Positive but out of range. \\n\");","lastModifiedDate":"2021-10-12"},{"lineNumber":109,"author":{"gitId":"WaiKit-nus"},"content":"        }","lastModifiedDate":"2021-10-12"},{"lineNumber":110,"author":{"gitId":"WaiKit-nus"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":111,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":112,"author":{"gitId":"WaiKit-nus"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":113,"author":{"gitId":"WaiKit-nus"},"content":"    public void execute_wrongNumberOfSlashes_throwsLotsException()","lastModifiedDate":"2021-10-12"},{"lineNumber":114,"author":{"gitId":"WaiKit-nus"},"content":"            throws Exception {","lastModifiedDate":"2021-10-12"},{"lineNumber":115,"author":{"gitId":"WaiKit-nus"},"content":"        try {","lastModifiedDate":"2021-10-12"},{"lineNumber":116,"author":{"gitId":"WaiKit-nus"},"content":"            Command command;","lastModifiedDate":"2021-10-12"},{"lineNumber":117,"author":{"gitId":"WaiKit-nus"},"content":"            command \u003d Parser.getCommand(\"add /n jacob /i 2 \");","lastModifiedDate":"2021-10-12"},{"lineNumber":118,"author":{"gitId":"WaiKit-nus"},"content":"            command.execute();","lastModifiedDate":"2021-10-12"},{"lineNumber":119,"author":{"gitId":"WaiKit-nus"},"content":"        } catch (LotsException | NumberFormatException e) {","lastModifiedDate":"2021-10-12"},{"lineNumber":120,"author":{"gitId":"WaiKit-nus"},"content":"            System.out.println(\"Missing Slash. \\n\");","lastModifiedDate":"2021-10-12"},{"lineNumber":121,"author":{"gitId":"WaiKit-nus"},"content":"        }","lastModifiedDate":"2021-10-12"},{"lineNumber":122,"author":{"gitId":"WaiKit-nus"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":123,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":124,"author":{"gitId":"WaiKit-nus"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":125,"author":{"gitId":"WaiKit-nus"},"content":"    public void execute_alphaNumericNamesOnly_throwsLotsException()","lastModifiedDate":"2021-10-12"},{"lineNumber":126,"author":{"gitId":"WaiKit-nus"},"content":"            throws Exception {","lastModifiedDate":"2021-10-12"},{"lineNumber":127,"author":{"gitId":"WaiKit-nus"},"content":"        try {","lastModifiedDate":"2021-10-12"},{"lineNumber":128,"author":{"gitId":"WaiKit-nus"},"content":"            Command command;","lastModifiedDate":"2021-10-12"},{"lineNumber":129,"author":{"gitId":"WaiKit-nus"},"content":"            command \u003d Parser.getCommand(\"add /n J@cob! /i 2 /q 10\");","lastModifiedDate":"2021-10-12"},{"lineNumber":130,"author":{"gitId":"WaiKit-nus"},"content":"            command.execute();","lastModifiedDate":"2021-10-12"},{"lineNumber":131,"author":{"gitId":"WaiKit-nus"},"content":"        } catch (LotsException | NumberFormatException e) {","lastModifiedDate":"2021-10-12"},{"lineNumber":132,"author":{"gitId":"WaiKit-nus"},"content":"            System.out.println(\"There are other characters in Names. \\n\");","lastModifiedDate":"2021-10-12"},{"lineNumber":133,"author":{"gitId":"WaiKit-nus"},"content":"        }","lastModifiedDate":"2021-10-12"},{"lineNumber":134,"author":{"gitId":"WaiKit-nus"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":135,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":136,"author":{"gitId":"WaiKit-nus"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":137,"author":{"gitId":"WaiKit-nus"},"content":"    public void execute_inputForNameIsSpaces_throwsLotsException()","lastModifiedDate":"2021-10-12"},{"lineNumber":138,"author":{"gitId":"WaiKit-nus"},"content":"            throws Exception {","lastModifiedDate":"2021-10-12"},{"lineNumber":139,"author":{"gitId":"WaiKit-nus"},"content":"        try {","lastModifiedDate":"2021-10-12"},{"lineNumber":140,"author":{"gitId":"WaiKit-nus"},"content":"            Command command;","lastModifiedDate":"2021-10-12"},{"lineNumber":141,"author":{"gitId":"WaiKit-nus"},"content":"            command \u003d Parser.getCommand(\"add /n          /i 2 /q 10\");","lastModifiedDate":"2021-10-12"},{"lineNumber":142,"author":{"gitId":"WaiKit-nus"},"content":"            command.execute();","lastModifiedDate":"2021-10-12"},{"lineNumber":143,"author":{"gitId":"WaiKit-nus"},"content":"        } catch (LotsException | NumberFormatException e) {","lastModifiedDate":"2021-10-12"},{"lineNumber":144,"author":{"gitId":"WaiKit-nus"},"content":"            System.out.println(\"Name cannot be spaces. \\n\");","lastModifiedDate":"2021-10-12"},{"lineNumber":145,"author":{"gitId":"WaiKit-nus"},"content":"        }","lastModifiedDate":"2021-10-12"},{"lineNumber":146,"author":{"gitId":"WaiKit-nus"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":147,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":148,"author":{"gitId":"WaiKit-nus"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":149,"author":{"gitId":"WaiKit-nus"},"content":"    public void execute_inputForFoodIndexIsSpaces_throwsLotsException()","lastModifiedDate":"2021-10-12"},{"lineNumber":150,"author":{"gitId":"WaiKit-nus"},"content":"            throws Exception {","lastModifiedDate":"2021-10-12"},{"lineNumber":151,"author":{"gitId":"WaiKit-nus"},"content":"        try {","lastModifiedDate":"2021-10-12"},{"lineNumber":152,"author":{"gitId":"WaiKit-nus"},"content":"            Command command;","lastModifiedDate":"2021-10-12"},{"lineNumber":153,"author":{"gitId":"WaiKit-nus"},"content":"            command \u003d Parser.getCommand(\"add /n Jenson /i     2    /q 10\");","lastModifiedDate":"2021-10-12"},{"lineNumber":154,"author":{"gitId":"WaiKit-nus"},"content":"            command.execute();","lastModifiedDate":"2021-10-12"},{"lineNumber":155,"author":{"gitId":"WaiKit-nus"},"content":"        } catch (LotsException | NumberFormatException e) {","lastModifiedDate":"2021-10-12"},{"lineNumber":156,"author":{"gitId":"WaiKit-nus"},"content":"            System.out.println(\"Food Index cannot be spaces. \\n\");","lastModifiedDate":"2021-10-12"},{"lineNumber":157,"author":{"gitId":"WaiKit-nus"},"content":"        }","lastModifiedDate":"2021-10-12"},{"lineNumber":158,"author":{"gitId":"WaiKit-nus"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":159,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":160,"author":{"gitId":"WaiKit-nus"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":161,"author":{"gitId":"WaiKit-nus"},"content":"    public void execute_inputForQuantityIsSpaces_throwsLotsException()","lastModifiedDate":"2021-10-12"},{"lineNumber":162,"author":{"gitId":"WaiKit-nus"},"content":"            throws Exception {","lastModifiedDate":"2021-10-12"},{"lineNumber":163,"author":{"gitId":"WaiKit-nus"},"content":"        try {","lastModifiedDate":"2021-10-12"},{"lineNumber":164,"author":{"gitId":"WaiKit-nus"},"content":"            Command command;","lastModifiedDate":"2021-10-12"},{"lineNumber":165,"author":{"gitId":"WaiKit-nus"},"content":"            command \u003d Parser.getCommand(\"add /n Jenson /i 3 /q        \");","lastModifiedDate":"2021-10-12"},{"lineNumber":166,"author":{"gitId":"WaiKit-nus"},"content":"            command.execute();","lastModifiedDate":"2021-10-12"},{"lineNumber":167,"author":{"gitId":"WaiKit-nus"},"content":"        } catch (LotsException | NumberFormatException e) {","lastModifiedDate":"2021-10-12"},{"lineNumber":168,"author":{"gitId":"WaiKit-nus"},"content":"            System.out.println(\"Quantity cannot be spaces. \\n\");","lastModifiedDate":"2021-10-12"},{"lineNumber":169,"author":{"gitId":"WaiKit-nus"},"content":"        }","lastModifiedDate":"2021-10-12"},{"lineNumber":170,"author":{"gitId":"WaiKit-nus"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":171,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":172,"author":{"gitId":"WaiKit-nus"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":173,"author":{"gitId":"WaiKit-nus"},"content":"    public void execute_foodIndexCannotBeInWord_throwsLotsException()","lastModifiedDate":"2021-10-12"},{"lineNumber":174,"author":{"gitId":"WaiKit-nus"},"content":"            throws Exception {","lastModifiedDate":"2021-10-12"},{"lineNumber":175,"author":{"gitId":"WaiKit-nus"},"content":"        try {","lastModifiedDate":"2021-10-12"},{"lineNumber":176,"author":{"gitId":"WaiKit-nus"},"content":"            Command command;","lastModifiedDate":"2021-10-12"},{"lineNumber":177,"author":{"gitId":"WaiKit-nus"},"content":"            command \u003d Parser.getCommand(\"add /n jacob /i Zero /q 10\");","lastModifiedDate":"2021-10-12"},{"lineNumber":178,"author":{"gitId":"WaiKit-nus"},"content":"            command.execute();","lastModifiedDate":"2021-10-12"},{"lineNumber":179,"author":{"gitId":"WaiKit-nus"},"content":"        } catch (LotsException | NumberFormatException e) {","lastModifiedDate":"2021-10-12"},{"lineNumber":180,"author":{"gitId":"WaiKit-nus"},"content":"            System.out.println(\"Food Index is in Words. \\n\");","lastModifiedDate":"2021-10-12"},{"lineNumber":181,"author":{"gitId":"WaiKit-nus"},"content":"        }","lastModifiedDate":"2021-10-12"},{"lineNumber":182,"author":{"gitId":"WaiKit-nus"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":183,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":184,"author":{"gitId":"WaiKit-nus"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":185,"author":{"gitId":"WaiKit-nus"},"content":"    public void execute_quantityCannotBeInWord_throwsLotsException()","lastModifiedDate":"2021-10-12"},{"lineNumber":186,"author":{"gitId":"WaiKit-nus"},"content":"            throws Exception {","lastModifiedDate":"2021-10-12"},{"lineNumber":187,"author":{"gitId":"WaiKit-nus"},"content":"        try {","lastModifiedDate":"2021-10-12"},{"lineNumber":188,"author":{"gitId":"WaiKit-nus"},"content":"            Command command;","lastModifiedDate":"2021-10-12"},{"lineNumber":189,"author":{"gitId":"WaiKit-nus"},"content":"            command \u003d Parser.getCommand(\"add /n jacob /i 3 /q two hundred\");","lastModifiedDate":"2021-10-12"},{"lineNumber":190,"author":{"gitId":"WaiKit-nus"},"content":"            command.execute();","lastModifiedDate":"2021-10-12"},{"lineNumber":191,"author":{"gitId":"WaiKit-nus"},"content":"        } catch (LotsException | NumberFormatException e) {","lastModifiedDate":"2021-10-12"},{"lineNumber":192,"author":{"gitId":"WaiKit-nus"},"content":"            System.out.println(\"Quantity is in Words. \\n\");","lastModifiedDate":"2021-10-12"},{"lineNumber":193,"author":{"gitId":"WaiKit-nus"},"content":"        }","lastModifiedDate":"2021-10-12"},{"lineNumber":194,"author":{"gitId":"WaiKit-nus"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":195,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":196,"author":{"gitId":"WaiKit-nus"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":197,"author":{"gitId":"WaiKit-nus"},"content":"    public void execute_foodIndexContainsCharacters_throwsLotsException()","lastModifiedDate":"2021-10-12"},{"lineNumber":198,"author":{"gitId":"WaiKit-nus"},"content":"            throws Exception {","lastModifiedDate":"2021-10-12"},{"lineNumber":199,"author":{"gitId":"WaiKit-nus"},"content":"        try {","lastModifiedDate":"2021-10-12"},{"lineNumber":200,"author":{"gitId":"WaiKit-nus"},"content":"            Command command;","lastModifiedDate":"2021-10-12"},{"lineNumber":201,"author":{"gitId":"WaiKit-nus"},"content":"            command \u003d Parser.getCommand(\"add /n jacob /i 2@1 /q 10\");","lastModifiedDate":"2021-10-12"},{"lineNumber":202,"author":{"gitId":"WaiKit-nus"},"content":"            command.execute();","lastModifiedDate":"2021-10-12"},{"lineNumber":203,"author":{"gitId":"WaiKit-nus"},"content":"        } catch (LotsException | NumberFormatException e) {","lastModifiedDate":"2021-10-12"},{"lineNumber":204,"author":{"gitId":"WaiKit-nus"},"content":"            System.out.println(\"Food Index contains characters. \\n\");","lastModifiedDate":"2021-10-12"},{"lineNumber":205,"author":{"gitId":"WaiKit-nus"},"content":"        }","lastModifiedDate":"2021-10-12"},{"lineNumber":206,"author":{"gitId":"WaiKit-nus"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":207,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":208,"author":{"gitId":"WaiKit-nus"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":209,"author":{"gitId":"WaiKit-nus"},"content":"    public void execute_quantityContainsCharacters_throwsLotsException()","lastModifiedDate":"2021-10-12"},{"lineNumber":210,"author":{"gitId":"WaiKit-nus"},"content":"            throws Exception {","lastModifiedDate":"2021-10-12"},{"lineNumber":211,"author":{"gitId":"WaiKit-nus"},"content":"        try {","lastModifiedDate":"2021-10-12"},{"lineNumber":212,"author":{"gitId":"WaiKit-nus"},"content":"            Command command;","lastModifiedDate":"2021-10-12"},{"lineNumber":213,"author":{"gitId":"WaiKit-nus"},"content":"            command \u003d Parser.getCommand(\"add /n jacob /i 9 /q 2!4\");","lastModifiedDate":"2021-10-12"},{"lineNumber":214,"author":{"gitId":"WaiKit-nus"},"content":"            command.execute();","lastModifiedDate":"2021-10-12"},{"lineNumber":215,"author":{"gitId":"WaiKit-nus"},"content":"        } catch (LotsException | NumberFormatException e) {","lastModifiedDate":"2021-10-12"},{"lineNumber":216,"author":{"gitId":"WaiKit-nus"},"content":"            System.out.println(\"Quantity contains characters. \\n\");","lastModifiedDate":"2021-10-12"},{"lineNumber":217,"author":{"gitId":"WaiKit-nus"},"content":"        }","lastModifiedDate":"2021-10-12"},{"lineNumber":218,"author":{"gitId":"WaiKit-nus"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":219,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":220,"author":{"gitId":"WaiKit-nus"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":221,"author":{"gitId":"WaiKit-nus"},"content":"    public void execute_inputForNameIsMoreThan50Characters_throwsLotsException()","lastModifiedDate":"2021-10-12"},{"lineNumber":222,"author":{"gitId":"WaiKit-nus"},"content":"            throws Exception {","lastModifiedDate":"2021-10-12"},{"lineNumber":223,"author":{"gitId":"WaiKit-nus"},"content":"        try {","lastModifiedDate":"2021-10-12"},{"lineNumber":224,"author":{"gitId":"WaiKit-nus"},"content":"            Command command;","lastModifiedDate":"2021-10-12"},{"lineNumber":225,"author":{"gitId":"WaiKit-nus"},"content":"            command \u003d Parser.getCommand(\"add /n Jenson Jacob Jenson Jacob Jenson Jacob Jenson Jacob Jenson Jacob \"","lastModifiedDate":"2021-10-12"},{"lineNumber":226,"author":{"gitId":"WaiKit-nus"},"content":"                    + \"Jenson Jacob Jenson Jacob Jenson Jacob Jenson /i 2 /q 10\");","lastModifiedDate":"2021-10-12"},{"lineNumber":227,"author":{"gitId":"WaiKit-nus"},"content":"            command.execute();","lastModifiedDate":"2021-10-12"},{"lineNumber":228,"author":{"gitId":"WaiKit-nus"},"content":"        } catch (LotsException | NumberFormatException e) {","lastModifiedDate":"2021-10-12"},{"lineNumber":229,"author":{"gitId":"WaiKit-nus"},"content":"            System.out.println(\"Name cannot be more than 50 spaces. \\n\");","lastModifiedDate":"2021-10-12"},{"lineNumber":230,"author":{"gitId":"WaiKit-nus"},"content":"        }","lastModifiedDate":"2021-10-12"},{"lineNumber":231,"author":{"gitId":"WaiKit-nus"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":232,"author":{"gitId":"mohamad-adam8991"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":233,"author":{"gitId":"mohamad-adam8991"},"content":"    @Test","lastModifiedDate":"2021-10-22"},{"lineNumber":234,"author":{"gitId":"mohamad-adam8991"},"content":"    public void execute_numberOfPeopleExceedsLimit_throwsLotsException() throws Exception {","lastModifiedDate":"2021-10-22"},{"lineNumber":235,"author":{"gitId":"mohamad-adam8991"},"content":"        try {","lastModifiedDate":"2021-10-22"},{"lineNumber":236,"author":{"gitId":"mohamad-adam8991"},"content":"            PeopleManager.clearListOfPeople();","lastModifiedDate":"2021-10-22"},{"lineNumber":237,"author":{"gitId":"mohamad-adam8991"},"content":"            for (int i \u003d 0; i \u003c 100; i++) {","lastModifiedDate":"2021-10-22"},{"lineNumber":238,"author":{"gitId":"mohamad-adam8991"},"content":"                String sampleInput \u003d \"add /n \" + i + \" /i 1 /q 1\";","lastModifiedDate":"2021-10-22"},{"lineNumber":239,"author":{"gitId":"mohamad-adam8991"},"content":"                Command command \u003d new AddCommand(sampleInput);","lastModifiedDate":"2021-10-22"},{"lineNumber":240,"author":{"gitId":"mohamad-adam8991"},"content":"                command.setData(peopleManager);","lastModifiedDate":"2021-10-22"},{"lineNumber":241,"author":{"gitId":"mohamad-adam8991"},"content":"                command.execute();","lastModifiedDate":"2021-10-22"},{"lineNumber":242,"author":{"gitId":"mohamad-adam8991"},"content":"            }","lastModifiedDate":"2021-10-22"},{"lineNumber":243,"author":{"gitId":"mohamad-adam8991"},"content":"        } catch (LotsException e) {","lastModifiedDate":"2021-10-22"},{"lineNumber":244,"author":{"gitId":"mohamad-adam8991"},"content":"            System.out.println(\"Total number of people cannot be more than 99. \\n\");","lastModifiedDate":"2021-10-22"},{"lineNumber":245,"author":{"gitId":"mohamad-adam8991"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":246,"author":{"gitId":"mohamad-adam8991"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":247,"author":{"gitId":"mohamad-adam8991"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":248,"author":{"gitId":"mohamad-adam8991"},"content":"    @Test","lastModifiedDate":"2021-10-22"},{"lineNumber":249,"author":{"gitId":"mohamad-adam8991"},"content":"    public void execute_numberOfTotalOrdersExceedsLimit_throwsLotsException() throws Exception {","lastModifiedDate":"2021-10-22"},{"lineNumber":250,"author":{"gitId":"mohamad-adam8991"},"content":"        try {","lastModifiedDate":"2021-10-22"},{"lineNumber":251,"author":{"gitId":"mohamad-adam8991"},"content":"            Command command \u003d new AddCommand(\"add /n Adam /i 1 /q 999\");","lastModifiedDate":"2021-10-22"},{"lineNumber":252,"author":{"gitId":"mohamad-adam8991"},"content":"            command.setData(peopleManager);","lastModifiedDate":"2021-10-22"},{"lineNumber":253,"author":{"gitId":"mohamad-adam8991"},"content":"            command.execute();","lastModifiedDate":"2021-10-22"},{"lineNumber":254,"author":{"gitId":"mohamad-adam8991"},"content":"        } catch (LotsException e) {","lastModifiedDate":"2021-10-22"},{"lineNumber":255,"author":{"gitId":"mohamad-adam8991"},"content":"            System.out.println(\"Total number of orders cannot be more than 999. \\n\");","lastModifiedDate":"2021-10-22"},{"lineNumber":256,"author":{"gitId":"mohamad-adam8991"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":257,"author":{"gitId":"mohamad-adam8991"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":258,"author":{"gitId":"WaiKit-nus"},"content":"}","lastModifiedDate":"2021-10-12"}],"authorContributionMap":{"mohamad-adam8991":56,"andrewtkh1":2,"WaiKit-nus":200}},{"path":"src/test/java/seedu/duke/DeleteCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"markuslyq"},"content":"package seedu.duke;","lastModifiedDate":"2021-10-11"},{"lineNumber":2,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":3,"author":{"gitId":"markuslyq"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2021-10-12"},{"lineNumber":4,"author":{"gitId":"markuslyq"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-11"},{"lineNumber":5,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":6,"author":{"gitId":"markuslyq"},"content":"import seedu.duke.command.AddCommand;","lastModifiedDate":"2021-10-12"},{"lineNumber":7,"author":{"gitId":"andrewtkh1"},"content":"import seedu.duke.command.Command;","lastModifiedDate":"2021-10-12"},{"lineNumber":8,"author":{"gitId":"andrewtkh1"},"content":"import seedu.duke.command.DeleteCommand;","lastModifiedDate":"2021-10-12"},{"lineNumber":9,"author":{"gitId":"andrewtkh1"},"content":"import seedu.duke.exceptions.LotsException;","lastModifiedDate":"2021-10-12"},{"lineNumber":10,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":11,"author":{"gitId":"markuslyq"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-12"},{"lineNumber":12,"author":{"gitId":"markuslyq"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2021-10-11"},{"lineNumber":13,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":14,"author":{"gitId":"markuslyq"},"content":"class DeleteCommandTest {","lastModifiedDate":"2021-10-11"},{"lineNumber":15,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":16,"author":{"gitId":"markuslyq"},"content":"    protected PeopleManager peopleManager \u003d new PeopleManager();","lastModifiedDate":"2021-10-12"},{"lineNumber":17,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":18,"author":{"gitId":"markuslyq"},"content":"    @BeforeEach","lastModifiedDate":"2021-10-12"},{"lineNumber":19,"author":{"gitId":"markuslyq"},"content":"    void setUp() throws LotsException {","lastModifiedDate":"2021-10-12"},{"lineNumber":20,"author":{"gitId":"markuslyq"},"content":"        String[] names \u003d {\"Markus\", \"Adam\", \"Andrew\"};","lastModifiedDate":"2021-10-12"},{"lineNumber":21,"author":{"gitId":"markuslyq"},"content":"        String[] foodIndex \u003d {\"1\", \"4\", \"8\"};","lastModifiedDate":"2021-10-12"},{"lineNumber":22,"author":{"gitId":"andrewtkh1"},"content":"        PeopleManager.clearListOfPeople();","lastModifiedDate":"2021-10-16"},{"lineNumber":23,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":24,"author":{"gitId":"markuslyq"},"content":"        for (int i \u003d 0; i \u003c 3; i++) {","lastModifiedDate":"2021-10-12"},{"lineNumber":25,"author":{"gitId":"markuslyq"},"content":"            String input \u003d \"add /n \" + names[i] + \" /i \" + foodIndex[i] + \" /q 1\";","lastModifiedDate":"2021-10-12"},{"lineNumber":26,"author":{"gitId":"markuslyq"},"content":"            Command command \u003d new AddCommand(input);","lastModifiedDate":"2021-10-12"},{"lineNumber":27,"author":{"gitId":"markuslyq"},"content":"            command.setData(peopleManager);","lastModifiedDate":"2021-10-12"},{"lineNumber":28,"author":{"gitId":"markuslyq"},"content":"            command.execute();","lastModifiedDate":"2021-10-12"},{"lineNumber":29,"author":{"gitId":"markuslyq"},"content":"        }","lastModifiedDate":"2021-10-12"},{"lineNumber":30,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":31,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":32,"author":{"gitId":"markuslyq"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":33,"author":{"gitId":"markuslyq"},"content":"    void execute_validInput_expectException() throws LotsException {","lastModifiedDate":"2021-10-12"},{"lineNumber":34,"author":{"gitId":"markuslyq"},"content":"        String input \u003d \"delete 2/1\";","lastModifiedDate":"2021-10-16"},{"lineNumber":35,"author":{"gitId":"markuslyq"},"content":"        Command command \u003d new DeleteCommand(input);","lastModifiedDate":"2021-10-12"},{"lineNumber":36,"author":{"gitId":"markuslyq"},"content":"        command.setData(peopleManager);","lastModifiedDate":"2021-10-12"},{"lineNumber":37,"author":{"gitId":"markuslyq"},"content":"        command.execute();","lastModifiedDate":"2021-10-12"},{"lineNumber":38,"author":{"gitId":"andrewtkh1"},"content":"        assertEquals(2, peopleManager.getSize());","lastModifiedDate":"2021-10-16"},{"lineNumber":39,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":40,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":41,"author":{"gitId":"markuslyq"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":42,"author":{"gitId":"markuslyq"},"content":"    void execute_personIndexOutOfBounds_expectException() throws LotsException {","lastModifiedDate":"2021-10-12"},{"lineNumber":43,"author":{"gitId":"markuslyq"},"content":"        String input \u003d \"delete 99/1\";","lastModifiedDate":"2021-10-16"},{"lineNumber":44,"author":{"gitId":"markuslyq"},"content":"        Command command \u003d new DeleteCommand(input);","lastModifiedDate":"2021-10-12"},{"lineNumber":45,"author":{"gitId":"markuslyq"},"content":"        command.setData(peopleManager);","lastModifiedDate":"2021-10-12"},{"lineNumber":46,"author":{"gitId":"markuslyq"},"content":"        assertThrows(LotsException.class,","lastModifiedDate":"2021-10-12"},{"lineNumber":47,"author":{"gitId":"markuslyq"},"content":"            () -\u003e command.execute());","lastModifiedDate":"2021-10-12"},{"lineNumber":48,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":49,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":50,"author":{"gitId":"markuslyq"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":51,"author":{"gitId":"markuslyq"},"content":"    void execute_orderIndexOutOfBounds_expectException() throws LotsException {","lastModifiedDate":"2021-10-12"},{"lineNumber":52,"author":{"gitId":"markuslyq"},"content":"        String input \u003d \"delete 2/2\";","lastModifiedDate":"2021-10-16"},{"lineNumber":53,"author":{"gitId":"markuslyq"},"content":"        Command command \u003d new DeleteCommand(input);","lastModifiedDate":"2021-10-11"},{"lineNumber":54,"author":{"gitId":"markuslyq"},"content":"        command.setData(peopleManager);","lastModifiedDate":"2021-10-12"},{"lineNumber":55,"author":{"gitId":"markuslyq"},"content":"        assertThrows(LotsException.class,","lastModifiedDate":"2021-10-12"},{"lineNumber":56,"author":{"gitId":"markuslyq"},"content":"            () -\u003e command.execute());","lastModifiedDate":"2021-10-11"},{"lineNumber":57,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":58,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":59,"author":{"gitId":"markuslyq"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":60,"author":{"gitId":"markuslyq"},"content":"    void execute_inputWithoutFoodIndex_expectException() {","lastModifiedDate":"2021-10-12"},{"lineNumber":61,"author":{"gitId":"markuslyq"},"content":"        String input \u003d \"delete 2\";","lastModifiedDate":"2021-10-12"},{"lineNumber":62,"author":{"gitId":"markuslyq"},"content":"        assertThrows(LotsException.class,","lastModifiedDate":"2021-10-12"},{"lineNumber":63,"author":{"gitId":"markuslyq"},"content":"            () -\u003e new DeleteCommand(input));","lastModifiedDate":"2021-10-12"},{"lineNumber":64,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":65,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":66,"author":{"gitId":"markuslyq"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":67,"author":{"gitId":"markuslyq"},"content":"    void execute_invalidPersonIndex_expectException() {","lastModifiedDate":"2021-10-12"},{"lineNumber":68,"author":{"gitId":"markuslyq"},"content":"        String input \u003d \"delete markus/1\";","lastModifiedDate":"2021-10-16"},{"lineNumber":69,"author":{"gitId":"markuslyq"},"content":"        assertThrows(LotsException.class,","lastModifiedDate":"2021-10-12"},{"lineNumber":70,"author":{"gitId":"markuslyq"},"content":"            () -\u003e new DeleteCommand(input));","lastModifiedDate":"2021-10-12"},{"lineNumber":71,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":72,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":73,"author":{"gitId":"markuslyq"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":74,"author":{"gitId":"markuslyq"},"content":"    void execute_invalidOrderIndex_expectException() {","lastModifiedDate":"2021-10-12"},{"lineNumber":75,"author":{"gitId":"markuslyq"},"content":"        String input \u003d \"delete 1/a\";","lastModifiedDate":"2021-10-16"},{"lineNumber":76,"author":{"gitId":"markuslyq"},"content":"        assertThrows(LotsException.class,","lastModifiedDate":"2021-10-12"},{"lineNumber":77,"author":{"gitId":"markuslyq"},"content":"            () -\u003e new DeleteCommand(input));","lastModifiedDate":"2021-10-12"},{"lineNumber":78,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":79,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":80,"author":{"gitId":"markuslyq"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":81,"author":{"gitId":"markuslyq"},"content":"    void execute_invalidInput_expectException() {","lastModifiedDate":"2021-10-12"},{"lineNumber":82,"author":{"gitId":"markuslyq"},"content":"        String input \u003d \"delete Markus/a\";","lastModifiedDate":"2021-10-16"},{"lineNumber":83,"author":{"gitId":"markuslyq"},"content":"        assertThrows(LotsException.class,","lastModifiedDate":"2021-10-12"},{"lineNumber":84,"author":{"gitId":"markuslyq"},"content":"            () -\u003e new DeleteCommand(input));","lastModifiedDate":"2021-10-12"},{"lineNumber":85,"author":{"gitId":"markuslyq"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":86,"author":{"gitId":"markuslyq"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":87,"author":{"gitId":"markuslyq"},"content":"}","lastModifiedDate":"2021-10-11"}],"authorContributionMap":{"markuslyq":82,"andrewtkh1":5}},{"path":"src/test/java/seedu/duke/DukeTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.duke;","lastModifiedDate":"2020-05-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2020-05-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2020-05-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"class DukeTest {","lastModifiedDate":"2020-05-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2020-05-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public void sampleTest() {","lastModifiedDate":"2020-05-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"        assertTrue(true);","lastModifiedDate":"2020-05-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-24"},{"lineNumber":12,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":13,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-24"}],"authorContributionMap":{"andrewtkh1":1,"-":12}},{"path":"src/test/java/seedu/duke/EditCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"thaddyyz"},"content":"package seedu.duke;","lastModifiedDate":"2021-10-20"},{"lineNumber":2,"author":{"gitId":"thaddyyz"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":3,"author":{"gitId":"thaddyyz"},"content":"import org.junit.jupiter.api.BeforeAll;","lastModifiedDate":"2021-10-20"},{"lineNumber":4,"author":{"gitId":"thaddyyz"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-20"},{"lineNumber":5,"author":{"gitId":"thaddyyz"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":6,"author":{"gitId":"thaddyyz"},"content":"import seedu.duke.command.AddCommand;","lastModifiedDate":"2021-10-20"},{"lineNumber":7,"author":{"gitId":"thaddyyz"},"content":"import seedu.duke.command.Command;","lastModifiedDate":"2021-10-20"},{"lineNumber":8,"author":{"gitId":"thaddyyz"},"content":"import seedu.duke.command.EditCommand;","lastModifiedDate":"2021-10-20"},{"lineNumber":9,"author":{"gitId":"thaddyyz"},"content":"import seedu.duke.exceptions.LotsException;","lastModifiedDate":"2021-10-20"},{"lineNumber":10,"author":{"gitId":"thaddyyz"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":11,"author":{"gitId":"thaddyyz"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2021-10-20"},{"lineNumber":12,"author":{"gitId":"thaddyyz"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":13,"author":{"gitId":"thaddyyz"},"content":"class EditCommandTest {","lastModifiedDate":"2021-10-20"},{"lineNumber":14,"author":{"gitId":"thaddyyz"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":15,"author":{"gitId":"thaddyyz"},"content":"    protected static PeopleManager peopleManager \u003d new PeopleManager();","lastModifiedDate":"2021-10-22"},{"lineNumber":16,"author":{"gitId":"thaddyyz"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":17,"author":{"gitId":"thaddyyz"},"content":"    @BeforeAll","lastModifiedDate":"2021-10-20"},{"lineNumber":18,"author":{"gitId":"thaddyyz"},"content":"    public static void setUp() throws LotsException {","lastModifiedDate":"2021-10-20"},{"lineNumber":19,"author":{"gitId":"thaddyyz"},"content":"        String[] names \u003d {\"Markus\", \"Adam\", \"Andrew\"};","lastModifiedDate":"2021-10-20"},{"lineNumber":20,"author":{"gitId":"thaddyyz"},"content":"        String[] foodIndex \u003d {\"1\", \"4\", \"8\"};","lastModifiedDate":"2021-10-20"},{"lineNumber":21,"author":{"gitId":"thaddyyz"},"content":"        PeopleManager.clearListOfPeople();","lastModifiedDate":"2021-10-20"},{"lineNumber":22,"author":{"gitId":"thaddyyz"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":23,"author":{"gitId":"thaddyyz"},"content":"        for (int i \u003d 0; i \u003c 3; i++) {","lastModifiedDate":"2021-10-20"},{"lineNumber":24,"author":{"gitId":"thaddyyz"},"content":"            String input \u003d \"add /n \" + names[i] + \" /i \" + foodIndex[i] + \" /q 1\";","lastModifiedDate":"2021-10-20"},{"lineNumber":25,"author":{"gitId":"thaddyyz"},"content":"            Command command \u003d new AddCommand(input);","lastModifiedDate":"2021-10-20"},{"lineNumber":26,"author":{"gitId":"thaddyyz"},"content":"            command.setData(peopleManager);","lastModifiedDate":"2021-10-20"},{"lineNumber":27,"author":{"gitId":"thaddyyz"},"content":"            command.execute();","lastModifiedDate":"2021-10-20"},{"lineNumber":28,"author":{"gitId":"thaddyyz"},"content":"        }","lastModifiedDate":"2021-10-20"},{"lineNumber":29,"author":{"gitId":"thaddyyz"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":30,"author":{"gitId":"thaddyyz"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":31,"author":{"gitId":"thaddyyz"},"content":"    @Test","lastModifiedDate":"2021-10-20"},{"lineNumber":32,"author":{"gitId":"thaddyyz"},"content":"    void execute_personIndexOutOfBounds_expectException() throws LotsException {","lastModifiedDate":"2021-10-20"},{"lineNumber":33,"author":{"gitId":"thaddyyz"},"content":"        String input \u003d \"edit 100/1 /q 2\";","lastModifiedDate":"2021-10-20"},{"lineNumber":34,"author":{"gitId":"thaddyyz"},"content":"        assertThrows(LotsException.class,","lastModifiedDate":"2021-10-20"},{"lineNumber":35,"author":{"gitId":"thaddyyz"},"content":"            () -\u003e new EditCommand(input));","lastModifiedDate":"2021-10-20"},{"lineNumber":36,"author":{"gitId":"thaddyyz"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":37,"author":{"gitId":"thaddyyz"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":38,"author":{"gitId":"thaddyyz"},"content":"    @Test","lastModifiedDate":"2021-10-20"},{"lineNumber":39,"author":{"gitId":"thaddyyz"},"content":"    void execute_orderIndexOutOfBounds_expectException() throws LotsException {","lastModifiedDate":"2021-10-20"},{"lineNumber":40,"author":{"gitId":"thaddyyz"},"content":"        String input \u003d \"edit 2/800 /q 2\";","lastModifiedDate":"2021-10-20"},{"lineNumber":41,"author":{"gitId":"thaddyyz"},"content":"        assertThrows(LotsException.class,","lastModifiedDate":"2021-10-20"},{"lineNumber":42,"author":{"gitId":"thaddyyz"},"content":"            () -\u003e new EditCommand(input));","lastModifiedDate":"2021-10-20"},{"lineNumber":43,"author":{"gitId":"thaddyyz"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":44,"author":{"gitId":"thaddyyz"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":45,"author":{"gitId":"thaddyyz"},"content":"    @Test","lastModifiedDate":"2021-10-20"},{"lineNumber":46,"author":{"gitId":"thaddyyz"},"content":"    void execute_quantityOutOfBounds_expectException() throws LotsException {","lastModifiedDate":"2021-10-20"},{"lineNumber":47,"author":{"gitId":"thaddyyz"},"content":"        String input \u003d \"edit 2/1 /q -2123\";","lastModifiedDate":"2021-10-20"},{"lineNumber":48,"author":{"gitId":"thaddyyz"},"content":"        assertThrows(LotsException.class,","lastModifiedDate":"2021-10-20"},{"lineNumber":49,"author":{"gitId":"thaddyyz"},"content":"            () -\u003e new EditCommand(input));","lastModifiedDate":"2021-10-20"},{"lineNumber":50,"author":{"gitId":"thaddyyz"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":51,"author":{"gitId":"thaddyyz"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":52,"author":{"gitId":"thaddyyz"},"content":"    @Test","lastModifiedDate":"2021-10-24"},{"lineNumber":53,"author":{"gitId":"thaddyyz"},"content":"    void execute_quantityOverLimit_expectException() throws LotsException {","lastModifiedDate":"2021-10-24"},{"lineNumber":54,"author":{"gitId":"thaddyyz"},"content":"        String input \u003d \"edit 2/1 /q 1000\";","lastModifiedDate":"2021-10-24"},{"lineNumber":55,"author":{"gitId":"thaddyyz"},"content":"        assertThrows(LotsException.class,","lastModifiedDate":"2021-10-24"},{"lineNumber":56,"author":{"gitId":"thaddyyz"},"content":"            () -\u003e new EditCommand(input));","lastModifiedDate":"2021-10-24"},{"lineNumber":57,"author":{"gitId":"thaddyyz"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":58,"author":{"gitId":"thaddyyz"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":59,"author":{"gitId":"thaddyyz"},"content":"    @Test","lastModifiedDate":"2021-10-20"},{"lineNumber":60,"author":{"gitId":"thaddyyz"},"content":"    void execute_inputWithoutFoodIndex_expectException() {","lastModifiedDate":"2021-10-20"},{"lineNumber":61,"author":{"gitId":"thaddyyz"},"content":"        String input \u003d \"edit 2 /q 4\";","lastModifiedDate":"2021-10-20"},{"lineNumber":62,"author":{"gitId":"thaddyyz"},"content":"        assertThrows(LotsException.class,","lastModifiedDate":"2021-10-20"},{"lineNumber":63,"author":{"gitId":"thaddyyz"},"content":"            () -\u003e new EditCommand(input));","lastModifiedDate":"2021-10-20"},{"lineNumber":64,"author":{"gitId":"thaddyyz"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":65,"author":{"gitId":"thaddyyz"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":66,"author":{"gitId":"thaddyyz"},"content":"    @Test","lastModifiedDate":"2021-10-20"},{"lineNumber":67,"author":{"gitId":"thaddyyz"},"content":"    void execute_invalidPersonIndex_expectException() {","lastModifiedDate":"2021-10-20"},{"lineNumber":68,"author":{"gitId":"thaddyyz"},"content":"        String input \u003d \"edit markus/1 /q 3\";","lastModifiedDate":"2021-10-20"},{"lineNumber":69,"author":{"gitId":"thaddyyz"},"content":"        assertThrows(LotsException.class,","lastModifiedDate":"2021-10-20"},{"lineNumber":70,"author":{"gitId":"thaddyyz"},"content":"            () -\u003e new EditCommand(input));","lastModifiedDate":"2021-10-20"},{"lineNumber":71,"author":{"gitId":"thaddyyz"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":72,"author":{"gitId":"thaddyyz"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":73,"author":{"gitId":"thaddyyz"},"content":"    @Test","lastModifiedDate":"2021-10-20"},{"lineNumber":74,"author":{"gitId":"thaddyyz"},"content":"    void execute_invalidOrderIndex_expectException() {","lastModifiedDate":"2021-10-20"},{"lineNumber":75,"author":{"gitId":"thaddyyz"},"content":"        String input \u003d \"edit 1/a /q 3\";","lastModifiedDate":"2021-10-20"},{"lineNumber":76,"author":{"gitId":"thaddyyz"},"content":"        assertThrows(LotsException.class,","lastModifiedDate":"2021-10-20"},{"lineNumber":77,"author":{"gitId":"thaddyyz"},"content":"            () -\u003e new EditCommand(input));","lastModifiedDate":"2021-10-20"},{"lineNumber":78,"author":{"gitId":"thaddyyz"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":79,"author":{"gitId":"thaddyyz"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":80,"author":{"gitId":"thaddyyz"},"content":"    @Test","lastModifiedDate":"2021-10-20"},{"lineNumber":81,"author":{"gitId":"thaddyyz"},"content":"    void execute_invalidQuantityIndex_expectException() {","lastModifiedDate":"2021-10-20"},{"lineNumber":82,"author":{"gitId":"thaddyyz"},"content":"        String input \u003d \"edit 1/1 /q c\";","lastModifiedDate":"2021-10-20"},{"lineNumber":83,"author":{"gitId":"thaddyyz"},"content":"        assertThrows(LotsException.class,","lastModifiedDate":"2021-10-20"},{"lineNumber":84,"author":{"gitId":"thaddyyz"},"content":"            () -\u003e new EditCommand(input));","lastModifiedDate":"2021-10-20"},{"lineNumber":85,"author":{"gitId":"thaddyyz"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":86,"author":{"gitId":"thaddyyz"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":87,"author":{"gitId":"thaddyyz"},"content":"    @Test","lastModifiedDate":"2021-10-20"},{"lineNumber":88,"author":{"gitId":"thaddyyz"},"content":"    void execute_invalidInput_expectException() {","lastModifiedDate":"2021-10-20"},{"lineNumber":89,"author":{"gitId":"thaddyyz"},"content":"        String input \u003d \"edit Markus/a\";","lastModifiedDate":"2021-10-20"},{"lineNumber":90,"author":{"gitId":"thaddyyz"},"content":"        assertThrows(LotsException.class,","lastModifiedDate":"2021-10-20"},{"lineNumber":91,"author":{"gitId":"thaddyyz"},"content":"            () -\u003e new EditCommand(input));","lastModifiedDate":"2021-10-20"},{"lineNumber":92,"author":{"gitId":"thaddyyz"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":93,"author":{"gitId":"thaddyyz"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":94,"author":{"gitId":"thaddyyz"},"content":"}","lastModifiedDate":"2021-10-20"}],"authorContributionMap":{"thaddyyz":94}},{"path":"src/test/java/seedu/duke/FindCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"andrewtkh1"},"content":"package seedu.duke;","lastModifiedDate":"2021-10-18"},{"lineNumber":2,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":3,"author":{"gitId":"andrewtkh1"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-18"},{"lineNumber":4,"author":{"gitId":"andrewtkh1"},"content":"import seedu.duke.command.FindCommand;","lastModifiedDate":"2021-10-18"},{"lineNumber":5,"author":{"gitId":"andrewtkh1"},"content":"import seedu.duke.exceptions.LotsException;","lastModifiedDate":"2021-10-18"},{"lineNumber":6,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":7,"author":{"gitId":"andrewtkh1"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2021-10-18"},{"lineNumber":8,"author":{"gitId":"andrewtkh1"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-18"},{"lineNumber":9,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":10,"author":{"gitId":"andrewtkh1"},"content":"public class FindCommandTest {","lastModifiedDate":"2021-10-18"},{"lineNumber":11,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":12,"author":{"gitId":"andrewtkh1"},"content":"    @Test","lastModifiedDate":"2021-10-18"},{"lineNumber":13,"author":{"gitId":"andrewtkh1"},"content":"    public void inputRegex_emptyCommand_lotsExceptionThrown() {","lastModifiedDate":"2021-10-18"},{"lineNumber":14,"author":{"gitId":"andrewtkh1"},"content":"        String input \u003d \"\";","lastModifiedDate":"2021-10-18"},{"lineNumber":15,"author":{"gitId":"andrewtkh1"},"content":"        assertThrows(LotsException.class, () -\u003e new FindCommand(input));","lastModifiedDate":"2021-10-18"},{"lineNumber":16,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":17,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":18,"author":{"gitId":"andrewtkh1"},"content":"    @Test","lastModifiedDate":"2021-10-18"},{"lineNumber":19,"author":{"gitId":"andrewtkh1"},"content":"    public void inputRegex_incompleteCommand_lotsExceptionThrown() {","lastModifiedDate":"2021-10-18"},{"lineNumber":20,"author":{"gitId":"andrewtkh1"},"content":"        String input \u003d \"find\";","lastModifiedDate":"2021-10-18"},{"lineNumber":21,"author":{"gitId":"andrewtkh1"},"content":"        assertThrows(LotsException.class, () -\u003e new FindCommand(input));","lastModifiedDate":"2021-10-18"},{"lineNumber":22,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":23,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":24,"author":{"gitId":"andrewtkh1"},"content":"    @Test","lastModifiedDate":"2021-10-18"},{"lineNumber":25,"author":{"gitId":"andrewtkh1"},"content":"    public void inputRegex_emptySearch_lotsExceptionThrown() {","lastModifiedDate":"2021-10-18"},{"lineNumber":26,"author":{"gitId":"andrewtkh1"},"content":"        String input \u003d \"find /n\";","lastModifiedDate":"2021-10-18"},{"lineNumber":27,"author":{"gitId":"andrewtkh1"},"content":"        assertThrows(LotsException.class, () -\u003e new FindCommand(input));","lastModifiedDate":"2021-10-18"},{"lineNumber":28,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":29,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":30,"author":{"gitId":"andrewtkh1"},"content":"    @Test","lastModifiedDate":"2021-10-18"},{"lineNumber":31,"author":{"gitId":"andrewtkh1"},"content":"    public void inputRegex_wrongSlashPosition_lotsExceptionThrown() {","lastModifiedDate":"2021-10-18"},{"lineNumber":32,"author":{"gitId":"andrewtkh1"},"content":"        String input \u003d \"find n/\";","lastModifiedDate":"2021-10-18"},{"lineNumber":33,"author":{"gitId":"andrewtkh1"},"content":"        assertThrows(LotsException.class, () -\u003e new FindCommand(input));","lastModifiedDate":"2021-10-18"},{"lineNumber":34,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":35,"author":{"gitId":"andrewtkh1"},"content":"}","lastModifiedDate":"2021-10-18"}],"authorContributionMap":{"andrewtkh1":35}},{"path":"src/test/java/seedu/duke/ParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"andrewtkh1"},"content":"package seedu.duke;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":3,"author":{"gitId":"andrewtkh1"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-04"},{"lineNumber":4,"author":{"gitId":"andrewtkh1"},"content":"import seedu.duke.command.Command;","lastModifiedDate":"2021-10-12"},{"lineNumber":5,"author":{"gitId":"andrewtkh1"},"content":"import seedu.duke.command.UnknownCommand;","lastModifiedDate":"2021-10-12"},{"lineNumber":6,"author":{"gitId":"andrewtkh1"},"content":"import seedu.duke.exceptions.LotsException;","lastModifiedDate":"2021-10-24"},{"lineNumber":7,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":8,"author":{"gitId":"andrewtkh1"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2021-10-24"},{"lineNumber":9,"author":{"gitId":"andrewtkh1"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-05"},{"lineNumber":10,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":11,"author":{"gitId":"andrewtkh1"},"content":"public class ParserTest {","lastModifiedDate":"2021-10-04"},{"lineNumber":12,"author":{"gitId":"andrewtkh1"},"content":"    @Test","lastModifiedDate":"2021-10-04"},{"lineNumber":13,"author":{"gitId":"andrewtkh1"},"content":"    public void getCommand_emptyCommand_nullReturned() throws Exception {","lastModifiedDate":"2021-10-10"},{"lineNumber":14,"author":{"gitId":"andrewtkh1"},"content":"        Command output \u003d Parser.getCommand(\"\");","lastModifiedDate":"2021-10-05"},{"lineNumber":15,"author":{"gitId":"andrewtkh1"},"content":"        assertTrue(output instanceof UnknownCommand);","lastModifiedDate":"2021-10-05"},{"lineNumber":16,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-10-04"},{"lineNumber":17,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":18,"author":{"gitId":"andrewtkh1"},"content":"    @Test","lastModifiedDate":"2021-10-04"},{"lineNumber":19,"author":{"gitId":"andrewtkh1"},"content":"    public void getCommand_spaces_nullReturned() throws Exception {","lastModifiedDate":"2021-10-10"},{"lineNumber":20,"author":{"gitId":"andrewtkh1"},"content":"        Command output \u003d Parser.getCommand(\"     \");","lastModifiedDate":"2021-10-05"},{"lineNumber":21,"author":{"gitId":"andrewtkh1"},"content":"        assertTrue(output instanceof UnknownCommand);","lastModifiedDate":"2021-10-05"},{"lineNumber":22,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-10-04"},{"lineNumber":23,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":24,"author":{"gitId":"andrewtkh1"},"content":"    @Test","lastModifiedDate":"2021-10-24"},{"lineNumber":25,"author":{"gitId":"andrewtkh1"},"content":"    public void addCommand_AddMoreThan99_ErrorThrown() throws Exception {","lastModifiedDate":"2021-10-24"},{"lineNumber":26,"author":{"gitId":"andrewtkh1"},"content":"        String com;","lastModifiedDate":"2021-10-24"},{"lineNumber":27,"author":{"gitId":"andrewtkh1"},"content":"        PeopleManager manager \u003d new PeopleManager();","lastModifiedDate":"2021-10-24"},{"lineNumber":28,"author":{"gitId":"andrewtkh1"},"content":"        PeopleManager.clearListOfPeople();","lastModifiedDate":"2021-10-24"},{"lineNumber":29,"author":{"gitId":"andrewtkh1"},"content":"        for (int i \u003d 1; i \u003c\u003d 99; i++) {","lastModifiedDate":"2021-10-24"},{"lineNumber":30,"author":{"gitId":"andrewtkh1"},"content":"            com \u003d \"add /n \" + i + \" /i 1 /q 2\";","lastModifiedDate":"2021-10-24"},{"lineNumber":31,"author":{"gitId":"andrewtkh1"},"content":"            Command output \u003d Parser.getCommand(com);","lastModifiedDate":"2021-10-24"},{"lineNumber":32,"author":{"gitId":"andrewtkh1"},"content":"            output.setData(manager);","lastModifiedDate":"2021-10-24"},{"lineNumber":33,"author":{"gitId":"andrewtkh1"},"content":"            output.execute();","lastModifiedDate":"2021-10-24"},{"lineNumber":34,"author":{"gitId":"andrewtkh1"},"content":"        }","lastModifiedDate":"2021-10-24"},{"lineNumber":35,"author":{"gitId":"andrewtkh1"},"content":"        com \u003d \"add /n 100 /i 1 /q 2\";","lastModifiedDate":"2021-10-24"},{"lineNumber":36,"author":{"gitId":"andrewtkh1"},"content":"        Command output \u003d Parser.getCommand(com);","lastModifiedDate":"2021-10-24"},{"lineNumber":37,"author":{"gitId":"andrewtkh1"},"content":"        output.setData(manager);","lastModifiedDate":"2021-10-24"},{"lineNumber":38,"author":{"gitId":"andrewtkh1"},"content":"        assertThrows(LotsException.class,() -\u003e output.execute());","lastModifiedDate":"2021-10-24"},{"lineNumber":39,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":40,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":41,"author":{"gitId":"andrewtkh1"},"content":"    @Test","lastModifiedDate":"2021-10-25"},{"lineNumber":42,"author":{"gitId":"andrewtkh1"},"content":"    public void addCommand_AddMoreThan999Quanitity_ThrowError() throws Exception {","lastModifiedDate":"2021-10-25"},{"lineNumber":43,"author":{"gitId":"andrewtkh1"},"content":"        String com \u003d \"add /n a /i 1 /q 999\";","lastModifiedDate":"2021-10-25"},{"lineNumber":44,"author":{"gitId":"andrewtkh1"},"content":"        PeopleManager manager \u003d new PeopleManager();","lastModifiedDate":"2021-10-25"},{"lineNumber":45,"author":{"gitId":"andrewtkh1"},"content":"        PeopleManager.clearListOfPeople();","lastModifiedDate":"2021-10-25"},{"lineNumber":46,"author":{"gitId":"andrewtkh1"},"content":"        Command output \u003d Parser.getCommand(com);","lastModifiedDate":"2021-10-25"},{"lineNumber":47,"author":{"gitId":"andrewtkh1"},"content":"        output.setData(manager);","lastModifiedDate":"2021-10-25"},{"lineNumber":48,"author":{"gitId":"andrewtkh1"},"content":"        output.execute();","lastModifiedDate":"2021-10-25"},{"lineNumber":49,"author":{"gitId":"andrewtkh1"},"content":"        com \u003d \"add /n a /i 1 /q 1\";","lastModifiedDate":"2021-10-25"},{"lineNumber":50,"author":{"gitId":"andrewtkh1"},"content":"        Command last \u003d Parser.getCommand(com);","lastModifiedDate":"2021-10-25"},{"lineNumber":51,"author":{"gitId":"andrewtkh1"},"content":"        last.setData(manager);","lastModifiedDate":"2021-10-25"},{"lineNumber":52,"author":{"gitId":"andrewtkh1"},"content":"        assertThrows(LotsException.class, () -\u003e last.execute());","lastModifiedDate":"2021-10-25"},{"lineNumber":53,"author":{"gitId":"andrewtkh1"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":54,"author":{"gitId":"andrewtkh1"},"content":"}","lastModifiedDate":"2021-10-04"}],"authorContributionMap":{"andrewtkh1":54}},{"path":"src/test/java/seedu/duke/PeopleManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"thaddyyz"},"content":"package seedu.duke;","lastModifiedDate":"2021-10-13"},{"lineNumber":2,"author":{"gitId":"thaddyyz"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":3,"author":{"gitId":"thaddyyz"},"content":"import org.junit.jupiter.api.BeforeAll;","lastModifiedDate":"2021-10-13"},{"lineNumber":4,"author":{"gitId":"thaddyyz"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-13"},{"lineNumber":5,"author":{"gitId":"thaddyyz"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":6,"author":{"gitId":"thaddyyz"},"content":"import seedu.duke.exceptions.LotsException;","lastModifiedDate":"2021-10-13"},{"lineNumber":7,"author":{"gitId":"thaddyyz"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":8,"author":{"gitId":"thaddyyz"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-13"},{"lineNumber":9,"author":{"gitId":"thaddyyz"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2021-10-13"},{"lineNumber":10,"author":{"gitId":"thaddyyz"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"//@@author thaddyz","lastModifiedDate":"2021-10-16"},{"lineNumber":12,"author":{"gitId":"-"},"content":"class PeopleManagerTest {","lastModifiedDate":"2021-10-15"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    static PeopleManager peopleManager;","lastModifiedDate":"2021-10-15"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-10-16"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * Adds 3 people into the peopleManager Class.","lastModifiedDate":"2021-10-16"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * This method will only run once for this test class.","lastModifiedDate":"2021-10-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-10-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    @BeforeAll","lastModifiedDate":"2021-10-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static void setUp() throws LotsException {","lastModifiedDate":"2021-10-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        peopleManager \u003d new PeopleManager();","lastModifiedDate":"2021-10-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        String[] names \u003d {\"Markus\", \"Adam\", \"Andrew\"};","lastModifiedDate":"2021-10-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        PeopleManager.clearListOfPeople();","lastModifiedDate":"2021-10-16"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c 3; i++) {","lastModifiedDate":"2021-10-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"            Person person \u003d new Person(names[i]);","lastModifiedDate":"2021-10-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            peopleManager.addPerson(person);","lastModifiedDate":"2021-10-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2021-10-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2021-10-16"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void getSize_listNotEmpty_normalResponse() {","lastModifiedDate":"2021-10-16"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertEquals(3, peopleManager.getSize());","lastModifiedDate":"2021-10-16"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-10-16"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2021-10-16"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public void deletePerson_InvalidPersonIndex_expectException() {","lastModifiedDate":"2021-10-16"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertThrows(LotsException.class, () -\u003e {","lastModifiedDate":"2021-10-16"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            peopleManager.deletePerson(8);","lastModifiedDate":"2021-10-16"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        });","lastModifiedDate":"2021-10-16"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-10-16"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2021-10-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public void isEmpty_listOfPeopleNotEmpty_falseReturned() {","lastModifiedDate":"2021-10-15"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertEquals(false, peopleManager.isEmpty());","lastModifiedDate":"2021-10-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-10-13"}],"authorContributionMap":{"thaddyyz":10,"-":40}},{"path":"src/test/java/seedu/duke/PersonTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"WaiKit-nus"},"content":"package seedu.duke;","lastModifiedDate":"2021-10-07"},{"lineNumber":2,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":3,"author":{"gitId":"WaiKit-nus"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-07"},{"lineNumber":4,"author":{"gitId":"thaddyyz"},"content":"import seedu.duke.exceptions.LotsException;","lastModifiedDate":"2021-10-13"},{"lineNumber":5,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":6,"author":{"gitId":"thaddyyz"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2021-10-13"},{"lineNumber":7,"author":{"gitId":"WaiKit-nus"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":8,"author":{"gitId":"WaiKit-nus"},"content":"public class PersonTest {","lastModifiedDate":"2021-10-07"},{"lineNumber":9,"author":{"gitId":"thaddyyz"},"content":"    private static final String TEST_NAME \u003d \"hello\";","lastModifiedDate":"2021-10-13"},{"lineNumber":10,"author":{"gitId":"thaddyyz"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":11,"author":{"gitId":"thaddyyz"},"content":"    @Test","lastModifiedDate":"2021-10-13"},{"lineNumber":12,"author":{"gitId":"markuslyq"},"content":"    public void addFoodToIndividualFoodOrders_menuIndexLessThanOne_expectException() throws LotsException {","lastModifiedDate":"2021-10-24"},{"lineNumber":13,"author":{"gitId":"thaddyyz"},"content":"        Person person \u003d new Person(TEST_NAME);","lastModifiedDate":"2021-10-13"},{"lineNumber":14,"author":{"gitId":"thaddyyz"},"content":"        assertThrows(LotsException.class, () -\u003e {","lastModifiedDate":"2021-10-13"},{"lineNumber":15,"author":{"gitId":"mohamad-adam8991"},"content":"            person.addFoodToIndividualFoodOrders(-1, 1);","lastModifiedDate":"2021-10-17"},{"lineNumber":16,"author":{"gitId":"thaddyyz"},"content":"        });","lastModifiedDate":"2021-10-13"},{"lineNumber":17,"author":{"gitId":"thaddyyz"},"content":"        assertThrows(LotsException.class, () -\u003e {","lastModifiedDate":"2021-10-13"},{"lineNumber":18,"author":{"gitId":"mohamad-adam8991"},"content":"            person.addFoodToIndividualFoodOrders(0, 1);","lastModifiedDate":"2021-10-17"},{"lineNumber":19,"author":{"gitId":"thaddyyz"},"content":"        });","lastModifiedDate":"2021-10-13"},{"lineNumber":20,"author":{"gitId":"thaddyyz"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":21,"author":{"gitId":"thaddyyz"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":22,"author":{"gitId":"thaddyyz"},"content":"    @Test","lastModifiedDate":"2021-10-13"},{"lineNumber":23,"author":{"gitId":"markuslyq"},"content":"    public void addFoodToIndividualFoodOrders_menuIndexOutOfBounds_expectException() throws LotsException {","lastModifiedDate":"2021-10-24"},{"lineNumber":24,"author":{"gitId":"thaddyyz"},"content":"        Person person \u003d new Person(TEST_NAME);","lastModifiedDate":"2021-10-13"},{"lineNumber":25,"author":{"gitId":"thaddyyz"},"content":"        assertThrows(LotsException.class, () -\u003e {","lastModifiedDate":"2021-10-13"},{"lineNumber":26,"author":{"gitId":"mohamad-adam8991"},"content":"            person.addFoodToIndividualFoodOrders(88, 1);","lastModifiedDate":"2021-10-17"},{"lineNumber":27,"author":{"gitId":"thaddyyz"},"content":"        });","lastModifiedDate":"2021-10-13"},{"lineNumber":28,"author":{"gitId":"thaddyyz"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":29,"author":{"gitId":"thaddyyz"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":30,"author":{"gitId":"thaddyyz"},"content":"    /*@Test","lastModifiedDate":"2021-10-13"},{"lineNumber":31,"author":{"gitId":"thaddyyz"},"content":"    public void deleteParticularOrder_menuIndexOutOfBounds_throwsLotsException() {","lastModifiedDate":"2021-10-15"},{"lineNumber":32,"author":{"gitId":"thaddyyz"},"content":"        Person person \u003d new Person(TEST_NAME);","lastModifiedDate":"2021-10-13"},{"lineNumber":33,"author":{"gitId":"thaddyyz"},"content":"        assertThrows(LotsException.class, () -\u003e {","lastModifiedDate":"2021-10-13"},{"lineNumber":34,"author":{"gitId":"thaddyyz"},"content":"            person.deleteParticularOrder(person.numberOfOrders+1);","lastModifiedDate":"2021-10-13"},{"lineNumber":35,"author":{"gitId":"thaddyyz"},"content":"        } );","lastModifiedDate":"2021-10-13"},{"lineNumber":36,"author":{"gitId":"thaddyyz"},"content":"    }*/","lastModifiedDate":"2021-10-13"},{"lineNumber":37,"author":{"gitId":"WaiKit-nus"},"content":" ","lastModifiedDate":"2021-10-07"},{"lineNumber":38,"author":{"gitId":"WaiKit-nus"},"content":"}","lastModifiedDate":"2021-10-07"}],"authorContributionMap":{"markuslyq":2,"mohamad-adam8991":3,"WaiKit-nus":8,"thaddyyz":25}},{"path":"src/test/java/seedu/duke/UiTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"andrewtkh1"},"content":"package seedu.duke;","lastModifiedDate":"2021-10-08"},{"lineNumber":2,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":3,"author":{"gitId":"andrewtkh1"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-08"},{"lineNumber":4,"author":{"gitId":"mohamad-adam8991"},"content":"import seedu.duke.command.Command;","lastModifiedDate":"2021-10-12"},{"lineNumber":5,"author":{"gitId":"mohamad-adam8991"},"content":"import seedu.duke.exceptions.LotsException;","lastModifiedDate":"2021-10-12"},{"lineNumber":6,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":7,"author":{"gitId":"andrewtkh1"},"content":"public class UiTest {","lastModifiedDate":"2021-10-08"},{"lineNumber":8,"author":{"gitId":"andrewtkh1"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":9,"author":{"gitId":"mohamad-adam8991"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":10,"author":{"gitId":"mohamad-adam8991"},"content":"    void execute_inputContainsExtraInputs_throwsLotsException() throws LotsException {","lastModifiedDate":"2021-10-12"},{"lineNumber":11,"author":{"gitId":"mohamad-adam8991"},"content":"        try {","lastModifiedDate":"2021-10-12"},{"lineNumber":12,"author":{"gitId":"mohamad-adam8991"},"content":"            Command command;","lastModifiedDate":"2021-10-12"},{"lineNumber":13,"author":{"gitId":"mohamad-adam8991"},"content":"            command \u003d Parser.getCommand(\"list a\");","lastModifiedDate":"2021-10-12"},{"lineNumber":14,"author":{"gitId":"mohamad-adam8991"},"content":"            command.execute();","lastModifiedDate":"2021-10-12"},{"lineNumber":15,"author":{"gitId":"mohamad-adam8991"},"content":"        } catch (LotsException e) {","lastModifiedDate":"2021-10-12"},{"lineNumber":16,"author":{"gitId":"mohamad-adam8991"},"content":"            System.out.println(\"Please make sure there is no inputs after the list command!\");","lastModifiedDate":"2021-10-12"},{"lineNumber":17,"author":{"gitId":"mohamad-adam8991"},"content":"        }","lastModifiedDate":"2021-10-12"},{"lineNumber":18,"author":{"gitId":"mohamad-adam8991"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":19,"author":{"gitId":"mohamad-adam8991"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":20,"author":{"gitId":"andrewtkh1"},"content":"}","lastModifiedDate":"2021-10-08"}],"authorContributionMap":{"mohamad-adam8991":13,"andrewtkh1":7}}]
