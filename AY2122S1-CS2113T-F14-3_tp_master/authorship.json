[{"path":"build.gradle","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    mainClassName \u003d \"seedu.duke.Duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"checkstyle {","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.23\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"arvejw"},"content":"    enableAssertions \u003d true","lastModifiedDate":"2021-10-14"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":46,"arvejw":1}},{"path":"diagrams/Fluid.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"pragyan01"},"content":"@startuml","lastModifiedDate":"2021-10-21"},{"lineNumber":2,"author":{"gitId":"pragyan01"},"content":"\u0027https://plantuml.com/class-diagram","lastModifiedDate":"2021-10-21"},{"lineNumber":3,"author":{"gitId":"pragyan01"},"content":"skinparam classAttributeIconSize 0","lastModifiedDate":"2021-10-21"},{"lineNumber":4,"author":{"gitId":"pragyan01"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":5,"author":{"gitId":"pragyan01"},"content":"abstract class Tracker {","lastModifiedDate":"2021-10-21"},{"lineNumber":6,"author":{"gitId":"pragyan01"},"content":"}","lastModifiedDate":"2021-10-21"},{"lineNumber":7,"author":{"gitId":"pragyan01"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":8,"author":{"gitId":"pragyan01"},"content":"class Fluid {","lastModifiedDate":"2021-10-21"},{"lineNumber":9,"author":{"gitId":"pragyan01"},"content":"    #fluidArray: ArrayList\u003cString\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":10,"author":{"gitId":"pragyan01"},"content":"    #fluidNumber: int","lastModifiedDate":"2021-10-21"},{"lineNumber":11,"author":{"gitId":"pragyan01"},"content":"    #description: String","lastModifiedDate":"2021-10-21"},{"lineNumber":12,"author":{"gitId":"pragyan01"},"content":"    #calories: int","lastModifiedDate":"2021-10-21"},{"lineNumber":13,"author":{"gitId":"pragyan01"},"content":"    #volume: int","lastModifiedDate":"2021-10-21"},{"lineNumber":14,"author":{"gitId":"pragyan01"},"content":"    #date: String","lastModifiedDate":"2021-10-21"},{"lineNumber":15,"author":{"gitId":"pragyan01"},"content":"    #time: String","lastModifiedDate":"2021-10-21"},{"lineNumber":16,"author":{"gitId":"pragyan01"},"content":"    #totalCalories: int","lastModifiedDate":"2021-10-21"},{"lineNumber":17,"author":{"gitId":"pragyan01"},"content":"    #totalVolume: int","lastModifiedDate":"2021-10-21"},{"lineNumber":18,"author":{"gitId":"pragyan01"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":19,"author":{"gitId":"pragyan01"},"content":"  +generateFluidParameters(inputArguments: String): void","lastModifiedDate":"2021-10-21"},{"lineNumber":20,"author":{"gitId":"pragyan01"},"content":"  +addFluid(inputArguments: String): void","lastModifiedDate":"2021-10-21"},{"lineNumber":21,"author":{"gitId":"pragyan01"},"content":"  +deleteFluid(inputArguments: String): void","lastModifiedDate":"2021-10-21"},{"lineNumber":22,"author":{"gitId":"pragyan01"},"content":"  +listFluid(date: String): void","lastModifiedDate":"2021-10-21"},{"lineNumber":23,"author":{"gitId":"pragyan01"},"content":"  +getCalories(date: String): int","lastModifiedDate":"2021-10-21"},{"lineNumber":24,"author":{"gitId":"pragyan01"},"content":"  +getVolume(date: String): int","lastModifiedDate":"2021-10-21"},{"lineNumber":25,"author":{"gitId":"pragyan01"},"content":"}","lastModifiedDate":"2021-10-21"},{"lineNumber":26,"author":{"gitId":"pragyan01"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":27,"author":{"gitId":"pragyan01"},"content":"class FluidExceptions {","lastModifiedDate":"2021-10-21"},{"lineNumber":28,"author":{"gitId":"pragyan01"},"content":"}","lastModifiedDate":"2021-10-21"},{"lineNumber":29,"author":{"gitId":"pragyan01"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":30,"author":{"gitId":"pragyan01"},"content":"FluidExceptions --|\u003e Fluid","lastModifiedDate":"2021-10-21"},{"lineNumber":31,"author":{"gitId":"pragyan01"},"content":"Fluid --|\u003e \"\u003c\u003cextends\u003e\u003e\" Tracker","lastModifiedDate":"2021-10-21"},{"lineNumber":32,"author":{"gitId":"pragyan01"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":33,"author":{"gitId":"pragyan01"},"content":"@enduml","lastModifiedDate":"2021-10-21"}],"authorContributionMap":{"pragyan01":33}},{"path":"diagrams/Fluid_AddFluid_Sequence.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"pragyan01"},"content":"@startuml","lastModifiedDate":"2021-10-26"},{"lineNumber":2,"author":{"gitId":"pragyan01"},"content":"\u0027https://plantuml.com/sequence-diagram","lastModifiedDate":"2021-10-26"},{"lineNumber":3,"author":{"gitId":"pragyan01"},"content":"|||","lastModifiedDate":"2021-10-26"},{"lineNumber":4,"author":{"gitId":"pragyan01"},"content":"participant \"fluid:Fluid\"","lastModifiedDate":"2021-10-26"},{"lineNumber":5,"author":{"gitId":"pragyan01"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":6,"author":{"gitId":"pragyan01"},"content":"-\u003e\"fluid:Fluid\" : addFluid(inputArguments: String)","lastModifiedDate":"2021-10-26"},{"lineNumber":7,"author":{"gitId":"pragyan01"},"content":"activate \"fluid:Fluid\" #FFBBBB","lastModifiedDate":"2021-10-26"},{"lineNumber":8,"author":{"gitId":"pragyan01"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":9,"author":{"gitId":"pragyan01"},"content":"\"fluid:Fluid\"-\u003e\"fluid:Fluid\" : generateFluidParameters(inputArguments: String)","lastModifiedDate":"2021-10-26"},{"lineNumber":10,"author":{"gitId":"pragyan01"},"content":"activate \"fluid:Fluid\" #DarkSalmon","lastModifiedDate":"2021-10-26"},{"lineNumber":11,"author":{"gitId":"pragyan01"},"content":"return","lastModifiedDate":"2021-10-26"},{"lineNumber":12,"author":{"gitId":"pragyan01"},"content":"|||","lastModifiedDate":"2021-10-26"},{"lineNumber":13,"author":{"gitId":"pragyan01"},"content":"alt no fluid description \\n or description has \\n separators","lastModifiedDate":"2021-10-26"},{"lineNumber":14,"author":{"gitId":"pragyan01"},"content":"else else","lastModifiedDate":"2021-10-26"},{"lineNumber":15,"author":{"gitId":"pragyan01"},"content":"\"fluid:Fluid\"-\u003e\"fluid:Fluid\" : fluidArray.add(inputArguments: String)","lastModifiedDate":"2021-10-26"},{"lineNumber":16,"author":{"gitId":"pragyan01"},"content":"activate \"fluid:Fluid\" #IndianRed","lastModifiedDate":"2021-10-26"},{"lineNumber":17,"author":{"gitId":"pragyan01"},"content":"return","lastModifiedDate":"2021-10-26"},{"lineNumber":18,"author":{"gitId":"pragyan01"},"content":"|||","lastModifiedDate":"2021-10-26"},{"lineNumber":19,"author":{"gitId":"pragyan01"},"content":"    end","lastModifiedDate":"2021-10-26"},{"lineNumber":20,"author":{"gitId":"pragyan01"},"content":"    note left : if block only throws an exception","lastModifiedDate":"2021-10-26"},{"lineNumber":21,"author":{"gitId":"pragyan01"},"content":"    |||","lastModifiedDate":"2021-10-26"},{"lineNumber":22,"author":{"gitId":"pragyan01"},"content":"    deactivate \"fluid:Fluid\"","lastModifiedDate":"2021-10-26"},{"lineNumber":23,"author":{"gitId":"pragyan01"},"content":"    |||","lastModifiedDate":"2021-10-26"},{"lineNumber":24,"author":{"gitId":"pragyan01"},"content":"@enduml","lastModifiedDate":"2021-10-26"}],"authorContributionMap":{"pragyan01":24}},{"path":"diagrams/Meal.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"VishalJeyaram"},"content":"@startuml","lastModifiedDate":"2021-10-21"},{"lineNumber":2,"author":{"gitId":"VishalJeyaram"},"content":"\u0027https://plantuml.com/class-diagram","lastModifiedDate":"2021-10-21"},{"lineNumber":3,"author":{"gitId":"VishalJeyaram"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":4,"author":{"gitId":"VishalJeyaram"},"content":"class Meal","lastModifiedDate":"2021-10-21"},{"lineNumber":5,"author":{"gitId":"VishalJeyaram"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":6,"author":{"gitId":"VishalJeyaram"},"content":"abstract class Tracker {","lastModifiedDate":"2021-10-21"},{"lineNumber":7,"author":{"gitId":"VishalJeyaram"},"content":"}","lastModifiedDate":"2021-10-21"},{"lineNumber":8,"author":{"gitId":"VishalJeyaram"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":9,"author":{"gitId":"VishalJeyaram"},"content":"class Meal {","lastModifiedDate":"2021-10-21"},{"lineNumber":10,"author":{"gitId":"VishalJeyaram"},"content":"protected ArrayList\u003cString\u003e meals;","lastModifiedDate":"2021-10-21"},{"lineNumber":11,"author":{"gitId":"VishalJeyaram"},"content":"    #mealNumber: int","lastModifiedDate":"2021-10-21"},{"lineNumber":12,"author":{"gitId":"VishalJeyaram"},"content":"    #calories: int","lastModifiedDate":"2021-10-21"},{"lineNumber":13,"author":{"gitId":"VishalJeyaram"},"content":"    #description: String","lastModifiedDate":"2021-10-21"},{"lineNumber":14,"author":{"gitId":"VishalJeyaram"},"content":"    #date: String","lastModifiedDate":"2021-10-21"},{"lineNumber":15,"author":{"gitId":"VishalJeyaram"},"content":"    #time: String","lastModifiedDate":"2021-10-21"},{"lineNumber":16,"author":{"gitId":"VishalJeyaram"},"content":"    #totalCalories: int","lastModifiedDate":"2021-10-21"},{"lineNumber":17,"author":{"gitId":"VishalJeyaram"},"content":"    - {static} logger: Logger","lastModifiedDate":"2021-10-21"},{"lineNumber":18,"author":{"gitId":"VishalJeyaram"},"content":"    +generateWeightParameters(inputArguments: String): void","lastModifiedDate":"2021-10-21"},{"lineNumber":19,"author":{"gitId":"VishalJeyaram"},"content":"    +addMeal(inputArguments: String): void","lastModifiedDate":"2021-10-21"},{"lineNumber":20,"author":{"gitId":"VishalJeyaram"},"content":"    +deleteMeal(inputArguments: String): void","lastModifiedDate":"2021-10-21"},{"lineNumber":21,"author":{"gitId":"VishalJeyaram"},"content":"    +listMeals(inputArguments: String): void","lastModifiedDate":"2021-10-21"},{"lineNumber":22,"author":{"gitId":"VishalJeyaram"},"content":"    +getCalories(date: String): int","lastModifiedDate":"2021-10-21"},{"lineNumber":23,"author":{"gitId":"VishalJeyaram"},"content":"}","lastModifiedDate":"2021-10-21"},{"lineNumber":24,"author":{"gitId":"VishalJeyaram"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":25,"author":{"gitId":"VishalJeyaram"},"content":"Meal --|\u003e \"\u003c\u003cextends\u003e\u003e\" Tracker","lastModifiedDate":"2021-10-21"},{"lineNumber":26,"author":{"gitId":"VishalJeyaram"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":27,"author":{"gitId":"VishalJeyaram"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":28,"author":{"gitId":"VishalJeyaram"},"content":"@enduml","lastModifiedDate":"2021-10-21"}],"authorContributionMap":{"VishalJeyaram":28}},{"path":"diagrams/Meal_ListMeals_sequence.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"VishalJeyaram"},"content":"@startuml","lastModifiedDate":"2021-10-26"},{"lineNumber":2,"author":{"gitId":"VishalJeyaram"},"content":"\u0027https://plantuml.com/sequence-diagram","lastModifiedDate":"2021-10-26"},{"lineNumber":3,"author":{"gitId":"VishalJeyaram"},"content":"participant \"meal:Meal\"","lastModifiedDate":"2021-10-26"},{"lineNumber":4,"author":{"gitId":"VishalJeyaram"},"content":"    -\u003e\"meal:Meal\" : \"listMeals(date: String)\"","lastModifiedDate":"2021-10-26"},{"lineNumber":5,"author":{"gitId":"VishalJeyaram"},"content":"    activate \"meal:Meal\" #FFBBBB","lastModifiedDate":"2021-10-26"},{"lineNumber":6,"author":{"gitId":"VishalJeyaram"},"content":"    alt date.equals(\"all\")","lastModifiedDate":"2021-10-26"},{"lineNumber":7,"author":{"gitId":"VishalJeyaram"},"content":"    |||","lastModifiedDate":"2021-10-26"},{"lineNumber":8,"author":{"gitId":"VishalJeyaram"},"content":"    loop Until no more meals","lastModifiedDate":"2021-10-26"},{"lineNumber":9,"author":{"gitId":"VishalJeyaram"},"content":"    \"meal:Meal\"-\u003e\"meal:Meal\" : generateMealParameters(inputArguments: String)","lastModifiedDate":"2021-10-26"},{"lineNumber":10,"author":{"gitId":"VishalJeyaram"},"content":"    activate \"meal:Meal\" #FFBBBB","lastModifiedDate":"2021-10-26"},{"lineNumber":11,"author":{"gitId":"VishalJeyaram"},"content":"    return","lastModifiedDate":"2021-10-26"},{"lineNumber":12,"author":{"gitId":"VishalJeyaram"},"content":"    |||","lastModifiedDate":"2021-10-26"},{"lineNumber":13,"author":{"gitId":"VishalJeyaram"},"content":"    end","lastModifiedDate":"2021-10-26"},{"lineNumber":14,"author":{"gitId":"VishalJeyaram"},"content":"    |||","lastModifiedDate":"2021-10-26"},{"lineNumber":15,"author":{"gitId":"VishalJeyaram"},"content":"    else","lastModifiedDate":"2021-10-26"},{"lineNumber":16,"author":{"gitId":"VishalJeyaram"},"content":"    |||","lastModifiedDate":"2021-10-26"},{"lineNumber":17,"author":{"gitId":"VishalJeyaram"},"content":"    loop Until no more meals","lastModifiedDate":"2021-10-26"},{"lineNumber":18,"author":{"gitId":"VishalJeyaram"},"content":"    |||","lastModifiedDate":"2021-10-26"},{"lineNumber":19,"author":{"gitId":"VishalJeyaram"},"content":"    opt meal.contains(date)","lastModifiedDate":"2021-10-26"},{"lineNumber":20,"author":{"gitId":"VishalJeyaram"},"content":"    \"meal:Meal\"-\u003e\"meal:Meal\" : generateMealParameters(inputArguments: String)","lastModifiedDate":"2021-10-26"},{"lineNumber":21,"author":{"gitId":"VishalJeyaram"},"content":"    activate \"meal:Meal\" #FFBBBB","lastModifiedDate":"2021-10-26"},{"lineNumber":22,"author":{"gitId":"VishalJeyaram"},"content":"    return","lastModifiedDate":"2021-10-26"},{"lineNumber":23,"author":{"gitId":"VishalJeyaram"},"content":"    |||","lastModifiedDate":"2021-10-26"},{"lineNumber":24,"author":{"gitId":"VishalJeyaram"},"content":"    end","lastModifiedDate":"2021-10-26"},{"lineNumber":25,"author":{"gitId":"VishalJeyaram"},"content":"    |||","lastModifiedDate":"2021-10-26"},{"lineNumber":26,"author":{"gitId":"VishalJeyaram"},"content":"    end","lastModifiedDate":"2021-10-26"},{"lineNumber":27,"author":{"gitId":"VishalJeyaram"},"content":"    |||","lastModifiedDate":"2021-10-26"},{"lineNumber":28,"author":{"gitId":"VishalJeyaram"},"content":"    end","lastModifiedDate":"2021-10-26"},{"lineNumber":29,"author":{"gitId":"VishalJeyaram"},"content":"    deactivate \"meal:Meal\"","lastModifiedDate":"2021-10-26"},{"lineNumber":30,"author":{"gitId":"VishalJeyaram"},"content":"    |||","lastModifiedDate":"2021-10-26"},{"lineNumber":31,"author":{"gitId":"VishalJeyaram"},"content":"@enduml","lastModifiedDate":"2021-10-26"}],"authorContributionMap":{"VishalJeyaram":31}},{"path":"diagrams/ScheduleTracker_add_sequence.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"arvejw"},"content":"@startuml","lastModifiedDate":"2021-10-18"},{"lineNumber":2,"author":{"gitId":"arvejw"},"content":"\u0027https://plantuml.com/sequence-diagram","lastModifiedDate":"2021-10-18"},{"lineNumber":3,"author":{"gitId":"arvejw"},"content":"participant \":ScheduleTracker\"","lastModifiedDate":"2021-10-18"},{"lineNumber":4,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":5,"author":{"gitId":"arvejw"},"content":"-\u003e\":ScheduleTracker\" : addScheduledWorkout(inputArguments: String)","lastModifiedDate":"2021-10-18"},{"lineNumber":6,"author":{"gitId":"arvejw"},"content":"activate \":ScheduleTracker\" #FFBBBB","lastModifiedDate":"2021-10-18"},{"lineNumber":7,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":8,"author":{"gitId":"arvejw"},"content":"\":ScheduleTracker\"-\u003e\":ScheduleTracker\" : generateParameters(inputArguments: String)","lastModifiedDate":"2021-10-21"},{"lineNumber":9,"author":{"gitId":"arvejw"},"content":"activate \":ScheduleTracker\" #DarkSalmon","lastModifiedDate":"2021-10-21"},{"lineNumber":10,"author":{"gitId":"arvejw"},"content":"return generatedParameters: String[]","lastModifiedDate":"2021-10-21"},{"lineNumber":11,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":12,"author":{"gitId":"arvejw"},"content":"create \":ScheduledWorkout\"","lastModifiedDate":"2021-10-21"},{"lineNumber":13,"author":{"gitId":"arvejw"},"content":"\":ScheduleTracker\"-\u003e\":ScheduledWorkout\" : scheduledWorkouts.add(scheduledWorkout: ScheduledWorkout)","lastModifiedDate":"2021-10-21"},{"lineNumber":14,"author":{"gitId":"arvejw"},"content":"activate \":ScheduledWorkout\"","lastModifiedDate":"2021-10-21"},{"lineNumber":15,"author":{"gitId":"arvejw"},"content":"\":ScheduledWorkout\"--\u003e\":ScheduleTracker\"","lastModifiedDate":"2021-10-21"},{"lineNumber":16,"author":{"gitId":"arvejw"},"content":"deactivate \":ScheduledWorkout\"","lastModifiedDate":"2021-10-21"},{"lineNumber":17,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":18,"author":{"gitId":"arvejw"},"content":"\":ScheduleTracker\"-\u003e\":ScheduleTracker\" : cleanUpScheduleList()","lastModifiedDate":"2021-10-21"},{"lineNumber":19,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":20,"author":{"gitId":"arvejw"},"content":"activate \":ScheduleTracker\" #DarkSalmon","lastModifiedDate":"2021-10-18"},{"lineNumber":21,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":22,"author":{"gitId":"arvejw"},"content":"loop \\tno more overdue workouts\\t","lastModifiedDate":"2021-10-18"},{"lineNumber":23,"author":{"gitId":"arvejw"},"content":"    note left : Take note that a workout is \"overdue\" \\nif its scheduled date is before the current date","lastModifiedDate":"2021-10-18"},{"lineNumber":24,"author":{"gitId":"arvejw"},"content":"    \":ScheduleTracker\"-\u003e\":ScheduleTracker\" : updateOrDeleteScheduledWorkout(\\n\\tscheduledWorkout: ScheduledWorkout,\\n\\tcurrentDate: LocalDate)","lastModifiedDate":"2021-10-21"},{"lineNumber":25,"author":{"gitId":"arvejw"},"content":"    activate \":ScheduleTracker\" #IndianRed","lastModifiedDate":"2021-10-18"},{"lineNumber":26,"author":{"gitId":"arvejw"},"content":"    alt \\tisRecurringWorkout\\t","lastModifiedDate":"2021-10-18"},{"lineNumber":27,"author":{"gitId":"arvejw"},"content":"        \":ScheduleTracker\"-\u003e\":ScheduleTracker\" : rescheduleRecurringWorkout(\\n\\tscheduledWorkout: ScheduledWorkout,\\n\\tcurrentDate: LocalDate)","lastModifiedDate":"2021-10-21"},{"lineNumber":28,"author":{"gitId":"arvejw"},"content":"        activate \":ScheduleTracker\" #LightSalmon","lastModifiedDate":"2021-10-18"},{"lineNumber":29,"author":{"gitId":"arvejw"},"content":"        \":ScheduleTracker\"-\u003e\":ScheduledWorkout\" : incrementWorkoutDate(days: long)","lastModifiedDate":"2021-10-18"},{"lineNumber":30,"author":{"gitId":"arvejw"},"content":"        |||","lastModifiedDate":"2021-10-18"},{"lineNumber":31,"author":{"gitId":"arvejw"},"content":"        activate \":ScheduledWorkout\"","lastModifiedDate":"2021-10-18"},{"lineNumber":32,"author":{"gitId":"arvejw"},"content":"        return","lastModifiedDate":"2021-10-18"},{"lineNumber":33,"author":{"gitId":"arvejw"},"content":"        return","lastModifiedDate":"2021-10-18"},{"lineNumber":34,"author":{"gitId":"arvejw"},"content":"        |||","lastModifiedDate":"2021-10-18"},{"lineNumber":35,"author":{"gitId":"arvejw"},"content":"    else else","lastModifiedDate":"2021-10-18"},{"lineNumber":36,"author":{"gitId":"arvejw"},"content":"        \":ScheduleTracker\"-\u003e\":ScheduleTracker\" : deleteWorkout()","lastModifiedDate":"2021-10-18"},{"lineNumber":37,"author":{"gitId":"arvejw"},"content":"        activate \":ScheduleTracker\" #LightSalmon","lastModifiedDate":"2021-10-18"},{"lineNumber":38,"author":{"gitId":"arvejw"},"content":"        \":ScheduleTracker\"-\u003e\":ScheduledWorkout\" : scheduledWorkouts.remove(\\n\\tscheduledWorkout: ScheduledWorkout)","lastModifiedDate":"2021-10-21"},{"lineNumber":39,"author":{"gitId":"arvejw"},"content":"        activate \":ScheduledWorkout\"","lastModifiedDate":"2021-10-18"},{"lineNumber":40,"author":{"gitId":"arvejw"},"content":"        destroy \":ScheduledWorkout\"","lastModifiedDate":"2021-10-18"},{"lineNumber":41,"author":{"gitId":"arvejw"},"content":"        return","lastModifiedDate":"2021-10-18"},{"lineNumber":42,"author":{"gitId":"arvejw"},"content":"        return","lastModifiedDate":"2021-10-18"},{"lineNumber":43,"author":{"gitId":"arvejw"},"content":"        |||","lastModifiedDate":"2021-10-18"},{"lineNumber":44,"author":{"gitId":"arvejw"},"content":"    end","lastModifiedDate":"2021-10-18"},{"lineNumber":45,"author":{"gitId":"arvejw"},"content":"end","lastModifiedDate":"2021-10-18"},{"lineNumber":46,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":47,"author":{"gitId":"arvejw"},"content":"\":ScheduleTracker\"-\u003e\":ScheduleTracker\" : sortScheduleList()","lastModifiedDate":"2021-10-18"},{"lineNumber":48,"author":{"gitId":"arvejw"},"content":"activate \":ScheduleTracker\" #LightSalmon","lastModifiedDate":"2021-10-18"},{"lineNumber":49,"author":{"gitId":"arvejw"},"content":"return","lastModifiedDate":"2021-10-18"},{"lineNumber":50,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":51,"author":{"gitId":"arvejw"},"content":"return","lastModifiedDate":"2021-10-18"},{"lineNumber":52,"author":{"gitId":"arvejw"},"content":"return","lastModifiedDate":"2021-10-18"},{"lineNumber":53,"author":{"gitId":"arvejw"},"content":"return","lastModifiedDate":"2021-10-18"},{"lineNumber":54,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":55,"author":{"gitId":"arvejw"},"content":"@enduml","lastModifiedDate":"2021-10-18"}],"authorContributionMap":{"arvejw":55}},{"path":"diagrams/ScheduleTracker_class.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"arvejw"},"content":"@startuml","lastModifiedDate":"2021-10-18"},{"lineNumber":2,"author":{"gitId":"arvejw"},"content":"\u0027https://plantuml.com/class-diagram","lastModifiedDate":"2021-10-18"},{"lineNumber":3,"author":{"gitId":"arvejw"},"content":"skinparam classAttributeIconSize 0","lastModifiedDate":"2021-10-18"},{"lineNumber":4,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":5,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":6,"author":{"gitId":"arvejw"},"content":"class ScheduleTracker {","lastModifiedDate":"2021-10-18"},{"lineNumber":7,"author":{"gitId":"arvejw"},"content":"+ScheduleTracker()","lastModifiedDate":"2021-10-18"},{"lineNumber":8,"author":{"gitId":"arvejw"},"content":"+addScheduledWorkout(inputArguments: String):void","lastModifiedDate":"2021-10-18"},{"lineNumber":9,"author":{"gitId":"arvejw"},"content":"+deleteScheduledworkout(inputArguments: String): void","lastModifiedDate":"2021-10-18"},{"lineNumber":10,"author":{"gitId":"arvejw"},"content":"+listScheduledWorkouts(): void","lastModifiedDate":"2021-10-18"},{"lineNumber":11,"author":{"gitId":"arvejw"},"content":"}","lastModifiedDate":"2021-10-18"},{"lineNumber":12,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":13,"author":{"gitId":"arvejw"},"content":"note bottom of ScheduledWorkout : Basic getter methods for attributes omitted","lastModifiedDate":"2021-10-18"},{"lineNumber":14,"author":{"gitId":"arvejw"},"content":"class ScheduledWorkout {","lastModifiedDate":"2021-10-18"},{"lineNumber":15,"author":{"gitId":"arvejw"},"content":"-workoutDescription: String","lastModifiedDate":"2021-10-18"},{"lineNumber":16,"author":{"gitId":"arvejw"},"content":"-workoutDate: String","lastModifiedDate":"2021-10-18"},{"lineNumber":17,"author":{"gitId":"arvejw"},"content":"-workoutTime: String","lastModifiedDate":"2021-10-18"},{"lineNumber":18,"author":{"gitId":"arvejw"},"content":"-workoutDateTime: LocalDateTime","lastModifiedDate":"2021-10-18"},{"lineNumber":19,"author":{"gitId":"arvejw"},"content":"-isRecurring: boolean","lastModifiedDate":"2021-10-18"},{"lineNumber":20,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":21,"author":{"gitId":"arvejw"},"content":"+ScheduledWorkout(workoutDescription: String, \\n\\tworkoutDate: String, workoutTime: String, \\n\\tactivityMap: Map\u003cString, ArrayList\u003cInteger\u003e\u003e  \\n\\tisRecurring: boolean)","lastModifiedDate":"2021-10-22"},{"lineNumber":22,"author":{"gitId":"arvejw"},"content":"+incrementWorkoutDate(): void","lastModifiedDate":"2021-10-18"},{"lineNumber":23,"author":{"gitId":"arvejw"},"content":"}","lastModifiedDate":"2021-10-18"},{"lineNumber":24,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":25,"author":{"gitId":"arvejw"},"content":"note top of WorkoutActivity : Basic getter methods for attribute omitted","lastModifiedDate":"2021-10-21"},{"lineNumber":26,"author":{"gitId":"arvejw"},"content":"class WorkoutActivity {","lastModifiedDate":"2021-10-21"},{"lineNumber":27,"author":{"gitId":"arvejw"},"content":"private String activityDescription;","lastModifiedDate":"2021-10-21"},{"lineNumber":28,"author":{"gitId":"arvejw"},"content":"    -boolean isDistanceActivity \u003d false;","lastModifiedDate":"2021-10-21"},{"lineNumber":29,"author":{"gitId":"arvejw"},"content":"    -activityDistance: int","lastModifiedDate":"2021-10-21"},{"lineNumber":30,"author":{"gitId":"arvejw"},"content":"    -activitySets: int","lastModifiedDate":"2021-10-21"},{"lineNumber":31,"author":{"gitId":"arvejw"},"content":"    -activityReps: int","lastModifiedDate":"2021-10-21"},{"lineNumber":32,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":33,"author":{"gitId":"arvejw"},"content":"    +WorkoutActivity(activityDescription: String,","lastModifiedDate":"2021-10-21"},{"lineNumber":34,"author":{"gitId":"arvejw"},"content":"     \\tactivityQuantifier: ArrayList\u003cInteger\u003e,\\n\\tisDistanceActivity: boolean)","lastModifiedDate":"2021-10-22"},{"lineNumber":35,"author":{"gitId":"arvejw"},"content":"}","lastModifiedDate":"2021-10-21"},{"lineNumber":36,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":37,"author":{"gitId":"arvejw"},"content":"ScheduleTracker --\u003e  \"[0..*] scheduledWorkouts\" ScheduledWorkout","lastModifiedDate":"2021-10-21"},{"lineNumber":38,"author":{"gitId":"arvejw"},"content":"ScheduledWorkout --\u003e  \"\\t\\t\\n\\n\\n\\n[0..*] activities\" WorkoutActivity","lastModifiedDate":"2021-10-21"},{"lineNumber":39,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":40,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":41,"author":{"gitId":"arvejw"},"content":"@enduml","lastModifiedDate":"2021-10-18"}],"authorContributionMap":{"arvejw":41}},{"path":"diagrams/Ui.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"EdwardZYWang"},"content":"@startuml","lastModifiedDate":"2021-10-21"},{"lineNumber":2,"author":{"gitId":"EdwardZYWang"},"content":"\u0027https://plantuml.com/class-diagram","lastModifiedDate":"2021-10-21"},{"lineNumber":3,"author":{"gitId":"EdwardZYWang"},"content":"skinparam classAttributeIconSize 0","lastModifiedDate":"2021-10-21"},{"lineNumber":4,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":5,"author":{"gitId":"EdwardZYWang"},"content":"class Ui {","lastModifiedDate":"2021-10-21"},{"lineNumber":6,"author":{"gitId":"EdwardZYWang"},"content":"+welcomeMessage():void","lastModifiedDate":"2021-10-21"},{"lineNumber":7,"author":{"gitId":"EdwardZYWang"},"content":"+getInfo():void","lastModifiedDate":"2021-10-21"},{"lineNumber":8,"author":{"gitId":"EdwardZYWang"},"content":"+memoryStartup():void","lastModifiedDate":"2021-10-21"},{"lineNumber":9,"author":{"gitId":"EdwardZYWang"},"content":"+sex:String","lastModifiedDate":"2021-10-21"},{"lineNumber":10,"author":{"gitId":"EdwardZYWang"},"content":"+weight:int","lastModifiedDate":"2021-10-21"},{"lineNumber":11,"author":{"gitId":"EdwardZYWang"},"content":"+height:int","lastModifiedDate":"2021-10-21"},{"lineNumber":12,"author":{"gitId":"EdwardZYWang"},"content":"+age:int","lastModifiedDate":"2021-10-21"},{"lineNumber":13,"author":{"gitId":"EdwardZYWang"},"content":"+activityLevel:int","lastModifiedDate":"2021-10-21"},{"lineNumber":14,"author":{"gitId":"EdwardZYWang"},"content":"}","lastModifiedDate":"2021-10-21"},{"lineNumber":15,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":16,"author":{"gitId":"EdwardZYWang"},"content":"note bottom of Calculator : Prints out BMI of the user and his/her recommended caloric intake","lastModifiedDate":"2021-10-21"},{"lineNumber":17,"author":{"gitId":"EdwardZYWang"},"content":"class Calculator {","lastModifiedDate":"2021-10-21"},{"lineNumber":18,"author":{"gitId":"EdwardZYWang"},"content":"+getBmi():void","lastModifiedDate":"2021-10-21"},{"lineNumber":19,"author":{"gitId":"EdwardZYWang"},"content":"+getIdealCalories():void","lastModifiedDate":"2021-10-21"},{"lineNumber":20,"author":{"gitId":"EdwardZYWang"},"content":"+sex:String","lastModifiedDate":"2021-10-21"},{"lineNumber":21,"author":{"gitId":"EdwardZYWang"},"content":"+weight:int","lastModifiedDate":"2021-10-21"},{"lineNumber":22,"author":{"gitId":"EdwardZYWang"},"content":"+height:int","lastModifiedDate":"2021-10-21"},{"lineNumber":23,"author":{"gitId":"EdwardZYWang"},"content":"+age:int","lastModifiedDate":"2021-10-21"},{"lineNumber":24,"author":{"gitId":"EdwardZYWang"},"content":"+activityLevel:int","lastModifiedDate":"2021-10-21"},{"lineNumber":25,"author":{"gitId":"EdwardZYWang"},"content":"}","lastModifiedDate":"2021-10-21"},{"lineNumber":26,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":27,"author":{"gitId":"EdwardZYWang"},"content":"Ui --\u003e  \"1\" Calculator","lastModifiedDate":"2021-10-21"},{"lineNumber":28,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":29,"author":{"gitId":"EdwardZYWang"},"content":"@enduml","lastModifiedDate":"2021-10-21"}],"authorContributionMap":{"EdwardZYWang":29}},{"path":"diagrams/WeightTracker_add_sequence.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"teoziyiivy"},"content":"@startuml","lastModifiedDate":"2021-10-21"},{"lineNumber":2,"author":{"gitId":"teoziyiivy"},"content":"\u0027https://plantuml.com/sequence-diagram","lastModifiedDate":"2021-10-21"},{"lineNumber":3,"author":{"gitId":"teoziyiivy"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":4,"author":{"gitId":"teoziyiivy"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":5,"author":{"gitId":"teoziyiivy"},"content":"participant \":WeightTracker\"","lastModifiedDate":"2021-10-21"},{"lineNumber":6,"author":{"gitId":"teoziyiivy"},"content":"participant \":WeightTrackerMessages\"","lastModifiedDate":"2021-10-21"},{"lineNumber":7,"author":{"gitId":"teoziyiivy"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":8,"author":{"gitId":"teoziyiivy"},"content":"-\u003e\":WeightTracker\" : weightTracker.addWeights(input: String)","lastModifiedDate":"2021-10-26"},{"lineNumber":9,"author":{"gitId":"teoziyiivy"},"content":"activate \":WeightTracker\" #Salmon","lastModifiedDate":"2021-10-21"},{"lineNumber":10,"author":{"gitId":"teoziyiivy"},"content":"\":WeightTracker\"-\u003e\":WeightTracker\" : generateWeightParameters(inputArguments: String)","lastModifiedDate":"2021-10-21"},{"lineNumber":11,"author":{"gitId":"teoziyiivy"},"content":"activate \":WeightTracker\" #LightSalmon","lastModifiedDate":"2021-10-21"},{"lineNumber":12,"author":{"gitId":"teoziyiivy"},"content":"return","lastModifiedDate":"2021-10-21"},{"lineNumber":13,"author":{"gitId":"teoziyiivy"},"content":"alt typical input","lastModifiedDate":"2021-10-26"},{"lineNumber":14,"author":{"gitId":"teoziyiivy"},"content":"\":WeightTracker\"-\u003e\":WeightTrackerMessages\" : printAddWeightResponse(weight: int, date: String)","lastModifiedDate":"2021-10-21"},{"lineNumber":15,"author":{"gitId":"teoziyiivy"},"content":"activate \":WeightTracker\" #LightSalmon","lastModifiedDate":"2021-10-21"},{"lineNumber":16,"author":{"gitId":"teoziyiivy"},"content":"activate \":WeightTrackerMessages\" #Tomato","lastModifiedDate":"2021-10-26"},{"lineNumber":17,"author":{"gitId":"teoziyiivy"},"content":"return","lastModifiedDate":"2021-10-21"},{"lineNumber":18,"author":{"gitId":"teoziyiivy"},"content":"deactivate \":WeightTrackerMessages\"","lastModifiedDate":"2021-10-26"},{"lineNumber":19,"author":{"gitId":"teoziyiivy"},"content":"return","lastModifiedDate":"2021-10-21"},{"lineNumber":20,"author":{"gitId":"teoziyiivy"},"content":"else missing date","lastModifiedDate":"2021-10-26"},{"lineNumber":21,"author":{"gitId":"teoziyiivy"},"content":"\":WeightTracker\"-\u003e\":WeightTrackerMessages\" : printAddWeightResponse(weight: int, date: String)","lastModifiedDate":"2021-10-26"},{"lineNumber":22,"author":{"gitId":"teoziyiivy"},"content":"activate \":WeightTracker\" #LightSalmon","lastModifiedDate":"2021-10-26"},{"lineNumber":23,"author":{"gitId":"teoziyiivy"},"content":"activate \":WeightTrackerMessages\"#Tomato","lastModifiedDate":"2021-10-26"},{"lineNumber":24,"author":{"gitId":"teoziyiivy"},"content":"return","lastModifiedDate":"2021-10-21"},{"lineNumber":25,"author":{"gitId":"teoziyiivy"},"content":"deactivate \":WeightTrackerMessages\"","lastModifiedDate":"2021-10-26"},{"lineNumber":26,"author":{"gitId":"teoziyiivy"},"content":"\u003c--\":WeightTracker\"","lastModifiedDate":"2021-10-26"},{"lineNumber":27,"author":{"gitId":"teoziyiivy"},"content":"deactivate \":WeightTracker\"","lastModifiedDate":"2021-10-26"},{"lineNumber":28,"author":{"gitId":"teoziyiivy"},"content":"else exception","lastModifiedDate":"2021-10-26"},{"lineNumber":29,"author":{"gitId":"teoziyiivy"},"content":"\u003c--\":WeightTracker\" : AddWeightException()","lastModifiedDate":"2021-10-26"},{"lineNumber":30,"author":{"gitId":"teoziyiivy"},"content":"end","lastModifiedDate":"2021-10-26"},{"lineNumber":31,"author":{"gitId":"teoziyiivy"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":32,"author":{"gitId":"teoziyiivy"},"content":"@enduml","lastModifiedDate":"2021-10-21"}],"authorContributionMap":{"teoziyiivy":32}},{"path":"diagrams/WeightTracker_class.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"teoziyiivy"},"content":"@startuml","lastModifiedDate":"2021-10-21"},{"lineNumber":2,"author":{"gitId":"teoziyiivy"},"content":"\u0027https://plantuml.com/class-diagram","lastModifiedDate":"2021-10-21"},{"lineNumber":3,"author":{"gitId":"teoziyiivy"},"content":"skinparam classAttributeIconSize 0","lastModifiedDate":"2021-10-21"},{"lineNumber":4,"author":{"gitId":"teoziyiivy"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":5,"author":{"gitId":"teoziyiivy"},"content":"abstract class Tracker {","lastModifiedDate":"2021-10-21"},{"lineNumber":6,"author":{"gitId":"teoziyiivy"},"content":"}","lastModifiedDate":"2021-10-21"},{"lineNumber":7,"author":{"gitId":"teoziyiivy"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":8,"author":{"gitId":"teoziyiivy"},"content":"class WeightTracker {","lastModifiedDate":"2021-10-21"},{"lineNumber":9,"author":{"gitId":"teoziyiivy"},"content":"#weightsArray: ArrayList\u003cString\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":10,"author":{"gitId":"teoziyiivy"},"content":"#numberOfWeights: int","lastModifiedDate":"2021-10-21"},{"lineNumber":11,"author":{"gitId":"teoziyiivy"},"content":"#weight: int","lastModifiedDate":"2021-10-21"},{"lineNumber":12,"author":{"gitId":"teoziyiivy"},"content":"#date: String","lastModifiedDate":"2021-10-21"},{"lineNumber":13,"author":{"gitId":"teoziyiivy"},"content":"- {static} logger: Logger","lastModifiedDate":"2021-10-21"},{"lineNumber":14,"author":{"gitId":"teoziyiivy"},"content":"+WeightTracker()","lastModifiedDate":"2021-10-21"},{"lineNumber":15,"author":{"gitId":"teoziyiivy"},"content":"+generateWeightParameters(inputArguments: String): void","lastModifiedDate":"2021-10-21"},{"lineNumber":16,"author":{"gitId":"teoziyiivy"},"content":"+addWeight(input: String): void","lastModifiedDate":"2021-10-21"},{"lineNumber":17,"author":{"gitId":"teoziyiivy"},"content":"+deleteWeight(input: String): void","lastModifiedDate":"2021-10-21"},{"lineNumber":18,"author":{"gitId":"teoziyiivy"},"content":"+printWeight(input: String): void","lastModifiedDate":"2021-10-26"},{"lineNumber":19,"author":{"gitId":"teoziyiivy"},"content":"+listWeights(input: String): void","lastModifiedDate":"2021-10-26"},{"lineNumber":20,"author":{"gitId":"teoziyiivy"},"content":"+listSpecificWeights(input: String): void","lastModifiedDate":"2021-10-26"},{"lineNumber":21,"author":{"gitId":"teoziyiivy"},"content":"+listAllWeights(): void","lastModifiedDate":"2021-10-26"},{"lineNumber":22,"author":{"gitId":"teoziyiivy"},"content":"}","lastModifiedDate":"2021-10-21"},{"lineNumber":23,"author":{"gitId":"teoziyiivy"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":24,"author":{"gitId":"teoziyiivy"},"content":"class AddWeightException {","lastModifiedDate":"2021-10-26"},{"lineNumber":25,"author":{"gitId":"teoziyiivy"},"content":"+getMessage():String","lastModifiedDate":"2021-10-26"},{"lineNumber":26,"author":{"gitId":"teoziyiivy"},"content":"}","lastModifiedDate":"2021-10-26"},{"lineNumber":27,"author":{"gitId":"teoziyiivy"},"content":"class DeleteWeightException {","lastModifiedDate":"2021-10-26"},{"lineNumber":28,"author":{"gitId":"teoziyiivy"},"content":"+getMessage():String","lastModifiedDate":"2021-10-26"},{"lineNumber":29,"author":{"gitId":"teoziyiivy"},"content":"}","lastModifiedDate":"2021-10-26"},{"lineNumber":30,"author":{"gitId":"teoziyiivy"},"content":"class DeleteWeightIndexException {","lastModifiedDate":"2021-10-26"},{"lineNumber":31,"author":{"gitId":"teoziyiivy"},"content":"+getMessage():String","lastModifiedDate":"2021-10-26"},{"lineNumber":32,"author":{"gitId":"teoziyiivy"},"content":"}","lastModifiedDate":"2021-10-26"},{"lineNumber":33,"author":{"gitId":"teoziyiivy"},"content":"class NoWeightsException {","lastModifiedDate":"2021-10-26"},{"lineNumber":34,"author":{"gitId":"teoziyiivy"},"content":"+getMessage():String","lastModifiedDate":"2021-10-26"},{"lineNumber":35,"author":{"gitId":"teoziyiivy"},"content":"}","lastModifiedDate":"2021-10-26"},{"lineNumber":36,"author":{"gitId":"teoziyiivy"},"content":"class WeightException {","lastModifiedDate":"2021-10-26"},{"lineNumber":37,"author":{"gitId":"teoziyiivy"},"content":"+getMessage():String","lastModifiedDate":"2021-10-26"},{"lineNumber":38,"author":{"gitId":"teoziyiivy"},"content":"}","lastModifiedDate":"2021-10-26"},{"lineNumber":39,"author":{"gitId":"teoziyiivy"},"content":"class WeightTrackerMessages {","lastModifiedDate":"2021-10-21"},{"lineNumber":40,"author":{"gitId":"teoziyiivy"},"content":"+printAddWeightResponse(weight: double, date: String):void","lastModifiedDate":"2021-10-26"},{"lineNumber":41,"author":{"gitId":"teoziyiivy"},"content":"+printDeleteWeightResponse(weight: double, date: String):void","lastModifiedDate":"2021-10-26"},{"lineNumber":42,"author":{"gitId":"teoziyiivy"},"content":"}","lastModifiedDate":"2021-10-21"},{"lineNumber":43,"author":{"gitId":"teoziyiivy"},"content":"WeightTracker --\u003e WeightTrackerMessages","lastModifiedDate":"2021-10-26"},{"lineNumber":44,"author":{"gitId":"teoziyiivy"},"content":"WeightTracker ..\u003e \"\u003c\u003cthrows\u003e\u003e\" AddWeightException","lastModifiedDate":"2021-10-26"},{"lineNumber":45,"author":{"gitId":"teoziyiivy"},"content":"WeightTracker ..\u003e \"\u003c\u003cthrows\u003e\u003e\" DeleteWeightException","lastModifiedDate":"2021-10-26"},{"lineNumber":46,"author":{"gitId":"teoziyiivy"},"content":"WeightTracker ..\u003e \"\u003c\u003cthrows\u003e\u003e\" DeleteWeightIndexException","lastModifiedDate":"2021-10-26"},{"lineNumber":47,"author":{"gitId":"teoziyiivy"},"content":"WeightTracker ..\u003e \"\u003c\u003cthrows\u003e\u003e\" NoWeightsException","lastModifiedDate":"2021-10-26"},{"lineNumber":48,"author":{"gitId":"teoziyiivy"},"content":"WeightTracker --|\u003e  Tracker","lastModifiedDate":"2021-10-26"},{"lineNumber":49,"author":{"gitId":"teoziyiivy"},"content":"AddWeightException --|\u003e  WeightException","lastModifiedDate":"2021-10-26"},{"lineNumber":50,"author":{"gitId":"teoziyiivy"},"content":"DeleteWeightException --|\u003e  WeightException","lastModifiedDate":"2021-10-26"},{"lineNumber":51,"author":{"gitId":"teoziyiivy"},"content":"DeleteWeightIndexException --|\u003e  WeightException","lastModifiedDate":"2021-10-26"},{"lineNumber":52,"author":{"gitId":"teoziyiivy"},"content":"NoWeightsException --|\u003e  WeightException","lastModifiedDate":"2021-10-26"},{"lineNumber":53,"author":{"gitId":"teoziyiivy"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":54,"author":{"gitId":"teoziyiivy"},"content":"@enduml","lastModifiedDate":"2021-10-21"}],"authorContributionMap":{"teoziyiivy":54}},{"path":"diagrams/welcomeMessage.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"EdwardZYWang"},"content":"@startuml","lastModifiedDate":"2021-10-21"},{"lineNumber":2,"author":{"gitId":"EdwardZYWang"},"content":"\u0027https://plantuml.com/sequence-diagram","lastModifiedDate":"2021-10-21"},{"lineNumber":3,"author":{"gitId":"EdwardZYWang"},"content":"participant \"welcomeMesage\"","lastModifiedDate":"2021-10-21"},{"lineNumber":4,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":5,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":6,"author":{"gitId":"EdwardZYWang"},"content":"@enduml","lastModifiedDate":"2021-10-21"}],"authorContributionMap":{"EdwardZYWang":6}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# About us","lastModifiedDate":"2020-05-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"Display | Name | Github Profile | Portfolio ","lastModifiedDate":"2020-05-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"--------|:----:|:--------------:|:---------:","lastModifiedDate":"2020-05-24"},{"lineNumber":5,"author":{"gitId":"EdwardZYWang"},"content":"![Imgur](https://i.imgur.com/3ubqQJI.jpg) | Edward Wang | [Github](https://github.com/EdwardZYWang) | [Portfolio](https://www.linkedin.com/in/edward-w-220218206/)","lastModifiedDate":"2021-10-04"},{"lineNumber":6,"author":{"gitId":"pragyan01"},"content":"![](https://user-images.githubusercontent.com/69446495/135881811-957f79eb-0afe-48dd-94f0-d237edce256a.jpg) | Samal Sthitipragyan | [Github](https://github.com/pragyan01) | [Portfolio](https://www.linkedin.com/in/pragyan01/)","lastModifiedDate":"2021-10-04"},{"lineNumber":7,"author":{"gitId":"VishalJeyaram"},"content":"![](https://avatars0.githubusercontent.com/arvejw?s\u003d100) | Teh Jiewen | [Github](https://github.com/arvejw) | [Portfolio](team/arvejw.md)","lastModifiedDate":"2021-11-04"},{"lineNumber":8,"author":{"gitId":"teoziyiivy"},"content":"![](https://avatars0.githubusercontent.com/teoziyiivy?s\u003d100) | Teo Ziyi Ivy | [Github](https://github.com/teoziyiivy) | [Portfolio](https://www.linkedin.com/in/teoziyiivy/)","lastModifiedDate":"2021-10-04"},{"lineNumber":9,"author":{"gitId":"VishalJeyaram"},"content":"![](https://user-images.githubusercontent.com/69350459/140319995-3b66c651-6398-4b62-941d-edb54840f741.jpg) | Vishal Jeyaram | [Github](https://github.com/VishalJeyaram) | [Portfolio](team/vishaljeyaram.md)","lastModifiedDate":"2021-11-04"}],"authorContributionMap":{"pragyan01":1,"teoziyiivy":1,"-":4,"VishalJeyaram":2,"EdwardZYWang":1}},{"path":"docs/DeveloperGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# Developer Guide","lastModifiedDate":"2020-05-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"## Acknowledgements","lastModifiedDate":"2020-05-24"},{"lineNumber":4,"author":{"gitId":"arvejw"},"content":"The UML Diagrams were generated with the help of: [PlantUML](https://plantuml.com/)","lastModifiedDate":"2021-10-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":6,"author":{"gitId":"arvejw"},"content":"Written with reference to:","lastModifiedDate":"2021-10-31"},{"lineNumber":7,"author":{"gitId":"arvejw"},"content":"* https://se-education.org/addressbook-level2/DeveloperGuide.html","lastModifiedDate":"2021-10-31"},{"lineNumber":8,"author":{"gitId":"arvejw"},"content":"* https://se-education.org/addressbook-level3/DeveloperGuide.html","lastModifiedDate":"2021-10-31"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"## Design \u0026 implementation","lastModifiedDate":"2021-10-31"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":12,"author":{"gitId":"arvejw"},"content":"### Ui(User Interface): Class diagram","lastModifiedDate":"2021-10-31"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":14,"author":{"gitId":"EdwardZYWang"},"content":"The proposed Ui class has the class level attributes of sex, weight, height, age and activityLevel. It consists of 3 ","lastModifiedDate":"2021-10-21"},{"lineNumber":15,"author":{"gitId":"EdwardZYWang"},"content":"methods that in turn reference from different classes.","lastModifiedDate":"2021-10-21"},{"lineNumber":16,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":17,"author":{"gitId":"EdwardZYWang"},"content":"It implements the following operations:","lastModifiedDate":"2021-10-21"},{"lineNumber":18,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":19,"author":{"gitId":"EdwardZYWang"},"content":"* welcomeMessage()","lastModifiedDate":"2021-10-21"},{"lineNumber":20,"author":{"gitId":"EdwardZYWang"},"content":"* getInfo()","lastModifiedDate":"2021-10-21"},{"lineNumber":21,"author":{"gitId":"EdwardZYWang"},"content":"* memoryStartup()","lastModifiedDate":"2021-10-21"},{"lineNumber":22,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":23,"author":{"gitId":"pragyan01"},"content":"These operations will be illustrated through UML diagrams.","lastModifiedDate":"2021-10-26"},{"lineNumber":24,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":25,"author":{"gitId":"EdwardZYWang"},"content":"### Printing the welcome message","lastModifiedDate":"2021-10-21"},{"lineNumber":26,"author":{"gitId":"pragyan01"},"content":"The user launches the CLI for the first time. The welcomeMessage() is called first and prints out the messages imported from Clickfitmessages class.","lastModifiedDate":"2021-10-26"},{"lineNumber":27,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":28,"author":{"gitId":"EdwardZYWang"},"content":"### Getting BMI and recommended daily caloric intake","lastModifiedDate":"2021-10-21"},{"lineNumber":29,"author":{"gitId":"EdwardZYWang"},"content":"![Imgur](https://i.imgur.com/TZbe6Qh.png)","lastModifiedDate":"2021-10-21"},{"lineNumber":30,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":31,"author":{"gitId":"pragyan01"},"content":"The user is then greeted with a prompt that asks whether he or she wished to enter the calculator function of CLI.ckFit. ","lastModifiedDate":"2021-10-26"},{"lineNumber":32,"author":{"gitId":"EdwardZYWang"},"content":"The calculator takes in the following inputs as shown in the UML diagram through the instantiating of a new calculator","lastModifiedDate":"2021-10-21"},{"lineNumber":33,"author":{"gitId":"EdwardZYWang"},"content":"object that takes in the class-level attributes of Ui to calculate the user\u0027s BMI in getBmi and the user\u0027s recommended ","lastModifiedDate":"2021-10-21"},{"lineNumber":34,"author":{"gitId":"EdwardZYWang"},"content":"daily caloric intake through getIdealCalories().","lastModifiedDate":"2021-10-21"},{"lineNumber":35,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":36,"author":{"gitId":"EdwardZYWang"},"content":"### Get summary of all info stored in text files","lastModifiedDate":"2021-10-21"},{"lineNumber":37,"author":{"gitId":"EdwardZYWang"},"content":"The user is next greeted with a second prompt that asks whether he or she wishes to get a summary of all meals, fluids ","lastModifiedDate":"2021-10-21"},{"lineNumber":38,"author":{"gitId":"EdwardZYWang"},"content":"and workouts he has eaten or completed.","lastModifiedDate":"2021-10-21"},{"lineNumber":39,"author":{"gitId":"EdwardZYWang"},"content":"memoryStartup() is used to return a Boolean value. If it returns ture, it enters an if-loop in Duke class which calls ","lastModifiedDate":"2021-10-21"},{"lineNumber":40,"author":{"gitId":"EdwardZYWang"},"content":"the method printLoadedLists() in Storage class. In storage class, the text files(storage) of Meal, Fluid and Workout ","lastModifiedDate":"2021-10-21"},{"lineNumber":41,"author":{"gitId":"EdwardZYWang"},"content":"classes are first converted","lastModifiedDate":"2021-10-21"},{"lineNumber":42,"author":{"gitId":"EdwardZYWang"},"content":"to arrayLists, which are converted to arrayLists, which are then referenced by PrintLoadedLists() to be formatted and","lastModifiedDate":"2021-10-21"},{"lineNumber":43,"author":{"gitId":"EdwardZYWang"},"content":"printed as a summary of all stored information iu the text files.","lastModifiedDate":"2021-10-21"},{"lineNumber":44,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":46,"author":{"gitId":"VishalJeyaram"},"content":"### Meal: Listing Meals","lastModifiedDate":"2021-10-26"},{"lineNumber":47,"author":{"gitId":"VishalJeyaram"},"content":"![](https://user-images.githubusercontent.com/69350459/138880611-c82f4574-037f-4b64-9631-90d914f71701.png)","lastModifiedDate":"2021-10-26"},{"lineNumber":48,"author":{"gitId":"VishalJeyaram"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":49,"author":{"gitId":"pragyan01"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":50,"author":{"gitId":"teoziyiivy"},"content":"### WeightTracker: Class diagram","lastModifiedDate":"2021-10-21"},{"lineNumber":51,"author":{"gitId":"teoziyiivy"},"content":"![WeightTracker_class](https://user-images.githubusercontent.com/69446729/138873653-d5db5c99-1f22-4c68-86af-188f1ea2c593.png)","lastModifiedDate":"2021-10-26"},{"lineNumber":52,"author":{"gitId":"teoziyiivy"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":53,"author":{"gitId":"teoziyiivy"},"content":"Above are the UML class level diagrams of `WeightTracker`, `WeightTrackerMessages`, `Tracker` and relevant exception classes. ","lastModifiedDate":"2021-10-26"},{"lineNumber":54,"author":{"gitId":"teoziyiivy"},"content":"As seen in the diagram, the `WeightTracker` class is dependent on the `WeightTrackerMessages` class and inherits from the ","lastModifiedDate":"2021-10-26"},{"lineNumber":55,"author":{"gitId":"teoziyiivy"},"content":"`Tracker` class. The `WeightTracker` class also throws 4 exceptions which inherit from the `WeightException` class.","lastModifiedDate":"2021-10-26"},{"lineNumber":56,"author":{"gitId":"teoziyiivy"},"content":"This class diagram has been simplified for better readability.","lastModifiedDate":"2021-10-26"},{"lineNumber":57,"author":{"gitId":"teoziyiivy"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":58,"author":{"gitId":"teoziyiivy"},"content":"#### WeightTracker: Adding weight","lastModifiedDate":"2021-10-21"},{"lineNumber":59,"author":{"gitId":"teoziyiivy"},"content":"![WeightTracker_add_sequence](https://user-images.githubusercontent.com/69446729/138879720-3c3632c5-0765-4215-a2f8-5df7eea45277.png)","lastModifiedDate":"2021-10-26"},{"lineNumber":60,"author":{"gitId":"teoziyiivy"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":61,"author":{"gitId":"teoziyiivy"},"content":"The UML sequence diagram above shows what happens when the input command is recognised as `addweight`.","lastModifiedDate":"2021-10-21"},{"lineNumber":62,"author":{"gitId":"teoziyiivy"},"content":"The `WeightTracker` class calls the `generateWeightParameters` function which updates the `weight` and `date` ","lastModifiedDate":"2021-10-26"},{"lineNumber":63,"author":{"gitId":"teoziyiivy"},"content":"variables. Then the `weight` and `date` variables are added to weight array list and `printAddWeightResponse`","lastModifiedDate":"2021-10-26"},{"lineNumber":64,"author":{"gitId":"teoziyiivy"},"content":"is called from the `WeightTrackerMessages` class for both the typical input and missing date cases. However,","lastModifiedDate":"2021-10-26"},{"lineNumber":65,"author":{"gitId":"teoziyiivy"},"content":"when an exception is encountered, the `WeightTracker` class will throw `AddWeightException()` instead.","lastModifiedDate":"2021-10-26"},{"lineNumber":66,"author":{"gitId":"teoziyiivy"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":67,"author":{"gitId":"arvejw"},"content":"### ScheduleTracker","lastModifiedDate":"2021-10-31"},{"lineNumber":68,"author":{"gitId":"arvejw"},"content":"![diagram-2070120484733536202](https://user-images.githubusercontent.com/69461398/138324203-ea286780-6611-43f4-af77-3ea7cb59a42c.png)","lastModifiedDate":"2021-10-22"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":70,"author":{"gitId":"arvejw"},"content":"#### Class diagram","lastModifiedDate":"2021-10-31"},{"lineNumber":71,"author":{"gitId":"arvejw"},"content":"Above are the UML class level diagrams of `ScheduleTracker` and `ScheduledWorkout`. As seen in the diagram, one ","lastModifiedDate":"2021-10-18"},{"lineNumber":72,"author":{"gitId":"arvejw"},"content":"`ScheduleTracker` object keeps track/is linked to **any** number of `ScheduledWorkout` objects, thus have a ","lastModifiedDate":"2021-10-18"},{"lineNumber":73,"author":{"gitId":"arvejw"},"content":"multiplicity of `0..*`. This association forms through a private attribute `scheduledWorkouts` which is of type ","lastModifiedDate":"2021-10-18"},{"lineNumber":74,"author":{"gitId":"arvejw"},"content":"`ArrayList\u003cScheduledWorkout\u003e`. ","lastModifiedDate":"2021-10-25"},{"lineNumber":75,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":76,"author":{"gitId":"arvejw"},"content":"Each `ScheduledWorkout` object also has a private attribute called `activities` which is ","lastModifiedDate":"2021-10-25"},{"lineNumber":77,"author":{"gitId":"arvejw"},"content":"of type `ArrayList\u003cWorkoutActivity\u003e` where `activities` keeps track of **any** number of `WorkoutActivity` objects.","lastModifiedDate":"2021-10-21"},{"lineNumber":78,"author":{"gitId":"arvejw"},"content":"Do note that **not all** class attributes and methods are present in the diagram for ","lastModifiedDate":"2021-10-21"},{"lineNumber":79,"author":{"gitId":"arvejw"},"content":"the sake of better comprehensibility.","lastModifiedDate":"2021-10-18"},{"lineNumber":80,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":81,"author":{"gitId":"arvejw"},"content":"#### Sequence diagram for adding scheduled workout","lastModifiedDate":"2021-10-31"},{"lineNumber":82,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":83,"author":{"gitId":"arvejw"},"content":"![diagram-18374474381804594155](https://user-images.githubusercontent.com/69461398/138323717-0975d9b3-392a-4c41-99c4-73a8915933be.png)","lastModifiedDate":"2021-10-22"},{"lineNumber":84,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":85,"author":{"gitId":"arvejw"},"content":"The UML sequence diagram above shows what happens when the method `addScheduledWorkout(...)` is called. ","lastModifiedDate":"2021-10-18"},{"lineNumber":86,"author":{"gitId":"arvejw"},"content":"Parameters are generated and a `ScheduledWorkout` object is added into the `scheduledWorkouts` ArrayList.","lastModifiedDate":"2021-10-21"},{"lineNumber":87,"author":{"gitId":"arvejw"},"content":"There are a few method calls which are omitted from this diagram. The main focus is on `cleanUpScheduleList()`. ","lastModifiedDate":"2021-10-21"},{"lineNumber":88,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":89,"author":{"gitId":"arvejw"},"content":"Once called, **if** there are any overdue workouts, a `loop` is entered and calls `updateOrDeleteScheduledWorkout(...)` ","lastModifiedDate":"2021-10-21"},{"lineNumber":90,"author":{"gitId":"arvejw"},"content":"repeatedly until the `loop` condition is satisfied. Essentially, depending on whether the overdue workout detected is ","lastModifiedDate":"2021-10-21"},{"lineNumber":91,"author":{"gitId":"arvejw"},"content":"recurring, the workout is either deleted or rescheduled appropriately. Once the `loop` block exits, `sortScheduleList()` is called and the ","lastModifiedDate":"2021-10-21"},{"lineNumber":92,"author":{"gitId":"arvejw"},"content":"`scheduledWorkouts` is sorted in *ascending* order of `DateTime`","lastModifiedDate":"2021-10-18"},{"lineNumber":93,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":94,"author":{"gitId":"arvejw"},"content":"This \"updating\" is done to ensure a correctly sorted and cleaned up list is always output to the user. ","lastModifiedDate":"2021-10-31"},{"lineNumber":95,"author":{"gitId":"arvejw"},"content":"This also ensures the `scheduledWorkouts` ArrayList remains free of overdue workouts.","lastModifiedDate":"2021-10-31"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":97,"author":{"gitId":"VishalJeyaram"},"content":"#### Meal: Class Diagram","lastModifiedDate":"2021-10-21"},{"lineNumber":98,"author":{"gitId":"VishalJeyaram"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":99,"author":{"gitId":"VishalJeyaram"},"content":"![](https://user-images.githubusercontent.com/69350459/138307467-cef8cdd8-06ce-4284-92b5-9fe5e1ef50ef.png)","lastModifiedDate":"2021-10-21"},{"lineNumber":100,"author":{"gitId":"VishalJeyaram"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":101,"author":{"gitId":"VishalJeyaram"},"content":"Above are the UML class level diagrams of `Meal`, and `Tracker`. As seen in","lastModifiedDate":"2021-10-21"},{"lineNumber":102,"author":{"gitId":"VishalJeyaram"},"content":"the diagram, the `Meal` class inherits from the `Tracker` class. This class diagram has been simplified for better readability.","lastModifiedDate":"2021-10-21"},{"lineNumber":103,"author":{"gitId":"VishalJeyaram"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":104,"author":{"gitId":"pragyan01"},"content":"#### Fluid: Class diagram","lastModifiedDate":"2021-10-26"},{"lineNumber":105,"author":{"gitId":"VishalJeyaram"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":106,"author":{"gitId":"pragyan01"},"content":"![](https://user-images.githubusercontent.com/69446495/138308110-c73bc021-3744-4164-98dc-52b7f76cb4c0.png)","lastModifiedDate":"2021-10-21"},{"lineNumber":107,"author":{"gitId":"pragyan01"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":108,"author":{"gitId":"pragyan01"},"content":"Above are the UML class level diagrams of `Fluid`, `FluidExceptions` and `Tracker`. As seen in the diagram, the `Fluid` class is dependent on the `FluidExceptions` and the `Fluid`class inherits from the `Tracker` class. This class diagram has been simplified for better readability.","lastModifiedDate":"2021-10-21"},{"lineNumber":109,"author":{"gitId":"VishalJeyaram"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":110,"author":{"gitId":"pragyan01"},"content":"#### Fluid: Adding weight sequence diagram","lastModifiedDate":"2021-10-26"},{"lineNumber":111,"author":{"gitId":"pragyan01"},"content":"![](https://user-images.githubusercontent.com/69446495/138881867-cff1b0a7-e836-43dd-b654-5b7db96ea1a3.png)","lastModifiedDate":"2021-10-26"},{"lineNumber":112,"author":{"gitId":"pragyan01"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":113,"author":{"gitId":"pragyan01"},"content":"The UML sequence diagram above shows what happens when the input command is recognised as `add fluid`.","lastModifiedDate":"2021-10-26"},{"lineNumber":114,"author":{"gitId":"pragyan01"},"content":"`generateFluidParameters` method in the `Fluid class` is called upon which updates variables relevent to a fluid, such its `description`, `calories`, `volume`, `date` and `time`. These variables are then concatenated together as a string called `inputArguments` and added to the `fluidArray` list.","lastModifiedDate":"2021-10-26"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":116,"author":{"gitId":"-"},"content":"## Product scope","lastModifiedDate":"2020-05-24"},{"lineNumber":117,"author":{"gitId":"-"},"content":"### Target user profile","lastModifiedDate":"2020-05-24"},{"lineNumber":118,"author":{"gitId":"teoziyiivy"},"content":"Specifically made for people getting into serious fitness routines such as athletes but helpful for general populace.","lastModifiedDate":"2021-10-21"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":120,"author":{"gitId":"-"},"content":"### Value proposition","lastModifiedDate":"2020-05-24"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":122,"author":{"gitId":"arvejw"},"content":"CLI.ckFit is a comprehensive workout client with the two main components of a workout diary and a calorie manager","lastModifiedDate":"2021-10-21"},{"lineNumber":123,"author":{"gitId":"arvejw"},"content":"with the peripherals being weight tracking and BMI/recommended caloric intake calculator. These features can be","lastModifiedDate":"2021-10-21"},{"lineNumber":124,"author":{"gitId":"arvejw"},"content":"conveniently accessed via the Command Line Interface (CLI).","lastModifiedDate":"2021-10-21"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":126,"author":{"gitId":"-"},"content":"## User Stories","lastModifiedDate":"2020-05-24"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":128,"author":{"gitId":"-"},"content":"|Version| As a ... | I want to ... | So that I can ...|","lastModifiedDate":"2020-05-24"},{"lineNumber":129,"author":{"gitId":"-"},"content":"|--------|----------|---------------|------------------|","lastModifiedDate":"2020-05-24"},{"lineNumber":130,"author":{"gitId":"arvejw"},"content":"|v1.0|fitness enthusiast|record my fitness activities|plan my extensive workout schedule|","lastModifiedDate":"2021-10-18"},{"lineNumber":131,"author":{"gitId":"arvejw"},"content":"|v1.0|user|update how many calories I have burned through my workouts|keep track of my daily calories|","lastModifiedDate":"2021-10-18"},{"lineNumber":132,"author":{"gitId":"teoziyiivy"},"content":"|v1.0|athlete|record my weight|keep track of and maintain a competitive weight|","lastModifiedDate":"2021-10-22"},{"lineNumber":133,"author":{"gitId":"arvejw"},"content":"|v2.0|user|have the app remember my user data|access my data anytime| ","lastModifiedDate":"2021-10-21"},{"lineNumber":134,"author":{"gitId":"arvejw"},"content":"|v2.0|user|have scheduled workouts in the list to be sorted by the nearest dates|easily keep track of upcoming workouts|","lastModifiedDate":"2021-10-18"},{"lineNumber":135,"author":{"gitId":"arvejw"},"content":"|v2.0|frequent gym goer| be able to schedule recurring weekly workouts| have a routine schedule without having to reschedule the same workout every week|","lastModifiedDate":"2021-10-21"},{"lineNumber":136,"author":{"gitId":"arvejw"},"content":"|v2.0|serious athlete|breakdown my workout into smaller activities|track things like sets, reps and distance|","lastModifiedDate":"2021-10-21"},{"lineNumber":137,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":139,"author":{"gitId":"-"},"content":"## Non-Functional Requirements","lastModifiedDate":"2020-05-24"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":141,"author":{"gitId":"arvejw"},"content":"1. Should work on any mainstream OS as long as it has Java 11 or above installed (Java has backward compatibility).","lastModifiedDate":"2021-10-25"},{"lineNumber":142,"author":{"gitId":"EdwardZYWang"},"content":"2. A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should ","lastModifiedDate":"2021-10-27"},{"lineNumber":143,"author":{"gitId":"arvejw"},"content":"   be able to accomplish most of the tasks faster using commands than using the mouse.","lastModifiedDate":"2021-10-25"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":145,"author":{"gitId":"-"},"content":"## Glossary","lastModifiedDate":"2020-05-24"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":147,"author":{"gitId":"arvejw"},"content":"* *recurring workouts* - workouts that are scheduled ***weekly***","lastModifiedDate":"2021-10-25"},{"lineNumber":148,"author":{"gitId":"arvejw"},"content":"* *overdue workouts* - workouts whose dates are before the current date","lastModifiedDate":"2021-10-25"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":150,"author":{"gitId":"-"},"content":"## Instructions for manual testing","lastModifiedDate":"2020-05-24"},{"lineNumber":151,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":152,"author":{"gitId":"arvejw"},"content":"### I/O tests","lastModifiedDate":"2021-10-25"},{"lineNumber":153,"author":{"gitId":"arvejw"},"content":"#### Windows","lastModifiedDate":"2021-10-25"},{"lineNumber":154,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":155,"author":{"gitId":"arvejw"},"content":"1. Open a terminal window in the test folder","lastModifiedDate":"2021-10-25"},{"lineNumber":156,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":157,"author":{"gitId":"arvejw"},"content":"2. Run the `runtests.bat` script","lastModifiedDate":"2021-10-25"},{"lineNumber":158,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":159,"author":{"gitId":"arvejw"},"content":"3. If the script reports that there is no difference between ACTUAL.TXT and EXPECTED.TXT, the test has passed","lastModifiedDate":"2021-10-25"},{"lineNumber":160,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":161,"author":{"gitId":"arvejw"},"content":"#### Mac/Unix/Linux","lastModifiedDate":"2021-10-25"},{"lineNumber":162,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":163,"author":{"gitId":"arvejw"},"content":"1. Open a terminal window in the test folder","lastModifiedDate":"2021-10-25"},{"lineNumber":164,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":165,"author":{"gitId":"arvejw"},"content":"2. Run the `runtests.sh` script","lastModifiedDate":"2021-10-25"},{"lineNumber":166,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":167,"author":{"gitId":"arvejw"},"content":"3. If the script reports that there is no difference between ACTUAL.TXT and EXPECTED.TXT, the test has passed","lastModifiedDate":"2021-10-25"},{"lineNumber":168,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":169,"author":{"gitId":"arvejw"},"content":"### JUnit tests","lastModifiedDate":"2021-10-25"},{"lineNumber":170,"author":{"gitId":"arvejw"},"content":"1. In IntelliJ, right-click on the test folder and choose Run \u0027All Tests\u0027","lastModifiedDate":"2021-10-25"},{"lineNumber":171,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":172,"author":{"gitId":"arvejw"},"content":"### Troubleshooting test failures","lastModifiedDate":"2021-10-25"},{"lineNumber":173,"author":{"gitId":"arvejw"},"content":"**Q:** How do I examine the exact differences between ACTUAL.TXT and EXPECTED.TXT? \u003cbr/\u003e","lastModifiedDate":"2021-10-25"},{"lineNumber":174,"author":{"gitId":"arvejw"},"content":"**A:** You can use a diff/merge tool e.g. file compare (fc) on Windows","lastModifiedDate":"2021-10-25"},{"lineNumber":175,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":176,"author":{"gitId":"arvejw"},"content":"**Q:** The two files look exactly the same, but the test script reports they are different.\u003cbr/\u003e","lastModifiedDate":"2021-10-25"},{"lineNumber":177,"author":{"gitId":"arvejw"},"content":"**A:** This can happen because the line endings used by Windows is different from Unix-based OSes. ","lastModifiedDate":"2021-10-25"},{"lineNumber":178,"author":{"gitId":"arvejw"},"content":"Convert the ACTUAL.TXT to the format used by your OS using some utility.","lastModifiedDate":"2021-10-25"},{"lineNumber":179,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":180,"author":{"gitId":"arvejw"},"content":"**Q:** Test fails during the only for the first time.\u003cbr/\u003e","lastModifiedDate":"2021-10-25"},{"lineNumber":181,"author":{"gitId":"arvejw"},"content":"**A:** The output of the very first test run could be slightly different because the program creates a new storage file. ","lastModifiedDate":"2021-10-25"},{"lineNumber":182,"author":{"gitId":"arvejw"},"content":"Tests should pass from the 2nd run onwards.","lastModifiedDate":"2021-10-25"}],"authorContributionMap":{"pragyan01":13,"teoziyiivy":19,"-":31,"VishalJeyaram":12,"arvejw":78,"EdwardZYWang":29}},{"path":"docs/UserGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"EdwardZYWang"},"content":"# CLI.ckFit User Guide","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"## Introduction","lastModifiedDate":"2021-10-27"},{"lineNumber":4,"author":{"gitId":"EdwardZYWang"},"content":"CLI.ckFit is a desktop-based fitness app which can be accessed easily via CLI. CLI.ckFit allows you to input your calories, ","lastModifiedDate":"2021-10-31"},{"lineNumber":5,"author":{"gitId":"EdwardZYWang"},"content":"weight, foods, and workouts throughout the day. It also allows you to save your data and view it whenever you wish to. ","lastModifiedDate":"2021-10-27"},{"lineNumber":6,"author":{"gitId":"EdwardZYWang"},"content":"It also comes with a BMI and recommended caloric intake calculator which can give you an idea of your current fitness ","lastModifiedDate":"2021-10-27"},{"lineNumber":7,"author":{"gitId":"EdwardZYWang"},"content":"level. You can also schedule a variety of workouts such as running, cycling, gym etc. It is suitable for students ","lastModifiedDate":"2021-10-27"},{"lineNumber":8,"author":{"gitId":"EdwardZYWang"},"content":"staying on campus, especially existing people already involved in some level of exercise, such as casual gym goers or ","lastModifiedDate":"2021-10-27"},{"lineNumber":9,"author":{"gitId":"EdwardZYWang"},"content":"even student athletes. Prior knowledge in fitness and gym-related terminologies is beneficial, but not necessary.","lastModifiedDate":"2021-10-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":11,"author":{"gitId":"arvejw"},"content":"[**\u003e\u003eSkip to Table of Contents\u003c\u003c**](#table-of-contents)","lastModifiedDate":"2021-11-04"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":13,"author":{"gitId":"EdwardZYWang"},"content":"## Motivations","lastModifiedDate":"2021-10-27"},{"lineNumber":14,"author":{"gitId":"EdwardZYWang"},"content":"University students staying on-campus have always found it difficult to juggle their hall activities, academic workload, ","lastModifiedDate":"2021-10-27"},{"lineNumber":15,"author":{"gitId":"EdwardZYWang"},"content":"and social activities. This makes it difficult for them to track their health \u0026 fitness. Furthermore, most students ","lastModifiedDate":"2021-10-27"},{"lineNumber":16,"author":{"gitId":"EdwardZYWang"},"content":"don’t want to budget for a fitness app which may be inconvenient to access. Lastly, one\u0027s foray into serious fitness may ","lastModifiedDate":"2021-10-27"},{"lineNumber":17,"author":{"gitId":"EdwardZYWang"},"content":"be a daunting and a confusing process. The abundance of apps in the market that each provide different services can ","lastModifiedDate":"2021-10-27"},{"lineNumber":18,"author":{"gitId":"EdwardZYWang"},"content":"exacerbate this issue.","lastModifiedDate":"2021-10-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"## Quick Start","lastModifiedDate":"2020-05-24"},{"lineNumber":21,"author":{"gitId":"EdwardZYWang"},"content":"1. The BMI calculator and recommended caloric intake calculator gives the user an idea of where his current fitness ","lastModifiedDate":"2021-10-26"},{"lineNumber":22,"author":{"gitId":"EdwardZYWang"},"content":"level stands. Users can also choose to skip using the calculators by entering the appropriate keystrokes.","lastModifiedDate":"2021-10-26"},{"lineNumber":23,"author":{"gitId":"EdwardZYWang"},"content":"* *NOTE* : Please follow _**exactly**_ the explicitly _**required**_ input formats for answering the calculator ","lastModifiedDate":"2021-11-04"},{"lineNumber":24,"author":{"gitId":"EdwardZYWang"},"content":"questions. Any deviating inputs will ","lastModifiedDate":"2021-11-04"},{"lineNumber":25,"author":{"gitId":"EdwardZYWang"},"content":"result in the question being repeated so that the user is able to know exactly what inputs and formats are needed by the ","lastModifiedDate":"2021-11-04"},{"lineNumber":26,"author":{"gitId":"EdwardZYWang"},"content":"calculator to calculate BMI and recommended daily caloric intake.","lastModifiedDate":"2021-11-04"},{"lineNumber":27,"author":{"gitId":"EdwardZYWang"},"content":"2. The user can then access the calorie manager to track their caloric intake, while also using the workout schedule manager","lastModifiedDate":"2021-10-26"},{"lineNumber":28,"author":{"gitId":"EdwardZYWang"},"content":"to track the calories burned.","lastModifiedDate":"2021-10-26"},{"lineNumber":29,"author":{"gitId":"EdwardZYWang"},"content":"3. Workout schedule manager also allows the user to schedule future workouts","lastModifiedDate":"2021-10-26"},{"lineNumber":30,"author":{"gitId":"EdwardZYWang"},"content":"4. For the long term outlook, weight tracker lets the user monitor his weight over the length of usage of CLI.ckFit as an ","lastModifiedDate":"2021-10-26"},{"lineNumber":31,"author":{"gitId":"EdwardZYWang"},"content":"indicator of the user\u0027s progress","lastModifiedDate":"2021-10-26"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":33,"author":{"gitId":"EdwardZYWang"},"content":"## Technical Start Up","lastModifiedDate":"2021-10-26"},{"lineNumber":34,"author":{"gitId":"-"},"content":"1. Ensure that you have Java 11 or above installed.","lastModifiedDate":"2020-05-24"},{"lineNumber":35,"author":{"gitId":"teoziyiivy"},"content":"2. Download the latest version of `CLI.ckFit` from [here](http://link.to/duke).","lastModifiedDate":"2021-10-14"},{"lineNumber":36,"author":{"gitId":"arvejw"},"content":"3. Go to the folder you saved the `CLIckFit.jar` file and note the absolute file path.","lastModifiedDate":"2021-11-04"},{"lineNumber":37,"author":{"gitId":"pragyan01"},"content":"4. If you are using Windows, open up a Command prompt terminal cmd.exe or powershell.exe and for","lastModifiedDate":"2021-10-15"},{"lineNumber":38,"author":{"gitId":"pragyan01"},"content":"   Mac and Linux users, do the same with the terminal of your respective systems.","lastModifiedDate":"2021-10-15"},{"lineNumber":39,"author":{"gitId":"arvejw"},"content":"5. Navigate to the folder where the `CLIckFit.jar` file is stored.","lastModifiedDate":"2021-11-04"},{"lineNumber":40,"author":{"gitId":"arvejw"},"content":"6. Execute `java -jar CLIckFit.jar` in the terminal, and the application will start running.","lastModifiedDate":"2021-11-04"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":42,"author":{"gitId":"arvejw"},"content":"## Common Terminologies and Definitions","lastModifiedDate":"2021-10-31"},{"lineNumber":43,"author":{"gitId":"EdwardZYWang"},"content":"* Calories are in kcal","lastModifiedDate":"2021-10-27"},{"lineNumber":44,"author":{"gitId":"EdwardZYWang"},"content":"* Weight is in kg","lastModifiedDate":"2021-10-27"},{"lineNumber":45,"author":{"gitId":"EdwardZYWang"},"content":"* Height is in cm","lastModifiedDate":"2021-10-27"},{"lineNumber":46,"author":{"gitId":"EdwardZYWang"},"content":"* Volume is in ml","lastModifiedDate":"2021-10-27"},{"lineNumber":47,"author":{"gitId":"EdwardZYWang"},"content":"* Date is in DD/MM/YYYY (e.g. 26/10/2021)","lastModifiedDate":"2021-10-27"},{"lineNumber":48,"author":{"gitId":"EdwardZYWang"},"content":"* Time is in HH:MM (e.g. 23:59)","lastModifiedDate":"2021-10-27"},{"lineNumber":49,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":50,"author":{"gitId":"EdwardZYWang"},"content":"### What is a rep?","lastModifiedDate":"2021-10-27"},{"lineNumber":51,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":52,"author":{"gitId":"EdwardZYWang"},"content":"A rep is short for repetitions. Repetitions define the number of times","lastModifiedDate":"2021-10-27"},{"lineNumber":53,"author":{"gitId":"EdwardZYWang"},"content":"to perform an exercise. For example if you do 12 squats, then stop, the","lastModifiedDate":"2021-10-27"},{"lineNumber":54,"author":{"gitId":"EdwardZYWang"},"content":"12 squats you perform are considered 12 repetitions.","lastModifiedDate":"2021-10-27"},{"lineNumber":55,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":56,"author":{"gitId":"EdwardZYWang"},"content":"### What is a set?","lastModifiedDate":"2021-10-27"},{"lineNumber":57,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":58,"author":{"gitId":"EdwardZYWang"},"content":"Sets refer to how many times you will repeat that exercise for the set","lastModifiedDate":"2021-10-27"},{"lineNumber":59,"author":{"gitId":"EdwardZYWang"},"content":"number of repetitions. For example, you do 12 squats and rest. Then","lastModifiedDate":"2021-10-27"},{"lineNumber":60,"author":{"gitId":"EdwardZYWang"},"content":"you do another 12 squats, rest, and then another 12. You have now","lastModifiedDate":"2021-10-27"},{"lineNumber":61,"author":{"gitId":"EdwardZYWang"},"content":"completed three sets of 12 reps.","lastModifiedDate":"2021-10-27"},{"lineNumber":62,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":63,"author":{"gitId":"arvejw"},"content":"## Known limitations","lastModifiedDate":"2021-10-31"},{"lineNumber":64,"author":{"gitId":"arvejw"},"content":"* CLI.ckFit may not handle illogical inputs correctly due to limitations of data types. For instance, if you enter an","lastModifiedDate":"2021-10-31"},{"lineNumber":65,"author":{"gitId":"arvejw"},"content":"overly large and nonsensical integer value for calories such as `2147483647` there may be overflow during computation. ","lastModifiedDate":"2021-11-04"},{"lineNumber":66,"author":{"gitId":"arvejw"},"content":"  E.g., when calculating total calories, summation may result in an overflow, producing negative calories. ","lastModifiedDate":"2021-10-31"},{"lineNumber":67,"author":{"gitId":"arvejw"},"content":"  ","lastModifiedDate":"2021-10-31"},{"lineNumber":68,"author":{"gitId":"arvejw"},"content":"* Separators such as the date separator `/d`, time separator `/t`, calorie separator `/c`, volume separator `/v` and ","lastModifiedDate":"2021-11-04"},{"lineNumber":69,"author":{"gitId":"arvejw"},"content":"  activity separator `/a` should be entered in the **same order** as shown in their respective command formats. ","lastModifiedDate":"2021-11-04"},{"lineNumber":70,"author":{"gitId":"arvejw"},"content":"  CLI.ckFit **does not** actively support the shuffling of separators when taking user input. ","lastModifiedDate":"2021-11-04"},{"lineNumber":71,"author":{"gitId":"arvejw"},"content":"  ","lastModifiedDate":"2021-10-31"},{"lineNumber":72,"author":{"gitId":"arvejw"},"content":"* The separators as shown in the command format should be input **once**. Typing multiple identical separators ","lastModifiedDate":"2021-10-31"},{"lineNumber":73,"author":{"gitId":"arvejw"},"content":"  unnecessarily *may* cause incorrect parsing of user input. ","lastModifiedDate":"2021-11-04"},{"lineNumber":74,"author":{"gitId":"arvejw"},"content":"  ","lastModifiedDate":"2021-10-31"},{"lineNumber":75,"author":{"gitId":"arvejw"},"content":"* To ensure correct processing of user inputs you should only enter the **necessary** number of arguments. ","lastModifiedDate":"2021-10-31"},{"lineNumber":76,"author":{"gitId":"arvejw"},"content":"  For instance if you want to add a meal of `300` calories, only enter a **single** integer for your calories.","lastModifiedDate":"2021-10-31"},{"lineNumber":77,"author":{"gitId":"arvejw"},"content":"  E.g., enter `/c 300` instead of something like `/c 300 20 10`. The same applies to other arguments like date and time.","lastModifiedDate":"2021-10-31"},{"lineNumber":78,"author":{"gitId":"arvejw"},"content":"  ","lastModifiedDate":"2021-10-31"},{"lineNumber":79,"author":{"gitId":"arvejw"},"content":"* Scheduled workouts with the same activity breakdowns in a different order **are not** considered duplicated","lastModifiedDate":"2021-10-31"},{"lineNumber":80,"author":{"gitId":"arvejw"},"content":"  in the current version of CLI.ckFit. If multiple activities with the same name are input in the same activity ","lastModifiedDate":"2021-10-31"},{"lineNumber":81,"author":{"gitId":"arvejw"},"content":"  breakdown, only the activity quantifier of the latest activity will be taken. This is due to limitations based","lastModifiedDate":"2021-10-31"},{"lineNumber":82,"author":{"gitId":"arvejw"},"content":"  on the choice usage of HashMaps in implementation.","lastModifiedDate":"2021-11-04"},{"lineNumber":83,"author":{"gitId":"arvejw"},"content":"  ","lastModifiedDate":"2021-11-04"},{"lineNumber":84,"author":{"gitId":"arvejw"},"content":"* The current version CLI.ckFit only supports 3 types of distance based activities, ","lastModifiedDate":"2021-11-04"},{"lineNumber":85,"author":{"gitId":"arvejw"},"content":"  namely swimming, running and cycling. **ALL** other activities are assumed to be sets/repetitions based. ","lastModifiedDate":"2021-11-04"},{"lineNumber":86,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":87,"author":{"gitId":"EdwardZYWang"},"content":"## Important FAQs","lastModifiedDate":"2021-11-04"},{"lineNumber":88,"author":{"gitId":"EdwardZYWang"},"content":"* In order to save the data of your previous session, the user *MUST* type in \"y\" when prompted with the following ","lastModifiedDate":"2021-11-04"},{"lineNumber":89,"author":{"gitId":"EdwardZYWang"},"content":"question: ","lastModifiedDate":"2021-11-04"},{"lineNumber":90,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":91,"author":{"gitId":"EdwardZYWang"},"content":"`\"Would you like to load up the records of your fitness journey? Key in y or press enter keystroke to skip!\"`","lastModifiedDate":"2021-11-04"},{"lineNumber":92,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":93,"author":{"gitId":"EdwardZYWang"},"content":"Failure to do so would result in the previous session\u0027s data being deleted!","lastModifiedDate":"2021-11-04"},{"lineNumber":94,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":95,"author":{"gitId":"EdwardZYWang"},"content":"## Table of Contents","lastModifiedDate":"2021-10-26"},{"lineNumber":96,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":97,"author":{"gitId":"EdwardZYWang"},"content":"### Calorie Manager","lastModifiedDate":"2021-10-26"},{"lineNumber":98,"author":{"gitId":"EdwardZYWang"},"content":"- #### Add ","lastModifiedDate":"2021-10-26"},{"lineNumber":99,"author":{"gitId":"EdwardZYWang"},"content":"  - [**Add meal**](#adding-a-meal)","lastModifiedDate":"2021-10-26"},{"lineNumber":100,"author":{"gitId":"EdwardZYWang"},"content":"  - [**Add fluid**](#adding-fluids)","lastModifiedDate":"2021-10-26"},{"lineNumber":101,"author":{"gitId":"EdwardZYWang"},"content":"  - [**Add weight**](#adding-weight)","lastModifiedDate":"2021-10-26"},{"lineNumber":102,"author":{"gitId":"EdwardZYWang"},"content":"- #### Delete","lastModifiedDate":"2021-10-26"},{"lineNumber":103,"author":{"gitId":"EdwardZYWang"},"content":"  - [**Remove meal**](#delete-a-meal)","lastModifiedDate":"2021-10-26"},{"lineNumber":104,"author":{"gitId":"EdwardZYWang"},"content":"  - [**Remove fluid**](#delete-a-fluid)","lastModifiedDate":"2021-10-27"},{"lineNumber":105,"author":{"gitId":"EdwardZYWang"},"content":"  - [**Remove weight**](#delete-a-weight)","lastModifiedDate":"2021-10-26"},{"lineNumber":106,"author":{"gitId":"EdwardZYWang"},"content":"- #### List","lastModifiedDate":"2021-10-26"},{"lineNumber":107,"author":{"gitId":"EdwardZYWang"},"content":"  - [**List meals**](#list-meals)","lastModifiedDate":"2021-10-26"},{"lineNumber":108,"author":{"gitId":"EdwardZYWang"},"content":"  - [**List fluids**](#list-fluids)","lastModifiedDate":"2021-10-26"},{"lineNumber":109,"author":{"gitId":"EdwardZYWang"},"content":"  - [**List weights**](#list-weights)","lastModifiedDate":"2021-10-26"},{"lineNumber":110,"author":{"gitId":"EdwardZYWang"},"content":"  - [**List calories**](#list-calories)","lastModifiedDate":"2021-10-27"},{"lineNumber":111,"author":{"gitId":"teoziyiivy"},"content":"  - [**List volumes**](#list-volumes)","lastModifiedDate":"2021-10-28"},{"lineNumber":112,"author":{"gitId":"EdwardZYWang"},"content":"- #### Help","lastModifiedDate":"2021-10-26"},{"lineNumber":113,"author":{"gitId":"EdwardZYWang"},"content":"  - [**Access user help**](#help-command)","lastModifiedDate":"2021-10-28"},{"lineNumber":114,"author":{"gitId":"EdwardZYWang"},"content":"- #### Close CLI.ckFit","lastModifiedDate":"2021-10-31"},{"lineNumber":115,"author":{"gitId":"EdwardZYWang"},"content":"  - [**bye**](#bye)","lastModifiedDate":"2021-10-31"},{"lineNumber":116,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":117,"author":{"gitId":"EdwardZYWang"},"content":"### Workout Manager","lastModifiedDate":"2021-10-27"},{"lineNumber":118,"author":{"gitId":"EdwardZYWang"},"content":"- #### Add","lastModifiedDate":"2021-10-26"},{"lineNumber":119,"author":{"gitId":"EdwardZYWang"},"content":"  - [**Add workout**](#adding-workout)","lastModifiedDate":"2021-10-26"},{"lineNumber":120,"author":{"gitId":"EdwardZYWang"},"content":"  - [**Add scheduled workout**](#adding-scheduled-workout)","lastModifiedDate":"2021-10-26"},{"lineNumber":121,"author":{"gitId":"EdwardZYWang"},"content":"- #### Delete","lastModifiedDate":"2021-10-26"},{"lineNumber":122,"author":{"gitId":"EdwardZYWang"},"content":"  - [**Remove workout**](#delete-a-workout)","lastModifiedDate":"2021-10-26"},{"lineNumber":123,"author":{"gitId":"EdwardZYWang"},"content":"  - [**Remove scheduled workout**](#delete-a-scheduled-workout)","lastModifiedDate":"2021-10-26"},{"lineNumber":124,"author":{"gitId":"EdwardZYWang"},"content":"- #### List","lastModifiedDate":"2021-10-26"},{"lineNumber":125,"author":{"gitId":"EdwardZYWang"},"content":"  - [**List workouts**](#list-workouts)","lastModifiedDate":"2021-10-26"},{"lineNumber":126,"author":{"gitId":"EdwardZYWang"},"content":"  - [**List scheduled workouts**](#list-scheduled-workouts)","lastModifiedDate":"2021-10-26"},{"lineNumber":127,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":128,"author":{"gitId":"EdwardZYWang"},"content":"### Library Manager","lastModifiedDate":"2021-10-26"},{"lineNumber":129,"author":{"gitId":"EdwardZYWang"},"content":"- #### Add","lastModifiedDate":"2021-10-26"},{"lineNumber":130,"author":{"gitId":"EdwardZYWang"},"content":"  - [**Add meal to library**](#adding-meal-to-library)","lastModifiedDate":"2021-10-26"},{"lineNumber":131,"author":{"gitId":"EdwardZYWang"},"content":"  - [**Add fluid to library**](#adding-fluid-to-library)","lastModifiedDate":"2021-10-26"},{"lineNumber":132,"author":{"gitId":"EdwardZYWang"},"content":"- #### Delete","lastModifiedDate":"2021-10-26"},{"lineNumber":133,"author":{"gitId":"EdwardZYWang"},"content":"    - [**Remove meal from library**](#delete-a-meal-from-library)","lastModifiedDate":"2021-10-26"},{"lineNumber":134,"author":{"gitId":"EdwardZYWang"},"content":"    - [**Remove fluid from library**](#delete-a-fluid-from-library)","lastModifiedDate":"2021-10-26"},{"lineNumber":135,"author":{"gitId":"EdwardZYWang"},"content":"- #### List","lastModifiedDate":"2021-10-26"},{"lineNumber":136,"author":{"gitId":"EdwardZYWang"},"content":"    - [**List meals from library**](#list-meals-stored-in-library)","lastModifiedDate":"2021-10-26"},{"lineNumber":137,"author":{"gitId":"EdwardZYWang"},"content":"    - [**List fluids from library**](#list-fluids-stored-in-library)","lastModifiedDate":"2021-10-26"},{"lineNumber":138,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":139,"author":{"gitId":"arvejw"},"content":"### List Manager","lastModifiedDate":"2021-10-31"},{"lineNumber":140,"author":{"gitId":"arvejw"},"content":"- [**List everything**](#list-everything)","lastModifiedDate":"2021-11-03"},{"lineNumber":141,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":142,"author":{"gitId":"EdwardZYWang"},"content":"### Miscellaneous","lastModifiedDate":"2021-10-27"},{"lineNumber":143,"author":{"gitId":"EdwardZYWang"},"content":"- [**FAQ**](#faq)","lastModifiedDate":"2021-10-27"},{"lineNumber":144,"author":{"gitId":"EdwardZYWang"},"content":"- [**Command Summary**](#command-summary)","lastModifiedDate":"2021-10-27"},{"lineNumber":145,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":146,"author":{"gitId":"EdwardZYWang"},"content":"# *Features:*","lastModifiedDate":"2021-10-19"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":148,"author":{"gitId":"arvejw"},"content":"## Adding a meal","lastModifiedDate":"2021-10-25"},{"lineNumber":149,"author":{"gitId":"teoziyiivy"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":150,"author":{"gitId":"EdwardZYWang"},"content":"Command Word: `add meal`","lastModifiedDate":"2021-10-27"},{"lineNumber":151,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":152,"author":{"gitId":"EdwardZYWang"},"content":"Description: Adds a new meal to the list of meals, with its associated calories, date and time of consumption.","lastModifiedDate":"2021-10-27"},{"lineNumber":153,"author":{"gitId":"teoziyiivy"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":154,"author":{"gitId":"arvejw"},"content":"Format: `add meal MEAL NAME \u003c/c MEAL CALORIES /d DATE /t TIME\u003e`","lastModifiedDate":"2021-10-25"},{"lineNumber":155,"author":{"gitId":"teoziyiivy"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":156,"author":{"gitId":"arvejw"},"content":"* The `MEAL_NAME` can contain spaces.","lastModifiedDate":"2021-10-15"},{"lineNumber":157,"author":{"gitId":"pragyan01"},"content":"* Prefixes cannot be swapped and must follow the order shown above. No duplicates allowed.","lastModifiedDate":"2021-11-04"},{"lineNumber":158,"author":{"gitId":"pragyan01"},"content":"* Each prefix only accepts one input after it.","lastModifiedDate":"2021-11-04"},{"lineNumber":159,"author":{"gitId":"arvejw"},"content":"* The `MEAL_CALORIES` can only contain positive integers inclusive of 0.","lastModifiedDate":"2021-10-15"},{"lineNumber":160,"author":{"gitId":"pragyan01"},"content":"* You can only omit putting `MEAL_CALORIES` if you have saved the meal in your [meal library](#adding-meal-to-library) already.","lastModifiedDate":"2021-11-04"},{"lineNumber":161,"author":{"gitId":"teoziyiivy"},"content":"* The `DATE` is in dd/mm/yyyy.","lastModifiedDate":"2021-10-14"},{"lineNumber":162,"author":{"gitId":"teoziyiivy"},"content":"* The `TIME` is in hh:mm.","lastModifiedDate":"2021-10-14"},{"lineNumber":163,"author":{"gitId":"arvejw"},"content":"* If `DATE` or `TIME` is not specified, the system current date and time will be taken.","lastModifiedDate":"2021-10-25"},{"lineNumber":164,"author":{"gitId":"VishalJeyaram"},"content":"* Meals can be added to a future date if desired","lastModifiedDate":"2021-11-04"},{"lineNumber":165,"author":{"gitId":"EdwardZYWang"},"content":"  Example of usage:","lastModifiedDate":"2021-10-19"},{"lineNumber":166,"author":{"gitId":"teoziyiivy"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":167,"author":{"gitId":"arvejw"},"content":"`add meal risotto /c 250 /d 14/10/2021 /t 08:30`","lastModifiedDate":"2021-10-25"},{"lineNumber":168,"author":{"gitId":"teoziyiivy"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":169,"author":{"gitId":"pragyan01"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":170,"author":{"gitId":"arvejw"},"content":"## Adding fluids","lastModifiedDate":"2021-10-25"},{"lineNumber":171,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":172,"author":{"gitId":"pragyan01"},"content":"Command Word: `add fluid`","lastModifiedDate":"2021-10-25"},{"lineNumber":173,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":174,"author":{"gitId":"EdwardZYWang"},"content":"Description: Adds a new fluid to the list of fluid items, with its associated calories, date and time of consumption.","lastModifiedDate":"2021-10-27"},{"lineNumber":175,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":176,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":177,"author":{"gitId":"EdwardZYWang"},"content":"Format: `add fluid FLUID_NAME \u003c/c FLUID_CALORIES /v VOLUME /d DATE /t TIME\u003e`","lastModifiedDate":"2021-10-27"},{"lineNumber":178,"author":{"gitId":"pragyan01"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":179,"author":{"gitId":"pragyan01"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":180,"author":{"gitId":"pragyan01"},"content":"* The `FLUID_NAME` can contain spaces.","lastModifiedDate":"2021-10-15"},{"lineNumber":181,"author":{"gitId":"pragyan01"},"content":"* Prefixes cannot be swapped and must follow the order shown above. No duplicates allowed.","lastModifiedDate":"2021-11-04"},{"lineNumber":182,"author":{"gitId":"pragyan01"},"content":"* Each prefix only accepts one input after it.","lastModifiedDate":"2021-11-04"},{"lineNumber":183,"author":{"gitId":"pragyan01"},"content":"* The `FLUID_CALORIES` can only contain positive integers inclusive of 0.","lastModifiedDate":"2021-10-15"},{"lineNumber":184,"author":{"gitId":"pragyan01"},"content":"* You can only omit putting `FLUID_CALORIES` if you have saved the drink in your [fluid library](#adding-fluid-to-library) already.","lastModifiedDate":"2021-11-04"},{"lineNumber":185,"author":{"gitId":"pragyan01"},"content":"* The `VOLUME` can only contain positive integers inclusive of 0.","lastModifiedDate":"2021-10-15"},{"lineNumber":186,"author":{"gitId":"pragyan01"},"content":"* The `DATE` is in dd/mm/yyyy.","lastModifiedDate":"2021-10-15"},{"lineNumber":187,"author":{"gitId":"pragyan01"},"content":"* The `TIME` is in hh:mm.","lastModifiedDate":"2021-10-15"},{"lineNumber":188,"author":{"gitId":"VishalJeyaram"},"content":"* Fluids can be added to a future date if desired","lastModifiedDate":"2021-11-04"},{"lineNumber":189,"author":{"gitId":"teoziyiivy"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":190,"author":{"gitId":"teoziyiivy"},"content":"Example of usage:","lastModifiedDate":"2021-10-14"},{"lineNumber":191,"author":{"gitId":"teoziyiivy"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":192,"author":{"gitId":"pragyan01"},"content":"`add fluid milk /c 180 /v 100 /d 08/09/2021 /t 07:40`","lastModifiedDate":"2021-10-25"},{"lineNumber":193,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":194,"author":{"gitId":"pragyan01"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":195,"author":{"gitId":"pragyan01"},"content":"Expected outcome:","lastModifiedDate":"2021-10-25"},{"lineNumber":196,"author":{"gitId":"pragyan01"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":197,"author":{"gitId":"pragyan01"},"content":"```","lastModifiedDate":"2021-10-25"},{"lineNumber":198,"author":{"gitId":"pragyan01"},"content":"Noted! CLI.ckFit has recorded your drink of milk of 180 calories and 100 ml on 08/09/2021 07:40.","lastModifiedDate":"2021-10-25"},{"lineNumber":199,"author":{"gitId":"pragyan01"},"content":"```","lastModifiedDate":"2021-10-25"},{"lineNumber":200,"author":{"gitId":"teoziyiivy"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":201,"author":{"gitId":"arvejw"},"content":"## Adding weight","lastModifiedDate":"2021-10-25"},{"lineNumber":202,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":203,"author":{"gitId":"EdwardZYWang"},"content":"Command Word: `add weight`","lastModifiedDate":"2021-10-19"},{"lineNumber":204,"author":{"gitId":"teoziyiivy"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":205,"author":{"gitId":"EdwardZYWang"},"content":"Description: Adds a new weight to the list of weight items, with its associated date.","lastModifiedDate":"2021-10-27"},{"lineNumber":206,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":207,"author":{"gitId":"arvejw"},"content":"Format: `add weight WEIGHT \u003c/d DATE\u003e`","lastModifiedDate":"2021-10-25"},{"lineNumber":208,"author":{"gitId":"teoziyiivy"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":209,"author":{"gitId":"teoziyiivy"},"content":"* The `WEIGHT` cannot contain spaces and must be a non-negative number to maximum of 1 decimal place.","lastModifiedDate":"2021-11-03"},{"lineNumber":210,"author":{"gitId":"pragyan01"},"content":"* Prefixes cannot be swapped and must follow the order shown above. No duplicates allowed.","lastModifiedDate":"2021-11-04"},{"lineNumber":211,"author":{"gitId":"pragyan01"},"content":"* Each prefix only accepts one input after it.","lastModifiedDate":"2021-11-04"},{"lineNumber":212,"author":{"gitId":"teoziyiivy"},"content":"* The `WEIGHT` has to be realistic (\u003c1000.0 kg) due to limitation of integer overflow.","lastModifiedDate":"2021-11-03"},{"lineNumber":213,"author":{"gitId":"teoziyiivy"},"content":"* The `DATE` is in dd/mm/yyyy.","lastModifiedDate":"2021-10-14"},{"lineNumber":214,"author":{"gitId":"teoziyiivy"},"content":"* If `DATE` is not specified, the current system date will be taken.","lastModifiedDate":"2021-11-03"},{"lineNumber":215,"author":{"gitId":"teoziyiivy"},"content":"* Only 1 `WEIGHT` should be included in your input.","lastModifiedDate":"2021-11-03"},{"lineNumber":216,"author":{"gitId":"teoziyiivy"},"content":"* If multiple `/d DATE` or `DATE` is written only the first input will be taken.","lastModifiedDate":"2021-11-03"},{"lineNumber":217,"author":{"gitId":"teoziyiivy"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":218,"author":{"gitId":"teoziyiivy"},"content":"Example of usage:","lastModifiedDate":"2021-10-14"},{"lineNumber":219,"author":{"gitId":"teoziyiivy"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":220,"author":{"gitId":"teoziyiivy"},"content":"`add weight 50 /d 03/04/2021`","lastModifiedDate":"2021-10-14"},{"lineNumber":221,"author":{"gitId":"teoziyiivy"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":222,"author":{"gitId":"arvejw"},"content":"## Adding workout","lastModifiedDate":"2021-10-25"},{"lineNumber":223,"author":{"gitId":"teoziyiivy"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":224,"author":{"gitId":"arvejw"},"content":"Command Word: `add workout`","lastModifiedDate":"2021-10-25"},{"lineNumber":225,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":226,"author":{"gitId":"EdwardZYWang"},"content":"Description: Adds a new workout to the list of workout items, with its associated calories, date and time of workout.","lastModifiedDate":"2021-10-27"},{"lineNumber":227,"author":{"gitId":"teoziyiivy"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":228,"author":{"gitId":"arvejw"},"content":"Format: `add workout WORKOUT_NAME /c CALORIES_BURNED \u003c/d DATE /t TIME\u003e`","lastModifiedDate":"2021-10-25"},{"lineNumber":229,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":230,"author":{"gitId":"arvejw"},"content":"* The `WORKOUT_NAME` can contain spaces.","lastModifiedDate":"2021-10-15"},{"lineNumber":231,"author":{"gitId":"pragyan01"},"content":"* Prefixes cannot be swapped and must follow the order shown above. No duplicates allowed.","lastModifiedDate":"2021-11-04"},{"lineNumber":232,"author":{"gitId":"pragyan01"},"content":"* Each prefix only accepts one input after it.","lastModifiedDate":"2021-11-04"},{"lineNumber":233,"author":{"gitId":"arvejw"},"content":"* The `CALORIES_BURNT` can only contain positive integers inclusive of 0.","lastModifiedDate":"2021-10-15"},{"lineNumber":234,"author":{"gitId":"teoziyiivy"},"content":"* The `DATE` is in dd/mm/yyyy.","lastModifiedDate":"2021-10-14"},{"lineNumber":235,"author":{"gitId":"teoziyiivy"},"content":"* The `TIME` is in hh:mm.","lastModifiedDate":"2021-10-14"},{"lineNumber":236,"author":{"gitId":"arvejw"},"content":"* If `DATE` or `TIME` is not specified, the system current date and time will be taken.","lastModifiedDate":"2021-10-25"},{"lineNumber":237,"author":{"gitId":"VishalJeyaram"},"content":"* Workouts can be added to a future date if desired","lastModifiedDate":"2021-11-04"},{"lineNumber":238,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":239,"author":{"gitId":"teoziyiivy"},"content":"Example of usage:","lastModifiedDate":"2021-10-14"},{"lineNumber":240,"author":{"gitId":"teoziyiivy"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":241,"author":{"gitId":"arvejw"},"content":"* `add workout jog /c 250 /d 07/08/2021 /t 15:00` records a *workout* with the","lastModifiedDate":"2021-10-31"},{"lineNumber":242,"author":{"gitId":"arvejw"},"content":"  description `jog` and `250` calories burned on `07/08/2021` at `15:00`.","lastModifiedDate":"2021-10-31"},{"lineNumber":243,"author":{"gitId":"arvejw"},"content":"* `add workout jog /c 250` records a *workout* with the","lastModifiedDate":"2021-10-31"},{"lineNumber":244,"author":{"gitId":"arvejw"},"content":"    description `jog` and `250` calories burned on **today\u0027s date and current time**.","lastModifiedDate":"2021-10-31"},{"lineNumber":245,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":246,"author":{"gitId":"arvejw"},"content":"## Adding scheduled workout","lastModifiedDate":"2021-10-25"},{"lineNumber":247,"author":{"gitId":"teoziyiivy"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":248,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":249,"author":{"gitId":"arvejw"},"content":"Command Word: `add schedule`","lastModifiedDate":"2021-10-25"},{"lineNumber":250,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":251,"author":{"gitId":"EdwardZYWang"},"content":"Description: Adds a new scheduled workout to the list of scheduled workout items with the option to include ","lastModifiedDate":"2021-10-27"},{"lineNumber":252,"author":{"gitId":"EdwardZYWang"},"content":"activity breakdowns, with date and time of workout.","lastModifiedDate":"2021-10-27"},{"lineNumber":253,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":254,"author":{"gitId":"arvejw"},"content":"### With no activity breakdown:","lastModifiedDate":"2021-10-25"},{"lineNumber":255,"author":{"gitId":"arvejw"},"content":"Format: `add schedule WORKOUT_NAME /d DATE /t TIME \u003c/r\u003e`","lastModifiedDate":"2021-10-31"},{"lineNumber":256,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":257,"author":{"gitId":"arvejw"},"content":"* The `WORKOUT_NAME` can contain spaces.","lastModifiedDate":"2021-10-15"},{"lineNumber":258,"author":{"gitId":"pragyan01"},"content":"* Prefixes cannot be swapped and must follow the order shown above. No duplicates allowed.","lastModifiedDate":"2021-11-04"},{"lineNumber":259,"author":{"gitId":"pragyan01"},"content":"* Each prefix only accepts one input after it.","lastModifiedDate":"2021-11-04"},{"lineNumber":260,"author":{"gitId":"arvejw"},"content":"* The `DATE` is in dd/mm/yyyy.","lastModifiedDate":"2021-10-25"},{"lineNumber":261,"author":{"gitId":"arvejw"},"content":"* The `TIME` is in hh:mm.","lastModifiedDate":"2021-10-25"},{"lineNumber":262,"author":{"gitId":"arvejw"},"content":"* The `DATE` or `TIME` is compulsory for schedules.","lastModifiedDate":"2021-10-25"},{"lineNumber":263,"author":{"gitId":"arvejw"},"content":"* The `/r` flag at the end is an ***optional*** flag for recurrence, which schedules a weekly *recurring* workout.","lastModifiedDate":"2021-10-31"},{"lineNumber":264,"author":{"gitId":"arvejw"},"content":"* The ***optional*** `/r` flag, **if** included, **must** be at the end of the command.","lastModifiedDate":"2021-11-04"},{"lineNumber":265,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":266,"author":{"gitId":"arvejw"},"content":"Example of usage:","lastModifiedDate":"2021-10-25"},{"lineNumber":267,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":268,"author":{"gitId":"arvejw"},"content":"* `add schedule chest day /d 22/12/2021 /t 15:00` adds a *non-recurring workout* to your schedule with the ","lastModifiedDate":"2021-10-31"},{"lineNumber":269,"author":{"gitId":"arvejw"},"content":"  description `chest day` on `22/12/2021` at `15:00`.","lastModifiedDate":"2021-10-31"},{"lineNumber":270,"author":{"gitId":"arvejw"},"content":"* `add schedule weekly chest day /d 07/12/2021 /t 13:50 /r` adds a *recurring* workout to your schedule with the","lastModifiedDate":"2021-10-31"},{"lineNumber":271,"author":{"gitId":"arvejw"},"content":"  description `weekly chest day` on `07/12/2021` at `13:50`.","lastModifiedDate":"2021-10-31"},{"lineNumber":272,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":273,"author":{"gitId":"arvejw"},"content":"### With activity breakdown","lastModifiedDate":"2021-10-31"},{"lineNumber":274,"author":{"gitId":"arvejw"},"content":"Format: `add schedule WORKOUT_NAME /d DATE /t TIME \u003c/a ACTIVITY_NAME:ACTIVITY_QUANTIFIER, ...\u003e \u003c/r\u003e`","lastModifiedDate":"2021-10-25"},{"lineNumber":275,"author":{"gitId":"arvejw"},"content":"* The `/a` separator is optional.","lastModifiedDate":"2021-10-22"},{"lineNumber":276,"author":{"gitId":"arvejw"},"content":"* The `ACTIVITY_NAME` can contain spaces and `:` ***must*** follow after it.","lastModifiedDate":"2021-10-25"},{"lineNumber":277,"author":{"gitId":"pragyan01"},"content":"* Prefixes cannot be swapped and must follow the order shown above. No duplicates allowed.","lastModifiedDate":"2021-11-04"},{"lineNumber":278,"author":{"gitId":"pragyan01"},"content":"* Each prefix only accepts one input after it.","lastModifiedDate":"2021-11-04"},{"lineNumber":279,"author":{"gitId":"arvejw"},"content":"* CLI.ckFit supports 3 special **case-sensitive** keywords for `ACTIVITY_NAME`, namely `running/swimming/cycling`.","lastModifiedDate":"2021-11-04"},{"lineNumber":280,"author":{"gitId":"arvejw"},"content":"  If any of these 3 keywords are used, then `ACTIVITY_QUANTIFIER` takes in one **positive non-zero integer** `[DISTANCE]`","lastModifiedDate":"2021-11-04"},{"lineNumber":281,"author":{"gitId":"arvejw"},"content":"  in **metres** for the activity.","lastModifiedDate":"2021-11-04"},{"lineNumber":282,"author":{"gitId":"arvejw"},"content":"* For **ALL** other kinds of `ACTIVITY_NAME`, `ACTIVITY_QUANTIFIER` takes in two **positive non-zero integers** ","lastModifiedDate":"2021-11-04"},{"lineNumber":283,"author":{"gitId":"arvejw"},"content":"  in the form `[SETS]x[REPS]`. In other words it is **assumed** that the activities are sets/repetitions","lastModifiedDate":"2021-11-04"},{"lineNumber":284,"author":{"gitId":"arvejw"},"content":"  activities. (Read more about Sets and Reps under [**Common Terminologies**](#common-terminologies-and-definitions))","lastModifiedDate":"2021-11-04"},{"lineNumber":285,"author":{"gitId":"arvejw"},"content":"* Multiple activities can be entered as long as they are separated by a comma `,`.","lastModifiedDate":"2021-10-22"},{"lineNumber":286,"author":{"gitId":"arvejw"},"content":"* The `/r` flag at the end is an ***optional*** flag for recurrence, which schedules a weekly recurring workout.","lastModifiedDate":"2021-11-05"},{"lineNumber":287,"author":{"gitId":"arvejw"},"content":"* The ***optional*** `/r` flag, if included, **must** be at the end of the command.","lastModifiedDate":"2021-11-05"},{"lineNumber":288,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":289,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":290,"author":{"gitId":"arvejw"},"content":"Example of usage:","lastModifiedDate":"2021-10-15"},{"lineNumber":291,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":292,"author":{"gitId":"arvejw"},"content":"* `add schedule weekly chest day /d 07/12/2021 /t 15:00 /a bench press:5x12, pushups:5x20 /r` adds a *recurring* workout","lastModifiedDate":"2021-10-31"},{"lineNumber":293,"author":{"gitId":"arvejw"},"content":"  to your schedule with the description `weekly chest day` on `07/12/2021` at `15:00`. Furthermore, an activity breakdown of","lastModifiedDate":"2021-11-04"},{"lineNumber":294,"author":{"gitId":"arvejw"},"content":"  `bench press` with `5` sets and `12` reps as well as `pushups` with `5` sets of `20` reps will also be added.","lastModifiedDate":"2021-10-31"},{"lineNumber":295,"author":{"gitId":"arvejw"},"content":"* `add schedule triathlon training /d 07/12/2021 /t 15:00 /a running:3000, swimming:1000, cycling:4000` adds a *non-recurring* workout","lastModifiedDate":"2021-10-31"},{"lineNumber":296,"author":{"gitId":"arvejw"},"content":"  to your schedule with the description `traithlon training` on `07/12/2021` at `15:00`. Furthermore, an activity breakdown of","lastModifiedDate":"2021-11-04"},{"lineNumber":297,"author":{"gitId":"arvejw"},"content":"  `running` for `3000` metres, `swimming` for `1000` metres as well as `cycling` for `4000` metres will also be added.","lastModifiedDate":"2021-10-31"},{"lineNumber":298,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":299,"author":{"gitId":"arvejw"},"content":"## Adding meal to library","lastModifiedDate":"2021-10-25"},{"lineNumber":300,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":301,"author":{"gitId":"EdwardZYWang"},"content":"Command Word: `library addmeal`","lastModifiedDate":"2021-10-27"},{"lineNumber":302,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":303,"author":{"gitId":"EdwardZYWang"},"content":"Description: Add a new meal record to the library, with its associated calories.","lastModifiedDate":"2021-10-27"},{"lineNumber":304,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":305,"author":{"gitId":"arvejw"},"content":"Format: `library addmeal MEAL_NAME /c MEAL_CALORIES`","lastModifiedDate":"2021-10-25"},{"lineNumber":306,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":307,"author":{"gitId":"arvejw"},"content":"* The MEAL_NAME can contain spaces.","lastModifiedDate":"2021-10-25"},{"lineNumber":308,"author":{"gitId":"pragyan01"},"content":"* Prefixes cannot be swapped and must follow the order shown above. No duplicates allowed.","lastModifiedDate":"2021-11-04"},{"lineNumber":309,"author":{"gitId":"pragyan01"},"content":"* Each prefix only accepts one input after it.","lastModifiedDate":"2021-11-04"},{"lineNumber":310,"author":{"gitId":"arvejw"},"content":"* The MEAL_CALORIES can only contain positive integers inclusive of 0.","lastModifiedDate":"2021-10-25"},{"lineNumber":311,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":312,"author":{"gitId":"arvejw"},"content":"Example of usage:","lastModifiedDate":"2021-10-25"},{"lineNumber":313,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":314,"author":{"gitId":"arvejw"},"content":"`library addmeal chocolate cake /c 110`","lastModifiedDate":"2021-10-25"},{"lineNumber":315,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":316,"author":{"gitId":"arvejw"},"content":"## Adding fluid to library","lastModifiedDate":"2021-10-25"},{"lineNumber":317,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":318,"author":{"gitId":"EdwardZYWang"},"content":"Command Word: `library addfluid`","lastModifiedDate":"2021-10-27"},{"lineNumber":319,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":320,"author":{"gitId":"EdwardZYWang"},"content":"Description: Adds a new fluid record to the library, with its associated calories.","lastModifiedDate":"2021-10-27"},{"lineNumber":321,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":322,"author":{"gitId":"arvejw"},"content":"Format: `library addfluid FLUID_NAME /c FLUID_CALORIES`","lastModifiedDate":"2021-10-25"},{"lineNumber":323,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":324,"author":{"gitId":"arvejw"},"content":"* The FLUID_NAME can contain spaces.","lastModifiedDate":"2021-10-25"},{"lineNumber":325,"author":{"gitId":"pragyan01"},"content":"* Prefixes cannot be swapped and must follow the order shown above. No duplicates allowed.","lastModifiedDate":"2021-11-04"},{"lineNumber":326,"author":{"gitId":"pragyan01"},"content":"* Each prefix only accepts one input after it.  ","lastModifiedDate":"2021-11-04"},{"lineNumber":327,"author":{"gitId":"arvejw"},"content":"* The FLUID_CALORIES can only contain positive integers inclusive of 0.","lastModifiedDate":"2021-10-25"},{"lineNumber":328,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":329,"author":{"gitId":"arvejw"},"content":"Example of usage:","lastModifiedDate":"2021-10-25"},{"lineNumber":330,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":331,"author":{"gitId":"arvejw"},"content":"`library addfluid chocolate milk /c 200`","lastModifiedDate":"2021-10-25"},{"lineNumber":332,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":333,"author":{"gitId":"arvejw"},"content":"## Delete a meal","lastModifiedDate":"2021-10-25"},{"lineNumber":334,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":335,"author":{"gitId":"EdwardZYWang"},"content":"Command Word: `delete meal`","lastModifiedDate":"2021-10-19"},{"lineNumber":336,"author":{"gitId":"teoziyiivy"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":337,"author":{"gitId":"EdwardZYWang"},"content":"Description: Remove a meal from the list of meal items.","lastModifiedDate":"2021-10-27"},{"lineNumber":338,"author":{"gitId":"teoziyiivy"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":339,"author":{"gitId":"teoziyiivy"},"content":"Format: `delete meal INDEX`","lastModifiedDate":"2021-10-14"},{"lineNumber":340,"author":{"gitId":"teoziyiivy"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":341,"author":{"gitId":"teoziyiivy"},"content":"* The `INDEX` can only contain integers from the list.","lastModifiedDate":"2021-10-14"},{"lineNumber":342,"author":{"gitId":"teoziyiivy"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":343,"author":{"gitId":"EdwardZYWang"},"content":"Example of usage:","lastModifiedDate":"2021-10-27"},{"lineNumber":344,"author":{"gitId":"teoziyiivy"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":345,"author":{"gitId":"teoziyiivy"},"content":"`delete meal 1`","lastModifiedDate":"2021-10-14"},{"lineNumber":346,"author":{"gitId":"teoziyiivy"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":347,"author":{"gitId":"EdwardZYWang"},"content":"## Delete a fluid","lastModifiedDate":"2021-10-27"},{"lineNumber":348,"author":{"gitId":"pragyan01"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":349,"author":{"gitId":"EdwardZYWang"},"content":"Command Word: `delete fluid`","lastModifiedDate":"2021-10-19"},{"lineNumber":350,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":351,"author":{"gitId":"EdwardZYWang"},"content":"Description: Removes a fluid from the list of fluid items.","lastModifiedDate":"2021-10-27"},{"lineNumber":352,"author":{"gitId":"pragyan01"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":353,"author":{"gitId":"pragyan01"},"content":"Format: `delete fluid INDEX`","lastModifiedDate":"2021-10-15"},{"lineNumber":354,"author":{"gitId":"pragyan01"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":355,"author":{"gitId":"pragyan01"},"content":"* The `INDEX` can only contain integers from the list.","lastModifiedDate":"2021-10-15"},{"lineNumber":356,"author":{"gitId":"pragyan01"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":357,"author":{"gitId":"pragyan01"},"content":"Example of usage:","lastModifiedDate":"2021-10-15"},{"lineNumber":358,"author":{"gitId":"pragyan01"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":359,"author":{"gitId":"pragyan01"},"content":"`delete fluid 2`","lastModifiedDate":"2021-10-15"},{"lineNumber":360,"author":{"gitId":"teoziyiivy"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":361,"author":{"gitId":"arvejw"},"content":"## Delete a weight","lastModifiedDate":"2021-10-25"},{"lineNumber":362,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":363,"author":{"gitId":"EdwardZYWang"},"content":"Command Word: `delete weight`","lastModifiedDate":"2021-10-19"},{"lineNumber":364,"author":{"gitId":"teoziyiivy"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":365,"author":{"gitId":"arvejw"},"content":"Description: Deletes a meal from the list of meals.","lastModifiedDate":"2021-10-25"},{"lineNumber":366,"author":{"gitId":"teoziyiivy"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":367,"author":{"gitId":"teoziyiivy"},"content":"Format: `delete weight INDEX`","lastModifiedDate":"2021-10-14"},{"lineNumber":368,"author":{"gitId":"teoziyiivy"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":369,"author":{"gitId":"arvejw"},"content":"* Use `list weights all` to determine the index of the meal you wish to delete.","lastModifiedDate":"2021-10-25"},{"lineNumber":370,"author":{"gitId":"teoziyiivy"},"content":"* The `INDEX` can only contain integers from the list.","lastModifiedDate":"2021-11-03"},{"lineNumber":371,"author":{"gitId":"teoziyiivy"},"content":"* Only 1 `INDEX` should be included in your input.","lastModifiedDate":"2021-11-03"},{"lineNumber":372,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":373,"author":{"gitId":"-"},"content":"Example of usage:","lastModifiedDate":"2020-05-24"},{"lineNumber":374,"author":{"gitId":"teoziyiivy"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":375,"author":{"gitId":"EdwardZYWang"},"content":"`delete weight 2`","lastModifiedDate":"2021-10-27"},{"lineNumber":376,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":377,"author":{"gitId":"arvejw"},"content":"## Delete a workout","lastModifiedDate":"2021-10-25"},{"lineNumber":378,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":379,"author":{"gitId":"EdwardZYWang"},"content":"Command Word: `delete workout`","lastModifiedDate":"2021-10-19"},{"lineNumber":380,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":381,"author":{"gitId":"arvejw"},"content":"Description: Deletes a workout from the list of workout items.","lastModifiedDate":"2021-10-31"},{"lineNumber":382,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":383,"author":{"gitId":"teoziyiivy"},"content":"Format: `delete workout INDEX`","lastModifiedDate":"2021-10-14"},{"lineNumber":384,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":385,"author":{"gitId":"arvejw"},"content":"* Use `list workouts all` to determine the index of the workout you wish to delete.","lastModifiedDate":"2021-10-31"},{"lineNumber":386,"author":{"gitId":"teoziyiivy"},"content":"* The `INDEX` can only contain integers from the list.","lastModifiedDate":"2021-10-14"},{"lineNumber":387,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":388,"author":{"gitId":"teoziyiivy"},"content":"Example of usage:","lastModifiedDate":"2021-10-14"},{"lineNumber":389,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":390,"author":{"gitId":"arvejw"},"content":"* `delete workout 3` will delete the workout with index `3` as seen in the list from `list schedule all` if the index is valid.","lastModifiedDate":"2021-10-31"},{"lineNumber":391,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":392,"author":{"gitId":"arvejw"},"content":"## Delete a scheduled workout","lastModifiedDate":"2021-10-25"},{"lineNumber":393,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":394,"author":{"gitId":"EdwardZYWang"},"content":"Command Word: `delete schedule`","lastModifiedDate":"2021-10-19"},{"lineNumber":395,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":396,"author":{"gitId":"arvejw"},"content":"Description: Deletes a workout from the list of workout items.","lastModifiedDate":"2021-10-31"},{"lineNumber":397,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":398,"author":{"gitId":"arvejw"},"content":"Format: `delete schedule INDEX`","lastModifiedDate":"2021-10-15"},{"lineNumber":399,"author":{"gitId":"arvejw"},"content":"* Use `list schedule all` to determine the index of the scheduled workout you wish to delete.","lastModifiedDate":"2021-10-31"},{"lineNumber":400,"author":{"gitId":"arvejw"},"content":"* The `INDEX` can only contain integers from the list.","lastModifiedDate":"2021-10-15"},{"lineNumber":401,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":402,"author":{"gitId":"arvejw"},"content":"Example of usage:","lastModifiedDate":"2021-10-15"},{"lineNumber":403,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":404,"author":{"gitId":"arvejw"},"content":"* `delete schedule 3` will delete the schedule workout with index `3` as seen in the list from `list schedule all` if the index is valid.","lastModifiedDate":"2021-10-31"},{"lineNumber":405,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":406,"author":{"gitId":"arvejw"},"content":"## Delete a meal from library","lastModifiedDate":"2021-10-25"},{"lineNumber":407,"author":{"gitId":"pragyan01"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":408,"author":{"gitId":"EdwardZYWang"},"content":"Command Word: `library deletemeal`","lastModifiedDate":"2021-10-27"},{"lineNumber":409,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":410,"author":{"gitId":"EdwardZYWang"},"content":"Description: Deletes a meal record from the library.","lastModifiedDate":"2021-10-27"},{"lineNumber":411,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":412,"author":{"gitId":"arvejw"},"content":"Format: `library deletemeal INDEX`","lastModifiedDate":"2021-10-25"},{"lineNumber":413,"author":{"gitId":"arvejw"},"content":"* Use `library listmeals` to determine the index of the meal you wish to delete.","lastModifiedDate":"2021-10-25"},{"lineNumber":414,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":415,"author":{"gitId":"EdwardZYWang"},"content":"Example of usage:","lastModifiedDate":"2021-10-19"},{"lineNumber":416,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":417,"author":{"gitId":"arvejw"},"content":"`library deletemeal 2`","lastModifiedDate":"2021-10-25"},{"lineNumber":418,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":419,"author":{"gitId":"arvejw"},"content":"## Delete a fluid from library","lastModifiedDate":"2021-10-25"},{"lineNumber":420,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":421,"author":{"gitId":"EdwardZYWang"},"content":"Command Word: `library deletefluid`","lastModifiedDate":"2021-10-27"},{"lineNumber":422,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":423,"author":{"gitId":"EdwardZYWang"},"content":"Description: Deletes a fluid record from the library.","lastModifiedDate":"2021-10-27"},{"lineNumber":424,"author":{"gitId":"pragyan01"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":425,"author":{"gitId":"arvejw"},"content":"Format: `library deletefluid INDEX`","lastModifiedDate":"2021-10-25"},{"lineNumber":426,"author":{"gitId":"arvejw"},"content":"* Use `library listfluids` to determine the index of the meal you wish to delete.","lastModifiedDate":"2021-10-25"},{"lineNumber":427,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":428,"author":{"gitId":"arvejw"},"content":"Example of usage:","lastModifiedDate":"2021-10-25"},{"lineNumber":429,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":430,"author":{"gitId":"arvejw"},"content":"`library deletefluid 2`","lastModifiedDate":"2021-10-25"},{"lineNumber":431,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":432,"author":{"gitId":"arvejw"},"content":"## List meals","lastModifiedDate":"2021-10-25"},{"lineNumber":433,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":434,"author":{"gitId":"EdwardZYWang"},"content":"Command Word: `list meals`","lastModifiedDate":"2021-10-27"},{"lineNumber":435,"author":{"gitId":"pragyan01"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":436,"author":{"gitId":"EdwardZYWang"},"content":"Description: Lists all meals, with its associated calories, date and time of consumption.","lastModifiedDate":"2021-10-27"},{"lineNumber":437,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":438,"author":{"gitId":"EdwardZYWang"},"content":"Format: `list meals \u003cDATE\u003e`","lastModifiedDate":"2021-10-27"},{"lineNumber":439,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":440,"author":{"gitId":"arvejw"},"content":"* The `DATE` is in dd/mm/yyyy.","lastModifiedDate":"2021-10-25"},{"lineNumber":441,"author":{"gitId":"arvejw"},"content":"* If `DATE` is left empty, the meals recorded **today** will be returned.","lastModifiedDate":"2021-10-25"},{"lineNumber":442,"author":{"gitId":"arvejw"},"content":"* If the word `all` is written in place of `DATE`, **ALL** stored meals will be listed.","lastModifiedDate":"2021-10-25"},{"lineNumber":443,"author":{"gitId":"pragyan01"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":444,"author":{"gitId":"pragyan01"},"content":"Example of usage:","lastModifiedDate":"2021-10-15"},{"lineNumber":445,"author":{"gitId":"pragyan01"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":446,"author":{"gitId":"EdwardZYWang"},"content":"`list meals`, `list meals 22/10/2021`, `list meals all`","lastModifiedDate":"2021-10-27"},{"lineNumber":447,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":448,"author":{"gitId":"pragyan01"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":449,"author":{"gitId":"EdwardZYWang"},"content":"## List fluids","lastModifiedDate":"2021-10-27"},{"lineNumber":450,"author":{"gitId":"teoziyiivy"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":451,"author":{"gitId":"EdwardZYWang"},"content":"Command Word: `list fluids`","lastModifiedDate":"2021-10-27"},{"lineNumber":452,"author":{"gitId":"teoziyiivy"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":453,"author":{"gitId":"EdwardZYWang"},"content":"Description: Lists all fluids, with its associated calories, date and time of consumption.","lastModifiedDate":"2021-10-27"},{"lineNumber":454,"author":{"gitId":"teoziyiivy"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":455,"author":{"gitId":"EdwardZYWang"},"content":"Format: `list fluids \u003cDATE\u003e`","lastModifiedDate":"2021-10-27"},{"lineNumber":456,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":457,"author":{"gitId":"arvejw"},"content":"* The `DATE` is in dd/mm/yyyy.","lastModifiedDate":"2021-10-25"},{"lineNumber":458,"author":{"gitId":"arvejw"},"content":"* If `DATE` is left empty, the fluids recorded today will be returned.","lastModifiedDate":"2021-10-25"},{"lineNumber":459,"author":{"gitId":"arvejw"},"content":"* If the word `all` is written in place of DATE, ALL stored fluids will be listed.","lastModifiedDate":"2021-10-25"},{"lineNumber":460,"author":{"gitId":"teoziyiivy"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":461,"author":{"gitId":"pragyan01"},"content":"Example of usage:","lastModifiedDate":"2021-10-15"},{"lineNumber":462,"author":{"gitId":"pragyan01"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":463,"author":{"gitId":"arvejw"},"content":"`list fluids`, `list fluids 22/10/2021`, `list fluids all`","lastModifiedDate":"2021-10-25"},{"lineNumber":464,"author":{"gitId":"pragyan01"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":465,"author":{"gitId":"arvejw"},"content":"## List weights","lastModifiedDate":"2021-10-25"},{"lineNumber":466,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":467,"author":{"gitId":"EdwardZYWang"},"content":"Command Word:`list weights`","lastModifiedDate":"2021-10-27"},{"lineNumber":468,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":469,"author":{"gitId":"EdwardZYWang"},"content":"Description: Lists weight depending on date of entry.","lastModifiedDate":"2021-10-27"},{"lineNumber":470,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":471,"author":{"gitId":"EdwardZYWang"},"content":"Format: `list weights \u003cDATE\u003e`","lastModifiedDate":"2021-10-27"},{"lineNumber":472,"author":{"gitId":"teoziyiivy"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":473,"author":{"gitId":"arvejw"},"content":"* The `DATE` is in dd/mm/yyyy.","lastModifiedDate":"2021-10-25"},{"lineNumber":474,"author":{"gitId":"arvejw"},"content":"* If `DATE` is left empty, the weights recorded **today** will be returned.","lastModifiedDate":"2021-10-25"},{"lineNumber":475,"author":{"gitId":"arvejw"},"content":"* If the word `all` is written in place of `DATE`, **ALL** stored weights will be listed.","lastModifiedDate":"2021-10-25"},{"lineNumber":476,"author":{"gitId":"teoziyiivy"},"content":"* Only 1 `DATE` should be included in your input.","lastModifiedDate":"2021-11-03"},{"lineNumber":477,"author":{"gitId":"teoziyiivy"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":478,"author":{"gitId":"teoziyiivy"},"content":"Example of usage:","lastModifiedDate":"2021-10-22"},{"lineNumber":479,"author":{"gitId":"teoziyiivy"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":480,"author":{"gitId":"arvejw"},"content":"`list weights`, `list weights 22/10/2021`, `list weights all`","lastModifiedDate":"2021-10-25"},{"lineNumber":481,"author":{"gitId":"teoziyiivy"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":482,"author":{"gitId":"arvejw"},"content":"## List workouts","lastModifiedDate":"2021-10-25"},{"lineNumber":483,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":484,"author":{"gitId":"arvejw"},"content":"Command Word:`list workouts`","lastModifiedDate":"2021-10-25"},{"lineNumber":485,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":486,"author":{"gitId":"EdwardZYWang"},"content":"Description: Lists out all stored workout descriptions, ","lastModifiedDate":"2021-10-27"},{"lineNumber":487,"author":{"gitId":"EdwardZYWang"},"content":"calories burned, date and time depending on date of entry.","lastModifiedDate":"2021-10-27"},{"lineNumber":488,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":489,"author":{"gitId":"EdwardZYWang"},"content":"Format: `list workouts \u003cDATE\u003e`","lastModifiedDate":"2021-10-27"},{"lineNumber":490,"author":{"gitId":"arvejw"},"content":"* The `DATE` is in dd/mm/yyyy.","lastModifiedDate":"2021-10-25"},{"lineNumber":491,"author":{"gitId":"arvejw"},"content":"* If `DATE` is left empty, the workouts recorded **today** will be returned.","lastModifiedDate":"2021-10-25"},{"lineNumber":492,"author":{"gitId":"arvejw"},"content":"* If the word `all` is written in place of `DATE`, **ALL** stored workouts will be listed.","lastModifiedDate":"2021-10-25"},{"lineNumber":493,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":494,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":495,"author":{"gitId":"arvejw"},"content":"Example of usage:","lastModifiedDate":"2021-10-15"},{"lineNumber":496,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":497,"author":{"gitId":"arvejw"},"content":"* `list workouts` will list the recorded workouts for today\u0027s date.","lastModifiedDate":"2021-10-31"},{"lineNumber":498,"author":{"gitId":"arvejw"},"content":"* `list workouts 22/10/2021` will list the recorded workouts on `22/10/2021`.","lastModifiedDate":"2021-10-31"},{"lineNumber":499,"author":{"gitId":"arvejw"},"content":"* `list workouts all` will list all your recorded workouts.","lastModifiedDate":"2021-10-31"},{"lineNumber":500,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":501,"author":{"gitId":"arvejw"},"content":"## List scheduled workouts","lastModifiedDate":"2021-10-25"},{"lineNumber":502,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":503,"author":{"gitId":"EdwardZYWang"},"content":"Command Word: `list schedule`","lastModifiedDate":"2021-10-19"},{"lineNumber":504,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":505,"author":{"gitId":"EdwardZYWang"},"content":"Description: Lists out stored scheduled ","lastModifiedDate":"2021-10-27"},{"lineNumber":506,"author":{"gitId":"EdwardZYWang"},"content":"workout descriptions, date and time as well as their activity breakdowns depending on date ","lastModifiedDate":"2021-10-27"},{"lineNumber":507,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":508,"author":{"gitId":"EdwardZYWang"},"content":"Format: `list schedule \u003cDATE\u003e`","lastModifiedDate":"2021-10-27"},{"lineNumber":509,"author":{"gitId":"arvejw"},"content":"* The `DATE` is in dd/mm/yyyy.","lastModifiedDate":"2021-10-22"},{"lineNumber":510,"author":{"gitId":"arvejw"},"content":"* If `DATE` is left empty, the schedule for the **today** will be returned.","lastModifiedDate":"2021-10-22"},{"lineNumber":511,"author":{"gitId":"arvejw"},"content":"* If the word `all` is written in place of `DATE`, **ALL** stored scheduled workouts will be listed.","lastModifiedDate":"2021-10-22"},{"lineNumber":512,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":513,"author":{"gitId":"arvejw"},"content":"Example of usage:","lastModifiedDate":"2021-10-15"},{"lineNumber":514,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":515,"author":{"gitId":"arvejw"},"content":"* `list schedule` will list all the schedule for today\u0027s date.","lastModifiedDate":"2021-10-31"},{"lineNumber":516,"author":{"gitId":"arvejw"},"content":"* `list schedule 22/10/2022` will list the schedule for `22/10/2022`.","lastModifiedDate":"2021-10-31"},{"lineNumber":517,"author":{"gitId":"arvejw"},"content":"* `list schedule all` will list your full schedule.","lastModifiedDate":"2021-10-31"},{"lineNumber":518,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":519,"author":{"gitId":"EdwardZYWang"},"content":"## List Volumes","lastModifiedDate":"2021-10-28"},{"lineNumber":520,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":521,"author":{"gitId":"EdwardZYWang"},"content":"Command Word: `list volumes`","lastModifiedDate":"2021-10-28"},{"lineNumber":522,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":523,"author":{"gitId":"EdwardZYWang"},"content":"Description: List volumes of all fluids consumed for a specific date","lastModifiedDate":"2021-10-28"},{"lineNumber":524,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":525,"author":{"gitId":"EdwardZYWang"},"content":"Format: `list volumes \u003cDATE\u003e`","lastModifiedDate":"2021-10-28"},{"lineNumber":526,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":527,"author":{"gitId":"EdwardZYWang"},"content":"## List Calories","lastModifiedDate":"2021-10-28"},{"lineNumber":528,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":529,"author":{"gitId":"EdwardZYWang"},"content":"Command Word: `list calories`","lastModifiedDate":"2021-10-28"},{"lineNumber":530,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":531,"author":{"gitId":"EdwardZYWang"},"content":"Description:  List total number of calories consumed, total number of calories burned and net calories","lastModifiedDate":"2021-10-28"},{"lineNumber":532,"author":{"gitId":"EdwardZYWang"},"content":"for a chosen date","lastModifiedDate":"2021-10-28"},{"lineNumber":533,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":534,"author":{"gitId":"EdwardZYWang"},"content":"Format: `list calories \u003cDATE\u003e `","lastModifiedDate":"2021-10-28"},{"lineNumber":535,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":536,"author":{"gitId":"EdwardZYWang"},"content":"## List meals stored in library","lastModifiedDate":"2021-10-28"},{"lineNumber":537,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":538,"author":{"gitId":"EdwardZYWang"},"content":"Command Word: `library listmeals`","lastModifiedDate":"2021-10-28"},{"lineNumber":539,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":540,"author":{"gitId":"EdwardZYWang"},"content":"Description: Lists all meals stored in the library.","lastModifiedDate":"2021-10-28"},{"lineNumber":541,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":542,"author":{"gitId":"EdwardZYWang"},"content":"Format: `library listmeals`","lastModifiedDate":"2021-10-28"},{"lineNumber":543,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":544,"author":{"gitId":"EdwardZYWang"},"content":"## List fluids stored in library","lastModifiedDate":"2021-10-28"},{"lineNumber":545,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":546,"author":{"gitId":"EdwardZYWang"},"content":"Command Word: `library listfluids`","lastModifiedDate":"2021-10-28"},{"lineNumber":547,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":548,"author":{"gitId":"EdwardZYWang"},"content":"Description: Lists all fluids stored in the library.","lastModifiedDate":"2021-10-28"},{"lineNumber":549,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":550,"author":{"gitId":"EdwardZYWang"},"content":"Format: `library listfluids`","lastModifiedDate":"2021-10-28"},{"lineNumber":551,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":552,"author":{"gitId":"VishalJeyaram"},"content":"## List everything on current date","lastModifiedDate":"2021-11-04"},{"lineNumber":553,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":554,"author":{"gitId":"arvejw"},"content":"Command Word: `list`","lastModifiedDate":"2021-10-31"},{"lineNumber":555,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":556,"author":{"gitId":"arvejw"},"content":"Description: Lists all meals, fluids, weight, workouts and scheduled workouts on a particular date","lastModifiedDate":"2021-10-31"},{"lineNumber":557,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":558,"author":{"gitId":"arvejw"},"content":"Format `list \u003cDATE`","lastModifiedDate":"2021-10-31"},{"lineNumber":559,"author":{"gitId":"arvejw"},"content":"* The `DATE` is in dd/mm/yyyy.","lastModifiedDate":"2021-10-31"},{"lineNumber":560,"author":{"gitId":"arvejw"},"content":"* If `DATE` is left empty **today\u0027s** date will be taken.","lastModifiedDate":"2021-10-31"},{"lineNumber":561,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":562,"author":{"gitId":"arvejw"},"content":"Example of usage:","lastModifiedDate":"2021-10-31"},{"lineNumber":563,"author":{"gitId":"arvejw"},"content":"* `list` will list all data from meals, fluids, weight, workouts and schedule workouts for today\u0027s date.","lastModifiedDate":"2021-10-31"},{"lineNumber":564,"author":{"gitId":"arvejw"},"content":"* `list 22/10/2021` will list all data on `22/10/2021`.","lastModifiedDate":"2021-10-31"},{"lineNumber":565,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":566,"author":{"gitId":"VishalJeyaram"},"content":"## List everything on all dates","lastModifiedDate":"2021-11-04"},{"lineNumber":567,"author":{"gitId":"VishalJeyaram"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":568,"author":{"gitId":"VishalJeyaram"},"content":"Command Word: `list`","lastModifiedDate":"2021-11-04"},{"lineNumber":569,"author":{"gitId":"VishalJeyaram"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":570,"author":{"gitId":"VishalJeyaram"},"content":"Description: Lists all meals, fluids, weight, workouts and scheduled workouts on all dates","lastModifiedDate":"2021-11-04"},{"lineNumber":571,"author":{"gitId":"VishalJeyaram"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":572,"author":{"gitId":"VishalJeyaram"},"content":"Format `list all`","lastModifiedDate":"2021-11-04"},{"lineNumber":573,"author":{"gitId":"VishalJeyaram"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":574,"author":{"gitId":"VishalJeyaram"},"content":"Example of usage:","lastModifiedDate":"2021-11-04"},{"lineNumber":575,"author":{"gitId":"VishalJeyaram"},"content":"`list all`","lastModifiedDate":"2021-11-04"},{"lineNumber":576,"author":{"gitId":"VishalJeyaram"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":577,"author":{"gitId":"VishalJeyaram"},"content":"Expected output","lastModifiedDate":"2021-11-04"},{"lineNumber":578,"author":{"gitId":"VishalJeyaram"},"content":"```","lastModifiedDate":"2021-11-04"},{"lineNumber":579,"author":{"gitId":"VishalJeyaram"},"content":"1. cookie","lastModifiedDate":"2021-11-04"},{"lineNumber":580,"author":{"gitId":"VishalJeyaram"},"content":"Calories: 22","lastModifiedDate":"2021-11-04"},{"lineNumber":581,"author":{"gitId":"VishalJeyaram"},"content":"Date: 15/02/2022","lastModifiedDate":"2021-11-04"},{"lineNumber":582,"author":{"gitId":"VishalJeyaram"},"content":"Time: 19:38","lastModifiedDate":"2021-11-04"},{"lineNumber":583,"author":{"gitId":"VishalJeyaram"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":584,"author":{"gitId":"VishalJeyaram"},"content":"Total number of meals: 1","lastModifiedDate":"2021-11-04"},{"lineNumber":585,"author":{"gitId":"VishalJeyaram"},"content":"Total calories: 22","lastModifiedDate":"2021-11-04"},{"lineNumber":586,"author":{"gitId":"VishalJeyaram"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":587,"author":{"gitId":"VishalJeyaram"},"content":"1. cola","lastModifiedDate":"2021-11-04"},{"lineNumber":588,"author":{"gitId":"VishalJeyaram"},"content":"Calories: 123","lastModifiedDate":"2021-11-04"},{"lineNumber":589,"author":{"gitId":"VishalJeyaram"},"content":"Volume: 0","lastModifiedDate":"2021-11-04"},{"lineNumber":590,"author":{"gitId":"VishalJeyaram"},"content":"Date: 12/12/2024","lastModifiedDate":"2021-11-04"},{"lineNumber":591,"author":{"gitId":"VishalJeyaram"},"content":"Time: 19:38","lastModifiedDate":"2021-11-04"},{"lineNumber":592,"author":{"gitId":"VishalJeyaram"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":593,"author":{"gitId":"VishalJeyaram"},"content":"Total number of fluids: 1","lastModifiedDate":"2021-11-04"},{"lineNumber":594,"author":{"gitId":"VishalJeyaram"},"content":"Total calories: 123","lastModifiedDate":"2021-11-04"},{"lineNumber":595,"author":{"gitId":"VishalJeyaram"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":596,"author":{"gitId":"VishalJeyaram"},"content":"Your weight list is empty!","lastModifiedDate":"2021-11-04"},{"lineNumber":597,"author":{"gitId":"VishalJeyaram"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":598,"author":{"gitId":"VishalJeyaram"},"content":"Your workout list is empty!","lastModifiedDate":"2021-11-04"},{"lineNumber":599,"author":{"gitId":"VishalJeyaram"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":600,"author":{"gitId":"VishalJeyaram"},"content":"Your workout schedule is empty!","lastModifiedDate":"2021-11-04"},{"lineNumber":601,"author":{"gitId":"VishalJeyaram"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":602,"author":{"gitId":"VishalJeyaram"},"content":"```","lastModifiedDate":"2021-11-04"},{"lineNumber":603,"author":{"gitId":"EdwardZYWang"},"content":"## Help Command","lastModifiedDate":"2021-10-28"},{"lineNumber":604,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":605,"author":{"gitId":"EdwardZYWang"},"content":"Command Word: `help`","lastModifiedDate":"2021-10-28"},{"lineNumber":606,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":607,"author":{"gitId":"EdwardZYWang"},"content":"Description: Lists out the formats of input for meal, fluid, workout, weight and library commands and ","lastModifiedDate":"2021-10-28"},{"lineNumber":608,"author":{"gitId":"EdwardZYWang"},"content":"provides the hyperlink to the user guide for more tech-savvy users to read.","lastModifiedDate":"2021-10-28"},{"lineNumber":609,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":610,"author":{"gitId":"EdwardZYWang"},"content":"Example of usage:","lastModifiedDate":"2021-10-16"},{"lineNumber":611,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":612,"author":{"gitId":"EdwardZYWang"},"content":"`help`","lastModifiedDate":"2021-10-28"},{"lineNumber":613,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":614,"author":{"gitId":"EdwardZYWang"},"content":"## Bye","lastModifiedDate":"2021-10-31"},{"lineNumber":615,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":616,"author":{"gitId":"EdwardZYWang"},"content":"Command Word: `bye`","lastModifiedDate":"2021-10-31"},{"lineNumber":617,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":618,"author":{"gitId":"EdwardZYWang"},"content":"Description: Terminates CLI.ckFit program.","lastModifiedDate":"2021-10-31"},{"lineNumber":619,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":620,"author":{"gitId":"EdwardZYWang"},"content":"Example of usage:","lastModifiedDate":"2021-10-31"},{"lineNumber":621,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":622,"author":{"gitId":"EdwardZYWang"},"content":"`bye`","lastModifiedDate":"2021-10-31"},{"lineNumber":623,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":624,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":625,"author":{"gitId":"-"},"content":"## FAQ","lastModifiedDate":"2020-05-24"},{"lineNumber":626,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":627,"author":{"gitId":"arvejw"},"content":"Q: Are the commands case-sensitive?","lastModifiedDate":"2021-10-25"},{"lineNumber":628,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":629,"author":{"gitId":"EdwardZYWang"},"content":"A: Yes, please follow the specified casing. All commands are to be in lower-case. ","lastModifiedDate":"2021-10-27"},{"lineNumber":630,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":631,"author":{"gitId":"VishalJeyaram"},"content":"Q: How do I transfer my CLIckFit data to another computer?","lastModifiedDate":"2021-10-28"},{"lineNumber":632,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":633,"author":{"gitId":"arvejw"},"content":"A: Transfer the data text files located in the same directory as your CLIckFit.jar file over","lastModifiedDate":"2021-10-25"},{"lineNumber":634,"author":{"gitId":"arvejw"},"content":"to your other computer. Place it in the same directory as the CLIckFit.jar file on your other computer. Your","lastModifiedDate":"2021-10-25"},{"lineNumber":635,"author":{"gitId":"arvejw"},"content":"data will then be loaded from the text files when you run CLIckFit.jar on your new computer.","lastModifiedDate":"2021-10-25"},{"lineNumber":636,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":637,"author":{"gitId":"VishalJeyaram"},"content":"Q: Can I check and alter my CLIckFit data myself?","lastModifiedDate":"2021-10-29"},{"lineNumber":638,"author":{"gitId":"VishalJeyaram"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":639,"author":{"gitId":"VishalJeyaram"},"content":"A: Yes. You can open up the files, \"Weight.txt\", \"Schedule.txt\", \"Workout.txt\", \"Food.txt\" and","lastModifiedDate":"2021-10-29"},{"lineNumber":640,"author":{"gitId":"VishalJeyaram"},"content":"\"FoodBank.txt\". These files contain the associated data which you can view and also update manually in the correct format if you wish to.","lastModifiedDate":"2021-10-29"},{"lineNumber":641,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":642,"author":{"gitId":"-"},"content":"## Command Summary","lastModifiedDate":"2021-10-26"},{"lineNumber":643,"author":{"gitId":"EdwardZYWang"},"content":"*Psssstttttt click on the commands to skip sections!*","lastModifiedDate":"2021-10-26"},{"lineNumber":644,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":645,"author":{"gitId":"teoziyiivy"},"content":"* Parameters not enclosed in any brackets are compulsory while those enclosed in `\u003c\u003e` are ***optional***.","lastModifiedDate":"2021-10-28"},{"lineNumber":646,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":647,"author":{"gitId":"teoziyiivy"},"content":"* You can only omit putting calories if you have already saved the meal/fluid in their respective libraries.","lastModifiedDate":"2021-10-28"},{"lineNumber":648,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":649,"author":{"gitId":"EdwardZYWang"},"content":"Command | Format of input","lastModifiedDate":"2021-10-26"},{"lineNumber":650,"author":{"gitId":"EdwardZYWang"},"content":"------------ | -------------","lastModifiedDate":"2021-10-26"},{"lineNumber":651,"author":{"gitId":"EdwardZYWang"},"content":"[**Add meal**](#adding-a-meal)| `add meal MEAL_NAME \u003c/c MEAL_CALORIES /d DATE /t TIME\u003e`","lastModifiedDate":"2021-10-27"},{"lineNumber":652,"author":{"gitId":"EdwardZYWang"},"content":"[**Add fluid**](#adding-fluids)| `add fluid FLUID_NAME \u003c/c FLUID_CALORIES /v VOLUME /d DATE /t TIME\u003e`","lastModifiedDate":"2021-10-27"},{"lineNumber":653,"author":{"gitId":"EdwardZYWang"},"content":"[**Add weight**](#adding-weight)| `add weight WEIGHT /d \u003cDATE\u003e`","lastModifiedDate":"2021-10-26"},{"lineNumber":654,"author":{"gitId":"EdwardZYWang"},"content":"[**Add workout**](#adding-workout)| `add workout WORKOUT_NAME /c CALORIES_BURNED \u003c/d DATE /t TIME\u003e`","lastModifiedDate":"2021-10-26"},{"lineNumber":655,"author":{"gitId":"VishalJeyaram"},"content":"[**Add scheduled workout**](#adding-scheduled-workout)| `add schedule WORKOUT_NAME /d DATE /t TIME \u003c/a ACTIVITY_NAME:ACTIVITY_QUANTIFIER, ...\u003e \u003c/r\u003e`","lastModifiedDate":"2021-10-28"},{"lineNumber":656,"author":{"gitId":"EdwardZYWang"},"content":"[**Add meal to library**](#adding-meal-to-library)| `library addmeal MEAL_NAME /c MEAL_CALORIES`","lastModifiedDate":"2021-10-26"},{"lineNumber":657,"author":{"gitId":"EdwardZYWang"},"content":"[**Add fluid to library**](#adding-fluid-to-library)| `library addfluid FLUID_NAME /c FLUID_CALORIES`","lastModifiedDate":"2021-10-26"},{"lineNumber":658,"author":{"gitId":"EdwardZYWang"},"content":"[**Remove meal**](#delete-a-meal)| `delete meal INDEX`","lastModifiedDate":"2021-10-26"},{"lineNumber":659,"author":{"gitId":"EdwardZYWang"},"content":"[**Remove fluid**](#delete-a-fluid)| `delete fluid INDEX`","lastModifiedDate":"2021-10-27"},{"lineNumber":660,"author":{"gitId":"EdwardZYWang"},"content":"[**Remove weight**](#delete-a-weight)| `delete weight INDEX`","lastModifiedDate":"2021-10-26"},{"lineNumber":661,"author":{"gitId":"EdwardZYWang"},"content":"[**Remove workout**](#delete-a-workout)| `delete workout INDEX`","lastModifiedDate":"2021-10-26"},{"lineNumber":662,"author":{"gitId":"EdwardZYWang"},"content":"[**Remove scheduled workout**](#delete-a-scheduled-workout)| `delete schedule INDEX`","lastModifiedDate":"2021-10-26"},{"lineNumber":663,"author":{"gitId":"EdwardZYWang"},"content":"[**Remove meal from library**](#delete-a-meal-from-library)| `library deletemeal INDEX`","lastModifiedDate":"2021-10-26"},{"lineNumber":664,"author":{"gitId":"EdwardZYWang"},"content":"[**Remove fluid from library**](#delete-a-fluid-from-library)| `library deletefluid INDEX`","lastModifiedDate":"2021-10-26"},{"lineNumber":665,"author":{"gitId":"EdwardZYWang"},"content":"[**List meals**](#list-meals)| `list meals \u003cDATE\u003e`","lastModifiedDate":"2021-10-27"},{"lineNumber":666,"author":{"gitId":"EdwardZYWang"},"content":"[**List fluids**](#list-fluids)| `list fluids \u003cDATE\u003e`","lastModifiedDate":"2021-10-27"},{"lineNumber":667,"author":{"gitId":"EdwardZYWang"},"content":"[**List weights**](#list-weights)| `list weights \u003cDATE\u003e`","lastModifiedDate":"2021-10-27"},{"lineNumber":668,"author":{"gitId":"EdwardZYWang"},"content":"[**List workouts**](#list-workouts)| `list workouts \u003cDATE\u003e`","lastModifiedDate":"2021-10-27"},{"lineNumber":669,"author":{"gitId":"EdwardZYWang"},"content":"[**List calories**](#list-calories)| `list calories \u003cDATE\u003e`","lastModifiedDate":"2021-10-27"},{"lineNumber":670,"author":{"gitId":"EdwardZYWang"},"content":"[**List volume**](#list-volumes)| `list volumes \u003cDATE\u003e`","lastModifiedDate":"2021-10-31"},{"lineNumber":671,"author":{"gitId":"EdwardZYWang"},"content":"[**List scheduled workouts**](#list-scheduled-workouts)| `list schedule \u003cDATE\u003e`","lastModifiedDate":"2021-10-27"},{"lineNumber":672,"author":{"gitId":"EdwardZYWang"},"content":"[**List meals from library**](#list-meals-stored-in-library)| `library listmeals`","lastModifiedDate":"2021-10-26"},{"lineNumber":673,"author":{"gitId":"EdwardZYWang"},"content":"[**List fluids from library**](#list-fluids-stored-in-library)| `library listfluids`","lastModifiedDate":"2021-10-26"},{"lineNumber":674,"author":{"gitId":"arvejw"},"content":"[**List everything**](#list-everything)| `list \u003cDATE\u003e`","lastModifiedDate":"2021-10-31"},{"lineNumber":675,"author":{"gitId":"EdwardZYWang"},"content":"[**Access user help**](#help-command)| `help`","lastModifiedDate":"2021-10-28"},{"lineNumber":676,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-28"}],"authorContributionMap":{"pragyan01":55,"teoziyiivy":65,"-":34,"VishalJeyaram":47,"arvejw":227,"EdwardZYWang":248}},{"path":"docs/team/arvejw.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"arvejw"},"content":"# Teh Jiewen - Project Portfolio Page","lastModifiedDate":"2021-11-03"},{"lineNumber":2,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":3,"author":{"gitId":"arvejw"},"content":"## Overview","lastModifiedDate":"2021-11-03"},{"lineNumber":4,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":5,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":6,"author":{"gitId":"arvejw"},"content":"### Summary of Contributions","lastModifiedDate":"2021-11-03"}],"authorContributionMap":{"arvejw":6}},{"path":"docs/team/edwardzywang.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"EdwardZYWang"},"content":"# Wang Zhao Yu, Edward - Project Portfolio Page","lastModifiedDate":"2021-11-04"},{"lineNumber":2,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":3,"author":{"gitId":"EdwardZYWang"},"content":"## Overview","lastModifiedDate":"2021-11-04"},{"lineNumber":4,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":5,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":6,"author":{"gitId":"EdwardZYWang"},"content":"### Summary of Contributions","lastModifiedDate":"2021-11-04"},{"lineNumber":7,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-11-06"}],"authorContributionMap":{"EdwardZYWang":7}},{"path":"docs/team/pragyan01.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"pragyan01"},"content":"# Samal Sthitipragyan - Project Portfolio Page","lastModifiedDate":"2021-11-04"},{"lineNumber":2,"author":{"gitId":"pragyan01"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":3,"author":{"gitId":"pragyan01"},"content":"## Overview","lastModifiedDate":"2021-11-04"},{"lineNumber":4,"author":{"gitId":"pragyan01"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":5,"author":{"gitId":"pragyan01"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":6,"author":{"gitId":"pragyan01"},"content":"### Summary of Contributions","lastModifiedDate":"2021-11-04"}],"authorContributionMap":{"pragyan01":6}},{"path":"docs/team/teoziyiivy.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"pragyan01"},"content":"# Teo Ziyi Ivy - Project Portfolio Page","lastModifiedDate":"2021-11-04"},{"lineNumber":2,"author":{"gitId":"pragyan01"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":3,"author":{"gitId":"pragyan01"},"content":"## Overview","lastModifiedDate":"2021-11-04"},{"lineNumber":4,"author":{"gitId":"pragyan01"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":5,"author":{"gitId":"pragyan01"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":6,"author":{"gitId":"pragyan01"},"content":"### Summary of Contributions","lastModifiedDate":"2021-11-04"}],"authorContributionMap":{"pragyan01":6}},{"path":"docs/team/vishaljeyaram.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"VishalJeyaram"},"content":"# Vishal Jeyaram - Project Portfolio Page","lastModifiedDate":"2021-11-04"},{"lineNumber":2,"author":{"gitId":"VishalJeyaram"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":3,"author":{"gitId":"VishalJeyaram"},"content":"## Overview","lastModifiedDate":"2021-11-04"},{"lineNumber":4,"author":{"gitId":"VishalJeyaram"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":5,"author":{"gitId":"VishalJeyaram"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":6,"author":{"gitId":"VishalJeyaram"},"content":"### Summary of Contributions","lastModifiedDate":"2021-11-04"}],"authorContributionMap":{"VishalJeyaram":6}},{"path":"src/main/java/seedu/duke/Calculator.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"EdwardZYWang"},"content":"package seedu.duke;","lastModifiedDate":"2021-10-17"},{"lineNumber":2,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":3,"author":{"gitId":"EdwardZYWang"},"content":"import java.io.IOException;","lastModifiedDate":"2021-11-06"},{"lineNumber":4,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":5,"author":{"gitId":"EdwardZYWang"},"content":"public class Calculator {","lastModifiedDate":"2021-10-17"},{"lineNumber":6,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":7,"author":{"gitId":"EdwardZYWang"},"content":"    protected double height;","lastModifiedDate":"2021-10-24"},{"lineNumber":8,"author":{"gitId":"EdwardZYWang"},"content":"    protected double weight;","lastModifiedDate":"2021-10-24"},{"lineNumber":9,"author":{"gitId":"EdwardZYWang"},"content":"    protected double bmi;","lastModifiedDate":"2021-10-24"},{"lineNumber":10,"author":{"gitId":"VishalJeyaram"},"content":"    protected int idealCalories;","lastModifiedDate":"2021-10-17"},{"lineNumber":11,"author":{"gitId":"VishalJeyaram"},"content":"    protected int age;","lastModifiedDate":"2021-10-17"},{"lineNumber":12,"author":{"gitId":"VishalJeyaram"},"content":"    protected String sex;","lastModifiedDate":"2021-10-17"},{"lineNumber":13,"author":{"gitId":"VishalJeyaram"},"content":"    protected int activityLevel;","lastModifiedDate":"2021-10-17"},{"lineNumber":14,"author":{"gitId":"VishalJeyaram"},"content":"    protected double multiplier;","lastModifiedDate":"2021-10-17"},{"lineNumber":15,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":16,"author":{"gitId":"VishalJeyaram"},"content":"    public Calculator(String sex, double weight, double height, int age, int activityLevel) {","lastModifiedDate":"2021-10-24"},{"lineNumber":17,"author":{"gitId":"VishalJeyaram"},"content":"        this.height \u003d height;","lastModifiedDate":"2021-10-17"},{"lineNumber":18,"author":{"gitId":"VishalJeyaram"},"content":"        this.weight \u003d weight;","lastModifiedDate":"2021-10-17"},{"lineNumber":19,"author":{"gitId":"VishalJeyaram"},"content":"        this.age \u003d age;","lastModifiedDate":"2021-10-17"},{"lineNumber":20,"author":{"gitId":"VishalJeyaram"},"content":"        this.sex \u003d sex;","lastModifiedDate":"2021-10-17"},{"lineNumber":21,"author":{"gitId":"VishalJeyaram"},"content":"        this.activityLevel \u003d activityLevel;","lastModifiedDate":"2021-10-17"},{"lineNumber":22,"author":{"gitId":"VishalJeyaram"},"content":"        this.bmi \u003d 0;","lastModifiedDate":"2021-10-17"},{"lineNumber":23,"author":{"gitId":"VishalJeyaram"},"content":"        this.idealCalories \u003d 0;","lastModifiedDate":"2021-10-17"},{"lineNumber":24,"author":{"gitId":"VishalJeyaram"},"content":"        this.multiplier \u003d 0;","lastModifiedDate":"2021-10-17"},{"lineNumber":25,"author":{"gitId":"VishalJeyaram"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":26,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":27,"author":{"gitId":"EdwardZYWang"},"content":"    //@@author EdwardZYWang","lastModifiedDate":"2021-11-02"},{"lineNumber":28,"author":{"gitId":"EdwardZYWang"},"content":"    /**","lastModifiedDate":"2021-11-06"},{"lineNumber":29,"author":{"gitId":"EdwardZYWang"},"content":"     * method that receives weight, height and calculates the bmi of the user.","lastModifiedDate":"2021-11-06"},{"lineNumber":30,"author":{"gitId":"EdwardZYWang"},"content":"     * the bmi value is then compared to the bounds and the user\u0027s bmi condition","lastModifiedDate":"2021-11-06"},{"lineNumber":31,"author":{"gitId":"EdwardZYWang"},"content":"     * is returned","lastModifiedDate":"2021-11-06"},{"lineNumber":32,"author":{"gitId":"EdwardZYWang"},"content":"     *","lastModifiedDate":"2021-11-06"},{"lineNumber":33,"author":{"gitId":"EdwardZYWang"},"content":"     */","lastModifiedDate":"2021-11-06"},{"lineNumber":34,"author":{"gitId":"EdwardZYWang"},"content":"    public void getBmi() {","lastModifiedDate":"2021-10-17"},{"lineNumber":35,"author":{"gitId":"EdwardZYWang"},"content":"        System.out.println(System.lineSeparator() + \"Your BMI outcome is \" + System.lineSeparator());","lastModifiedDate":"2021-10-17"},{"lineNumber":36,"author":{"gitId":"EdwardZYWang"},"content":"        String getBmiOutcome;","lastModifiedDate":"2021-10-17"},{"lineNumber":37,"author":{"gitId":"EdwardZYWang"},"content":"        bmi \u003d (weight / ((height / 100) * (height / 100)));","lastModifiedDate":"2021-10-24"},{"lineNumber":38,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":39,"author":{"gitId":"EdwardZYWang"},"content":"        if (bmi \u003c 18.5) {","lastModifiedDate":"2021-10-17"},{"lineNumber":40,"author":{"gitId":"EdwardZYWang"},"content":"            getBmiOutcome \u003d \"You are underweight\";","lastModifiedDate":"2021-10-21"},{"lineNumber":41,"author":{"gitId":"EdwardZYWang"},"content":"        } else if ((bmi \u003e\u003d 18.5) \u0026\u0026 (bmi \u003c 24.9)) {","lastModifiedDate":"2021-10-17"},{"lineNumber":42,"author":{"gitId":"EdwardZYWang"},"content":"            getBmiOutcome \u003d \"You are currently at the optimal weight\";","lastModifiedDate":"2021-10-21"},{"lineNumber":43,"author":{"gitId":"EdwardZYWang"},"content":"        } else if ((bmi \u003e\u003d 25) \u0026\u0026 (bmi \u003c 29.9)) {","lastModifiedDate":"2021-10-17"},{"lineNumber":44,"author":{"gitId":"EdwardZYWang"},"content":"            getBmiOutcome \u003d \"You are currently overweight\";","lastModifiedDate":"2021-10-21"},{"lineNumber":45,"author":{"gitId":"EdwardZYWang"},"content":"        } else {","lastModifiedDate":"2021-10-17"},{"lineNumber":46,"author":{"gitId":"EdwardZYWang"},"content":"            getBmiOutcome \u003d \"You are currently obese. Let CLI.ckFit help!\";","lastModifiedDate":"2021-10-21"},{"lineNumber":47,"author":{"gitId":"EdwardZYWang"},"content":"        }","lastModifiedDate":"2021-10-17"},{"lineNumber":48,"author":{"gitId":"EdwardZYWang"},"content":"        System.out.println(getBmiOutcome);","lastModifiedDate":"2021-10-17"},{"lineNumber":49,"author":{"gitId":"EdwardZYWang"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":50,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":51,"author":{"gitId":"VishalJeyaram"},"content":"    //@@author VishalJeyaram","lastModifiedDate":"2021-11-02"},{"lineNumber":52,"author":{"gitId":"VishalJeyaram"},"content":"    /**","lastModifiedDate":"2021-11-05"},{"lineNumber":53,"author":{"gitId":"VishalJeyaram"},"content":"     * Prints out the ideal recommended caloric intake of an individual based on the Harris-Benedict Formula.","lastModifiedDate":"2021-11-05"},{"lineNumber":54,"author":{"gitId":"VishalJeyaram"},"content":"     */","lastModifiedDate":"2021-11-05"},{"lineNumber":55,"author":{"gitId":"VishalJeyaram"},"content":"    public void getIdealCalories() {","lastModifiedDate":"2021-10-17"},{"lineNumber":56,"author":{"gitId":"VishalJeyaram"},"content":"        System.out.println(System.lineSeparator() + \"Your ideal number of calories to maintain your weight is \"","lastModifiedDate":"2021-10-17"},{"lineNumber":57,"author":{"gitId":"VishalJeyaram"},"content":"                + System.lineSeparator());","lastModifiedDate":"2021-10-17"},{"lineNumber":58,"author":{"gitId":"VishalJeyaram"},"content":"        if (activityLevel \u003d\u003d 1) {","lastModifiedDate":"2021-10-17"},{"lineNumber":59,"author":{"gitId":"VishalJeyaram"},"content":"            multiplier \u003d 1.2;","lastModifiedDate":"2021-10-17"},{"lineNumber":60,"author":{"gitId":"VishalJeyaram"},"content":"        } else if (activityLevel \u003d\u003d 2) {","lastModifiedDate":"2021-10-17"},{"lineNumber":61,"author":{"gitId":"VishalJeyaram"},"content":"            multiplier \u003d 1.375;","lastModifiedDate":"2021-10-17"},{"lineNumber":62,"author":{"gitId":"VishalJeyaram"},"content":"        } else if (activityLevel \u003d\u003d 3) {","lastModifiedDate":"2021-10-17"},{"lineNumber":63,"author":{"gitId":"VishalJeyaram"},"content":"            multiplier \u003d 1.55;","lastModifiedDate":"2021-10-17"},{"lineNumber":64,"author":{"gitId":"VishalJeyaram"},"content":"        } else if (activityLevel \u003d\u003d 4) {","lastModifiedDate":"2021-10-17"},{"lineNumber":65,"author":{"gitId":"VishalJeyaram"},"content":"            multiplier \u003d 1.725;","lastModifiedDate":"2021-10-17"},{"lineNumber":66,"author":{"gitId":"VishalJeyaram"},"content":"        } else if (activityLevel \u003d\u003d 5) {","lastModifiedDate":"2021-10-17"},{"lineNumber":67,"author":{"gitId":"VishalJeyaram"},"content":"            multiplier \u003d 1.90;","lastModifiedDate":"2021-10-17"},{"lineNumber":68,"author":{"gitId":"VishalJeyaram"},"content":"        } else {","lastModifiedDate":"2021-10-17"},{"lineNumber":69,"author":{"gitId":"VishalJeyaram"},"content":"            System.out.println(\"go check yourself\");","lastModifiedDate":"2021-10-17"},{"lineNumber":70,"author":{"gitId":"VishalJeyaram"},"content":"        }","lastModifiedDate":"2021-10-17"},{"lineNumber":71,"author":{"gitId":"VishalJeyaram"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":72,"author":{"gitId":"VishalJeyaram"},"content":"        if (sex.equals(\"M\")) {","lastModifiedDate":"2021-10-17"},{"lineNumber":73,"author":{"gitId":"VishalJeyaram"},"content":"            idealCalories \u003d (int) ((66.5 + (13.75 * weight) + (5.003 * height) - (6.775 * age)) * multiplier);","lastModifiedDate":"2021-10-17"},{"lineNumber":74,"author":{"gitId":"VishalJeyaram"},"content":"        } else {","lastModifiedDate":"2021-10-17"},{"lineNumber":75,"author":{"gitId":"VishalJeyaram"},"content":"            idealCalories \u003d (int) ((655.1 + (9.563 * weight) + (1.850 * height) - (4.676 * age)) * multiplier);","lastModifiedDate":"2021-10-17"},{"lineNumber":76,"author":{"gitId":"VishalJeyaram"},"content":"        }","lastModifiedDate":"2021-10-17"},{"lineNumber":77,"author":{"gitId":"VishalJeyaram"},"content":"        System.out.println(idealCalories + \" kcal\");","lastModifiedDate":"2021-10-31"},{"lineNumber":78,"author":{"gitId":"VishalJeyaram"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":79,"author":{"gitId":"VishalJeyaram"},"content":"}","lastModifiedDate":"2021-10-17"}],"authorContributionMap":{"VishalJeyaram":44,"EdwardZYWang":35}},{"path":"src/main/java/seedu/duke/ClickfitMessages.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"EdwardZYWang"},"content":"package seedu.duke;","lastModifiedDate":"2021-10-11"},{"lineNumber":2,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":3,"author":{"gitId":"arvejw"},"content":"import seedu.duke.schedule.ScheduledWorkout;","lastModifiedDate":"2021-11-03"},{"lineNumber":4,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":5,"author":{"gitId":"EdwardZYWang"},"content":"//@@author { ALL}","lastModifiedDate":"2021-10-27"},{"lineNumber":6,"author":{"gitId":"EdwardZYWang"},"content":"public class ClickfitMessages {","lastModifiedDate":"2021-10-11"},{"lineNumber":7,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":8,"author":{"gitId":"VishalJeyaram"},"content":"    public static final String INITIAL_PROMPT \u003d \"What would you like to start with?\";","lastModifiedDate":"2021-10-24"},{"lineNumber":9,"author":{"gitId":"VishalJeyaram"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":10,"author":{"gitId":"EdwardZYWang"},"content":"    public static final String MESSAGE_A \u003d System.lineSeparator() + \"Lets get your fitness journey \"","lastModifiedDate":"2021-10-11"},{"lineNumber":11,"author":{"gitId":"EdwardZYWang"},"content":"            + \"started! input any commands to get started! Type \\\"help\\\" to get started!\"","lastModifiedDate":"2021-10-31"},{"lineNumber":12,"author":{"gitId":"EdwardZYWang"},"content":"            + System.lineSeparator()","lastModifiedDate":"2021-10-31"},{"lineNumber":13,"author":{"gitId":"EdwardZYWang"},"content":"            + \"Lets work hard together in your fitness journey!\";","lastModifiedDate":"2021-10-11"},{"lineNumber":14,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":15,"author":{"gitId":"EdwardZYWang"},"content":"    public static final String CREDITS \u003d System.lineSeparator() + \"Thank you for the hardwork today. \"","lastModifiedDate":"2021-10-11"},{"lineNumber":16,"author":{"gitId":"EdwardZYWang"},"content":"            + \"CLI.ckFit wishes you a good day\" + System.lineSeparator() + \"Team CLI.ckFit is proudly \"","lastModifiedDate":"2021-10-11"},{"lineNumber":17,"author":{"gitId":"VishalJeyaram"},"content":"            + \"brought to you by Jiewen, Vishal, Pragyan, Ivy and Edward.\"","lastModifiedDate":"2021-10-14"},{"lineNumber":18,"author":{"gitId":"EdwardZYWang"},"content":"            + System.lineSeparator() + \"See you soon!\";","lastModifiedDate":"2021-10-11"},{"lineNumber":19,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":20,"author":{"gitId":"EdwardZYWang"},"content":"    public static final String MEMORY_STARTUP_PROMPT \u003d System.lineSeparator() + \"Would you \"","lastModifiedDate":"2021-10-28"},{"lineNumber":21,"author":{"gitId":"EdwardZYWang"},"content":"            + \"like to load up the records of your fitness journey?\" + System.lineSeparator()","lastModifiedDate":"2021-10-11"},{"lineNumber":22,"author":{"gitId":"EdwardZYWang"},"content":"            + \"Key in y or press enter keystroke to skip!\" + System.lineSeparator()","lastModifiedDate":"2021-11-04"},{"lineNumber":23,"author":{"gitId":"EdwardZYWang"},"content":"            + \"Note: Pressing enter to skip this prompt will result in the previous session\u0027s data\"","lastModifiedDate":"2021-11-04"},{"lineNumber":24,"author":{"gitId":"EdwardZYWang"},"content":"            + \"being deleted!\";","lastModifiedDate":"2021-11-04"},{"lineNumber":25,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":26,"author":{"gitId":"EdwardZYWang"},"content":"    public static final String INCORRECT_INPUT \u003d System.lineSeparator() + \"CLI.ckFit has detected a \"","lastModifiedDate":"2021-10-11"},{"lineNumber":27,"author":{"gitId":"EdwardZYWang"},"content":"            + \"wrong input, kindly check your inputs or type \\\"help commands\\\" for input examples.\";","lastModifiedDate":"2021-10-11"},{"lineNumber":28,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":29,"author":{"gitId":"EdwardZYWang"},"content":"    public static final String MEMORY_STARTUP_N_INPUT \u003d System.lineSeparator() + \"Understood! CLI.ckFit \"","lastModifiedDate":"2021-10-11"},{"lineNumber":30,"author":{"gitId":"EdwardZYWang"},"content":"            + \"wishes you all the best for the rest of the day\";","lastModifiedDate":"2021-10-11"},{"lineNumber":31,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":32,"author":{"gitId":"EdwardZYWang"},"content":"    public static final String MEMORY_STARTUP_Y_INPUT \u003d System.lineSeparator() + \"Understood! \"","lastModifiedDate":"2021-10-11"},{"lineNumber":33,"author":{"gitId":"EdwardZYWang"},"content":"            + \"CLI.ckFit is accessing your storage...\";","lastModifiedDate":"2021-10-11"},{"lineNumber":34,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":35,"author":{"gitId":"EdwardZYWang"},"content":"    public static final String MEMORY_STARTUP_INCORRECT_INPUT \u003d System.lineSeparator() + \"CLI.ckFit \"","lastModifiedDate":"2021-10-11"},{"lineNumber":36,"author":{"gitId":"EdwardZYWang"},"content":"            + \"has detected a wrong input, kindly type in either a \\\"Y\\\" or a \\\"N\\\".\";","lastModifiedDate":"2021-10-11"},{"lineNumber":37,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":38,"author":{"gitId":"EdwardZYWang"},"content":"    public static final String HELP_COMMANDS \u003d","lastModifiedDate":"2021-10-11"},{"lineNumber":39,"author":{"gitId":"EdwardZYWang"},"content":"            \"parameters encapsulated by angle brackets \\\"\u003c \u003e\\\" are optional\" + System.lineSeparator()","lastModifiedDate":"2021-10-28"},{"lineNumber":40,"author":{"gitId":"teoziyiivy"},"content":"                    + \"NOTE: You can only omit putting MEAL_CALORIES if you have saved the meal in your meal library.\"","lastModifiedDate":"2021-10-28"},{"lineNumber":41,"author":{"gitId":"EdwardZYWang"},"content":"                    + System.lineSeparator()","lastModifiedDate":"2021-10-28"},{"lineNumber":42,"author":{"gitId":"EdwardZYWang"},"content":"            + System.lineSeparator() + \"[Add meal] | add meal MEAL_NAME \u003c/c MEAL_CALORIES /d DATE /t TIME\u003e\"","lastModifiedDate":"2021-10-31"},{"lineNumber":43,"author":{"gitId":"EdwardZYWang"},"content":"            + System.lineSeparator() + \"[Add fluid] | add fluid FLUID_NAME \u003c/c FLUID_CALORIES \"","lastModifiedDate":"2021-10-31"},{"lineNumber":44,"author":{"gitId":"EdwardZYWang"},"content":"                    + \"/v VOLUME /d DATE /t TIME\u003e\"","lastModifiedDate":"2021-10-31"},{"lineNumber":45,"author":{"gitId":"EdwardZYWang"},"content":"            + System.lineSeparator() + \"[Add weight] | add weight WEIGHT /d \u003cDATE\u003e\"","lastModifiedDate":"2021-10-31"},{"lineNumber":46,"author":{"gitId":"EdwardZYWang"},"content":"            + System.lineSeparator() + \"[Add workout] | add workout WORKOUT_NAME /c \"","lastModifiedDate":"2021-10-31"},{"lineNumber":47,"author":{"gitId":"EdwardZYWang"},"content":"                    + \"CALORIES_BURNED \u003c/d DATE /t TIME\u003e\"","lastModifiedDate":"2021-10-31"},{"lineNumber":48,"author":{"gitId":"EdwardZYWang"},"content":"            + System.lineSeparator() + \"[Add scheduled workout] | add schedule WORKOUT_NAME /d \"","lastModifiedDate":"2021-10-31"},{"lineNumber":49,"author":{"gitId":"EdwardZYWang"},"content":"                    + \"DATE /t TIME \u003c/a ACTIVTY_NAME:ACTIVITY_QUANITIFER, ...\u003e \u003c/r\u003e\"","lastModifiedDate":"2021-10-31"},{"lineNumber":50,"author":{"gitId":"EdwardZYWang"},"content":"            + System.lineSeparator() + \"[Add meal to library] | library addmeal MEAL_NAME /c MEAL_CALORIES\"","lastModifiedDate":"2021-10-31"},{"lineNumber":51,"author":{"gitId":"EdwardZYWang"},"content":"            + System.lineSeparator() + \"[Add fluid to library] | library addfluid \"","lastModifiedDate":"2021-10-31"},{"lineNumber":52,"author":{"gitId":"EdwardZYWang"},"content":"                    + \"FLUID_NAME /c FLUID_CALORIES\"","lastModifiedDate":"2021-10-31"},{"lineNumber":53,"author":{"gitId":"EdwardZYWang"},"content":"                    + System.lineSeparator()","lastModifiedDate":"2021-10-28"},{"lineNumber":54,"author":{"gitId":"EdwardZYWang"},"content":"            + System.lineSeparator() + \"[Remove meal] | delete meal INDEX\"","lastModifiedDate":"2021-10-31"},{"lineNumber":55,"author":{"gitId":"EdwardZYWang"},"content":"            + System.lineSeparator() + \"[Remove fluid] | delete fluid INDEX\"","lastModifiedDate":"2021-10-31"},{"lineNumber":56,"author":{"gitId":"EdwardZYWang"},"content":"            + System.lineSeparator() + \"[Remove weight] | delete weight INDEX\"","lastModifiedDate":"2021-10-31"},{"lineNumber":57,"author":{"gitId":"EdwardZYWang"},"content":"            + System.lineSeparator() + \"[Remove workout] | delete workout INDEX\"","lastModifiedDate":"2021-10-31"},{"lineNumber":58,"author":{"gitId":"EdwardZYWang"},"content":"            + System.lineSeparator() + \"[Remove scheduled workout] | delete schedule INDEX\"","lastModifiedDate":"2021-10-31"},{"lineNumber":59,"author":{"gitId":"EdwardZYWang"},"content":"            + System.lineSeparator() + \"[Remove meal from library] | library deletemeal INDEX\"","lastModifiedDate":"2021-10-31"},{"lineNumber":60,"author":{"gitId":"EdwardZYWang"},"content":"            + System.lineSeparator() + \"[Remove fluid from library] | library deletefluid INDEX\"","lastModifiedDate":"2021-10-31"},{"lineNumber":61,"author":{"gitId":"EdwardZYWang"},"content":"                    + System.lineSeparator()","lastModifiedDate":"2021-10-28"},{"lineNumber":62,"author":{"gitId":"EdwardZYWang"},"content":"            + System.lineSeparator() + \"[List meals] | list meals \u003cDATE\u003e\"","lastModifiedDate":"2021-10-31"},{"lineNumber":63,"author":{"gitId":"EdwardZYWang"},"content":"            + System.lineSeparator() + \"[List fluids] | list fluids \u003cDATE\u003e\"","lastModifiedDate":"2021-10-31"},{"lineNumber":64,"author":{"gitId":"EdwardZYWang"},"content":"            + System.lineSeparator() + \"[List weights] | list weights \u003cDATE\u003e\"","lastModifiedDate":"2021-10-31"},{"lineNumber":65,"author":{"gitId":"EdwardZYWang"},"content":"            + System.lineSeparator() + \"[List workouts] | list workouts \u003cDATE\u003e\"","lastModifiedDate":"2021-10-31"},{"lineNumber":66,"author":{"gitId":"EdwardZYWang"},"content":"            + System.lineSeparator() + \"[List calories] | list calories \u003cDATE\u003e\"","lastModifiedDate":"2021-10-31"},{"lineNumber":67,"author":{"gitId":"EdwardZYWang"},"content":"            + System.lineSeparator() + \"[List volume] | list volumes \u003cDATE\u003e\"","lastModifiedDate":"2021-10-31"},{"lineNumber":68,"author":{"gitId":"EdwardZYWang"},"content":"            + System.lineSeparator() + \"[List scheduled workouts] | list schedule \u003cDATE\u003e\"","lastModifiedDate":"2021-10-31"},{"lineNumber":69,"author":{"gitId":"EdwardZYWang"},"content":"            + System.lineSeparator() + \"[List meals from library] | library listmeals\"","lastModifiedDate":"2021-10-31"},{"lineNumber":70,"author":{"gitId":"EdwardZYWang"},"content":"            + System.lineSeparator() + \"[List fluids from library] | library listfluids\"","lastModifiedDate":"2021-10-31"},{"lineNumber":71,"author":{"gitId":"EdwardZYWang"},"content":"                    + System.lineSeparator()","lastModifiedDate":"2021-10-28"},{"lineNumber":72,"author":{"gitId":"EdwardZYWang"},"content":"            + System.lineSeparator() + \"[Access user help] | help commands\"","lastModifiedDate":"2021-10-31"},{"lineNumber":73,"author":{"gitId":"EdwardZYWang"},"content":"            + System.lineSeparator() + \"[Access user guide] | help UG\"  + System.lineSeparator()","lastModifiedDate":"2021-10-31"},{"lineNumber":74,"author":{"gitId":"EdwardZYWang"},"content":"                    + System.lineSeparator() + \"Here is the link to our User Guide! \"","lastModifiedDate":"2021-10-28"},{"lineNumber":75,"author":{"gitId":"EdwardZYWang"},"content":"            + \"https://ay2122s1-cs2113t-f14-3.github.io/tp/UserGuide.html\";","lastModifiedDate":"2021-10-19"},{"lineNumber":76,"author":{"gitId":"VishalJeyaram"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":77,"author":{"gitId":"VishalJeyaram"},"content":"    public static final String DATE_ERROR \u003d \"Please enter your date in the right format. \"","lastModifiedDate":"2021-10-13"},{"lineNumber":78,"author":{"gitId":"VishalJeyaram"},"content":"            + \"It should be \\\"DD/MM/YYYY\\\"\";","lastModifiedDate":"2021-10-13"},{"lineNumber":79,"author":{"gitId":"VishalJeyaram"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":80,"author":{"gitId":"arvejw"},"content":"    public static final String DATE_TIME_ERROR \u003d \"Please enter your date and time in the right format. \"","lastModifiedDate":"2021-10-24"},{"lineNumber":81,"author":{"gitId":"arvejw"},"content":"            + \"It should be \\\"DD/MM/YYYY\\\" and \\\"HH:MM\\\" respectively.\";","lastModifiedDate":"2021-10-24"},{"lineNumber":82,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":83,"author":{"gitId":"teoziyiivy"},"content":"    public static final String NUMBER_ERROR \u003d \"Please enter a positive integer.\";","lastModifiedDate":"2021-10-28"},{"lineNumber":84,"author":{"gitId":"VishalJeyaram"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":85,"author":{"gitId":"pragyan01"},"content":"    public static final String FLUID_ADD_FORMAT_ERROR \u003d \"Please enter in the format: drank [fluid_name]\"","lastModifiedDate":"2021-10-16"},{"lineNumber":86,"author":{"gitId":"pragyan01"},"content":"            + \" /c [calorie_intake] \" + \"/v [volume] /d [dd/mm/yyyy] /t [hh:mm]\";","lastModifiedDate":"2021-10-16"},{"lineNumber":87,"author":{"gitId":"VishalJeyaram"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":88,"author":{"gitId":"EdwardZYWang"},"content":"    public static final String CALCULATOR_PROMPT \u003d System.lineSeparator() + \"Welcome! Would you \"","lastModifiedDate":"2021-10-31"},{"lineNumber":89,"author":{"gitId":"EdwardZYWang"},"content":"            + \"like to check your BMI and recommended caloric intake?\" + System.lineSeparator()","lastModifiedDate":"2021-10-17"},{"lineNumber":90,"author":{"gitId":"EdwardZYWang"},"content":"            + \"Key in y or press enter keystroke to skip!\";","lastModifiedDate":"2021-10-21"},{"lineNumber":91,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":92,"author":{"gitId":"teoziyiivy"},"content":"    public static final String MEAL_PRINT_FORMAT \u003d System.lineSeparator() + \"[Meal Summary:]\"","lastModifiedDate":"2021-10-28"},{"lineNumber":93,"author":{"gitId":"EdwardZYWang"},"content":"            + System.lineSeparator() + \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\";","lastModifiedDate":"2021-10-21"},{"lineNumber":94,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":95,"author":{"gitId":"teoziyiivy"},"content":"    public static final String FLUID_PRINT_FORMAT \u003d System.lineSeparator() + \"[Fluid Summary:]\"","lastModifiedDate":"2021-10-28"},{"lineNumber":96,"author":{"gitId":"EdwardZYWang"},"content":"            + System.lineSeparator() + \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\";","lastModifiedDate":"2021-10-21"},{"lineNumber":97,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":98,"author":{"gitId":"teoziyiivy"},"content":"    public static final String WORKOUT_PRINT_FORMAT \u003d System.lineSeparator() + \"[Workout Summary:]\"","lastModifiedDate":"2021-10-28"},{"lineNumber":99,"author":{"gitId":"EdwardZYWang"},"content":"            + System.lineSeparator() + \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\";","lastModifiedDate":"2021-10-21"},{"lineNumber":100,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":101,"author":{"gitId":"teoziyiivy"},"content":"    public static final String WEIGHT_PRINT_FORMAT \u003d System.lineSeparator() + \"[Weight Summary:]\"","lastModifiedDate":"2021-10-28"},{"lineNumber":102,"author":{"gitId":"teoziyiivy"},"content":"            + System.lineSeparator() + \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\";","lastModifiedDate":"2021-10-22"},{"lineNumber":103,"author":{"gitId":"teoziyiivy"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":104,"author":{"gitId":"EdwardZYWang"},"content":"    public static final String ENDLINE_PRINT_FORMAT \u003d \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\";","lastModifiedDate":"2021-10-21"},{"lineNumber":105,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":106,"author":{"gitId":"arvejw"},"content":"    public static final String SCHEDULE_DATA_NOT_FOUND \u003d \"Unable to locate ScheduleTracker data file.\";","lastModifiedDate":"2021-10-22"},{"lineNumber":107,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":108,"author":{"gitId":"arvejw"},"content":"    public static final String INCORRECT_LOADING_SCHEDULE_DATA \u003d","lastModifiedDate":"2021-10-22"},{"lineNumber":109,"author":{"gitId":"teoziyiivy"},"content":"            \"There were some errors during loading of ScheduleTracker data, some data may have been lost.\";","lastModifiedDate":"2021-10-28"},{"lineNumber":110,"author":{"gitId":"VishalJeyaram"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":111,"author":{"gitId":"VishalJeyaram"},"content":"    public static final String IO_EXCEPTION_MESSAGE \u003d \"Error when loading data from files\";","lastModifiedDate":"2021-10-24"},{"lineNumber":112,"author":{"gitId":"VishalJeyaram"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":113,"author":{"gitId":"VishalJeyaram"},"content":"    public static final String FOOD_BANK_EXCEPTION_MESSAGE \u003d \"No such food or fluid with \"","lastModifiedDate":"2021-10-24"},{"lineNumber":114,"author":{"gitId":"VishalJeyaram"},"content":"            + \"its associated calories is stored \"","lastModifiedDate":"2021-10-24"},{"lineNumber":115,"author":{"gitId":"teoziyiivy"},"content":"            + \"within your library.\";","lastModifiedDate":"2021-10-28"},{"lineNumber":116,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":117,"author":{"gitId":"arvejw"},"content":"    public static final String DELETE_OR_UPDATE_SCHEDULE_MESSAGE \u003d \"CLI.ckFit has detected some overdue scheduled \"","lastModifiedDate":"2021-10-24"},{"lineNumber":118,"author":{"gitId":"arvejw"},"content":"            + \"workouts and has deleted/rescheduled them!\";","lastModifiedDate":"2021-10-24"},{"lineNumber":119,"author":{"gitId":"teoziyiivy"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":120,"author":{"gitId":"teoziyiivy"},"content":"    public static final String WEIGHT_ADD_FORMAT_ERROR \u003d \"CLI.ckFit encountered a problem adding your weight.\"","lastModifiedDate":"2021-10-25"},{"lineNumber":121,"author":{"gitId":"VishalJeyaram"},"content":"            + System.lineSeparator() + \"Please follow the format: add weight WEIGHT_IN_KG \u003c/d DD/MM/YYYY\u003e\";","lastModifiedDate":"2021-10-28"},{"lineNumber":122,"author":{"gitId":"teoziyiivy"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":123,"author":{"gitId":"teoziyiivy"},"content":"    public static final String WEIGHT_DELETE_FORMAT_ERROR \u003d \"CLI.ckFit encountered a problem deleting your weight.\"","lastModifiedDate":"2021-10-25"},{"lineNumber":124,"author":{"gitId":"VishalJeyaram"},"content":"            + System.lineSeparator() + \"Please follow the format: delete weight INDEX\";","lastModifiedDate":"2021-10-28"},{"lineNumber":125,"author":{"gitId":"teoziyiivy"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":126,"author":{"gitId":"teoziyiivy"},"content":"    public static final String WEIGHT_DELETE_INDEX_ERROR \u003d \"CLI.ckFit encountered a problem deleting your weight.\"","lastModifiedDate":"2021-10-25"},{"lineNumber":127,"author":{"gitId":"teoziyiivy"},"content":"            + System.lineSeparator() + \"Please ensure the index is within the list.\";","lastModifiedDate":"2021-10-25"},{"lineNumber":128,"author":{"gitId":"teoziyiivy"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":129,"author":{"gitId":"teoziyiivy"},"content":"    public static final String WEIGHT_EMPTY_ERROR \u003d \"Your weight list is empty!\";","lastModifiedDate":"2021-10-28"},{"lineNumber":130,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":131,"author":{"gitId":"teoziyiivy"},"content":"    public static final String EMPTY_SCHEDULE_LIST_MESSAGE \u003d \"Your workout schedule is empty!\";","lastModifiedDate":"2021-10-28"},{"lineNumber":132,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":133,"author":{"gitId":"teoziyiivy"},"content":"    public static final String EMPTY_WORKOUT_LIST_MESSAGE \u003d \"Your workout list is empty!\";","lastModifiedDate":"2021-10-28"},{"lineNumber":134,"author":{"gitId":"teoziyiivy"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":135,"author":{"gitId":"teoziyiivy"},"content":"    public static final String WEIGHT_PARAMETERS_ERROR \u003d \"CLI.ckFit could not generate your parameters.\";","lastModifiedDate":"2021-10-26"},{"lineNumber":136,"author":{"gitId":"pragyan01"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":137,"author":{"gitId":"teoziyiivy"},"content":"    public static final String DONT_UNDERSTAND \u003d \"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means\";","lastModifiedDate":"2021-10-28"},{"lineNumber":138,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":139,"author":{"gitId":"arvejw"},"content":"    public static final String EMPTY_WORKOUT_LIST_TODAY_MESSAGE \u003d \"No workouts recorded for today!\";","lastModifiedDate":"2021-11-03"},{"lineNumber":140,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":141,"author":{"gitId":"arvejw"},"content":"    public static final String EMPTY_SCHEDULE_LIST_TODAY_MESSAGE \u003d \"No workouts scheduled for today!\";","lastModifiedDate":"2021-11-03"},{"lineNumber":142,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":143,"author":{"gitId":"arvejw"},"content":"    public static final String WORKOUT_SCHEDULE_TODAY_MESSAGE \u003d \"Today\u0027s workout schedule:\" + System.lineSeparator()","lastModifiedDate":"2021-11-03"},{"lineNumber":144,"author":{"gitId":"arvejw"},"content":"            + Ui.HORIZONTAL_BAR_SHORT;","lastModifiedDate":"2021-11-03"},{"lineNumber":145,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":146,"author":{"gitId":"arvejw"},"content":"    public static final String FULL_SCHEDULE_LIST_MESSAGE \u003d \"Full Workout Schedule:\" + System.lineSeparator()","lastModifiedDate":"2021-11-03"},{"lineNumber":147,"author":{"gitId":"arvejw"},"content":"            + Ui.HORIZONTAL_BAR_SHORT;","lastModifiedDate":"2021-11-06"},{"lineNumber":148,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":149,"author":{"gitId":"arvejw"},"content":"    public static final String FULL_WORKOUT_LIST_MESSAGE \u003d \"All recorded workouts:\" + System.lineSeparator()","lastModifiedDate":"2021-11-03"},{"lineNumber":150,"author":{"gitId":"arvejw"},"content":"            + Ui.HORIZONTAL_BAR_SHORT;","lastModifiedDate":"2021-11-03"},{"lineNumber":151,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":152,"author":{"gitId":"arvejw"},"content":"    public static final String WORKOUTS_RECORDED_TODAY_MESSAGE \u003d \"Workouts recorded today:\"","lastModifiedDate":"2021-11-03"},{"lineNumber":153,"author":{"gitId":"arvejw"},"content":"            + System.lineSeparator() + Ui.HORIZONTAL_BAR_SHORT;","lastModifiedDate":"2021-11-03"},{"lineNumber":154,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":155,"author":{"gitId":"arvejw"},"content":"    public static final String UNKNOWN_ERROR_MESSAGE \u003d \"Unknown error detected, please contact the devs of CLI.ckFit\";","lastModifiedDate":"2021-11-04"},{"lineNumber":156,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":157,"author":{"gitId":"arvejw"},"content":"    public static String getScheduledWorkoutCountMessage(int workoutCount) {","lastModifiedDate":"2021-11-03"},{"lineNumber":158,"author":{"gitId":"arvejw"},"content":"        return \"You have \" + workoutCount + \" scheduled workouts on that day!\";","lastModifiedDate":"2021-11-03"},{"lineNumber":159,"author":{"gitId":"arvejw"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":160,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":161,"author":{"gitId":"arvejw"},"content":"    public static String getWorkoutScheduleOnDateMessage(String date) {","lastModifiedDate":"2021-11-03"},{"lineNumber":162,"author":{"gitId":"arvejw"},"content":"        return \"Workout schedule on \" + date + \":\" + System.lineSeparator()","lastModifiedDate":"2021-11-03"},{"lineNumber":163,"author":{"gitId":"arvejw"},"content":"                + Ui.HORIZONTAL_BAR_SHORT;","lastModifiedDate":"2021-11-03"},{"lineNumber":164,"author":{"gitId":"arvejw"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":165,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":166,"author":{"gitId":"arvejw"},"content":"    public static String getEmptyScheduleOnDateMessage(String date) {","lastModifiedDate":"2021-11-03"},{"lineNumber":167,"author":{"gitId":"arvejw"},"content":"        return \"Workout schedule is empty on the date: \" + date;","lastModifiedDate":"2021-11-03"},{"lineNumber":168,"author":{"gitId":"arvejw"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":169,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":170,"author":{"gitId":"arvejw"},"content":"    public static String getAddScheduleSuccessMessage(ScheduledWorkout workoutToAdd) {","lastModifiedDate":"2021-11-03"},{"lineNumber":171,"author":{"gitId":"arvejw"},"content":"        return \"Noted! CLI.ckFit has scheduled your \" + workoutToAdd.isRecurringStatusAsText()","lastModifiedDate":"2021-11-03"},{"lineNumber":172,"author":{"gitId":"arvejw"},"content":"                + \"workout of description \\\"\" + workoutToAdd.getWorkoutDescription() + \"\\\" on \"","lastModifiedDate":"2021-11-03"},{"lineNumber":173,"author":{"gitId":"arvejw"},"content":"                + workoutToAdd.getWorkoutDate() + \" at \" + workoutToAdd.getWorkoutTime() + \".\";","lastModifiedDate":"2021-11-03"},{"lineNumber":174,"author":{"gitId":"arvejw"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":175,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":176,"author":{"gitId":"arvejw"},"content":"    public static String getDeleteScheduleSuccessMessage(ScheduledWorkout workoutToDelete) {","lastModifiedDate":"2021-11-03"},{"lineNumber":177,"author":{"gitId":"arvejw"},"content":"        return \"Noted! CLI.ckFit has successfully deleted your \"","lastModifiedDate":"2021-11-03"},{"lineNumber":178,"author":{"gitId":"arvejw"},"content":"                + workoutToDelete.isRecurringStatusAsText() + \"scheduled workout of description \\\"\"","lastModifiedDate":"2021-11-03"},{"lineNumber":179,"author":{"gitId":"arvejw"},"content":"                + workoutToDelete.getWorkoutDescription() + \"\\\" on \" + workoutToDelete.getWorkoutDate()","lastModifiedDate":"2021-11-03"},{"lineNumber":180,"author":{"gitId":"arvejw"},"content":"                + \" at \" + workoutToDelete.getWorkoutTime() + \"!\";","lastModifiedDate":"2021-11-03"},{"lineNumber":181,"author":{"gitId":"arvejw"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":182,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":183,"author":{"gitId":"arvejw"},"content":"    public static String getAddWorkoutSuccessMessage(String workoutDescription, String workoutDate,","lastModifiedDate":"2021-11-03"},{"lineNumber":184,"author":{"gitId":"arvejw"},"content":"                                                     String workoutTime, int caloriesBurned) {","lastModifiedDate":"2021-11-03"},{"lineNumber":185,"author":{"gitId":"arvejw"},"content":"        return \"Noted! CLI.ckFit has recorded your workout of description \\\"\" + workoutDescription","lastModifiedDate":"2021-11-03"},{"lineNumber":186,"author":{"gitId":"arvejw"},"content":"                + \"\\\" on \" + workoutDate + \" at \" + workoutTime + \" where you burned \"","lastModifiedDate":"2021-11-03"},{"lineNumber":187,"author":{"gitId":"arvejw"},"content":"                + caloriesBurned + \" calories!\";","lastModifiedDate":"2021-11-03"},{"lineNumber":188,"author":{"gitId":"arvejw"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":189,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":190,"author":{"gitId":"arvejw"},"content":"    public static String getDeleteWorkoutSuccessMessage(String workoutDescription, String workoutDate,","lastModifiedDate":"2021-11-03"},{"lineNumber":191,"author":{"gitId":"arvejw"},"content":"                                                        String workoutTime, int caloriesBurned) {","lastModifiedDate":"2021-11-03"},{"lineNumber":192,"author":{"gitId":"arvejw"},"content":"        return \"Noted! CLI.ckFit has successfully deleted your recorded workout of description \\\"\"","lastModifiedDate":"2021-11-03"},{"lineNumber":193,"author":{"gitId":"arvejw"},"content":"                + workoutDescription + \"\\\" on \" + workoutDate + \" at \" + workoutTime + System.lineSeparator()","lastModifiedDate":"2021-11-03"},{"lineNumber":194,"author":{"gitId":"arvejw"},"content":"                + \" where you burned \" + caloriesBurned + \" calories!\";","lastModifiedDate":"2021-11-03"},{"lineNumber":195,"author":{"gitId":"arvejw"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":196,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":197,"author":{"gitId":"arvejw"},"content":"    public static String getEmptyWorkoutListOnDateMessage(String date) {","lastModifiedDate":"2021-11-03"},{"lineNumber":198,"author":{"gitId":"arvejw"},"content":"        return \"No workouts recorded on the date: \" + date;","lastModifiedDate":"2021-11-03"},{"lineNumber":199,"author":{"gitId":"arvejw"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":200,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":201,"author":{"gitId":"arvejw"},"content":"    public static String getWorkoutsOnDateMessage(String date) {","lastModifiedDate":"2021-11-03"},{"lineNumber":202,"author":{"gitId":"arvejw"},"content":"        return \"Workouts recorded on \" + date + \":\"","lastModifiedDate":"2021-11-03"},{"lineNumber":203,"author":{"gitId":"arvejw"},"content":"                + System.lineSeparator() + Ui.HORIZONTAL_BAR_SHORT;","lastModifiedDate":"2021-11-03"},{"lineNumber":204,"author":{"gitId":"arvejw"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":205,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":206,"author":{"gitId":"arvejw"},"content":"    public static String getTotalScheduledWorkoutMessage(int scheduleCount) {","lastModifiedDate":"2021-11-03"},{"lineNumber":207,"author":{"gitId":"arvejw"},"content":"        return \"You have a total of \" + scheduleCount + \" workouts in your schedule.\";","lastModifiedDate":"2021-11-03"},{"lineNumber":208,"author":{"gitId":"arvejw"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":209,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":210,"author":{"gitId":"arvejw"},"content":"    public static String getTotalCaloriesBurnedMessage(int caloriesBurned) {","lastModifiedDate":"2021-11-03"},{"lineNumber":211,"author":{"gitId":"arvejw"},"content":"        return \"Total calories burned: \" + caloriesBurned;","lastModifiedDate":"2021-11-03"},{"lineNumber":212,"author":{"gitId":"arvejw"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":213,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":214,"author":{"gitId":"arvejw"},"content":"    public static String getTotalWorkoutsDoneMessage(int totalWorkouts) {","lastModifiedDate":"2021-11-03"},{"lineNumber":215,"author":{"gitId":"arvejw"},"content":"        return \"You have completed a total of \" + totalWorkouts + \" workouts. Amazing job!\";","lastModifiedDate":"2021-11-03"},{"lineNumber":216,"author":{"gitId":"arvejw"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":217,"author":{"gitId":"EdwardZYWang"},"content":"}","lastModifiedDate":"2021-10-11"}],"authorContributionMap":{"pragyan01":3,"teoziyiivy":24,"VishalJeyaram":16,"arvejw":93,"EdwardZYWang":81}},{"path":"src/main/java/seedu/duke/CommandManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"EdwardZYWang"},"content":"package seedu.duke;","lastModifiedDate":"2021-10-07"},{"lineNumber":2,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":3,"author":{"gitId":"VishalJeyaram"},"content":"import seedu.duke.exceptions.DukeException;","lastModifiedDate":"2021-10-24"},{"lineNumber":4,"author":{"gitId":"EdwardZYWang"},"content":"import seedu.duke.exceptions.fluid.FluidExceptions;","lastModifiedDate":"2021-10-28"},{"lineNumber":5,"author":{"gitId":"EdwardZYWang"},"content":"import seedu.duke.exceptions.foodbank.FoodBankException;","lastModifiedDate":"2021-11-06"},{"lineNumber":6,"author":{"gitId":"EdwardZYWang"},"content":"import seedu.duke.exceptions.meal.MealException;","lastModifiedDate":"2021-10-28"},{"lineNumber":7,"author":{"gitId":"VishalJeyaram"},"content":"import seedu.duke.exceptions.meal.NoDeleteMealIndexException;","lastModifiedDate":"2021-10-28"},{"lineNumber":8,"author":{"gitId":"VishalJeyaram"},"content":"import seedu.duke.exceptions.meal.NoMealDetailsException;","lastModifiedDate":"2021-10-28"},{"lineNumber":9,"author":{"gitId":"arvejw"},"content":"import seedu.duke.exceptions.schedule.ScheduleException;","lastModifiedDate":"2021-10-24"},{"lineNumber":10,"author":{"gitId":"teoziyiivy"},"content":"import seedu.duke.exceptions.weight.DeleteWeightException;","lastModifiedDate":"2021-10-26"},{"lineNumber":11,"author":{"gitId":"EdwardZYWang"},"content":"import seedu.duke.exceptions.weight.WeightException;","lastModifiedDate":"2021-11-06"},{"lineNumber":12,"author":{"gitId":"EdwardZYWang"},"content":"import seedu.duke.exceptions.workout.WorkoutException;","lastModifiedDate":"2021-10-27"},{"lineNumber":13,"author":{"gitId":"EdwardZYWang"},"content":"import seedu.duke.schedule.ScheduleTracker;","lastModifiedDate":"2021-10-27"},{"lineNumber":14,"author":{"gitId":"teoziyiivy"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":15,"author":{"gitId":"VishalJeyaram"},"content":"import java.io.IOException;","lastModifiedDate":"2021-10-18"},{"lineNumber":16,"author":{"gitId":"arvejw"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-10-25"},{"lineNumber":17,"author":{"gitId":"arvejw"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-10-25"},{"lineNumber":18,"author":{"gitId":"EdwardZYWang"},"content":"import java.util.Objects;","lastModifiedDate":"2021-10-14"},{"lineNumber":19,"author":{"gitId":"EdwardZYWang"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-10-07"},{"lineNumber":20,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":21,"author":{"gitId":"EdwardZYWang"},"content":"//@@author EdwardZYWang","lastModifiedDate":"2021-11-03"},{"lineNumber":22,"author":{"gitId":"EdwardZYWang"},"content":"public class CommandManager {","lastModifiedDate":"2021-10-07"},{"lineNumber":23,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":24,"author":{"gitId":"EdwardZYWang"},"content":"    protected ScheduleTracker scheduleTracker;","lastModifiedDate":"2021-10-11"},{"lineNumber":25,"author":{"gitId":"EdwardZYWang"},"content":"    protected WorkoutTracker workoutTracker;","lastModifiedDate":"2021-10-11"},{"lineNumber":26,"author":{"gitId":"EdwardZYWang"},"content":"    protected Meal meal;","lastModifiedDate":"2021-10-07"},{"lineNumber":27,"author":{"gitId":"EdwardZYWang"},"content":"    protected Fluid fluid;","lastModifiedDate":"2021-10-07"},{"lineNumber":28,"author":{"gitId":"EdwardZYWang"},"content":"    protected WeightTracker weightTracker;","lastModifiedDate":"2021-10-07"},{"lineNumber":29,"author":{"gitId":"EdwardZYWang"},"content":"    protected UserHelp userHelp;","lastModifiedDate":"2021-10-11"},{"lineNumber":30,"author":{"gitId":"EdwardZYWang"},"content":"    protected Scanner scanner;","lastModifiedDate":"2021-10-11"},{"lineNumber":31,"author":{"gitId":"EdwardZYWang"},"content":"    protected boolean isExit;","lastModifiedDate":"2021-10-11"},{"lineNumber":32,"author":{"gitId":"EdwardZYWang"},"content":"    protected String command;","lastModifiedDate":"2021-10-11"},{"lineNumber":33,"author":{"gitId":"EdwardZYWang"},"content":"    protected String inputArguments;","lastModifiedDate":"2021-10-11"},{"lineNumber":34,"author":{"gitId":"EdwardZYWang"},"content":"    protected Storage storage;","lastModifiedDate":"2021-10-18"},{"lineNumber":35,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":36,"author":{"gitId":"EdwardZYWang"},"content":"    public CommandManager(Storage storage, Fluid fluid, Meal meal,","lastModifiedDate":"2021-10-20"},{"lineNumber":37,"author":{"gitId":"EdwardZYWang"},"content":"                          ScheduleTracker scheduleTracker, WorkoutTracker workoutTracker,","lastModifiedDate":"2021-10-20"},{"lineNumber":38,"author":{"gitId":"EdwardZYWang"},"content":"                          WeightTracker weightTracker, UserHelp userHelp) {","lastModifiedDate":"2021-10-11"},{"lineNumber":39,"author":{"gitId":"EdwardZYWang"},"content":"        this.fluid \u003d fluid;","lastModifiedDate":"2021-10-07"},{"lineNumber":40,"author":{"gitId":"EdwardZYWang"},"content":"        this.meal \u003d meal;","lastModifiedDate":"2021-10-07"},{"lineNumber":41,"author":{"gitId":"EdwardZYWang"},"content":"        this.scheduleTracker \u003d scheduleTracker;","lastModifiedDate":"2021-10-11"},{"lineNumber":42,"author":{"gitId":"EdwardZYWang"},"content":"        this.workoutTracker \u003d workoutTracker;","lastModifiedDate":"2021-10-11"},{"lineNumber":43,"author":{"gitId":"EdwardZYWang"},"content":"        this.scanner \u003d new Scanner(System.in);","lastModifiedDate":"2021-10-11"},{"lineNumber":44,"author":{"gitId":"EdwardZYWang"},"content":"        this.weightTracker \u003d weightTracker;","lastModifiedDate":"2021-10-07"},{"lineNumber":45,"author":{"gitId":"EdwardZYWang"},"content":"        this.userHelp \u003d userHelp;","lastModifiedDate":"2021-10-11"},{"lineNumber":46,"author":{"gitId":"EdwardZYWang"},"content":"        this.isExit \u003d false;","lastModifiedDate":"2021-10-11"},{"lineNumber":47,"author":{"gitId":"EdwardZYWang"},"content":"        this.storage \u003d storage;","lastModifiedDate":"2021-10-18"},{"lineNumber":48,"author":{"gitId":"EdwardZYWang"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":49,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":50,"author":{"gitId":"EdwardZYWang"},"content":"    /**","lastModifiedDate":"2021-11-06"},{"lineNumber":51,"author":{"gitId":"EdwardZYWang"},"content":"     * A method that makes sense of the user\u0027s inputs. The input is taken in, then split using splitResults.","lastModifiedDate":"2021-11-06"},{"lineNumber":52,"author":{"gitId":"EdwardZYWang"},"content":"     * splitResults[0] is used to identify the command word of the user\u0027s input. splitResult[1] is the","lastModifiedDate":"2021-11-06"},{"lineNumber":53,"author":{"gitId":"EdwardZYWang"},"content":"     * rest of the command. splitResult[1] saved as inputArguments after checking if it is not an empty","lastModifiedDate":"2021-11-06"},{"lineNumber":54,"author":{"gitId":"EdwardZYWang"},"content":"     * command. inputArgument is then passed on to the other methods through switch cases.","lastModifiedDate":"2021-11-06"},{"lineNumber":55,"author":{"gitId":"EdwardZYWang"},"content":"     *","lastModifiedDate":"2021-11-06"},{"lineNumber":56,"author":{"gitId":"EdwardZYWang"},"content":"     *","lastModifiedDate":"2021-11-06"},{"lineNumber":57,"author":{"gitId":"EdwardZYWang"},"content":"     * @throws DukeException if there is an Duke error","lastModifiedDate":"2021-11-06"},{"lineNumber":58,"author":{"gitId":"EdwardZYWang"},"content":"     * @throws NullPointerException when an application attempts to use null in a case where an object is required","lastModifiedDate":"2021-11-06"},{"lineNumber":59,"author":{"gitId":"EdwardZYWang"},"content":"     * @throws MealException when there is an unknown error has occurred in MealTracker","lastModifiedDate":"2021-11-06"},{"lineNumber":60,"author":{"gitId":"EdwardZYWang"},"content":"     * @throws FluidExceptions when there is an unknown error has occurred in FluidTracker","lastModifiedDate":"2021-11-06"},{"lineNumber":61,"author":{"gitId":"EdwardZYWang"},"content":"     * @throws FoodBankException when there is an unknown error has occurred","lastModifiedDate":"2021-11-06"},{"lineNumber":62,"author":{"gitId":"EdwardZYWang"},"content":"     * @throws IOException when there is an input error","lastModifiedDate":"2021-11-06"},{"lineNumber":63,"author":{"gitId":"EdwardZYWang"},"content":"     * @throws ScheduleException when an unknown error has occurred in ScheduleTracker","lastModifiedDate":"2021-11-06"},{"lineNumber":64,"author":{"gitId":"EdwardZYWang"},"content":"     * @throws WeightException when an unknown error has occurred in Weight Tracker","lastModifiedDate":"2021-11-06"},{"lineNumber":65,"author":{"gitId":"EdwardZYWang"},"content":"     * @throws WorkoutException when an unknown error has occurred in WorkoutTracker","lastModifiedDate":"2021-11-06"},{"lineNumber":66,"author":{"gitId":"EdwardZYWang"},"content":"     */","lastModifiedDate":"2021-11-06"},{"lineNumber":67,"author":{"gitId":"EdwardZYWang"},"content":"    public void commandChecker() throws","lastModifiedDate":"2021-10-25"},{"lineNumber":68,"author":{"gitId":"EdwardZYWang"},"content":"            DukeException, NullPointerException,","lastModifiedDate":"2021-10-25"},{"lineNumber":69,"author":{"gitId":"EdwardZYWang"},"content":"            MealException, FluidExceptions,","lastModifiedDate":"2021-10-20"},{"lineNumber":70,"author":{"gitId":"EdwardZYWang"},"content":"            FoodBankException, IOException,","lastModifiedDate":"2021-10-24"},{"lineNumber":71,"author":{"gitId":"EdwardZYWang"},"content":"            ScheduleException, WeightException,","lastModifiedDate":"2021-10-28"},{"lineNumber":72,"author":{"gitId":"EdwardZYWang"},"content":"            WorkoutException {","lastModifiedDate":"2021-10-28"},{"lineNumber":73,"author":{"gitId":"EdwardZYWang"},"content":"        String input \u003d scanner.nextLine();","lastModifiedDate":"2021-10-11"},{"lineNumber":74,"author":{"gitId":"EdwardZYWang"},"content":"        System.out.println(Ui.HORIZONTAL_BAR_LONG + System.lineSeparator());","lastModifiedDate":"2021-11-03"},{"lineNumber":75,"author":{"gitId":"EdwardZYWang"},"content":"        String[] splitResults \u003d input.trim().split(\" \", 2);","lastModifiedDate":"2021-10-11"},{"lineNumber":76,"author":{"gitId":"EdwardZYWang"},"content":"        command \u003d splitResults[0];","lastModifiedDate":"2021-10-11"},{"lineNumber":77,"author":{"gitId":"EdwardZYWang"},"content":"        inputArguments \u003d (splitResults.length \u003d\u003d 2) ? splitResults[1] : null;","lastModifiedDate":"2021-10-11"},{"lineNumber":78,"author":{"gitId":"EdwardZYWang"},"content":"        assert !Objects.equals(inputArguments, \"\");","lastModifiedDate":"2021-10-14"},{"lineNumber":79,"author":{"gitId":"EdwardZYWang"},"content":"        switch (command) {","lastModifiedDate":"2021-10-11"},{"lineNumber":80,"author":{"gitId":"EdwardZYWang"},"content":"        case Keywords.LIST:","lastModifiedDate":"2021-10-21"},{"lineNumber":81,"author":{"gitId":"EdwardZYWang"},"content":"            if (inputArguments \u003d\u003d null) {","lastModifiedDate":"2021-10-24"},{"lineNumber":82,"author":{"gitId":"EdwardZYWang"},"content":"                listEverything(Parser.getSystemDate());","lastModifiedDate":"2021-10-21"},{"lineNumber":83,"author":{"gitId":"EdwardZYWang"},"content":"            } else {","lastModifiedDate":"2021-10-21"},{"lineNumber":84,"author":{"gitId":"EdwardZYWang"},"content":"                listParser(inputArguments);","lastModifiedDate":"2021-10-21"},{"lineNumber":85,"author":{"gitId":"EdwardZYWang"},"content":"            }","lastModifiedDate":"2021-10-21"},{"lineNumber":86,"author":{"gitId":"EdwardZYWang"},"content":"            break;","lastModifiedDate":"2021-10-21"},{"lineNumber":87,"author":{"gitId":"EdwardZYWang"},"content":"        case Keywords.LIBRARY:","lastModifiedDate":"2021-10-18"},{"lineNumber":88,"author":{"gitId":"EdwardZYWang"},"content":"            assert inputArguments !\u003d null;","lastModifiedDate":"2021-10-18"},{"lineNumber":89,"author":{"gitId":"EdwardZYWang"},"content":"            foodBankParser(inputArguments);","lastModifiedDate":"2021-10-18"},{"lineNumber":90,"author":{"gitId":"EdwardZYWang"},"content":"            break;","lastModifiedDate":"2021-10-18"},{"lineNumber":91,"author":{"gitId":"EdwardZYWang"},"content":"        case Keywords.ADD:","lastModifiedDate":"2021-10-24"},{"lineNumber":92,"author":{"gitId":"EdwardZYWang"},"content":"            assert inputArguments !\u003d null;","lastModifiedDate":"2021-10-24"},{"lineNumber":93,"author":{"gitId":"EdwardZYWang"},"content":"            addParser(inputArguments);","lastModifiedDate":"2021-10-24"},{"lineNumber":94,"author":{"gitId":"EdwardZYWang"},"content":"            break;","lastModifiedDate":"2021-10-11"},{"lineNumber":95,"author":{"gitId":"EdwardZYWang"},"content":"        case Keywords.DELETE:","lastModifiedDate":"2021-10-24"},{"lineNumber":96,"author":{"gitId":"EdwardZYWang"},"content":"            assert inputArguments !\u003d null;","lastModifiedDate":"2021-10-24"},{"lineNumber":97,"author":{"gitId":"EdwardZYWang"},"content":"            deleteParser(inputArguments);","lastModifiedDate":"2021-10-24"},{"lineNumber":98,"author":{"gitId":"EdwardZYWang"},"content":"            break;","lastModifiedDate":"2021-10-11"},{"lineNumber":99,"author":{"gitId":"EdwardZYWang"},"content":"        case Keywords.INPUT_HELP:","lastModifiedDate":"2021-10-11"},{"lineNumber":100,"author":{"gitId":"EdwardZYWang"},"content":"            UserHelp.generateUserHelpParameters(inputArguments);","lastModifiedDate":"2021-10-11"},{"lineNumber":101,"author":{"gitId":"EdwardZYWang"},"content":"            break;","lastModifiedDate":"2021-10-11"},{"lineNumber":102,"author":{"gitId":"EdwardZYWang"},"content":"        case Keywords.INPUT_BYE:","lastModifiedDate":"2021-10-11"},{"lineNumber":103,"author":{"gitId":"EdwardZYWang"},"content":"            isExit \u003d true;","lastModifiedDate":"2021-10-11"},{"lineNumber":104,"author":{"gitId":"EdwardZYWang"},"content":"            System.out.println(ClickfitMessages.CREDITS);","lastModifiedDate":"2021-10-15"},{"lineNumber":105,"author":{"gitId":"EdwardZYWang"},"content":"            break;","lastModifiedDate":"2021-10-11"},{"lineNumber":106,"author":{"gitId":"EdwardZYWang"},"content":"        default:","lastModifiedDate":"2021-10-11"},{"lineNumber":107,"author":{"gitId":"EdwardZYWang"},"content":"            System.out.println(ClickfitMessages.DONT_UNDERSTAND);","lastModifiedDate":"2021-10-28"},{"lineNumber":108,"author":{"gitId":"EdwardZYWang"},"content":"            break;","lastModifiedDate":"2021-10-11"},{"lineNumber":109,"author":{"gitId":"EdwardZYWang"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":110,"author":{"gitId":"EdwardZYWang"},"content":"        saveEverything();","lastModifiedDate":"2021-10-24"},{"lineNumber":111,"author":{"gitId":"EdwardZYWang"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":112,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":113,"author":{"gitId":"EdwardZYWang"},"content":"    /**","lastModifiedDate":"2021-11-06"},{"lineNumber":114,"author":{"gitId":"EdwardZYWang"},"content":"     * Calls other methods to save the user\u0027s inputs into the respective text files","lastModifiedDate":"2021-11-06"},{"lineNumber":115,"author":{"gitId":"EdwardZYWang"},"content":"     * so that future sessions can start from where they ended.","lastModifiedDate":"2021-11-06"},{"lineNumber":116,"author":{"gitId":"EdwardZYWang"},"content":"     *","lastModifiedDate":"2021-11-06"},{"lineNumber":117,"author":{"gitId":"EdwardZYWang"},"content":"     * @throws IOException when there is an input error","lastModifiedDate":"2021-11-06"},{"lineNumber":118,"author":{"gitId":"EdwardZYWang"},"content":"     */","lastModifiedDate":"2021-11-06"},{"lineNumber":119,"author":{"gitId":"EdwardZYWang"},"content":"    public void saveEverything() throws IOException {","lastModifiedDate":"2021-10-25"},{"lineNumber":120,"author":{"gitId":"EdwardZYWang"},"content":"        storage.saveFood(fluid, meal);","lastModifiedDate":"2021-10-21"},{"lineNumber":121,"author":{"gitId":"EdwardZYWang"},"content":"        storage.saveLibrary();","lastModifiedDate":"2021-10-21"},{"lineNumber":122,"author":{"gitId":"EdwardZYWang"},"content":"        storage.saveWeight(weightTracker);","lastModifiedDate":"2021-10-22"},{"lineNumber":123,"author":{"gitId":"EdwardZYWang"},"content":"        storage.saveSchedule(scheduleTracker);","lastModifiedDate":"2021-10-27"},{"lineNumber":124,"author":{"gitId":"EdwardZYWang"},"content":"        storage.saveWorkout(workoutTracker);","lastModifiedDate":"2021-10-27"},{"lineNumber":125,"author":{"gitId":"EdwardZYWang"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":126,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":127,"author":{"gitId":"EdwardZYWang"},"content":"    /**","lastModifiedDate":"2021-11-06"},{"lineNumber":128,"author":{"gitId":"EdwardZYWang"},"content":"     * A method that makes sense of the user\u0027s inputs for food bank class. The input is taken in, then split","lastModifiedDate":"2021-11-06"},{"lineNumber":129,"author":{"gitId":"EdwardZYWang"},"content":"     * using splitResults. splitResults[0] is used to identify the command word of the user\u0027s input.","lastModifiedDate":"2021-11-06"},{"lineNumber":130,"author":{"gitId":"EdwardZYWang"},"content":"     * splitResult[1] is the rest of the command. splitResult[1] saved as inputArguments after","lastModifiedDate":"2021-11-06"},{"lineNumber":131,"author":{"gitId":"EdwardZYWang"},"content":"     * checking if it is not an empty command. inputArguments is then passed on to the other methods","lastModifiedDate":"2021-11-06"},{"lineNumber":132,"author":{"gitId":"EdwardZYWang"},"content":"     * through switch cases.","lastModifiedDate":"2021-11-06"},{"lineNumber":133,"author":{"gitId":"EdwardZYWang"},"content":"     *","lastModifiedDate":"2021-11-06"},{"lineNumber":134,"author":{"gitId":"EdwardZYWang"},"content":"     *","lastModifiedDate":"2021-11-06"},{"lineNumber":135,"author":{"gitId":"EdwardZYWang"},"content":"     * @param inputArguments user\u0027s input commands\u0027 parameters","lastModifiedDate":"2021-11-06"},{"lineNumber":136,"author":{"gitId":"EdwardZYWang"},"content":"     * @throws NullPointerException when an application attempts to use null in a case where an object is required","lastModifiedDate":"2021-11-06"},{"lineNumber":137,"author":{"gitId":"EdwardZYWang"},"content":"     * @throws FoodBankException when there is an unknown error has occurred","lastModifiedDate":"2021-11-06"},{"lineNumber":138,"author":{"gitId":"EdwardZYWang"},"content":"     */","lastModifiedDate":"2021-11-06"},{"lineNumber":139,"author":{"gitId":"EdwardZYWang"},"content":"    public void foodBankParser(String inputArguments) throws","lastModifiedDate":"2021-10-25"},{"lineNumber":140,"author":{"gitId":"EdwardZYWang"},"content":"            NullPointerException, FoodBankException {","lastModifiedDate":"2021-10-31"},{"lineNumber":141,"author":{"gitId":"EdwardZYWang"},"content":"        String[] splitResults \u003d inputArguments.trim().split(\" \", 2);","lastModifiedDate":"2021-10-18"},{"lineNumber":142,"author":{"gitId":"EdwardZYWang"},"content":"        command \u003d splitResults[0];","lastModifiedDate":"2021-10-18"},{"lineNumber":143,"author":{"gitId":"EdwardZYWang"},"content":"        inputArguments \u003d (splitResults.length \u003d\u003d 2) ? splitResults[1] : null;","lastModifiedDate":"2021-10-18"},{"lineNumber":144,"author":{"gitId":"EdwardZYWang"},"content":"        switch (command) {","lastModifiedDate":"2021-10-18"},{"lineNumber":145,"author":{"gitId":"EdwardZYWang"},"content":"        case Keywords.ADD_FLUID:","lastModifiedDate":"2021-10-18"},{"lineNumber":146,"author":{"gitId":"EdwardZYWang"},"content":"            FoodBank.addCustomFluid(inputArguments);","lastModifiedDate":"2021-10-18"},{"lineNumber":147,"author":{"gitId":"EdwardZYWang"},"content":"            break;","lastModifiedDate":"2021-10-18"},{"lineNumber":148,"author":{"gitId":"EdwardZYWang"},"content":"        case Keywords.DELETE_DRINKS:","lastModifiedDate":"2021-10-18"},{"lineNumber":149,"author":{"gitId":"EdwardZYWang"},"content":"            FoodBank.deleteCustomFluids(inputArguments);","lastModifiedDate":"2021-10-18"},{"lineNumber":150,"author":{"gitId":"EdwardZYWang"},"content":"            break;","lastModifiedDate":"2021-10-18"},{"lineNumber":151,"author":{"gitId":"EdwardZYWang"},"content":"        case Keywords.LIST_DRINKS:","lastModifiedDate":"2021-10-18"},{"lineNumber":152,"author":{"gitId":"EdwardZYWang"},"content":"            FoodBank.listCustomFluids();","lastModifiedDate":"2021-10-18"},{"lineNumber":153,"author":{"gitId":"EdwardZYWang"},"content":"            break;","lastModifiedDate":"2021-10-18"},{"lineNumber":154,"author":{"gitId":"EdwardZYWang"},"content":"        case Keywords.ADD_MEAL:","lastModifiedDate":"2021-10-18"},{"lineNumber":155,"author":{"gitId":"EdwardZYWang"},"content":"            FoodBank.addCustomMeal(inputArguments);","lastModifiedDate":"2021-10-18"},{"lineNumber":156,"author":{"gitId":"EdwardZYWang"},"content":"            break;","lastModifiedDate":"2021-10-18"},{"lineNumber":157,"author":{"gitId":"EdwardZYWang"},"content":"        case Keywords.DELETE_MEAL:","lastModifiedDate":"2021-10-18"},{"lineNumber":158,"author":{"gitId":"EdwardZYWang"},"content":"            FoodBank.deleteCustomMeal(inputArguments);","lastModifiedDate":"2021-10-18"},{"lineNumber":159,"author":{"gitId":"EdwardZYWang"},"content":"            break;","lastModifiedDate":"2021-10-18"},{"lineNumber":160,"author":{"gitId":"EdwardZYWang"},"content":"        case Keywords.LIST_MEAL:","lastModifiedDate":"2021-10-18"},{"lineNumber":161,"author":{"gitId":"EdwardZYWang"},"content":"            FoodBank.listCustomMeal();","lastModifiedDate":"2021-10-18"},{"lineNumber":162,"author":{"gitId":"EdwardZYWang"},"content":"            break;","lastModifiedDate":"2021-10-18"},{"lineNumber":163,"author":{"gitId":"EdwardZYWang"},"content":"        default:","lastModifiedDate":"2021-10-18"},{"lineNumber":164,"author":{"gitId":"EdwardZYWang"},"content":"            System.out.println(ClickfitMessages.DONT_UNDERSTAND);","lastModifiedDate":"2021-10-28"},{"lineNumber":165,"author":{"gitId":"EdwardZYWang"},"content":"            break;","lastModifiedDate":"2021-10-18"},{"lineNumber":166,"author":{"gitId":"EdwardZYWang"},"content":"        }","lastModifiedDate":"2021-10-18"},{"lineNumber":167,"author":{"gitId":"EdwardZYWang"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":168,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":169,"author":{"gitId":"EdwardZYWang"},"content":"    /**","lastModifiedDate":"2021-11-06"},{"lineNumber":170,"author":{"gitId":"EdwardZYWang"},"content":"     * A method that makes sense of the user\u0027s inputs for \"list\" commands. inputArguments is take in and checked","lastModifiedDate":"2021-11-06"},{"lineNumber":171,"author":{"gitId":"EdwardZYWang"},"content":"     * if it is empty or not. if it is not empty, it then checks to see if the users has entered any date","lastModifiedDate":"2021-11-06"},{"lineNumber":172,"author":{"gitId":"EdwardZYWang"},"content":"     * as part of the list commands\u0027 parameters. if there is a date, it will list out the respective class\u0027","lastModifiedDate":"2021-11-06"},{"lineNumber":173,"author":{"gitId":"EdwardZYWang"},"content":"     * contents for that date, else, it will list out the respective class\u0027 contents for the system date.","lastModifiedDate":"2021-11-06"},{"lineNumber":174,"author":{"gitId":"EdwardZYWang"},"content":"     *","lastModifiedDate":"2021-11-06"},{"lineNumber":175,"author":{"gitId":"EdwardZYWang"},"content":"     *","lastModifiedDate":"2021-11-06"},{"lineNumber":176,"author":{"gitId":"EdwardZYWang"},"content":"     * @param inputArguments user\u0027s input commands\u0027 parameters","lastModifiedDate":"2021-11-06"},{"lineNumber":177,"author":{"gitId":"EdwardZYWang"},"content":"     * @throws NullPointerException when an application attempts to use null in a case where an object is required","lastModifiedDate":"2021-11-06"},{"lineNumber":178,"author":{"gitId":"EdwardZYWang"},"content":"     * @throws MealException when there is an unknown error has occurred in MealTracker","lastModifiedDate":"2021-11-06"},{"lineNumber":179,"author":{"gitId":"EdwardZYWang"},"content":"     * @throws FluidExceptions when there is an unknown error has occurred in FluidTracker","lastModifiedDate":"2021-11-06"},{"lineNumber":180,"author":{"gitId":"EdwardZYWang"},"content":"     * @throws FoodBankException when there is an unknown error has occurred","lastModifiedDate":"2021-11-06"},{"lineNumber":181,"author":{"gitId":"EdwardZYWang"},"content":"     * @throws WeightException when an unknown error has occurred in Weight Tracker","lastModifiedDate":"2021-11-06"},{"lineNumber":182,"author":{"gitId":"EdwardZYWang"},"content":"     * @throws WorkoutException when an unknown error has occurred in WorkoutTracker","lastModifiedDate":"2021-11-06"},{"lineNumber":183,"author":{"gitId":"EdwardZYWang"},"content":"     */","lastModifiedDate":"2021-11-06"},{"lineNumber":184,"author":{"gitId":"EdwardZYWang"},"content":"    public void listParser(String inputArguments) throws","lastModifiedDate":"2021-10-24"},{"lineNumber":185,"author":{"gitId":"EdwardZYWang"},"content":"            NullPointerException, FoodBankException, FluidExceptions,","lastModifiedDate":"2021-10-31"},{"lineNumber":186,"author":{"gitId":"EdwardZYWang"},"content":"            WeightException,","lastModifiedDate":"2021-11-04"},{"lineNumber":187,"author":{"gitId":"EdwardZYWang"},"content":"            WorkoutException, MealException {","lastModifiedDate":"2021-10-31"},{"lineNumber":188,"author":{"gitId":"EdwardZYWang"},"content":"        String[] splitResults \u003d inputArguments.trim().split(\" \", 2);","lastModifiedDate":"2021-10-21"},{"lineNumber":189,"author":{"gitId":"EdwardZYWang"},"content":"        command \u003d splitResults[0];","lastModifiedDate":"2021-10-21"},{"lineNumber":190,"author":{"gitId":"EdwardZYWang"},"content":"        String date;","lastModifiedDate":"2021-10-21"},{"lineNumber":191,"author":{"gitId":"EdwardZYWang"},"content":"        if (splitResults.length \u003d\u003d 1) {","lastModifiedDate":"2021-10-21"},{"lineNumber":192,"author":{"gitId":"EdwardZYWang"},"content":"            if (command.equals(\"all\")) {","lastModifiedDate":"2021-11-04"},{"lineNumber":193,"author":{"gitId":"EdwardZYWang"},"content":"                listEverything(\"all\");","lastModifiedDate":"2021-11-04"},{"lineNumber":194,"author":{"gitId":"EdwardZYWang"},"content":"                return;","lastModifiedDate":"2021-11-04"},{"lineNumber":195,"author":{"gitId":"EdwardZYWang"},"content":"            } else if (command.contains(\"/\")) {","lastModifiedDate":"2021-11-04"},{"lineNumber":196,"author":{"gitId":"EdwardZYWang"},"content":"                DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy\");","lastModifiedDate":"2021-10-25"},{"lineNumber":197,"author":{"gitId":"EdwardZYWang"},"content":"                LocalDate localDate \u003d LocalDate.parse(command, formatter);","lastModifiedDate":"2021-10-25"},{"lineNumber":198,"author":{"gitId":"EdwardZYWang"},"content":"                date \u003d formatter.format(localDate);","lastModifiedDate":"2021-10-25"},{"lineNumber":199,"author":{"gitId":"EdwardZYWang"},"content":"                listEverything(date);","lastModifiedDate":"2021-10-25"},{"lineNumber":200,"author":{"gitId":"EdwardZYWang"},"content":"                return;","lastModifiedDate":"2021-10-21"},{"lineNumber":201,"author":{"gitId":"EdwardZYWang"},"content":"            } else {","lastModifiedDate":"2021-10-21"},{"lineNumber":202,"author":{"gitId":"EdwardZYWang"},"content":"                date \u003d Parser.getSystemDate();","lastModifiedDate":"2021-10-21"},{"lineNumber":203,"author":{"gitId":"EdwardZYWang"},"content":"            }","lastModifiedDate":"2021-10-21"},{"lineNumber":204,"author":{"gitId":"EdwardZYWang"},"content":"        } else {","lastModifiedDate":"2021-10-21"},{"lineNumber":205,"author":{"gitId":"EdwardZYWang"},"content":"            date \u003d splitResults[1];","lastModifiedDate":"2021-10-21"},{"lineNumber":206,"author":{"gitId":"EdwardZYWang"},"content":"            if (!date.equals(\"all\")) {","lastModifiedDate":"2021-10-25"},{"lineNumber":207,"author":{"gitId":"EdwardZYWang"},"content":"                DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy\");","lastModifiedDate":"2021-10-25"},{"lineNumber":208,"author":{"gitId":"EdwardZYWang"},"content":"                LocalDate localDate \u003d LocalDate.parse(date, formatter);","lastModifiedDate":"2021-10-25"},{"lineNumber":209,"author":{"gitId":"EdwardZYWang"},"content":"                date \u003d formatter.format(localDate);","lastModifiedDate":"2021-10-25"},{"lineNumber":210,"author":{"gitId":"EdwardZYWang"},"content":"            }","lastModifiedDate":"2021-10-25"},{"lineNumber":211,"author":{"gitId":"EdwardZYWang"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":212,"author":{"gitId":"EdwardZYWang"},"content":"        switch (command) {","lastModifiedDate":"2021-10-21"},{"lineNumber":213,"author":{"gitId":"EdwardZYWang"},"content":"        case Keywords.MEALS:","lastModifiedDate":"2021-10-24"},{"lineNumber":214,"author":{"gitId":"EdwardZYWang"},"content":"            meal.listMeals(date);","lastModifiedDate":"2021-10-21"},{"lineNumber":215,"author":{"gitId":"EdwardZYWang"},"content":"            break;","lastModifiedDate":"2021-10-21"},{"lineNumber":216,"author":{"gitId":"EdwardZYWang"},"content":"        case Keywords.FLUIDS:","lastModifiedDate":"2021-10-24"},{"lineNumber":217,"author":{"gitId":"EdwardZYWang"},"content":"            fluid.listFluids(date);","lastModifiedDate":"2021-10-25"},{"lineNumber":218,"author":{"gitId":"EdwardZYWang"},"content":"            break;","lastModifiedDate":"2021-10-21"},{"lineNumber":219,"author":{"gitId":"EdwardZYWang"},"content":"        case Keywords.CALORIES:","lastModifiedDate":"2021-10-21"},{"lineNumber":220,"author":{"gitId":"EdwardZYWang"},"content":"            listCalories(date);","lastModifiedDate":"2021-10-24"},{"lineNumber":221,"author":{"gitId":"EdwardZYWang"},"content":"            break;","lastModifiedDate":"2021-10-21"},{"lineNumber":222,"author":{"gitId":"EdwardZYWang"},"content":"        case Keywords.VOLUME:","lastModifiedDate":"2021-10-21"},{"lineNumber":223,"author":{"gitId":"EdwardZYWang"},"content":"            int volCount \u003d fluid.getVolume(date);","lastModifiedDate":"2021-10-21"},{"lineNumber":224,"author":{"gitId":"EdwardZYWang"},"content":"            System.out.println(\"\\n\" + \"Your total volume consumption for \" + date + \" is: \" + volCount + \" ml.\");","lastModifiedDate":"2021-10-21"},{"lineNumber":225,"author":{"gitId":"EdwardZYWang"},"content":"            break;","lastModifiedDate":"2021-10-21"},{"lineNumber":226,"author":{"gitId":"EdwardZYWang"},"content":"        case Keywords.WORKOUTS:","lastModifiedDate":"2021-10-24"},{"lineNumber":227,"author":{"gitId":"EdwardZYWang"},"content":"            workoutTracker.listWorkouts(date);","lastModifiedDate":"2021-10-22"},{"lineNumber":228,"author":{"gitId":"EdwardZYWang"},"content":"            break;","lastModifiedDate":"2021-10-21"},{"lineNumber":229,"author":{"gitId":"EdwardZYWang"},"content":"        case Keywords.SCHEDULE:","lastModifiedDate":"2021-10-21"},{"lineNumber":230,"author":{"gitId":"EdwardZYWang"},"content":"            scheduleTracker.listScheduledWorkouts(date);","lastModifiedDate":"2021-10-22"},{"lineNumber":231,"author":{"gitId":"EdwardZYWang"},"content":"            break;","lastModifiedDate":"2021-10-21"},{"lineNumber":232,"author":{"gitId":"EdwardZYWang"},"content":"        case Keywords.WEIGHTS:","lastModifiedDate":"2021-10-25"},{"lineNumber":233,"author":{"gitId":"EdwardZYWang"},"content":"            weightTracker.listWeights(date);","lastModifiedDate":"2021-10-25"},{"lineNumber":234,"author":{"gitId":"EdwardZYWang"},"content":"            break;","lastModifiedDate":"2021-10-21"},{"lineNumber":235,"author":{"gitId":"EdwardZYWang"},"content":"        default:","lastModifiedDate":"2021-10-21"},{"lineNumber":236,"author":{"gitId":"EdwardZYWang"},"content":"            System.out.println(ClickfitMessages.DONT_UNDERSTAND);","lastModifiedDate":"2021-10-28"},{"lineNumber":237,"author":{"gitId":"EdwardZYWang"},"content":"            break;","lastModifiedDate":"2021-10-21"},{"lineNumber":238,"author":{"gitId":"EdwardZYWang"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":239,"author":{"gitId":"EdwardZYWang"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":240,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":241,"author":{"gitId":"EdwardZYWang"},"content":"    /**","lastModifiedDate":"2021-11-06"},{"lineNumber":242,"author":{"gitId":"EdwardZYWang"},"content":"     * A method that makes sense of the user\u0027s inputs for \"list calories\" commands. it checks to see if the users","lastModifiedDate":"2021-11-06"},{"lineNumber":243,"author":{"gitId":"EdwardZYWang"},"content":"     * has entered any date as part of the list commands\u0027 parameters. if there is a date, it will list out","lastModifiedDate":"2021-11-06"},{"lineNumber":244,"author":{"gitId":"EdwardZYWang"},"content":"     * the calories gained from consuming food, the calories burnt through workouts and the net calories","lastModifiedDate":"2021-11-06"},{"lineNumber":245,"author":{"gitId":"EdwardZYWang"},"content":"     * for that date, else, it will list out the calories gained from consuming food, the calories burnt","lastModifiedDate":"2021-11-06"},{"lineNumber":246,"author":{"gitId":"EdwardZYWang"},"content":"     * through workouts and the net calories for the system date.","lastModifiedDate":"2021-11-06"},{"lineNumber":247,"author":{"gitId":"EdwardZYWang"},"content":"     *","lastModifiedDate":"2021-11-06"},{"lineNumber":248,"author":{"gitId":"EdwardZYWang"},"content":"     *","lastModifiedDate":"2021-11-06"},{"lineNumber":249,"author":{"gitId":"EdwardZYWang"},"content":"     * @param date user\u0027s date input","lastModifiedDate":"2021-11-06"},{"lineNumber":250,"author":{"gitId":"EdwardZYWang"},"content":"     * @throws MealException when there is an unknown error has occurred in MealTracker","lastModifiedDate":"2021-11-06"},{"lineNumber":251,"author":{"gitId":"EdwardZYWang"},"content":"     * @throws FluidExceptions when there is an unknown error has occurred in FluidTracker","lastModifiedDate":"2021-11-06"},{"lineNumber":252,"author":{"gitId":"EdwardZYWang"},"content":"     * @throws FoodBankException when there is an unknown error has occurred","lastModifiedDate":"2021-11-06"},{"lineNumber":253,"author":{"gitId":"EdwardZYWang"},"content":"     * @throws WorkoutException when an unknown error has occurred in WorkoutTracker","lastModifiedDate":"2021-11-06"},{"lineNumber":254,"author":{"gitId":"EdwardZYWang"},"content":"     */","lastModifiedDate":"2021-11-06"},{"lineNumber":255,"author":{"gitId":"EdwardZYWang"},"content":"    private void listCalories(String date) throws","lastModifiedDate":"2021-10-25"},{"lineNumber":256,"author":{"gitId":"EdwardZYWang"},"content":"            FluidExceptions, FoodBankException,","lastModifiedDate":"2021-10-31"},{"lineNumber":257,"author":{"gitId":"EdwardZYWang"},"content":"            WorkoutException, MealException {","lastModifiedDate":"2021-10-28"},{"lineNumber":258,"author":{"gitId":"EdwardZYWang"},"content":"        int calCount \u003d fluid.getCalories(date) + meal.getCalories(date);","lastModifiedDate":"2021-10-24"},{"lineNumber":259,"author":{"gitId":"EdwardZYWang"},"content":"        int caloriesBurned \u003d workoutTracker.getCaloriesBurned(date);","lastModifiedDate":"2021-10-24"},{"lineNumber":260,"author":{"gitId":"EdwardZYWang"},"content":"        int netCalories \u003d calCount - caloriesBurned;","lastModifiedDate":"2021-10-24"},{"lineNumber":261,"author":{"gitId":"EdwardZYWang"},"content":"        System.out.println(System.lineSeparator() + \"Your total calorie consumption for \"","lastModifiedDate":"2021-10-24"},{"lineNumber":262,"author":{"gitId":"EdwardZYWang"},"content":"                + date + \" is: \" + calCount + \" calories.\");","lastModifiedDate":"2021-10-24"},{"lineNumber":263,"author":{"gitId":"EdwardZYWang"},"content":"        System.out.println(\"Your total calories burned for \" + date + \" is: \" + caloriesBurned + \" calories.\");","lastModifiedDate":"2021-10-24"},{"lineNumber":264,"author":{"gitId":"EdwardZYWang"},"content":"        System.out.println(\"Your NET calories for \" + date + \" is: \" + netCalories + \" calories.\");","lastModifiedDate":"2021-10-24"},{"lineNumber":265,"author":{"gitId":"EdwardZYWang"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":266,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":267,"author":{"gitId":"EdwardZYWang"},"content":"    /**","lastModifiedDate":"2021-11-06"},{"lineNumber":268,"author":{"gitId":"EdwardZYWang"},"content":"     * A method that makes sense of the user\u0027s inputs. The input is taken in, then split using splitResults.","lastModifiedDate":"2021-11-06"},{"lineNumber":269,"author":{"gitId":"EdwardZYWang"},"content":"     * splitResults[0] is used to identify the command word of the user\u0027s input. splitResult[1] is the","lastModifiedDate":"2021-11-06"},{"lineNumber":270,"author":{"gitId":"EdwardZYWang"},"content":"     * rest of the command. splitResult[1] saved as inputArguments after checking if it is not an empty","lastModifiedDate":"2021-11-06"},{"lineNumber":271,"author":{"gitId":"EdwardZYWang"},"content":"     * command. inputArgument is then passed on to the other \"add\" methods through switch cases.","lastModifiedDate":"2021-11-06"},{"lineNumber":272,"author":{"gitId":"EdwardZYWang"},"content":"     *","lastModifiedDate":"2021-11-06"},{"lineNumber":273,"author":{"gitId":"EdwardZYWang"},"content":"     *","lastModifiedDate":"2021-11-06"},{"lineNumber":274,"author":{"gitId":"EdwardZYWang"},"content":"     * @param input user\u0027s input","lastModifiedDate":"2021-11-06"},{"lineNumber":275,"author":{"gitId":"EdwardZYWang"},"content":"     * @throws NullPointerException when an application attempts to use null in a case where an object is required","lastModifiedDate":"2021-11-06"},{"lineNumber":276,"author":{"gitId":"EdwardZYWang"},"content":"     * @throws MealException when there is an unknown error has occurred in MealTracker","lastModifiedDate":"2021-11-06"},{"lineNumber":277,"author":{"gitId":"EdwardZYWang"},"content":"     * @throws FluidExceptions when there is an unknown error has occurred in FluidTracker","lastModifiedDate":"2021-11-06"},{"lineNumber":278,"author":{"gitId":"EdwardZYWang"},"content":"     * @throws FoodBankException when there is an unknown error has occurred","lastModifiedDate":"2021-11-06"},{"lineNumber":279,"author":{"gitId":"EdwardZYWang"},"content":"     * @throws WeightException when an unknown error has occurred in Weight Tracker","lastModifiedDate":"2021-11-06"},{"lineNumber":280,"author":{"gitId":"EdwardZYWang"},"content":"     * @throws WorkoutException when an unknown error has occurred in WorkoutTracker","lastModifiedDate":"2021-11-06"},{"lineNumber":281,"author":{"gitId":"EdwardZYWang"},"content":"     * @throws ScheduleException when an unknown error has occurred in ScheduleTracker","lastModifiedDate":"2021-11-06"},{"lineNumber":282,"author":{"gitId":"EdwardZYWang"},"content":"     */","lastModifiedDate":"2021-11-06"},{"lineNumber":283,"author":{"gitId":"EdwardZYWang"},"content":"    public void addParser(String input) throws","lastModifiedDate":"2021-10-25"},{"lineNumber":284,"author":{"gitId":"EdwardZYWang"},"content":"            NullPointerException, FoodBankException,","lastModifiedDate":"2021-10-25"},{"lineNumber":285,"author":{"gitId":"EdwardZYWang"},"content":"            DukeException, MealException,","lastModifiedDate":"2021-10-25"},{"lineNumber":286,"author":{"gitId":"EdwardZYWang"},"content":"            FluidExceptions, ScheduleException,","lastModifiedDate":"2021-10-25"},{"lineNumber":287,"author":{"gitId":"EdwardZYWang"},"content":"            WorkoutException, WeightException {","lastModifiedDate":"2021-10-28"},{"lineNumber":288,"author":{"gitId":"EdwardZYWang"},"content":"        String[] splitResults \u003d input.trim().split(\" \", 2);","lastModifiedDate":"2021-10-24"},{"lineNumber":289,"author":{"gitId":"EdwardZYWang"},"content":"        command \u003d splitResults[0];","lastModifiedDate":"2021-10-24"},{"lineNumber":290,"author":{"gitId":"EdwardZYWang"},"content":"        inputArguments \u003d (splitResults.length \u003d\u003d 2) ? splitResults[1] : null;","lastModifiedDate":"2021-10-24"},{"lineNumber":291,"author":{"gitId":"EdwardZYWang"},"content":"        switch (command) {","lastModifiedDate":"2021-10-20"},{"lineNumber":292,"author":{"gitId":"EdwardZYWang"},"content":"        case Keywords.MEAL:","lastModifiedDate":"2021-10-24"},{"lineNumber":293,"author":{"gitId":"EdwardZYWang"},"content":"            if (splitResults.length \u003d\u003d 1) {","lastModifiedDate":"2021-10-28"},{"lineNumber":294,"author":{"gitId":"EdwardZYWang"},"content":"                throw new NoMealDetailsException();","lastModifiedDate":"2021-10-28"},{"lineNumber":295,"author":{"gitId":"EdwardZYWang"},"content":"            }","lastModifiedDate":"2021-10-28"},{"lineNumber":296,"author":{"gitId":"EdwardZYWang"},"content":"            meal.addMeal(inputArguments);","lastModifiedDate":"2021-10-24"},{"lineNumber":297,"author":{"gitId":"EdwardZYWang"},"content":"            DateTracker.sortDateAndTime(meal.meals);","lastModifiedDate":"2021-10-24"},{"lineNumber":298,"author":{"gitId":"EdwardZYWang"},"content":"            break;","lastModifiedDate":"2021-10-24"},{"lineNumber":299,"author":{"gitId":"EdwardZYWang"},"content":"        case Keywords.FLUID:","lastModifiedDate":"2021-10-24"},{"lineNumber":300,"author":{"gitId":"EdwardZYWang"},"content":"            fluid.addFluid(inputArguments);","lastModifiedDate":"2021-10-24"},{"lineNumber":301,"author":{"gitId":"EdwardZYWang"},"content":"            DateTracker.sortDateAndTime(fluid.fluidArray);","lastModifiedDate":"2021-10-24"},{"lineNumber":302,"author":{"gitId":"EdwardZYWang"},"content":"            break;","lastModifiedDate":"2021-10-24"},{"lineNumber":303,"author":{"gitId":"EdwardZYWang"},"content":"        case Keywords.WORKOUT:","lastModifiedDate":"2021-10-24"},{"lineNumber":304,"author":{"gitId":"EdwardZYWang"},"content":"            workoutTracker.addWorkout(inputArguments, false);","lastModifiedDate":"2021-10-24"},{"lineNumber":305,"author":{"gitId":"EdwardZYWang"},"content":"            DateTracker.sortDateAndTime(workoutTracker.workouts);","lastModifiedDate":"2021-10-24"},{"lineNumber":306,"author":{"gitId":"EdwardZYWang"},"content":"            break;","lastModifiedDate":"2021-10-24"},{"lineNumber":307,"author":{"gitId":"EdwardZYWang"},"content":"        case Keywords.SCHEDULE:","lastModifiedDate":"2021-10-24"},{"lineNumber":308,"author":{"gitId":"EdwardZYWang"},"content":"            scheduleTracker.addScheduledWorkout(inputArguments, false, true);","lastModifiedDate":"2021-10-26"},{"lineNumber":309,"author":{"gitId":"EdwardZYWang"},"content":"            break;","lastModifiedDate":"2021-10-20"},{"lineNumber":310,"author":{"gitId":"EdwardZYWang"},"content":"        case Keywords.WEIGHT:","lastModifiedDate":"2021-10-24"},{"lineNumber":311,"author":{"gitId":"EdwardZYWang"},"content":"            weightTracker.addWeight(inputArguments);","lastModifiedDate":"2021-10-25"},{"lineNumber":312,"author":{"gitId":"EdwardZYWang"},"content":"            DateTracker.sortDate(weightTracker.weightsArray);","lastModifiedDate":"2021-10-24"},{"lineNumber":313,"author":{"gitId":"EdwardZYWang"},"content":"            break;","lastModifiedDate":"2021-10-20"},{"lineNumber":314,"author":{"gitId":"EdwardZYWang"},"content":"        default:","lastModifiedDate":"2021-10-20"},{"lineNumber":315,"author":{"gitId":"EdwardZYWang"},"content":"            System.out.println(ClickfitMessages.DONT_UNDERSTAND);","lastModifiedDate":"2021-10-28"},{"lineNumber":316,"author":{"gitId":"EdwardZYWang"},"content":"            break;","lastModifiedDate":"2021-10-20"},{"lineNumber":317,"author":{"gitId":"EdwardZYWang"},"content":"        }","lastModifiedDate":"2021-10-20"},{"lineNumber":318,"author":{"gitId":"EdwardZYWang"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":319,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":320,"author":{"gitId":"EdwardZYWang"},"content":"    /**","lastModifiedDate":"2021-11-06"},{"lineNumber":321,"author":{"gitId":"EdwardZYWang"},"content":"     * A method that makes sense of the user\u0027s inputs. The input is taken in, then split using splitResults.","lastModifiedDate":"2021-11-06"},{"lineNumber":322,"author":{"gitId":"EdwardZYWang"},"content":"     * splitResults[0] is used to identify the command word of the user\u0027s input. splitResult[1] is the","lastModifiedDate":"2021-11-06"},{"lineNumber":323,"author":{"gitId":"EdwardZYWang"},"content":"     * rest of the command. splitResult[1] saved as inputArguments after checking if it is not an empty","lastModifiedDate":"2021-11-06"},{"lineNumber":324,"author":{"gitId":"EdwardZYWang"},"content":"     * command. inputArgument is then passed on to the other \"delete\" methods through switch cases.","lastModifiedDate":"2021-11-06"},{"lineNumber":325,"author":{"gitId":"EdwardZYWang"},"content":"     *","lastModifiedDate":"2021-11-06"},{"lineNumber":326,"author":{"gitId":"EdwardZYWang"},"content":"     *","lastModifiedDate":"2021-11-06"},{"lineNumber":327,"author":{"gitId":"EdwardZYWang"},"content":"     * @param input user\u0027s input","lastModifiedDate":"2021-11-06"},{"lineNumber":328,"author":{"gitId":"EdwardZYWang"},"content":"     * @throws NullPointerException when an application attempts to use null in a case where an object is required","lastModifiedDate":"2021-11-06"},{"lineNumber":329,"author":{"gitId":"EdwardZYWang"},"content":"     * @throws MealException when there is an unknown error has occurred in MealTracker","lastModifiedDate":"2021-11-06"},{"lineNumber":330,"author":{"gitId":"EdwardZYWang"},"content":"     * @throws FluidExceptions when there is an unknown error has occurred in FluidTracker","lastModifiedDate":"2021-11-06"},{"lineNumber":331,"author":{"gitId":"EdwardZYWang"},"content":"     * @throws FoodBankException when there is an unknown error has occurred","lastModifiedDate":"2021-11-06"},{"lineNumber":332,"author":{"gitId":"EdwardZYWang"},"content":"     * @throws WeightException when an unknown error has occurred in Weight Tracker","lastModifiedDate":"2021-11-06"},{"lineNumber":333,"author":{"gitId":"EdwardZYWang"},"content":"     * @throws WorkoutException when an unknown error has occurred in WorkoutTracker","lastModifiedDate":"2021-11-06"},{"lineNumber":334,"author":{"gitId":"EdwardZYWang"},"content":"     * @throws ScheduleException when an unknown error has occurred in ScheduleTracker","lastModifiedDate":"2021-11-06"},{"lineNumber":335,"author":{"gitId":"EdwardZYWang"},"content":"     */","lastModifiedDate":"2021-11-06"},{"lineNumber":336,"author":{"gitId":"EdwardZYWang"},"content":"    public void deleteParser(String input) throws NullPointerException,","lastModifiedDate":"2021-10-24"},{"lineNumber":337,"author":{"gitId":"EdwardZYWang"},"content":"            FoodBankException, DukeException,","lastModifiedDate":"2021-10-24"},{"lineNumber":338,"author":{"gitId":"EdwardZYWang"},"content":"            ScheduleException, WorkoutException,","lastModifiedDate":"2021-10-28"},{"lineNumber":339,"author":{"gitId":"EdwardZYWang"},"content":"            MealException, WeightException,","lastModifiedDate":"2021-10-28"},{"lineNumber":340,"author":{"gitId":"EdwardZYWang"},"content":"            FluidExceptions {","lastModifiedDate":"2021-10-28"},{"lineNumber":341,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":342,"author":{"gitId":"EdwardZYWang"},"content":"        String[] splitResults \u003d input.trim().split(\" \", 2);","lastModifiedDate":"2021-10-24"},{"lineNumber":343,"author":{"gitId":"EdwardZYWang"},"content":"        command \u003d splitResults[0];","lastModifiedDate":"2021-10-24"},{"lineNumber":344,"author":{"gitId":"EdwardZYWang"},"content":"        inputArguments \u003d (splitResults.length \u003d\u003d 2) ? splitResults[1] : null;","lastModifiedDate":"2021-10-24"},{"lineNumber":345,"author":{"gitId":"EdwardZYWang"},"content":"        switch (command) {","lastModifiedDate":"2021-10-20"},{"lineNumber":346,"author":{"gitId":"EdwardZYWang"},"content":"        case Keywords.MEAL:","lastModifiedDate":"2021-10-24"},{"lineNumber":347,"author":{"gitId":"EdwardZYWang"},"content":"            if (splitResults.length \u003d\u003d 1) {","lastModifiedDate":"2021-10-28"},{"lineNumber":348,"author":{"gitId":"EdwardZYWang"},"content":"                throw new NoDeleteMealIndexException();","lastModifiedDate":"2021-10-28"},{"lineNumber":349,"author":{"gitId":"EdwardZYWang"},"content":"            }","lastModifiedDate":"2021-10-28"},{"lineNumber":350,"author":{"gitId":"EdwardZYWang"},"content":"            meal.deleteMeal(inputArguments);","lastModifiedDate":"2021-10-24"},{"lineNumber":351,"author":{"gitId":"EdwardZYWang"},"content":"            break;","lastModifiedDate":"2021-10-24"},{"lineNumber":352,"author":{"gitId":"EdwardZYWang"},"content":"        case Keywords.FLUID:","lastModifiedDate":"2021-10-24"},{"lineNumber":353,"author":{"gitId":"EdwardZYWang"},"content":"            fluid.deleteFluid(inputArguments);","lastModifiedDate":"2021-10-24"},{"lineNumber":354,"author":{"gitId":"EdwardZYWang"},"content":"            break;","lastModifiedDate":"2021-10-20"},{"lineNumber":355,"author":{"gitId":"EdwardZYWang"},"content":"        case Keywords.WORKOUT:","lastModifiedDate":"2021-10-24"},{"lineNumber":356,"author":{"gitId":"EdwardZYWang"},"content":"            workoutTracker.deleteWorkout(inputArguments);","lastModifiedDate":"2021-10-20"},{"lineNumber":357,"author":{"gitId":"EdwardZYWang"},"content":"            break;","lastModifiedDate":"2021-10-20"},{"lineNumber":358,"author":{"gitId":"EdwardZYWang"},"content":"        case Keywords.SCHEDULE:","lastModifiedDate":"2021-10-24"},{"lineNumber":359,"author":{"gitId":"EdwardZYWang"},"content":"            scheduleTracker.deleteScheduledWorkout(inputArguments);","lastModifiedDate":"2021-10-24"},{"lineNumber":360,"author":{"gitId":"EdwardZYWang"},"content":"            break;","lastModifiedDate":"2021-10-24"},{"lineNumber":361,"author":{"gitId":"EdwardZYWang"},"content":"        case Keywords.WEIGHT:","lastModifiedDate":"2021-10-24"},{"lineNumber":362,"author":{"gitId":"EdwardZYWang"},"content":"            if (inputArguments \u003d\u003d null) {","lastModifiedDate":"2021-10-25"},{"lineNumber":363,"author":{"gitId":"EdwardZYWang"},"content":"                throw new DeleteWeightException();","lastModifiedDate":"2021-10-25"},{"lineNumber":364,"author":{"gitId":"EdwardZYWang"},"content":"            }","lastModifiedDate":"2021-10-25"},{"lineNumber":365,"author":{"gitId":"EdwardZYWang"},"content":"            weightTracker.deleteWeight(inputArguments);","lastModifiedDate":"2021-10-24"},{"lineNumber":366,"author":{"gitId":"EdwardZYWang"},"content":"            break;","lastModifiedDate":"2021-10-24"},{"lineNumber":367,"author":{"gitId":"EdwardZYWang"},"content":"        default:","lastModifiedDate":"2021-10-20"},{"lineNumber":368,"author":{"gitId":"EdwardZYWang"},"content":"            System.out.println(ClickfitMessages.DONT_UNDERSTAND);","lastModifiedDate":"2021-10-28"},{"lineNumber":369,"author":{"gitId":"EdwardZYWang"},"content":"            break;","lastModifiedDate":"2021-10-20"},{"lineNumber":370,"author":{"gitId":"EdwardZYWang"},"content":"        }","lastModifiedDate":"2021-10-20"},{"lineNumber":371,"author":{"gitId":"EdwardZYWang"},"content":"        DateTracker.deleteDateFromList(inputArguments, fluid, meal, workoutTracker, weightTracker);","lastModifiedDate":"2021-10-24"},{"lineNumber":372,"author":{"gitId":"EdwardZYWang"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":373,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":374,"author":{"gitId":"EdwardZYWang"},"content":"    /**","lastModifiedDate":"2021-11-06"},{"lineNumber":375,"author":{"gitId":"EdwardZYWang"},"content":"     * A method that makes sense of the user\u0027s inputs for list everything command. it checks to see if the users","lastModifiedDate":"2021-11-06"},{"lineNumber":376,"author":{"gitId":"EdwardZYWang"},"content":"     * has entered any date as part of the list commands\u0027 parameters. if there is a date, it will list everything","lastModifiedDate":"2021-11-06"},{"lineNumber":377,"author":{"gitId":"EdwardZYWang"},"content":"     * in the text files for all classes for that date, else, it will just it will list everything","lastModifiedDate":"2021-11-06"},{"lineNumber":378,"author":{"gitId":"EdwardZYWang"},"content":"     * in the text files for all classes for the system date.","lastModifiedDate":"2021-11-06"},{"lineNumber":379,"author":{"gitId":"EdwardZYWang"},"content":"     *","lastModifiedDate":"2021-11-06"},{"lineNumber":380,"author":{"gitId":"EdwardZYWang"},"content":"     *","lastModifiedDate":"2021-11-06"},{"lineNumber":381,"author":{"gitId":"EdwardZYWang"},"content":"     * @param date user\u0027s date input","lastModifiedDate":"2021-11-06"},{"lineNumber":382,"author":{"gitId":"EdwardZYWang"},"content":"     * @throws NullPointerException when an application attempts to use null in a case where an object is required","lastModifiedDate":"2021-11-06"},{"lineNumber":383,"author":{"gitId":"EdwardZYWang"},"content":"     * @throws MealException when there is an unknown error has occurred in MealTracker","lastModifiedDate":"2021-11-06"},{"lineNumber":384,"author":{"gitId":"EdwardZYWang"},"content":"     * @throws FluidExceptions when there is an unknown error has occurred in FluidTracker","lastModifiedDate":"2021-11-06"},{"lineNumber":385,"author":{"gitId":"EdwardZYWang"},"content":"     * @throws FoodBankException when there is an unknown error has occurred","lastModifiedDate":"2021-11-06"},{"lineNumber":386,"author":{"gitId":"EdwardZYWang"},"content":"     * @throws WeightException when an unknown error has occurred in Weight Tracker","lastModifiedDate":"2021-11-06"},{"lineNumber":387,"author":{"gitId":"EdwardZYWang"},"content":"     * @throws WorkoutException when an unknown error has occurred in WorkoutTracker","lastModifiedDate":"2021-11-06"},{"lineNumber":388,"author":{"gitId":"EdwardZYWang"},"content":"     */","lastModifiedDate":"2021-11-06"},{"lineNumber":389,"author":{"gitId":"EdwardZYWang"},"content":"    public void listEverything(String date) throws","lastModifiedDate":"2021-10-24"},{"lineNumber":390,"author":{"gitId":"EdwardZYWang"},"content":"            NullPointerException, FoodBankException,","lastModifiedDate":"2021-10-25"},{"lineNumber":391,"author":{"gitId":"EdwardZYWang"},"content":"            WorkoutException,","lastModifiedDate":"2021-11-02"},{"lineNumber":392,"author":{"gitId":"EdwardZYWang"},"content":"            MealException, FluidExceptions, WeightException {","lastModifiedDate":"2021-10-28"},{"lineNumber":393,"author":{"gitId":"EdwardZYWang"},"content":"        meal.listMeals(date);","lastModifiedDate":"2021-10-21"},{"lineNumber":394,"author":{"gitId":"EdwardZYWang"},"content":"        System.out.println();","lastModifiedDate":"2021-10-22"},{"lineNumber":395,"author":{"gitId":"EdwardZYWang"},"content":"        fluid.listFluids(date);","lastModifiedDate":"2021-10-25"},{"lineNumber":396,"author":{"gitId":"EdwardZYWang"},"content":"        System.out.println();","lastModifiedDate":"2021-10-22"},{"lineNumber":397,"author":{"gitId":"EdwardZYWang"},"content":"        weightTracker.listWeights(date);","lastModifiedDate":"2021-10-25"},{"lineNumber":398,"author":{"gitId":"EdwardZYWang"},"content":"        System.out.println();","lastModifiedDate":"2021-10-22"},{"lineNumber":399,"author":{"gitId":"EdwardZYWang"},"content":"        workoutTracker.listWorkouts(date);","lastModifiedDate":"2021-10-22"},{"lineNumber":400,"author":{"gitId":"EdwardZYWang"},"content":"        System.out.println();","lastModifiedDate":"2021-10-22"},{"lineNumber":401,"author":{"gitId":"EdwardZYWang"},"content":"        scheduleTracker.listScheduledWorkouts(date);","lastModifiedDate":"2021-10-22"},{"lineNumber":402,"author":{"gitId":"EdwardZYWang"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":403,"author":{"gitId":"EdwardZYWang"},"content":"}","lastModifiedDate":"2021-10-07"}],"authorContributionMap":{"teoziyiivy":2,"VishalJeyaram":4,"arvejw":4,"EdwardZYWang":393}},{"path":"src/main/java/seedu/duke/DateTracker.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VishalJeyaram"},"content":"package seedu.duke;","lastModifiedDate":"2021-10-18"},{"lineNumber":2,"author":{"gitId":"VishalJeyaram"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":3,"author":{"gitId":"arvejw"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-10-20"},{"lineNumber":4,"author":{"gitId":"arvejw"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-10-20"},{"lineNumber":5,"author":{"gitId":"arvejw"},"content":"import java.time.LocalTime;","lastModifiedDate":"2021-10-20"},{"lineNumber":6,"author":{"gitId":"arvejw"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-10-20"},{"lineNumber":7,"author":{"gitId":"arvejw"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-20"},{"lineNumber":8,"author":{"gitId":"arvejw"},"content":"import java.util.Collections;","lastModifiedDate":"2021-10-20"},{"lineNumber":9,"author":{"gitId":"arvejw"},"content":"import java.util.Comparator;","lastModifiedDate":"2021-10-20"},{"lineNumber":10,"author":{"gitId":"VishalJeyaram"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":11,"author":{"gitId":"VishalJeyaram"},"content":"public class DateTracker {","lastModifiedDate":"2021-10-18"},{"lineNumber":12,"author":{"gitId":"VishalJeyaram"},"content":"    protected static ArrayList\u003cString\u003e dates \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-24"},{"lineNumber":13,"author":{"gitId":"VishalJeyaram"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":14,"author":{"gitId":"VishalJeyaram"},"content":"    //@@author VishalJeyaram","lastModifiedDate":"2021-11-02"},{"lineNumber":15,"author":{"gitId":"VishalJeyaram"},"content":"    /**","lastModifiedDate":"2021-11-05"},{"lineNumber":16,"author":{"gitId":"VishalJeyaram"},"content":"     * Checks if a date for any parameter has already been accounted for.","lastModifiedDate":"2021-11-05"},{"lineNumber":17,"author":{"gitId":"VishalJeyaram"},"content":"     * If is has not been accounted for, the date will be added to the list of dates.","lastModifiedDate":"2021-11-05"},{"lineNumber":18,"author":{"gitId":"VishalJeyaram"},"content":"     *","lastModifiedDate":"2021-11-05"},{"lineNumber":19,"author":{"gitId":"VishalJeyaram"},"content":"     * @param newDate Date to be checked","lastModifiedDate":"2021-11-05"},{"lineNumber":20,"author":{"gitId":"VishalJeyaram"},"content":"     */","lastModifiedDate":"2021-11-05"},{"lineNumber":21,"author":{"gitId":"VishalJeyaram"},"content":"    public static void checkIfDateExists(String newDate) {","lastModifiedDate":"2021-10-18"},{"lineNumber":22,"author":{"gitId":"VishalJeyaram"},"content":"        for (String date : dates) {","lastModifiedDate":"2021-10-18"},{"lineNumber":23,"author":{"gitId":"VishalJeyaram"},"content":"            if (date.equals(newDate)) {","lastModifiedDate":"2021-10-18"},{"lineNumber":24,"author":{"gitId":"VishalJeyaram"},"content":"                return;","lastModifiedDate":"2021-10-18"},{"lineNumber":25,"author":{"gitId":"VishalJeyaram"},"content":"            }","lastModifiedDate":"2021-10-18"},{"lineNumber":26,"author":{"gitId":"VishalJeyaram"},"content":"        }","lastModifiedDate":"2021-10-18"},{"lineNumber":27,"author":{"gitId":"VishalJeyaram"},"content":"        dates.add(newDate);","lastModifiedDate":"2021-10-18"},{"lineNumber":28,"author":{"gitId":"VishalJeyaram"},"content":"        sortDate();","lastModifiedDate":"2021-10-18"},{"lineNumber":29,"author":{"gitId":"VishalJeyaram"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":30,"author":{"gitId":"VishalJeyaram"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":31,"author":{"gitId":"VishalJeyaram"},"content":"    public static void sortDate() {","lastModifiedDate":"2021-10-18"},{"lineNumber":32,"author":{"gitId":"VishalJeyaram"},"content":"        Collections.sort(dates);","lastModifiedDate":"2021-10-18"},{"lineNumber":33,"author":{"gitId":"VishalJeyaram"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":34,"author":{"gitId":"VishalJeyaram"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":35,"author":{"gitId":"pragyan01"},"content":"    //@@author pragyan01","lastModifiedDate":"2021-11-02"},{"lineNumber":36,"author":{"gitId":"pragyan01"},"content":"    /**","lastModifiedDate":"2021-11-05"},{"lineNumber":37,"author":{"gitId":"pragyan01"},"content":"     * This method sorts an array list by date.","lastModifiedDate":"2021-11-05"},{"lineNumber":38,"author":{"gitId":"pragyan01"},"content":"     *","lastModifiedDate":"2021-11-05"},{"lineNumber":39,"author":{"gitId":"pragyan01"},"content":"     * @param list any array list provided.","lastModifiedDate":"2021-11-06"},{"lineNumber":40,"author":{"gitId":"pragyan01"},"content":"     *","lastModifiedDate":"2021-11-05"},{"lineNumber":41,"author":{"gitId":"pragyan01"},"content":"     * @author pragyan01","lastModifiedDate":"2021-11-05"},{"lineNumber":42,"author":{"gitId":"pragyan01"},"content":"     */","lastModifiedDate":"2021-11-05"},{"lineNumber":43,"author":{"gitId":"pragyan01"},"content":"    public static void sortDate(ArrayList\u003cString\u003e list) {","lastModifiedDate":"2021-10-24"},{"lineNumber":44,"author":{"gitId":"pragyan01"},"content":"        Collections.sort(list, new Comparator\u003cString\u003e() {","lastModifiedDate":"2021-10-18"},{"lineNumber":45,"author":{"gitId":"pragyan01"},"content":"            /**","lastModifiedDate":"2021-11-05"},{"lineNumber":46,"author":{"gitId":"pragyan01"},"content":"             * @return sorted array list by date","lastModifiedDate":"2021-11-05"},{"lineNumber":47,"author":{"gitId":"pragyan01"},"content":"             *","lastModifiedDate":"2021-11-05"},{"lineNumber":48,"author":{"gitId":"pragyan01"},"content":"             * @author pragyan01","lastModifiedDate":"2021-11-05"},{"lineNumber":49,"author":{"gitId":"pragyan01"},"content":"             */","lastModifiedDate":"2021-11-05"},{"lineNumber":50,"author":{"gitId":"pragyan01"},"content":"            public int compare(String o1, String o2) {","lastModifiedDate":"2021-10-18"},{"lineNumber":51,"author":{"gitId":"pragyan01"},"content":"                LocalDate o1Date \u003d LocalDate.parse(Parser.getDateNoDateTracker(o1),","lastModifiedDate":"2021-10-24"},{"lineNumber":52,"author":{"gitId":"pragyan01"},"content":"                        DateTimeFormatter.ofPattern(\"dd/MM/yyyy\"));","lastModifiedDate":"2021-10-24"},{"lineNumber":53,"author":{"gitId":"pragyan01"},"content":"                LocalDate o2Date \u003d LocalDate.parse(Parser.getDateNoDateTracker(o2),","lastModifiedDate":"2021-10-24"},{"lineNumber":54,"author":{"gitId":"pragyan01"},"content":"                        DateTimeFormatter.ofPattern(\"dd/MM/yyyy\"));","lastModifiedDate":"2021-10-24"},{"lineNumber":55,"author":{"gitId":"pragyan01"},"content":"                return o1Date.compareTo(o2Date);","lastModifiedDate":"2021-10-24"},{"lineNumber":56,"author":{"gitId":"pragyan01"},"content":"            }","lastModifiedDate":"2021-10-18"},{"lineNumber":57,"author":{"gitId":"pragyan01"},"content":"        });","lastModifiedDate":"2021-10-18"},{"lineNumber":58,"author":{"gitId":"pragyan01"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":59,"author":{"gitId":"pragyan01"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":60,"author":{"gitId":"VishalJeyaram"},"content":"    //@@author VishalJeyaram","lastModifiedDate":"2021-11-02"},{"lineNumber":61,"author":{"gitId":"VishalJeyaram"},"content":"    /**","lastModifiedDate":"2021-11-05"},{"lineNumber":62,"author":{"gitId":"VishalJeyaram"},"content":"     * Deletes a date from the list of dates if no meal, workout, weight or fluid occurs on that date","lastModifiedDate":"2021-11-05"},{"lineNumber":63,"author":{"gitId":"VishalJeyaram"},"content":"     *","lastModifiedDate":"2021-11-05"},{"lineNumber":64,"author":{"gitId":"VishalJeyaram"},"content":"     * @param inputArguments User\u0027s input","lastModifiedDate":"2021-11-05"},{"lineNumber":65,"author":{"gitId":"VishalJeyaram"},"content":"     * @param fluid Fluid object","lastModifiedDate":"2021-11-05"},{"lineNumber":66,"author":{"gitId":"VishalJeyaram"},"content":"     * @param meal Meal object","lastModifiedDate":"2021-11-05"},{"lineNumber":67,"author":{"gitId":"VishalJeyaram"},"content":"     * @param workoutTracker WorkoutTracker object","lastModifiedDate":"2021-11-05"},{"lineNumber":68,"author":{"gitId":"VishalJeyaram"},"content":"     * @param weightTracker WeightTracker object","lastModifiedDate":"2021-11-05"},{"lineNumber":69,"author":{"gitId":"VishalJeyaram"},"content":"     */","lastModifiedDate":"2021-11-05"},{"lineNumber":70,"author":{"gitId":"VishalJeyaram"},"content":"    public static void deleteDateFromList(String inputArguments, Fluid fluid, Meal meal,","lastModifiedDate":"2021-10-21"},{"lineNumber":71,"author":{"gitId":"VishalJeyaram"},"content":"                                          WorkoutTracker workoutTracker,","lastModifiedDate":"2021-10-24"},{"lineNumber":72,"author":{"gitId":"VishalJeyaram"},"content":"                                          WeightTracker weightTracker) {","lastModifiedDate":"2021-11-05"},{"lineNumber":73,"author":{"gitId":"VishalJeyaram"},"content":"        String date \u003d Parser.getDate(inputArguments);","lastModifiedDate":"2021-10-18"},{"lineNumber":74,"author":{"gitId":"VishalJeyaram"},"content":"        for (String m : meal.meals) {","lastModifiedDate":"2021-10-18"},{"lineNumber":75,"author":{"gitId":"VishalJeyaram"},"content":"            if (m.contains(date)) {","lastModifiedDate":"2021-10-20"},{"lineNumber":76,"author":{"gitId":"VishalJeyaram"},"content":"                return;","lastModifiedDate":"2021-10-18"},{"lineNumber":77,"author":{"gitId":"VishalJeyaram"},"content":"            }","lastModifiedDate":"2021-10-18"},{"lineNumber":78,"author":{"gitId":"VishalJeyaram"},"content":"        }","lastModifiedDate":"2021-10-18"},{"lineNumber":79,"author":{"gitId":"VishalJeyaram"},"content":"        for (String f : fluid.fluidArray) {","lastModifiedDate":"2021-10-18"},{"lineNumber":80,"author":{"gitId":"VishalJeyaram"},"content":"            if (f.contains(date)) {","lastModifiedDate":"2021-10-20"},{"lineNumber":81,"author":{"gitId":"VishalJeyaram"},"content":"                return;","lastModifiedDate":"2021-10-18"},{"lineNumber":82,"author":{"gitId":"VishalJeyaram"},"content":"            }","lastModifiedDate":"2021-10-18"},{"lineNumber":83,"author":{"gitId":"VishalJeyaram"},"content":"        }","lastModifiedDate":"2021-10-18"},{"lineNumber":84,"author":{"gitId":"VishalJeyaram"},"content":"        for (String w : workoutTracker.workouts) {","lastModifiedDate":"2021-10-24"},{"lineNumber":85,"author":{"gitId":"VishalJeyaram"},"content":"            if (w.contains(date)) {","lastModifiedDate":"2021-10-24"},{"lineNumber":86,"author":{"gitId":"VishalJeyaram"},"content":"                return;","lastModifiedDate":"2021-10-24"},{"lineNumber":87,"author":{"gitId":"VishalJeyaram"},"content":"            }","lastModifiedDate":"2021-10-24"},{"lineNumber":88,"author":{"gitId":"VishalJeyaram"},"content":"        }","lastModifiedDate":"2021-10-24"},{"lineNumber":89,"author":{"gitId":"VishalJeyaram"},"content":"        for (String w : weightTracker.weightsArray) {","lastModifiedDate":"2021-10-24"},{"lineNumber":90,"author":{"gitId":"VishalJeyaram"},"content":"            if (w.contains(date)) {","lastModifiedDate":"2021-10-24"},{"lineNumber":91,"author":{"gitId":"VishalJeyaram"},"content":"                return;","lastModifiedDate":"2021-10-24"},{"lineNumber":92,"author":{"gitId":"VishalJeyaram"},"content":"            }","lastModifiedDate":"2021-10-24"},{"lineNumber":93,"author":{"gitId":"VishalJeyaram"},"content":"        }","lastModifiedDate":"2021-10-24"},{"lineNumber":94,"author":{"gitId":"VishalJeyaram"},"content":"        dates.remove(date);","lastModifiedDate":"2021-10-24"},{"lineNumber":95,"author":{"gitId":"VishalJeyaram"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":96,"author":{"gitId":"VishalJeyaram"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":97,"author":{"gitId":"arvejw"},"content":"    //@@author arvejw","lastModifiedDate":"2021-11-05"},{"lineNumber":98,"author":{"gitId":"arvejw"},"content":"    /**","lastModifiedDate":"2021-11-05"},{"lineNumber":99,"author":{"gitId":"arvejw"},"content":"     * Sorts ArrayList of String by ascending order of date time.","lastModifiedDate":"2021-11-05"},{"lineNumber":100,"author":{"gitId":"arvejw"},"content":"     *","lastModifiedDate":"2021-11-05"},{"lineNumber":101,"author":{"gitId":"arvejw"},"content":"     * @param list ArrayList to be sorted.","lastModifiedDate":"2021-11-05"},{"lineNumber":102,"author":{"gitId":"arvejw"},"content":"     */","lastModifiedDate":"2021-11-05"},{"lineNumber":103,"author":{"gitId":"arvejw"},"content":"    public static void sortDateAndTime(ArrayList\u003cString\u003e list) {","lastModifiedDate":"2021-10-20"},{"lineNumber":104,"author":{"gitId":"arvejw"},"content":"        Collections.sort(list, new Comparator\u003cString\u003e() {","lastModifiedDate":"2021-10-21"},{"lineNumber":105,"author":{"gitId":"arvejw"},"content":"            public int compare(String o1, String o2) {","lastModifiedDate":"2021-10-20"},{"lineNumber":106,"author":{"gitId":"arvejw"},"content":"                LocalDateTime o1DateTime \u003d LocalDateTime.of(","lastModifiedDate":"2021-10-20"},{"lineNumber":107,"author":{"gitId":"arvejw"},"content":"                        LocalDate.parse(Parser.getDateNoDateTracker(o1),","lastModifiedDate":"2021-10-24"},{"lineNumber":108,"author":{"gitId":"arvejw"},"content":"                                DateTimeFormatter.ofPattern(\"dd/MM/yyyy\")),","lastModifiedDate":"2021-10-24"},{"lineNumber":109,"author":{"gitId":"arvejw"},"content":"                        LocalTime.parse(Parser.getTime(o1),","lastModifiedDate":"2021-10-24"},{"lineNumber":110,"author":{"gitId":"arvejw"},"content":"                                DateTimeFormatter.ofPattern(\"HH:mm\")));","lastModifiedDate":"2021-10-24"},{"lineNumber":111,"author":{"gitId":"arvejw"},"content":"                LocalDateTime o2DateTime \u003d LocalDateTime.of(","lastModifiedDate":"2021-10-20"},{"lineNumber":112,"author":{"gitId":"arvejw"},"content":"                        LocalDate.parse(Parser.getDateNoDateTracker(o2),","lastModifiedDate":"2021-10-24"},{"lineNumber":113,"author":{"gitId":"arvejw"},"content":"                                DateTimeFormatter.ofPattern(\"dd/MM/yyyy\")),","lastModifiedDate":"2021-10-24"},{"lineNumber":114,"author":{"gitId":"arvejw"},"content":"                        LocalTime.parse(Parser.getTime(o2),","lastModifiedDate":"2021-10-24"},{"lineNumber":115,"author":{"gitId":"arvejw"},"content":"                                DateTimeFormatter.ofPattern(\"HH:mm\")));","lastModifiedDate":"2021-10-24"},{"lineNumber":116,"author":{"gitId":"arvejw"},"content":"                return o1DateTime.compareTo(o2DateTime);","lastModifiedDate":"2021-10-20"},{"lineNumber":117,"author":{"gitId":"arvejw"},"content":"            }","lastModifiedDate":"2021-10-20"},{"lineNumber":118,"author":{"gitId":"arvejw"},"content":"        });","lastModifiedDate":"2021-10-20"},{"lineNumber":119,"author":{"gitId":"arvejw"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":120,"author":{"gitId":"arvejw"},"content":"}","lastModifiedDate":"2021-10-18"},{"lineNumber":121,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-21"}],"authorContributionMap":{"pragyan01":25,"VishalJeyaram":64,"arvejw":32}},{"path":"src/main/java/seedu/duke/Duke.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.duke;","lastModifiedDate":"2020-05-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":3,"author":{"gitId":"VishalJeyaram"},"content":"import seedu.duke.exceptions.DukeException;","lastModifiedDate":"2021-10-24"},{"lineNumber":4,"author":{"gitId":"pragyan01"},"content":"import seedu.duke.exceptions.fluid.FluidExceptions;","lastModifiedDate":"2021-10-28"},{"lineNumber":5,"author":{"gitId":"VishalJeyaram"},"content":"import seedu.duke.exceptions.foodbank.FoodBankException;","lastModifiedDate":"2021-10-28"},{"lineNumber":6,"author":{"gitId":"VishalJeyaram"},"content":"import seedu.duke.exceptions.meal.MealException;","lastModifiedDate":"2021-10-28"},{"lineNumber":7,"author":{"gitId":"arvejw"},"content":"import seedu.duke.exceptions.schedule.ScheduleException;","lastModifiedDate":"2021-10-24"},{"lineNumber":8,"author":{"gitId":"arvejw"},"content":"import seedu.duke.exceptions.workout.WorkoutException;","lastModifiedDate":"2021-10-24"},{"lineNumber":9,"author":{"gitId":"arvejw"},"content":"import seedu.duke.schedule.ScheduleTracker;","lastModifiedDate":"2021-10-22"},{"lineNumber":10,"author":{"gitId":"teoziyiivy"},"content":"import seedu.duke.exceptions.weight.WeightException;","lastModifiedDate":"2021-10-26"},{"lineNumber":11,"author":{"gitId":"VishalJeyaram"},"content":"import seedu.duke.exceptions.LoadException;","lastModifiedDate":"2021-10-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":13,"author":{"gitId":"VishalJeyaram"},"content":"import java.io.IOException;","lastModifiedDate":"2021-10-18"},{"lineNumber":14,"author":{"gitId":"VishalJeyaram"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-10-11"},{"lineNumber":15,"author":{"gitId":"arvejw"},"content":"import java.util.logging.LogManager;","lastModifiedDate":"2021-10-12"},{"lineNumber":16,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":17,"author":{"gitId":"VishalJeyaram"},"content":"import static seedu.duke.ClickfitMessages.IO_EXCEPTION_MESSAGE;","lastModifiedDate":"2021-10-24"},{"lineNumber":18,"author":{"gitId":"VishalJeyaram"},"content":"import static seedu.duke.ClickfitMessages.MEMORY_STARTUP_INCORRECT_INPUT;","lastModifiedDate":"2021-10-20"},{"lineNumber":19,"author":{"gitId":"VishalJeyaram"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":20,"author":{"gitId":"EdwardZYWang"},"content":"//@@author {ALL }","lastModifiedDate":"2021-10-27"},{"lineNumber":21,"author":{"gitId":"EdwardZYWang"},"content":"@SuppressWarnings(\"ALL\")","lastModifiedDate":"2021-10-07"},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":23,"author":{"gitId":"VishalJeyaram"},"content":"    private Meal meal;","lastModifiedDate":"2021-10-07"},{"lineNumber":24,"author":{"gitId":"VishalJeyaram"},"content":"    private Ui ui;","lastModifiedDate":"2021-10-07"},{"lineNumber":25,"author":{"gitId":"VishalJeyaram"},"content":"    private Fluid fluid;","lastModifiedDate":"2021-10-07"},{"lineNumber":26,"author":{"gitId":"arvejw"},"content":"    private ScheduleTracker scheduleTracker;","lastModifiedDate":"2021-10-11"},{"lineNumber":27,"author":{"gitId":"arvejw"},"content":"    private WorkoutTracker workoutTracker;","lastModifiedDate":"2021-10-11"},{"lineNumber":28,"author":{"gitId":"EdwardZYWang"},"content":"    private WeightTracker weightTracker;","lastModifiedDate":"2021-10-07"},{"lineNumber":29,"author":{"gitId":"VishalJeyaram"},"content":"    private CommandManager commandManager;","lastModifiedDate":"2021-10-07"},{"lineNumber":30,"author":{"gitId":"EdwardZYWang"},"content":"    private UserHelp userHelp;","lastModifiedDate":"2021-10-11"},{"lineNumber":31,"author":{"gitId":"pragyan01"},"content":"    private FoodBank foodbank;","lastModifiedDate":"2021-10-18"},{"lineNumber":32,"author":{"gitId":"VishalJeyaram"},"content":"    private DateTracker dateTracker;","lastModifiedDate":"2021-10-18"},{"lineNumber":33,"author":{"gitId":"VishalJeyaram"},"content":"    private Storage storage;","lastModifiedDate":"2021-10-18"},{"lineNumber":34,"author":{"gitId":"pragyan01"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":35,"author":{"gitId":"pragyan01"},"content":"    public static void main(String[] args) throws DukeException, FoodBankException, FluidExceptions {","lastModifiedDate":"2021-10-21"},{"lineNumber":36,"author":{"gitId":"VishalJeyaram"},"content":"        new Duke().run();","lastModifiedDate":"2021-10-11"},{"lineNumber":37,"author":{"gitId":"EdwardZYWang"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":38,"author":{"gitId":"VishalJeyaram"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":39,"author":{"gitId":"pragyan01"},"content":"    public Duke() throws DukeException, FoodBankException, FluidExceptions {","lastModifiedDate":"2021-10-21"},{"lineNumber":40,"author":{"gitId":"VishalJeyaram"},"content":"        try {","lastModifiedDate":"2021-10-21"},{"lineNumber":41,"author":{"gitId":"VishalJeyaram"},"content":"            meal \u003d new Meal();","lastModifiedDate":"2021-10-07"},{"lineNumber":42,"author":{"gitId":"VishalJeyaram"},"content":"            ui \u003d new Ui();","lastModifiedDate":"2021-10-07"},{"lineNumber":43,"author":{"gitId":"VishalJeyaram"},"content":"            fluid \u003d new Fluid();","lastModifiedDate":"2021-10-07"},{"lineNumber":44,"author":{"gitId":"arvejw"},"content":"            scheduleTracker \u003d new ScheduleTracker();","lastModifiedDate":"2021-10-11"},{"lineNumber":45,"author":{"gitId":"arvejw"},"content":"            workoutTracker \u003d new WorkoutTracker();","lastModifiedDate":"2021-10-11"},{"lineNumber":46,"author":{"gitId":"EdwardZYWang"},"content":"            weightTracker \u003d new WeightTracker();","lastModifiedDate":"2021-10-07"},{"lineNumber":47,"author":{"gitId":"EdwardZYWang"},"content":"            userHelp \u003d new UserHelp();","lastModifiedDate":"2021-10-11"},{"lineNumber":48,"author":{"gitId":"VishalJeyaram"},"content":"            storage \u003d new Storage();","lastModifiedDate":"2021-10-24"},{"lineNumber":49,"author":{"gitId":"pragyan01"},"content":"            foodbank \u003d new FoodBank();","lastModifiedDate":"2021-10-18"},{"lineNumber":50,"author":{"gitId":"VishalJeyaram"},"content":"            ui.welcomeMessage();","lastModifiedDate":"2021-10-21"},{"lineNumber":51,"author":{"gitId":"VishalJeyaram"},"content":"            ui.getInfo();","lastModifiedDate":"2021-10-21"},{"lineNumber":52,"author":{"gitId":"VishalJeyaram"},"content":"            if (ui.memoryStartup()) {","lastModifiedDate":"2021-10-21"},{"lineNumber":53,"author":{"gitId":"VishalJeyaram"},"content":"                meal.meals \u003d storage.loadMeals();","lastModifiedDate":"2021-10-21"},{"lineNumber":54,"author":{"gitId":"VishalJeyaram"},"content":"                fluid.fluidArray \u003d storage.loadFluids();","lastModifiedDate":"2021-10-21"},{"lineNumber":55,"author":{"gitId":"teoziyiivy"},"content":"                weightTracker.weightsArray \u003d storage.loadWeights();","lastModifiedDate":"2021-10-22"},{"lineNumber":56,"author":{"gitId":"VishalJeyaram"},"content":"                FoodBank.meals \u003d storage.loadMealLibrary();","lastModifiedDate":"2021-10-21"},{"lineNumber":57,"author":{"gitId":"VishalJeyaram"},"content":"                FoodBank.fluids \u003d storage.loadFluidLibrary();","lastModifiedDate":"2021-10-21"},{"lineNumber":58,"author":{"gitId":"arvejw"},"content":"                workoutTracker.workouts \u003d storage.loadWorkouts();","lastModifiedDate":"2021-10-22"},{"lineNumber":59,"author":{"gitId":"arvejw"},"content":"                scheduleTracker.loadScheduleData();","lastModifiedDate":"2021-10-22"},{"lineNumber":60,"author":{"gitId":"EdwardZYWang"},"content":"                storage.printLoadedLists();","lastModifiedDate":"2021-10-21"},{"lineNumber":61,"author":{"gitId":"VishalJeyaram"},"content":"                System.out.println(ClickfitMessages.INITIAL_PROMPT);","lastModifiedDate":"2021-10-24"},{"lineNumber":62,"author":{"gitId":"VishalJeyaram"},"content":"            }","lastModifiedDate":"2021-10-21"},{"lineNumber":63,"author":{"gitId":"VishalJeyaram"},"content":"            commandManager \u003d new CommandManager(storage, fluid,","lastModifiedDate":"2021-10-24"},{"lineNumber":64,"author":{"gitId":"VishalJeyaram"},"content":"                    meal, scheduleTracker, workoutTracker,","lastModifiedDate":"2021-10-24"},{"lineNumber":65,"author":{"gitId":"VishalJeyaram"},"content":"                    weightTracker, userHelp);","lastModifiedDate":"2021-10-24"},{"lineNumber":66,"author":{"gitId":"VishalJeyaram"},"content":"        } catch (LoadException e) {","lastModifiedDate":"2021-10-21"},{"lineNumber":67,"author":{"gitId":"VishalJeyaram"},"content":"            System.out.println(MEMORY_STARTUP_INCORRECT_INPUT);","lastModifiedDate":"2021-10-21"},{"lineNumber":68,"author":{"gitId":"VishalJeyaram"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-10-21"},{"lineNumber":69,"author":{"gitId":"VishalJeyaram"},"content":"            System.out.println(IO_EXCEPTION_MESSAGE);","lastModifiedDate":"2021-10-24"},{"lineNumber":70,"author":{"gitId":"VishalJeyaram"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":71,"author":{"gitId":"VishalJeyaram"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":73,"author":{"gitId":"VishalJeyaram"},"content":"    public void run() {","lastModifiedDate":"2021-10-07"},{"lineNumber":74,"author":{"gitId":"arvejw"},"content":"        while (!commandManager.isExit) {","lastModifiedDate":"2021-10-11"},{"lineNumber":75,"author":{"gitId":"arvejw"},"content":"            try {","lastModifiedDate":"2021-10-11"},{"lineNumber":76,"author":{"gitId":"arvejw"},"content":"                System.out.println(Ui.HORIZONTAL_BAR_LONG);","lastModifiedDate":"2021-11-03"},{"lineNumber":77,"author":{"gitId":"arvejw"},"content":"                System.out.print(Ui.USER_PROMPT);","lastModifiedDate":"2021-10-15"},{"lineNumber":78,"author":{"gitId":"VishalJeyaram"},"content":"                commandManager.commandChecker();","lastModifiedDate":"2021-10-07"},{"lineNumber":79,"author":{"gitId":"arvejw"},"content":"            } catch (ScheduleException se) {","lastModifiedDate":"2021-10-24"},{"lineNumber":80,"author":{"gitId":"arvejw"},"content":"                System.out.println(se.getMessage());","lastModifiedDate":"2021-10-24"},{"lineNumber":81,"author":{"gitId":"arvejw"},"content":"            } catch (WorkoutException we) {","lastModifiedDate":"2021-10-24"},{"lineNumber":82,"author":{"gitId":"arvejw"},"content":"                System.out.println(we.getMessage());","lastModifiedDate":"2021-10-24"},{"lineNumber":83,"author":{"gitId":"pragyan01"},"content":"            } catch (MealException e) {","lastModifiedDate":"2021-10-15"},{"lineNumber":84,"author":{"gitId":"VishalJeyaram"},"content":"                System.out.println(e.getMessage());","lastModifiedDate":"2021-10-28"},{"lineNumber":85,"author":{"gitId":"pragyan01"},"content":"            } catch (FluidExceptions e) {","lastModifiedDate":"2021-10-15"},{"lineNumber":86,"author":{"gitId":"pragyan01"},"content":"                System.out.println(e.getMessage());","lastModifiedDate":"2021-10-28"},{"lineNumber":87,"author":{"gitId":"pragyan01"},"content":"            } catch (FoodBankException e) {","lastModifiedDate":"2021-10-18"},{"lineNumber":88,"author":{"gitId":"VishalJeyaram"},"content":"                System.out.println(e.getMessage());","lastModifiedDate":"2021-11-04"},{"lineNumber":89,"author":{"gitId":"VishalJeyaram"},"content":"            } catch (IOException e) {","lastModifiedDate":"2021-10-18"},{"lineNumber":90,"author":{"gitId":"VishalJeyaram"},"content":"                System.out.println(ClickfitMessages.IO_EXCEPTION_MESSAGE);","lastModifiedDate":"2021-10-24"},{"lineNumber":91,"author":{"gitId":"teoziyiivy"},"content":"            } catch (WeightException weighte) {","lastModifiedDate":"2021-10-26"},{"lineNumber":92,"author":{"gitId":"teoziyiivy"},"content":"                System.out.println(weighte.getMessage());","lastModifiedDate":"2021-10-26"},{"lineNumber":93,"author":{"gitId":"arvejw"},"content":"            } catch (DateTimeParseException e) {","lastModifiedDate":"2021-11-04"},{"lineNumber":94,"author":{"gitId":"arvejw"},"content":"                System.out.println(ClickfitMessages.DATE_TIME_ERROR);","lastModifiedDate":"2021-11-04"},{"lineNumber":95,"author":{"gitId":"arvejw"},"content":"            } catch (NumberFormatException e) {","lastModifiedDate":"2021-11-04"},{"lineNumber":96,"author":{"gitId":"arvejw"},"content":"                System.out.println(ClickfitMessages.NUMBER_ERROR);","lastModifiedDate":"2021-11-04"},{"lineNumber":97,"author":{"gitId":"arvejw"},"content":"            } catch (NullPointerException e) {","lastModifiedDate":"2021-11-04"},{"lineNumber":98,"author":{"gitId":"arvejw"},"content":"                System.out.println(ClickfitMessages.INCORRECT_INPUT);","lastModifiedDate":"2021-11-04"},{"lineNumber":99,"author":{"gitId":"arvejw"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2021-11-04"},{"lineNumber":100,"author":{"gitId":"arvejw"},"content":"                System.out.println(\"I\u0027m sorry\");","lastModifiedDate":"2021-11-04"},{"lineNumber":101,"author":{"gitId":"VishalJeyaram"},"content":"            }","lastModifiedDate":"2021-10-11"},{"lineNumber":102,"author":{"gitId":"VishalJeyaram"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":103,"author":{"gitId":"arvejw"},"content":"        LogManager.getLogManager().reset();","lastModifiedDate":"2021-10-20"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":105,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-10-14"}],"authorContributionMap":{"pragyan01":10,"teoziyiivy":4,"-":7,"VishalJeyaram":48,"arvejw":28,"EdwardZYWang":8}},{"path":"src/main/java/seedu/duke/Fluid.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"pragyan01"},"content":"package seedu.duke;","lastModifiedDate":"2021-10-07"},{"lineNumber":2,"author":{"gitId":"pragyan01"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":3,"author":{"gitId":"VishalJeyaram"},"content":"import seedu.duke.exceptions.DukeException;","lastModifiedDate":"2021-10-14"},{"lineNumber":4,"author":{"gitId":"pragyan01"},"content":"import seedu.duke.exceptions.fluid.EmptyFluidList;","lastModifiedDate":"2021-11-06"},{"lineNumber":5,"author":{"gitId":"pragyan01"},"content":"import seedu.duke.exceptions.fluid.NoCaloriesEntered;","lastModifiedDate":"2021-11-06"},{"lineNumber":6,"author":{"gitId":"pragyan01"},"content":"import seedu.duke.exceptions.fluid.NoVolumeEntered;","lastModifiedDate":"2021-11-04"},{"lineNumber":7,"author":{"gitId":"VishalJeyaram"},"content":"import seedu.duke.exceptions.foodbank.FoodBankException;","lastModifiedDate":"2021-10-28"},{"lineNumber":8,"author":{"gitId":"pragyan01"},"content":"import seedu.duke.exceptions.fluid.DeleteEmptyFluidListException;","lastModifiedDate":"2021-10-28"},{"lineNumber":9,"author":{"gitId":"pragyan01"},"content":"import seedu.duke.exceptions.fluid.FluidExceptions;","lastModifiedDate":"2021-10-28"},{"lineNumber":10,"author":{"gitId":"pragyan01"},"content":"import seedu.duke.exceptions.fluid.InvalidFluidDescription;","lastModifiedDate":"2021-10-28"},{"lineNumber":11,"author":{"gitId":"pragyan01"},"content":"import seedu.duke.exceptions.fluid.NoDeleteFluidIndexException;","lastModifiedDate":"2021-10-28"},{"lineNumber":12,"author":{"gitId":"pragyan01"},"content":"import seedu.duke.exceptions.fluid.NoFluidToDelete;","lastModifiedDate":"2021-10-28"},{"lineNumber":13,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":14,"author":{"gitId":"VishalJeyaram"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-07"},{"lineNumber":15,"author":{"gitId":"arvejw"},"content":"import java.util.logging.Level;","lastModifiedDate":"2021-10-14"},{"lineNumber":16,"author":{"gitId":"pragyan01"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-10-14"},{"lineNumber":17,"author":{"gitId":"pragyan01"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":18,"author":{"gitId":"pragyan01"},"content":"//@@author pragyan01","lastModifiedDate":"2021-11-05"},{"lineNumber":19,"author":{"gitId":"pragyan01"},"content":"/**","lastModifiedDate":"2021-11-05"},{"lineNumber":20,"author":{"gitId":"pragyan01"},"content":" * Class responsible for handling fluid entries.","lastModifiedDate":"2021-11-05"},{"lineNumber":21,"author":{"gitId":"pragyan01"},"content":" *","lastModifiedDate":"2021-11-05"},{"lineNumber":22,"author":{"gitId":"pragyan01"},"content":" * @author pragyan01","lastModifiedDate":"2021-11-05"},{"lineNumber":23,"author":{"gitId":"pragyan01"},"content":" */","lastModifiedDate":"2021-11-05"},{"lineNumber":24,"author":{"gitId":"pragyan01"},"content":"public class Fluid extends Tracker {","lastModifiedDate":"2021-10-11"},{"lineNumber":25,"author":{"gitId":"pragyan01"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":26,"author":{"gitId":"pragyan01"},"content":"    protected ArrayList\u003cString\u003e fluidArray;","lastModifiedDate":"2021-10-18"},{"lineNumber":27,"author":{"gitId":"pragyan01"},"content":"    protected int fluidNumber;","lastModifiedDate":"2021-10-11"},{"lineNumber":28,"author":{"gitId":"pragyan01"},"content":"    protected String description;","lastModifiedDate":"2021-10-11"},{"lineNumber":29,"author":{"gitId":"pragyan01"},"content":"    protected int calories;","lastModifiedDate":"2021-10-11"},{"lineNumber":30,"author":{"gitId":"pragyan01"},"content":"    protected int volume;","lastModifiedDate":"2021-10-11"},{"lineNumber":31,"author":{"gitId":"pragyan01"},"content":"    protected String date;","lastModifiedDate":"2021-10-11"},{"lineNumber":32,"author":{"gitId":"pragyan01"},"content":"    protected String time;","lastModifiedDate":"2021-10-11"},{"lineNumber":33,"author":{"gitId":"pragyan01"},"content":"    protected int totalCalories;","lastModifiedDate":"2021-10-16"},{"lineNumber":34,"author":{"gitId":"pragyan01"},"content":"    protected int totalVolume;","lastModifiedDate":"2021-10-16"},{"lineNumber":35,"author":{"gitId":"pragyan01"},"content":"    private static final Logger logr \u003d Logger.getLogger(\"FluidLogger\");","lastModifiedDate":"2021-10-14"},{"lineNumber":36,"author":{"gitId":"pragyan01"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":37,"author":{"gitId":"pragyan01"},"content":"    /**","lastModifiedDate":"2021-11-05"},{"lineNumber":38,"author":{"gitId":"pragyan01"},"content":"     * Constructor of fluid class","lastModifiedDate":"2021-11-05"},{"lineNumber":39,"author":{"gitId":"pragyan01"},"content":"     *","lastModifiedDate":"2021-11-05"},{"lineNumber":40,"author":{"gitId":"pragyan01"},"content":"     */","lastModifiedDate":"2021-11-05"},{"lineNumber":41,"author":{"gitId":"pragyan01"},"content":"    public Fluid() {","lastModifiedDate":"2021-10-07"},{"lineNumber":42,"author":{"gitId":"pragyan01"},"content":"        this.fluidArray \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-18"},{"lineNumber":43,"author":{"gitId":"pragyan01"},"content":"        this.fluidNumber \u003d 0;","lastModifiedDate":"2021-10-16"},{"lineNumber":44,"author":{"gitId":"pragyan01"},"content":"        this.totalCalories \u003d 0;","lastModifiedDate":"2021-10-16"},{"lineNumber":45,"author":{"gitId":"pragyan01"},"content":"        logr.setLevel(Level.SEVERE);","lastModifiedDate":"2021-10-16"},{"lineNumber":46,"author":{"gitId":"pragyan01"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":47,"author":{"gitId":"pragyan01"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":48,"author":{"gitId":"pragyan01"},"content":"    /**","lastModifiedDate":"2021-11-05"},{"lineNumber":49,"author":{"gitId":"pragyan01"},"content":"     * This method splits user input to extract parameters such as description, calories, volume, date \u0026 time.","lastModifiedDate":"2021-11-05"},{"lineNumber":50,"author":{"gitId":"pragyan01"},"content":"     *","lastModifiedDate":"2021-11-05"},{"lineNumber":51,"author":{"gitId":"pragyan01"},"content":"     * @param inputArguments user input provided","lastModifiedDate":"2021-11-05"},{"lineNumber":52,"author":{"gitId":"pragyan01"},"content":"     * @throws FoodBankException if calories are not provided","lastModifiedDate":"2021-11-05"},{"lineNumber":53,"author":{"gitId":"pragyan01"},"content":"     * @throws FluidExceptions if description not provided","lastModifiedDate":"2021-11-05"},{"lineNumber":54,"author":{"gitId":"pragyan01"},"content":"     *","lastModifiedDate":"2021-11-05"},{"lineNumber":55,"author":{"gitId":"pragyan01"},"content":"     * @author pragyan01","lastModifiedDate":"2021-11-05"},{"lineNumber":56,"author":{"gitId":"pragyan01"},"content":"     */","lastModifiedDate":"2021-11-05"},{"lineNumber":57,"author":{"gitId":"pragyan01"},"content":"    public void generateFluidParameters(String inputArguments) throws FoodBankException, FluidExceptions {","lastModifiedDate":"2021-10-28"},{"lineNumber":58,"author":{"gitId":"pragyan01"},"content":"        logr.entering(getClass().getName(), \"generateFluidParameters\");","lastModifiedDate":"2021-11-06"},{"lineNumber":59,"author":{"gitId":"pragyan01"},"content":"        logr.info(\"start of generating fluid parameters\");","lastModifiedDate":"2021-11-06"},{"lineNumber":60,"author":{"gitId":"pragyan01"},"content":"        try {","lastModifiedDate":"2021-10-28"},{"lineNumber":61,"author":{"gitId":"pragyan01"},"content":"            description \u003d Parser.getDescription(inputArguments);","lastModifiedDate":"2021-10-11"},{"lineNumber":62,"author":{"gitId":"pragyan01"},"content":"            calories \u003d Parser.getCalories(inputArguments);","lastModifiedDate":"2021-10-11"},{"lineNumber":63,"author":{"gitId":"pragyan01"},"content":"            volume \u003d Parser.getVolume(inputArguments);","lastModifiedDate":"2021-10-11"},{"lineNumber":64,"author":{"gitId":"pragyan01"},"content":"            date \u003d Parser.getDate(inputArguments);","lastModifiedDate":"2021-10-11"},{"lineNumber":65,"author":{"gitId":"pragyan01"},"content":"            time \u003d Parser.getTime(inputArguments);","lastModifiedDate":"2021-10-11"},{"lineNumber":66,"author":{"gitId":"pragyan01"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-10-28"},{"lineNumber":67,"author":{"gitId":"pragyan01"},"content":"            logr.info(\"error generating parameters: invalidDescription\");","lastModifiedDate":"2021-11-06"},{"lineNumber":68,"author":{"gitId":"pragyan01"},"content":"            throw new InvalidFluidDescription();","lastModifiedDate":"2021-10-28"},{"lineNumber":69,"author":{"gitId":"pragyan01"},"content":"        }","lastModifiedDate":"2021-10-28"},{"lineNumber":70,"author":{"gitId":"pragyan01"},"content":"        logr.info(\"end of process-generateFluidParameters\");","lastModifiedDate":"2021-11-06"},{"lineNumber":71,"author":{"gitId":"pragyan01"},"content":"        logr.exiting(getClass().getName(), \"generateFluidParameters\");","lastModifiedDate":"2021-11-06"},{"lineNumber":72,"author":{"gitId":"pragyan01"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":73,"author":{"gitId":"pragyan01"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":74,"author":{"gitId":"pragyan01"},"content":"    /**","lastModifiedDate":"2021-11-05"},{"lineNumber":75,"author":{"gitId":"pragyan01"},"content":"     * This method adds a fluid entry to the fluid array.","lastModifiedDate":"2021-11-05"},{"lineNumber":76,"author":{"gitId":"pragyan01"},"content":"     *","lastModifiedDate":"2021-11-05"},{"lineNumber":77,"author":{"gitId":"pragyan01"},"content":"     * @param inputArguments user input provided","lastModifiedDate":"2021-11-05"},{"lineNumber":78,"author":{"gitId":"pragyan01"},"content":"     * @throws FluidExceptions if description or volume is not provided","lastModifiedDate":"2021-11-05"},{"lineNumber":79,"author":{"gitId":"pragyan01"},"content":"     * @throws FoodBankException if calories are not provided","lastModifiedDate":"2021-11-05"},{"lineNumber":80,"author":{"gitId":"pragyan01"},"content":"     *","lastModifiedDate":"2021-11-05"},{"lineNumber":81,"author":{"gitId":"pragyan01"},"content":"     * @author pragyan01","lastModifiedDate":"2021-11-05"},{"lineNumber":82,"author":{"gitId":"pragyan01"},"content":"     */","lastModifiedDate":"2021-11-05"},{"lineNumber":83,"author":{"gitId":"pragyan01"},"content":"    public void addFluid(String inputArguments) throws FluidExceptions, FoodBankException {","lastModifiedDate":"2021-11-05"},{"lineNumber":84,"author":{"gitId":"pragyan01"},"content":"        logr.entering(getClass().getName(), \"addFluid\");","lastModifiedDate":"2021-10-14"},{"lineNumber":85,"author":{"gitId":"pragyan01"},"content":"        logr.info(\"going to check for fluid parameter errors\");","lastModifiedDate":"2021-11-06"},{"lineNumber":86,"author":{"gitId":"pragyan01"},"content":"        if (inputArguments \u003d\u003d null) {","lastModifiedDate":"2021-10-28"},{"lineNumber":87,"author":{"gitId":"pragyan01"},"content":"            logr.info(\"error adding fluid: invalidDescription\");","lastModifiedDate":"2021-11-06"},{"lineNumber":88,"author":{"gitId":"pragyan01"},"content":"            throw new InvalidFluidDescription();","lastModifiedDate":"2021-10-28"},{"lineNumber":89,"author":{"gitId":"pragyan01"},"content":"        }","lastModifiedDate":"2021-10-28"},{"lineNumber":90,"author":{"gitId":"pragyan01"},"content":"        generateFluidParameters(inputArguments);","lastModifiedDate":"2021-10-11"},{"lineNumber":91,"author":{"gitId":"pragyan01"},"content":"        if (description.equals(\"\") || Parser.containsSeparators(description)) {","lastModifiedDate":"2021-10-28"},{"lineNumber":92,"author":{"gitId":"pragyan01"},"content":"            logr.info(\"error adding fluid: invalidDescription\");","lastModifiedDate":"2021-11-06"},{"lineNumber":93,"author":{"gitId":"pragyan01"},"content":"            throw new InvalidFluidDescription();","lastModifiedDate":"2021-10-28"},{"lineNumber":94,"author":{"gitId":"pragyan01"},"content":"        }","lastModifiedDate":"2021-10-14"},{"lineNumber":95,"author":{"gitId":"pragyan01"},"content":"        if ((volume \u003d\u003d 0) || !inputArguments.contains(\"/v\")) {","lastModifiedDate":"2021-11-06"},{"lineNumber":96,"author":{"gitId":"pragyan01"},"content":"            logr.info(\"error adding fluid: no volume provided\");","lastModifiedDate":"2021-11-06"},{"lineNumber":97,"author":{"gitId":"pragyan01"},"content":"            throw new NoVolumeEntered();","lastModifiedDate":"2021-11-04"},{"lineNumber":98,"author":{"gitId":"pragyan01"},"content":"        }","lastModifiedDate":"2021-11-04"},{"lineNumber":99,"author":{"gitId":"pragyan01"},"content":"        if ((calories \u003d\u003d 0) || !inputArguments.contains(\"/c\")) {           //DOES NOT WORK","lastModifiedDate":"2021-11-06"},{"lineNumber":100,"author":{"gitId":"pragyan01"},"content":"            logr.info(\"error adding fluid: no calories provided\");","lastModifiedDate":"2021-11-06"},{"lineNumber":101,"author":{"gitId":"pragyan01"},"content":"            throw new NoCaloriesEntered();","lastModifiedDate":"2021-11-06"},{"lineNumber":102,"author":{"gitId":"pragyan01"},"content":"        }","lastModifiedDate":"2021-11-06"},{"lineNumber":103,"author":{"gitId":"pragyan01"},"content":"        logr.info(\"no fluid parameter errors found!\");","lastModifiedDate":"2021-11-06"},{"lineNumber":104,"author":{"gitId":"pragyan01"},"content":"        inputArguments \u003d description + \" /c \" + calories + \" /v \" + volume + \" /d \" + date + \" /t \" + time;","lastModifiedDate":"2021-10-16"},{"lineNumber":105,"author":{"gitId":"pragyan01"},"content":"        fluidArray.add(inputArguments);","lastModifiedDate":"2021-10-11"},{"lineNumber":106,"author":{"gitId":"pragyan01"},"content":"        assert fluidArray.size() !\u003d 0 : \"Fluid array should not be empty\";","lastModifiedDate":"2021-11-06"},{"lineNumber":107,"author":{"gitId":"pragyan01"},"content":"        logr.info(\"fluid intake has been added\");","lastModifiedDate":"2021-10-14"},{"lineNumber":108,"author":{"gitId":"pragyan01"},"content":"        fluidNumber +\u003d 1;","lastModifiedDate":"2021-10-11"},{"lineNumber":109,"author":{"gitId":"pragyan01"},"content":"        totalCalories +\u003d calories;","lastModifiedDate":"2021-10-16"},{"lineNumber":110,"author":{"gitId":"pragyan01"},"content":"        totalVolume +\u003d volume;","lastModifiedDate":"2021-10-16"},{"lineNumber":111,"author":{"gitId":"pragyan01"},"content":"        logr.info(\"fluidNumber, totalCalories \u0026 totalVolume have been updated\");","lastModifiedDate":"2021-11-06"},{"lineNumber":112,"author":{"gitId":"pragyan01"},"content":"        System.out.println(\"Noted! CLI.ckFit has recorded your drink of \" + description + \" of \" + calories","lastModifiedDate":"2021-10-11"},{"lineNumber":113,"author":{"gitId":"pragyan01"},"content":"                + \" calories and \" + volume + \" ml on \" + date + \" \" + time + \".\" + \"\\n\");","lastModifiedDate":"2021-10-11"},{"lineNumber":114,"author":{"gitId":"pragyan01"},"content":"        logr.info(\"end of process-addFluid\");","lastModifiedDate":"2021-11-06"},{"lineNumber":115,"author":{"gitId":"pragyan01"},"content":"        logr.exiting(getClass().getName(), \"addFluid\");","lastModifiedDate":"2021-10-14"},{"lineNumber":116,"author":{"gitId":"pragyan01"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":117,"author":{"gitId":"pragyan01"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":118,"author":{"gitId":"pragyan01"},"content":"    /**","lastModifiedDate":"2021-11-05"},{"lineNumber":119,"author":{"gitId":"pragyan01"},"content":"     * This method deletes a fluid entry from the fluid array.","lastModifiedDate":"2021-11-05"},{"lineNumber":120,"author":{"gitId":"pragyan01"},"content":"     *","lastModifiedDate":"2021-11-05"},{"lineNumber":121,"author":{"gitId":"pragyan01"},"content":"     * @param inputArguments user input provided","lastModifiedDate":"2021-11-05"},{"lineNumber":122,"author":{"gitId":"pragyan01"},"content":"     * @throws FluidExceptions if fluid entry index is not provided","lastModifiedDate":"2021-11-05"},{"lineNumber":123,"author":{"gitId":"pragyan01"},"content":"     * @throws FoodBankException if the fluid entry does not exist","lastModifiedDate":"2021-11-05"},{"lineNumber":124,"author":{"gitId":"pragyan01"},"content":"     *","lastModifiedDate":"2021-11-05"},{"lineNumber":125,"author":{"gitId":"pragyan01"},"content":"     * @author pragyan01","lastModifiedDate":"2021-11-05"},{"lineNumber":126,"author":{"gitId":"pragyan01"},"content":"     */","lastModifiedDate":"2021-11-05"},{"lineNumber":127,"author":{"gitId":"pragyan01"},"content":"    public void deleteFluid(String inputArguments) throws FoodBankException, FluidExceptions {","lastModifiedDate":"2021-10-28"},{"lineNumber":128,"author":{"gitId":"pragyan01"},"content":"        logr.entering(getClass().getName(), \"deleteFluid\");","lastModifiedDate":"2021-10-14"},{"lineNumber":129,"author":{"gitId":"pragyan01"},"content":"        logr.info(\"going to check for index errors\");","lastModifiedDate":"2021-11-06"},{"lineNumber":130,"author":{"gitId":"pragyan01"},"content":"        if (inputArguments \u003d\u003d null) {","lastModifiedDate":"2021-10-28"},{"lineNumber":131,"author":{"gitId":"pragyan01"},"content":"            logr.info(\"error deleting fluid: invalid index provided\");","lastModifiedDate":"2021-11-06"},{"lineNumber":132,"author":{"gitId":"pragyan01"},"content":"            throw new NoDeleteFluidIndexException();","lastModifiedDate":"2021-10-28"},{"lineNumber":133,"author":{"gitId":"pragyan01"},"content":"        }","lastModifiedDate":"2021-10-28"},{"lineNumber":134,"author":{"gitId":"pragyan01"},"content":"        if (fluidArray.size() \u003d\u003d 0) {","lastModifiedDate":"2021-10-28"},{"lineNumber":135,"author":{"gitId":"pragyan01"},"content":"            logr.info(\"error deleting fluid: no fluid entries exist\");","lastModifiedDate":"2021-11-06"},{"lineNumber":136,"author":{"gitId":"pragyan01"},"content":"            throw new DeleteEmptyFluidListException();","lastModifiedDate":"2021-10-28"},{"lineNumber":137,"author":{"gitId":"pragyan01"},"content":"        }","lastModifiedDate":"2021-10-28"},{"lineNumber":138,"author":{"gitId":"pragyan01"},"content":"        int taskNumber \u003d Parser.parseStringToInteger(inputArguments) - 1;","lastModifiedDate":"2021-10-11"},{"lineNumber":139,"author":{"gitId":"pragyan01"},"content":"        logr.info(\"taskNumber extracted from user input\");","lastModifiedDate":"2021-11-06"},{"lineNumber":140,"author":{"gitId":"pragyan01"},"content":"        if ((taskNumber \u003c 0) || (taskNumber \u003e (fluidNumber - 1))) {","lastModifiedDate":"2021-10-28"},{"lineNumber":141,"author":{"gitId":"pragyan01"},"content":"            logr.info(\"error deleting fluid: specified fluid entry does not exist\");","lastModifiedDate":"2021-11-06"},{"lineNumber":142,"author":{"gitId":"pragyan01"},"content":"            throw new NoFluidToDelete();","lastModifiedDate":"2021-10-28"},{"lineNumber":143,"author":{"gitId":"pragyan01"},"content":"        }","lastModifiedDate":"2021-10-28"},{"lineNumber":144,"author":{"gitId":"pragyan01"},"content":"        generateFluidParameters(fluidArray.get(taskNumber));","lastModifiedDate":"2021-10-11"},{"lineNumber":145,"author":{"gitId":"pragyan01"},"content":"        assert fluidArray.size() !\u003d 0 : \"Fluid array should not be empty\";","lastModifiedDate":"2021-11-06"},{"lineNumber":146,"author":{"gitId":"pragyan01"},"content":"        fluidArray.remove(taskNumber);","lastModifiedDate":"2021-10-11"},{"lineNumber":147,"author":{"gitId":"pragyan01"},"content":"        logr.info(\"fluid entry has been removed\");","lastModifiedDate":"2021-11-06"},{"lineNumber":148,"author":{"gitId":"pragyan01"},"content":"        fluidNumber -\u003d 1;","lastModifiedDate":"2021-10-11"},{"lineNumber":149,"author":{"gitId":"pragyan01"},"content":"        totalCalories -\u003d calories;","lastModifiedDate":"2021-10-16"},{"lineNumber":150,"author":{"gitId":"pragyan01"},"content":"        totalVolume -\u003d volume;","lastModifiedDate":"2021-10-16"},{"lineNumber":151,"author":{"gitId":"pragyan01"},"content":"        logr.info(\"fluidNumber, totalCalories \u0026 totalVolume have been updated\");","lastModifiedDate":"2021-11-06"},{"lineNumber":152,"author":{"gitId":"pragyan01"},"content":"        System.out.println(\"Noted! CLI.ckFit has deleted your drink of \" + description + \" of \" + calories","lastModifiedDate":"2021-10-11"},{"lineNumber":153,"author":{"gitId":"pragyan01"},"content":"                + \" calories and \" + volume + \" ml on \" + date + \" \" + time + \".\" + \"\\n\");","lastModifiedDate":"2021-10-11"},{"lineNumber":154,"author":{"gitId":"pragyan01"},"content":"        logr.info(\"end of process-deleteFluid\");","lastModifiedDate":"2021-11-06"},{"lineNumber":155,"author":{"gitId":"pragyan01"},"content":"        logr.exiting(getClass().getName(), \"deleteFluid\");","lastModifiedDate":"2021-10-14"},{"lineNumber":156,"author":{"gitId":"pragyan01"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":157,"author":{"gitId":"pragyan01"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":158,"author":{"gitId":"pragyan01"},"content":"    /**","lastModifiedDate":"2021-11-05"},{"lineNumber":159,"author":{"gitId":"pragyan01"},"content":"     * This method lists out all fluid entries stored.","lastModifiedDate":"2021-11-05"},{"lineNumber":160,"author":{"gitId":"pragyan01"},"content":"     *","lastModifiedDate":"2021-11-05"},{"lineNumber":161,"author":{"gitId":"pragyan01"},"content":"     *@param userDate date provided by user","lastModifiedDate":"2021-11-05"},{"lineNumber":162,"author":{"gitId":"pragyan01"},"content":"     *@throws FluidExceptions if description for a fluid entry is not found","lastModifiedDate":"2021-11-05"},{"lineNumber":163,"author":{"gitId":"pragyan01"},"content":"     *@throws FoodBankException if calories for a fluid entry is not found","lastModifiedDate":"2021-11-05"},{"lineNumber":164,"author":{"gitId":"pragyan01"},"content":"     *","lastModifiedDate":"2021-11-05"},{"lineNumber":165,"author":{"gitId":"pragyan01"},"content":"     * @author pragyan01","lastModifiedDate":"2021-11-05"},{"lineNumber":166,"author":{"gitId":"pragyan01"},"content":"     */","lastModifiedDate":"2021-11-05"},{"lineNumber":167,"author":{"gitId":"pragyan01"},"content":"    public void listFluids(String userDate) throws FoodBankException, FluidExceptions {","lastModifiedDate":"2021-11-04"},{"lineNumber":168,"author":{"gitId":"pragyan01"},"content":"        logr.entering(getClass().getName(), \"listFluid\");","lastModifiedDate":"2021-11-06"},{"lineNumber":169,"author":{"gitId":"pragyan01"},"content":"        if (fluidArray.size() \u003d\u003d 0) {","lastModifiedDate":"2021-10-28"},{"lineNumber":170,"author":{"gitId":"pragyan01"},"content":"            logr.info(\"error listing fluids: fluid list is empty\");","lastModifiedDate":"2021-11-06"},{"lineNumber":171,"author":{"gitId":"pragyan01"},"content":"            throw new EmptyFluidList();","lastModifiedDate":"2021-11-06"},{"lineNumber":172,"author":{"gitId":"pragyan01"},"content":"        }","lastModifiedDate":"2021-10-28"},{"lineNumber":173,"author":{"gitId":"pragyan01"},"content":"        logr.info(\"checking if specific date is provided by user or all entries are to be printed\");","lastModifiedDate":"2021-11-06"},{"lineNumber":174,"author":{"gitId":"pragyan01"},"content":"        if (userDate.equals(\"all\")) {","lastModifiedDate":"2021-11-04"},{"lineNumber":175,"author":{"gitId":"pragyan01"},"content":"            logr.info(\"all entries are to be printed\");","lastModifiedDate":"2021-11-06"},{"lineNumber":176,"author":{"gitId":"pragyan01"},"content":"            int i \u003d 1;","lastModifiedDate":"2021-10-25"},{"lineNumber":177,"author":{"gitId":"pragyan01"},"content":"            totalCalories \u003d 0;","lastModifiedDate":"2021-10-25"},{"lineNumber":178,"author":{"gitId":"pragyan01"},"content":"            fluidNumber \u003d 0;","lastModifiedDate":"2021-10-25"},{"lineNumber":179,"author":{"gitId":"pragyan01"},"content":"            logr.info(\"totalCalories \u0026 fluidNumber have been reset\");","lastModifiedDate":"2021-11-06"},{"lineNumber":180,"author":{"gitId":"pragyan01"},"content":"            assert fluidArray.size() !\u003d 0 : \"Fluid array should not be empty\";","lastModifiedDate":"2021-11-06"},{"lineNumber":181,"author":{"gitId":"pragyan01"},"content":"            for (String fluid : fluidArray) {","lastModifiedDate":"2021-10-25"},{"lineNumber":182,"author":{"gitId":"pragyan01"},"content":"                generateFluidParameters(fluid);","lastModifiedDate":"2021-10-25"},{"lineNumber":183,"author":{"gitId":"pragyan01"},"content":"                System.out.println(i + \". \" + description);","lastModifiedDate":"2021-10-25"},{"lineNumber":184,"author":{"gitId":"pragyan01"},"content":"                System.out.println(\"Calories: \" + calories);","lastModifiedDate":"2021-10-25"},{"lineNumber":185,"author":{"gitId":"pragyan01"},"content":"                System.out.println(\"Volume: \" + volume);","lastModifiedDate":"2021-10-25"},{"lineNumber":186,"author":{"gitId":"pragyan01"},"content":"                System.out.println(\"Date: \" + date);","lastModifiedDate":"2021-10-25"},{"lineNumber":187,"author":{"gitId":"pragyan01"},"content":"                System.out.println(\"Time: \" + time + \"\\n\");","lastModifiedDate":"2021-10-25"},{"lineNumber":188,"author":{"gitId":"pragyan01"},"content":"                i +\u003d 1;","lastModifiedDate":"2021-10-25"},{"lineNumber":189,"author":{"gitId":"pragyan01"},"content":"                totalCalories +\u003d calories;","lastModifiedDate":"2021-10-25"},{"lineNumber":190,"author":{"gitId":"pragyan01"},"content":"                fluidNumber +\u003d 1;","lastModifiedDate":"2021-10-25"},{"lineNumber":191,"author":{"gitId":"pragyan01"},"content":"            }","lastModifiedDate":"2021-10-25"},{"lineNumber":192,"author":{"gitId":"pragyan01"},"content":"            logr.info(\"all entries have been listed\");","lastModifiedDate":"2021-11-06"},{"lineNumber":193,"author":{"gitId":"pragyan01"},"content":"        } else {","lastModifiedDate":"2021-10-25"},{"lineNumber":194,"author":{"gitId":"pragyan01"},"content":"            logr.info(\"fluid entries are to be listed for a specific date\");","lastModifiedDate":"2021-11-06"},{"lineNumber":195,"author":{"gitId":"pragyan01"},"content":"            int i \u003d 1;","lastModifiedDate":"2021-10-11"},{"lineNumber":196,"author":{"gitId":"pragyan01"},"content":"            totalCalories \u003d 0;","lastModifiedDate":"2021-10-21"},{"lineNumber":197,"author":{"gitId":"pragyan01"},"content":"            fluidNumber \u003d 0;","lastModifiedDate":"2021-10-21"},{"lineNumber":198,"author":{"gitId":"pragyan01"},"content":"            logr.info(\"totalCalories \u0026 fluidNumber have been reset\");","lastModifiedDate":"2021-11-06"},{"lineNumber":199,"author":{"gitId":"pragyan01"},"content":"            assert fluidArray.size() !\u003d 0 : \"Fluid array should not be empty\";","lastModifiedDate":"2021-11-06"},{"lineNumber":200,"author":{"gitId":"pragyan01"},"content":"            for (String fluid : fluidArray) {","lastModifiedDate":"2021-10-11"},{"lineNumber":201,"author":{"gitId":"pragyan01"},"content":"                if (fluid.contains(userDate)) {","lastModifiedDate":"2021-11-04"},{"lineNumber":202,"author":{"gitId":"pragyan01"},"content":"                    logr.log(Level.INFO, \"generating fluid parameters\");","lastModifiedDate":"2021-10-25"},{"lineNumber":203,"author":{"gitId":"pragyan01"},"content":"                    generateFluidParameters(fluid);","lastModifiedDate":"2021-10-11"},{"lineNumber":204,"author":{"gitId":"pragyan01"},"content":"                    logr.log(Level.INFO, \"fluid parameters generated\");","lastModifiedDate":"2021-10-25"},{"lineNumber":205,"author":{"gitId":"pragyan01"},"content":"                    System.out.println(i + \". \" + description);","lastModifiedDate":"2021-10-14"},{"lineNumber":206,"author":{"gitId":"pragyan01"},"content":"                    System.out.println(\"Calories: \" + calories);","lastModifiedDate":"2021-10-14"},{"lineNumber":207,"author":{"gitId":"pragyan01"},"content":"                    System.out.println(\"Volume: \" + volume);","lastModifiedDate":"2021-10-14"},{"lineNumber":208,"author":{"gitId":"pragyan01"},"content":"                    System.out.println(\"Date: \" + date);","lastModifiedDate":"2021-10-14"},{"lineNumber":209,"author":{"gitId":"pragyan01"},"content":"                    System.out.println(\"Time: \" + time + \"\\n\");","lastModifiedDate":"2021-10-14"},{"lineNumber":210,"author":{"gitId":"pragyan01"},"content":"                    i +\u003d 1;","lastModifiedDate":"2021-10-25"},{"lineNumber":211,"author":{"gitId":"pragyan01"},"content":"                    totalCalories +\u003d calories;","lastModifiedDate":"2021-10-21"},{"lineNumber":212,"author":{"gitId":"pragyan01"},"content":"                    fluidNumber +\u003d 1;","lastModifiedDate":"2021-10-25"},{"lineNumber":213,"author":{"gitId":"pragyan01"},"content":"                }","lastModifiedDate":"2021-10-25"},{"lineNumber":214,"author":{"gitId":"pragyan01"},"content":"            }","lastModifiedDate":"2021-10-21"},{"lineNumber":215,"author":{"gitId":"pragyan01"},"content":"            logr.info(\"fluid entries have been listed for a specific date\");","lastModifiedDate":"2021-11-06"},{"lineNumber":216,"author":{"gitId":"pragyan01"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":217,"author":{"gitId":"pragyan01"},"content":"        System.out.println(\"Total number of fluids: \" + fluidNumber);","lastModifiedDate":"2021-10-17"},{"lineNumber":218,"author":{"gitId":"pragyan01"},"content":"        System.out.println(\"Total calories: \" + totalCalories);","lastModifiedDate":"2021-10-16"},{"lineNumber":219,"author":{"gitId":"pragyan01"},"content":"        logr.info(\"fluidNumber and totalCalories have been updated and printed\");","lastModifiedDate":"2021-11-06"},{"lineNumber":220,"author":{"gitId":"pragyan01"},"content":"        logr.log(Level.INFO, \"end of process-listFluid\");","lastModifiedDate":"2021-11-06"},{"lineNumber":221,"author":{"gitId":"pragyan01"},"content":"        logr.exiting(getClass().getName(), \"listFluids\");","lastModifiedDate":"2021-10-25"},{"lineNumber":222,"author":{"gitId":"pragyan01"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":223,"author":{"gitId":"pragyan01"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":224,"author":{"gitId":"pragyan01"},"content":"    /**","lastModifiedDate":"2021-11-05"},{"lineNumber":225,"author":{"gitId":"pragyan01"},"content":"     * This method sums up the calorie total for a specific date.","lastModifiedDate":"2021-11-05"},{"lineNumber":226,"author":{"gitId":"pragyan01"},"content":"     *","lastModifiedDate":"2021-11-05"},{"lineNumber":227,"author":{"gitId":"pragyan01"},"content":"     *@param date date provided by user","lastModifiedDate":"2021-11-05"},{"lineNumber":228,"author":{"gitId":"pragyan01"},"content":"     *@throws FluidExceptions if description for a fluid entry is not found","lastModifiedDate":"2021-11-05"},{"lineNumber":229,"author":{"gitId":"pragyan01"},"content":"     *@throws FoodBankException if calories for a fluid entry is not found","lastModifiedDate":"2021-11-05"},{"lineNumber":230,"author":{"gitId":"pragyan01"},"content":"     *@return total calorie for the specific date","lastModifiedDate":"2021-11-05"},{"lineNumber":231,"author":{"gitId":"pragyan01"},"content":"     *","lastModifiedDate":"2021-11-05"},{"lineNumber":232,"author":{"gitId":"pragyan01"},"content":"     *@author pragyan01","lastModifiedDate":"2021-11-05"},{"lineNumber":233,"author":{"gitId":"pragyan01"},"content":"     */","lastModifiedDate":"2021-11-05"},{"lineNumber":234,"author":{"gitId":"pragyan01"},"content":"    public int getCalories(String date) throws FoodBankException, FluidExceptions {","lastModifiedDate":"2021-10-28"},{"lineNumber":235,"author":{"gitId":"pragyan01"},"content":"        logr.entering(getClass().getName(), \"getCalories\");","lastModifiedDate":"2021-11-06"},{"lineNumber":236,"author":{"gitId":"pragyan01"},"content":"        int calorieTotal \u003d 0;","lastModifiedDate":"2021-10-21"},{"lineNumber":237,"author":{"gitId":"pragyan01"},"content":"        logr.log(Level.INFO, \"calorieTotal has been reset\");","lastModifiedDate":"2021-11-06"},{"lineNumber":238,"author":{"gitId":"pragyan01"},"content":"        assert fluidArray.size() !\u003d 0 : \"Fluid array should not be empty\";","lastModifiedDate":"2021-11-06"},{"lineNumber":239,"author":{"gitId":"pragyan01"},"content":"        for (String fluid : fluidArray) {","lastModifiedDate":"2021-10-21"},{"lineNumber":240,"author":{"gitId":"pragyan01"},"content":"            if (fluid.contains(date)) {","lastModifiedDate":"2021-10-21"},{"lineNumber":241,"author":{"gitId":"pragyan01"},"content":"                generateFluidParameters(fluid);","lastModifiedDate":"2021-10-21"},{"lineNumber":242,"author":{"gitId":"pragyan01"},"content":"                calorieTotal +\u003d calories;","lastModifiedDate":"2021-10-21"},{"lineNumber":243,"author":{"gitId":"pragyan01"},"content":"                assert ((calorieTotal \u003e 0) || (calorieTotal \u003d\u003d 0));","lastModifiedDate":"2021-11-06"},{"lineNumber":244,"author":{"gitId":"pragyan01"},"content":"            }","lastModifiedDate":"2021-10-21"},{"lineNumber":245,"author":{"gitId":"pragyan01"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":246,"author":{"gitId":"pragyan01"},"content":"        logr.log(Level.INFO, \"calorieTotal for specific date has been updated and printed\");","lastModifiedDate":"2021-11-06"},{"lineNumber":247,"author":{"gitId":"pragyan01"},"content":"        logr.log(Level.INFO, \"end of process-getCalories\");","lastModifiedDate":"2021-11-06"},{"lineNumber":248,"author":{"gitId":"pragyan01"},"content":"        logr.exiting(getClass().getName(), \"getCalories\");","lastModifiedDate":"2021-11-06"},{"lineNumber":249,"author":{"gitId":"pragyan01"},"content":"        return calorieTotal;","lastModifiedDate":"2021-10-21"},{"lineNumber":250,"author":{"gitId":"pragyan01"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":251,"author":{"gitId":"pragyan01"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":252,"author":{"gitId":"pragyan01"},"content":"    /**","lastModifiedDate":"2021-11-05"},{"lineNumber":253,"author":{"gitId":"pragyan01"},"content":"     * This method sums up the volume total for a specific date.","lastModifiedDate":"2021-11-05"},{"lineNumber":254,"author":{"gitId":"pragyan01"},"content":"     *","lastModifiedDate":"2021-11-05"},{"lineNumber":255,"author":{"gitId":"pragyan01"},"content":"     *@param date date provided by user","lastModifiedDate":"2021-11-05"},{"lineNumber":256,"author":{"gitId":"pragyan01"},"content":"     *@throws FluidExceptions if description for a fluid entry is not found","lastModifiedDate":"2021-11-05"},{"lineNumber":257,"author":{"gitId":"pragyan01"},"content":"     *@throws FoodBankException if calories for a fluid entry is not found","lastModifiedDate":"2021-11-05"},{"lineNumber":258,"author":{"gitId":"pragyan01"},"content":"     *@return total volume for the specific date","lastModifiedDate":"2021-11-05"},{"lineNumber":259,"author":{"gitId":"pragyan01"},"content":"     *","lastModifiedDate":"2021-11-05"},{"lineNumber":260,"author":{"gitId":"pragyan01"},"content":"     *@author pragyan01","lastModifiedDate":"2021-11-05"},{"lineNumber":261,"author":{"gitId":"pragyan01"},"content":"     */","lastModifiedDate":"2021-11-05"},{"lineNumber":262,"author":{"gitId":"pragyan01"},"content":"    public int getVolume(String date) throws FoodBankException, FluidExceptions {","lastModifiedDate":"2021-10-28"},{"lineNumber":263,"author":{"gitId":"pragyan01"},"content":"        logr.entering(getClass().getName(), \"getVolume\");","lastModifiedDate":"2021-11-06"},{"lineNumber":264,"author":{"gitId":"pragyan01"},"content":"        int volumeTotal \u003d 0;","lastModifiedDate":"2021-10-21"},{"lineNumber":265,"author":{"gitId":"pragyan01"},"content":"        logr.log(Level.INFO, \"volumeTotal has been reset\");","lastModifiedDate":"2021-11-06"},{"lineNumber":266,"author":{"gitId":"pragyan01"},"content":"        assert fluidArray.size() !\u003d 0 : \"Fluid array should not be empty\";","lastModifiedDate":"2021-11-06"},{"lineNumber":267,"author":{"gitId":"pragyan01"},"content":"        for (String fluid : fluidArray) {","lastModifiedDate":"2021-10-21"},{"lineNumber":268,"author":{"gitId":"pragyan01"},"content":"            if (fluid.contains(date)) {","lastModifiedDate":"2021-10-21"},{"lineNumber":269,"author":{"gitId":"pragyan01"},"content":"                generateFluidParameters(fluid);","lastModifiedDate":"2021-10-21"},{"lineNumber":270,"author":{"gitId":"pragyan01"},"content":"                volumeTotal +\u003d volume;","lastModifiedDate":"2021-10-21"},{"lineNumber":271,"author":{"gitId":"pragyan01"},"content":"                assert ((volumeTotal \u003e 0) || (volumeTotal \u003d\u003d 0));","lastModifiedDate":"2021-11-06"},{"lineNumber":272,"author":{"gitId":"pragyan01"},"content":"            }","lastModifiedDate":"2021-10-21"},{"lineNumber":273,"author":{"gitId":"pragyan01"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":274,"author":{"gitId":"pragyan01"},"content":"        logr.log(Level.INFO, \"volumeTotal for specific date has been updated and printed\");","lastModifiedDate":"2021-11-06"},{"lineNumber":275,"author":{"gitId":"pragyan01"},"content":"        logr.log(Level.INFO, \"end of process-getVolume\");","lastModifiedDate":"2021-11-06"},{"lineNumber":276,"author":{"gitId":"pragyan01"},"content":"        logr.exiting(getClass().getName(), \"getVolume\");","lastModifiedDate":"2021-11-06"},{"lineNumber":277,"author":{"gitId":"pragyan01"},"content":"        return volumeTotal;","lastModifiedDate":"2021-10-21"},{"lineNumber":278,"author":{"gitId":"pragyan01"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":279,"author":{"gitId":"pragyan01"},"content":"}","lastModifiedDate":"2021-10-07"}],"authorContributionMap":{"pragyan01":274,"VishalJeyaram":3,"arvejw":1,"EdwardZYWang":1}},{"path":"src/main/java/seedu/duke/FoodBank.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"pragyan01"},"content":"package seedu.duke;","lastModifiedDate":"2021-10-18"},{"lineNumber":2,"author":{"gitId":"pragyan01"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":3,"author":{"gitId":"pragyan01"},"content":"import seedu.duke.exceptions.DukeException;","lastModifiedDate":"2021-10-18"},{"lineNumber":4,"author":{"gitId":"pragyan01"},"content":"import seedu.duke.exceptions.foodbank.DuplicateFood;","lastModifiedDate":"2021-11-04"},{"lineNumber":5,"author":{"gitId":"VishalJeyaram"},"content":"import seedu.duke.exceptions.foodbank.EmptyFluidBankException;","lastModifiedDate":"2021-10-28"},{"lineNumber":6,"author":{"gitId":"VishalJeyaram"},"content":"import seedu.duke.exceptions.foodbank.EmptyFoodDescription;","lastModifiedDate":"2021-10-28"},{"lineNumber":7,"author":{"gitId":"VishalJeyaram"},"content":"import seedu.duke.exceptions.foodbank.EmptyMealBankException;","lastModifiedDate":"2021-11-04"},{"lineNumber":8,"author":{"gitId":"VishalJeyaram"},"content":"import seedu.duke.exceptions.foodbank.FoodBankException;","lastModifiedDate":"2021-11-04"},{"lineNumber":9,"author":{"gitId":"VishalJeyaram"},"content":"import seedu.duke.exceptions.foodbank.InvalidFluidIndexException;","lastModifiedDate":"2021-11-04"},{"lineNumber":10,"author":{"gitId":"VishalJeyaram"},"content":"import seedu.duke.exceptions.foodbank.InvalidMealIndexException;","lastModifiedDate":"2021-11-04"},{"lineNumber":11,"author":{"gitId":"VishalJeyaram"},"content":"import seedu.duke.exceptions.foodbank.NoFoodFoundException;","lastModifiedDate":"2021-10-28"},{"lineNumber":12,"author":{"gitId":"VishalJeyaram"},"content":"import seedu.duke.exceptions.foodbank.NoFoodIndexException;","lastModifiedDate":"2021-10-28"},{"lineNumber":13,"author":{"gitId":"VishalJeyaram"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":14,"author":{"gitId":"pragyan01"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-18"},{"lineNumber":15,"author":{"gitId":"pragyan01"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":16,"author":{"gitId":"pragyan01"},"content":"public class FoodBank {","lastModifiedDate":"2021-10-18"},{"lineNumber":17,"author":{"gitId":"VishalJeyaram"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":18,"author":{"gitId":"pragyan01"},"content":"    protected static ArrayList\u003cString\u003e meals;","lastModifiedDate":"2021-10-18"},{"lineNumber":19,"author":{"gitId":"pragyan01"},"content":"    protected static ArrayList\u003cString\u003e fluids;","lastModifiedDate":"2021-10-18"},{"lineNumber":20,"author":{"gitId":"pragyan01"},"content":"    protected static int calories;","lastModifiedDate":"2021-10-18"},{"lineNumber":21,"author":{"gitId":"pragyan01"},"content":"    protected static String description;","lastModifiedDate":"2021-10-18"},{"lineNumber":22,"author":{"gitId":"pragyan01"},"content":"    protected static int totalMeals;","lastModifiedDate":"2021-10-18"},{"lineNumber":23,"author":{"gitId":"pragyan01"},"content":"    protected static int totalFluids;","lastModifiedDate":"2021-10-18"},{"lineNumber":24,"author":{"gitId":"pragyan01"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":25,"author":{"gitId":"VishalJeyaram"},"content":"    //@@author VishalJeyaram","lastModifiedDate":"2021-11-02"},{"lineNumber":26,"author":{"gitId":"VishalJeyaram"},"content":"    /**","lastModifiedDate":"2021-11-05"},{"lineNumber":27,"author":{"gitId":"VishalJeyaram"},"content":"     * Constructor for FoodBank class used to initialize the instance variables","lastModifiedDate":"2021-11-05"},{"lineNumber":28,"author":{"gitId":"VishalJeyaram"},"content":"     * such as the arraylist to store the library meals, the arraylist to store","lastModifiedDate":"2021-11-05"},{"lineNumber":29,"author":{"gitId":"VishalJeyaram"},"content":"     * the library fluids, two integer variables to store the number of library","lastModifiedDate":"2021-11-05"},{"lineNumber":30,"author":{"gitId":"VishalJeyaram"},"content":"     * meals and the number of library fluids respectively.","lastModifiedDate":"2021-11-05"},{"lineNumber":31,"author":{"gitId":"VishalJeyaram"},"content":"     */","lastModifiedDate":"2021-11-05"},{"lineNumber":32,"author":{"gitId":"VishalJeyaram"},"content":"    public FoodBank() {","lastModifiedDate":"2021-10-18"},{"lineNumber":33,"author":{"gitId":"VishalJeyaram"},"content":"        meals \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-18"},{"lineNumber":34,"author":{"gitId":"VishalJeyaram"},"content":"        fluids \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-18"},{"lineNumber":35,"author":{"gitId":"VishalJeyaram"},"content":"        totalMeals \u003d 0;","lastModifiedDate":"2021-10-18"},{"lineNumber":36,"author":{"gitId":"VishalJeyaram"},"content":"        totalFluids \u003d 0;","lastModifiedDate":"2021-10-18"},{"lineNumber":37,"author":{"gitId":"VishalJeyaram"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":38,"author":{"gitId":"VishalJeyaram"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":39,"author":{"gitId":"pragyan01"},"content":"    //@@author pragyan01","lastModifiedDate":"2021-11-05"},{"lineNumber":40,"author":{"gitId":"pragyan01"},"content":"    /**","lastModifiedDate":"2021-11-05"},{"lineNumber":41,"author":{"gitId":"pragyan01"},"content":"     * This method splits user input to extract parameters such as description and calories.","lastModifiedDate":"2021-11-05"},{"lineNumber":42,"author":{"gitId":"pragyan01"},"content":"     *","lastModifiedDate":"2021-11-05"},{"lineNumber":43,"author":{"gitId":"pragyan01"},"content":"     * @param inputArguments user input provided","lastModifiedDate":"2021-11-05"},{"lineNumber":44,"author":{"gitId":"pragyan01"},"content":"     * @throws FoodBankException if calories are not provided","lastModifiedDate":"2021-11-05"},{"lineNumber":45,"author":{"gitId":"pragyan01"},"content":"     *","lastModifiedDate":"2021-11-05"},{"lineNumber":46,"author":{"gitId":"pragyan01"},"content":"     * @author pragyan01","lastModifiedDate":"2021-11-05"},{"lineNumber":47,"author":{"gitId":"pragyan01"},"content":"     */","lastModifiedDate":"2021-11-05"},{"lineNumber":48,"author":{"gitId":"pragyan01"},"content":"    public static void generateParameters(String inputArguments) throws FoodBankException {","lastModifiedDate":"2021-10-18"},{"lineNumber":49,"author":{"gitId":"pragyan01"},"content":"        try {","lastModifiedDate":"2021-10-18"},{"lineNumber":50,"author":{"gitId":"pragyan01"},"content":"            calories \u003d Parser.getCalories(inputArguments);","lastModifiedDate":"2021-10-18"},{"lineNumber":51,"author":{"gitId":"pragyan01"},"content":"            description \u003d Parser.getDescription(inputArguments);","lastModifiedDate":"2021-10-18"},{"lineNumber":52,"author":{"gitId":"pragyan01"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-10-18"},{"lineNumber":53,"author":{"gitId":"pragyan01"},"content":"            System.out.println(\"run away\");","lastModifiedDate":"2021-10-18"},{"lineNumber":54,"author":{"gitId":"pragyan01"},"content":"        }","lastModifiedDate":"2021-10-18"},{"lineNumber":55,"author":{"gitId":"pragyan01"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":56,"author":{"gitId":"pragyan01"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":57,"author":{"gitId":"pragyan01"},"content":"    //@@author pragyan01","lastModifiedDate":"2021-11-05"},{"lineNumber":58,"author":{"gitId":"pragyan01"},"content":"    /**","lastModifiedDate":"2021-11-05"},{"lineNumber":59,"author":{"gitId":"pragyan01"},"content":"     * This method adds a fluid entry to the fluid library.","lastModifiedDate":"2021-11-05"},{"lineNumber":60,"author":{"gitId":"pragyan01"},"content":"     *","lastModifiedDate":"2021-11-05"},{"lineNumber":61,"author":{"gitId":"pragyan01"},"content":"     * @param inputArguments user input provided","lastModifiedDate":"2021-11-05"},{"lineNumber":62,"author":{"gitId":"pragyan01"},"content":"     * @throws FoodBankException if user input is null","lastModifiedDate":"2021-11-05"},{"lineNumber":63,"author":{"gitId":"pragyan01"},"content":"     *","lastModifiedDate":"2021-11-05"},{"lineNumber":64,"author":{"gitId":"pragyan01"},"content":"     * @author pragyan01","lastModifiedDate":"2021-11-05"},{"lineNumber":65,"author":{"gitId":"pragyan01"},"content":"     */","lastModifiedDate":"2021-11-05"},{"lineNumber":66,"author":{"gitId":"pragyan01"},"content":"    public static void addCustomFluid(String inputArguments) throws FoodBankException {","lastModifiedDate":"2021-10-18"},{"lineNumber":67,"author":{"gitId":"pragyan01"},"content":"        totalFluids \u003d fluids.size();","lastModifiedDate":"2021-11-04"},{"lineNumber":68,"author":{"gitId":"pragyan01"},"content":"        if (inputArguments \u003d\u003d null) {","lastModifiedDate":"2021-10-28"},{"lineNumber":69,"author":{"gitId":"pragyan01"},"content":"            throw new EmptyFoodDescription();","lastModifiedDate":"2021-10-28"},{"lineNumber":70,"author":{"gitId":"pragyan01"},"content":"        }","lastModifiedDate":"2021-10-28"},{"lineNumber":71,"author":{"gitId":"pragyan01"},"content":"        generateParameters(inputArguments);","lastModifiedDate":"2021-10-18"},{"lineNumber":72,"author":{"gitId":"pragyan01"},"content":"        inputArguments \u003d description + \" /c \" + calories;","lastModifiedDate":"2021-10-18"},{"lineNumber":73,"author":{"gitId":"pragyan01"},"content":"        if (Parser.containsSeparators(description)) {","lastModifiedDate":"2021-10-28"},{"lineNumber":74,"author":{"gitId":"pragyan01"},"content":"            throw new FoodBankException();","lastModifiedDate":"2021-10-28"},{"lineNumber":75,"author":{"gitId":"pragyan01"},"content":"        }","lastModifiedDate":"2021-10-28"},{"lineNumber":76,"author":{"gitId":"pragyan01"},"content":"        for (String f : fluids) {","lastModifiedDate":"2021-11-04"},{"lineNumber":77,"author":{"gitId":"pragyan01"},"content":"            if (f.contains(description)) {","lastModifiedDate":"2021-11-04"},{"lineNumber":78,"author":{"gitId":"pragyan01"},"content":"                throw new DuplicateFood();","lastModifiedDate":"2021-11-04"},{"lineNumber":79,"author":{"gitId":"pragyan01"},"content":"            }","lastModifiedDate":"2021-11-04"},{"lineNumber":80,"author":{"gitId":"pragyan01"},"content":"        }","lastModifiedDate":"2021-11-04"},{"lineNumber":81,"author":{"gitId":"pragyan01"},"content":"        fluids.add(inputArguments);","lastModifiedDate":"2021-10-18"},{"lineNumber":82,"author":{"gitId":"pragyan01"},"content":"        totalFluids +\u003d 1;","lastModifiedDate":"2021-10-18"},{"lineNumber":83,"author":{"gitId":"pragyan01"},"content":"        System.out.println(description + \", which has \" + calories","lastModifiedDate":"2021-10-18"},{"lineNumber":84,"author":{"gitId":"pragyan01"},"content":"                + \" calories, will be added to your library of fluids.\"","lastModifiedDate":"2021-10-18"},{"lineNumber":85,"author":{"gitId":"pragyan01"},"content":"                + \" You now have \" + totalFluids + \" fluids!\\n\");","lastModifiedDate":"2021-10-18"},{"lineNumber":86,"author":{"gitId":"pragyan01"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":87,"author":{"gitId":"pragyan01"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":88,"author":{"gitId":"pragyan01"},"content":"    //@@author pragyan01","lastModifiedDate":"2021-11-05"},{"lineNumber":89,"author":{"gitId":"pragyan01"},"content":"    /**","lastModifiedDate":"2021-11-05"},{"lineNumber":90,"author":{"gitId":"pragyan01"},"content":"     * This method deletes a fluid entry from the fluid library.","lastModifiedDate":"2021-11-05"},{"lineNumber":91,"author":{"gitId":"pragyan01"},"content":"     *","lastModifiedDate":"2021-11-05"},{"lineNumber":92,"author":{"gitId":"pragyan01"},"content":"     * @param inputArguments user input provided","lastModifiedDate":"2021-11-05"},{"lineNumber":93,"author":{"gitId":"pragyan01"},"content":"     * @throws FoodBankException if the fluid entry index is invalid or not provided","lastModifiedDate":"2021-11-05"},{"lineNumber":94,"author":{"gitId":"pragyan01"},"content":"     *","lastModifiedDate":"2021-11-05"},{"lineNumber":95,"author":{"gitId":"pragyan01"},"content":"     * @author pragyan01","lastModifiedDate":"2021-11-05"},{"lineNumber":96,"author":{"gitId":"pragyan01"},"content":"     */","lastModifiedDate":"2021-11-05"},{"lineNumber":97,"author":{"gitId":"pragyan01"},"content":"    public static void deleteCustomFluids(String inputArguments) throws FoodBankException {","lastModifiedDate":"2021-10-18"},{"lineNumber":98,"author":{"gitId":"pragyan01"},"content":"        totalFluids \u003d fluids.size();","lastModifiedDate":"2021-11-04"},{"lineNumber":99,"author":{"gitId":"pragyan01"},"content":"        if (inputArguments \u003d\u003d null) {","lastModifiedDate":"2021-10-28"},{"lineNumber":100,"author":{"gitId":"pragyan01"},"content":"            throw new NoFoodIndexException();","lastModifiedDate":"2021-10-28"},{"lineNumber":101,"author":{"gitId":"pragyan01"},"content":"        }","lastModifiedDate":"2021-10-28"},{"lineNumber":102,"author":{"gitId":"pragyan01"},"content":"        if (fluids.size() \u003d\u003d 0) {","lastModifiedDate":"2021-10-28"},{"lineNumber":103,"author":{"gitId":"pragyan01"},"content":"            throw new EmptyFluidBankException();","lastModifiedDate":"2021-10-28"},{"lineNumber":104,"author":{"gitId":"pragyan01"},"content":"        }","lastModifiedDate":"2021-10-28"},{"lineNumber":105,"author":{"gitId":"pragyan01"},"content":"        int fluidIndex \u003d Parser.parseStringToInteger(inputArguments) - 1;","lastModifiedDate":"2021-11-04"},{"lineNumber":106,"author":{"gitId":"pragyan01"},"content":"        if ((fluidIndex \u003c 0) || (fluidIndex \u003e (fluids.size() - 1))) {","lastModifiedDate":"2021-11-04"},{"lineNumber":107,"author":{"gitId":"pragyan01"},"content":"            throw new InvalidFluidIndexException();","lastModifiedDate":"2021-11-04"},{"lineNumber":108,"author":{"gitId":"pragyan01"},"content":"        }","lastModifiedDate":"2021-11-04"},{"lineNumber":109,"author":{"gitId":"pragyan01"},"content":"        generateParameters(fluids.get(fluidIndex));","lastModifiedDate":"2021-11-04"},{"lineNumber":110,"author":{"gitId":"pragyan01"},"content":"        fluids.remove(fluidIndex);","lastModifiedDate":"2021-11-04"},{"lineNumber":111,"author":{"gitId":"pragyan01"},"content":"        totalFluids -\u003d 1;","lastModifiedDate":"2021-10-18"},{"lineNumber":112,"author":{"gitId":"pragyan01"},"content":"        System.out.println(description + \" will be removed from your list of fluids consumed.\"","lastModifiedDate":"2021-10-18"},{"lineNumber":113,"author":{"gitId":"pragyan01"},"content":"                + \" You now have \" + totalFluids + \" fluids left!\\n\");","lastModifiedDate":"2021-10-18"},{"lineNumber":114,"author":{"gitId":"pragyan01"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":115,"author":{"gitId":"pragyan01"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":116,"author":{"gitId":"pragyan01"},"content":"    //@@author pragyan01","lastModifiedDate":"2021-11-05"},{"lineNumber":117,"author":{"gitId":"pragyan01"},"content":"    /**","lastModifiedDate":"2021-11-05"},{"lineNumber":118,"author":{"gitId":"pragyan01"},"content":"     * This method lists out all fluid entries stored in the food library.","lastModifiedDate":"2021-11-05"},{"lineNumber":119,"author":{"gitId":"pragyan01"},"content":"     *","lastModifiedDate":"2021-11-05"},{"lineNumber":120,"author":{"gitId":"pragyan01"},"content":"     *@throws FoodBankException if calories for a fluid entry is not found","lastModifiedDate":"2021-11-05"},{"lineNumber":121,"author":{"gitId":"pragyan01"},"content":"     *","lastModifiedDate":"2021-11-05"},{"lineNumber":122,"author":{"gitId":"pragyan01"},"content":"     * @author pragyan01","lastModifiedDate":"2021-11-05"},{"lineNumber":123,"author":{"gitId":"pragyan01"},"content":"     */","lastModifiedDate":"2021-11-05"},{"lineNumber":124,"author":{"gitId":"pragyan01"},"content":"    public static void listCustomFluids() throws FoodBankException {","lastModifiedDate":"2021-10-18"},{"lineNumber":125,"author":{"gitId":"pragyan01"},"content":"        if (fluids.size() \u003d\u003d 0) {","lastModifiedDate":"2021-10-28"},{"lineNumber":126,"author":{"gitId":"pragyan01"},"content":"            System.out.println(\"Your fluids library is empty!\");","lastModifiedDate":"2021-10-28"},{"lineNumber":127,"author":{"gitId":"pragyan01"},"content":"        }","lastModifiedDate":"2021-10-28"},{"lineNumber":128,"author":{"gitId":"pragyan01"},"content":"        int i \u003d 1;","lastModifiedDate":"2021-10-18"},{"lineNumber":129,"author":{"gitId":"pragyan01"},"content":"        for (String fluid : fluids) {","lastModifiedDate":"2021-10-18"},{"lineNumber":130,"author":{"gitId":"pragyan01"},"content":"            generateParameters(fluid);","lastModifiedDate":"2021-10-18"},{"lineNumber":131,"author":{"gitId":"pragyan01"},"content":"            System.out.println(i + \". \" + description);","lastModifiedDate":"2021-10-18"},{"lineNumber":132,"author":{"gitId":"pragyan01"},"content":"            System.out.println(\"Calories: \" + calories + \"\\n\");","lastModifiedDate":"2021-10-18"},{"lineNumber":133,"author":{"gitId":"pragyan01"},"content":"            i +\u003d 1;","lastModifiedDate":"2021-10-18"},{"lineNumber":134,"author":{"gitId":"pragyan01"},"content":"        }","lastModifiedDate":"2021-10-18"},{"lineNumber":135,"author":{"gitId":"pragyan01"},"content":"        System.out.println(\"Total number of fluids in library: \" + totalFluids);","lastModifiedDate":"2021-10-18"},{"lineNumber":136,"author":{"gitId":"pragyan01"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":137,"author":{"gitId":"pragyan01"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":138,"author":{"gitId":"VishalJeyaram"},"content":"    //@@author VishalJeyaram","lastModifiedDate":"2021-11-02"},{"lineNumber":139,"author":{"gitId":"VishalJeyaram"},"content":"    /**","lastModifiedDate":"2021-11-05"},{"lineNumber":140,"author":{"gitId":"VishalJeyaram"},"content":"     * Lists out all the library meals.","lastModifiedDate":"2021-11-05"},{"lineNumber":141,"author":{"gitId":"VishalJeyaram"},"content":"     *","lastModifiedDate":"2021-11-05"},{"lineNumber":142,"author":{"gitId":"VishalJeyaram"},"content":"     * @throws FoodBankException if user\u0027s food is already within the meal library.","lastModifiedDate":"2021-11-05"},{"lineNumber":143,"author":{"gitId":"VishalJeyaram"},"content":"     */","lastModifiedDate":"2021-11-05"},{"lineNumber":144,"author":{"gitId":"VishalJeyaram"},"content":"    public static void listCustomMeal() throws FoodBankException {","lastModifiedDate":"2021-10-18"},{"lineNumber":145,"author":{"gitId":"VishalJeyaram"},"content":"        if (meals.size() \u003d\u003d 0) {","lastModifiedDate":"2021-10-28"},{"lineNumber":146,"author":{"gitId":"VishalJeyaram"},"content":"            System.out.println(\"Your meals library is empty!\");","lastModifiedDate":"2021-10-28"},{"lineNumber":147,"author":{"gitId":"VishalJeyaram"},"content":"        }","lastModifiedDate":"2021-10-28"},{"lineNumber":148,"author":{"gitId":"VishalJeyaram"},"content":"        int i \u003d 1;","lastModifiedDate":"2021-10-18"},{"lineNumber":149,"author":{"gitId":"VishalJeyaram"},"content":"        for (String meal : meals) {","lastModifiedDate":"2021-10-18"},{"lineNumber":150,"author":{"gitId":"VishalJeyaram"},"content":"            generateParameters(meal);","lastModifiedDate":"2021-10-18"},{"lineNumber":151,"author":{"gitId":"VishalJeyaram"},"content":"            System.out.println(i + \". \" + description);","lastModifiedDate":"2021-10-18"},{"lineNumber":152,"author":{"gitId":"VishalJeyaram"},"content":"            System.out.println(\"Calories: \" + calories + \"\\n\");","lastModifiedDate":"2021-10-18"},{"lineNumber":153,"author":{"gitId":"VishalJeyaram"},"content":"            i +\u003d 1;","lastModifiedDate":"2021-10-18"},{"lineNumber":154,"author":{"gitId":"VishalJeyaram"},"content":"        }","lastModifiedDate":"2021-10-18"},{"lineNumber":155,"author":{"gitId":"VishalJeyaram"},"content":"        System.out.println(\"Total number of meals in library: \" + totalMeals);","lastModifiedDate":"2021-10-18"},{"lineNumber":156,"author":{"gitId":"VishalJeyaram"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":157,"author":{"gitId":"VishalJeyaram"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":158,"author":{"gitId":"VishalJeyaram"},"content":"    //@@author VishalJeyaram","lastModifiedDate":"2021-11-02"},{"lineNumber":159,"author":{"gitId":"VishalJeyaram"},"content":"    /**","lastModifiedDate":"2021-11-05"},{"lineNumber":160,"author":{"gitId":"VishalJeyaram"},"content":"     * Adds a custom meal with its associated calories to the meal library","lastModifiedDate":"2021-11-05"},{"lineNumber":161,"author":{"gitId":"VishalJeyaram"},"content":"     *","lastModifiedDate":"2021-11-05"},{"lineNumber":162,"author":{"gitId":"VishalJeyaram"},"content":"     * @throws FoodBankException If the meal description is empty, or if the meal already exists","lastModifiedDate":"2021-11-05"},{"lineNumber":163,"author":{"gitId":"VishalJeyaram"},"content":"     * within the library.","lastModifiedDate":"2021-11-05"},{"lineNumber":164,"author":{"gitId":"VishalJeyaram"},"content":"     */","lastModifiedDate":"2021-11-05"},{"lineNumber":165,"author":{"gitId":"VishalJeyaram"},"content":"    public static void addCustomMeal(String inputArguments) throws FoodBankException {","lastModifiedDate":"2021-10-18"},{"lineNumber":166,"author":{"gitId":"VishalJeyaram"},"content":"        totalMeals \u003d meals.size();","lastModifiedDate":"2021-11-04"},{"lineNumber":167,"author":{"gitId":"VishalJeyaram"},"content":"        if (inputArguments \u003d\u003d null) {","lastModifiedDate":"2021-10-28"},{"lineNumber":168,"author":{"gitId":"VishalJeyaram"},"content":"            throw new EmptyFoodDescription();","lastModifiedDate":"2021-10-28"},{"lineNumber":169,"author":{"gitId":"VishalJeyaram"},"content":"        }","lastModifiedDate":"2021-10-28"},{"lineNumber":170,"author":{"gitId":"VishalJeyaram"},"content":"        for (String m : meals) {","lastModifiedDate":"2021-11-04"},{"lineNumber":171,"author":{"gitId":"VishalJeyaram"},"content":"            if (m.contains(inputArguments)) {","lastModifiedDate":"2021-11-04"},{"lineNumber":172,"author":{"gitId":"VishalJeyaram"},"content":"                throw new DuplicateFood();","lastModifiedDate":"2021-11-04"},{"lineNumber":173,"author":{"gitId":"VishalJeyaram"},"content":"            }","lastModifiedDate":"2021-11-04"},{"lineNumber":174,"author":{"gitId":"VishalJeyaram"},"content":"        }","lastModifiedDate":"2021-11-04"},{"lineNumber":175,"author":{"gitId":"VishalJeyaram"},"content":"        generateParameters(inputArguments);","lastModifiedDate":"2021-10-18"},{"lineNumber":176,"author":{"gitId":"VishalJeyaram"},"content":"        inputArguments \u003d description + \" /c \" + calories;","lastModifiedDate":"2021-10-18"},{"lineNumber":177,"author":{"gitId":"VishalJeyaram"},"content":"        meals.add(inputArguments);","lastModifiedDate":"2021-10-18"},{"lineNumber":178,"author":{"gitId":"VishalJeyaram"},"content":"        totalMeals +\u003d 1;","lastModifiedDate":"2021-10-18"},{"lineNumber":179,"author":{"gitId":"VishalJeyaram"},"content":"        System.out.println(description + \", which has \" + calories","lastModifiedDate":"2021-10-18"},{"lineNumber":180,"author":{"gitId":"VishalJeyaram"},"content":"                + \" calories, will be added to your library of meals. You now have \" + totalMeals + \" meals!\\n\");","lastModifiedDate":"2021-10-18"},{"lineNumber":181,"author":{"gitId":"VishalJeyaram"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":182,"author":{"gitId":"VishalJeyaram"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":183,"author":{"gitId":"VishalJeyaram"},"content":"    //@@author VishalJeyaram","lastModifiedDate":"2021-11-02"},{"lineNumber":184,"author":{"gitId":"VishalJeyaram"},"content":"    /**","lastModifiedDate":"2021-11-05"},{"lineNumber":185,"author":{"gitId":"VishalJeyaram"},"content":"     * Deletes a custom meal with its associated calories from the meal library","lastModifiedDate":"2021-11-05"},{"lineNumber":186,"author":{"gitId":"VishalJeyaram"},"content":"     *","lastModifiedDate":"2021-11-05"},{"lineNumber":187,"author":{"gitId":"VishalJeyaram"},"content":"     * @throws NumberFormatException If the meal index is not an integer value.","lastModifiedDate":"2021-11-05"},{"lineNumber":188,"author":{"gitId":"VishalJeyaram"},"content":"     * @throws FoodBankException If meal index is not keyed in, or if the meal library is empty,","lastModifiedDate":"2021-11-05"},{"lineNumber":189,"author":{"gitId":"VishalJeyaram"},"content":"     * or if the meal index is out of range","lastModifiedDate":"2021-11-05"},{"lineNumber":190,"author":{"gitId":"VishalJeyaram"},"content":"     */","lastModifiedDate":"2021-11-05"},{"lineNumber":191,"author":{"gitId":"VishalJeyaram"},"content":"    public static void deleteCustomMeal(String inputArguments) throws NumberFormatException, FoodBankException {","lastModifiedDate":"2021-10-18"},{"lineNumber":192,"author":{"gitId":"VishalJeyaram"},"content":"        totalMeals \u003d meals.size();","lastModifiedDate":"2021-11-04"},{"lineNumber":193,"author":{"gitId":"VishalJeyaram"},"content":"        if (inputArguments \u003d\u003d null) {","lastModifiedDate":"2021-10-28"},{"lineNumber":194,"author":{"gitId":"VishalJeyaram"},"content":"            throw new NoFoodIndexException();","lastModifiedDate":"2021-10-28"},{"lineNumber":195,"author":{"gitId":"VishalJeyaram"},"content":"        }","lastModifiedDate":"2021-10-28"},{"lineNumber":196,"author":{"gitId":"VishalJeyaram"},"content":"        if (meals.size() \u003d\u003d 0) {","lastModifiedDate":"2021-10-28"},{"lineNumber":197,"author":{"gitId":"VishalJeyaram"},"content":"            throw new EmptyMealBankException();","lastModifiedDate":"2021-10-28"},{"lineNumber":198,"author":{"gitId":"VishalJeyaram"},"content":"        }","lastModifiedDate":"2021-10-28"},{"lineNumber":199,"author":{"gitId":"VishalJeyaram"},"content":"        int mealIndex \u003d Parser.parseStringToInteger(inputArguments) - 1;","lastModifiedDate":"2021-10-18"},{"lineNumber":200,"author":{"gitId":"VishalJeyaram"},"content":"        if ((mealIndex \u003c 0) || (mealIndex \u003e (meals.size() - 1))) {","lastModifiedDate":"2021-11-04"},{"lineNumber":201,"author":{"gitId":"VishalJeyaram"},"content":"            throw new InvalidMealIndexException();","lastModifiedDate":"2021-11-04"},{"lineNumber":202,"author":{"gitId":"VishalJeyaram"},"content":"        }","lastModifiedDate":"2021-11-04"},{"lineNumber":203,"author":{"gitId":"VishalJeyaram"},"content":"        generateParameters(meals.get(mealIndex));","lastModifiedDate":"2021-10-18"},{"lineNumber":204,"author":{"gitId":"VishalJeyaram"},"content":"        meals.remove(mealIndex);","lastModifiedDate":"2021-10-18"},{"lineNumber":205,"author":{"gitId":"VishalJeyaram"},"content":"        totalMeals -\u003d 1;","lastModifiedDate":"2021-10-18"},{"lineNumber":206,"author":{"gitId":"VishalJeyaram"},"content":"        System.out.println(description + \" will be removed from your list of meals consumed. You now have \"","lastModifiedDate":"2021-10-18"},{"lineNumber":207,"author":{"gitId":"VishalJeyaram"},"content":"                + totalMeals + \" meals left!\\n\");","lastModifiedDate":"2021-10-18"},{"lineNumber":208,"author":{"gitId":"VishalJeyaram"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":209,"author":{"gitId":"VishalJeyaram"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":210,"author":{"gitId":"pragyan01"},"content":"    //@@author pragyan01","lastModifiedDate":"2021-11-05"},{"lineNumber":211,"author":{"gitId":"pragyan01"},"content":"    /**","lastModifiedDate":"2021-11-05"},{"lineNumber":212,"author":{"gitId":"pragyan01"},"content":"     * This method finds calories associated with a specific food entry.","lastModifiedDate":"2021-11-05"},{"lineNumber":213,"author":{"gitId":"pragyan01"},"content":"     *","lastModifiedDate":"2021-11-05"},{"lineNumber":214,"author":{"gitId":"pragyan01"},"content":"     * @throws FoodBankException if specified food entry","lastModifiedDate":"2021-11-05"},{"lineNumber":215,"author":{"gitId":"pragyan01"},"content":"     * @return calories associated with the specific food entry","lastModifiedDate":"2021-11-05"},{"lineNumber":216,"author":{"gitId":"pragyan01"},"content":"     *","lastModifiedDate":"2021-11-05"},{"lineNumber":217,"author":{"gitId":"pragyan01"},"content":"     * @author pragyan01","lastModifiedDate":"2021-11-05"},{"lineNumber":218,"author":{"gitId":"pragyan01"},"content":"     */","lastModifiedDate":"2021-11-05"},{"lineNumber":219,"author":{"gitId":"pragyan01"},"content":"    public static int findCalories(String name) throws FoodBankException {","lastModifiedDate":"2021-10-18"},{"lineNumber":220,"author":{"gitId":"pragyan01"},"content":"        for (String meal : meals) {","lastModifiedDate":"2021-10-18"},{"lineNumber":221,"author":{"gitId":"pragyan01"},"content":"            generateParameters(meal);","lastModifiedDate":"2021-10-18"},{"lineNumber":222,"author":{"gitId":"pragyan01"},"content":"            if (description.equals(name)) {","lastModifiedDate":"2021-10-18"},{"lineNumber":223,"author":{"gitId":"pragyan01"},"content":"                return calories;","lastModifiedDate":"2021-10-18"},{"lineNumber":224,"author":{"gitId":"pragyan01"},"content":"            }","lastModifiedDate":"2021-10-18"},{"lineNumber":225,"author":{"gitId":"pragyan01"},"content":"        }","lastModifiedDate":"2021-10-18"},{"lineNumber":226,"author":{"gitId":"pragyan01"},"content":"        for (String fluid : fluids) {","lastModifiedDate":"2021-10-18"},{"lineNumber":227,"author":{"gitId":"pragyan01"},"content":"            generateParameters(fluid);","lastModifiedDate":"2021-10-18"},{"lineNumber":228,"author":{"gitId":"pragyan01"},"content":"            if (description.equals(name)) {","lastModifiedDate":"2021-10-18"},{"lineNumber":229,"author":{"gitId":"pragyan01"},"content":"                return calories;","lastModifiedDate":"2021-10-18"},{"lineNumber":230,"author":{"gitId":"pragyan01"},"content":"            }","lastModifiedDate":"2021-10-18"},{"lineNumber":231,"author":{"gitId":"pragyan01"},"content":"        }","lastModifiedDate":"2021-10-18"},{"lineNumber":232,"author":{"gitId":"pragyan01"},"content":"        throw new NoFoodFoundException();","lastModifiedDate":"2021-10-28"},{"lineNumber":233,"author":{"gitId":"pragyan01"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":234,"author":{"gitId":"pragyan01"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":235,"author":{"gitId":"pragyan01"},"content":"//@@author pragyan01","lastModifiedDate":"2021-11-06"},{"lineNumber":236,"author":{"gitId":"pragyan01"},"content":"    /**","lastModifiedDate":"2021-11-06"},{"lineNumber":237,"author":{"gitId":"pragyan01"},"content":"     * This method checks if specified food exists in food bank.","lastModifiedDate":"2021-11-06"},{"lineNumber":238,"author":{"gitId":"pragyan01"},"content":"     *","lastModifiedDate":"2021-11-06"},{"lineNumber":239,"author":{"gitId":"pragyan01"},"content":"     * @param name food name specified by user","lastModifiedDate":"2021-11-06"},{"lineNumber":240,"author":{"gitId":"pragyan01"},"content":"     * @throws FoodBankException if parameters cannot be generated for food entries stored in food bank.","lastModifiedDate":"2021-11-06"},{"lineNumber":241,"author":{"gitId":"pragyan01"},"content":"     * @return true if food specified is found in food bank, false otherwise.","lastModifiedDate":"2021-11-06"},{"lineNumber":242,"author":{"gitId":"pragyan01"},"content":"     *","lastModifiedDate":"2021-11-06"},{"lineNumber":243,"author":{"gitId":"pragyan01"},"content":"     * @author pragyan01","lastModifiedDate":"2021-11-06"},{"lineNumber":244,"author":{"gitId":"pragyan01"},"content":"     */","lastModifiedDate":"2021-11-06"},{"lineNumber":245,"author":{"gitId":"pragyan01"},"content":"    public static boolean isFoodFound(String name) throws FoodBankException {","lastModifiedDate":"2021-11-06"},{"lineNumber":246,"author":{"gitId":"pragyan01"},"content":"        for (String meal : meals) {","lastModifiedDate":"2021-11-06"},{"lineNumber":247,"author":{"gitId":"pragyan01"},"content":"            generateParameters(meal);","lastModifiedDate":"2021-11-06"},{"lineNumber":248,"author":{"gitId":"pragyan01"},"content":"            if (description.equals(name)) {","lastModifiedDate":"2021-11-06"},{"lineNumber":249,"author":{"gitId":"pragyan01"},"content":"                return true;","lastModifiedDate":"2021-11-06"},{"lineNumber":250,"author":{"gitId":"pragyan01"},"content":"            }","lastModifiedDate":"2021-11-06"},{"lineNumber":251,"author":{"gitId":"pragyan01"},"content":"        }","lastModifiedDate":"2021-11-06"},{"lineNumber":252,"author":{"gitId":"pragyan01"},"content":"        for (String fluid : fluids) {","lastModifiedDate":"2021-11-06"},{"lineNumber":253,"author":{"gitId":"pragyan01"},"content":"            generateParameters(fluid);","lastModifiedDate":"2021-11-06"},{"lineNumber":254,"author":{"gitId":"pragyan01"},"content":"            if (description.equals(name)) {","lastModifiedDate":"2021-11-06"},{"lineNumber":255,"author":{"gitId":"pragyan01"},"content":"                return true;","lastModifiedDate":"2021-11-06"},{"lineNumber":256,"author":{"gitId":"pragyan01"},"content":"            }","lastModifiedDate":"2021-11-06"},{"lineNumber":257,"author":{"gitId":"pragyan01"},"content":"        }","lastModifiedDate":"2021-11-06"},{"lineNumber":258,"author":{"gitId":"pragyan01"},"content":"        return false;","lastModifiedDate":"2021-11-06"},{"lineNumber":259,"author":{"gitId":"pragyan01"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":260,"author":{"gitId":"pragyan01"},"content":"}","lastModifiedDate":"2021-10-18"}],"authorContributionMap":{"pragyan01":164,"VishalJeyaram":96}},{"path":"src/main/java/seedu/duke/Keywords.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"EdwardZYWang"},"content":"package seedu.duke;","lastModifiedDate":"2021-10-07"},{"lineNumber":2,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":3,"author":{"gitId":"EdwardZYWang"},"content":"//@@author { ALL}","lastModifiedDate":"2021-10-27"},{"lineNumber":4,"author":{"gitId":"EdwardZYWang"},"content":"public class Keywords {","lastModifiedDate":"2021-10-07"},{"lineNumber":5,"author":{"gitId":"arvejw"},"content":"    public static final String INPUT_ADD_WORKOUT \u003d \"workout\";","lastModifiedDate":"2021-10-12"},{"lineNumber":6,"author":{"gitId":"pragyan01"},"content":"    public static final String DELETE_DRINKS \u003d \"deletefluid\";","lastModifiedDate":"2021-10-11"},{"lineNumber":7,"author":{"gitId":"pragyan01"},"content":"    public static final String LIST_DRINKS \u003d \"listfluids\";","lastModifiedDate":"2021-10-11"},{"lineNumber":8,"author":{"gitId":"EdwardZYWang"},"content":"    public static final String INPUT_ADD_WEIGHT \u003d \"addweight\";","lastModifiedDate":"2021-10-07"},{"lineNumber":9,"author":{"gitId":"EdwardZYWang"},"content":"    public static final String INPUT_BYE \u003d \"bye\";","lastModifiedDate":"2021-10-07"},{"lineNumber":10,"author":{"gitId":"VishalJeyaram"},"content":"    public static final String DELETE_MEAL \u003d \"deletemeal\";","lastModifiedDate":"2021-10-11"},{"lineNumber":11,"author":{"gitId":"EdwardZYWang"},"content":"    public static final String LIST_MEAL \u003d \"listmeals\";","lastModifiedDate":"2021-10-16"},{"lineNumber":12,"author":{"gitId":"EdwardZYWang"},"content":"    public static final String INPUT_HELP \u003d \"help\";","lastModifiedDate":"2021-10-11"},{"lineNumber":13,"author":{"gitId":"pragyan01"},"content":"    public static final String ADD_FLUID \u003d \"addfluid\";","lastModifiedDate":"2021-10-18"},{"lineNumber":14,"author":{"gitId":"VishalJeyaram"},"content":"    public static final String ADD_MEAL \u003d \"addmeal\";","lastModifiedDate":"2021-10-18"},{"lineNumber":15,"author":{"gitId":"pragyan01"},"content":"    public static final String LIBRARY \u003d \"library\";","lastModifiedDate":"2021-10-18"},{"lineNumber":16,"author":{"gitId":"VishalJeyaram"},"content":"    public static final String LIST \u003d \"list\";","lastModifiedDate":"2021-10-21"},{"lineNumber":17,"author":{"gitId":"VishalJeyaram"},"content":"    public static final String MEALS \u003d \"meals\";","lastModifiedDate":"2021-10-24"},{"lineNumber":18,"author":{"gitId":"VishalJeyaram"},"content":"    public static final String FLUIDS \u003d \"fluids\";","lastModifiedDate":"2021-10-24"},{"lineNumber":19,"author":{"gitId":"pragyan01"},"content":"    public static final String CALORIES \u003d \"calories\";","lastModifiedDate":"2021-10-21"},{"lineNumber":20,"author":{"gitId":"EdwardZYWang"},"content":"    public static final String VOLUME \u003d \"volumes\";","lastModifiedDate":"2021-10-28"},{"lineNumber":21,"author":{"gitId":"teoziyiivy"},"content":"    public static final String WEIGHTS \u003d \"weights\";","lastModifiedDate":"2021-10-25"},{"lineNumber":22,"author":{"gitId":"VishalJeyaram"},"content":"    public static final String WORKOUTS \u003d \"workouts\";","lastModifiedDate":"2021-10-24"},{"lineNumber":23,"author":{"gitId":"VishalJeyaram"},"content":"    public static final String WORKOUT \u003d \"workout\";","lastModifiedDate":"2021-10-24"},{"lineNumber":24,"author":{"gitId":"arvejw"},"content":"    public static final String SCHEDULE \u003d \"schedule\";","lastModifiedDate":"2021-10-22"},{"lineNumber":25,"author":{"gitId":"VishalJeyaram"},"content":"    public static final String ADD \u003d \"add\";","lastModifiedDate":"2021-10-24"},{"lineNumber":26,"author":{"gitId":"VishalJeyaram"},"content":"    public static final String MEAL \u003d \"meal\";","lastModifiedDate":"2021-10-24"},{"lineNumber":27,"author":{"gitId":"VishalJeyaram"},"content":"    public static final String FLUID \u003d \"fluid\";","lastModifiedDate":"2021-10-24"},{"lineNumber":28,"author":{"gitId":"VishalJeyaram"},"content":"    public static final String DELETE \u003d \"delete\";","lastModifiedDate":"2021-10-24"},{"lineNumber":29,"author":{"gitId":"teoziyiivy"},"content":"    public static final String WEIGHT \u003d \"weight\";","lastModifiedDate":"2021-10-25"},{"lineNumber":30,"author":{"gitId":"EdwardZYWang"},"content":"}","lastModifiedDate":"2021-10-07"}],"authorContributionMap":{"pragyan01":5,"teoziyiivy":2,"VishalJeyaram":11,"arvejw":2,"EdwardZYWang":10}},{"path":"src/main/java/seedu/duke/Meal.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VishalJeyaram"},"content":"package seedu.duke;","lastModifiedDate":"2021-10-07"},{"lineNumber":2,"author":{"gitId":"VishalJeyaram"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":3,"author":{"gitId":"VishalJeyaram"},"content":"import seedu.duke.exceptions.DukeException;","lastModifiedDate":"2021-10-14"},{"lineNumber":4,"author":{"gitId":"VishalJeyaram"},"content":"import seedu.duke.exceptions.foodbank.FoodBankException;","lastModifiedDate":"2021-10-28"},{"lineNumber":5,"author":{"gitId":"VishalJeyaram"},"content":"import seedu.duke.exceptions.meal.EmptyMealListException;","lastModifiedDate":"2021-10-28"},{"lineNumber":6,"author":{"gitId":"VishalJeyaram"},"content":"import seedu.duke.exceptions.meal.MealException;","lastModifiedDate":"2021-10-28"},{"lineNumber":7,"author":{"gitId":"VishalJeyaram"},"content":"import seedu.duke.exceptions.meal.NoMealDescriptionException;","lastModifiedDate":"2021-10-28"},{"lineNumber":8,"author":{"gitId":"VishalJeyaram"},"content":"import seedu.duke.exceptions.meal.NoSuchMealIndexException;","lastModifiedDate":"2021-10-28"},{"lineNumber":9,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":10,"author":{"gitId":"VishalJeyaram"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-10-07"},{"lineNumber":11,"author":{"gitId":"VishalJeyaram"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-07"},{"lineNumber":12,"author":{"gitId":"VishalJeyaram"},"content":"import java.util.logging.Level;","lastModifiedDate":"2021-10-14"},{"lineNumber":13,"author":{"gitId":"VishalJeyaram"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-10-14"},{"lineNumber":14,"author":{"gitId":"VishalJeyaram"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":15,"author":{"gitId":"VishalJeyaram"},"content":"//@@author VishalJeyaram","lastModifiedDate":"2021-11-02"},{"lineNumber":16,"author":{"gitId":"VishalJeyaram"},"content":"/**","lastModifiedDate":"2021-11-05"},{"lineNumber":17,"author":{"gitId":"VishalJeyaram"},"content":" * Class used to perform actions related to meals such as adding,","lastModifiedDate":"2021-11-05"},{"lineNumber":18,"author":{"gitId":"VishalJeyaram"},"content":" * deleting and listing meals","lastModifiedDate":"2021-11-05"},{"lineNumber":19,"author":{"gitId":"VishalJeyaram"},"content":" */","lastModifiedDate":"2021-11-05"},{"lineNumber":20,"author":{"gitId":"VishalJeyaram"},"content":"public class Meal extends Tracker {","lastModifiedDate":"2021-10-08"},{"lineNumber":21,"author":{"gitId":"VishalJeyaram"},"content":"    protected ArrayList\u003cString\u003e meals;","lastModifiedDate":"2021-10-07"},{"lineNumber":22,"author":{"gitId":"VishalJeyaram"},"content":"    protected int mealNumber;","lastModifiedDate":"2021-10-07"},{"lineNumber":23,"author":{"gitId":"VishalJeyaram"},"content":"    protected int calories;","lastModifiedDate":"2021-10-08"},{"lineNumber":24,"author":{"gitId":"VishalJeyaram"},"content":"    protected String description;","lastModifiedDate":"2021-10-08"},{"lineNumber":25,"author":{"gitId":"VishalJeyaram"},"content":"    protected String date;","lastModifiedDate":"2021-10-11"},{"lineNumber":26,"author":{"gitId":"VishalJeyaram"},"content":"    protected String time;","lastModifiedDate":"2021-10-11"},{"lineNumber":27,"author":{"gitId":"VishalJeyaram"},"content":"    protected int totalCalories;","lastModifiedDate":"2021-10-11"},{"lineNumber":28,"author":{"gitId":"VishalJeyaram"},"content":"    private static Logger logger \u003d Logger.getLogger(\"MealTrackerLogger\");","lastModifiedDate":"2021-10-14"},{"lineNumber":29,"author":{"gitId":"VishalJeyaram"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":30,"author":{"gitId":"VishalJeyaram"},"content":"    /**","lastModifiedDate":"2021-11-05"},{"lineNumber":31,"author":{"gitId":"VishalJeyaram"},"content":"     * Constructor for Meal class used to initialize the instance variables","lastModifiedDate":"2021-11-05"},{"lineNumber":32,"author":{"gitId":"VishalJeyaram"},"content":"     * such as the arraylist to store the meals, and two integer variables","lastModifiedDate":"2021-11-05"},{"lineNumber":33,"author":{"gitId":"VishalJeyaram"},"content":"     * to store the number of meals, and the number of calories respectively.","lastModifiedDate":"2021-11-05"},{"lineNumber":34,"author":{"gitId":"VishalJeyaram"},"content":"     */","lastModifiedDate":"2021-11-05"},{"lineNumber":35,"author":{"gitId":"VishalJeyaram"},"content":"    public Meal() {","lastModifiedDate":"2021-10-07"},{"lineNumber":36,"author":{"gitId":"VishalJeyaram"},"content":"        this.meals \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-07"},{"lineNumber":37,"author":{"gitId":"VishalJeyaram"},"content":"        this.mealNumber \u003d 0;","lastModifiedDate":"2021-10-07"},{"lineNumber":38,"author":{"gitId":"VishalJeyaram"},"content":"        this.totalCalories \u003d 0;","lastModifiedDate":"2021-10-11"},{"lineNumber":39,"author":{"gitId":"VishalJeyaram"},"content":"        logger.setLevel(Level.SEVERE);","lastModifiedDate":"2021-10-14"},{"lineNumber":40,"author":{"gitId":"VishalJeyaram"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":41,"author":{"gitId":"VishalJeyaram"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":42,"author":{"gitId":"VishalJeyaram"},"content":"    /**","lastModifiedDate":"2021-11-05"},{"lineNumber":43,"author":{"gitId":"VishalJeyaram"},"content":"     * Extracts the calories, description, date, and time for a particular","lastModifiedDate":"2021-11-05"},{"lineNumber":44,"author":{"gitId":"VishalJeyaram"},"content":"     * user input.","lastModifiedDate":"2021-11-05"},{"lineNumber":45,"author":{"gitId":"VishalJeyaram"},"content":"     *","lastModifiedDate":"2021-11-05"},{"lineNumber":46,"author":{"gitId":"VishalJeyaram"},"content":"     * @param inputArguments User input.","lastModifiedDate":"2021-11-05"},{"lineNumber":47,"author":{"gitId":"VishalJeyaram"},"content":"     * @throws FoodBankException if user\u0027s meal is already within the meal library.","lastModifiedDate":"2021-11-05"},{"lineNumber":48,"author":{"gitId":"VishalJeyaram"},"content":"     * @throws MealException if no meal description is in input.","lastModifiedDate":"2021-11-05"},{"lineNumber":49,"author":{"gitId":"VishalJeyaram"},"content":"     */","lastModifiedDate":"2021-11-05"},{"lineNumber":50,"author":{"gitId":"VishalJeyaram"},"content":"    public void generateMealParameters(String inputArguments) throws FoodBankException, MealException {","lastModifiedDate":"2021-10-28"},{"lineNumber":51,"author":{"gitId":"VishalJeyaram"},"content":"        try {","lastModifiedDate":"2021-10-08"},{"lineNumber":52,"author":{"gitId":"VishalJeyaram"},"content":"            calories \u003d Parser.getCalories(inputArguments);","lastModifiedDate":"2021-10-08"},{"lineNumber":53,"author":{"gitId":"VishalJeyaram"},"content":"            description \u003d Parser.getDescription(inputArguments);","lastModifiedDate":"2021-10-08"},{"lineNumber":54,"author":{"gitId":"VishalJeyaram"},"content":"            date \u003d Parser.getDate(inputArguments);","lastModifiedDate":"2021-10-08"},{"lineNumber":55,"author":{"gitId":"VishalJeyaram"},"content":"            time \u003d Parser.getTime(inputArguments);","lastModifiedDate":"2021-10-08"},{"lineNumber":56,"author":{"gitId":"VishalJeyaram"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-10-28"},{"lineNumber":57,"author":{"gitId":"VishalJeyaram"},"content":"            throw new NoMealDescriptionException();","lastModifiedDate":"2021-10-28"},{"lineNumber":58,"author":{"gitId":"VishalJeyaram"},"content":"        }","lastModifiedDate":"2021-10-08"},{"lineNumber":59,"author":{"gitId":"VishalJeyaram"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":60,"author":{"gitId":"VishalJeyaram"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":61,"author":{"gitId":"VishalJeyaram"},"content":"    /**","lastModifiedDate":"2021-11-05"},{"lineNumber":62,"author":{"gitId":"VishalJeyaram"},"content":"     * Adds a meal to list of meals.","lastModifiedDate":"2021-11-05"},{"lineNumber":63,"author":{"gitId":"VishalJeyaram"},"content":"     *","lastModifiedDate":"2021-11-05"},{"lineNumber":64,"author":{"gitId":"VishalJeyaram"},"content":"     * @param inputArguments User input.","lastModifiedDate":"2021-11-05"},{"lineNumber":65,"author":{"gitId":"VishalJeyaram"},"content":"     * @throws DateTimeParseException If date and/or time is not keyed in properly.","lastModifiedDate":"2021-11-05"},{"lineNumber":66,"author":{"gitId":"VishalJeyaram"},"content":"     * @throws NumberFormatException If the calories is not an integer value.","lastModifiedDate":"2021-11-05"},{"lineNumber":67,"author":{"gitId":"VishalJeyaram"},"content":"     * @throws MealException If no meal description is in the input.","lastModifiedDate":"2021-11-05"},{"lineNumber":68,"author":{"gitId":"VishalJeyaram"},"content":"     * @throws FoodBankException If user\u0027s meal is already within the meal library.","lastModifiedDate":"2021-11-05"},{"lineNumber":69,"author":{"gitId":"VishalJeyaram"},"content":"     */","lastModifiedDate":"2021-11-05"},{"lineNumber":70,"author":{"gitId":"VishalJeyaram"},"content":"    public void addMeal(String inputArguments)","lastModifiedDate":"2021-10-18"},{"lineNumber":71,"author":{"gitId":"VishalJeyaram"},"content":"            throws DateTimeParseException, NumberFormatException, MealException, FoodBankException {","lastModifiedDate":"2021-10-18"},{"lineNumber":72,"author":{"gitId":"VishalJeyaram"},"content":"        logger.entering(getClass().getName(), \"addMeal\");","lastModifiedDate":"2021-10-14"},{"lineNumber":73,"author":{"gitId":"VishalJeyaram"},"content":"        logger.log(Level.INFO, \"generating meal parameters\");","lastModifiedDate":"2021-10-14"},{"lineNumber":74,"author":{"gitId":"VishalJeyaram"},"content":"        mealNumber \u003d meals.size();","lastModifiedDate":"2021-11-04"},{"lineNumber":75,"author":{"gitId":"VishalJeyaram"},"content":"        generateMealParameters(inputArguments);","lastModifiedDate":"2021-10-11"},{"lineNumber":76,"author":{"gitId":"VishalJeyaram"},"content":"        if (Parser.containsSeparators(description)) {","lastModifiedDate":"2021-10-18"},{"lineNumber":77,"author":{"gitId":"VishalJeyaram"},"content":"            throw new MealException();","lastModifiedDate":"2021-10-14"},{"lineNumber":78,"author":{"gitId":"VishalJeyaram"},"content":"        }","lastModifiedDate":"2021-10-14"},{"lineNumber":79,"author":{"gitId":"VishalJeyaram"},"content":"        logger.log(Level.INFO, \"meal parameters generated\");","lastModifiedDate":"2021-10-14"},{"lineNumber":80,"author":{"gitId":"VishalJeyaram"},"content":"        System.out.println(\"Noted! CLI.ckFit has recorded your meal of \"","lastModifiedDate":"2021-10-07"},{"lineNumber":81,"author":{"gitId":"VishalJeyaram"},"content":"                + description + \" on \" + date + \" and at \" + time","lastModifiedDate":"2021-10-11"},{"lineNumber":82,"author":{"gitId":"VishalJeyaram"},"content":"                + \". \" + calories + \" calories has been added to the calorie count!\\n\");","lastModifiedDate":"2021-10-07"},{"lineNumber":83,"author":{"gitId":"VishalJeyaram"},"content":"        totalCalories +\u003d calories;","lastModifiedDate":"2021-10-11"},{"lineNumber":84,"author":{"gitId":"VishalJeyaram"},"content":"        inputArguments \u003d description + \" /c \" + calories + \" /d \" + date + \" /t \" + time;","lastModifiedDate":"2021-10-16"},{"lineNumber":85,"author":{"gitId":"VishalJeyaram"},"content":"        meals.add(inputArguments);","lastModifiedDate":"2021-10-11"},{"lineNumber":86,"author":{"gitId":"VishalJeyaram"},"content":"        mealNumber +\u003d 1;","lastModifiedDate":"2021-10-07"},{"lineNumber":87,"author":{"gitId":"VishalJeyaram"},"content":"        logger.log(Level.INFO, \"meal has been added to meal list\");","lastModifiedDate":"2021-10-14"},{"lineNumber":88,"author":{"gitId":"VishalJeyaram"},"content":"        logger.exiting(getClass().getName(), \"addMeal\");","lastModifiedDate":"2021-10-14"},{"lineNumber":89,"author":{"gitId":"VishalJeyaram"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":90,"author":{"gitId":"VishalJeyaram"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":91,"author":{"gitId":"VishalJeyaram"},"content":"    /**","lastModifiedDate":"2021-11-05"},{"lineNumber":92,"author":{"gitId":"VishalJeyaram"},"content":"     * Deletes a meal from the list of meals.","lastModifiedDate":"2021-11-05"},{"lineNumber":93,"author":{"gitId":"VishalJeyaram"},"content":"     *","lastModifiedDate":"2021-11-05"},{"lineNumber":94,"author":{"gitId":"VishalJeyaram"},"content":"     * @param inputArguments User input.","lastModifiedDate":"2021-11-05"},{"lineNumber":95,"author":{"gitId":"VishalJeyaram"},"content":"     * @throws NumberFormatException If the meal index is not an integer value.","lastModifiedDate":"2021-11-05"},{"lineNumber":96,"author":{"gitId":"VishalJeyaram"},"content":"     * @throws MealException If meal list is empty or if meal index keyed in by user does not exist.","lastModifiedDate":"2021-11-05"},{"lineNumber":97,"author":{"gitId":"VishalJeyaram"},"content":"     * @throws FoodBankException If user\u0027s meal is already within the meal library","lastModifiedDate":"2021-11-05"},{"lineNumber":98,"author":{"gitId":"VishalJeyaram"},"content":"     */","lastModifiedDate":"2021-11-05"},{"lineNumber":99,"author":{"gitId":"VishalJeyaram"},"content":"    public void deleteMeal(String inputArguments)","lastModifiedDate":"2021-10-18"},{"lineNumber":100,"author":{"gitId":"VishalJeyaram"},"content":"            throws NumberFormatException, FoodBankException, MealException {","lastModifiedDate":"2021-11-05"},{"lineNumber":101,"author":{"gitId":"VishalJeyaram"},"content":"        mealNumber \u003d meals.size();","lastModifiedDate":"2021-10-28"},{"lineNumber":102,"author":{"gitId":"VishalJeyaram"},"content":"        if (meals.size() \u003d\u003d 0) {","lastModifiedDate":"2021-10-28"},{"lineNumber":103,"author":{"gitId":"VishalJeyaram"},"content":"            throw new EmptyMealListException();","lastModifiedDate":"2021-10-28"},{"lineNumber":104,"author":{"gitId":"VishalJeyaram"},"content":"        }","lastModifiedDate":"2021-10-28"},{"lineNumber":105,"author":{"gitId":"VishalJeyaram"},"content":"        //assert mealNumber !\u003d 0;","lastModifiedDate":"2021-10-28"},{"lineNumber":106,"author":{"gitId":"VishalJeyaram"},"content":"        logger.entering(getClass().getName(), \"deleteMeal\");","lastModifiedDate":"2021-10-14"},{"lineNumber":107,"author":{"gitId":"VishalJeyaram"},"content":"        int mealIndex \u003d Parser.parseStringToInteger(inputArguments) - 1;","lastModifiedDate":"2021-10-11"},{"lineNumber":108,"author":{"gitId":"VishalJeyaram"},"content":"        if ((mealIndex \u003c 0) || (mealIndex \u003e (mealNumber - 1))) {","lastModifiedDate":"2021-10-28"},{"lineNumber":109,"author":{"gitId":"VishalJeyaram"},"content":"            throw new NoSuchMealIndexException();","lastModifiedDate":"2021-10-28"},{"lineNumber":110,"author":{"gitId":"VishalJeyaram"},"content":"        }","lastModifiedDate":"2021-10-28"},{"lineNumber":111,"author":{"gitId":"VishalJeyaram"},"content":"        logger.log(Level.INFO, \"generating meal parameters\");","lastModifiedDate":"2021-10-14"},{"lineNumber":112,"author":{"gitId":"VishalJeyaram"},"content":"        generateMealParameters(meals.get(mealIndex));","lastModifiedDate":"2021-10-11"},{"lineNumber":113,"author":{"gitId":"VishalJeyaram"},"content":"        logger.log(Level.INFO, \"meal parameters generated\");","lastModifiedDate":"2021-10-14"},{"lineNumber":114,"author":{"gitId":"VishalJeyaram"},"content":"        meals.remove(mealIndex);","lastModifiedDate":"2021-10-11"},{"lineNumber":115,"author":{"gitId":"VishalJeyaram"},"content":"        mealNumber -\u003d 1;","lastModifiedDate":"2021-10-11"},{"lineNumber":116,"author":{"gitId":"VishalJeyaram"},"content":"        totalCalories -\u003d calories;","lastModifiedDate":"2021-10-11"},{"lineNumber":117,"author":{"gitId":"VishalJeyaram"},"content":"        logger.log(Level.INFO, \"meal has been deleted from meal list\");","lastModifiedDate":"2021-10-14"},{"lineNumber":118,"author":{"gitId":"VishalJeyaram"},"content":"        System.out.println(description + \" will be removed from your list of meals consumed. You now \"","lastModifiedDate":"2021-10-11"},{"lineNumber":119,"author":{"gitId":"VishalJeyaram"},"content":"                + \"have \" + totalCalories + \" left!\\n\");","lastModifiedDate":"2021-10-11"},{"lineNumber":120,"author":{"gitId":"VishalJeyaram"},"content":"        logger.exiting(getClass().getName(), \"deleteMeal\");","lastModifiedDate":"2021-10-14"},{"lineNumber":121,"author":{"gitId":"VishalJeyaram"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":122,"author":{"gitId":"VishalJeyaram"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":123,"author":{"gitId":"VishalJeyaram"},"content":"    /**","lastModifiedDate":"2021-11-05"},{"lineNumber":124,"author":{"gitId":"VishalJeyaram"},"content":"     * Lists meals from the list of meals depending on the date.","lastModifiedDate":"2021-11-05"},{"lineNumber":125,"author":{"gitId":"VishalJeyaram"},"content":"     *","lastModifiedDate":"2021-11-05"},{"lineNumber":126,"author":{"gitId":"VishalJeyaram"},"content":"     * @param userDate Date on which to list meals.","lastModifiedDate":"2021-11-05"},{"lineNumber":127,"author":{"gitId":"VishalJeyaram"},"content":"     * @throws MealException If meal list is empty or if meal index keyed in by user does not exist.","lastModifiedDate":"2021-11-05"},{"lineNumber":128,"author":{"gitId":"VishalJeyaram"},"content":"     * @throws FoodBankException If user\u0027s food is already within the meal library","lastModifiedDate":"2021-11-05"},{"lineNumber":129,"author":{"gitId":"VishalJeyaram"},"content":"     */","lastModifiedDate":"2021-11-05"},{"lineNumber":130,"author":{"gitId":"VishalJeyaram"},"content":"    public void listMeals(String userDate) throws FoodBankException, MealException {","lastModifiedDate":"2021-11-04"},{"lineNumber":131,"author":{"gitId":"VishalJeyaram"},"content":"        if (meals.size() \u003d\u003d 0) {","lastModifiedDate":"2021-10-28"},{"lineNumber":132,"author":{"gitId":"VishalJeyaram"},"content":"            System.out.println(\"Your meal list is empty!\");","lastModifiedDate":"2021-10-28"},{"lineNumber":133,"author":{"gitId":"VishalJeyaram"},"content":"        }","lastModifiedDate":"2021-10-28"},{"lineNumber":134,"author":{"gitId":"VishalJeyaram"},"content":"        totalCalories \u003d 0;","lastModifiedDate":"2021-10-25"},{"lineNumber":135,"author":{"gitId":"VishalJeyaram"},"content":"        mealNumber \u003d 0;","lastModifiedDate":"2021-10-25"},{"lineNumber":136,"author":{"gitId":"VishalJeyaram"},"content":"        if (userDate.equals(\"all\")) {","lastModifiedDate":"2021-11-05"},{"lineNumber":137,"author":{"gitId":"VishalJeyaram"},"content":"            listAllMeals();","lastModifiedDate":"2021-11-05"},{"lineNumber":138,"author":{"gitId":"VishalJeyaram"},"content":"        } else {","lastModifiedDate":"2021-11-05"},{"lineNumber":139,"author":{"gitId":"VishalJeyaram"},"content":"            listMealsByDate(userDate);","lastModifiedDate":"2021-11-05"},{"lineNumber":140,"author":{"gitId":"VishalJeyaram"},"content":"        }","lastModifiedDate":"2021-11-05"},{"lineNumber":141,"author":{"gitId":"VishalJeyaram"},"content":"        System.out.println(\"Total number of meals: \" + mealNumber);","lastModifiedDate":"2021-11-05"},{"lineNumber":142,"author":{"gitId":"VishalJeyaram"},"content":"        System.out.println(\"Total calories: \" + totalCalories);","lastModifiedDate":"2021-11-05"},{"lineNumber":143,"author":{"gitId":"VishalJeyaram"},"content":"        logger.log(Level.INFO, \"meal list printed\");","lastModifiedDate":"2021-11-05"},{"lineNumber":144,"author":{"gitId":"VishalJeyaram"},"content":"        logger.exiting(getClass().getName(), \"listMeal\");","lastModifiedDate":"2021-11-05"},{"lineNumber":145,"author":{"gitId":"VishalJeyaram"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":146,"author":{"gitId":"VishalJeyaram"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":147,"author":{"gitId":"VishalJeyaram"},"content":"    /**","lastModifiedDate":"2021-11-05"},{"lineNumber":148,"author":{"gitId":"VishalJeyaram"},"content":"     * Lists all meals from the list of meals on a specific date.","lastModifiedDate":"2021-11-05"},{"lineNumber":149,"author":{"gitId":"VishalJeyaram"},"content":"     *","lastModifiedDate":"2021-11-05"},{"lineNumber":150,"author":{"gitId":"VishalJeyaram"},"content":"     * @param userDate Date on which to list meals.","lastModifiedDate":"2021-11-05"},{"lineNumber":151,"author":{"gitId":"VishalJeyaram"},"content":"     * @throws MealException If meal list is empty or if meal index keyed in by user does not exist.","lastModifiedDate":"2021-11-05"},{"lineNumber":152,"author":{"gitId":"VishalJeyaram"},"content":"     * @throws FoodBankException If user\u0027s food is already within the meal library","lastModifiedDate":"2021-11-05"},{"lineNumber":153,"author":{"gitId":"VishalJeyaram"},"content":"     */","lastModifiedDate":"2021-11-05"},{"lineNumber":154,"author":{"gitId":"VishalJeyaram"},"content":"    private void listMealsByDate(String userDate) throws FoodBankException, MealException {","lastModifiedDate":"2021-11-05"},{"lineNumber":155,"author":{"gitId":"VishalJeyaram"},"content":"        assert mealNumber !\u003d 0;","lastModifiedDate":"2021-11-05"},{"lineNumber":156,"author":{"gitId":"VishalJeyaram"},"content":"        logger.entering(getClass().getName(), \"listMeals\");","lastModifiedDate":"2021-11-05"},{"lineNumber":157,"author":{"gitId":"VishalJeyaram"},"content":"        int i \u003d 1;","lastModifiedDate":"2021-11-05"},{"lineNumber":158,"author":{"gitId":"VishalJeyaram"},"content":"        logger.log(Level.INFO, \"entering for loop\");","lastModifiedDate":"2021-11-05"},{"lineNumber":159,"author":{"gitId":"VishalJeyaram"},"content":"        for (String meal : meals) {","lastModifiedDate":"2021-10-25"},{"lineNumber":160,"author":{"gitId":"VishalJeyaram"},"content":"            if (meal.contains(userDate)) {","lastModifiedDate":"2021-11-05"},{"lineNumber":161,"author":{"gitId":"VishalJeyaram"},"content":"                logger.log(Level.INFO, \"generating meal parameters\");","lastModifiedDate":"2021-10-25"},{"lineNumber":162,"author":{"gitId":"VishalJeyaram"},"content":"                generateMealParameters(meal);","lastModifiedDate":"2021-10-25"},{"lineNumber":163,"author":{"gitId":"VishalJeyaram"},"content":"                logger.log(Level.INFO, \"meal parameters generated\");","lastModifiedDate":"2021-10-25"},{"lineNumber":164,"author":{"gitId":"VishalJeyaram"},"content":"                System.out.println(i + \". \" + description);","lastModifiedDate":"2021-10-25"},{"lineNumber":165,"author":{"gitId":"VishalJeyaram"},"content":"                System.out.println(\"Calories: \" + calories);","lastModifiedDate":"2021-10-25"},{"lineNumber":166,"author":{"gitId":"VishalJeyaram"},"content":"                System.out.println(\"Date: \" + date);","lastModifiedDate":"2021-10-25"},{"lineNumber":167,"author":{"gitId":"VishalJeyaram"},"content":"                System.out.println(\"Time: \" + time + \"\\n\");","lastModifiedDate":"2021-10-25"},{"lineNumber":168,"author":{"gitId":"VishalJeyaram"},"content":"                i +\u003d 1;","lastModifiedDate":"2021-10-25"},{"lineNumber":169,"author":{"gitId":"VishalJeyaram"},"content":"                totalCalories +\u003d calories;","lastModifiedDate":"2021-10-25"},{"lineNumber":170,"author":{"gitId":"VishalJeyaram"},"content":"                mealNumber +\u003d 1;","lastModifiedDate":"2021-10-25"},{"lineNumber":171,"author":{"gitId":"VishalJeyaram"},"content":"            }","lastModifiedDate":"2021-10-25"},{"lineNumber":172,"author":{"gitId":"VishalJeyaram"},"content":"        }","lastModifiedDate":"2021-11-05"},{"lineNumber":173,"author":{"gitId":"VishalJeyaram"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":174,"author":{"gitId":"VishalJeyaram"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":175,"author":{"gitId":"VishalJeyaram"},"content":"    /**","lastModifiedDate":"2021-11-05"},{"lineNumber":176,"author":{"gitId":"VishalJeyaram"},"content":"     * Lists all meals from the list of meals on all days.","lastModifiedDate":"2021-11-05"},{"lineNumber":177,"author":{"gitId":"VishalJeyaram"},"content":"     *","lastModifiedDate":"2021-11-05"},{"lineNumber":178,"author":{"gitId":"VishalJeyaram"},"content":"     * @throws MealException If meal list is empty or if meal index keyed in by user does not exist.","lastModifiedDate":"2021-11-05"},{"lineNumber":179,"author":{"gitId":"VishalJeyaram"},"content":"     * @throws FoodBankException If user\u0027s food is already within the meal library","lastModifiedDate":"2021-11-05"},{"lineNumber":180,"author":{"gitId":"VishalJeyaram"},"content":"     */","lastModifiedDate":"2021-11-05"},{"lineNumber":181,"author":{"gitId":"VishalJeyaram"},"content":"    private void listAllMeals() throws FoodBankException, MealException {","lastModifiedDate":"2021-11-05"},{"lineNumber":182,"author":{"gitId":"VishalJeyaram"},"content":"        int i \u003d 1;","lastModifiedDate":"2021-10-11"},{"lineNumber":183,"author":{"gitId":"VishalJeyaram"},"content":"        for (String meal : meals) {","lastModifiedDate":"2021-10-11"},{"lineNumber":184,"author":{"gitId":"VishalJeyaram"},"content":"            logger.log(Level.INFO, \"generating meal parameters\");","lastModifiedDate":"2021-10-14"},{"lineNumber":185,"author":{"gitId":"VishalJeyaram"},"content":"            generateMealParameters(meal);","lastModifiedDate":"2021-10-11"},{"lineNumber":186,"author":{"gitId":"VishalJeyaram"},"content":"            logger.log(Level.INFO, \"meal parameters generated\");","lastModifiedDate":"2021-10-14"},{"lineNumber":187,"author":{"gitId":"VishalJeyaram"},"content":"            System.out.println(i + \". \" + description);","lastModifiedDate":"2021-10-11"},{"lineNumber":188,"author":{"gitId":"VishalJeyaram"},"content":"            System.out.println(\"Calories: \" + calories);","lastModifiedDate":"2021-10-11"},{"lineNumber":189,"author":{"gitId":"VishalJeyaram"},"content":"            System.out.println(\"Date: \" + date);","lastModifiedDate":"2021-10-11"},{"lineNumber":190,"author":{"gitId":"VishalJeyaram"},"content":"            System.out.println(\"Time: \" + time + \"\\n\");","lastModifiedDate":"2021-10-11"},{"lineNumber":191,"author":{"gitId":"VishalJeyaram"},"content":"            i +\u003d 1;","lastModifiedDate":"2021-10-11"},{"lineNumber":192,"author":{"gitId":"VishalJeyaram"},"content":"            totalCalories +\u003d calories;","lastModifiedDate":"2021-10-21"},{"lineNumber":193,"author":{"gitId":"VishalJeyaram"},"content":"            mealNumber +\u003d 1;","lastModifiedDate":"2021-10-21"},{"lineNumber":194,"author":{"gitId":"VishalJeyaram"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":195,"author":{"gitId":"VishalJeyaram"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":196,"author":{"gitId":"VishalJeyaram"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":197,"author":{"gitId":"VishalJeyaram"},"content":"    /**","lastModifiedDate":"2021-11-05"},{"lineNumber":198,"author":{"gitId":"VishalJeyaram"},"content":"     * Returns total calories from meals consumed from the list of meals depending on the date.","lastModifiedDate":"2021-11-05"},{"lineNumber":199,"author":{"gitId":"VishalJeyaram"},"content":"     *","lastModifiedDate":"2021-11-05"},{"lineNumber":200,"author":{"gitId":"VishalJeyaram"},"content":"     * @param date Date on which to list meals.","lastModifiedDate":"2021-11-05"},{"lineNumber":201,"author":{"gitId":"VishalJeyaram"},"content":"     * @return Lateral location.","lastModifiedDate":"2021-11-05"},{"lineNumber":202,"author":{"gitId":"VishalJeyaram"},"content":"     * @throws MealException If meal list is empty or if meal index keyed in by user does not exist.","lastModifiedDate":"2021-11-05"},{"lineNumber":203,"author":{"gitId":"VishalJeyaram"},"content":"     * @throws FoodBankException If user\u0027s food is already within the meal library","lastModifiedDate":"2021-11-05"},{"lineNumber":204,"author":{"gitId":"VishalJeyaram"},"content":"     */","lastModifiedDate":"2021-11-05"},{"lineNumber":205,"author":{"gitId":"VishalJeyaram"},"content":"    public int getCalories(String date) throws FoodBankException, MealException {","lastModifiedDate":"2021-10-28"},{"lineNumber":206,"author":{"gitId":"VishalJeyaram"},"content":"        int calorieTotal \u003d 0;","lastModifiedDate":"2021-10-21"},{"lineNumber":207,"author":{"gitId":"VishalJeyaram"},"content":"        for (String meal : meals) {","lastModifiedDate":"2021-10-21"},{"lineNumber":208,"author":{"gitId":"VishalJeyaram"},"content":"            if (meal.contains(date)) {","lastModifiedDate":"2021-10-21"},{"lineNumber":209,"author":{"gitId":"VishalJeyaram"},"content":"                generateMealParameters(meal);","lastModifiedDate":"2021-10-21"},{"lineNumber":210,"author":{"gitId":"VishalJeyaram"},"content":"                calorieTotal +\u003d calories;","lastModifiedDate":"2021-10-21"},{"lineNumber":211,"author":{"gitId":"VishalJeyaram"},"content":"            }","lastModifiedDate":"2021-10-21"},{"lineNumber":212,"author":{"gitId":"VishalJeyaram"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":213,"author":{"gitId":"VishalJeyaram"},"content":"        return calorieTotal;","lastModifiedDate":"2021-10-21"},{"lineNumber":214,"author":{"gitId":"VishalJeyaram"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":215,"author":{"gitId":"VishalJeyaram"},"content":"}","lastModifiedDate":"2021-10-07"},{"lineNumber":216,"author":{"gitId":"VishalJeyaram"},"content":"","lastModifiedDate":"2021-10-21"}],"authorContributionMap":{"VishalJeyaram":215,"EdwardZYWang":1}},{"path":"src/main/java/seedu/duke/Parser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"arvejw"},"content":"package seedu.duke;","lastModifiedDate":"2021-10-08"},{"lineNumber":2,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":3,"author":{"gitId":"VishalJeyaram"},"content":"import seedu.duke.exceptions.DukeException;","lastModifiedDate":"2021-10-14"},{"lineNumber":4,"author":{"gitId":"VishalJeyaram"},"content":"import seedu.duke.exceptions.foodbank.FoodBankException;","lastModifiedDate":"2021-10-28"},{"lineNumber":5,"author":{"gitId":"arvejw"},"content":"import seedu.duke.exceptions.schedule.GetActivityException;","lastModifiedDate":"2021-10-24"},{"lineNumber":6,"author":{"gitId":"arvejw"},"content":"import seedu.duke.exceptions.schedule.InvalidActivityFormatException;","lastModifiedDate":"2021-10-31"},{"lineNumber":7,"author":{"gitId":"arvejw"},"content":"import seedu.duke.exceptions.schedule.InvalidScheduleDescriptionException;","lastModifiedDate":"2021-10-24"},{"lineNumber":8,"author":{"gitId":"arvejw"},"content":"import seedu.duke.exceptions.schedule.MissingActivityQuantifierException;","lastModifiedDate":"2021-10-24"},{"lineNumber":9,"author":{"gitId":"arvejw"},"content":"import seedu.duke.exceptions.schedule.MissingActivitySplitterException;","lastModifiedDate":"2021-10-24"},{"lineNumber":10,"author":{"gitId":"arvejw"},"content":"import seedu.duke.exceptions.schedule.UnnecessaryQuantifierException;","lastModifiedDate":"2021-11-04"},{"lineNumber":11,"author":{"gitId":"arvejw"},"content":"import seedu.duke.exceptions.workout.MissingWorkoutCalorieSeparatorException;","lastModifiedDate":"2021-10-31"},{"lineNumber":12,"author":{"gitId":"arvejw"},"content":"import seedu.duke.exceptions.workout.NegativeWorkoutCalorieException;","lastModifiedDate":"2021-10-24"},{"lineNumber":13,"author":{"gitId":"arvejw"},"content":"import seedu.duke.exceptions.schedule.ScheduleException;","lastModifiedDate":"2021-10-24"},{"lineNumber":14,"author":{"gitId":"arvejw"},"content":"import seedu.duke.exceptions.workout.WorkoutException;","lastModifiedDate":"2021-10-24"},{"lineNumber":15,"author":{"gitId":"arvejw"},"content":"import seedu.duke.schedule.WorkoutActivity;","lastModifiedDate":"2021-10-22"},{"lineNumber":16,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":17,"author":{"gitId":"EdwardZYWang"},"content":"import java.io.IOException;","lastModifiedDate":"2021-11-06"},{"lineNumber":18,"author":{"gitId":"VishalJeyaram"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-10-08"},{"lineNumber":19,"author":{"gitId":"VishalJeyaram"},"content":"import java.time.LocalTime;","lastModifiedDate":"2021-10-08"},{"lineNumber":20,"author":{"gitId":"VishalJeyaram"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-10-08"},{"lineNumber":21,"author":{"gitId":"VishalJeyaram"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-10-08"},{"lineNumber":22,"author":{"gitId":"arvejw"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-21"},{"lineNumber":23,"author":{"gitId":"arvejw"},"content":"import java.util.HashMap;","lastModifiedDate":"2021-10-20"},{"lineNumber":24,"author":{"gitId":"EdwardZYWang"},"content":"import java.util.Locale;","lastModifiedDate":"2021-10-16"},{"lineNumber":25,"author":{"gitId":"arvejw"},"content":"import java.util.Map;","lastModifiedDate":"2021-10-20"},{"lineNumber":26,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":27,"author":{"gitId":"arvejw"},"content":"public class Parser {","lastModifiedDate":"2021-10-08"},{"lineNumber":28,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":29,"author":{"gitId":"arvejw"},"content":"    public static final String DATE_SEPARATOR \u003d \" /d \";","lastModifiedDate":"2021-10-09"},{"lineNumber":30,"author":{"gitId":"arvejw"},"content":"    public static final String TIME_SEPARATOR \u003d \" /t \";","lastModifiedDate":"2021-10-09"},{"lineNumber":31,"author":{"gitId":"arvejw"},"content":"    public static final String CALORIE_SEPARATOR \u003d \" /c \";","lastModifiedDate":"2021-10-09"},{"lineNumber":32,"author":{"gitId":"arvejw"},"content":"    public static final String RECURRING_FLAG \u003d \" /r\";","lastModifiedDate":"2021-10-15"},{"lineNumber":33,"author":{"gitId":"EdwardZYWang"},"content":"    public static final String VOLUME_SEPARATOR \u003d \" /v \";","lastModifiedDate":"2021-10-16"},{"lineNumber":34,"author":{"gitId":"arvejw"},"content":"    public static final String ACTIVITY_SEPARATOR \u003d \" /a \";","lastModifiedDate":"2021-10-20"},{"lineNumber":35,"author":{"gitId":"arvejw"},"content":"    public static final String MULTIPLE_ACTIVITY_MARKER \u003d \",\";","lastModifiedDate":"2021-10-20"},{"lineNumber":36,"author":{"gitId":"arvejw"},"content":"    public static final String ACTIVITY_SPLITTER \u003d \":\";","lastModifiedDate":"2021-10-20"},{"lineNumber":37,"author":{"gitId":"arvejw"},"content":"    public static final String QUANTIFIER_SPLITTER \u003d \"x\";","lastModifiedDate":"2021-10-20"},{"lineNumber":38,"author":{"gitId":"arvejw"},"content":"    public static final String EMPTY_STRING \u003d \"\";","lastModifiedDate":"2021-11-03"},{"lineNumber":39,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":40,"author":{"gitId":"teoziyiivy"},"content":"    //@@author teoziyiivy","lastModifiedDate":"2021-11-02"},{"lineNumber":41,"author":{"gitId":"teoziyiivy"},"content":"    public static boolean containsDateSeparator(String inputArguments) {","lastModifiedDate":"2021-10-09"},{"lineNumber":42,"author":{"gitId":"teoziyiivy"},"content":"        return inputArguments.contains(DATE_SEPARATOR);","lastModifiedDate":"2021-10-09"},{"lineNumber":43,"author":{"gitId":"teoziyiivy"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":44,"author":{"gitId":"teoziyiivy"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":45,"author":{"gitId":"teoziyiivy"},"content":"    //@@author teoziyiivy","lastModifiedDate":"2021-11-02"},{"lineNumber":46,"author":{"gitId":"teoziyiivy"},"content":"    public static boolean containsTimeSeparator(String inputArguments) {","lastModifiedDate":"2021-10-09"},{"lineNumber":47,"author":{"gitId":"teoziyiivy"},"content":"        return inputArguments.contains(TIME_SEPARATOR);","lastModifiedDate":"2021-10-09"},{"lineNumber":48,"author":{"gitId":"teoziyiivy"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":49,"author":{"gitId":"teoziyiivy"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":50,"author":{"gitId":"teoziyiivy"},"content":"    //@@author teoziyiivy","lastModifiedDate":"2021-11-02"},{"lineNumber":51,"author":{"gitId":"teoziyiivy"},"content":"    public static boolean containsCalorieSeparator(String inputArguments) {","lastModifiedDate":"2021-10-09"},{"lineNumber":52,"author":{"gitId":"teoziyiivy"},"content":"        return inputArguments.contains(CALORIE_SEPARATOR);","lastModifiedDate":"2021-10-09"},{"lineNumber":53,"author":{"gitId":"teoziyiivy"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":54,"author":{"gitId":"teoziyiivy"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":55,"author":{"gitId":"EdwardZYWang"},"content":"    //@@author EdwardZYWang","lastModifiedDate":"2021-11-03"},{"lineNumber":56,"author":{"gitId":"EdwardZYWang"},"content":"    public static boolean isRecurringWorkout(String inputArguments) {","lastModifiedDate":"2021-10-15"},{"lineNumber":57,"author":{"gitId":"EdwardZYWang"},"content":"        String[] splitResults \u003d inputArguments.split(RECURRING_FLAG, 2);","lastModifiedDate":"2021-10-15"},{"lineNumber":58,"author":{"gitId":"EdwardZYWang"},"content":"        if (splitResults.length \u003d\u003d 1) {","lastModifiedDate":"2021-10-15"},{"lineNumber":59,"author":{"gitId":"EdwardZYWang"},"content":"            return false;","lastModifiedDate":"2021-10-15"},{"lineNumber":60,"author":{"gitId":"EdwardZYWang"},"content":"        }","lastModifiedDate":"2021-10-15"},{"lineNumber":61,"author":{"gitId":"EdwardZYWang"},"content":"        return splitResults[1].isEmpty(); // true if /r flag is at the end of the string","lastModifiedDate":"2021-10-15"},{"lineNumber":62,"author":{"gitId":"EdwardZYWang"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":63,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":64,"author":{"gitId":"teoziyiivy"},"content":"    //@@author teoziyiivy","lastModifiedDate":"2021-11-02"},{"lineNumber":65,"author":{"gitId":"teoziyiivy"},"content":"    public static int parseStringToInteger(String input) throws NumberFormatException {","lastModifiedDate":"2021-10-08"},{"lineNumber":66,"author":{"gitId":"teoziyiivy"},"content":"        return Integer.parseInt(input);","lastModifiedDate":"2021-10-08"},{"lineNumber":67,"author":{"gitId":"teoziyiivy"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":68,"author":{"gitId":"teoziyiivy"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":69,"author":{"gitId":"teoziyiivy"},"content":"    //@@author teoziyiivy","lastModifiedDate":"2021-11-02"},{"lineNumber":70,"author":{"gitId":"teoziyiivy"},"content":"    public static double parseStringToDouble(String input) throws NumberFormatException {","lastModifiedDate":"2021-10-24"},{"lineNumber":71,"author":{"gitId":"teoziyiivy"},"content":"        return Double.parseDouble(input);","lastModifiedDate":"2021-10-24"},{"lineNumber":72,"author":{"gitId":"teoziyiivy"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":73,"author":{"gitId":"teoziyiivy"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":74,"author":{"gitId":"VishalJeyaram"},"content":"    //@@author VishalJeyaram","lastModifiedDate":"2021-11-02"},{"lineNumber":75,"author":{"gitId":"VishalJeyaram"},"content":"    /**","lastModifiedDate":"2021-11-05"},{"lineNumber":76,"author":{"gitId":"VishalJeyaram"},"content":"     * Checks if the user\u0027s input contains separators.","lastModifiedDate":"2021-11-05"},{"lineNumber":77,"author":{"gitId":"VishalJeyaram"},"content":"     *","lastModifiedDate":"2021-11-05"},{"lineNumber":78,"author":{"gitId":"VishalJeyaram"},"content":"     * @param inputArguments User\u0027s input.","lastModifiedDate":"2021-11-05"},{"lineNumber":79,"author":{"gitId":"VishalJeyaram"},"content":"     * @return true, if input contains separators, and false, if input does not contain separators.","lastModifiedDate":"2021-11-05"},{"lineNumber":80,"author":{"gitId":"VishalJeyaram"},"content":"     */","lastModifiedDate":"2021-11-05"},{"lineNumber":81,"author":{"gitId":"VishalJeyaram"},"content":"    public static boolean containsSeparators(String inputArguments) {","lastModifiedDate":"2021-10-15"},{"lineNumber":82,"author":{"gitId":"VishalJeyaram"},"content":"        if (inputArguments.contains(CALORIE_SEPARATOR.trim())) {","lastModifiedDate":"2021-10-16"},{"lineNumber":83,"author":{"gitId":"VishalJeyaram"},"content":"            return true;","lastModifiedDate":"2021-10-15"},{"lineNumber":84,"author":{"gitId":"VishalJeyaram"},"content":"        } else if (inputArguments.contains(DATE_SEPARATOR.trim())) {","lastModifiedDate":"2021-10-16"},{"lineNumber":85,"author":{"gitId":"VishalJeyaram"},"content":"            return true;","lastModifiedDate":"2021-10-15"},{"lineNumber":86,"author":{"gitId":"VishalJeyaram"},"content":"        } else if (inputArguments.contains(TIME_SEPARATOR.trim())) {","lastModifiedDate":"2021-10-16"},{"lineNumber":87,"author":{"gitId":"VishalJeyaram"},"content":"            return true;","lastModifiedDate":"2021-10-15"},{"lineNumber":88,"author":{"gitId":"VishalJeyaram"},"content":"        } else {","lastModifiedDate":"2021-10-15"},{"lineNumber":89,"author":{"gitId":"VishalJeyaram"},"content":"            return false;","lastModifiedDate":"2021-10-15"},{"lineNumber":90,"author":{"gitId":"VishalJeyaram"},"content":"        }","lastModifiedDate":"2021-10-15"},{"lineNumber":91,"author":{"gitId":"VishalJeyaram"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":92,"author":{"gitId":"VishalJeyaram"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":93,"author":{"gitId":"VishalJeyaram"},"content":"    //@@author VishalJeyaram","lastModifiedDate":"2021-11-02"},{"lineNumber":94,"author":{"gitId":"VishalJeyaram"},"content":"    /**","lastModifiedDate":"2021-11-05"},{"lineNumber":95,"author":{"gitId":"VishalJeyaram"},"content":"     * Returns calories extracted from user\u0027s input.","lastModifiedDate":"2021-11-05"},{"lineNumber":96,"author":{"gitId":"VishalJeyaram"},"content":"     *","lastModifiedDate":"2021-11-05"},{"lineNumber":97,"author":{"gitId":"VishalJeyaram"},"content":"     * @param inputArguments User\u0027s input.","lastModifiedDate":"2021-11-05"},{"lineNumber":98,"author":{"gitId":"VishalJeyaram"},"content":"     * @return Calories.","lastModifiedDate":"2021-11-05"},{"lineNumber":99,"author":{"gitId":"VishalJeyaram"},"content":"     * @throws DukeException If the user\u0027s description is empty.","lastModifiedDate":"2021-11-05"},{"lineNumber":100,"author":{"gitId":"VishalJeyaram"},"content":"     * @throws NumberFormatException If calories is not an integer value.","lastModifiedDate":"2021-11-05"},{"lineNumber":101,"author":{"gitId":"VishalJeyaram"},"content":"     * @throws FoodBankException If food already exists within either meal or fluid library.","lastModifiedDate":"2021-11-05"},{"lineNumber":102,"author":{"gitId":"VishalJeyaram"},"content":"     */","lastModifiedDate":"2021-11-05"},{"lineNumber":103,"author":{"gitId":"VishalJeyaram"},"content":"    public static int getCalories(String inputArguments)","lastModifiedDate":"2021-10-18"},{"lineNumber":104,"author":{"gitId":"VishalJeyaram"},"content":"            throws DukeException, NumberFormatException, FoodBankException {","lastModifiedDate":"2021-10-18"},{"lineNumber":105,"author":{"gitId":"VishalJeyaram"},"content":"        int calories \u003d 0;","lastModifiedDate":"2021-10-18"},{"lineNumber":106,"author":{"gitId":"VishalJeyaram"},"content":"        String description \u003d getDescription(inputArguments);","lastModifiedDate":"2021-10-18"},{"lineNumber":107,"author":{"gitId":"VishalJeyaram"},"content":"        if (!containsCalorieSeparator(inputArguments)) {","lastModifiedDate":"2021-11-06"},{"lineNumber":108,"author":{"gitId":"VishalJeyaram"},"content":"            if (Parser.containsSeparators(description)) {","lastModifiedDate":"2021-10-28"},{"lineNumber":109,"author":{"gitId":"VishalJeyaram"},"content":"                throw new DukeException(\"\");","lastModifiedDate":"2021-10-28"},{"lineNumber":110,"author":{"gitId":"VishalJeyaram"},"content":"            }","lastModifiedDate":"2021-10-28"},{"lineNumber":111,"author":{"gitId":"VishalJeyaram"},"content":"            if (FoodBank.isFoodFound(description)) {","lastModifiedDate":"2021-11-06"},{"lineNumber":112,"author":{"gitId":"VishalJeyaram"},"content":"                calories \u003d FoodBank.findCalories(description);","lastModifiedDate":"2021-10-18"},{"lineNumber":113,"author":{"gitId":"VishalJeyaram"},"content":"                return calories;","lastModifiedDate":"2021-10-18"},{"lineNumber":114,"author":{"gitId":"VishalJeyaram"},"content":"            }","lastModifiedDate":"2021-11-06"},{"lineNumber":115,"author":{"gitId":"VishalJeyaram"},"content":"            calories \u003d 0;","lastModifiedDate":"2021-11-06"},{"lineNumber":116,"author":{"gitId":"VishalJeyaram"},"content":"            return calories;","lastModifiedDate":"2021-11-06"},{"lineNumber":117,"author":{"gitId":"VishalJeyaram"},"content":"        } else {","lastModifiedDate":"2021-10-18"},{"lineNumber":118,"author":{"gitId":"VishalJeyaram"},"content":"            String[] userInput \u003d inputArguments.split(\"\\\\s+\");","lastModifiedDate":"2021-11-04"},{"lineNumber":119,"author":{"gitId":"VishalJeyaram"},"content":"            int length \u003d userInput.length;","lastModifiedDate":"2021-10-08"},{"lineNumber":120,"author":{"gitId":"VishalJeyaram"},"content":"            for (int i \u003d 1; i \u003c length; i++) {","lastModifiedDate":"2021-10-08"},{"lineNumber":121,"author":{"gitId":"VishalJeyaram"},"content":"                if (userInput[i].equals(CALORIE_SEPARATOR.trim())) {","lastModifiedDate":"2021-10-16"},{"lineNumber":122,"author":{"gitId":"VishalJeyaram"},"content":"                    calories \u003d parseStringToInteger(userInput[i + 1]);","lastModifiedDate":"2021-10-08"},{"lineNumber":123,"author":{"gitId":"VishalJeyaram"},"content":"                }","lastModifiedDate":"2021-10-08"},{"lineNumber":124,"author":{"gitId":"VishalJeyaram"},"content":"            }","lastModifiedDate":"2021-10-08"},{"lineNumber":125,"author":{"gitId":"VishalJeyaram"},"content":"            if (calories \u003c 0) {","lastModifiedDate":"2021-10-08"},{"lineNumber":126,"author":{"gitId":"VishalJeyaram"},"content":"                throw new DukeException(\"Negative calories\");","lastModifiedDate":"2021-10-08"},{"lineNumber":127,"author":{"gitId":"VishalJeyaram"},"content":"            } else {","lastModifiedDate":"2021-10-18"},{"lineNumber":128,"author":{"gitId":"VishalJeyaram"},"content":"                return calories;","lastModifiedDate":"2021-10-08"},{"lineNumber":129,"author":{"gitId":"VishalJeyaram"},"content":"            }","lastModifiedDate":"2021-10-08"},{"lineNumber":130,"author":{"gitId":"VishalJeyaram"},"content":"        }","lastModifiedDate":"2021-10-18"},{"lineNumber":131,"author":{"gitId":"VishalJeyaram"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":132,"author":{"gitId":"VishalJeyaram"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":133,"author":{"gitId":"EdwardZYWang"},"content":"    //@@author EdwardZYWang","lastModifiedDate":"2021-11-03"},{"lineNumber":134,"author":{"gitId":"EdwardZYWang"},"content":"    /**","lastModifiedDate":"2021-11-06"},{"lineNumber":135,"author":{"gitId":"EdwardZYWang"},"content":"     * gets calories burned through workout from the user\u0027s inputs.","lastModifiedDate":"2021-11-06"},{"lineNumber":136,"author":{"gitId":"EdwardZYWang"},"content":"     *","lastModifiedDate":"2021-11-06"},{"lineNumber":137,"author":{"gitId":"EdwardZYWang"},"content":"     * @param inputArguments arguments of the user\u0027s inputs.","lastModifiedDate":"2021-11-06"},{"lineNumber":138,"author":{"gitId":"EdwardZYWang"},"content":"     * @return calories burned for workout parameter","lastModifiedDate":"2021-11-06"},{"lineNumber":139,"author":{"gitId":"EdwardZYWang"},"content":"     * @throws WorkoutException if there is an unknown error encountered.","lastModifiedDate":"2021-11-06"},{"lineNumber":140,"author":{"gitId":"EdwardZYWang"},"content":"     */","lastModifiedDate":"2021-11-06"},{"lineNumber":141,"author":{"gitId":"EdwardZYWang"},"content":"    public static int getCaloriesBurnedForWorkout(String inputArguments) throws WorkoutException {","lastModifiedDate":"2021-10-24"},{"lineNumber":142,"author":{"gitId":"EdwardZYWang"},"content":"        int calories \u003d 0;","lastModifiedDate":"2021-10-20"},{"lineNumber":143,"author":{"gitId":"EdwardZYWang"},"content":"        boolean isCaloriesParsed \u003d false;","lastModifiedDate":"2021-10-31"},{"lineNumber":144,"author":{"gitId":"EdwardZYWang"},"content":"        String[] userInput \u003d inputArguments.split(\"\\\\s+\");","lastModifiedDate":"2021-11-03"},{"lineNumber":145,"author":{"gitId":"EdwardZYWang"},"content":"        int length \u003d userInput.length;","lastModifiedDate":"2021-10-20"},{"lineNumber":146,"author":{"gitId":"EdwardZYWang"},"content":"        for (int i \u003d 0; i \u003c length; i++) {","lastModifiedDate":"2021-10-24"},{"lineNumber":147,"author":{"gitId":"EdwardZYWang"},"content":"            if (userInput[i].equals(CALORIE_SEPARATOR.trim())) {","lastModifiedDate":"2021-10-20"},{"lineNumber":148,"author":{"gitId":"EdwardZYWang"},"content":"                try {","lastModifiedDate":"2021-10-24"},{"lineNumber":149,"author":{"gitId":"EdwardZYWang"},"content":"                    calories \u003d parseStringToInteger(userInput[i + 1]);","lastModifiedDate":"2021-10-31"},{"lineNumber":150,"author":{"gitId":"EdwardZYWang"},"content":"                    isCaloriesParsed \u003d true;","lastModifiedDate":"2021-10-31"},{"lineNumber":151,"author":{"gitId":"EdwardZYWang"},"content":"                    break;","lastModifiedDate":"2021-10-31"},{"lineNumber":152,"author":{"gitId":"EdwardZYWang"},"content":"                } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2021-10-24"},{"lineNumber":153,"author":{"gitId":"EdwardZYWang"},"content":"                    throw new NumberFormatException();","lastModifiedDate":"2021-10-24"},{"lineNumber":154,"author":{"gitId":"EdwardZYWang"},"content":"                }","lastModifiedDate":"2021-10-24"},{"lineNumber":155,"author":{"gitId":"EdwardZYWang"},"content":"            }","lastModifiedDate":"2021-10-20"},{"lineNumber":156,"author":{"gitId":"EdwardZYWang"},"content":"        }","lastModifiedDate":"2021-10-20"},{"lineNumber":157,"author":{"gitId":"EdwardZYWang"},"content":"        if (!isCaloriesParsed) {","lastModifiedDate":"2021-10-31"},{"lineNumber":158,"author":{"gitId":"EdwardZYWang"},"content":"            throw new MissingWorkoutCalorieSeparatorException();","lastModifiedDate":"2021-10-31"},{"lineNumber":159,"author":{"gitId":"EdwardZYWang"},"content":"        }","lastModifiedDate":"2021-10-31"},{"lineNumber":160,"author":{"gitId":"EdwardZYWang"},"content":"        if (calories \u003c 0) {","lastModifiedDate":"2021-10-20"},{"lineNumber":161,"author":{"gitId":"EdwardZYWang"},"content":"            throw new NegativeWorkoutCalorieException();","lastModifiedDate":"2021-10-24"},{"lineNumber":162,"author":{"gitId":"EdwardZYWang"},"content":"        } else {","lastModifiedDate":"2021-10-20"},{"lineNumber":163,"author":{"gitId":"EdwardZYWang"},"content":"            return calories;","lastModifiedDate":"2021-10-20"},{"lineNumber":164,"author":{"gitId":"EdwardZYWang"},"content":"        }","lastModifiedDate":"2021-10-20"},{"lineNumber":165,"author":{"gitId":"EdwardZYWang"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":166,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":167,"author":{"gitId":"pragyan01"},"content":"    //@@author pragyan01","lastModifiedDate":"2021-11-02"},{"lineNumber":168,"author":{"gitId":"pragyan01"},"content":"    /**","lastModifiedDate":"2021-11-05"},{"lineNumber":169,"author":{"gitId":"pragyan01"},"content":"     * This method extracts volume parameter from user input.","lastModifiedDate":"2021-11-05"},{"lineNumber":170,"author":{"gitId":"pragyan01"},"content":"     *","lastModifiedDate":"2021-11-05"},{"lineNumber":171,"author":{"gitId":"pragyan01"},"content":"     *@param inputArguments user input provided","lastModifiedDate":"2021-11-05"},{"lineNumber":172,"author":{"gitId":"pragyan01"},"content":"     *@throws DukeException if volume entered is negative","lastModifiedDate":"2021-11-05"},{"lineNumber":173,"author":{"gitId":"pragyan01"},"content":"     *@return volume parameter","lastModifiedDate":"2021-11-05"},{"lineNumber":174,"author":{"gitId":"pragyan01"},"content":"     *","lastModifiedDate":"2021-11-05"},{"lineNumber":175,"author":{"gitId":"pragyan01"},"content":"     *@author pragyan01","lastModifiedDate":"2021-11-05"},{"lineNumber":176,"author":{"gitId":"pragyan01"},"content":"     */","lastModifiedDate":"2021-11-05"},{"lineNumber":177,"author":{"gitId":"pragyan01"},"content":"    public static int getVolume(String inputArguments) throws DukeException {","lastModifiedDate":"2021-10-11"},{"lineNumber":178,"author":{"gitId":"pragyan01"},"content":"        String[] userInput \u003d inputArguments.split(\"\\\\s+\");","lastModifiedDate":"2021-11-03"},{"lineNumber":179,"author":{"gitId":"pragyan01"},"content":"        int length \u003d userInput.length;","lastModifiedDate":"2021-10-11"},{"lineNumber":180,"author":{"gitId":"pragyan01"},"content":"        int volume \u003d 0;","lastModifiedDate":"2021-10-11"},{"lineNumber":181,"author":{"gitId":"pragyan01"},"content":"        for (int i \u003d 1; i \u003c length; i++) {","lastModifiedDate":"2021-10-11"},{"lineNumber":182,"author":{"gitId":"pragyan01"},"content":"            if (userInput[i].equals(VOLUME_SEPARATOR.trim())) {","lastModifiedDate":"2021-10-16"},{"lineNumber":183,"author":{"gitId":"pragyan01"},"content":"                volume \u003d parseStringToInteger(userInput[i + 1]);","lastModifiedDate":"2021-10-11"},{"lineNumber":184,"author":{"gitId":"pragyan01"},"content":"                break;","lastModifiedDate":"2021-10-11"},{"lineNumber":185,"author":{"gitId":"pragyan01"},"content":"            }","lastModifiedDate":"2021-10-11"},{"lineNumber":186,"author":{"gitId":"pragyan01"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":187,"author":{"gitId":"pragyan01"},"content":"        if (volume \u003c 0) {","lastModifiedDate":"2021-10-11"},{"lineNumber":188,"author":{"gitId":"pragyan01"},"content":"            throw new DukeException(\"Negative volume\");","lastModifiedDate":"2021-10-11"},{"lineNumber":189,"author":{"gitId":"pragyan01"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":190,"author":{"gitId":"pragyan01"},"content":"        return volume;","lastModifiedDate":"2021-10-11"},{"lineNumber":191,"author":{"gitId":"pragyan01"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":192,"author":{"gitId":"pragyan01"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":193,"author":{"gitId":"pragyan01"},"content":"    //@@author pragyan01","lastModifiedDate":"2021-11-05"},{"lineNumber":194,"author":{"gitId":"pragyan01"},"content":"    /**","lastModifiedDate":"2021-11-05"},{"lineNumber":195,"author":{"gitId":"pragyan01"},"content":"     * This method extracts description parameter from user input.","lastModifiedDate":"2021-11-05"},{"lineNumber":196,"author":{"gitId":"pragyan01"},"content":"     *","lastModifiedDate":"2021-11-05"},{"lineNumber":197,"author":{"gitId":"pragyan01"},"content":"     *@param inputArguments user input provided","lastModifiedDate":"2021-11-05"},{"lineNumber":198,"author":{"gitId":"pragyan01"},"content":"     *@return description parameter","lastModifiedDate":"2021-11-05"},{"lineNumber":199,"author":{"gitId":"pragyan01"},"content":"     *","lastModifiedDate":"2021-11-05"},{"lineNumber":200,"author":{"gitId":"pragyan01"},"content":"     *@author pragyan01","lastModifiedDate":"2021-11-05"},{"lineNumber":201,"author":{"gitId":"pragyan01"},"content":"     */","lastModifiedDate":"2021-11-05"},{"lineNumber":202,"author":{"gitId":"pragyan01"},"content":"    public static String getDescription(String inputArguments) {","lastModifiedDate":"2021-10-24"},{"lineNumber":203,"author":{"gitId":"pragyan01"},"content":"        String[] userInput;","lastModifiedDate":"2021-10-14"},{"lineNumber":204,"author":{"gitId":"pragyan01"},"content":"        if (containsCalorieSeparator(inputArguments)) {","lastModifiedDate":"2021-10-14"},{"lineNumber":205,"author":{"gitId":"pragyan01"},"content":"            userInput \u003d inputArguments.split(CALORIE_SEPARATOR);","lastModifiedDate":"2021-10-16"},{"lineNumber":206,"author":{"gitId":"pragyan01"},"content":"        } else if (containsDateSeparator(inputArguments)) {","lastModifiedDate":"2021-10-14"},{"lineNumber":207,"author":{"gitId":"pragyan01"},"content":"            userInput \u003d inputArguments.split(DATE_SEPARATOR);","lastModifiedDate":"2021-10-16"},{"lineNumber":208,"author":{"gitId":"pragyan01"},"content":"        } else if (containsTimeSeparator(inputArguments)) {","lastModifiedDate":"2021-10-14"},{"lineNumber":209,"author":{"gitId":"pragyan01"},"content":"            userInput \u003d inputArguments.split(TIME_SEPARATOR);","lastModifiedDate":"2021-10-16"},{"lineNumber":210,"author":{"gitId":"pragyan01"},"content":"        } else {","lastModifiedDate":"2021-10-14"},{"lineNumber":211,"author":{"gitId":"pragyan01"},"content":"            return inputArguments;","lastModifiedDate":"2021-10-14"},{"lineNumber":212,"author":{"gitId":"pragyan01"},"content":"        }","lastModifiedDate":"2021-10-14"},{"lineNumber":213,"author":{"gitId":"pragyan01"},"content":"        String description \u003d userInput[0].trim();","lastModifiedDate":"2021-11-04"},{"lineNumber":214,"author":{"gitId":"pragyan01"},"content":"        return description;","lastModifiedDate":"2021-10-08"},{"lineNumber":215,"author":{"gitId":"pragyan01"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":216,"author":{"gitId":"pragyan01"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":217,"author":{"gitId":"VishalJeyaram"},"content":"    //@@author VishalJeyaram","lastModifiedDate":"2021-11-05"},{"lineNumber":218,"author":{"gitId":"VishalJeyaram"},"content":"    /**","lastModifiedDate":"2021-11-05"},{"lineNumber":219,"author":{"gitId":"VishalJeyaram"},"content":"     * Returns date extracted from user\u0027s input.","lastModifiedDate":"2021-11-05"},{"lineNumber":220,"author":{"gitId":"VishalJeyaram"},"content":"     *","lastModifiedDate":"2021-11-05"},{"lineNumber":221,"author":{"gitId":"VishalJeyaram"},"content":"     * @param inputArguments User\u0027s input.","lastModifiedDate":"2021-11-05"},{"lineNumber":222,"author":{"gitId":"VishalJeyaram"},"content":"     * @return Date.","lastModifiedDate":"2021-11-05"},{"lineNumber":223,"author":{"gitId":"VishalJeyaram"},"content":"     * @throws DateTimeParseException If the date is not entered properly.","lastModifiedDate":"2021-11-05"},{"lineNumber":224,"author":{"gitId":"VishalJeyaram"},"content":"     */","lastModifiedDate":"2021-11-05"},{"lineNumber":225,"author":{"gitId":"VishalJeyaram"},"content":"    public static String getDate(String inputArguments) throws DateTimeParseException {","lastModifiedDate":"2021-10-20"},{"lineNumber":226,"author":{"gitId":"VishalJeyaram"},"content":"        String[] userInput \u003d inputArguments.split(\"\\\\s+\");","lastModifiedDate":"2021-11-03"},{"lineNumber":227,"author":{"gitId":"VishalJeyaram"},"content":"        int length \u003d userInput.length;","lastModifiedDate":"2021-10-08"},{"lineNumber":228,"author":{"gitId":"VishalJeyaram"},"content":"        String date \u003d \"\";","lastModifiedDate":"2021-10-08"},{"lineNumber":229,"author":{"gitId":"VishalJeyaram"},"content":"        for (int i \u003d 1; i \u003c length; i++) {","lastModifiedDate":"2021-10-08"},{"lineNumber":230,"author":{"gitId":"VishalJeyaram"},"content":"            if (userInput[i].equals(DATE_SEPARATOR.trim())) {","lastModifiedDate":"2021-10-16"},{"lineNumber":231,"author":{"gitId":"VishalJeyaram"},"content":"                date \u003d userInput[i + 1];","lastModifiedDate":"2021-10-08"},{"lineNumber":232,"author":{"gitId":"VishalJeyaram"},"content":"                break;","lastModifiedDate":"2021-10-08"},{"lineNumber":233,"author":{"gitId":"VishalJeyaram"},"content":"            }","lastModifiedDate":"2021-10-08"},{"lineNumber":234,"author":{"gitId":"VishalJeyaram"},"content":"        }","lastModifiedDate":"2021-10-08"},{"lineNumber":235,"author":{"gitId":"VishalJeyaram"},"content":"        if (date.equals(\"\")) {","lastModifiedDate":"2021-10-16"},{"lineNumber":236,"author":{"gitId":"VishalJeyaram"},"content":"            String newDate \u003d getSystemDate();","lastModifiedDate":"2021-10-18"},{"lineNumber":237,"author":{"gitId":"VishalJeyaram"},"content":"            DateTracker.checkIfDateExists(newDate);","lastModifiedDate":"2021-10-18"},{"lineNumber":238,"author":{"gitId":"VishalJeyaram"},"content":"            return newDate;","lastModifiedDate":"2021-10-18"},{"lineNumber":239,"author":{"gitId":"VishalJeyaram"},"content":"        }","lastModifiedDate":"2021-10-16"},{"lineNumber":240,"author":{"gitId":"VishalJeyaram"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy\");","lastModifiedDate":"2021-10-08"},{"lineNumber":241,"author":{"gitId":"VishalJeyaram"},"content":"        LocalDate localDate \u003d LocalDate.parse(date, formatter);","lastModifiedDate":"2021-10-11"},{"lineNumber":242,"author":{"gitId":"VishalJeyaram"},"content":"        DateTracker.checkIfDateExists(formatter.format(localDate));","lastModifiedDate":"2021-10-24"},{"lineNumber":243,"author":{"gitId":"VishalJeyaram"},"content":"        return formatter.format(localDate);","lastModifiedDate":"2021-10-11"},{"lineNumber":244,"author":{"gitId":"VishalJeyaram"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":245,"author":{"gitId":"VishalJeyaram"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":246,"author":{"gitId":"teoziyiivy"},"content":"    //@@author teoziyiivy","lastModifiedDate":"2021-11-02"},{"lineNumber":247,"author":{"gitId":"teoziyiivy"},"content":"    public static String getDateNoDateTracker(String inputArguments) throws DateTimeParseException {","lastModifiedDate":"2021-10-20"},{"lineNumber":248,"author":{"gitId":"teoziyiivy"},"content":"        String[] userInput \u003d inputArguments.split(\"\\\\s+\");","lastModifiedDate":"2021-11-03"},{"lineNumber":249,"author":{"gitId":"teoziyiivy"},"content":"        int length \u003d userInput.length;","lastModifiedDate":"2021-10-20"},{"lineNumber":250,"author":{"gitId":"teoziyiivy"},"content":"        String date \u003d EMPTY_STRING;","lastModifiedDate":"2021-11-03"},{"lineNumber":251,"author":{"gitId":"teoziyiivy"},"content":"        for (int i \u003d 1; i \u003c length; i++) {","lastModifiedDate":"2021-10-20"},{"lineNumber":252,"author":{"gitId":"teoziyiivy"},"content":"            if (userInput[i].equals(DATE_SEPARATOR.trim())) {","lastModifiedDate":"2021-10-20"},{"lineNumber":253,"author":{"gitId":"teoziyiivy"},"content":"                date \u003d userInput[i + 1];","lastModifiedDate":"2021-10-20"},{"lineNumber":254,"author":{"gitId":"teoziyiivy"},"content":"                break;","lastModifiedDate":"2021-10-20"},{"lineNumber":255,"author":{"gitId":"teoziyiivy"},"content":"            }","lastModifiedDate":"2021-10-20"},{"lineNumber":256,"author":{"gitId":"teoziyiivy"},"content":"        }","lastModifiedDate":"2021-10-20"},{"lineNumber":257,"author":{"gitId":"teoziyiivy"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy\");","lastModifiedDate":"2021-10-31"},{"lineNumber":258,"author":{"gitId":"teoziyiivy"},"content":"        LocalDate localDate \u003d LocalDate.parse(date, formatter);","lastModifiedDate":"2021-10-31"},{"lineNumber":259,"author":{"gitId":"teoziyiivy"},"content":"        return formatter.format(localDate);","lastModifiedDate":"2021-10-31"},{"lineNumber":260,"author":{"gitId":"teoziyiivy"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":261,"author":{"gitId":"teoziyiivy"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":262,"author":{"gitId":"teoziyiivy"},"content":"    //@@author teoziyiivy","lastModifiedDate":"2021-11-02"},{"lineNumber":263,"author":{"gitId":"teoziyiivy"},"content":"    public static String getTime(String inputArguments) throws DateTimeParseException {","lastModifiedDate":"2021-10-20"},{"lineNumber":264,"author":{"gitId":"teoziyiivy"},"content":"        String[] userInput \u003d inputArguments.split(\"\\\\s+\");","lastModifiedDate":"2021-11-03"},{"lineNumber":265,"author":{"gitId":"teoziyiivy"},"content":"        int length \u003d userInput.length;","lastModifiedDate":"2021-10-08"},{"lineNumber":266,"author":{"gitId":"teoziyiivy"},"content":"        String time \u003d \"\";","lastModifiedDate":"2021-10-08"},{"lineNumber":267,"author":{"gitId":"teoziyiivy"},"content":"        for (int i \u003d 1; i \u003c length; i++) {","lastModifiedDate":"2021-10-08"},{"lineNumber":268,"author":{"gitId":"teoziyiivy"},"content":"            if (userInput[i].equals(TIME_SEPARATOR.trim())) {","lastModifiedDate":"2021-10-16"},{"lineNumber":269,"author":{"gitId":"teoziyiivy"},"content":"                time \u003d userInput[i + 1];","lastModifiedDate":"2021-10-08"},{"lineNumber":270,"author":{"gitId":"teoziyiivy"},"content":"                break;","lastModifiedDate":"2021-10-08"},{"lineNumber":271,"author":{"gitId":"teoziyiivy"},"content":"            }","lastModifiedDate":"2021-10-08"},{"lineNumber":272,"author":{"gitId":"teoziyiivy"},"content":"        }","lastModifiedDate":"2021-10-08"},{"lineNumber":273,"author":{"gitId":"teoziyiivy"},"content":"        if (time.equals(\"\")) {","lastModifiedDate":"2021-10-16"},{"lineNumber":274,"author":{"gitId":"teoziyiivy"},"content":"            time \u003d getSystemTime();","lastModifiedDate":"2021-10-16"},{"lineNumber":275,"author":{"gitId":"teoziyiivy"},"content":"        }","lastModifiedDate":"2021-10-16"},{"lineNumber":276,"author":{"gitId":"teoziyiivy"},"content":"        LocalTime localTime \u003d LocalTime.parse(time);","lastModifiedDate":"2021-10-11"},{"lineNumber":277,"author":{"gitId":"teoziyiivy"},"content":"        String properTime \u003d localTime.format(DateTimeFormatter.ofPattern(\"HH:mm\"));","lastModifiedDate":"2021-10-16"},{"lineNumber":278,"author":{"gitId":"teoziyiivy"},"content":"        return properTime;","lastModifiedDate":"2021-10-11"},{"lineNumber":279,"author":{"gitId":"teoziyiivy"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":280,"author":{"gitId":"teoziyiivy"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":281,"author":{"gitId":"teoziyiivy"},"content":"    //@@author teoziyiivy","lastModifiedDate":"2021-11-02"},{"lineNumber":282,"author":{"gitId":"teoziyiivy"},"content":"    /**","lastModifiedDate":"2021-11-03"},{"lineNumber":283,"author":{"gitId":"teoziyiivy"},"content":"     * Extracts the weight from the user input.","lastModifiedDate":"2021-11-03"},{"lineNumber":284,"author":{"gitId":"teoziyiivy"},"content":"     *","lastModifiedDate":"2021-11-03"},{"lineNumber":285,"author":{"gitId":"teoziyiivy"},"content":"     * @param inputArguments User input.","lastModifiedDate":"2021-11-03"},{"lineNumber":286,"author":{"gitId":"teoziyiivy"},"content":"     * @throws DukeException If input does not have a weight or (weight \u003c 0) or (weight \u003e 1000).","lastModifiedDate":"2021-11-03"},{"lineNumber":287,"author":{"gitId":"teoziyiivy"},"content":"     */","lastModifiedDate":"2021-11-03"},{"lineNumber":288,"author":{"gitId":"teoziyiivy"},"content":"    public static double getWeight(String inputArguments) throws DukeException {","lastModifiedDate":"2021-10-25"},{"lineNumber":289,"author":{"gitId":"teoziyiivy"},"content":"        String[] userInput \u003d inputArguments.split(DATE_SEPARATOR);","lastModifiedDate":"2021-10-16"},{"lineNumber":290,"author":{"gitId":"teoziyiivy"},"content":"        if (!userInput[0].matches(\"^\\\\d+(\\\\.\\\\d+)?\")) {","lastModifiedDate":"2021-10-28"},{"lineNumber":291,"author":{"gitId":"teoziyiivy"},"content":"            throw new DukeException(\"Invalid weight!\");","lastModifiedDate":"2021-10-28"},{"lineNumber":292,"author":{"gitId":"teoziyiivy"},"content":"        }","lastModifiedDate":"2021-10-28"},{"lineNumber":293,"author":{"gitId":"teoziyiivy"},"content":"        double weight \u003d parseStringToDouble(userInput[0]);","lastModifiedDate":"2021-10-25"},{"lineNumber":294,"author":{"gitId":"teoziyiivy"},"content":"        if (weight \u003c 0) {","lastModifiedDate":"2021-10-08"},{"lineNumber":295,"author":{"gitId":"teoziyiivy"},"content":"            throw new DukeException(\"Negative weight\");","lastModifiedDate":"2021-10-08"},{"lineNumber":296,"author":{"gitId":"teoziyiivy"},"content":"        }","lastModifiedDate":"2021-10-08"},{"lineNumber":297,"author":{"gitId":"teoziyiivy"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":298,"author":{"gitId":"teoziyiivy"},"content":"        if (weight \u003e 1000) {","lastModifiedDate":"2021-11-03"},{"lineNumber":299,"author":{"gitId":"teoziyiivy"},"content":"            throw new DukeException(\"Exceeded maximum weight\");","lastModifiedDate":"2021-11-03"},{"lineNumber":300,"author":{"gitId":"teoziyiivy"},"content":"        }","lastModifiedDate":"2021-11-03"},{"lineNumber":301,"author":{"gitId":"teoziyiivy"},"content":"        return weight;","lastModifiedDate":"2021-10-08"},{"lineNumber":302,"author":{"gitId":"teoziyiivy"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":303,"author":{"gitId":"teoziyiivy"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":304,"author":{"gitId":"arvejw"},"content":"    //@@author arvejw","lastModifiedDate":"2021-10-24"},{"lineNumber":305,"author":{"gitId":"arvejw"},"content":"    /**","lastModifiedDate":"2021-11-03"},{"lineNumber":306,"author":{"gitId":"arvejw"},"content":"     * Returns the description of the scheduled workout.","lastModifiedDate":"2021-11-03"},{"lineNumber":307,"author":{"gitId":"arvejw"},"content":"     *","lastModifiedDate":"2021-11-03"},{"lineNumber":308,"author":{"gitId":"arvejw"},"content":"     * @param inputArguments Arguments input by the user that come after the command word.","lastModifiedDate":"2021-11-03"},{"lineNumber":309,"author":{"gitId":"arvejw"},"content":"     * @return String Description of the workout.","lastModifiedDate":"2021-11-03"},{"lineNumber":310,"author":{"gitId":"arvejw"},"content":"     * @throws ScheduleException If unable to extract description.","lastModifiedDate":"2021-11-03"},{"lineNumber":311,"author":{"gitId":"arvejw"},"content":"     */","lastModifiedDate":"2021-11-03"},{"lineNumber":312,"author":{"gitId":"arvejw"},"content":"    public static String getScheduleDescription(String inputArguments) throws ScheduleException {","lastModifiedDate":"2021-10-24"},{"lineNumber":313,"author":{"gitId":"arvejw"},"content":"        String[] userInput \u003d inputArguments.split(DATE_SEPARATOR);","lastModifiedDate":"2021-10-16"},{"lineNumber":314,"author":{"gitId":"arvejw"},"content":"        if (userInput.length \u003d\u003d 1) {","lastModifiedDate":"2021-10-11"},{"lineNumber":315,"author":{"gitId":"arvejw"},"content":"            throw new InvalidScheduleDescriptionException();","lastModifiedDate":"2021-10-24"},{"lineNumber":316,"author":{"gitId":"arvejw"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":317,"author":{"gitId":"arvejw"},"content":"        String description \u003d userInput[0].trim();","lastModifiedDate":"2021-11-04"},{"lineNumber":318,"author":{"gitId":"arvejw"},"content":"        return description;","lastModifiedDate":"2021-10-08"},{"lineNumber":319,"author":{"gitId":"arvejw"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":320,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":321,"author":{"gitId":"arvejw"},"content":"    //@@author arvejw","lastModifiedDate":"2021-10-24"},{"lineNumber":322,"author":{"gitId":"arvejw"},"content":"    /**","lastModifiedDate":"2021-11-03"},{"lineNumber":323,"author":{"gitId":"arvejw"},"content":"     * Returns the parsed breakdown of the workout activities.","lastModifiedDate":"2021-11-05"},{"lineNumber":324,"author":{"gitId":"arvejw"},"content":"     *","lastModifiedDate":"2021-11-03"},{"lineNumber":325,"author":{"gitId":"arvejw"},"content":"     * @param inputArguments Arguments input by the user that come after the command word.","lastModifiedDate":"2021-11-03"},{"lineNumber":326,"author":{"gitId":"arvejw"},"content":"     * @return Map of activity description and activity quantifier pairs.","lastModifiedDate":"2021-11-03"},{"lineNumber":327,"author":{"gitId":"arvejw"},"content":"     * @throws ScheduleException If there is missing activity splitter, quantifier or invalid format.","lastModifiedDate":"2021-11-03"},{"lineNumber":328,"author":{"gitId":"arvejw"},"content":"     */","lastModifiedDate":"2021-11-03"},{"lineNumber":329,"author":{"gitId":"arvejw"},"content":"    public static Map\u003cString, ArrayList\u003cInteger\u003e\u003e getActivities(String inputArguments) throws ScheduleException {","lastModifiedDate":"2021-10-24"},{"lineNumber":330,"author":{"gitId":"arvejw"},"content":"        int indexOfActivitySeparator \u003d inputArguments.indexOf(Parser.ACTIVITY_SEPARATOR);","lastModifiedDate":"2021-10-20"},{"lineNumber":331,"author":{"gitId":"arvejw"},"content":"        String subSubstringAfterActivitySeparator \u003d EMPTY_STRING;","lastModifiedDate":"2021-11-03"},{"lineNumber":332,"author":{"gitId":"arvejw"},"content":"        if (indexOfActivitySeparator !\u003d -1) {","lastModifiedDate":"2021-10-20"},{"lineNumber":333,"author":{"gitId":"arvejw"},"content":"            subSubstringAfterActivitySeparator \u003d inputArguments.substring(","lastModifiedDate":"2021-10-20"},{"lineNumber":334,"author":{"gitId":"arvejw"},"content":"                    indexOfActivitySeparator).trim();","lastModifiedDate":"2021-10-20"},{"lineNumber":335,"author":{"gitId":"arvejw"},"content":"            if (isRecurringWorkout(inputArguments)) {","lastModifiedDate":"2021-10-20"},{"lineNumber":336,"author":{"gitId":"arvejw"},"content":"                subSubstringAfterActivitySeparator \u003d subSubstringAfterActivitySeparator","lastModifiedDate":"2021-10-20"},{"lineNumber":337,"author":{"gitId":"arvejw"},"content":"                        .replace(RECURRING_FLAG, \"\").replace(ACTIVITY_SEPARATOR.trim(), \"\").trim();","lastModifiedDate":"2021-10-20"},{"lineNumber":338,"author":{"gitId":"arvejw"},"content":"            } else {","lastModifiedDate":"2021-10-21"},{"lineNumber":339,"author":{"gitId":"arvejw"},"content":"                subSubstringAfterActivitySeparator \u003d subSubstringAfterActivitySeparator","lastModifiedDate":"2021-10-21"},{"lineNumber":340,"author":{"gitId":"arvejw"},"content":"                        .replace(ACTIVITY_SEPARATOR.trim(), \"\").trim();","lastModifiedDate":"2021-10-21"},{"lineNumber":341,"author":{"gitId":"arvejw"},"content":"            }","lastModifiedDate":"2021-10-20"},{"lineNumber":342,"author":{"gitId":"arvejw"},"content":"        }","lastModifiedDate":"2021-10-20"},{"lineNumber":343,"author":{"gitId":"arvejw"},"content":"        if (subSubstringAfterActivitySeparator.isEmpty()) {","lastModifiedDate":"2021-10-20"},{"lineNumber":344,"author":{"gitId":"arvejw"},"content":"            return new HashMap\u003c\u003e();","lastModifiedDate":"2021-10-20"},{"lineNumber":345,"author":{"gitId":"arvejw"},"content":"        } else {","lastModifiedDate":"2021-10-20"},{"lineNumber":346,"author":{"gitId":"arvejw"},"content":"            return getActivityArguments(subSubstringAfterActivitySeparator.split(MULTIPLE_ACTIVITY_MARKER));","lastModifiedDate":"2021-10-20"},{"lineNumber":347,"author":{"gitId":"arvejw"},"content":"        }","lastModifiedDate":"2021-10-20"},{"lineNumber":348,"author":{"gitId":"arvejw"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":349,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":350,"author":{"gitId":"arvejw"},"content":"    //@@author arvejw","lastModifiedDate":"2021-10-24"},{"lineNumber":351,"author":{"gitId":"arvejw"},"content":"    /**","lastModifiedDate":"2021-11-03"},{"lineNumber":352,"author":{"gitId":"arvejw"},"content":"     * Returns the description and arguments for the workout activity.","lastModifiedDate":"2021-11-03"},{"lineNumber":353,"author":{"gitId":"arvejw"},"content":"     *","lastModifiedDate":"2021-11-03"},{"lineNumber":354,"author":{"gitId":"arvejw"},"content":"     * @param nonParsedActivities The activities which have not been parsed.","lastModifiedDate":"2021-11-03"},{"lineNumber":355,"author":{"gitId":"arvejw"},"content":"     * @return Map of activity description and activity quantifier pairs.","lastModifiedDate":"2021-11-03"},{"lineNumber":356,"author":{"gitId":"arvejw"},"content":"     * @throws ScheduleException If there is missing activity splitter, quantifier or invalid format.","lastModifiedDate":"2021-11-03"},{"lineNumber":357,"author":{"gitId":"arvejw"},"content":"     */","lastModifiedDate":"2021-11-03"},{"lineNumber":358,"author":{"gitId":"arvejw"},"content":"    public static Map\u003cString, ArrayList\u003cInteger\u003e\u003e getActivityArguments(String[] nonParsedActivities)","lastModifiedDate":"2021-10-31"},{"lineNumber":359,"author":{"gitId":"arvejw"},"content":"            throws ScheduleException {","lastModifiedDate":"2021-10-24"},{"lineNumber":360,"author":{"gitId":"arvejw"},"content":"        Map\u003cString, ArrayList\u003cInteger\u003e\u003e outputMap \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2021-10-21"},{"lineNumber":361,"author":{"gitId":"arvejw"},"content":"        for (String activity : nonParsedActivities) {","lastModifiedDate":"2021-10-20"},{"lineNumber":362,"author":{"gitId":"arvejw"},"content":"            String[] splitResults \u003d activity.split(ACTIVITY_SPLITTER, 2);","lastModifiedDate":"2021-10-20"},{"lineNumber":363,"author":{"gitId":"arvejw"},"content":"            if (splitResults.length \u003d\u003d 1) {","lastModifiedDate":"2021-10-20"},{"lineNumber":364,"author":{"gitId":"arvejw"},"content":"                throw new MissingActivitySplitterException();","lastModifiedDate":"2021-10-24"},{"lineNumber":365,"author":{"gitId":"arvejw"},"content":"            }","lastModifiedDate":"2021-10-20"},{"lineNumber":366,"author":{"gitId":"arvejw"},"content":"            String[] quantifierSplitResults \u003d splitResults[1].split(QUANTIFIER_SPLITTER, 2);","lastModifiedDate":"2021-10-20"},{"lineNumber":367,"author":{"gitId":"arvejw"},"content":"            if (quantifierSplitResults.length \u003d\u003d 1 \u0026\u0026 !WorkoutActivity.isDistanceActivity(splitResults[0])) {","lastModifiedDate":"2021-10-20"},{"lineNumber":368,"author":{"gitId":"arvejw"},"content":"                throw new MissingActivityQuantifierException();","lastModifiedDate":"2021-10-24"},{"lineNumber":369,"author":{"gitId":"arvejw"},"content":"            }","lastModifiedDate":"2021-10-20"},{"lineNumber":370,"author":{"gitId":"arvejw"},"content":"            if (quantifierSplitResults.length \u003d\u003d 2 \u0026\u0026 WorkoutActivity.isDistanceActivity(splitResults[0])) {","lastModifiedDate":"2021-11-04"},{"lineNumber":371,"author":{"gitId":"arvejw"},"content":"                throw new UnnecessaryQuantifierException();","lastModifiedDate":"2021-11-04"},{"lineNumber":372,"author":{"gitId":"arvejw"},"content":"            }","lastModifiedDate":"2021-11-04"},{"lineNumber":373,"author":{"gitId":"arvejw"},"content":"            ArrayList\u003cInteger\u003e activityQuantifiers \u003d new ArrayList\u003cInteger\u003e();","lastModifiedDate":"2021-10-24"},{"lineNumber":374,"author":{"gitId":"arvejw"},"content":"            if (WorkoutActivity.isDistanceActivity(splitResults[0])) {","lastModifiedDate":"2021-10-20"},{"lineNumber":375,"author":{"gitId":"arvejw"},"content":"                parseDistanceActivityQuantifiers(quantifierSplitResults, activityQuantifiers);","lastModifiedDate":"2021-11-04"},{"lineNumber":376,"author":{"gitId":"arvejw"},"content":"            } else if (quantifierSplitResults.length \u003d\u003d 2) {","lastModifiedDate":"2021-11-04"},{"lineNumber":377,"author":{"gitId":"arvejw"},"content":"                parseNonDistanceActivityQuantifiers(quantifierSplitResults, activityQuantifiers);","lastModifiedDate":"2021-11-04"},{"lineNumber":378,"author":{"gitId":"arvejw"},"content":"            } else {","lastModifiedDate":"2021-11-04"},{"lineNumber":379,"author":{"gitId":"arvejw"},"content":"                throw new GetActivityException();","lastModifiedDate":"2021-11-04"},{"lineNumber":380,"author":{"gitId":"arvejw"},"content":"            }","lastModifiedDate":"2021-11-04"},{"lineNumber":381,"author":{"gitId":"arvejw"},"content":"            outputMap.put(splitResults[0].trim(), activityQuantifiers);","lastModifiedDate":"2021-11-04"},{"lineNumber":382,"author":{"gitId":"arvejw"},"content":"        }","lastModifiedDate":"2021-11-04"},{"lineNumber":383,"author":{"gitId":"arvejw"},"content":"        return outputMap;","lastModifiedDate":"2021-11-04"},{"lineNumber":384,"author":{"gitId":"arvejw"},"content":"    }","lastModifiedDate":"2021-11-04"},{"lineNumber":385,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":386,"author":{"gitId":"arvejw"},"content":"    //@@author arvejw","lastModifiedDate":"2021-11-04"},{"lineNumber":387,"author":{"gitId":"arvejw"},"content":"    /**","lastModifiedDate":"2021-11-04"},{"lineNumber":388,"author":{"gitId":"arvejw"},"content":"     * Adds distance activity quantifiers to array list of activity quantifiers.","lastModifiedDate":"2021-11-04"},{"lineNumber":389,"author":{"gitId":"arvejw"},"content":"     *","lastModifiedDate":"2021-11-04"},{"lineNumber":390,"author":{"gitId":"arvejw"},"content":"     * @param quantifierSplitResults Array of quantifier split results.","lastModifiedDate":"2021-11-04"},{"lineNumber":391,"author":{"gitId":"arvejw"},"content":"     * @param activityQuantifiers ArrayList of activity quantifiers.","lastModifiedDate":"2021-11-04"},{"lineNumber":392,"author":{"gitId":"arvejw"},"content":"     * @throws InvalidActivityFormatException If non-integer or integer less than equal to 0 detected.","lastModifiedDate":"2021-11-04"},{"lineNumber":393,"author":{"gitId":"arvejw"},"content":"     */","lastModifiedDate":"2021-11-04"},{"lineNumber":394,"author":{"gitId":"arvejw"},"content":"    private static void parseDistanceActivityQuantifiers(","lastModifiedDate":"2021-11-04"},{"lineNumber":395,"author":{"gitId":"arvejw"},"content":"            String[] quantifierSplitResults, ArrayList\u003cInteger\u003e activityQuantifiers)","lastModifiedDate":"2021-11-04"},{"lineNumber":396,"author":{"gitId":"arvejw"},"content":"            throws InvalidActivityFormatException {","lastModifiedDate":"2021-11-04"},{"lineNumber":397,"author":{"gitId":"arvejw"},"content":"        try {","lastModifiedDate":"2021-10-31"},{"lineNumber":398,"author":{"gitId":"arvejw"},"content":"            if (parseStringToInteger(quantifierSplitResults[0].trim()) \u003c\u003d 0) {","lastModifiedDate":"2021-11-04"},{"lineNumber":399,"author":{"gitId":"arvejw"},"content":"                throw new NumberFormatException();","lastModifiedDate":"2021-11-04"},{"lineNumber":400,"author":{"gitId":"arvejw"},"content":"            }","lastModifiedDate":"2021-11-04"},{"lineNumber":401,"author":{"gitId":"arvejw"},"content":"            activityQuantifiers.add(parseStringToInteger(quantifierSplitResults[0].trim()));","lastModifiedDate":"2021-10-21"},{"lineNumber":402,"author":{"gitId":"arvejw"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2021-10-31"},{"lineNumber":403,"author":{"gitId":"arvejw"},"content":"            throw new InvalidActivityFormatException();","lastModifiedDate":"2021-10-31"},{"lineNumber":404,"author":{"gitId":"arvejw"},"content":"        }","lastModifiedDate":"2021-10-31"},{"lineNumber":405,"author":{"gitId":"arvejw"},"content":"    }","lastModifiedDate":"2021-11-04"},{"lineNumber":406,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":407,"author":{"gitId":"arvejw"},"content":"    //@@author arvejw","lastModifiedDate":"2021-11-04"},{"lineNumber":408,"author":{"gitId":"arvejw"},"content":"    /**","lastModifiedDate":"2021-11-04"},{"lineNumber":409,"author":{"gitId":"arvejw"},"content":"     * Adds non-distance activity quantifiers to array list of activity quantifiers.","lastModifiedDate":"2021-11-04"},{"lineNumber":410,"author":{"gitId":"arvejw"},"content":"     *","lastModifiedDate":"2021-11-04"},{"lineNumber":411,"author":{"gitId":"arvejw"},"content":"     * @param quantifierSplitResults Array of quantifier split results.","lastModifiedDate":"2021-11-04"},{"lineNumber":412,"author":{"gitId":"arvejw"},"content":"     * @param activityQuantifiers ArrayList of activity quantifiers.","lastModifiedDate":"2021-11-04"},{"lineNumber":413,"author":{"gitId":"arvejw"},"content":"     * @throws InvalidActivityFormatException If non-integer or integer less than equal to 0 detected.","lastModifiedDate":"2021-11-04"},{"lineNumber":414,"author":{"gitId":"arvejw"},"content":"     */","lastModifiedDate":"2021-11-04"},{"lineNumber":415,"author":{"gitId":"arvejw"},"content":"    private static void parseNonDistanceActivityQuantifiers(","lastModifiedDate":"2021-11-04"},{"lineNumber":416,"author":{"gitId":"arvejw"},"content":"            String[] quantifierSplitResults, ArrayList\u003cInteger\u003e activityQuantifiers)","lastModifiedDate":"2021-11-04"},{"lineNumber":417,"author":{"gitId":"arvejw"},"content":"            throws InvalidActivityFormatException {","lastModifiedDate":"2021-11-04"},{"lineNumber":418,"author":{"gitId":"arvejw"},"content":"        try {","lastModifiedDate":"2021-10-31"},{"lineNumber":419,"author":{"gitId":"arvejw"},"content":"            if (parseStringToInteger(quantifierSplitResults[0].trim()) \u003c\u003d 0","lastModifiedDate":"2021-11-04"},{"lineNumber":420,"author":{"gitId":"arvejw"},"content":"                    || parseStringToInteger(quantifierSplitResults[1].trim()) \u003c\u003d 0) {","lastModifiedDate":"2021-11-04"},{"lineNumber":421,"author":{"gitId":"arvejw"},"content":"                throw new NumberFormatException();","lastModifiedDate":"2021-11-04"},{"lineNumber":422,"author":{"gitId":"arvejw"},"content":"            }","lastModifiedDate":"2021-11-04"},{"lineNumber":423,"author":{"gitId":"arvejw"},"content":"            activityQuantifiers.add(parseStringToInteger(quantifierSplitResults[0].trim()));","lastModifiedDate":"2021-10-21"},{"lineNumber":424,"author":{"gitId":"arvejw"},"content":"            activityQuantifiers.add(parseStringToInteger(quantifierSplitResults[1].trim()));","lastModifiedDate":"2021-10-21"},{"lineNumber":425,"author":{"gitId":"arvejw"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2021-10-31"},{"lineNumber":426,"author":{"gitId":"arvejw"},"content":"            throw new InvalidActivityFormatException();","lastModifiedDate":"2021-10-31"},{"lineNumber":427,"author":{"gitId":"arvejw"},"content":"        }","lastModifiedDate":"2021-10-31"},{"lineNumber":428,"author":{"gitId":"arvejw"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":429,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":430,"author":{"gitId":"pragyan01"},"content":"    //@@author pragyan01","lastModifiedDate":"2021-11-02"},{"lineNumber":431,"author":{"gitId":"pragyan01"},"content":"    /**","lastModifiedDate":"2021-11-05"},{"lineNumber":432,"author":{"gitId":"pragyan01"},"content":"     * This method obtains current system date of the user.","lastModifiedDate":"2021-11-05"},{"lineNumber":433,"author":{"gitId":"pragyan01"},"content":"     *","lastModifiedDate":"2021-11-05"},{"lineNumber":434,"author":{"gitId":"pragyan01"},"content":"     *@return current system date","lastModifiedDate":"2021-11-05"},{"lineNumber":435,"author":{"gitId":"pragyan01"},"content":"     *","lastModifiedDate":"2021-11-05"},{"lineNumber":436,"author":{"gitId":"pragyan01"},"content":"     *@author pragyan01","lastModifiedDate":"2021-11-05"},{"lineNumber":437,"author":{"gitId":"pragyan01"},"content":"     */","lastModifiedDate":"2021-11-05"},{"lineNumber":438,"author":{"gitId":"pragyan01"},"content":"    public static String getSystemDate() {","lastModifiedDate":"2021-10-16"},{"lineNumber":439,"author":{"gitId":"pragyan01"},"content":"        String systemDate \u003d \"\";","lastModifiedDate":"2021-10-16"},{"lineNumber":440,"author":{"gitId":"pragyan01"},"content":"        DateTimeFormatter dtf \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy\", Locale.getDefault());","lastModifiedDate":"2021-10-16"},{"lineNumber":441,"author":{"gitId":"pragyan01"},"content":"        LocalDate now \u003d LocalDate.now();","lastModifiedDate":"2021-10-16"},{"lineNumber":442,"author":{"gitId":"pragyan01"},"content":"        systemDate \u003d now.format(dtf);","lastModifiedDate":"2021-10-16"},{"lineNumber":443,"author":{"gitId":"pragyan01"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":444,"author":{"gitId":"pragyan01"},"content":"        return systemDate;","lastModifiedDate":"2021-10-16"},{"lineNumber":445,"author":{"gitId":"pragyan01"},"content":"    }","lastModifiedDate":"2021-10-16"},{"lineNumber":446,"author":{"gitId":"pragyan01"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":447,"author":{"gitId":"pragyan01"},"content":"    //@@author pragyan01","lastModifiedDate":"2021-11-02"},{"lineNumber":448,"author":{"gitId":"pragyan01"},"content":"    /**","lastModifiedDate":"2021-11-05"},{"lineNumber":449,"author":{"gitId":"pragyan01"},"content":"     * This method obtains current system time of the user.","lastModifiedDate":"2021-11-05"},{"lineNumber":450,"author":{"gitId":"pragyan01"},"content":"     *","lastModifiedDate":"2021-11-05"},{"lineNumber":451,"author":{"gitId":"pragyan01"},"content":"     *@return current system time","lastModifiedDate":"2021-11-05"},{"lineNumber":452,"author":{"gitId":"pragyan01"},"content":"     *","lastModifiedDate":"2021-11-05"},{"lineNumber":453,"author":{"gitId":"pragyan01"},"content":"     *@author pragyan01","lastModifiedDate":"2021-11-05"},{"lineNumber":454,"author":{"gitId":"pragyan01"},"content":"     */","lastModifiedDate":"2021-11-05"},{"lineNumber":455,"author":{"gitId":"pragyan01"},"content":"    public static String getSystemTime() {","lastModifiedDate":"2021-10-16"},{"lineNumber":456,"author":{"gitId":"pragyan01"},"content":"        String systemTime \u003d \"\";","lastModifiedDate":"2021-10-16"},{"lineNumber":457,"author":{"gitId":"pragyan01"},"content":"        DateTimeFormatter dtf \u003d DateTimeFormatter.ofPattern(\"HH:mm\", Locale.getDefault());","lastModifiedDate":"2021-10-16"},{"lineNumber":458,"author":{"gitId":"pragyan01"},"content":"        LocalTime now \u003d LocalTime.now();","lastModifiedDate":"2021-10-16"},{"lineNumber":459,"author":{"gitId":"pragyan01"},"content":"        systemTime \u003d now.format(dtf);","lastModifiedDate":"2021-10-16"},{"lineNumber":460,"author":{"gitId":"pragyan01"},"content":"        return systemTime;","lastModifiedDate":"2021-10-16"},{"lineNumber":461,"author":{"gitId":"pragyan01"},"content":"    }","lastModifiedDate":"2021-10-16"},{"lineNumber":462,"author":{"gitId":"pragyan01"},"content":"}","lastModifiedDate":"2021-10-08"}],"authorContributionMap":{"pragyan01":83,"teoziyiivy":83,"VishalJeyaram":94,"arvejw":154,"EdwardZYWang":48}},{"path":"src/main/java/seedu/duke/Storage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VishalJeyaram"},"content":"package seedu.duke;","lastModifiedDate":"2021-10-18"},{"lineNumber":2,"author":{"gitId":"VishalJeyaram"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":3,"author":{"gitId":"VishalJeyaram"},"content":"import seedu.duke.exceptions.DukeException;","lastModifiedDate":"2021-10-28"},{"lineNumber":4,"author":{"gitId":"VishalJeyaram"},"content":"import seedu.duke.exceptions.foodbank.FoodBankException;","lastModifiedDate":"2021-11-05"},{"lineNumber":5,"author":{"gitId":"EdwardZYWang"},"content":"import seedu.duke.exceptions.workout.WorkoutException;","lastModifiedDate":"2021-11-06"},{"lineNumber":6,"author":{"gitId":"arvejw"},"content":"import seedu.duke.schedule.ScheduleTracker;","lastModifiedDate":"2021-10-22"},{"lineNumber":7,"author":{"gitId":"arvejw"},"content":"import seedu.duke.schedule.ScheduledWorkout;","lastModifiedDate":"2021-10-22"},{"lineNumber":8,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":9,"author":{"gitId":"VishalJeyaram"},"content":"import java.io.File;","lastModifiedDate":"2021-10-18"},{"lineNumber":10,"author":{"gitId":"VishalJeyaram"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-10-18"},{"lineNumber":11,"author":{"gitId":"VishalJeyaram"},"content":"import java.io.IOException;","lastModifiedDate":"2021-10-18"},{"lineNumber":12,"author":{"gitId":"VishalJeyaram"},"content":"import java.nio.file.Files;","lastModifiedDate":"2021-10-18"},{"lineNumber":13,"author":{"gitId":"VishalJeyaram"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2021-10-18"},{"lineNumber":14,"author":{"gitId":"VishalJeyaram"},"content":"import java.nio.file.StandardOpenOption;","lastModifiedDate":"2021-10-18"},{"lineNumber":15,"author":{"gitId":"arvejw"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-10-26"},{"lineNumber":16,"author":{"gitId":"arvejw"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-10-26"},{"lineNumber":17,"author":{"gitId":"VishalJeyaram"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-20"},{"lineNumber":18,"author":{"gitId":"arvejw"},"content":"import java.util.LinkedHashSet;","lastModifiedDate":"2021-10-24"},{"lineNumber":19,"author":{"gitId":"VishalJeyaram"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-10-20"},{"lineNumber":20,"author":{"gitId":"arvejw"},"content":"import java.util.Set;","lastModifiedDate":"2021-10-24"},{"lineNumber":21,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":22,"author":{"gitId":"EdwardZYWang"},"content":"import static seedu.duke.ClickfitMessages.MEAL_PRINT_FORMAT;","lastModifiedDate":"2021-10-21"},{"lineNumber":23,"author":{"gitId":"EdwardZYWang"},"content":"import static seedu.duke.ClickfitMessages.FLUID_PRINT_FORMAT;","lastModifiedDate":"2021-10-21"},{"lineNumber":24,"author":{"gitId":"EdwardZYWang"},"content":"import static seedu.duke.ClickfitMessages.WORKOUT_PRINT_FORMAT;","lastModifiedDate":"2021-10-21"},{"lineNumber":25,"author":{"gitId":"teoziyiivy"},"content":"import static seedu.duke.ClickfitMessages.WEIGHT_PRINT_FORMAT;","lastModifiedDate":"2021-10-22"},{"lineNumber":26,"author":{"gitId":"EdwardZYWang"},"content":"import static seedu.duke.ClickfitMessages.ENDLINE_PRINT_FORMAT;","lastModifiedDate":"2021-10-21"},{"lineNumber":27,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":28,"author":{"gitId":"VishalJeyaram"},"content":"public class Storage {","lastModifiedDate":"2021-10-18"},{"lineNumber":29,"author":{"gitId":"VishalJeyaram"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":30,"author":{"gitId":"arvejw"},"content":"    public static final String SCHEDULE_FILE_PATH \u003d \"Schedule.txt\";","lastModifiedDate":"2021-10-24"},{"lineNumber":31,"author":{"gitId":"arvejw"},"content":"    public static final String WORKOUT_FILE_PATH \u003d \"Workout.txt\";","lastModifiedDate":"2021-10-24"},{"lineNumber":32,"author":{"gitId":"VishalJeyaram"},"content":"    public static final String foodFile \u003d \"Food.txt\";","lastModifiedDate":"2021-10-24"},{"lineNumber":33,"author":{"gitId":"VishalJeyaram"},"content":"    public static final String libraryFile \u003d \"FoodBank.txt\";","lastModifiedDate":"2021-10-24"},{"lineNumber":34,"author":{"gitId":"VishalJeyaram"},"content":"    public static final String weightFile \u003d \"Weight.txt\";","lastModifiedDate":"2021-10-24"},{"lineNumber":35,"author":{"gitId":"VishalJeyaram"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":36,"author":{"gitId":"VishalJeyaram"},"content":"    public Storage() {","lastModifiedDate":"2021-10-24"},{"lineNumber":37,"author":{"gitId":"VishalJeyaram"},"content":"        initializeFoodFile();","lastModifiedDate":"2021-10-24"},{"lineNumber":38,"author":{"gitId":"VishalJeyaram"},"content":"        initializeFoodBankFile();","lastModifiedDate":"2021-10-24"},{"lineNumber":39,"author":{"gitId":"VishalJeyaram"},"content":"        initializeWeightFile();","lastModifiedDate":"2021-10-24"},{"lineNumber":40,"author":{"gitId":"arvejw"},"content":"        initializeScheduleFile();","lastModifiedDate":"2021-10-24"},{"lineNumber":41,"author":{"gitId":"arvejw"},"content":"        initializeWorkoutFile();","lastModifiedDate":"2021-10-24"},{"lineNumber":42,"author":{"gitId":"VishalJeyaram"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":43,"author":{"gitId":"VishalJeyaram"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":44,"author":{"gitId":"VishalJeyaram"},"content":"    //@@author VishalJeyaram","lastModifiedDate":"2021-11-02"},{"lineNumber":45,"author":{"gitId":"VishalJeyaram"},"content":"    /**","lastModifiedDate":"2021-11-05"},{"lineNumber":46,"author":{"gitId":"VishalJeyaram"},"content":"     * Saves meal and fluid headers and date headers to text file.","lastModifiedDate":"2021-11-05"},{"lineNumber":47,"author":{"gitId":"VishalJeyaram"},"content":"     *","lastModifiedDate":"2021-11-05"},{"lineNumber":48,"author":{"gitId":"VishalJeyaram"},"content":"     * @param fluid Fluid object.","lastModifiedDate":"2021-11-05"},{"lineNumber":49,"author":{"gitId":"VishalJeyaram"},"content":"     * @param meal Meal object.","lastModifiedDate":"2021-11-05"},{"lineNumber":50,"author":{"gitId":"VishalJeyaram"},"content":"     * @throws IOException If there is a problem with the text file.","lastModifiedDate":"2021-11-05"},{"lineNumber":51,"author":{"gitId":"VishalJeyaram"},"content":"     */","lastModifiedDate":"2021-11-05"},{"lineNumber":52,"author":{"gitId":"VishalJeyaram"},"content":"    public void saveFood(Fluid fluid, Meal meal) throws IOException {","lastModifiedDate":"2021-10-21"},{"lineNumber":53,"author":{"gitId":"VishalJeyaram"},"content":"        String header;","lastModifiedDate":"2021-10-18"},{"lineNumber":54,"author":{"gitId":"VishalJeyaram"},"content":"        String filePath \u003d new File(foodFile).getAbsolutePath();","lastModifiedDate":"2021-10-24"},{"lineNumber":55,"author":{"gitId":"VishalJeyaram"},"content":"        FileWriter fw \u003d new FileWriter(filePath, false);","lastModifiedDate":"2021-10-20"},{"lineNumber":56,"author":{"gitId":"VishalJeyaram"},"content":"        header \u003d \"Meals\" + \"\\n\";","lastModifiedDate":"2021-10-20"},{"lineNumber":57,"author":{"gitId":"VishalJeyaram"},"content":"        Files.write(Paths.get(filePath), header.getBytes(), StandardOpenOption.APPEND);","lastModifiedDate":"2021-10-20"},{"lineNumber":58,"author":{"gitId":"VishalJeyaram"},"content":"        fw.close();","lastModifiedDate":"2021-10-20"},{"lineNumber":59,"author":{"gitId":"VishalJeyaram"},"content":"        for (String date : DateTracker.dates) {","lastModifiedDate":"2021-10-18"},{"lineNumber":60,"author":{"gitId":"VishalJeyaram"},"content":"            saveFoodLists(filePath, fw, date, meal.meals);","lastModifiedDate":"2021-11-05"},{"lineNumber":61,"author":{"gitId":"VishalJeyaram"},"content":"        }","lastModifiedDate":"2021-10-18"},{"lineNumber":62,"author":{"gitId":"VishalJeyaram"},"content":"        header \u003d \"Fluids\" + \"\\n\";","lastModifiedDate":"2021-10-20"},{"lineNumber":63,"author":{"gitId":"VishalJeyaram"},"content":"        Files.write(Paths.get(filePath), header.getBytes(), StandardOpenOption.APPEND);","lastModifiedDate":"2021-10-20"},{"lineNumber":64,"author":{"gitId":"VishalJeyaram"},"content":"        fw.close();","lastModifiedDate":"2021-10-20"},{"lineNumber":65,"author":{"gitId":"VishalJeyaram"},"content":"        for (String date : DateTracker.dates) {","lastModifiedDate":"2021-10-20"},{"lineNumber":66,"author":{"gitId":"VishalJeyaram"},"content":"            saveFoodLists(filePath, fw, date, fluid.fluidArray);","lastModifiedDate":"2021-11-05"},{"lineNumber":67,"author":{"gitId":"VishalJeyaram"},"content":"        }","lastModifiedDate":"2021-11-05"},{"lineNumber":68,"author":{"gitId":"VishalJeyaram"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":69,"author":{"gitId":"VishalJeyaram"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":70,"author":{"gitId":"VishalJeyaram"},"content":"    //@@author VishalJeyaram","lastModifiedDate":"2021-11-05"},{"lineNumber":71,"author":{"gitId":"VishalJeyaram"},"content":"    /**","lastModifiedDate":"2021-11-05"},{"lineNumber":72,"author":{"gitId":"VishalJeyaram"},"content":"     * Saves meal and fluid lists to text file.","lastModifiedDate":"2021-11-05"},{"lineNumber":73,"author":{"gitId":"VishalJeyaram"},"content":"     *","lastModifiedDate":"2021-11-05"},{"lineNumber":74,"author":{"gitId":"VishalJeyaram"},"content":"     * @param filePath Name of textfile.","lastModifiedDate":"2021-11-05"},{"lineNumber":75,"author":{"gitId":"VishalJeyaram"},"content":"     * @param fw FileWriter variable.","lastModifiedDate":"2021-11-05"},{"lineNumber":76,"author":{"gitId":"VishalJeyaram"},"content":"     * @param date Date of food consumption.","lastModifiedDate":"2021-11-05"},{"lineNumber":77,"author":{"gitId":"VishalJeyaram"},"content":"     * @param foods List of foods.","lastModifiedDate":"2021-11-05"},{"lineNumber":78,"author":{"gitId":"VishalJeyaram"},"content":"     * @throws IOException If there is a problem with the text file.","lastModifiedDate":"2021-11-05"},{"lineNumber":79,"author":{"gitId":"VishalJeyaram"},"content":"     */","lastModifiedDate":"2021-11-05"},{"lineNumber":80,"author":{"gitId":"VishalJeyaram"},"content":"    private void saveFoodLists(String filePath, FileWriter fw, String date, ArrayList\u003cString\u003e foods) throws IOException {","lastModifiedDate":"2021-11-05"},{"lineNumber":81,"author":{"gitId":"VishalJeyaram"},"content":"        int headerFlag;","lastModifiedDate":"2021-11-05"},{"lineNumber":82,"author":{"gitId":"VishalJeyaram"},"content":"        String currentDate;","lastModifiedDate":"2021-11-05"},{"lineNumber":83,"author":{"gitId":"VishalJeyaram"},"content":"        String currentMeal;","lastModifiedDate":"2021-11-05"},{"lineNumber":84,"author":{"gitId":"VishalJeyaram"},"content":"        headerFlag \u003d 0;","lastModifiedDate":"2021-10-18"},{"lineNumber":85,"author":{"gitId":"VishalJeyaram"},"content":"        for (String food : foods) {","lastModifiedDate":"2021-11-05"},{"lineNumber":86,"author":{"gitId":"VishalJeyaram"},"content":"            if (food.contains(date) \u0026\u0026 (headerFlag \u003d\u003d 0)) {","lastModifiedDate":"2021-11-05"},{"lineNumber":87,"author":{"gitId":"VishalJeyaram"},"content":"                currentDate \u003d \"Date: \" + date + \"\\n\";","lastModifiedDate":"2021-10-20"},{"lineNumber":88,"author":{"gitId":"VishalJeyaram"},"content":"                Files.write(Paths.get(filePath), currentDate.getBytes(), StandardOpenOption.APPEND);","lastModifiedDate":"2021-10-20"},{"lineNumber":89,"author":{"gitId":"VishalJeyaram"},"content":"                fw.close();","lastModifiedDate":"2021-10-20"},{"lineNumber":90,"author":{"gitId":"VishalJeyaram"},"content":"                headerFlag \u003d 1;","lastModifiedDate":"2021-10-18"},{"lineNumber":91,"author":{"gitId":"VishalJeyaram"},"content":"            }","lastModifiedDate":"2021-10-18"},{"lineNumber":92,"author":{"gitId":"VishalJeyaram"},"content":"            if (food.contains(date)) {","lastModifiedDate":"2021-11-05"},{"lineNumber":93,"author":{"gitId":"VishalJeyaram"},"content":"                currentMeal \u003d food + \"\\n\";","lastModifiedDate":"2021-11-05"},{"lineNumber":94,"author":{"gitId":"VishalJeyaram"},"content":"                Files.write(Paths.get(filePath), currentMeal.getBytes(), StandardOpenOption.APPEND);","lastModifiedDate":"2021-11-05"},{"lineNumber":95,"author":{"gitId":"VishalJeyaram"},"content":"                fw.close();","lastModifiedDate":"2021-10-20"},{"lineNumber":96,"author":{"gitId":"VishalJeyaram"},"content":"            }","lastModifiedDate":"2021-10-18"},{"lineNumber":97,"author":{"gitId":"VishalJeyaram"},"content":"        }","lastModifiedDate":"2021-10-18"},{"lineNumber":98,"author":{"gitId":"VishalJeyaram"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":99,"author":{"gitId":"VishalJeyaram"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":100,"author":{"gitId":"VishalJeyaram"},"content":"    //@@author VishalJeyaram","lastModifiedDate":"2021-11-02"},{"lineNumber":101,"author":{"gitId":"VishalJeyaram"},"content":"    /**","lastModifiedDate":"2021-11-05"},{"lineNumber":102,"author":{"gitId":"VishalJeyaram"},"content":"     * Saves library meals and fluids to text file.","lastModifiedDate":"2021-11-05"},{"lineNumber":103,"author":{"gitId":"VishalJeyaram"},"content":"     *","lastModifiedDate":"2021-11-05"},{"lineNumber":104,"author":{"gitId":"VishalJeyaram"},"content":"     * @throws IOException If there is a problem with the text file.","lastModifiedDate":"2021-11-05"},{"lineNumber":105,"author":{"gitId":"VishalJeyaram"},"content":"     */","lastModifiedDate":"2021-11-05"},{"lineNumber":106,"author":{"gitId":"VishalJeyaram"},"content":"    public void saveLibrary() throws IOException {","lastModifiedDate":"2021-10-21"},{"lineNumber":107,"author":{"gitId":"VishalJeyaram"},"content":"        String customMeal;","lastModifiedDate":"2021-10-21"},{"lineNumber":108,"author":{"gitId":"VishalJeyaram"},"content":"        String customFluid;","lastModifiedDate":"2021-10-21"},{"lineNumber":109,"author":{"gitId":"VishalJeyaram"},"content":"        String header;","lastModifiedDate":"2021-10-21"},{"lineNumber":110,"author":{"gitId":"VishalJeyaram"},"content":"        String filePath \u003d new File(libraryFile).getAbsolutePath();","lastModifiedDate":"2021-10-24"},{"lineNumber":111,"author":{"gitId":"VishalJeyaram"},"content":"        FileWriter fw \u003d new FileWriter(filePath, false);","lastModifiedDate":"2021-10-21"},{"lineNumber":112,"author":{"gitId":"VishalJeyaram"},"content":"        header \u003d \"Meals\" + \"\\n\";","lastModifiedDate":"2021-10-21"},{"lineNumber":113,"author":{"gitId":"VishalJeyaram"},"content":"        Files.write(Paths.get(filePath), header.getBytes(), StandardOpenOption.APPEND);","lastModifiedDate":"2021-10-18"},{"lineNumber":114,"author":{"gitId":"VishalJeyaram"},"content":"        fw.close();","lastModifiedDate":"2021-10-20"},{"lineNumber":115,"author":{"gitId":"VishalJeyaram"},"content":"        for (String m : FoodBank.meals) {","lastModifiedDate":"2021-10-21"},{"lineNumber":116,"author":{"gitId":"VishalJeyaram"},"content":"            customMeal \u003d m + \"\\n\";","lastModifiedDate":"2021-10-18"},{"lineNumber":117,"author":{"gitId":"VishalJeyaram"},"content":"            Files.write(Paths.get(filePath), customMeal.getBytes(), StandardOpenOption.APPEND);","lastModifiedDate":"2021-10-18"},{"lineNumber":118,"author":{"gitId":"VishalJeyaram"},"content":"            fw.close();","lastModifiedDate":"2021-10-20"},{"lineNumber":119,"author":{"gitId":"VishalJeyaram"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":120,"author":{"gitId":"VishalJeyaram"},"content":"        }","lastModifiedDate":"2021-10-18"},{"lineNumber":121,"author":{"gitId":"VishalJeyaram"},"content":"        header \u003d \"Fluids\" + \"\\n\";","lastModifiedDate":"2021-10-21"},{"lineNumber":122,"author":{"gitId":"VishalJeyaram"},"content":"        Files.write(Paths.get(filePath), header.getBytes(), StandardOpenOption.APPEND);","lastModifiedDate":"2021-10-18"},{"lineNumber":123,"author":{"gitId":"VishalJeyaram"},"content":"        fw.close();","lastModifiedDate":"2021-10-20"},{"lineNumber":124,"author":{"gitId":"VishalJeyaram"},"content":"        for (String f : FoodBank.fluids) {","lastModifiedDate":"2021-10-21"},{"lineNumber":125,"author":{"gitId":"VishalJeyaram"},"content":"            customFluid \u003d f + \"\\n\";","lastModifiedDate":"2021-10-18"},{"lineNumber":126,"author":{"gitId":"VishalJeyaram"},"content":"            Files.write(Paths.get(filePath), customFluid.getBytes(), StandardOpenOption.APPEND);","lastModifiedDate":"2021-10-18"},{"lineNumber":127,"author":{"gitId":"VishalJeyaram"},"content":"            fw.close();","lastModifiedDate":"2021-10-18"},{"lineNumber":128,"author":{"gitId":"VishalJeyaram"},"content":"        }","lastModifiedDate":"2021-10-18"},{"lineNumber":129,"author":{"gitId":"VishalJeyaram"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":130,"author":{"gitId":"VishalJeyaram"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":131,"author":{"gitId":"teoziyiivy"},"content":"    //@@author teoziyiivy","lastModifiedDate":"2021-11-02"},{"lineNumber":132,"author":{"gitId":"teoziyiivy"},"content":"    public void saveWeight(WeightTracker weight) throws IOException {","lastModifiedDate":"2021-10-25"},{"lineNumber":133,"author":{"gitId":"teoziyiivy"},"content":"        String currentWeight;","lastModifiedDate":"2021-10-22"},{"lineNumber":134,"author":{"gitId":"teoziyiivy"},"content":"        String header;","lastModifiedDate":"2021-10-22"},{"lineNumber":135,"author":{"gitId":"teoziyiivy"},"content":"        String filePath \u003d new File(weightFile).getAbsolutePath();","lastModifiedDate":"2021-10-24"},{"lineNumber":136,"author":{"gitId":"teoziyiivy"},"content":"        FileWriter fw \u003d new FileWriter(filePath, false);","lastModifiedDate":"2021-10-22"},{"lineNumber":137,"author":{"gitId":"teoziyiivy"},"content":"        header \u003d \"Weights\" + \"\\n\";","lastModifiedDate":"2021-10-22"},{"lineNumber":138,"author":{"gitId":"teoziyiivy"},"content":"        Files.write(Paths.get(filePath), header.getBytes(), StandardOpenOption.APPEND);","lastModifiedDate":"2021-10-22"},{"lineNumber":139,"author":{"gitId":"teoziyiivy"},"content":"        fw.close();","lastModifiedDate":"2021-10-22"},{"lineNumber":140,"author":{"gitId":"teoziyiivy"},"content":"        for (String w : weight.weightsArray) {","lastModifiedDate":"2021-10-22"},{"lineNumber":141,"author":{"gitId":"teoziyiivy"},"content":"            currentWeight \u003d w + \"\\n\";","lastModifiedDate":"2021-10-22"},{"lineNumber":142,"author":{"gitId":"teoziyiivy"},"content":"            Files.write(Paths.get(filePath), currentWeight.getBytes(), StandardOpenOption.APPEND);","lastModifiedDate":"2021-10-22"},{"lineNumber":143,"author":{"gitId":"teoziyiivy"},"content":"            fw.close();","lastModifiedDate":"2021-10-22"},{"lineNumber":144,"author":{"gitId":"teoziyiivy"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":145,"author":{"gitId":"teoziyiivy"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":146,"author":{"gitId":"teoziyiivy"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":147,"author":{"gitId":"EdwardZYWang"},"content":"    //@@author EdwardZYWang","lastModifiedDate":"2021-11-03"},{"lineNumber":148,"author":{"gitId":"EdwardZYWang"},"content":"    /**","lastModifiedDate":"2021-11-06"},{"lineNumber":149,"author":{"gitId":"EdwardZYWang"},"content":"     * saves the user\u0027s workouts to the text file so that it can be accessed again in future sessions.","lastModifiedDate":"2021-11-06"},{"lineNumber":150,"author":{"gitId":"EdwardZYWang"},"content":"     *","lastModifiedDate":"2021-11-06"},{"lineNumber":151,"author":{"gitId":"EdwardZYWang"},"content":"     * @param workoutTracker workout of the user.","lastModifiedDate":"2021-11-06"},{"lineNumber":152,"author":{"gitId":"EdwardZYWang"},"content":"     * @throws IOException if there is an incorrect input.","lastModifiedDate":"2021-11-06"},{"lineNumber":153,"author":{"gitId":"EdwardZYWang"},"content":"     */","lastModifiedDate":"2021-11-06"},{"lineNumber":154,"author":{"gitId":"EdwardZYWang"},"content":"    public void saveWorkout(WorkoutTracker workoutTracker) throws IOException {","lastModifiedDate":"2021-10-24"},{"lineNumber":155,"author":{"gitId":"EdwardZYWang"},"content":"        FileWriter fileWriter \u003d new FileWriter(WORKOUT_FILE_PATH, true);","lastModifiedDate":"2021-10-24"},{"lineNumber":156,"author":{"gitId":"EdwardZYWang"},"content":"        FileWriter fileCleaner \u003d new FileWriter(WORKOUT_FILE_PATH, false);","lastModifiedDate":"2021-10-24"},{"lineNumber":157,"author":{"gitId":"EdwardZYWang"},"content":"        fileCleaner.write(Parser.EMPTY_STRING);","lastModifiedDate":"2021-11-04"},{"lineNumber":158,"author":{"gitId":"EdwardZYWang"},"content":"        DateTracker.sortDateAndTime(workoutTracker.workouts);","lastModifiedDate":"2021-11-04"},{"lineNumber":159,"author":{"gitId":"EdwardZYWang"},"content":"        fileCleaner.close();","lastModifiedDate":"2021-10-24"},{"lineNumber":160,"author":{"gitId":"EdwardZYWang"},"content":"        for (String w : workoutTracker.workouts) {","lastModifiedDate":"2021-11-04"},{"lineNumber":161,"author":{"gitId":"EdwardZYWang"},"content":"            fileWriter.write(w + System.lineSeparator());","lastModifiedDate":"2021-10-24"},{"lineNumber":162,"author":{"gitId":"EdwardZYWang"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":163,"author":{"gitId":"EdwardZYWang"},"content":"        fileWriter.close();","lastModifiedDate":"2021-10-24"},{"lineNumber":164,"author":{"gitId":"EdwardZYWang"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":165,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":166,"author":{"gitId":"EdwardZYWang"},"content":"    //@@author EdwardZYWang","lastModifiedDate":"2021-11-03"},{"lineNumber":167,"author":{"gitId":"EdwardZYWang"},"content":"    /**","lastModifiedDate":"2021-11-06"},{"lineNumber":168,"author":{"gitId":"EdwardZYWang"},"content":"     * saves the user\u0027s future workout schedule to the text file so that it can be accessed again in future sessions.","lastModifiedDate":"2021-11-06"},{"lineNumber":169,"author":{"gitId":"EdwardZYWang"},"content":"     *","lastModifiedDate":"2021-11-06"},{"lineNumber":170,"author":{"gitId":"EdwardZYWang"},"content":"     * @param scheduleTracker workout of the user.","lastModifiedDate":"2021-11-06"},{"lineNumber":171,"author":{"gitId":"EdwardZYWang"},"content":"     * @throws IOException if there is an incorrect input.","lastModifiedDate":"2021-11-06"},{"lineNumber":172,"author":{"gitId":"EdwardZYWang"},"content":"     */","lastModifiedDate":"2021-11-06"},{"lineNumber":173,"author":{"gitId":"EdwardZYWang"},"content":"    public void saveSchedule(ScheduleTracker scheduleTracker) throws IOException {","lastModifiedDate":"2021-10-24"},{"lineNumber":174,"author":{"gitId":"EdwardZYWang"},"content":"        FileWriter fileWriter \u003d new FileWriter(SCHEDULE_FILE_PATH, true);","lastModifiedDate":"2021-10-24"},{"lineNumber":175,"author":{"gitId":"EdwardZYWang"},"content":"        FileWriter fileCleaner \u003d new FileWriter(SCHEDULE_FILE_PATH, false);","lastModifiedDate":"2021-11-04"},{"lineNumber":176,"author":{"gitId":"EdwardZYWang"},"content":"        ArrayList\u003cString\u003e currentScheduleStringList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-24"},{"lineNumber":177,"author":{"gitId":"EdwardZYWang"},"content":"        for (ScheduledWorkout w : scheduleTracker.getScheduledWorkouts()) {","lastModifiedDate":"2021-10-22"},{"lineNumber":178,"author":{"gitId":"EdwardZYWang"},"content":"            currentScheduleStringList.add(w.getScheduledWorkoutAsString());","lastModifiedDate":"2021-10-24"},{"lineNumber":179,"author":{"gitId":"EdwardZYWang"},"content":"        }","lastModifiedDate":"2021-10-24"},{"lineNumber":180,"author":{"gitId":"EdwardZYWang"},"content":"        DateTracker.sortDateAndTime(currentScheduleStringList);","lastModifiedDate":"2021-11-04"},{"lineNumber":181,"author":{"gitId":"EdwardZYWang"},"content":"        fileCleaner.write(Parser.EMPTY_STRING);","lastModifiedDate":"2021-11-04"},{"lineNumber":182,"author":{"gitId":"EdwardZYWang"},"content":"        fileCleaner.close();","lastModifiedDate":"2021-10-24"},{"lineNumber":183,"author":{"gitId":"EdwardZYWang"},"content":"        for (String s : currentScheduleStringList) {","lastModifiedDate":"2021-11-04"},{"lineNumber":184,"author":{"gitId":"EdwardZYWang"},"content":"            if (Parser.isRecurringWorkout(s)) {","lastModifiedDate":"2021-11-04"},{"lineNumber":185,"author":{"gitId":"EdwardZYWang"},"content":"                fileWriter.write(s + System.lineSeparator());","lastModifiedDate":"2021-11-04"},{"lineNumber":186,"author":{"gitId":"EdwardZYWang"},"content":"                continue;","lastModifiedDate":"2021-11-04"},{"lineNumber":187,"author":{"gitId":"EdwardZYWang"},"content":"            }","lastModifiedDate":"2021-11-04"},{"lineNumber":188,"author":{"gitId":"EdwardZYWang"},"content":"            if (LocalDate.parse(","lastModifiedDate":"2021-11-04"},{"lineNumber":189,"author":{"gitId":"EdwardZYWang"},"content":"                    Parser.getDateNoDateTracker(s),","lastModifiedDate":"2021-11-04"},{"lineNumber":190,"author":{"gitId":"EdwardZYWang"},"content":"                    DateTimeFormatter.ofPattern(\"dd/MM/yyyy\"))","lastModifiedDate":"2021-11-04"},{"lineNumber":191,"author":{"gitId":"EdwardZYWang"},"content":"                    .isBefore(LocalDate.now())) {","lastModifiedDate":"2021-11-04"},{"lineNumber":192,"author":{"gitId":"EdwardZYWang"},"content":"                continue;","lastModifiedDate":"2021-10-26"},{"lineNumber":193,"author":{"gitId":"EdwardZYWang"},"content":"            }","lastModifiedDate":"2021-10-26"},{"lineNumber":194,"author":{"gitId":"EdwardZYWang"},"content":"            fileWriter.write(s + System.lineSeparator());","lastModifiedDate":"2021-10-24"},{"lineNumber":195,"author":{"gitId":"EdwardZYWang"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":196,"author":{"gitId":"EdwardZYWang"},"content":"        fileWriter.close();","lastModifiedDate":"2021-10-24"},{"lineNumber":197,"author":{"gitId":"EdwardZYWang"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":198,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":199,"author":{"gitId":"pragyan01"},"content":"    //@@author pragyan01","lastModifiedDate":"2021-11-02"},{"lineNumber":200,"author":{"gitId":"pragyan01"},"content":"    /**","lastModifiedDate":"2021-11-05"},{"lineNumber":201,"author":{"gitId":"pragyan01"},"content":"     * This method loads all meals saved in .txt file to meal array list.","lastModifiedDate":"2021-11-05"},{"lineNumber":202,"author":{"gitId":"pragyan01"},"content":"     *","lastModifiedDate":"2021-11-05"},{"lineNumber":203,"author":{"gitId":"pragyan01"},"content":"     * @throws IOException if I/O error occurs","lastModifiedDate":"2021-11-05"},{"lineNumber":204,"author":{"gitId":"pragyan01"},"content":"     * @return meal array list","lastModifiedDate":"2021-11-05"},{"lineNumber":205,"author":{"gitId":"pragyan01"},"content":"     *","lastModifiedDate":"2021-11-05"},{"lineNumber":206,"author":{"gitId":"pragyan01"},"content":"     * @author pragyan01","lastModifiedDate":"2021-11-05"},{"lineNumber":207,"author":{"gitId":"pragyan01"},"content":"     */","lastModifiedDate":"2021-11-05"},{"lineNumber":208,"author":{"gitId":"pragyan01"},"content":"    public ArrayList\u003cString\u003e loadMeals() throws IOException {","lastModifiedDate":"2021-10-20"},{"lineNumber":209,"author":{"gitId":"pragyan01"},"content":"        ArrayList\u003cString\u003e meals \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-20"},{"lineNumber":210,"author":{"gitId":"pragyan01"},"content":"        String newFilePath \u003d new File(foodFile).getAbsolutePath();","lastModifiedDate":"2021-10-24"},{"lineNumber":211,"author":{"gitId":"pragyan01"},"content":"        File f \u003d new File(newFilePath);","lastModifiedDate":"2021-10-20"},{"lineNumber":212,"author":{"gitId":"pragyan01"},"content":"        Scanner s \u003d new Scanner(f);","lastModifiedDate":"2021-10-20"},{"lineNumber":213,"author":{"gitId":"pragyan01"},"content":"        String textFromFile;","lastModifiedDate":"2021-10-20"},{"lineNumber":214,"author":{"gitId":"pragyan01"},"content":"        int flag \u003d 0;","lastModifiedDate":"2021-10-20"},{"lineNumber":215,"author":{"gitId":"pragyan01"},"content":"        while ((s.hasNext()) \u0026\u0026 (flag \u003d\u003d 0)) {","lastModifiedDate":"2021-10-20"},{"lineNumber":216,"author":{"gitId":"pragyan01"},"content":"            textFromFile \u003d s.nextLine();","lastModifiedDate":"2021-10-20"},{"lineNumber":217,"author":{"gitId":"pragyan01"},"content":"            if (textFromFile.equals(\"Fluids\")) {","lastModifiedDate":"2021-10-20"},{"lineNumber":218,"author":{"gitId":"pragyan01"},"content":"                flag \u003d 1;","lastModifiedDate":"2021-10-20"},{"lineNumber":219,"author":{"gitId":"pragyan01"},"content":"            } else if (textFromFile.contains(Parser.CALORIE_SEPARATOR)) {","lastModifiedDate":"2021-10-20"},{"lineNumber":220,"author":{"gitId":"pragyan01"},"content":"                meals.add(textFromFile);","lastModifiedDate":"2021-10-20"},{"lineNumber":221,"author":{"gitId":"pragyan01"},"content":"            } else if (textFromFile.contains(\"Date\")) {","lastModifiedDate":"2021-10-21"},{"lineNumber":222,"author":{"gitId":"pragyan01"},"content":"                String[] date \u003d textFromFile.split(\" \");","lastModifiedDate":"2021-10-21"},{"lineNumber":223,"author":{"gitId":"pragyan01"},"content":"                DateTracker.checkIfDateExists(date[1]);","lastModifiedDate":"2021-10-21"},{"lineNumber":224,"author":{"gitId":"pragyan01"},"content":"            }","lastModifiedDate":"2021-10-20"},{"lineNumber":225,"author":{"gitId":"pragyan01"},"content":"        }","lastModifiedDate":"2021-10-20"},{"lineNumber":226,"author":{"gitId":"pragyan01"},"content":"        return meals;","lastModifiedDate":"2021-10-20"},{"lineNumber":227,"author":{"gitId":"pragyan01"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":228,"author":{"gitId":"pragyan01"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":229,"author":{"gitId":"pragyan01"},"content":"    //@@author pragyan01","lastModifiedDate":"2021-11-02"},{"lineNumber":230,"author":{"gitId":"pragyan01"},"content":"    /**","lastModifiedDate":"2021-11-05"},{"lineNumber":231,"author":{"gitId":"pragyan01"},"content":"     * This method loads all fluids saved in .txt file to fluid array list.","lastModifiedDate":"2021-11-05"},{"lineNumber":232,"author":{"gitId":"pragyan01"},"content":"     *","lastModifiedDate":"2021-11-05"},{"lineNumber":233,"author":{"gitId":"pragyan01"},"content":"     * @throws IOException if I/O error occurs","lastModifiedDate":"2021-11-05"},{"lineNumber":234,"author":{"gitId":"pragyan01"},"content":"     * @return fluid array list","lastModifiedDate":"2021-11-05"},{"lineNumber":235,"author":{"gitId":"pragyan01"},"content":"     *","lastModifiedDate":"2021-11-05"},{"lineNumber":236,"author":{"gitId":"pragyan01"},"content":"     * @author pragyan01","lastModifiedDate":"2021-11-05"},{"lineNumber":237,"author":{"gitId":"pragyan01"},"content":"     */","lastModifiedDate":"2021-11-05"},{"lineNumber":238,"author":{"gitId":"pragyan01"},"content":"    public ArrayList\u003cString\u003e loadFluids() throws IOException {","lastModifiedDate":"2021-10-20"},{"lineNumber":239,"author":{"gitId":"pragyan01"},"content":"        ArrayList\u003cString\u003e fluids \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-20"},{"lineNumber":240,"author":{"gitId":"pragyan01"},"content":"        String newFilePath \u003d new File(foodFile).getAbsolutePath();","lastModifiedDate":"2021-10-24"},{"lineNumber":241,"author":{"gitId":"pragyan01"},"content":"        File f \u003d new File(newFilePath);","lastModifiedDate":"2021-10-21"},{"lineNumber":242,"author":{"gitId":"pragyan01"},"content":"        Scanner s \u003d new Scanner(f);","lastModifiedDate":"2021-10-21"},{"lineNumber":243,"author":{"gitId":"pragyan01"},"content":"        String textFromFile;","lastModifiedDate":"2021-10-21"},{"lineNumber":244,"author":{"gitId":"pragyan01"},"content":"        int flag \u003d 0;","lastModifiedDate":"2021-10-21"},{"lineNumber":245,"author":{"gitId":"pragyan01"},"content":"        while (s.hasNext()) {","lastModifiedDate":"2021-10-21"},{"lineNumber":246,"author":{"gitId":"pragyan01"},"content":"            textFromFile \u003d s.nextLine();","lastModifiedDate":"2021-10-21"},{"lineNumber":247,"author":{"gitId":"pragyan01"},"content":"            if ((flag \u003d\u003d 1) \u0026\u0026 (textFromFile.contains(Parser.CALORIE_SEPARATOR))) {","lastModifiedDate":"2021-10-21"},{"lineNumber":248,"author":{"gitId":"pragyan01"},"content":"                fluids.add(textFromFile);","lastModifiedDate":"2021-10-21"},{"lineNumber":249,"author":{"gitId":"pragyan01"},"content":"            } else if (textFromFile.equals(\"Fluids\")) {","lastModifiedDate":"2021-10-21"},{"lineNumber":250,"author":{"gitId":"pragyan01"},"content":"                flag \u003d 1;","lastModifiedDate":"2021-10-21"},{"lineNumber":251,"author":{"gitId":"pragyan01"},"content":"            } else if (textFromFile.contains(\"Date\")) {","lastModifiedDate":"2021-10-21"},{"lineNumber":252,"author":{"gitId":"pragyan01"},"content":"                String[] date \u003d textFromFile.split(\" \");","lastModifiedDate":"2021-10-21"},{"lineNumber":253,"author":{"gitId":"pragyan01"},"content":"                DateTracker.checkIfDateExists(date[1]);","lastModifiedDate":"2021-10-21"},{"lineNumber":254,"author":{"gitId":"pragyan01"},"content":"            }","lastModifiedDate":"2021-10-21"},{"lineNumber":255,"author":{"gitId":"pragyan01"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":256,"author":{"gitId":"pragyan01"},"content":"        return fluids;","lastModifiedDate":"2021-10-21"},{"lineNumber":257,"author":{"gitId":"pragyan01"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":258,"author":{"gitId":"pragyan01"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":259,"author":{"gitId":"teoziyiivy"},"content":"    //@@author teoziyiivy","lastModifiedDate":"2021-11-02"},{"lineNumber":260,"author":{"gitId":"teoziyiivy"},"content":"    public ArrayList\u003cString\u003e loadWeights() throws IOException {","lastModifiedDate":"2021-10-22"},{"lineNumber":261,"author":{"gitId":"teoziyiivy"},"content":"        ArrayList\u003cString\u003e weights \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-22"},{"lineNumber":262,"author":{"gitId":"teoziyiivy"},"content":"        String newFilePath \u003d new File(weightFile).getAbsolutePath();","lastModifiedDate":"2021-10-24"},{"lineNumber":263,"author":{"gitId":"teoziyiivy"},"content":"        File f \u003d new File(newFilePath);","lastModifiedDate":"2021-10-22"},{"lineNumber":264,"author":{"gitId":"teoziyiivy"},"content":"        Scanner s \u003d new Scanner(f);","lastModifiedDate":"2021-10-22"},{"lineNumber":265,"author":{"gitId":"teoziyiivy"},"content":"        String textFromFile;","lastModifiedDate":"2021-10-22"},{"lineNumber":266,"author":{"gitId":"teoziyiivy"},"content":"        int flag \u003d 0;","lastModifiedDate":"2021-10-22"},{"lineNumber":267,"author":{"gitId":"teoziyiivy"},"content":"        while (s.hasNext()) {","lastModifiedDate":"2021-10-22"},{"lineNumber":268,"author":{"gitId":"teoziyiivy"},"content":"            textFromFile \u003d s.nextLine();","lastModifiedDate":"2021-10-22"},{"lineNumber":269,"author":{"gitId":"teoziyiivy"},"content":"            if (flag \u003d\u003d 1) {","lastModifiedDate":"2021-10-22"},{"lineNumber":270,"author":{"gitId":"teoziyiivy"},"content":"                weights.add(textFromFile);","lastModifiedDate":"2021-10-22"},{"lineNumber":271,"author":{"gitId":"teoziyiivy"},"content":"            } else if (textFromFile.equals(\"Weights\")) {","lastModifiedDate":"2021-10-22"},{"lineNumber":272,"author":{"gitId":"teoziyiivy"},"content":"                flag \u003d 1;","lastModifiedDate":"2021-10-22"},{"lineNumber":273,"author":{"gitId":"teoziyiivy"},"content":"            }","lastModifiedDate":"2021-10-22"},{"lineNumber":274,"author":{"gitId":"teoziyiivy"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":275,"author":{"gitId":"teoziyiivy"},"content":"        return weights;","lastModifiedDate":"2021-10-22"},{"lineNumber":276,"author":{"gitId":"teoziyiivy"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":277,"author":{"gitId":"teoziyiivy"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":278,"author":{"gitId":"VishalJeyaram"},"content":"    //@@author VishalJeyaram","lastModifiedDate":"2021-11-02"},{"lineNumber":279,"author":{"gitId":"VishalJeyaram"},"content":"    /**","lastModifiedDate":"2021-11-05"},{"lineNumber":280,"author":{"gitId":"VishalJeyaram"},"content":"     * Loads meal library from text file to arraylist.","lastModifiedDate":"2021-11-05"},{"lineNumber":281,"author":{"gitId":"VishalJeyaram"},"content":"     *","lastModifiedDate":"2021-11-05"},{"lineNumber":282,"author":{"gitId":"VishalJeyaram"},"content":"     * @return Meal library arraylist.","lastModifiedDate":"2021-11-05"},{"lineNumber":283,"author":{"gitId":"VishalJeyaram"},"content":"     * @throws IOException If there is a problem with the text file.","lastModifiedDate":"2021-11-05"},{"lineNumber":284,"author":{"gitId":"VishalJeyaram"},"content":"     */","lastModifiedDate":"2021-11-05"},{"lineNumber":285,"author":{"gitId":"VishalJeyaram"},"content":"    public ArrayList\u003cString\u003e loadMealLibrary() throws IOException {","lastModifiedDate":"2021-10-21"},{"lineNumber":286,"author":{"gitId":"VishalJeyaram"},"content":"        ArrayList\u003cString\u003e meals \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-21"},{"lineNumber":287,"author":{"gitId":"VishalJeyaram"},"content":"        String newFilePath \u003d new File(libraryFile).getAbsolutePath();","lastModifiedDate":"2021-10-24"},{"lineNumber":288,"author":{"gitId":"VishalJeyaram"},"content":"        File f \u003d new File(newFilePath);","lastModifiedDate":"2021-10-21"},{"lineNumber":289,"author":{"gitId":"VishalJeyaram"},"content":"        Scanner s \u003d new Scanner(f);","lastModifiedDate":"2021-10-21"},{"lineNumber":290,"author":{"gitId":"VishalJeyaram"},"content":"        String textFromFile;","lastModifiedDate":"2021-10-21"},{"lineNumber":291,"author":{"gitId":"VishalJeyaram"},"content":"        int flag \u003d 0;","lastModifiedDate":"2021-10-21"},{"lineNumber":292,"author":{"gitId":"VishalJeyaram"},"content":"        while ((s.hasNext()) \u0026\u0026 (flag \u003d\u003d 0)) {","lastModifiedDate":"2021-10-21"},{"lineNumber":293,"author":{"gitId":"VishalJeyaram"},"content":"            textFromFile \u003d s.nextLine();","lastModifiedDate":"2021-10-21"},{"lineNumber":294,"author":{"gitId":"VishalJeyaram"},"content":"            if (textFromFile.equals(\"Fluids\")) {","lastModifiedDate":"2021-10-21"},{"lineNumber":295,"author":{"gitId":"VishalJeyaram"},"content":"                flag \u003d 1;","lastModifiedDate":"2021-10-21"},{"lineNumber":296,"author":{"gitId":"VishalJeyaram"},"content":"            } else if (textFromFile.contains(Parser.CALORIE_SEPARATOR)) {","lastModifiedDate":"2021-10-21"},{"lineNumber":297,"author":{"gitId":"VishalJeyaram"},"content":"                meals.add(textFromFile);","lastModifiedDate":"2021-10-21"},{"lineNumber":298,"author":{"gitId":"VishalJeyaram"},"content":"            } else if (textFromFile.contains(\"Date\")) {","lastModifiedDate":"2021-10-21"},{"lineNumber":299,"author":{"gitId":"VishalJeyaram"},"content":"                String[] date \u003d textFromFile.split(\" \");","lastModifiedDate":"2021-10-21"},{"lineNumber":300,"author":{"gitId":"VishalJeyaram"},"content":"                DateTracker.checkIfDateExists(date[1]);","lastModifiedDate":"2021-10-21"},{"lineNumber":301,"author":{"gitId":"VishalJeyaram"},"content":"            }","lastModifiedDate":"2021-10-21"},{"lineNumber":302,"author":{"gitId":"VishalJeyaram"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":303,"author":{"gitId":"VishalJeyaram"},"content":"        return meals;","lastModifiedDate":"2021-10-21"},{"lineNumber":304,"author":{"gitId":"VishalJeyaram"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":305,"author":{"gitId":"VishalJeyaram"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":306,"author":{"gitId":"pragyan01"},"content":"    //@@author pragyan01","lastModifiedDate":"2021-11-02"},{"lineNumber":307,"author":{"gitId":"pragyan01"},"content":"    /**","lastModifiedDate":"2021-11-05"},{"lineNumber":308,"author":{"gitId":"pragyan01"},"content":"     * This method loads all fluid entries for foodbank saved in .txt file to fluid array list.","lastModifiedDate":"2021-11-05"},{"lineNumber":309,"author":{"gitId":"pragyan01"},"content":"     *","lastModifiedDate":"2021-11-05"},{"lineNumber":310,"author":{"gitId":"pragyan01"},"content":"     * @throws IOException if I/O error occurs","lastModifiedDate":"2021-11-05"},{"lineNumber":311,"author":{"gitId":"pragyan01"},"content":"     * @return fluid array lists","lastModifiedDate":"2021-11-05"},{"lineNumber":312,"author":{"gitId":"pragyan01"},"content":"     *","lastModifiedDate":"2021-11-05"},{"lineNumber":313,"author":{"gitId":"pragyan01"},"content":"     * @author pragyan01","lastModifiedDate":"2021-11-05"},{"lineNumber":314,"author":{"gitId":"pragyan01"},"content":"     */","lastModifiedDate":"2021-11-05"},{"lineNumber":315,"author":{"gitId":"pragyan01"},"content":"    public ArrayList\u003cString\u003e loadFluidLibrary() throws IOException {","lastModifiedDate":"2021-10-21"},{"lineNumber":316,"author":{"gitId":"pragyan01"},"content":"        ArrayList\u003cString\u003e fluids \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-21"},{"lineNumber":317,"author":{"gitId":"pragyan01"},"content":"        String newFilePath \u003d new File(libraryFile).getAbsolutePath();","lastModifiedDate":"2021-10-24"},{"lineNumber":318,"author":{"gitId":"pragyan01"},"content":"        File f \u003d new File(newFilePath);","lastModifiedDate":"2021-10-20"},{"lineNumber":319,"author":{"gitId":"pragyan01"},"content":"        Scanner s \u003d new Scanner(f);","lastModifiedDate":"2021-10-20"},{"lineNumber":320,"author":{"gitId":"pragyan01"},"content":"        String textFromFile;","lastModifiedDate":"2021-10-20"},{"lineNumber":321,"author":{"gitId":"pragyan01"},"content":"        int flag \u003d 0;","lastModifiedDate":"2021-10-20"},{"lineNumber":322,"author":{"gitId":"pragyan01"},"content":"        while (s.hasNext()) {","lastModifiedDate":"2021-10-20"},{"lineNumber":323,"author":{"gitId":"pragyan01"},"content":"            textFromFile \u003d s.nextLine();","lastModifiedDate":"2021-10-20"},{"lineNumber":324,"author":{"gitId":"pragyan01"},"content":"            if ((flag \u003d\u003d 1) \u0026\u0026 (textFromFile.contains(Parser.CALORIE_SEPARATOR))) {","lastModifiedDate":"2021-10-20"},{"lineNumber":325,"author":{"gitId":"pragyan01"},"content":"                fluids.add(textFromFile);","lastModifiedDate":"2021-10-20"},{"lineNumber":326,"author":{"gitId":"pragyan01"},"content":"            } else if (textFromFile.equals(\"Fluids\")) {","lastModifiedDate":"2021-10-20"},{"lineNumber":327,"author":{"gitId":"pragyan01"},"content":"                flag \u003d 1;","lastModifiedDate":"2021-10-20"},{"lineNumber":328,"author":{"gitId":"pragyan01"},"content":"            } else if (textFromFile.contains(\"Date\")) {","lastModifiedDate":"2021-10-21"},{"lineNumber":329,"author":{"gitId":"pragyan01"},"content":"                String[] date \u003d textFromFile.split(\" \");","lastModifiedDate":"2021-10-21"},{"lineNumber":330,"author":{"gitId":"pragyan01"},"content":"                DateTracker.checkIfDateExists(date[1]);","lastModifiedDate":"2021-10-21"},{"lineNumber":331,"author":{"gitId":"pragyan01"},"content":"            }","lastModifiedDate":"2021-10-20"},{"lineNumber":332,"author":{"gitId":"pragyan01"},"content":"        }","lastModifiedDate":"2021-10-20"},{"lineNumber":333,"author":{"gitId":"pragyan01"},"content":"        return fluids;","lastModifiedDate":"2021-10-20"},{"lineNumber":334,"author":{"gitId":"pragyan01"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":335,"author":{"gitId":"pragyan01"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":336,"author":{"gitId":"EdwardZYWang"},"content":"    //@@author EdwardZYWang","lastModifiedDate":"2021-11-03"},{"lineNumber":337,"author":{"gitId":"EdwardZYWang"},"content":"    /**","lastModifiedDate":"2021-11-06"},{"lineNumber":338,"author":{"gitId":"EdwardZYWang"},"content":"     * Loads all the workouts in the text file and stores them as an array list of strings for workout summary.","lastModifiedDate":"2021-11-06"},{"lineNumber":339,"author":{"gitId":"EdwardZYWang"},"content":"     *","lastModifiedDate":"2021-11-06"},{"lineNumber":340,"author":{"gitId":"EdwardZYWang"},"content":"     * @return workout array list.","lastModifiedDate":"2021-11-06"},{"lineNumber":341,"author":{"gitId":"EdwardZYWang"},"content":"     * @throws IOException if there is an incorrect input.","lastModifiedDate":"2021-11-06"},{"lineNumber":342,"author":{"gitId":"EdwardZYWang"},"content":"     */","lastModifiedDate":"2021-11-06"},{"lineNumber":343,"author":{"gitId":"EdwardZYWang"},"content":"    public ArrayList\u003cString\u003e loadWorkouts() throws IOException {","lastModifiedDate":"2021-10-22"},{"lineNumber":344,"author":{"gitId":"EdwardZYWang"},"content":"        ArrayList\u003cString\u003e workout \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-22"},{"lineNumber":345,"author":{"gitId":"EdwardZYWang"},"content":"        File dataFile \u003d new File(WORKOUT_FILE_PATH);","lastModifiedDate":"2021-10-24"},{"lineNumber":346,"author":{"gitId":"EdwardZYWang"},"content":"        Scanner fileScanner \u003d new Scanner(dataFile);","lastModifiedDate":"2021-10-22"},{"lineNumber":347,"author":{"gitId":"EdwardZYWang"},"content":"        String textFromFile;","lastModifiedDate":"2021-10-22"},{"lineNumber":348,"author":{"gitId":"EdwardZYWang"},"content":"        while (fileScanner.hasNext()) {","lastModifiedDate":"2021-10-24"},{"lineNumber":349,"author":{"gitId":"EdwardZYWang"},"content":"            textFromFile \u003d fileScanner.nextLine();","lastModifiedDate":"2021-10-22"},{"lineNumber":350,"author":{"gitId":"EdwardZYWang"},"content":"            if (Parser.containsCalorieSeparator(textFromFile) \u0026\u0026 Parser.containsDateSeparator(textFromFile)","lastModifiedDate":"2021-10-22"},{"lineNumber":351,"author":{"gitId":"EdwardZYWang"},"content":"                    \u0026\u0026 Parser.containsTimeSeparator(textFromFile)) {","lastModifiedDate":"2021-10-22"},{"lineNumber":352,"author":{"gitId":"EdwardZYWang"},"content":"                workout.add(textFromFile);","lastModifiedDate":"2021-10-22"},{"lineNumber":353,"author":{"gitId":"EdwardZYWang"},"content":"            }","lastModifiedDate":"2021-10-22"},{"lineNumber":354,"author":{"gitId":"EdwardZYWang"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":355,"author":{"gitId":"EdwardZYWang"},"content":"        return workout;","lastModifiedDate":"2021-10-22"},{"lineNumber":356,"author":{"gitId":"EdwardZYWang"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":357,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":358,"author":{"gitId":"EdwardZYWang"},"content":"    //@@author EdwardZYWang","lastModifiedDate":"2021-11-03"},{"lineNumber":359,"author":{"gitId":"EdwardZYWang"},"content":"    /**","lastModifiedDate":"2021-11-06"},{"lineNumber":360,"author":{"gitId":"EdwardZYWang"},"content":"     * Creates workout schedule file if it hasn\u0027t been created already.","lastModifiedDate":"2021-11-06"},{"lineNumber":361,"author":{"gitId":"EdwardZYWang"},"content":"     *","lastModifiedDate":"2021-11-06"},{"lineNumber":362,"author":{"gitId":"EdwardZYWang"},"content":"     */","lastModifiedDate":"2021-11-06"},{"lineNumber":363,"author":{"gitId":"EdwardZYWang"},"content":"    public static void initializeScheduleFile() {","lastModifiedDate":"2021-10-24"},{"lineNumber":364,"author":{"gitId":"EdwardZYWang"},"content":"        File dataFile \u003d new File(SCHEDULE_FILE_PATH);","lastModifiedDate":"2021-10-24"},{"lineNumber":365,"author":{"gitId":"EdwardZYWang"},"content":"        if (!dataFile.exists()) {","lastModifiedDate":"2021-10-20"},{"lineNumber":366,"author":{"gitId":"EdwardZYWang"},"content":"            try {","lastModifiedDate":"2021-10-20"},{"lineNumber":367,"author":{"gitId":"EdwardZYWang"},"content":"                dataFile.createNewFile();","lastModifiedDate":"2021-10-20"},{"lineNumber":368,"author":{"gitId":"EdwardZYWang"},"content":"            } catch (IOException ioe) {","lastModifiedDate":"2021-10-20"},{"lineNumber":369,"author":{"gitId":"EdwardZYWang"},"content":"                System.out.println(\"Error during data file creation for ScheduleTracker.\");","lastModifiedDate":"2021-10-20"},{"lineNumber":370,"author":{"gitId":"EdwardZYWang"},"content":"            }","lastModifiedDate":"2021-10-20"},{"lineNumber":371,"author":{"gitId":"EdwardZYWang"},"content":"        }","lastModifiedDate":"2021-10-20"},{"lineNumber":372,"author":{"gitId":"EdwardZYWang"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":373,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":374,"author":{"gitId":"VishalJeyaram"},"content":"    //@@author VishalJeyaram","lastModifiedDate":"2021-11-02"},{"lineNumber":375,"author":{"gitId":"VishalJeyaram"},"content":"    /**","lastModifiedDate":"2021-11-05"},{"lineNumber":376,"author":{"gitId":"VishalJeyaram"},"content":"     * Creates food file, \"Food.txt\" if it hasn\u0027t been created already.","lastModifiedDate":"2021-11-05"},{"lineNumber":377,"author":{"gitId":"VishalJeyaram"},"content":"     */","lastModifiedDate":"2021-11-05"},{"lineNumber":378,"author":{"gitId":"VishalJeyaram"},"content":"    public static void initializeFoodFile() {","lastModifiedDate":"2021-10-24"},{"lineNumber":379,"author":{"gitId":"VishalJeyaram"},"content":"        File dataFile \u003d new File(foodFile);","lastModifiedDate":"2021-10-24"},{"lineNumber":380,"author":{"gitId":"VishalJeyaram"},"content":"        if (!dataFile.exists()) {","lastModifiedDate":"2021-10-24"},{"lineNumber":381,"author":{"gitId":"VishalJeyaram"},"content":"            try {","lastModifiedDate":"2021-10-24"},{"lineNumber":382,"author":{"gitId":"VishalJeyaram"},"content":"                dataFile.createNewFile();","lastModifiedDate":"2021-10-24"},{"lineNumber":383,"author":{"gitId":"VishalJeyaram"},"content":"            } catch (IOException ioe) {","lastModifiedDate":"2021-10-24"},{"lineNumber":384,"author":{"gitId":"VishalJeyaram"},"content":"                System.out.println(\"Error during data file creation for meals and fluids.\");","lastModifiedDate":"2021-10-24"},{"lineNumber":385,"author":{"gitId":"VishalJeyaram"},"content":"            }","lastModifiedDate":"2021-10-24"},{"lineNumber":386,"author":{"gitId":"VishalJeyaram"},"content":"        }","lastModifiedDate":"2021-10-24"},{"lineNumber":387,"author":{"gitId":"VishalJeyaram"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":388,"author":{"gitId":"VishalJeyaram"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":389,"author":{"gitId":"teoziyiivy"},"content":"    //@@author teoziyiivy","lastModifiedDate":"2021-11-02"},{"lineNumber":390,"author":{"gitId":"teoziyiivy"},"content":"    public static void initializeFoodBankFile() {","lastModifiedDate":"2021-10-24"},{"lineNumber":391,"author":{"gitId":"teoziyiivy"},"content":"        File dataFile \u003d new File(libraryFile);","lastModifiedDate":"2021-10-24"},{"lineNumber":392,"author":{"gitId":"teoziyiivy"},"content":"        if (!dataFile.exists()) {","lastModifiedDate":"2021-10-24"},{"lineNumber":393,"author":{"gitId":"teoziyiivy"},"content":"            try {","lastModifiedDate":"2021-10-24"},{"lineNumber":394,"author":{"gitId":"teoziyiivy"},"content":"                dataFile.createNewFile();","lastModifiedDate":"2021-10-24"},{"lineNumber":395,"author":{"gitId":"teoziyiivy"},"content":"            } catch (IOException ioe) {","lastModifiedDate":"2021-10-24"},{"lineNumber":396,"author":{"gitId":"teoziyiivy"},"content":"                System.out.println(\"Error during data file creation for meals and fluids.\");","lastModifiedDate":"2021-10-24"},{"lineNumber":397,"author":{"gitId":"teoziyiivy"},"content":"            }","lastModifiedDate":"2021-10-24"},{"lineNumber":398,"author":{"gitId":"teoziyiivy"},"content":"        }","lastModifiedDate":"2021-10-24"},{"lineNumber":399,"author":{"gitId":"teoziyiivy"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":400,"author":{"gitId":"teoziyiivy"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":401,"author":{"gitId":"teoziyiivy"},"content":"    //@@author teoziyiivy","lastModifiedDate":"2021-11-02"},{"lineNumber":402,"author":{"gitId":"teoziyiivy"},"content":"    public static void initializeWeightFile() {","lastModifiedDate":"2021-10-24"},{"lineNumber":403,"author":{"gitId":"teoziyiivy"},"content":"        File dataFile \u003d new File(weightFile);","lastModifiedDate":"2021-10-24"},{"lineNumber":404,"author":{"gitId":"teoziyiivy"},"content":"        if (!dataFile.exists()) {","lastModifiedDate":"2021-10-24"},{"lineNumber":405,"author":{"gitId":"teoziyiivy"},"content":"            try {","lastModifiedDate":"2021-10-24"},{"lineNumber":406,"author":{"gitId":"teoziyiivy"},"content":"                dataFile.createNewFile();","lastModifiedDate":"2021-10-24"},{"lineNumber":407,"author":{"gitId":"teoziyiivy"},"content":"            } catch (IOException ioe) {","lastModifiedDate":"2021-10-24"},{"lineNumber":408,"author":{"gitId":"teoziyiivy"},"content":"                System.out.println(\"Error during data file creation for meals and fluids.\");","lastModifiedDate":"2021-10-24"},{"lineNumber":409,"author":{"gitId":"teoziyiivy"},"content":"            }","lastModifiedDate":"2021-10-24"},{"lineNumber":410,"author":{"gitId":"teoziyiivy"},"content":"        }","lastModifiedDate":"2021-10-24"},{"lineNumber":411,"author":{"gitId":"teoziyiivy"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":412,"author":{"gitId":"teoziyiivy"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":413,"author":{"gitId":"EdwardZYWang"},"content":"    //@@author EdwardZYWang","lastModifiedDate":"2021-11-03"},{"lineNumber":414,"author":{"gitId":"EdwardZYWang"},"content":"    /**","lastModifiedDate":"2021-11-06"},{"lineNumber":415,"author":{"gitId":"EdwardZYWang"},"content":"     * Creates workout file if it hasn\u0027t been created already.","lastModifiedDate":"2021-11-06"},{"lineNumber":416,"author":{"gitId":"EdwardZYWang"},"content":"     *","lastModifiedDate":"2021-11-06"},{"lineNumber":417,"author":{"gitId":"EdwardZYWang"},"content":"     */","lastModifiedDate":"2021-11-06"},{"lineNumber":418,"author":{"gitId":"EdwardZYWang"},"content":"    public static void initializeWorkoutFile() {","lastModifiedDate":"2021-10-24"},{"lineNumber":419,"author":{"gitId":"EdwardZYWang"},"content":"        File dataFile \u003d new File(WORKOUT_FILE_PATH);","lastModifiedDate":"2021-10-24"},{"lineNumber":420,"author":{"gitId":"EdwardZYWang"},"content":"        if (!dataFile.exists()) {","lastModifiedDate":"2021-10-20"},{"lineNumber":421,"author":{"gitId":"EdwardZYWang"},"content":"            try {","lastModifiedDate":"2021-10-20"},{"lineNumber":422,"author":{"gitId":"EdwardZYWang"},"content":"                dataFile.createNewFile();","lastModifiedDate":"2021-10-20"},{"lineNumber":423,"author":{"gitId":"EdwardZYWang"},"content":"            } catch (IOException ioe) {","lastModifiedDate":"2021-10-20"},{"lineNumber":424,"author":{"gitId":"EdwardZYWang"},"content":"                System.out.println(\"Error during data file creation for WorkoutTracker.\");","lastModifiedDate":"2021-10-20"},{"lineNumber":425,"author":{"gitId":"EdwardZYWang"},"content":"            }","lastModifiedDate":"2021-10-20"},{"lineNumber":426,"author":{"gitId":"EdwardZYWang"},"content":"        }","lastModifiedDate":"2021-10-20"},{"lineNumber":427,"author":{"gitId":"EdwardZYWang"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":428,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":429,"author":{"gitId":"EdwardZYWang"},"content":"    //@@author EdwardZYWang","lastModifiedDate":"2021-11-02"},{"lineNumber":430,"author":{"gitId":"EdwardZYWang"},"content":"    /**","lastModifiedDate":"2021-11-06"},{"lineNumber":431,"author":{"gitId":"EdwardZYWang"},"content":"     * A method that take in the array list, meals, and formats it into the appropriate output","lastModifiedDate":"2021-11-06"},{"lineNumber":432,"author":{"gitId":"EdwardZYWang"},"content":"     * form to be a useful summary to the user. if loop accounts for the \"[\" in the first element","lastModifiedDate":"2021-11-06"},{"lineNumber":433,"author":{"gitId":"EdwardZYWang"},"content":"     * during parsing, else loop accounts for the case when there is no \"[\" in the parsed string m.","lastModifiedDate":"2021-11-06"},{"lineNumber":434,"author":{"gitId":"EdwardZYWang"},"content":"     *","lastModifiedDate":"2021-11-06"},{"lineNumber":435,"author":{"gitId":"EdwardZYWang"},"content":"     */","lastModifiedDate":"2021-11-06"},{"lineNumber":436,"author":{"gitId":"EdwardZYWang"},"content":"    public void mealSummary() {","lastModifiedDate":"2021-10-21"},{"lineNumber":437,"author":{"gitId":"EdwardZYWang"},"content":"        int totalCalories \u003d 0;","lastModifiedDate":"2021-10-21"},{"lineNumber":438,"author":{"gitId":"EdwardZYWang"},"content":"        int i \u003d 1;","lastModifiedDate":"2021-10-21"},{"lineNumber":439,"author":{"gitId":"EdwardZYWang"},"content":"        try {","lastModifiedDate":"2021-10-21"},{"lineNumber":440,"author":{"gitId":"EdwardZYWang"},"content":"            for (String m : loadMeals()) {","lastModifiedDate":"2021-10-21"},{"lineNumber":441,"author":{"gitId":"EdwardZYWang"},"content":"                if (m.contains(\"[\")) {","lastModifiedDate":"2021-10-21"},{"lineNumber":442,"author":{"gitId":"EdwardZYWang"},"content":"                    String[] descriptor \u003d m.substring(1).split(\" /c \");","lastModifiedDate":"2021-10-21"},{"lineNumber":443,"author":{"gitId":"EdwardZYWang"},"content":"                    String[] calorie \u003d descriptor[1].split(\" /d \");","lastModifiedDate":"2021-10-21"},{"lineNumber":444,"author":{"gitId":"EdwardZYWang"},"content":"                    String description \u003d descriptor[0];","lastModifiedDate":"2021-10-21"},{"lineNumber":445,"author":{"gitId":"EdwardZYWang"},"content":"                    System.out.println(i + \". \" + description);","lastModifiedDate":"2021-10-21"},{"lineNumber":446,"author":{"gitId":"EdwardZYWang"},"content":"                    String calorieIndiv \u003d calorie[0];","lastModifiedDate":"2021-10-21"},{"lineNumber":447,"author":{"gitId":"EdwardZYWang"},"content":"                    totalCalories +\u003d Integer.parseInt(calorieIndiv);","lastModifiedDate":"2021-10-21"},{"lineNumber":448,"author":{"gitId":"EdwardZYWang"},"content":"                    i++;","lastModifiedDate":"2021-10-21"},{"lineNumber":449,"author":{"gitId":"EdwardZYWang"},"content":"                } else {","lastModifiedDate":"2021-10-21"},{"lineNumber":450,"author":{"gitId":"EdwardZYWang"},"content":"                    String[] descriptor \u003d m.split(\" /c \");","lastModifiedDate":"2021-10-21"},{"lineNumber":451,"author":{"gitId":"EdwardZYWang"},"content":"                    String[] calorie \u003d descriptor[1].split(\" /d \");","lastModifiedDate":"2021-10-21"},{"lineNumber":452,"author":{"gitId":"EdwardZYWang"},"content":"                    String description \u003d descriptor[0];","lastModifiedDate":"2021-10-21"},{"lineNumber":453,"author":{"gitId":"EdwardZYWang"},"content":"                    System.out.println(i + \". \" + description);","lastModifiedDate":"2021-10-21"},{"lineNumber":454,"author":{"gitId":"EdwardZYWang"},"content":"                    String calorieIndiv \u003d calorie[0];","lastModifiedDate":"2021-10-21"},{"lineNumber":455,"author":{"gitId":"EdwardZYWang"},"content":"                    totalCalories +\u003d Integer.parseInt(calorieIndiv);","lastModifiedDate":"2021-10-21"},{"lineNumber":456,"author":{"gitId":"EdwardZYWang"},"content":"                    i++;","lastModifiedDate":"2021-10-21"},{"lineNumber":457,"author":{"gitId":"EdwardZYWang"},"content":"                }","lastModifiedDate":"2021-10-21"},{"lineNumber":458,"author":{"gitId":"EdwardZYWang"},"content":"            }","lastModifiedDate":"2021-10-21"},{"lineNumber":459,"author":{"gitId":"EdwardZYWang"},"content":"            System.out.println(System.lineSeparator() + \"Total number of meals \u003d \" + (i - 1));","lastModifiedDate":"2021-10-21"},{"lineNumber":460,"author":{"gitId":"EdwardZYWang"},"content":"            System.out.println(\"Total calories \u003d \" + totalCalories);","lastModifiedDate":"2021-10-21"},{"lineNumber":461,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":462,"author":{"gitId":"EdwardZYWang"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-10-21"},{"lineNumber":463,"author":{"gitId":"EdwardZYWang"},"content":"            System.out.println(\"Error during printing arrayList\");","lastModifiedDate":"2021-10-21"},{"lineNumber":464,"author":{"gitId":"EdwardZYWang"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":465,"author":{"gitId":"EdwardZYWang"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":466,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":467,"author":{"gitId":"EdwardZYWang"},"content":"    //@@author EdwardZYWang","lastModifiedDate":"2021-11-02"},{"lineNumber":468,"author":{"gitId":"EdwardZYWang"},"content":"    /**","lastModifiedDate":"2021-11-06"},{"lineNumber":469,"author":{"gitId":"EdwardZYWang"},"content":"     * A method that take in the array list, fluids, and formats it into the appropriate output","lastModifiedDate":"2021-11-06"},{"lineNumber":470,"author":{"gitId":"EdwardZYWang"},"content":"     * form to be a useful summary to the user. if loop accounts for the \"[\" in the first element","lastModifiedDate":"2021-11-06"},{"lineNumber":471,"author":{"gitId":"EdwardZYWang"},"content":"     * during parsing, else loop accounts for the case when there is no \"[\" in the parsed string m.","lastModifiedDate":"2021-11-06"},{"lineNumber":472,"author":{"gitId":"EdwardZYWang"},"content":"     *","lastModifiedDate":"2021-11-06"},{"lineNumber":473,"author":{"gitId":"EdwardZYWang"},"content":"     */","lastModifiedDate":"2021-11-06"},{"lineNumber":474,"author":{"gitId":"EdwardZYWang"},"content":"    public void fluidSummary() {","lastModifiedDate":"2021-10-21"},{"lineNumber":475,"author":{"gitId":"EdwardZYWang"},"content":"        int totalCalories \u003d 0;","lastModifiedDate":"2021-10-21"},{"lineNumber":476,"author":{"gitId":"EdwardZYWang"},"content":"        int totalVolume \u003d 0;","lastModifiedDate":"2021-10-21"},{"lineNumber":477,"author":{"gitId":"EdwardZYWang"},"content":"        int i \u003d 1;","lastModifiedDate":"2021-10-21"},{"lineNumber":478,"author":{"gitId":"EdwardZYWang"},"content":"        try {","lastModifiedDate":"2021-10-21"},{"lineNumber":479,"author":{"gitId":"EdwardZYWang"},"content":"            for (String f : loadFluids()) {","lastModifiedDate":"2021-10-21"},{"lineNumber":480,"author":{"gitId":"EdwardZYWang"},"content":"                if (f.contains(\"[\")) {","lastModifiedDate":"2021-10-21"},{"lineNumber":481,"author":{"gitId":"EdwardZYWang"},"content":"                    String[] descriptor \u003d f.substring(1).split(\" /c \");","lastModifiedDate":"2021-10-21"},{"lineNumber":482,"author":{"gitId":"EdwardZYWang"},"content":"                    String[] calorie \u003d descriptor[1].split(\" /v \");","lastModifiedDate":"2021-10-21"},{"lineNumber":483,"author":{"gitId":"EdwardZYWang"},"content":"                    String[] volumeSplitter \u003d calorie[1].split(\" /d \");","lastModifiedDate":"2021-10-21"},{"lineNumber":484,"author":{"gitId":"EdwardZYWang"},"content":"                    String description \u003d descriptor[0];","lastModifiedDate":"2021-10-21"},{"lineNumber":485,"author":{"gitId":"EdwardZYWang"},"content":"                    System.out.println(i + \". \" + description);","lastModifiedDate":"2021-10-21"},{"lineNumber":486,"author":{"gitId":"EdwardZYWang"},"content":"                    String calorieIndiv \u003d calorie[0];","lastModifiedDate":"2021-10-21"},{"lineNumber":487,"author":{"gitId":"EdwardZYWang"},"content":"                    String volumeIndiv \u003d volumeSplitter[0];","lastModifiedDate":"2021-10-21"},{"lineNumber":488,"author":{"gitId":"EdwardZYWang"},"content":"                    totalCalories +\u003d Integer.parseInt(calorieIndiv);","lastModifiedDate":"2021-10-21"},{"lineNumber":489,"author":{"gitId":"EdwardZYWang"},"content":"                    totalVolume +\u003d Integer.parseInt((volumeIndiv));","lastModifiedDate":"2021-10-21"},{"lineNumber":490,"author":{"gitId":"EdwardZYWang"},"content":"                    i++;","lastModifiedDate":"2021-10-21"},{"lineNumber":491,"author":{"gitId":"EdwardZYWang"},"content":"                } else {","lastModifiedDate":"2021-10-21"},{"lineNumber":492,"author":{"gitId":"EdwardZYWang"},"content":"                    String[] descriptor \u003d f.split(\" /c \");","lastModifiedDate":"2021-10-21"},{"lineNumber":493,"author":{"gitId":"EdwardZYWang"},"content":"                    String[] calorie \u003d descriptor[1].split(\" /v \");","lastModifiedDate":"2021-10-21"},{"lineNumber":494,"author":{"gitId":"EdwardZYWang"},"content":"                    String[] volumeSplitter \u003d calorie[1].split(\" /d \");","lastModifiedDate":"2021-10-21"},{"lineNumber":495,"author":{"gitId":"EdwardZYWang"},"content":"                    String description \u003d descriptor[0];","lastModifiedDate":"2021-10-21"},{"lineNumber":496,"author":{"gitId":"EdwardZYWang"},"content":"                    System.out.println(i + \". \" + description);","lastModifiedDate":"2021-10-21"},{"lineNumber":497,"author":{"gitId":"EdwardZYWang"},"content":"                    String calorieIndiv \u003d calorie[0];","lastModifiedDate":"2021-10-21"},{"lineNumber":498,"author":{"gitId":"EdwardZYWang"},"content":"                    String volumeIndiv \u003d volumeSplitter[0];","lastModifiedDate":"2021-10-21"},{"lineNumber":499,"author":{"gitId":"EdwardZYWang"},"content":"                    totalCalories +\u003d Integer.parseInt(calorieIndiv);","lastModifiedDate":"2021-10-21"},{"lineNumber":500,"author":{"gitId":"EdwardZYWang"},"content":"                    totalVolume +\u003d Integer.parseInt((volumeIndiv));","lastModifiedDate":"2021-10-21"},{"lineNumber":501,"author":{"gitId":"EdwardZYWang"},"content":"                    i++;","lastModifiedDate":"2021-10-21"},{"lineNumber":502,"author":{"gitId":"EdwardZYWang"},"content":"                }","lastModifiedDate":"2021-10-21"},{"lineNumber":503,"author":{"gitId":"EdwardZYWang"},"content":"            }","lastModifiedDate":"2021-10-21"},{"lineNumber":504,"author":{"gitId":"EdwardZYWang"},"content":"            if (totalVolume \u003e 0) {","lastModifiedDate":"2021-10-21"},{"lineNumber":505,"author":{"gitId":"EdwardZYWang"},"content":"                System.out.println(\"Total volume consumed \u003d \" + totalVolume);","lastModifiedDate":"2021-10-21"},{"lineNumber":506,"author":{"gitId":"EdwardZYWang"},"content":"            } else {","lastModifiedDate":"2021-10-21"},{"lineNumber":507,"author":{"gitId":"EdwardZYWang"},"content":"                System.out.println(System.lineSeparator() + \"Total variety of drinks \u003d \" + (i - 1));","lastModifiedDate":"2021-10-21"},{"lineNumber":508,"author":{"gitId":"EdwardZYWang"},"content":"            }","lastModifiedDate":"2021-10-21"},{"lineNumber":509,"author":{"gitId":"EdwardZYWang"},"content":"            System.out.println(\"Total calories \u003d \" + totalCalories);","lastModifiedDate":"2021-10-21"},{"lineNumber":510,"author":{"gitId":"EdwardZYWang"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-10-21"},{"lineNumber":511,"author":{"gitId":"EdwardZYWang"},"content":"            System.out.println(\"Error during printing arrayList\");","lastModifiedDate":"2021-10-21"},{"lineNumber":512,"author":{"gitId":"EdwardZYWang"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":513,"author":{"gitId":"EdwardZYWang"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":514,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":515,"author":{"gitId":"teoziyiivy"},"content":"    //@@author teoziyiivy","lastModifiedDate":"2021-11-02"},{"lineNumber":516,"author":{"gitId":"teoziyiivy"},"content":"    public void weightSummary() throws DukeException {","lastModifiedDate":"2021-10-28"},{"lineNumber":517,"author":{"gitId":"teoziyiivy"},"content":"        int i \u003d 1;","lastModifiedDate":"2021-10-28"},{"lineNumber":518,"author":{"gitId":"teoziyiivy"},"content":"        double weight;","lastModifiedDate":"2021-10-28"},{"lineNumber":519,"author":{"gitId":"teoziyiivy"},"content":"        String date;","lastModifiedDate":"2021-10-28"},{"lineNumber":520,"author":{"gitId":"teoziyiivy"},"content":"        try {","lastModifiedDate":"2021-10-22"},{"lineNumber":521,"author":{"gitId":"teoziyiivy"},"content":"            for (String w : loadWeights()) {","lastModifiedDate":"2021-10-28"},{"lineNumber":522,"author":{"gitId":"teoziyiivy"},"content":"                weight \u003d Parser.getWeight(w);","lastModifiedDate":"2021-10-28"},{"lineNumber":523,"author":{"gitId":"teoziyiivy"},"content":"                date \u003d Parser.getDate(w);","lastModifiedDate":"2021-10-28"},{"lineNumber":524,"author":{"gitId":"teoziyiivy"},"content":"                System.out.println(i + \". \" + weight + \" kg \" + date);","lastModifiedDate":"2021-10-28"},{"lineNumber":525,"author":{"gitId":"teoziyiivy"},"content":"                i++;","lastModifiedDate":"2021-10-22"},{"lineNumber":526,"author":{"gitId":"teoziyiivy"},"content":"            }","lastModifiedDate":"2021-10-22"},{"lineNumber":527,"author":{"gitId":"teoziyiivy"},"content":"            System.out.println(System.lineSeparator() + \"Total number of weights \u003d \" + (i - 1));","lastModifiedDate":"2021-10-28"},{"lineNumber":528,"author":{"gitId":"teoziyiivy"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-10-22"},{"lineNumber":529,"author":{"gitId":"teoziyiivy"},"content":"            System.out.println(\"Error during printing arrayList\");","lastModifiedDate":"2021-10-22"},{"lineNumber":530,"author":{"gitId":"teoziyiivy"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":531,"author":{"gitId":"teoziyiivy"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":532,"author":{"gitId":"teoziyiivy"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":533,"author":{"gitId":"EdwardZYWang"},"content":"    //@@author EdwardZYWang","lastModifiedDate":"2021-11-02"},{"lineNumber":534,"author":{"gitId":"EdwardZYWang"},"content":"    /**","lastModifiedDate":"2021-11-06"},{"lineNumber":535,"author":{"gitId":"EdwardZYWang"},"content":"     * A method that take in the array list,workout, and formats it into the appropriate output","lastModifiedDate":"2021-11-06"},{"lineNumber":536,"author":{"gitId":"EdwardZYWang"},"content":"     * form to be a useful summary to the user. if loop accounts for the \"[\" in the first element","lastModifiedDate":"2021-11-06"},{"lineNumber":537,"author":{"gitId":"EdwardZYWang"},"content":"     * during parsing, else loop accounts for the case when there is no \"[\" in the parsed string m.","lastModifiedDate":"2021-11-06"},{"lineNumber":538,"author":{"gitId":"EdwardZYWang"},"content":"     *","lastModifiedDate":"2021-11-06"},{"lineNumber":539,"author":{"gitId":"EdwardZYWang"},"content":"     */","lastModifiedDate":"2021-11-06"},{"lineNumber":540,"author":{"gitId":"EdwardZYWang"},"content":"    public void workoutSummary() {","lastModifiedDate":"2021-10-21"},{"lineNumber":541,"author":{"gitId":"EdwardZYWang"},"content":"        int totalCalories \u003d 0;","lastModifiedDate":"2021-10-21"},{"lineNumber":542,"author":{"gitId":"EdwardZYWang"},"content":"        int i \u003d 1;","lastModifiedDate":"2021-10-21"},{"lineNumber":543,"author":{"gitId":"EdwardZYWang"},"content":"        try {","lastModifiedDate":"2021-10-21"},{"lineNumber":544,"author":{"gitId":"EdwardZYWang"},"content":"            for (String w : loadWorkouts()) {","lastModifiedDate":"2021-10-21"},{"lineNumber":545,"author":{"gitId":"EdwardZYWang"},"content":"                if (w.contains(\"[\")) {","lastModifiedDate":"2021-10-21"},{"lineNumber":546,"author":{"gitId":"EdwardZYWang"},"content":"                    String[] descriptor \u003d w.substring(1).split(\" /c \");","lastModifiedDate":"2021-10-21"},{"lineNumber":547,"author":{"gitId":"EdwardZYWang"},"content":"                    String[] calorie \u003d descriptor[1].split(\" /d \");","lastModifiedDate":"2021-10-21"},{"lineNumber":548,"author":{"gitId":"EdwardZYWang"},"content":"                    String description \u003d descriptor[0];","lastModifiedDate":"2021-10-21"},{"lineNumber":549,"author":{"gitId":"EdwardZYWang"},"content":"                    System.out.println(i + \". \" + description);","lastModifiedDate":"2021-10-21"},{"lineNumber":550,"author":{"gitId":"EdwardZYWang"},"content":"                    String calorieIndiv \u003d calorie[0];","lastModifiedDate":"2021-10-21"},{"lineNumber":551,"author":{"gitId":"EdwardZYWang"},"content":"                    totalCalories +\u003d Integer.parseInt(calorieIndiv);","lastModifiedDate":"2021-10-21"},{"lineNumber":552,"author":{"gitId":"EdwardZYWang"},"content":"                    i++;","lastModifiedDate":"2021-10-21"},{"lineNumber":553,"author":{"gitId":"EdwardZYWang"},"content":"                } else {","lastModifiedDate":"2021-10-21"},{"lineNumber":554,"author":{"gitId":"EdwardZYWang"},"content":"                    String[] descriptor \u003d w.split(\" /c \");","lastModifiedDate":"2021-10-21"},{"lineNumber":555,"author":{"gitId":"EdwardZYWang"},"content":"                    String[] calorie \u003d descriptor[1].split(\" /d \");","lastModifiedDate":"2021-10-21"},{"lineNumber":556,"author":{"gitId":"EdwardZYWang"},"content":"                    String description \u003d descriptor[0];","lastModifiedDate":"2021-10-21"},{"lineNumber":557,"author":{"gitId":"EdwardZYWang"},"content":"                    System.out.println(i + \". \" + description);","lastModifiedDate":"2021-10-21"},{"lineNumber":558,"author":{"gitId":"EdwardZYWang"},"content":"                    String calorieIndiv \u003d calorie[0];","lastModifiedDate":"2021-10-21"},{"lineNumber":559,"author":{"gitId":"EdwardZYWang"},"content":"                    totalCalories +\u003d Integer.parseInt(calorieIndiv);","lastModifiedDate":"2021-10-21"},{"lineNumber":560,"author":{"gitId":"EdwardZYWang"},"content":"                    i++;","lastModifiedDate":"2021-10-21"},{"lineNumber":561,"author":{"gitId":"EdwardZYWang"},"content":"                }","lastModifiedDate":"2021-10-21"},{"lineNumber":562,"author":{"gitId":"EdwardZYWang"},"content":"            }","lastModifiedDate":"2021-10-21"},{"lineNumber":563,"author":{"gitId":"EdwardZYWang"},"content":"            System.out.println(System.lineSeparator() + \"Completed Workouts \u003d \" + (i - 1));","lastModifiedDate":"2021-10-21"},{"lineNumber":564,"author":{"gitId":"EdwardZYWang"},"content":"            System.out.println(\"Total calories burned \u003d \" + totalCalories);","lastModifiedDate":"2021-10-21"},{"lineNumber":565,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":566,"author":{"gitId":"EdwardZYWang"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-10-21"},{"lineNumber":567,"author":{"gitId":"EdwardZYWang"},"content":"            System.out.println(\"Error during printing arrayList\");","lastModifiedDate":"2021-10-21"},{"lineNumber":568,"author":{"gitId":"EdwardZYWang"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":569,"author":{"gitId":"EdwardZYWang"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":570,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":571,"author":{"gitId":"EdwardZYWang"},"content":"    //@@author EdwardZYWang","lastModifiedDate":"2021-11-02"},{"lineNumber":572,"author":{"gitId":"EdwardZYWang"},"content":"    /**","lastModifiedDate":"2021-11-06"},{"lineNumber":573,"author":{"gitId":"EdwardZYWang"},"content":"     * A method that take calls the class summaries above and prints them out in the correct format.","lastModifiedDate":"2021-11-06"},{"lineNumber":574,"author":{"gitId":"EdwardZYWang"},"content":"     * it also prints out the date and time of the summary so that the user knows that he or she is receiving the","lastModifiedDate":"2021-11-06"},{"lineNumber":575,"author":{"gitId":"EdwardZYWang"},"content":"     * most updated information.","lastModifiedDate":"2021-11-06"},{"lineNumber":576,"author":{"gitId":"EdwardZYWang"},"content":"     *","lastModifiedDate":"2021-11-06"},{"lineNumber":577,"author":{"gitId":"EdwardZYWang"},"content":"     * @throws DukeException when there is an error","lastModifiedDate":"2021-11-06"},{"lineNumber":578,"author":{"gitId":"EdwardZYWang"},"content":"     */","lastModifiedDate":"2021-11-06"},{"lineNumber":579,"author":{"gitId":"EdwardZYWang"},"content":"    public void printLoadedLists() throws DukeException {","lastModifiedDate":"2021-10-28"},{"lineNumber":580,"author":{"gitId":"EdwardZYWang"},"content":"        System.out.println(MEAL_PRINT_FORMAT);","lastModifiedDate":"2021-10-21"},{"lineNumber":581,"author":{"gitId":"EdwardZYWang"},"content":"        mealSummary();","lastModifiedDate":"2021-10-21"},{"lineNumber":582,"author":{"gitId":"EdwardZYWang"},"content":"        System.out.println(ENDLINE_PRINT_FORMAT);","lastModifiedDate":"2021-10-21"},{"lineNumber":583,"author":{"gitId":"EdwardZYWang"},"content":"        System.out.println(FLUID_PRINT_FORMAT);","lastModifiedDate":"2021-10-21"},{"lineNumber":584,"author":{"gitId":"EdwardZYWang"},"content":"        fluidSummary();","lastModifiedDate":"2021-10-21"},{"lineNumber":585,"author":{"gitId":"EdwardZYWang"},"content":"        System.out.println(ENDLINE_PRINT_FORMAT);","lastModifiedDate":"2021-10-21"},{"lineNumber":586,"author":{"gitId":"EdwardZYWang"},"content":"        System.out.println(WORKOUT_PRINT_FORMAT);","lastModifiedDate":"2021-10-21"},{"lineNumber":587,"author":{"gitId":"EdwardZYWang"},"content":"        workoutSummary();","lastModifiedDate":"2021-10-21"},{"lineNumber":588,"author":{"gitId":"EdwardZYWang"},"content":"        System.out.println(ENDLINE_PRINT_FORMAT);","lastModifiedDate":"2021-10-21"},{"lineNumber":589,"author":{"gitId":"EdwardZYWang"},"content":"        System.out.println(WEIGHT_PRINT_FORMAT);","lastModifiedDate":"2021-10-22"},{"lineNumber":590,"author":{"gitId":"EdwardZYWang"},"content":"        weightSummary();","lastModifiedDate":"2021-10-22"},{"lineNumber":591,"author":{"gitId":"EdwardZYWang"},"content":"        System.out.println(ENDLINE_PRINT_FORMAT);","lastModifiedDate":"2021-10-22"},{"lineNumber":592,"author":{"gitId":"EdwardZYWang"},"content":"        System.out.println(System.lineSeparator() + \"Updated as of: \"","lastModifiedDate":"2021-10-21"},{"lineNumber":593,"author":{"gitId":"EdwardZYWang"},"content":"                + Parser.getSystemDate() + \" \" + Parser.getSystemTime());","lastModifiedDate":"2021-10-21"},{"lineNumber":594,"author":{"gitId":"EdwardZYWang"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":595,"author":{"gitId":"EdwardZYWang"},"content":"}","lastModifiedDate":"2021-10-18"}],"authorContributionMap":{"pragyan01":90,"teoziyiivy":78,"VishalJeyaram":154,"arvejw":12,"EdwardZYWang":261}},{"path":"src/main/java/seedu/duke/Tracker.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VishalJeyaram"},"content":"package seedu.duke;","lastModifiedDate":"2021-10-08"},{"lineNumber":2,"author":{"gitId":"VishalJeyaram"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":3,"author":{"gitId":"pragyan01"},"content":"//@@author pragyan01","lastModifiedDate":"2021-11-05"},{"lineNumber":4,"author":{"gitId":"pragyan01"},"content":"/**","lastModifiedDate":"2021-11-05"},{"lineNumber":5,"author":{"gitId":"pragyan01"},"content":" * Abstract parent class tracker.","lastModifiedDate":"2021-11-05"},{"lineNumber":6,"author":{"gitId":"pragyan01"},"content":" *","lastModifiedDate":"2021-11-05"},{"lineNumber":7,"author":{"gitId":"pragyan01"},"content":" * @author pragyan01","lastModifiedDate":"2021-11-05"},{"lineNumber":8,"author":{"gitId":"pragyan01"},"content":" */","lastModifiedDate":"2021-11-05"},{"lineNumber":9,"author":{"gitId":"pragyan01"},"content":"public abstract class Tracker {","lastModifiedDate":"2021-10-08"},{"lineNumber":10,"author":{"gitId":"pragyan01"},"content":"}","lastModifiedDate":"2021-10-08"}],"authorContributionMap":{"pragyan01":8,"VishalJeyaram":2}},{"path":"src/main/java/seedu/duke/Ui.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VishalJeyaram"},"content":"package seedu.duke;","lastModifiedDate":"2021-10-07"},{"lineNumber":2,"author":{"gitId":"VishalJeyaram"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":3,"author":{"gitId":"VishalJeyaram"},"content":"import seedu.duke.exceptions.LoadException;","lastModifiedDate":"2021-10-20"},{"lineNumber":4,"author":{"gitId":"EdwardZYWang"},"content":"import java.io.IOException;","lastModifiedDate":"2021-11-06"},{"lineNumber":5,"author":{"gitId":"EdwardZYWang"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-10-11"},{"lineNumber":6,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":7,"author":{"gitId":"EdwardZYWang"},"content":"import static seedu.duke.ClickfitMessages.CALCULATOR_PROMPT;","lastModifiedDate":"2021-10-21"},{"lineNumber":8,"author":{"gitId":"EdwardZYWang"},"content":"import static seedu.duke.ClickfitMessages.MEMORY_STARTUP_N_INPUT;","lastModifiedDate":"2021-10-17"},{"lineNumber":9,"author":{"gitId":"EdwardZYWang"},"content":"import static seedu.duke.ClickfitMessages.MEMORY_STARTUP_PROMPT;","lastModifiedDate":"2021-10-21"},{"lineNumber":10,"author":{"gitId":"EdwardZYWang"},"content":"import static seedu.duke.ClickfitMessages.MEMORY_STARTUP_Y_INPUT;","lastModifiedDate":"2021-10-28"},{"lineNumber":11,"author":{"gitId":"EdwardZYWang"},"content":"import static seedu.duke.ClickfitMessages.MESSAGE_A;","lastModifiedDate":"2021-10-28"},{"lineNumber":12,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":13,"author":{"gitId":"pragyan01"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":14,"author":{"gitId":"VishalJeyaram"},"content":"public class Ui {","lastModifiedDate":"2021-10-07"},{"lineNumber":15,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":16,"author":{"gitId":"arvejw"},"content":"    private Scanner uiScanner;","lastModifiedDate":"2021-10-14"},{"lineNumber":17,"author":{"gitId":"arvejw"},"content":"    public static final String HORIZONTAL_BAR_LONG \u003d \"____________________________________________________________\"","lastModifiedDate":"2021-11-03"},{"lineNumber":18,"author":{"gitId":"arvejw"},"content":"            + \"____________________________________________________________\";","lastModifiedDate":"2021-11-03"},{"lineNumber":19,"author":{"gitId":"arvejw"},"content":"    public static final String HORIZONTAL_BAR_SHORT \u003d \"_________________________________________________________\";","lastModifiedDate":"2021-11-03"},{"lineNumber":20,"author":{"gitId":"arvejw"},"content":"    public static final String USER_PROMPT \u003d \"Enter command: \";","lastModifiedDate":"2021-11-03"},{"lineNumber":21,"author":{"gitId":"EdwardZYWang"},"content":"    protected String sex;","lastModifiedDate":"2021-10-17"},{"lineNumber":22,"author":{"gitId":"EdwardZYWang"},"content":"    protected double weight;","lastModifiedDate":"2021-10-31"},{"lineNumber":23,"author":{"gitId":"EdwardZYWang"},"content":"    protected double height;","lastModifiedDate":"2021-10-31"},{"lineNumber":24,"author":{"gitId":"EdwardZYWang"},"content":"    protected int age;","lastModifiedDate":"2021-10-17"},{"lineNumber":25,"author":{"gitId":"EdwardZYWang"},"content":"    protected int activityLevel;","lastModifiedDate":"2021-10-17"},{"lineNumber":26,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":27,"author":{"gitId":"pragyan01"},"content":"    //@@author pragyan01","lastModifiedDate":"2021-11-05"},{"lineNumber":28,"author":{"gitId":"pragyan01"},"content":"    /**","lastModifiedDate":"2021-11-05"},{"lineNumber":29,"author":{"gitId":"pragyan01"},"content":"     * Constructor of UI class.","lastModifiedDate":"2021-11-05"},{"lineNumber":30,"author":{"gitId":"pragyan01"},"content":"     *","lastModifiedDate":"2021-11-05"},{"lineNumber":31,"author":{"gitId":"pragyan01"},"content":"     */","lastModifiedDate":"2021-11-05"},{"lineNumber":32,"author":{"gitId":"pragyan01"},"content":"    public Ui() {","lastModifiedDate":"2021-10-14"},{"lineNumber":33,"author":{"gitId":"pragyan01"},"content":"        uiScanner \u003d new Scanner(System.in);","lastModifiedDate":"2021-10-14"},{"lineNumber":34,"author":{"gitId":"pragyan01"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":35,"author":{"gitId":"pragyan01"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":36,"author":{"gitId":"EdwardZYWang"},"content":"    //@@author EdwardZYWang","lastModifiedDate":"2021-11-03"},{"lineNumber":37,"author":{"gitId":"EdwardZYWang"},"content":"    /**","lastModifiedDate":"2021-11-06"},{"lineNumber":38,"author":{"gitId":"EdwardZYWang"},"content":"     * Print method with clickFit\u0027s logo.","lastModifiedDate":"2021-11-06"},{"lineNumber":39,"author":{"gitId":"EdwardZYWang"},"content":"     *","lastModifiedDate":"2021-11-06"},{"lineNumber":40,"author":{"gitId":"EdwardZYWang"},"content":"     */","lastModifiedDate":"2021-11-06"},{"lineNumber":41,"author":{"gitId":"EdwardZYWang"},"content":"    public static void welcomeMessage() {","lastModifiedDate":"2021-10-11"},{"lineNumber":42,"author":{"gitId":"EdwardZYWang"},"content":"        String logo \u003d \"   ______  _____     _____            __       ________  _   _\\n\"","lastModifiedDate":"2021-10-11"},{"lineNumber":43,"author":{"gitId":"EdwardZYWang"},"content":"                + \" .\u0027 ___  ||_   _|   |_   _|          [  |  _  |_   __  |(_) / |_\\n\"","lastModifiedDate":"2021-10-11"},{"lineNumber":44,"author":{"gitId":"EdwardZYWang"},"content":"                + \"/ .\u0027   \\\\_|  | |       | |      .---.  | | / ]   | |_ \\\\_|__ `| |-\u0027\\n\"","lastModifiedDate":"2021-10-11"},{"lineNumber":45,"author":{"gitId":"EdwardZYWang"},"content":"                + \"| |         | |   _   | |     / /\u0027`\\\\] | \u0027\u0027 \u003c    |  _|  [  | | |\\n\"","lastModifiedDate":"2021-10-11"},{"lineNumber":46,"author":{"gitId":"EdwardZYWang"},"content":"                + \"\\\\ `.___.\u0027\\\\ _| |__/ | _| |_  _ | \\\\__.  | |`\\\\ \\\\  _| |_    | | | |,\\n\"","lastModifiedDate":"2021-10-11"},{"lineNumber":47,"author":{"gitId":"EdwardZYWang"},"content":"                + \" `.____ .\u0027|________||_____|(_)\u0027.___.\u0027[__|  \\\\_]|_____|  [___]\\\\__/\";","lastModifiedDate":"2021-10-11"},{"lineNumber":48,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":49,"author":{"gitId":"EdwardZYWang"},"content":"        System.out.println(\"Greetings from\\n\" + logo + \"\\n\");","lastModifiedDate":"2021-10-11"},{"lineNumber":50,"author":{"gitId":"EdwardZYWang"},"content":"        System.out.println(MESSAGE_A);","lastModifiedDate":"2021-10-11"},{"lineNumber":51,"author":{"gitId":"EdwardZYWang"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":52,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":53,"author":{"gitId":"pragyan01"},"content":"    //@@author pragyan01","lastModifiedDate":"2021-11-03"},{"lineNumber":54,"author":{"gitId":"pragyan01"},"content":"    /**","lastModifiedDate":"2021-11-05"},{"lineNumber":55,"author":{"gitId":"pragyan01"},"content":"     * This method obtains user\u0027s answers to BMI related questions and then calculates user\u0027s BMI.","lastModifiedDate":"2021-11-05"},{"lineNumber":56,"author":{"gitId":"pragyan01"},"content":"     *","lastModifiedDate":"2021-11-05"},{"lineNumber":57,"author":{"gitId":"pragyan01"},"content":"     * @author pragyan01","lastModifiedDate":"2021-11-05"},{"lineNumber":58,"author":{"gitId":"pragyan01"},"content":"     */","lastModifiedDate":"2021-11-05"},{"lineNumber":59,"author":{"gitId":"pragyan01"},"content":"    public void getInfo() {","lastModifiedDate":"2021-10-17"},{"lineNumber":60,"author":{"gitId":"pragyan01"},"content":"        System.out.println(CALCULATOR_PROMPT);","lastModifiedDate":"2021-10-17"},{"lineNumber":61,"author":{"gitId":"pragyan01"},"content":"        String uiInput;","lastModifiedDate":"2021-10-28"},{"lineNumber":62,"author":{"gitId":"pragyan01"},"content":"        boolean answerIsCorrect \u003d false;","lastModifiedDate":"2021-10-28"},{"lineNumber":63,"author":{"gitId":"pragyan01"},"content":"        boolean flag \u003d false;","lastModifiedDate":"2021-10-28"},{"lineNumber":64,"author":{"gitId":"pragyan01"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":65,"author":{"gitId":"pragyan01"},"content":"        while (!flag) {","lastModifiedDate":"2021-10-28"},{"lineNumber":66,"author":{"gitId":"pragyan01"},"content":"            uiInput \u003d uiScanner.nextLine();","lastModifiedDate":"2021-10-28"},{"lineNumber":67,"author":{"gitId":"pragyan01"},"content":"            if (uiInput.isEmpty()) {","lastModifiedDate":"2021-10-28"},{"lineNumber":68,"author":{"gitId":"pragyan01"},"content":"                System.out.println(\"Calculator closed!\");","lastModifiedDate":"2021-10-28"},{"lineNumber":69,"author":{"gitId":"pragyan01"},"content":"                return;","lastModifiedDate":"2021-10-28"},{"lineNumber":70,"author":{"gitId":"pragyan01"},"content":"            } else if (uiInput.trim().equals(\"y\")) {","lastModifiedDate":"2021-10-28"},{"lineNumber":71,"author":{"gitId":"pragyan01"},"content":"                flag \u003d true;","lastModifiedDate":"2021-10-28"},{"lineNumber":72,"author":{"gitId":"pragyan01"},"content":"            } else {","lastModifiedDate":"2021-10-28"},{"lineNumber":73,"author":{"gitId":"pragyan01"},"content":"                System.out.println(\"wrong input!\");","lastModifiedDate":"2021-10-28"},{"lineNumber":74,"author":{"gitId":"pragyan01"},"content":"            }","lastModifiedDate":"2021-10-28"},{"lineNumber":75,"author":{"gitId":"pragyan01"},"content":"        }","lastModifiedDate":"2021-10-28"},{"lineNumber":76,"author":{"gitId":"pragyan01"},"content":"        answerIsCorrect \u003d checkGender(answerIsCorrect);","lastModifiedDate":"2021-11-04"},{"lineNumber":77,"author":{"gitId":"pragyan01"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":78,"author":{"gitId":"pragyan01"},"content":"        answerIsCorrect \u003d checkWeight(answerIsCorrect);","lastModifiedDate":"2021-11-04"},{"lineNumber":79,"author":{"gitId":"pragyan01"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":80,"author":{"gitId":"pragyan01"},"content":"        answerIsCorrect \u003d checkHeight(answerIsCorrect);","lastModifiedDate":"2021-11-04"},{"lineNumber":81,"author":{"gitId":"pragyan01"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":82,"author":{"gitId":"pragyan01"},"content":"        answerIsCorrect \u003d checkAge(answerIsCorrect);","lastModifiedDate":"2021-11-04"},{"lineNumber":83,"author":{"gitId":"pragyan01"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":84,"author":{"gitId":"pragyan01"},"content":"        checkActivityLevel(answerIsCorrect);","lastModifiedDate":"2021-11-04"},{"lineNumber":85,"author":{"gitId":"pragyan01"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":86,"author":{"gitId":"pragyan01"},"content":"        Calculator calculator \u003d new Calculator(sex, weight, height, age, activityLevel);","lastModifiedDate":"2021-11-04"},{"lineNumber":87,"author":{"gitId":"pragyan01"},"content":"        calculator.getBmi();","lastModifiedDate":"2021-11-04"},{"lineNumber":88,"author":{"gitId":"pragyan01"},"content":"        calculator.getIdealCalories();","lastModifiedDate":"2021-11-04"},{"lineNumber":89,"author":{"gitId":"pragyan01"},"content":"    }","lastModifiedDate":"2021-11-04"},{"lineNumber":90,"author":{"gitId":"pragyan01"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":91,"author":{"gitId":"pragyan01"},"content":"    //@@author pragyan01","lastModifiedDate":"2021-11-06"},{"lineNumber":92,"author":{"gitId":"pragyan01"},"content":"    private void checkActivityLevel(boolean answerIsCorrect) {","lastModifiedDate":"2021-11-04"},{"lineNumber":93,"author":{"gitId":"pragyan01"},"content":"        String uiInput;","lastModifiedDate":"2021-11-04"},{"lineNumber":94,"author":{"gitId":"pragyan01"},"content":"        while (!answerIsCorrect) {","lastModifiedDate":"2021-10-28"},{"lineNumber":95,"author":{"gitId":"pragyan01"},"content":"            try {","lastModifiedDate":"2021-11-04"},{"lineNumber":96,"author":{"gitId":"pragyan01"},"content":"                System.out.println(\"what is your activity level from a scale of 1 - 5? Enter an integer from 1 to 5!\");","lastModifiedDate":"2021-11-04"},{"lineNumber":97,"author":{"gitId":"pragyan01"},"content":"                uiInput \u003d uiScanner.nextLine();","lastModifiedDate":"2021-10-17"},{"lineNumber":98,"author":{"gitId":"pragyan01"},"content":"                if (uiInput.matches(\"^\\\\d+(\\\\.\\\\d+)?\")) {","lastModifiedDate":"2021-11-04"},{"lineNumber":99,"author":{"gitId":"pragyan01"},"content":"                    activityLevel \u003d Integer.parseInt(uiInput);","lastModifiedDate":"2021-11-04"},{"lineNumber":100,"author":{"gitId":"pragyan01"},"content":"                    if ((activityLevel \u003e\u003d 1) \u0026\u0026 (activityLevel \u003c\u003d 5)) {","lastModifiedDate":"2021-11-04"},{"lineNumber":101,"author":{"gitId":"pragyan01"},"content":"                        answerIsCorrect \u003d true;","lastModifiedDate":"2021-10-28"},{"lineNumber":102,"author":{"gitId":"pragyan01"},"content":"                    }","lastModifiedDate":"2021-10-28"},{"lineNumber":103,"author":{"gitId":"pragyan01"},"content":"                }","lastModifiedDate":"2021-10-28"},{"lineNumber":104,"author":{"gitId":"pragyan01"},"content":"            } catch (NumberFormatException e) {","lastModifiedDate":"2021-11-04"},{"lineNumber":105,"author":{"gitId":"pragyan01"},"content":"                System.out.println(\"Please enter a valid input!\");","lastModifiedDate":"2021-11-04"},{"lineNumber":106,"author":{"gitId":"pragyan01"},"content":"            }","lastModifiedDate":"2021-11-04"},{"lineNumber":107,"author":{"gitId":"pragyan01"},"content":"        }","lastModifiedDate":"2021-11-04"},{"lineNumber":108,"author":{"gitId":"pragyan01"},"content":"    }","lastModifiedDate":"2021-11-04"},{"lineNumber":109,"author":{"gitId":"pragyan01"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":110,"author":{"gitId":"pragyan01"},"content":"    //@@author pragyan01","lastModifiedDate":"2021-11-06"},{"lineNumber":111,"author":{"gitId":"pragyan01"},"content":"    private boolean checkAge(boolean answerIsCorrect) {","lastModifiedDate":"2021-11-04"},{"lineNumber":112,"author":{"gitId":"pragyan01"},"content":"        String uiInput;","lastModifiedDate":"2021-11-04"},{"lineNumber":113,"author":{"gitId":"pragyan01"},"content":"        while (!answerIsCorrect) {","lastModifiedDate":"2021-10-28"},{"lineNumber":114,"author":{"gitId":"pragyan01"},"content":"            try {","lastModifiedDate":"2021-11-04"},{"lineNumber":115,"author":{"gitId":"pragyan01"},"content":"                System.out.println(\"what is your age in years? Enter an integer!\");","lastModifiedDate":"2021-11-04"},{"lineNumber":116,"author":{"gitId":"pragyan01"},"content":"                uiInput \u003d uiScanner.nextLine();","lastModifiedDate":"2021-10-17"},{"lineNumber":117,"author":{"gitId":"pragyan01"},"content":"                if (uiInput.matches(\"^\\\\d+(\\\\.\\\\d+)?\")) {","lastModifiedDate":"2021-10-28"},{"lineNumber":118,"author":{"gitId":"pragyan01"},"content":"                    age \u003d Integer.parseInt(uiInput);","lastModifiedDate":"2021-11-04"},{"lineNumber":119,"author":{"gitId":"pragyan01"},"content":"                    answerIsCorrect \u003d true;","lastModifiedDate":"2021-10-28"},{"lineNumber":120,"author":{"gitId":"pragyan01"},"content":"                }","lastModifiedDate":"2021-10-28"},{"lineNumber":121,"author":{"gitId":"pragyan01"},"content":"            } catch (NumberFormatException e) {","lastModifiedDate":"2021-11-04"},{"lineNumber":122,"author":{"gitId":"pragyan01"},"content":"                System.out.println(\"Please enter a valid input!\");","lastModifiedDate":"2021-11-04"},{"lineNumber":123,"author":{"gitId":"pragyan01"},"content":"            }","lastModifiedDate":"2021-11-04"},{"lineNumber":124,"author":{"gitId":"pragyan01"},"content":"        }","lastModifiedDate":"2021-10-28"},{"lineNumber":125,"author":{"gitId":"pragyan01"},"content":"        answerIsCorrect \u003d false;","lastModifiedDate":"2021-10-28"},{"lineNumber":126,"author":{"gitId":"pragyan01"},"content":"        return answerIsCorrect;","lastModifiedDate":"2021-11-04"},{"lineNumber":127,"author":{"gitId":"pragyan01"},"content":"    }","lastModifiedDate":"2021-11-04"},{"lineNumber":128,"author":{"gitId":"pragyan01"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":129,"author":{"gitId":"pragyan01"},"content":"    //@@author pragyan01","lastModifiedDate":"2021-11-06"},{"lineNumber":130,"author":{"gitId":"pragyan01"},"content":"    private boolean checkHeight(boolean answerIsCorrect) {","lastModifiedDate":"2021-11-04"},{"lineNumber":131,"author":{"gitId":"pragyan01"},"content":"        String uiInput;","lastModifiedDate":"2021-11-04"},{"lineNumber":132,"author":{"gitId":"pragyan01"},"content":"        while (!answerIsCorrect) {","lastModifiedDate":"2021-10-28"},{"lineNumber":133,"author":{"gitId":"pragyan01"},"content":"            System.out.println(\"what is your height in cm? Enter a valid number!\");","lastModifiedDate":"2021-11-04"},{"lineNumber":134,"author":{"gitId":"pragyan01"},"content":"            uiInput \u003d uiScanner.nextLine();","lastModifiedDate":"2021-10-17"},{"lineNumber":135,"author":{"gitId":"pragyan01"},"content":"            if (uiInput.matches(\"^\\\\d+(\\\\.\\\\d+)?\")) {","lastModifiedDate":"2021-10-28"},{"lineNumber":136,"author":{"gitId":"pragyan01"},"content":"                height \u003d Double.parseDouble(uiInput);","lastModifiedDate":"2021-10-31"},{"lineNumber":137,"author":{"gitId":"pragyan01"},"content":"                answerIsCorrect \u003d true;","lastModifiedDate":"2021-10-28"},{"lineNumber":138,"author":{"gitId":"pragyan01"},"content":"            }","lastModifiedDate":"2021-10-28"},{"lineNumber":139,"author":{"gitId":"pragyan01"},"content":"        }","lastModifiedDate":"2021-10-28"},{"lineNumber":140,"author":{"gitId":"pragyan01"},"content":"        answerIsCorrect \u003d false;","lastModifiedDate":"2021-10-28"},{"lineNumber":141,"author":{"gitId":"pragyan01"},"content":"        return answerIsCorrect;","lastModifiedDate":"2021-11-04"},{"lineNumber":142,"author":{"gitId":"pragyan01"},"content":"    }","lastModifiedDate":"2021-11-04"},{"lineNumber":143,"author":{"gitId":"pragyan01"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":144,"author":{"gitId":"pragyan01"},"content":"    //@@author pragyan01","lastModifiedDate":"2021-11-06"},{"lineNumber":145,"author":{"gitId":"pragyan01"},"content":"    private boolean checkWeight(boolean answerIsCorrect) {","lastModifiedDate":"2021-11-04"},{"lineNumber":146,"author":{"gitId":"pragyan01"},"content":"        String uiInput;","lastModifiedDate":"2021-11-04"},{"lineNumber":147,"author":{"gitId":"pragyan01"},"content":"        while (!answerIsCorrect) {","lastModifiedDate":"2021-10-28"},{"lineNumber":148,"author":{"gitId":"pragyan01"},"content":"            System.out.println(\"what is your weight in kg? Enter a valid number!\");","lastModifiedDate":"2021-11-04"},{"lineNumber":149,"author":{"gitId":"pragyan01"},"content":"            uiInput \u003d uiScanner.nextLine();","lastModifiedDate":"2021-10-17"},{"lineNumber":150,"author":{"gitId":"pragyan01"},"content":"            if (uiInput.matches(\"^\\\\d+(\\\\.\\\\d+)?\")) {","lastModifiedDate":"2021-10-28"},{"lineNumber":151,"author":{"gitId":"pragyan01"},"content":"                weight \u003d Double.parseDouble(uiInput);","lastModifiedDate":"2021-11-04"},{"lineNumber":152,"author":{"gitId":"pragyan01"},"content":"                answerIsCorrect \u003d true;","lastModifiedDate":"2021-10-28"},{"lineNumber":153,"author":{"gitId":"pragyan01"},"content":"            }","lastModifiedDate":"2021-10-28"},{"lineNumber":154,"author":{"gitId":"pragyan01"},"content":"        }","lastModifiedDate":"2021-10-28"},{"lineNumber":155,"author":{"gitId":"pragyan01"},"content":"        answerIsCorrect \u003d false;","lastModifiedDate":"2021-10-28"},{"lineNumber":156,"author":{"gitId":"pragyan01"},"content":"        return answerIsCorrect;","lastModifiedDate":"2021-11-04"},{"lineNumber":157,"author":{"gitId":"pragyan01"},"content":"    }","lastModifiedDate":"2021-11-04"},{"lineNumber":158,"author":{"gitId":"pragyan01"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":159,"author":{"gitId":"pragyan01"},"content":"    //@@author pragyan01","lastModifiedDate":"2021-11-06"},{"lineNumber":160,"author":{"gitId":"pragyan01"},"content":"    private boolean checkGender(boolean answerIsCorrect) {","lastModifiedDate":"2021-11-04"},{"lineNumber":161,"author":{"gitId":"pragyan01"},"content":"        String uiInput;","lastModifiedDate":"2021-11-04"},{"lineNumber":162,"author":{"gitId":"pragyan01"},"content":"        while (!answerIsCorrect) {","lastModifiedDate":"2021-10-28"},{"lineNumber":163,"author":{"gitId":"pragyan01"},"content":"            System.out.println(\"what is your SEX : M / F ?\");","lastModifiedDate":"2021-11-04"},{"lineNumber":164,"author":{"gitId":"pragyan01"},"content":"            uiInput \u003d uiScanner.nextLine();","lastModifiedDate":"2021-10-17"},{"lineNumber":165,"author":{"gitId":"pragyan01"},"content":"            sex \u003d uiInput;","lastModifiedDate":"2021-11-04"},{"lineNumber":166,"author":{"gitId":"pragyan01"},"content":"            if ((uiInput.equals(\"M\")) || (uiInput.equals(\"F\"))) {","lastModifiedDate":"2021-11-04"},{"lineNumber":167,"author":{"gitId":"pragyan01"},"content":"                answerIsCorrect \u003d true;","lastModifiedDate":"2021-10-28"},{"lineNumber":168,"author":{"gitId":"pragyan01"},"content":"            }","lastModifiedDate":"2021-10-28"},{"lineNumber":169,"author":{"gitId":"pragyan01"},"content":"        }","lastModifiedDate":"2021-10-28"},{"lineNumber":170,"author":{"gitId":"pragyan01"},"content":"        answerIsCorrect \u003d false;","lastModifiedDate":"2021-11-04"},{"lineNumber":171,"author":{"gitId":"pragyan01"},"content":"        return answerIsCorrect;","lastModifiedDate":"2021-11-04"},{"lineNumber":172,"author":{"gitId":"pragyan01"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":173,"author":{"gitId":"pragyan01"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":174,"author":{"gitId":"EdwardZYWang"},"content":"    //@@author EdwardZYWang","lastModifiedDate":"2021-11-03"},{"lineNumber":175,"author":{"gitId":"EdwardZYWang"},"content":"    /**","lastModifiedDate":"2021-11-06"},{"lineNumber":176,"author":{"gitId":"EdwardZYWang"},"content":"     * Checks with the user whether he wishes to load the data of the previous session.","lastModifiedDate":"2021-11-06"},{"lineNumber":177,"author":{"gitId":"EdwardZYWang"},"content":"     * if \"y\" is input, the data from the previous session is saved . if enter keystroke is registered","lastModifiedDate":"2021-11-06"},{"lineNumber":178,"author":{"gitId":"EdwardZYWang"},"content":"     * the previous session\u0027s data is wiped.","lastModifiedDate":"2021-11-06"},{"lineNumber":179,"author":{"gitId":"EdwardZYWang"},"content":"     *","lastModifiedDate":"2021-11-06"},{"lineNumber":180,"author":{"gitId":"EdwardZYWang"},"content":"     * @throws LoadException If there are missing text files.","lastModifiedDate":"2021-11-06"},{"lineNumber":181,"author":{"gitId":"EdwardZYWang"},"content":"     */","lastModifiedDate":"2021-11-06"},{"lineNumber":182,"author":{"gitId":"EdwardZYWang"},"content":"    public boolean memoryStartup() throws LoadException {","lastModifiedDate":"2021-10-20"},{"lineNumber":183,"author":{"gitId":"EdwardZYWang"},"content":"        System.out.println(MEMORY_STARTUP_PROMPT);","lastModifiedDate":"2021-10-11"},{"lineNumber":184,"author":{"gitId":"EdwardZYWang"},"content":"        String uiInput;","lastModifiedDate":"2021-10-28"},{"lineNumber":185,"author":{"gitId":"EdwardZYWang"},"content":"        boolean flag \u003d false;","lastModifiedDate":"2021-10-28"},{"lineNumber":186,"author":{"gitId":"EdwardZYWang"},"content":"        boolean result \u003d false;","lastModifiedDate":"2021-10-28"},{"lineNumber":187,"author":{"gitId":"EdwardZYWang"},"content":"        while (!flag) {","lastModifiedDate":"2021-10-28"},{"lineNumber":188,"author":{"gitId":"EdwardZYWang"},"content":"            uiInput \u003d uiScanner.nextLine();","lastModifiedDate":"2021-10-28"},{"lineNumber":189,"author":{"gitId":"EdwardZYWang"},"content":"            if (uiInput.isEmpty()) {","lastModifiedDate":"2021-10-28"},{"lineNumber":190,"author":{"gitId":"EdwardZYWang"},"content":"                System.out.println(MEMORY_STARTUP_N_INPUT);","lastModifiedDate":"2021-10-11"},{"lineNumber":191,"author":{"gitId":"EdwardZYWang"},"content":"                System.out.println(System.lineSeparator() + \"What would you like to do?\");","lastModifiedDate":"2021-10-21"},{"lineNumber":192,"author":{"gitId":"EdwardZYWang"},"content":"                result \u003d false;","lastModifiedDate":"2021-10-28"},{"lineNumber":193,"author":{"gitId":"EdwardZYWang"},"content":"                flag \u003d true;","lastModifiedDate":"2021-10-28"},{"lineNumber":194,"author":{"gitId":"EdwardZYWang"},"content":"            } else if (uiInput.trim().equals(\"y\")) {","lastModifiedDate":"2021-10-28"},{"lineNumber":195,"author":{"gitId":"EdwardZYWang"},"content":"                System.out.println(MEMORY_STARTUP_Y_INPUT);","lastModifiedDate":"2021-10-28"},{"lineNumber":196,"author":{"gitId":"EdwardZYWang"},"content":"                result \u003d true;","lastModifiedDate":"2021-10-28"},{"lineNumber":197,"author":{"gitId":"EdwardZYWang"},"content":"                flag \u003d true;","lastModifiedDate":"2021-10-28"},{"lineNumber":198,"author":{"gitId":"EdwardZYWang"},"content":"            } else {","lastModifiedDate":"2021-10-11"},{"lineNumber":199,"author":{"gitId":"EdwardZYWang"},"content":"                System.out.println(\"wrong input!\");","lastModifiedDate":"2021-10-28"},{"lineNumber":200,"author":{"gitId":"EdwardZYWang"},"content":"            }","lastModifiedDate":"2021-10-11"},{"lineNumber":201,"author":{"gitId":"EdwardZYWang"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":202,"author":{"gitId":"EdwardZYWang"},"content":"        return result;","lastModifiedDate":"2021-10-28"},{"lineNumber":203,"author":{"gitId":"EdwardZYWang"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":204,"author":{"gitId":"EdwardZYWang"},"content":"}","lastModifiedDate":"2021-10-07"}],"authorContributionMap":{"pragyan01":131,"VishalJeyaram":4,"arvejw":6,"EdwardZYWang":63}},{"path":"src/main/java/seedu/duke/UserHelp.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"EdwardZYWang"},"content":"package seedu.duke;","lastModifiedDate":"2021-10-11"},{"lineNumber":2,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":3,"author":{"gitId":"EdwardZYWang"},"content":"import java.io.IOException;","lastModifiedDate":"2021-11-06"},{"lineNumber":4,"author":{"gitId":"EdwardZYWang"},"content":"import java.util.Objects;","lastModifiedDate":"2021-10-14"},{"lineNumber":5,"author":{"gitId":"EdwardZYWang"},"content":"import java.util.logging.Level;","lastModifiedDate":"2021-10-14"},{"lineNumber":6,"author":{"gitId":"EdwardZYWang"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-10-14"},{"lineNumber":7,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":8,"author":{"gitId":"EdwardZYWang"},"content":"import static seedu.duke.ClickfitMessages.HELP_COMMANDS;","lastModifiedDate":"2021-10-14"},{"lineNumber":9,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":10,"author":{"gitId":"EdwardZYWang"},"content":"//@@author EdwardZYWang","lastModifiedDate":"2021-11-02"},{"lineNumber":11,"author":{"gitId":"EdwardZYWang"},"content":"public class UserHelp {","lastModifiedDate":"2021-10-11"},{"lineNumber":12,"author":{"gitId":"EdwardZYWang"},"content":"    private static Logger UserHelp_LOGGER \u003d Logger.getLogger(\"UiLogger\");","lastModifiedDate":"2021-10-14"},{"lineNumber":13,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":14,"author":{"gitId":"EdwardZYWang"},"content":"    public UserHelp() {","lastModifiedDate":"2021-10-14"},{"lineNumber":15,"author":{"gitId":"EdwardZYWang"},"content":"        this.UserHelp_LOGGER.setLevel(Level.SEVERE);","lastModifiedDate":"2021-10-14"},{"lineNumber":16,"author":{"gitId":"EdwardZYWang"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":17,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":18,"author":{"gitId":"EdwardZYWang"},"content":"    /**","lastModifiedDate":"2021-11-06"},{"lineNumber":19,"author":{"gitId":"EdwardZYWang"},"content":"     * Takes in user input to decide whether to print out help commands.","lastModifiedDate":"2021-11-06"},{"lineNumber":20,"author":{"gitId":"EdwardZYWang"},"content":"     *","lastModifiedDate":"2021-11-06"},{"lineNumber":21,"author":{"gitId":"EdwardZYWang"},"content":"     * @param input user\u0027s input","lastModifiedDate":"2021-11-06"},{"lineNumber":22,"author":{"gitId":"EdwardZYWang"},"content":"     */","lastModifiedDate":"2021-11-06"},{"lineNumber":23,"author":{"gitId":"EdwardZYWang"},"content":"    public static void generateUserHelpParameters(String input) {","lastModifiedDate":"2021-10-11"},{"lineNumber":24,"author":{"gitId":"EdwardZYWang"},"content":"        assert !Objects.equals(input, \"\");","lastModifiedDate":"2021-10-14"},{"lineNumber":25,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":26,"author":{"gitId":"EdwardZYWang"},"content":"        UserHelp_LOGGER.log(Level.INFO, \"print out Duke commands\");","lastModifiedDate":"2021-10-14"},{"lineNumber":27,"author":{"gitId":"EdwardZYWang"},"content":"        getCommands();","lastModifiedDate":"2021-10-11"},{"lineNumber":28,"author":{"gitId":"EdwardZYWang"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":29,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":30,"author":{"gitId":"EdwardZYWang"},"content":"    public static void getCommands() {","lastModifiedDate":"2021-10-11"},{"lineNumber":31,"author":{"gitId":"EdwardZYWang"},"content":"        System.out.println(HELP_COMMANDS);","lastModifiedDate":"2021-10-11"},{"lineNumber":32,"author":{"gitId":"EdwardZYWang"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":33,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":34,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":35,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":36,"author":{"gitId":"EdwardZYWang"},"content":"}","lastModifiedDate":"2021-10-11"}],"authorContributionMap":{"EdwardZYWang":36}},{"path":"src/main/java/seedu/duke/WeightTracker.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"teoziyiivy"},"content":"package seedu.duke;","lastModifiedDate":"2021-10-06"},{"lineNumber":2,"author":{"gitId":"teoziyiivy"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":3,"author":{"gitId":"teoziyiivy"},"content":"import seedu.duke.exceptions.weight.WeightException;","lastModifiedDate":"2021-10-28"},{"lineNumber":4,"author":{"gitId":"teoziyiivy"},"content":"import seedu.duke.exceptions.weight.AddWeightException;","lastModifiedDate":"2021-10-26"},{"lineNumber":5,"author":{"gitId":"teoziyiivy"},"content":"import seedu.duke.exceptions.weight.DeleteWeightException;","lastModifiedDate":"2021-10-26"},{"lineNumber":6,"author":{"gitId":"VishalJeyaram"},"content":"import seedu.duke.exceptions.weight.FutureWeightException;","lastModifiedDate":"2021-11-04"},{"lineNumber":7,"author":{"gitId":"teoziyiivy"},"content":"import seedu.duke.exceptions.weight.DeleteWeightIndexException;","lastModifiedDate":"2021-10-26"},{"lineNumber":8,"author":{"gitId":"VishalJeyaram"},"content":"import seedu.duke.exceptions.DukeException;","lastModifiedDate":"2021-10-14"},{"lineNumber":9,"author":{"gitId":"VishalJeyaram"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-11-04"},{"lineNumber":10,"author":{"gitId":"VishalJeyaram"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-11-04"},{"lineNumber":11,"author":{"gitId":"teoziyiivy"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-10-11"},{"lineNumber":12,"author":{"gitId":"EdwardZYWang"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-07"},{"lineNumber":13,"author":{"gitId":"teoziyiivy"},"content":"import java.util.logging.Level;","lastModifiedDate":"2021-10-12"},{"lineNumber":14,"author":{"gitId":"teoziyiivy"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-10-12"},{"lineNumber":15,"author":{"gitId":"teoziyiivy"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":16,"author":{"gitId":"teoziyiivy"},"content":"//@@author teoziyiivy","lastModifiedDate":"2021-11-02"},{"lineNumber":17,"author":{"gitId":"teoziyiivy"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":18,"author":{"gitId":"teoziyiivy"},"content":"/**","lastModifiedDate":"2021-11-03"},{"lineNumber":19,"author":{"gitId":"teoziyiivy"},"content":" * This \u003ccode\u003eWeightTracker\u003c/code\u003e class contains all the functions related to weight.","lastModifiedDate":"2021-11-03"},{"lineNumber":20,"author":{"gitId":"teoziyiivy"},"content":" * Namely, generating parameters, adding, deleting and listing.","lastModifiedDate":"2021-11-03"},{"lineNumber":21,"author":{"gitId":"teoziyiivy"},"content":" */","lastModifiedDate":"2021-11-03"},{"lineNumber":22,"author":{"gitId":"teoziyiivy"},"content":"public class WeightTracker extends Tracker {","lastModifiedDate":"2021-10-11"},{"lineNumber":23,"author":{"gitId":"teoziyiivy"},"content":"    protected ArrayList\u003cString\u003e weightsArray;","lastModifiedDate":"2021-10-07"},{"lineNumber":24,"author":{"gitId":"teoziyiivy"},"content":"    protected int numberOfWeights;","lastModifiedDate":"2021-10-07"},{"lineNumber":25,"author":{"gitId":"teoziyiivy"},"content":"    protected double weight;","lastModifiedDate":"2021-10-25"},{"lineNumber":26,"author":{"gitId":"teoziyiivy"},"content":"    protected String date;","lastModifiedDate":"2021-10-11"},{"lineNumber":27,"author":{"gitId":"teoziyiivy"},"content":"    private static Logger logger \u003d Logger.getLogger(\"WeightTrackerLogger\");","lastModifiedDate":"2021-10-25"},{"lineNumber":28,"author":{"gitId":"teoziyiivy"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":29,"author":{"gitId":"teoziyiivy"},"content":"    /**","lastModifiedDate":"2021-11-03"},{"lineNumber":30,"author":{"gitId":"teoziyiivy"},"content":"     * Constructs a \u003ccode\u003eWeightTracker\u003c/code\u003e object.","lastModifiedDate":"2021-11-03"},{"lineNumber":31,"author":{"gitId":"teoziyiivy"},"content":"     */","lastModifiedDate":"2021-11-03"},{"lineNumber":32,"author":{"gitId":"teoziyiivy"},"content":"    public WeightTracker() {","lastModifiedDate":"2021-10-07"},{"lineNumber":33,"author":{"gitId":"teoziyiivy"},"content":"        this.weightsArray \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-07"},{"lineNumber":34,"author":{"gitId":"teoziyiivy"},"content":"        this.numberOfWeights \u003d 0;","lastModifiedDate":"2021-10-07"},{"lineNumber":35,"author":{"gitId":"teoziyiivy"},"content":"        logger.setLevel(Level.SEVERE);","lastModifiedDate":"2021-10-25"},{"lineNumber":36,"author":{"gitId":"teoziyiivy"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":37,"author":{"gitId":"teoziyiivy"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":38,"author":{"gitId":"teoziyiivy"},"content":"    /**","lastModifiedDate":"2021-11-03"},{"lineNumber":39,"author":{"gitId":"teoziyiivy"},"content":"     * Generates the parameters for \u003ccode\u003eweight\u003c/code\u003e and \u003ccode\u003edate\u003c/code\u003e","lastModifiedDate":"2021-11-03"},{"lineNumber":40,"author":{"gitId":"teoziyiivy"},"content":"     * to construct a \u003ccode\u003eWeightTracker\u003c/code\u003e object.","lastModifiedDate":"2021-11-03"},{"lineNumber":41,"author":{"gitId":"teoziyiivy"},"content":"     *","lastModifiedDate":"2021-11-03"},{"lineNumber":42,"author":{"gitId":"teoziyiivy"},"content":"     * @param input User input.","lastModifiedDate":"2021-11-03"},{"lineNumber":43,"author":{"gitId":"teoziyiivy"},"content":"     * @throws WeightException If DukeException is caught.","lastModifiedDate":"2021-11-03"},{"lineNumber":44,"author":{"gitId":"teoziyiivy"},"content":"     */","lastModifiedDate":"2021-11-03"},{"lineNumber":45,"author":{"gitId":"teoziyiivy"},"content":"    public void generateWeightParameters(String input) throws WeightException {","lastModifiedDate":"2021-11-03"},{"lineNumber":46,"author":{"gitId":"teoziyiivy"},"content":"        try {","lastModifiedDate":"2021-10-11"},{"lineNumber":47,"author":{"gitId":"teoziyiivy"},"content":"            logger.entering(getClass().getName(), \"generateWeightParameters\");","lastModifiedDate":"2021-10-12"},{"lineNumber":48,"author":{"gitId":"teoziyiivy"},"content":"            logger.log(Level.INFO, \"going to generate weight and date parameters from user input\");","lastModifiedDate":"2021-10-12"},{"lineNumber":49,"author":{"gitId":"teoziyiivy"},"content":"            weight \u003d Parser.getWeight(input);","lastModifiedDate":"2021-11-03"},{"lineNumber":50,"author":{"gitId":"teoziyiivy"},"content":"            date \u003d Parser.getDate(input);","lastModifiedDate":"2021-11-03"},{"lineNumber":51,"author":{"gitId":"teoziyiivy"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2021-10-28"},{"lineNumber":52,"author":{"gitId":"teoziyiivy"},"content":"            System.out.println(ClickfitMessages.WEIGHT_PARAMETERS_ERROR);","lastModifiedDate":"2021-10-26"},{"lineNumber":53,"author":{"gitId":"teoziyiivy"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-10-28"},{"lineNumber":54,"author":{"gitId":"teoziyiivy"},"content":"            throw new WeightException();","lastModifiedDate":"2021-10-28"},{"lineNumber":55,"author":{"gitId":"teoziyiivy"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":56,"author":{"gitId":"teoziyiivy"},"content":"        logger.exiting(getClass().getName(), \"generateWeightParameters\");","lastModifiedDate":"2021-10-12"},{"lineNumber":57,"author":{"gitId":"teoziyiivy"},"content":"        logger.log(Level.INFO, \"end of generating weight parameters\");","lastModifiedDate":"2021-10-12"},{"lineNumber":58,"author":{"gitId":"teoziyiivy"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":59,"author":{"gitId":"teoziyiivy"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":60,"author":{"gitId":"teoziyiivy"},"content":"    /**","lastModifiedDate":"2021-11-03"},{"lineNumber":61,"author":{"gitId":"teoziyiivy"},"content":"     * Adds a weight to a list of weights.","lastModifiedDate":"2021-11-03"},{"lineNumber":62,"author":{"gitId":"teoziyiivy"},"content":"     *","lastModifiedDate":"2021-11-03"},{"lineNumber":63,"author":{"gitId":"teoziyiivy"},"content":"     * @param input User input.","lastModifiedDate":"2021-11-03"},{"lineNumber":64,"author":{"gitId":"teoziyiivy"},"content":"     * @throws WeightException If the input \u003d\u003d null.","lastModifiedDate":"2021-11-03"},{"lineNumber":65,"author":{"gitId":"teoziyiivy"},"content":"     * @throws DateTimeParseException If the date is not input correctly or valid.","lastModifiedDate":"2021-11-03"},{"lineNumber":66,"author":{"gitId":"teoziyiivy"},"content":"     */","lastModifiedDate":"2021-11-03"},{"lineNumber":67,"author":{"gitId":"teoziyiivy"},"content":"    public void addWeight(String input) throws WeightException, DateTimeParseException {","lastModifiedDate":"2021-10-28"},{"lineNumber":68,"author":{"gitId":"teoziyiivy"},"content":"        logger.entering(getClass().getName(), \"addWeight\");","lastModifiedDate":"2021-10-12"},{"lineNumber":69,"author":{"gitId":"teoziyiivy"},"content":"        logger.log(Level.INFO, \"going to add a weight and date to the list\");","lastModifiedDate":"2021-10-12"},{"lineNumber":70,"author":{"gitId":"teoziyiivy"},"content":"        numberOfWeights \u003d weightsArray.size();","lastModifiedDate":"2021-10-28"},{"lineNumber":71,"author":{"gitId":"teoziyiivy"},"content":"        generateWeightParameters(input);","lastModifiedDate":"2021-10-25"},{"lineNumber":72,"author":{"gitId":"teoziyiivy"},"content":"        String inputDate \u003d date;","lastModifiedDate":"2021-11-04"},{"lineNumber":73,"author":{"gitId":"teoziyiivy"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy\");","lastModifiedDate":"2021-11-04"},{"lineNumber":74,"author":{"gitId":"teoziyiivy"},"content":"        LocalDate localDate \u003d LocalDate.parse(inputDate, formatter);","lastModifiedDate":"2021-11-04"},{"lineNumber":75,"author":{"gitId":"teoziyiivy"},"content":"        LocalDate now \u003d LocalDate.now();","lastModifiedDate":"2021-11-04"},{"lineNumber":76,"author":{"gitId":"teoziyiivy"},"content":"        if (localDate.isAfter(now)) {","lastModifiedDate":"2021-11-04"},{"lineNumber":77,"author":{"gitId":"teoziyiivy"},"content":"            throw new FutureWeightException();","lastModifiedDate":"2021-11-04"},{"lineNumber":78,"author":{"gitId":"teoziyiivy"},"content":"        }","lastModifiedDate":"2021-11-04"},{"lineNumber":79,"author":{"gitId":"teoziyiivy"},"content":"        logger.log(Level.INFO, \"weight parameters generated\");","lastModifiedDate":"2021-10-25"},{"lineNumber":80,"author":{"gitId":"teoziyiivy"},"content":"        if (input \u003d\u003d null) {","lastModifiedDate":"2021-10-28"},{"lineNumber":81,"author":{"gitId":"teoziyiivy"},"content":"            throw new AddWeightException();","lastModifiedDate":"2021-10-07"},{"lineNumber":82,"author":{"gitId":"teoziyiivy"},"content":"        } else {","lastModifiedDate":"2021-10-07"},{"lineNumber":83,"author":{"gitId":"teoziyiivy"},"content":"            WeightTrackerMessages.printAddWeightResponse(weight, date);","lastModifiedDate":"2021-10-21"},{"lineNumber":84,"author":{"gitId":"teoziyiivy"},"content":"            input \u003d weight + \" /d \" + date;","lastModifiedDate":"2021-10-28"},{"lineNumber":85,"author":{"gitId":"teoziyiivy"},"content":"            weightsArray.add(input);","lastModifiedDate":"2021-10-07"},{"lineNumber":86,"author":{"gitId":"teoziyiivy"},"content":"            numberOfWeights +\u003d 1;","lastModifiedDate":"2021-10-07"},{"lineNumber":87,"author":{"gitId":"teoziyiivy"},"content":"            assert numberOfWeights \u003e 0 : \"number of logged weights should be more than zero\";","lastModifiedDate":"2021-10-12"},{"lineNumber":88,"author":{"gitId":"teoziyiivy"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":89,"author":{"gitId":"teoziyiivy"},"content":"        logger.exiting(getClass().getName(), \"addWeight\");","lastModifiedDate":"2021-10-12"},{"lineNumber":90,"author":{"gitId":"teoziyiivy"},"content":"        logger.log(Level.INFO, \"end of processing addweight command\");","lastModifiedDate":"2021-10-12"},{"lineNumber":91,"author":{"gitId":"teoziyiivy"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":92,"author":{"gitId":"teoziyiivy"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":93,"author":{"gitId":"teoziyiivy"},"content":"    /**","lastModifiedDate":"2021-11-03"},{"lineNumber":94,"author":{"gitId":"teoziyiivy"},"content":"     * Deletes a weight from a list of weights using the index of the weight to be deleted","lastModifiedDate":"2021-11-03"},{"lineNumber":95,"author":{"gitId":"teoziyiivy"},"content":"     * from the list as given by the user.","lastModifiedDate":"2021-11-03"},{"lineNumber":96,"author":{"gitId":"teoziyiivy"},"content":"     *","lastModifiedDate":"2021-11-03"},{"lineNumber":97,"author":{"gitId":"teoziyiivy"},"content":"     * @param input User input.","lastModifiedDate":"2021-11-03"},{"lineNumber":98,"author":{"gitId":"teoziyiivy"},"content":"     * @throws WeightException If the (weightIndex \u003c 0) or (weightIndex \u003e numberOfWeights - 1).","lastModifiedDate":"2021-11-03"},{"lineNumber":99,"author":{"gitId":"teoziyiivy"},"content":"     */","lastModifiedDate":"2021-11-03"},{"lineNumber":100,"author":{"gitId":"teoziyiivy"},"content":"    public void deleteWeight(String input) throws WeightException {","lastModifiedDate":"2021-10-28"},{"lineNumber":101,"author":{"gitId":"teoziyiivy"},"content":"        logger.entering(getClass().getName(), \"deleteWeight\");","lastModifiedDate":"2021-10-12"},{"lineNumber":102,"author":{"gitId":"teoziyiivy"},"content":"        logger.log(Level.INFO, \"going to remove a weight and date from the list\");","lastModifiedDate":"2021-10-12"},{"lineNumber":103,"author":{"gitId":"teoziyiivy"},"content":"        numberOfWeights \u003d weightsArray.size();","lastModifiedDate":"2021-10-25"},{"lineNumber":104,"author":{"gitId":"teoziyiivy"},"content":"        if (input.isEmpty() || input.matches(\"delete weight\")) {","lastModifiedDate":"2021-10-11"},{"lineNumber":105,"author":{"gitId":"teoziyiivy"},"content":"            throw new DeleteWeightException();","lastModifiedDate":"2021-10-11"},{"lineNumber":106,"author":{"gitId":"teoziyiivy"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":107,"author":{"gitId":"teoziyiivy"},"content":"        int weightIndex \u003d Parser.parseStringToInteger(input) - 1;","lastModifiedDate":"2021-10-25"},{"lineNumber":108,"author":{"gitId":"teoziyiivy"},"content":"        if ((weightIndex \u003c 0) || (weightIndex \u003e numberOfWeights - 1)) {","lastModifiedDate":"2021-10-28"},{"lineNumber":109,"author":{"gitId":"teoziyiivy"},"content":"            throw new DeleteWeightIndexException();","lastModifiedDate":"2021-10-11"},{"lineNumber":110,"author":{"gitId":"teoziyiivy"},"content":"        } else {","lastModifiedDate":"2021-10-11"},{"lineNumber":111,"author":{"gitId":"teoziyiivy"},"content":"            generateWeightParameters(weightsArray.get(weightIndex));","lastModifiedDate":"2021-10-25"},{"lineNumber":112,"author":{"gitId":"teoziyiivy"},"content":"            WeightTrackerMessages.printDeleteWeightResponse(weight, date);","lastModifiedDate":"2021-10-26"},{"lineNumber":113,"author":{"gitId":"teoziyiivy"},"content":"            weightsArray.remove(weightIndex);","lastModifiedDate":"2021-10-25"},{"lineNumber":114,"author":{"gitId":"teoziyiivy"},"content":"            numberOfWeights--;","lastModifiedDate":"2021-10-25"},{"lineNumber":115,"author":{"gitId":"teoziyiivy"},"content":"            assert numberOfWeights \u003e\u003d 0 : \"number of logged weights should be more than or equal to zero\";","lastModifiedDate":"2021-10-12"},{"lineNumber":116,"author":{"gitId":"teoziyiivy"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":117,"author":{"gitId":"teoziyiivy"},"content":"        logger.exiting(getClass().getName(), \"deleteWeight\");","lastModifiedDate":"2021-10-12"},{"lineNumber":118,"author":{"gitId":"teoziyiivy"},"content":"        logger.log(Level.INFO, \"end of processing deleteweight command\");","lastModifiedDate":"2021-10-12"},{"lineNumber":119,"author":{"gitId":"teoziyiivy"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":120,"author":{"gitId":"teoziyiivy"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":121,"author":{"gitId":"teoziyiivy"},"content":"    /**","lastModifiedDate":"2021-11-03"},{"lineNumber":122,"author":{"gitId":"teoziyiivy"},"content":"     * Lists weights from the list of weights depending on user input.","lastModifiedDate":"2021-11-03"},{"lineNumber":123,"author":{"gitId":"teoziyiivy"},"content":"     * Namely, if user inputs \u003ccode\u003eall\u003c/code\u003e, \u003ccode\u003elistAllWeights()\u003c/code\u003e will be called and all","lastModifiedDate":"2021-11-03"},{"lineNumber":124,"author":{"gitId":"teoziyiivy"},"content":"     * weights in the \u003ccode\u003eweightsArray\u003c/code\u003e will be printed. If the user inputs a date (DD/MM/YYYY),","lastModifiedDate":"2021-11-03"},{"lineNumber":125,"author":{"gitId":"teoziyiivy"},"content":"     * then \u003ccode\u003elistSpecificWeights()\u003c/code\u003e will be called instead and only the weights recorded","lastModifiedDate":"2021-11-03"},{"lineNumber":126,"author":{"gitId":"teoziyiivy"},"content":"     * on that specific date will be printed.","lastModifiedDate":"2021-11-03"},{"lineNumber":127,"author":{"gitId":"teoziyiivy"},"content":"     *","lastModifiedDate":"2021-11-03"},{"lineNumber":128,"author":{"gitId":"teoziyiivy"},"content":"     * @param input User input.","lastModifiedDate":"2021-11-03"},{"lineNumber":129,"author":{"gitId":"teoziyiivy"},"content":"     * @throws WeightException If the weight in weightsArray is not recorded properly.","lastModifiedDate":"2021-11-03"},{"lineNumber":130,"author":{"gitId":"teoziyiivy"},"content":"     */","lastModifiedDate":"2021-11-03"},{"lineNumber":131,"author":{"gitId":"teoziyiivy"},"content":"    public void listWeights(String input) throws WeightException {","lastModifiedDate":"2021-11-03"},{"lineNumber":132,"author":{"gitId":"teoziyiivy"},"content":"        numberOfWeights \u003d weightsArray.size();","lastModifiedDate":"2021-10-25"},{"lineNumber":133,"author":{"gitId":"teoziyiivy"},"content":"        if (numberOfWeights \u003d\u003d 0) {","lastModifiedDate":"2021-10-11"},{"lineNumber":134,"author":{"gitId":"teoziyiivy"},"content":"            System.out.println(ClickfitMessages.WEIGHT_EMPTY_ERROR);","lastModifiedDate":"2021-10-28"},{"lineNumber":135,"author":{"gitId":"teoziyiivy"},"content":"        } else if (input.equals(\"all\")) {","lastModifiedDate":"2021-11-03"},{"lineNumber":136,"author":{"gitId":"teoziyiivy"},"content":"            listAllWeights();","lastModifiedDate":"2021-10-25"},{"lineNumber":137,"author":{"gitId":"teoziyiivy"},"content":"        } else {","lastModifiedDate":"2021-10-11"},{"lineNumber":138,"author":{"gitId":"teoziyiivy"},"content":"            listSpecificWeights(input);","lastModifiedDate":"2021-11-03"},{"lineNumber":139,"author":{"gitId":"teoziyiivy"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":140,"author":{"gitId":"teoziyiivy"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":141,"author":{"gitId":"teoziyiivy"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":142,"author":{"gitId":"teoziyiivy"},"content":"    /**","lastModifiedDate":"2021-11-03"},{"lineNumber":143,"author":{"gitId":"teoziyiivy"},"content":"     * Lists weights from the list of weights for the specific date as specified by the user.","lastModifiedDate":"2021-11-03"},{"lineNumber":144,"author":{"gitId":"teoziyiivy"},"content":"     * Namely, if the user inputs a date (DD/MM/YYYY), only the weights recorded on that","lastModifiedDate":"2021-11-03"},{"lineNumber":145,"author":{"gitId":"teoziyiivy"},"content":"     * specific date will be printed.","lastModifiedDate":"2021-11-03"},{"lineNumber":146,"author":{"gitId":"teoziyiivy"},"content":"     *","lastModifiedDate":"2021-11-03"},{"lineNumber":147,"author":{"gitId":"teoziyiivy"},"content":"     * @param date Date input by the user.","lastModifiedDate":"2021-11-03"},{"lineNumber":148,"author":{"gitId":"teoziyiivy"},"content":"     * @throws WeightException If the weight in weightsArray is not recorded properly.","lastModifiedDate":"2021-11-03"},{"lineNumber":149,"author":{"gitId":"teoziyiivy"},"content":"     */","lastModifiedDate":"2021-11-03"},{"lineNumber":150,"author":{"gitId":"teoziyiivy"},"content":"    public void listSpecificWeights(String date) throws WeightException {","lastModifiedDate":"2021-10-28"},{"lineNumber":151,"author":{"gitId":"teoziyiivy"},"content":"        logger.entering(getClass().getName(), \"listSpecificWeights\");","lastModifiedDate":"2021-10-25"},{"lineNumber":152,"author":{"gitId":"teoziyiivy"},"content":"        logger.log(Level.INFO, \"going to list specific logged weights and dates\");","lastModifiedDate":"2021-10-25"},{"lineNumber":153,"author":{"gitId":"teoziyiivy"},"content":"        int i \u003d 1;","lastModifiedDate":"2021-10-22"},{"lineNumber":154,"author":{"gitId":"teoziyiivy"},"content":"        int numberOfSpecificWeights \u003d 0;","lastModifiedDate":"2021-10-25"},{"lineNumber":155,"author":{"gitId":"teoziyiivy"},"content":"        for (String weights : weightsArray) {","lastModifiedDate":"2021-10-22"},{"lineNumber":156,"author":{"gitId":"teoziyiivy"},"content":"            if (weights.contains(date)) {","lastModifiedDate":"2021-10-25"},{"lineNumber":157,"author":{"gitId":"teoziyiivy"},"content":"                logger.log(Level.INFO, \"generating weight parameters\");","lastModifiedDate":"2021-10-25"},{"lineNumber":158,"author":{"gitId":"teoziyiivy"},"content":"                generateWeightParameters(weights);","lastModifiedDate":"2021-10-22"},{"lineNumber":159,"author":{"gitId":"teoziyiivy"},"content":"                logger.log(Level.INFO, \"weight parameters generated\");","lastModifiedDate":"2021-10-25"},{"lineNumber":160,"author":{"gitId":"teoziyiivy"},"content":"                System.out.print(i + \". \");","lastModifiedDate":"2021-10-26"},{"lineNumber":161,"author":{"gitId":"teoziyiivy"},"content":"                System.out.println(\"Weight: \" + weight);","lastModifiedDate":"2021-10-22"},{"lineNumber":162,"author":{"gitId":"teoziyiivy"},"content":"                i++;","lastModifiedDate":"2021-10-22"},{"lineNumber":163,"author":{"gitId":"teoziyiivy"},"content":"                numberOfSpecificWeights++;","lastModifiedDate":"2021-10-25"},{"lineNumber":164,"author":{"gitId":"teoziyiivy"},"content":"            }","lastModifiedDate":"2021-10-07"},{"lineNumber":165,"author":{"gitId":"teoziyiivy"},"content":"        }","lastModifiedDate":"2021-10-06"},{"lineNumber":166,"author":{"gitId":"teoziyiivy"},"content":"        System.out.println(\"Total number of weights: \" + numberOfSpecificWeights);","lastModifiedDate":"2021-10-25"},{"lineNumber":167,"author":{"gitId":"teoziyiivy"},"content":"        logger.exiting(getClass().getName(), \"listSpecificWeights\");","lastModifiedDate":"2021-10-25"},{"lineNumber":168,"author":{"gitId":"teoziyiivy"},"content":"        logger.log(Level.INFO, \"end of processing listSpecificWeights command\");","lastModifiedDate":"2021-10-25"},{"lineNumber":169,"author":{"gitId":"teoziyiivy"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":170,"author":{"gitId":"teoziyiivy"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":171,"author":{"gitId":"teoziyiivy"},"content":"    /**","lastModifiedDate":"2021-11-03"},{"lineNumber":172,"author":{"gitId":"teoziyiivy"},"content":"     * Lists every weight in the list of weights.","lastModifiedDate":"2021-11-03"},{"lineNumber":173,"author":{"gitId":"teoziyiivy"},"content":"     *","lastModifiedDate":"2021-11-03"},{"lineNumber":174,"author":{"gitId":"teoziyiivy"},"content":"     * @throws WeightException If the weight in weightsArray is not recorded properly.","lastModifiedDate":"2021-11-03"},{"lineNumber":175,"author":{"gitId":"teoziyiivy"},"content":"     */","lastModifiedDate":"2021-11-03"},{"lineNumber":176,"author":{"gitId":"teoziyiivy"},"content":"    public void listAllWeights() throws WeightException {","lastModifiedDate":"2021-10-28"},{"lineNumber":177,"author":{"gitId":"teoziyiivy"},"content":"        logger.entering(getClass().getName(), \"listAllWeights\");","lastModifiedDate":"2021-10-25"},{"lineNumber":178,"author":{"gitId":"teoziyiivy"},"content":"        logger.log(Level.INFO, \"going to list all logged weights and dates\");","lastModifiedDate":"2021-10-25"},{"lineNumber":179,"author":{"gitId":"teoziyiivy"},"content":"        int i \u003d 1;","lastModifiedDate":"2021-10-25"},{"lineNumber":180,"author":{"gitId":"teoziyiivy"},"content":"        System.out.println(\"Here are your recorded weights:\");","lastModifiedDate":"2021-10-25"},{"lineNumber":181,"author":{"gitId":"teoziyiivy"},"content":"        for (String weights : weightsArray) {","lastModifiedDate":"2021-10-25"},{"lineNumber":182,"author":{"gitId":"teoziyiivy"},"content":"            generateWeightParameters(weights);","lastModifiedDate":"2021-10-25"},{"lineNumber":183,"author":{"gitId":"teoziyiivy"},"content":"            System.out.print(i + \". \");","lastModifiedDate":"2021-10-26"},{"lineNumber":184,"author":{"gitId":"teoziyiivy"},"content":"            System.out.print(\" Weight: \" + weight + \" \");","lastModifiedDate":"2021-10-26"},{"lineNumber":185,"author":{"gitId":"teoziyiivy"},"content":"            System.out.println(\" Date: \" + date + System.lineSeparator());","lastModifiedDate":"2021-10-25"},{"lineNumber":186,"author":{"gitId":"teoziyiivy"},"content":"            i++;","lastModifiedDate":"2021-10-25"},{"lineNumber":187,"author":{"gitId":"teoziyiivy"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":188,"author":{"gitId":"teoziyiivy"},"content":"        System.out.println(\"Total number of weights: \" + (i - 1));","lastModifiedDate":"2021-10-25"},{"lineNumber":189,"author":{"gitId":"teoziyiivy"},"content":"        logger.exiting(getClass().getName(), \"listAllWeights\");","lastModifiedDate":"2021-10-25"},{"lineNumber":190,"author":{"gitId":"teoziyiivy"},"content":"        logger.log(Level.INFO, \"end of processing listAllWeights command\");","lastModifiedDate":"2021-10-25"},{"lineNumber":191,"author":{"gitId":"teoziyiivy"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":192,"author":{"gitId":"teoziyiivy"},"content":"}","lastModifiedDate":"2021-10-11"}],"authorContributionMap":{"teoziyiivy":187,"VishalJeyaram":4,"EdwardZYWang":1}},{"path":"src/main/java/seedu/duke/WeightTrackerMessages.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"teoziyiivy"},"content":"package seedu.duke;","lastModifiedDate":"2021-10-21"},{"lineNumber":2,"author":{"gitId":"teoziyiivy"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":3,"author":{"gitId":"teoziyiivy"},"content":"//@@author teoziyiivy","lastModifiedDate":"2021-11-02"},{"lineNumber":4,"author":{"gitId":"teoziyiivy"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":5,"author":{"gitId":"teoziyiivy"},"content":"/**","lastModifiedDate":"2021-11-03"},{"lineNumber":6,"author":{"gitId":"teoziyiivy"},"content":" * Contains functions for printing responses for \u003ccode\u003eWeightTracker\u003c/code\u003e class which","lastModifiedDate":"2021-11-03"},{"lineNumber":7,"author":{"gitId":"teoziyiivy"},"content":" * requires \u003ccode\u003eweight\u003c/code\u003e and \u003ccode\u003edate\u003c/code\u003e parameters.","lastModifiedDate":"2021-11-03"},{"lineNumber":8,"author":{"gitId":"teoziyiivy"},"content":" */","lastModifiedDate":"2021-11-03"},{"lineNumber":9,"author":{"gitId":"teoziyiivy"},"content":"public class WeightTrackerMessages {","lastModifiedDate":"2021-10-21"},{"lineNumber":10,"author":{"gitId":"teoziyiivy"},"content":"    /**","lastModifiedDate":"2021-11-03"},{"lineNumber":11,"author":{"gitId":"teoziyiivy"},"content":"     * Prints response for weight has been added to weight array successfully.","lastModifiedDate":"2021-11-03"},{"lineNumber":12,"author":{"gitId":"teoziyiivy"},"content":"     *","lastModifiedDate":"2021-11-03"},{"lineNumber":13,"author":{"gitId":"teoziyiivy"},"content":"     * @param weight Weight recorded in weight array.","lastModifiedDate":"2021-11-03"},{"lineNumber":14,"author":{"gitId":"teoziyiivy"},"content":"     * @param date Date recorded in weight array.","lastModifiedDate":"2021-11-03"},{"lineNumber":15,"author":{"gitId":"teoziyiivy"},"content":"     */","lastModifiedDate":"2021-11-03"},{"lineNumber":16,"author":{"gitId":"teoziyiivy"},"content":"    public static void printAddWeightResponse(double weight, String date) {","lastModifiedDate":"2021-10-25"},{"lineNumber":17,"author":{"gitId":"teoziyiivy"},"content":"        System.out.println(\"Noted! CLI.ckFit has recorded your weight as \"","lastModifiedDate":"2021-10-21"},{"lineNumber":18,"author":{"gitId":"teoziyiivy"},"content":"                + weight + \" on \" + date + \". Check back for your progress!\");","lastModifiedDate":"2021-10-21"},{"lineNumber":19,"author":{"gitId":"teoziyiivy"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":20,"author":{"gitId":"teoziyiivy"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":21,"author":{"gitId":"teoziyiivy"},"content":"    /**","lastModifiedDate":"2021-11-03"},{"lineNumber":22,"author":{"gitId":"teoziyiivy"},"content":"     * Prints response for weight has been deleted from weight array successfully.","lastModifiedDate":"2021-11-03"},{"lineNumber":23,"author":{"gitId":"teoziyiivy"},"content":"     *","lastModifiedDate":"2021-11-03"},{"lineNumber":24,"author":{"gitId":"teoziyiivy"},"content":"     * @param weight Weight recorded in weight array.","lastModifiedDate":"2021-11-03"},{"lineNumber":25,"author":{"gitId":"teoziyiivy"},"content":"     * @param date Date recorded in weight array.","lastModifiedDate":"2021-11-03"},{"lineNumber":26,"author":{"gitId":"teoziyiivy"},"content":"     */","lastModifiedDate":"2021-11-03"},{"lineNumber":27,"author":{"gitId":"teoziyiivy"},"content":"    public static void printDeleteWeightResponse(double weight, String date) {","lastModifiedDate":"2021-10-26"},{"lineNumber":28,"author":{"gitId":"teoziyiivy"},"content":"        System.out.println(\"Noted! CLI.ckFit has successfully deleted your weight of \"","lastModifiedDate":"2021-10-26"},{"lineNumber":29,"author":{"gitId":"teoziyiivy"},"content":"                + weight + \" on \" + date + \".\");","lastModifiedDate":"2021-10-26"},{"lineNumber":30,"author":{"gitId":"teoziyiivy"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":31,"author":{"gitId":"teoziyiivy"},"content":"}","lastModifiedDate":"2021-10-21"}],"authorContributionMap":{"teoziyiivy":31}},{"path":"src/main/java/seedu/duke/WorkoutTracker.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"arvejw"},"content":"package seedu.duke;","lastModifiedDate":"2021-10-22"},{"lineNumber":2,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":3,"author":{"gitId":"arvejw"},"content":"import seedu.duke.exceptions.workout.DeleteWorkoutException;","lastModifiedDate":"2021-10-24"},{"lineNumber":4,"author":{"gitId":"arvejw"},"content":"import seedu.duke.exceptions.workout.DuplicateWorkoutException;","lastModifiedDate":"2021-10-31"},{"lineNumber":5,"author":{"gitId":"arvejw"},"content":"import seedu.duke.exceptions.workout.MissingWorkoutCalorieSeparatorException;","lastModifiedDate":"2021-10-24"},{"lineNumber":6,"author":{"gitId":"arvejw"},"content":"import seedu.duke.exceptions.workout.MissingWorkoutDescriptionException;","lastModifiedDate":"2021-10-24"},{"lineNumber":7,"author":{"gitId":"arvejw"},"content":"import seedu.duke.exceptions.workout.NoWorkoutIndexException;","lastModifiedDate":"2021-10-28"},{"lineNumber":8,"author":{"gitId":"arvejw"},"content":"import seedu.duke.exceptions.workout.WorkoutException;","lastModifiedDate":"2021-10-24"},{"lineNumber":9,"author":{"gitId":"arvejw"},"content":"import seedu.duke.exceptions.workout.WorkoutNullArgumentException;","lastModifiedDate":"2021-10-24"},{"lineNumber":10,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":11,"author":{"gitId":"arvejw"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-11"},{"lineNumber":12,"author":{"gitId":"arvejw"},"content":"import java.util.logging.Level;","lastModifiedDate":"2021-10-12"},{"lineNumber":13,"author":{"gitId":"arvejw"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-10-13"},{"lineNumber":14,"author":{"gitId":"arvejw"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2021-10-20"},{"lineNumber":15,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":16,"author":{"gitId":"arvejw"},"content":"//@@author arvejw","lastModifiedDate":"2021-10-22"},{"lineNumber":17,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":18,"author":{"gitId":"arvejw"},"content":"/**","lastModifiedDate":"2021-10-31"},{"lineNumber":19,"author":{"gitId":"arvejw"},"content":" * Manages the tracking of workouts and various other operations such as adding new workouts and the calories burned","lastModifiedDate":"2021-10-31"},{"lineNumber":20,"author":{"gitId":"arvejw"},"content":" * doing them as well as deleting said workouts.","lastModifiedDate":"2021-10-31"},{"lineNumber":21,"author":{"gitId":"arvejw"},"content":" */","lastModifiedDate":"2021-10-31"},{"lineNumber":22,"author":{"gitId":"arvejw"},"content":"public class WorkoutTracker {","lastModifiedDate":"2021-10-20"},{"lineNumber":23,"author":{"gitId":"arvejw"},"content":"    protected ArrayList\u003cString\u003e workouts;","lastModifiedDate":"2021-10-20"},{"lineNumber":24,"author":{"gitId":"arvejw"},"content":"    protected String workoutDescription;","lastModifiedDate":"2021-10-11"},{"lineNumber":25,"author":{"gitId":"arvejw"},"content":"    protected int caloriesBurned;","lastModifiedDate":"2021-10-11"},{"lineNumber":26,"author":{"gitId":"arvejw"},"content":"    protected String workoutDate;","lastModifiedDate":"2021-10-11"},{"lineNumber":27,"author":{"gitId":"arvejw"},"content":"    protected String workoutTime;","lastModifiedDate":"2021-10-11"},{"lineNumber":28,"author":{"gitId":"arvejw"},"content":"    private static final String INPUT_ALL \u003d \"all\";","lastModifiedDate":"2021-10-20"},{"lineNumber":29,"author":{"gitId":"arvejw"},"content":"    private static final int LOWER_BOUND_INDEX_NON_EMPTY_LIST_ONES_INDEXING \u003d 1;","lastModifiedDate":"2021-10-11"},{"lineNumber":30,"author":{"gitId":"arvejw"},"content":"    public static final Logger WORKOUT_TRACKER_LOGGER \u003d Logger.getLogger(\"WorkoutTrackerLogger\");","lastModifiedDate":"2021-10-13"},{"lineNumber":31,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":32,"author":{"gitId":"arvejw"},"content":"    public WorkoutTracker() {","lastModifiedDate":"2021-10-11"},{"lineNumber":33,"author":{"gitId":"arvejw"},"content":"        this.workouts \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-20"},{"lineNumber":34,"author":{"gitId":"arvejw"},"content":"        WORKOUT_TRACKER_LOGGER.setLevel(Level.SEVERE);","lastModifiedDate":"2021-10-13"},{"lineNumber":35,"author":{"gitId":"arvejw"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":36,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":37,"author":{"gitId":"arvejw"},"content":"    /**","lastModifiedDate":"2021-10-31"},{"lineNumber":38,"author":{"gitId":"arvejw"},"content":"     * Generates the workout parameters based off the user\u0027s input.","lastModifiedDate":"2021-10-31"},{"lineNumber":39,"author":{"gitId":"arvejw"},"content":"     *","lastModifiedDate":"2021-10-31"},{"lineNumber":40,"author":{"gitId":"arvejw"},"content":"     * @param inputArguments Arguments input by the user that come after the command word.","lastModifiedDate":"2021-10-31"},{"lineNumber":41,"author":{"gitId":"arvejw"},"content":"     * @throws WorkoutException If there are issues during generation of workout parameters.","lastModifiedDate":"2021-11-03"},{"lineNumber":42,"author":{"gitId":"arvejw"},"content":"     */","lastModifiedDate":"2021-10-31"},{"lineNumber":43,"author":{"gitId":"arvejw"},"content":"    public void generateWorkoutParameters(String inputArguments) throws WorkoutException {","lastModifiedDate":"2021-10-24"},{"lineNumber":44,"author":{"gitId":"arvejw"},"content":"        WORKOUT_TRACKER_LOGGER.log(Level.INFO, \"Starting generation of parameters for workout.\");","lastModifiedDate":"2021-10-13"},{"lineNumber":45,"author":{"gitId":"arvejw"},"content":"        workoutDescription \u003d Parser.getDescription(inputArguments);","lastModifiedDate":"2021-10-11"},{"lineNumber":46,"author":{"gitId":"arvejw"},"content":"        caloriesBurned \u003d Parser.getCaloriesBurnedForWorkout(inputArguments);","lastModifiedDate":"2021-10-20"},{"lineNumber":47,"author":{"gitId":"arvejw"},"content":"        workoutDate \u003d Parser.getDate(inputArguments);","lastModifiedDate":"2021-10-24"},{"lineNumber":48,"author":{"gitId":"arvejw"},"content":"        workoutTime \u003d Parser.getTime(inputArguments);","lastModifiedDate":"2021-10-11"},{"lineNumber":49,"author":{"gitId":"arvejw"},"content":"        WORKOUT_TRACKER_LOGGER.log(Level.INFO, \"Successfully generated parameters for workout.\");","lastModifiedDate":"2021-10-13"},{"lineNumber":50,"author":{"gitId":"arvejw"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":51,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":52,"author":{"gitId":"arvejw"},"content":"    /**","lastModifiedDate":"2021-10-31"},{"lineNumber":53,"author":{"gitId":"arvejw"},"content":"     * Adds a workout to the workout list.","lastModifiedDate":"2021-10-31"},{"lineNumber":54,"author":{"gitId":"arvejw"},"content":"     *","lastModifiedDate":"2021-10-31"},{"lineNumber":55,"author":{"gitId":"arvejw"},"content":"     * @param inputArguments      Arguments input by the user that come after the command word.","lastModifiedDate":"2021-10-31"},{"lineNumber":56,"author":{"gitId":"arvejw"},"content":"     * @param isSquelchAddMessage Flag to determine whether to squelch the message printed during successful adding of","lastModifiedDate":"2021-10-31"},{"lineNumber":57,"author":{"gitId":"arvejw"},"content":"     *                            a workout. \u003ccode\u003etrue\u003c/code\u003e to squelch, \u003ccode\u003efalse\u003c/code\u003e to continue printing","lastModifiedDate":"2021-10-31"},{"lineNumber":58,"author":{"gitId":"arvejw"},"content":"     *                            the message.","lastModifiedDate":"2021-10-31"},{"lineNumber":59,"author":{"gitId":"arvejw"},"content":"     * @throws WorkoutException If there are issues during adding the workout.","lastModifiedDate":"2021-11-03"},{"lineNumber":60,"author":{"gitId":"arvejw"},"content":"     */","lastModifiedDate":"2021-10-31"},{"lineNumber":61,"author":{"gitId":"arvejw"},"content":"    public void addWorkout(String inputArguments, boolean isSquelchAddMessage) throws WorkoutException {","lastModifiedDate":"2021-10-24"},{"lineNumber":62,"author":{"gitId":"arvejw"},"content":"        WORKOUT_TRACKER_LOGGER.log(Level.INFO, \"Starting to try and add workout.\");","lastModifiedDate":"2021-10-13"},{"lineNumber":63,"author":{"gitId":"arvejw"},"content":"        nullArgumentCheck(inputArguments);","lastModifiedDate":"2021-10-11"},{"lineNumber":64,"author":{"gitId":"arvejw"},"content":"        assert inputArguments !\u003d null : \"Exception should already been thrown if argument is null\";","lastModifiedDate":"2021-10-11"},{"lineNumber":65,"author":{"gitId":"arvejw"},"content":"        missingDescriptionCheck(inputArguments);","lastModifiedDate":"2021-10-14"},{"lineNumber":66,"author":{"gitId":"arvejw"},"content":"        generateWorkoutParameters(inputArguments);","lastModifiedDate":"2021-10-11"},{"lineNumber":67,"author":{"gitId":"arvejw"},"content":"        String updatedArguments \u003d workoutDescription + Parser.CALORIE_SEPARATOR + caloriesBurned","lastModifiedDate":"2021-10-31"},{"lineNumber":68,"author":{"gitId":"arvejw"},"content":"                + Parser.DATE_SEPARATOR + workoutDate + Parser.TIME_SEPARATOR + workoutTime;","lastModifiedDate":"2021-10-31"},{"lineNumber":69,"author":{"gitId":"arvejw"},"content":"        duplicateWorkoutCheck(updatedArguments);","lastModifiedDate":"2021-10-31"},{"lineNumber":70,"author":{"gitId":"arvejw"},"content":"        if (!isSquelchAddMessage) {","lastModifiedDate":"2021-10-20"},{"lineNumber":71,"author":{"gitId":"arvejw"},"content":"            System.out.println(ClickfitMessages.getAddWorkoutSuccessMessage(","lastModifiedDate":"2021-11-03"},{"lineNumber":72,"author":{"gitId":"arvejw"},"content":"                    workoutDescription, workoutDate, workoutTime, caloriesBurned));","lastModifiedDate":"2021-11-03"},{"lineNumber":73,"author":{"gitId":"arvejw"},"content":"        }","lastModifiedDate":"2021-10-20"},{"lineNumber":74,"author":{"gitId":"arvejw"},"content":"        workouts.add(updatedArguments);","lastModifiedDate":"2021-10-20"},{"lineNumber":75,"author":{"gitId":"arvejw"},"content":"        WORKOUT_TRACKER_LOGGER.log(Level.INFO, \"Successfully added workout.\");","lastModifiedDate":"2021-10-13"},{"lineNumber":76,"author":{"gitId":"arvejw"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":77,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":78,"author":{"gitId":"arvejw"},"content":"    /**","lastModifiedDate":"2021-10-31"},{"lineNumber":79,"author":{"gitId":"arvejw"},"content":"     * Deletes a workout from the workout list.","lastModifiedDate":"2021-10-31"},{"lineNumber":80,"author":{"gitId":"arvejw"},"content":"     *","lastModifiedDate":"2021-10-31"},{"lineNumber":81,"author":{"gitId":"arvejw"},"content":"     * @param inputArguments Arguments input by the user that come after the command word.","lastModifiedDate":"2021-10-31"},{"lineNumber":82,"author":{"gitId":"arvejw"},"content":"     * @throws WorkoutException If there are issues during deletion of the workout.","lastModifiedDate":"2021-11-03"},{"lineNumber":83,"author":{"gitId":"arvejw"},"content":"     */","lastModifiedDate":"2021-10-31"},{"lineNumber":84,"author":{"gitId":"arvejw"},"content":"    public void deleteWorkout(String inputArguments) throws WorkoutException {","lastModifiedDate":"2021-10-28"},{"lineNumber":85,"author":{"gitId":"arvejw"},"content":"        WORKOUT_TRACKER_LOGGER.log(Level.INFO, \"Starting to try and delete workout.\");","lastModifiedDate":"2021-10-13"},{"lineNumber":86,"author":{"gitId":"arvejw"},"content":"        if (inputArguments \u003d\u003d null) {","lastModifiedDate":"2021-10-28"},{"lineNumber":87,"author":{"gitId":"arvejw"},"content":"            throw new NoWorkoutIndexException();","lastModifiedDate":"2021-10-28"},{"lineNumber":88,"author":{"gitId":"arvejw"},"content":"        }","lastModifiedDate":"2021-10-28"},{"lineNumber":89,"author":{"gitId":"arvejw"},"content":"        assert inputArguments !\u003d null : \"Exception should already been thrown if argument is null\";","lastModifiedDate":"2021-10-11"},{"lineNumber":90,"author":{"gitId":"arvejw"},"content":"        if (isWorkoutListEmpty()) {","lastModifiedDate":"2021-10-26"},{"lineNumber":91,"author":{"gitId":"arvejw"},"content":"            System.out.println(ClickfitMessages.EMPTY_WORKOUT_LIST_MESSAGE);","lastModifiedDate":"2021-10-26"},{"lineNumber":92,"author":{"gitId":"arvejw"},"content":"            return;","lastModifiedDate":"2021-10-26"},{"lineNumber":93,"author":{"gitId":"arvejw"},"content":"        }","lastModifiedDate":"2021-10-26"},{"lineNumber":94,"author":{"gitId":"arvejw"},"content":"        assert workouts.size() \u003e 0 : \"List should be non empty at this point\";","lastModifiedDate":"2021-10-20"},{"lineNumber":95,"author":{"gitId":"arvejw"},"content":"        int workoutNumber \u003d Parser.parseStringToInteger(inputArguments);","lastModifiedDate":"2021-10-11"},{"lineNumber":96,"author":{"gitId":"arvejw"},"content":"        int workoutIndex \u003d workoutNumber - 1; // 0-indexing","lastModifiedDate":"2021-10-11"},{"lineNumber":97,"author":{"gitId":"arvejw"},"content":"        if (isWorkoutNumberWithinRange(workoutNumber)) {","lastModifiedDate":"2021-10-11"},{"lineNumber":98,"author":{"gitId":"arvejw"},"content":"            generateWorkoutParameters(workouts.get(workoutIndex));","lastModifiedDate":"2021-10-20"},{"lineNumber":99,"author":{"gitId":"arvejw"},"content":"            System.out.println(ClickfitMessages.getDeleteWorkoutSuccessMessage(","lastModifiedDate":"2021-11-03"},{"lineNumber":100,"author":{"gitId":"arvejw"},"content":"                    workoutDescription, workoutDate, workoutTime, caloriesBurned));","lastModifiedDate":"2021-11-03"},{"lineNumber":101,"author":{"gitId":"arvejw"},"content":"            workouts.remove(workoutIndex);","lastModifiedDate":"2021-10-20"},{"lineNumber":102,"author":{"gitId":"arvejw"},"content":"            WORKOUT_TRACKER_LOGGER.log(Level.INFO, \"Successfully deleted workout.\");","lastModifiedDate":"2021-10-13"},{"lineNumber":103,"author":{"gitId":"arvejw"},"content":"        } else {","lastModifiedDate":"2021-10-11"},{"lineNumber":104,"author":{"gitId":"arvejw"},"content":"            WORKOUT_TRACKER_LOGGER.log(Level.WARNING, \"Failed to delete workout.\");","lastModifiedDate":"2021-10-13"},{"lineNumber":105,"author":{"gitId":"arvejw"},"content":"            throw new DeleteWorkoutException();","lastModifiedDate":"2021-10-24"},{"lineNumber":106,"author":{"gitId":"arvejw"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":107,"author":{"gitId":"arvejw"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":108,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":109,"author":{"gitId":"arvejw"},"content":"    /**","lastModifiedDate":"2021-10-31"},{"lineNumber":110,"author":{"gitId":"arvejw"},"content":"     * Prints out the list of recorded workouts.","lastModifiedDate":"2021-10-31"},{"lineNumber":111,"author":{"gitId":"arvejw"},"content":"     * Either a filtered list based off a certain date or the full workout list can be printed.","lastModifiedDate":"2021-10-31"},{"lineNumber":112,"author":{"gitId":"arvejw"},"content":"     *","lastModifiedDate":"2021-10-31"},{"lineNumber":113,"author":{"gitId":"arvejw"},"content":"     * @param inputArguments Date to use as a filter in the format dd/mm/yyyy.","lastModifiedDate":"2021-10-31"},{"lineNumber":114,"author":{"gitId":"arvejw"},"content":"     *                       If the input is \u003ccode\u003eall\u003c/code\u003e the full list of all workouts recorded is printed.","lastModifiedDate":"2021-10-31"},{"lineNumber":115,"author":{"gitId":"arvejw"},"content":"     */","lastModifiedDate":"2021-10-31"},{"lineNumber":116,"author":{"gitId":"arvejw"},"content":"    public void listWorkouts(String inputArguments) throws WorkoutException {","lastModifiedDate":"2021-10-24"},{"lineNumber":117,"author":{"gitId":"arvejw"},"content":"        if (inputArguments.equals(INPUT_ALL)) {","lastModifiedDate":"2021-10-22"},{"lineNumber":118,"author":{"gitId":"arvejw"},"content":"            listAllWorkouts();","lastModifiedDate":"2021-10-20"},{"lineNumber":119,"author":{"gitId":"arvejw"},"content":"        } else {","lastModifiedDate":"2021-10-20"},{"lineNumber":120,"author":{"gitId":"arvejw"},"content":"            listWorkoutsOnDate(inputArguments);","lastModifiedDate":"2021-10-20"},{"lineNumber":121,"author":{"gitId":"arvejw"},"content":"        }","lastModifiedDate":"2021-10-20"},{"lineNumber":122,"author":{"gitId":"arvejw"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":123,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":124,"author":{"gitId":"arvejw"},"content":"    /**","lastModifiedDate":"2021-10-31"},{"lineNumber":125,"author":{"gitId":"arvejw"},"content":"     * Prints out the full list of all recorded workouts.","lastModifiedDate":"2021-10-31"},{"lineNumber":126,"author":{"gitId":"arvejw"},"content":"     *","lastModifiedDate":"2021-10-31"},{"lineNumber":127,"author":{"gitId":"arvejw"},"content":"     * @throws WorkoutException If there are issues during generation of parameters when printing all workouts.","lastModifiedDate":"2021-11-03"},{"lineNumber":128,"author":{"gitId":"arvejw"},"content":"     */","lastModifiedDate":"2021-10-31"},{"lineNumber":129,"author":{"gitId":"arvejw"},"content":"    public void listAllWorkouts() throws WorkoutException {","lastModifiedDate":"2021-10-24"},{"lineNumber":130,"author":{"gitId":"arvejw"},"content":"        WORKOUT_TRACKER_LOGGER.log(Level.INFO, \"Starting to try and list workouts.\");","lastModifiedDate":"2021-10-13"},{"lineNumber":131,"author":{"gitId":"arvejw"},"content":"        if (isWorkoutListEmpty()) {","lastModifiedDate":"2021-10-31"},{"lineNumber":132,"author":{"gitId":"arvejw"},"content":"            System.out.println(ClickfitMessages.EMPTY_WORKOUT_LIST_MESSAGE);","lastModifiedDate":"2021-10-31"},{"lineNumber":133,"author":{"gitId":"arvejw"},"content":"            return;","lastModifiedDate":"2021-10-31"},{"lineNumber":134,"author":{"gitId":"arvejw"},"content":"        }","lastModifiedDate":"2021-10-31"},{"lineNumber":135,"author":{"gitId":"arvejw"},"content":"        assert workouts.size() \u003e 0 : \"List should be non empty at this point\";","lastModifiedDate":"2021-10-20"},{"lineNumber":136,"author":{"gitId":"arvejw"},"content":"        System.out.println(ClickfitMessages.FULL_WORKOUT_LIST_MESSAGE);","lastModifiedDate":"2021-11-03"},{"lineNumber":137,"author":{"gitId":"arvejw"},"content":"        int currentIndex \u003d 1;","lastModifiedDate":"2021-10-11"},{"lineNumber":138,"author":{"gitId":"arvejw"},"content":"        for (String workout : workouts) {","lastModifiedDate":"2021-10-20"},{"lineNumber":139,"author":{"gitId":"arvejw"},"content":"            generateWorkoutParameters(workout);","lastModifiedDate":"2021-10-11"},{"lineNumber":140,"author":{"gitId":"arvejw"},"content":"            System.out.println(currentIndex + \". \" + workoutDescription);","lastModifiedDate":"2021-10-11"},{"lineNumber":141,"author":{"gitId":"arvejw"},"content":"            System.out.println(\"Calories burned: \" + caloriesBurned);","lastModifiedDate":"2021-10-11"},{"lineNumber":142,"author":{"gitId":"arvejw"},"content":"            System.out.println(\"Date: \" + workoutDate);","lastModifiedDate":"2021-10-11"},{"lineNumber":143,"author":{"gitId":"arvejw"},"content":"            System.out.println(\"Time: \" + workoutTime + System.lineSeparator()","lastModifiedDate":"2021-11-03"},{"lineNumber":144,"author":{"gitId":"arvejw"},"content":"                    + Ui.HORIZONTAL_BAR_SHORT);","lastModifiedDate":"2021-11-03"},{"lineNumber":145,"author":{"gitId":"arvejw"},"content":"            currentIndex++;","lastModifiedDate":"2021-10-11"},{"lineNumber":146,"author":{"gitId":"arvejw"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":147,"author":{"gitId":"arvejw"},"content":"        System.out.println(ClickfitMessages.getTotalWorkoutsDoneMessage(workouts.size()));","lastModifiedDate":"2021-11-03"},{"lineNumber":148,"author":{"gitId":"arvejw"},"content":"        WORKOUT_TRACKER_LOGGER.log(Level.INFO, \"Successfully listed workouts.\");","lastModifiedDate":"2021-10-13"},{"lineNumber":149,"author":{"gitId":"arvejw"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":150,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":151,"author":{"gitId":"arvejw"},"content":"    /**","lastModifiedDate":"2021-10-31"},{"lineNumber":152,"author":{"gitId":"arvejw"},"content":"     * Prints out a filtered workout list based off a certain date.","lastModifiedDate":"2021-10-31"},{"lineNumber":153,"author":{"gitId":"arvejw"},"content":"     *","lastModifiedDate":"2021-10-31"},{"lineNumber":154,"author":{"gitId":"arvejw"},"content":"     * @param inputArguments Date to use as a filter in the format dd/mm/yyyy.","lastModifiedDate":"2021-10-31"},{"lineNumber":155,"author":{"gitId":"arvejw"},"content":"     *                       If the input is \u003ccode\u003eall\u003c/code\u003e the full list of all workouts recorded is printed.","lastModifiedDate":"2021-10-31"},{"lineNumber":156,"author":{"gitId":"arvejw"},"content":"     * @throws WorkoutException If there are issues during generation of parameters when printing all workouts.","lastModifiedDate":"2021-11-03"},{"lineNumber":157,"author":{"gitId":"arvejw"},"content":"     */","lastModifiedDate":"2021-10-31"},{"lineNumber":158,"author":{"gitId":"arvejw"},"content":"    public void listWorkoutsOnDate(String inputArguments) throws WorkoutException {","lastModifiedDate":"2021-10-24"},{"lineNumber":159,"author":{"gitId":"arvejw"},"content":"        ArrayList\u003cString\u003e filteredWorkoutList \u003d (ArrayList\u003cString\u003e) workouts.stream()","lastModifiedDate":"2021-10-20"},{"lineNumber":160,"author":{"gitId":"arvejw"},"content":"                .filter((t) -\u003e Parser.getDate(t).equals(inputArguments)).collect(Collectors.toList());","lastModifiedDate":"2021-10-20"},{"lineNumber":161,"author":{"gitId":"arvejw"},"content":"        if (filteredWorkoutList.isEmpty()) {","lastModifiedDate":"2021-10-20"},{"lineNumber":162,"author":{"gitId":"arvejw"},"content":"            if (inputArguments.equals(Parser.getSystemDate())) {","lastModifiedDate":"2021-10-31"},{"lineNumber":163,"author":{"gitId":"arvejw"},"content":"                System.out.println(ClickfitMessages.EMPTY_WORKOUT_LIST_TODAY_MESSAGE);","lastModifiedDate":"2021-11-03"},{"lineNumber":164,"author":{"gitId":"arvejw"},"content":"            } else {","lastModifiedDate":"2021-10-31"},{"lineNumber":165,"author":{"gitId":"arvejw"},"content":"                System.out.println(ClickfitMessages.getEmptyWorkoutListOnDateMessage(inputArguments));","lastModifiedDate":"2021-11-03"},{"lineNumber":166,"author":{"gitId":"arvejw"},"content":"            }","lastModifiedDate":"2021-10-31"},{"lineNumber":167,"author":{"gitId":"arvejw"},"content":"        } else {","lastModifiedDate":"2021-10-20"},{"lineNumber":168,"author":{"gitId":"arvejw"},"content":"            if (inputArguments.equals(Parser.getSystemDate())) {","lastModifiedDate":"2021-10-20"},{"lineNumber":169,"author":{"gitId":"arvejw"},"content":"                System.out.println(ClickfitMessages.WORKOUTS_RECORDED_TODAY_MESSAGE);","lastModifiedDate":"2021-11-03"},{"lineNumber":170,"author":{"gitId":"arvejw"},"content":"            } else {","lastModifiedDate":"2021-10-20"},{"lineNumber":171,"author":{"gitId":"arvejw"},"content":"                System.out.println(ClickfitMessages.getWorkoutsOnDateMessage(inputArguments));","lastModifiedDate":"2021-11-03"},{"lineNumber":172,"author":{"gitId":"arvejw"},"content":"            }","lastModifiedDate":"2021-10-20"},{"lineNumber":173,"author":{"gitId":"arvejw"},"content":"            int currentIndex \u003d 1;","lastModifiedDate":"2021-10-20"},{"lineNumber":174,"author":{"gitId":"arvejw"},"content":"            int totalCaloriesBurned \u003d 0;","lastModifiedDate":"2021-10-22"},{"lineNumber":175,"author":{"gitId":"arvejw"},"content":"            for (String workout : filteredWorkoutList) {","lastModifiedDate":"2021-10-20"},{"lineNumber":176,"author":{"gitId":"arvejw"},"content":"                generateWorkoutParameters(workout);","lastModifiedDate":"2021-10-20"},{"lineNumber":177,"author":{"gitId":"arvejw"},"content":"                System.out.println(currentIndex + \". \" + workoutDescription);","lastModifiedDate":"2021-10-20"},{"lineNumber":178,"author":{"gitId":"arvejw"},"content":"                System.out.println(\"Calories burned: \" + caloriesBurned);","lastModifiedDate":"2021-10-20"},{"lineNumber":179,"author":{"gitId":"arvejw"},"content":"                System.out.println(\"Date: \" + workoutDate);","lastModifiedDate":"2021-10-20"},{"lineNumber":180,"author":{"gitId":"arvejw"},"content":"                System.out.println(\"Time: \" + workoutTime + System.lineSeparator()","lastModifiedDate":"2021-11-03"},{"lineNumber":181,"author":{"gitId":"arvejw"},"content":"                        + Ui.HORIZONTAL_BAR_SHORT);","lastModifiedDate":"2021-11-03"},{"lineNumber":182,"author":{"gitId":"arvejw"},"content":"                totalCaloriesBurned +\u003d caloriesBurned;","lastModifiedDate":"2021-10-22"},{"lineNumber":183,"author":{"gitId":"arvejw"},"content":"                currentIndex++;","lastModifiedDate":"2021-10-20"},{"lineNumber":184,"author":{"gitId":"arvejw"},"content":"            }","lastModifiedDate":"2021-10-20"},{"lineNumber":185,"author":{"gitId":"arvejw"},"content":"            System.out.println(ClickfitMessages.getTotalCaloriesBurnedMessage(totalCaloriesBurned));","lastModifiedDate":"2021-11-03"},{"lineNumber":186,"author":{"gitId":"arvejw"},"content":"        }","lastModifiedDate":"2021-10-20"},{"lineNumber":187,"author":{"gitId":"arvejw"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":188,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":189,"author":{"gitId":"arvejw"},"content":"    /**","lastModifiedDate":"2021-10-31"},{"lineNumber":190,"author":{"gitId":"arvejw"},"content":"     * Returns the calories burned on a particular date based on the workouts recorded in the workout list.","lastModifiedDate":"2021-10-31"},{"lineNumber":191,"author":{"gitId":"arvejw"},"content":"     *","lastModifiedDate":"2021-10-31"},{"lineNumber":192,"author":{"gitId":"arvejw"},"content":"     * @param date Date to use as a filter in the format dd/mm/yyyy when getting total calories.","lastModifiedDate":"2021-10-31"},{"lineNumber":193,"author":{"gitId":"arvejw"},"content":"     * @return int The total calories burned on the date. If no workouts recorded on total calories burned is 0.","lastModifiedDate":"2021-11-03"},{"lineNumber":194,"author":{"gitId":"arvejw"},"content":"     * @throws WorkoutException If there are issues getting calories burned from workouts.","lastModifiedDate":"2021-11-03"},{"lineNumber":195,"author":{"gitId":"arvejw"},"content":"     */","lastModifiedDate":"2021-10-31"},{"lineNumber":196,"author":{"gitId":"arvejw"},"content":"    public int getCaloriesBurned(String date) throws WorkoutException {","lastModifiedDate":"2021-10-24"},{"lineNumber":197,"author":{"gitId":"arvejw"},"content":"        ArrayList\u003cString\u003e filteredWorkoutList \u003d (ArrayList\u003cString\u003e) workouts.stream()","lastModifiedDate":"2021-10-21"},{"lineNumber":198,"author":{"gitId":"arvejw"},"content":"                .filter((t) -\u003e Parser.getDateNoDateTracker(t).equals(date)).collect(Collectors.toList());","lastModifiedDate":"2021-10-21"},{"lineNumber":199,"author":{"gitId":"arvejw"},"content":"        int totalCaloriesBurned \u003d 0;","lastModifiedDate":"2021-10-21"},{"lineNumber":200,"author":{"gitId":"arvejw"},"content":"        if (!filteredWorkoutList.isEmpty()) {","lastModifiedDate":"2021-10-31"},{"lineNumber":201,"author":{"gitId":"arvejw"},"content":"            for (String workout : workouts) {","lastModifiedDate":"2021-10-21"},{"lineNumber":202,"author":{"gitId":"arvejw"},"content":"                totalCaloriesBurned +\u003d Parser.getCaloriesBurnedForWorkout(workout);","lastModifiedDate":"2021-10-21"},{"lineNumber":203,"author":{"gitId":"arvejw"},"content":"            }","lastModifiedDate":"2021-10-21"},{"lineNumber":204,"author":{"gitId":"arvejw"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":205,"author":{"gitId":"arvejw"},"content":"        return totalCaloriesBurned;","lastModifiedDate":"2021-10-31"},{"lineNumber":206,"author":{"gitId":"arvejw"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":207,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":208,"author":{"gitId":"arvejw"},"content":"    /**","lastModifiedDate":"2021-10-31"},{"lineNumber":209,"author":{"gitId":"arvejw"},"content":"     * Checks whether input argument is null.","lastModifiedDate":"2021-10-31"},{"lineNumber":210,"author":{"gitId":"arvejw"},"content":"     *","lastModifiedDate":"2021-10-31"},{"lineNumber":211,"author":{"gitId":"arvejw"},"content":"     * @param inputArguments Arguments input by the user that come after the command word.","lastModifiedDate":"2021-10-31"},{"lineNumber":212,"author":{"gitId":"arvejw"},"content":"     * @throws WorkoutException If input argument is null.","lastModifiedDate":"2021-11-03"},{"lineNumber":213,"author":{"gitId":"arvejw"},"content":"     */","lastModifiedDate":"2021-10-31"},{"lineNumber":214,"author":{"gitId":"arvejw"},"content":"    public void nullArgumentCheck(String inputArguments) throws WorkoutException {","lastModifiedDate":"2021-10-24"},{"lineNumber":215,"author":{"gitId":"arvejw"},"content":"        if (inputArguments \u003d\u003d null) {","lastModifiedDate":"2021-10-11"},{"lineNumber":216,"author":{"gitId":"arvejw"},"content":"            WORKOUT_TRACKER_LOGGER.log(Level.WARNING, \"User input argument(s) is null.\");","lastModifiedDate":"2021-10-13"},{"lineNumber":217,"author":{"gitId":"arvejw"},"content":"            throw new WorkoutNullArgumentException();","lastModifiedDate":"2021-10-24"},{"lineNumber":218,"author":{"gitId":"arvejw"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":219,"author":{"gitId":"arvejw"},"content":"        WORKOUT_TRACKER_LOGGER.log(Level.INFO, \"User input argument(s) is not null.\");","lastModifiedDate":"2021-10-13"},{"lineNumber":220,"author":{"gitId":"arvejw"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":221,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":222,"author":{"gitId":"arvejw"},"content":"    /**","lastModifiedDate":"2021-10-31"},{"lineNumber":223,"author":{"gitId":"arvejw"},"content":"     * Checks whether the list of recorded workouts is empty.","lastModifiedDate":"2021-10-31"},{"lineNumber":224,"author":{"gitId":"arvejw"},"content":"     *","lastModifiedDate":"2021-10-31"},{"lineNumber":225,"author":{"gitId":"arvejw"},"content":"     * @return boolean \u003ccode\u003etrue\u003c/code\u003e if workout list is empty, \u003ccode\u003efalse\u003c/code\u003e otherwise.","lastModifiedDate":"2021-11-03"},{"lineNumber":226,"author":{"gitId":"arvejw"},"content":"     */","lastModifiedDate":"2021-10-31"},{"lineNumber":227,"author":{"gitId":"arvejw"},"content":"    public boolean isWorkoutListEmpty() {","lastModifiedDate":"2021-10-26"},{"lineNumber":228,"author":{"gitId":"arvejw"},"content":"        return workouts.isEmpty();","lastModifiedDate":"2021-10-26"},{"lineNumber":229,"author":{"gitId":"arvejw"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":230,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":231,"author":{"gitId":"arvejw"},"content":"    /**","lastModifiedDate":"2021-10-31"},{"lineNumber":232,"author":{"gitId":"arvejw"},"content":"     * Checks whether the workout index is within range.","lastModifiedDate":"2021-10-31"},{"lineNumber":233,"author":{"gitId":"arvejw"},"content":"     * This check is done under the assumption that ones-indexing is used.","lastModifiedDate":"2021-10-31"},{"lineNumber":234,"author":{"gitId":"arvejw"},"content":"     *","lastModifiedDate":"2021-10-31"},{"lineNumber":235,"author":{"gitId":"arvejw"},"content":"     * @param workoutNumber Index of the workout.","lastModifiedDate":"2021-10-31"},{"lineNumber":236,"author":{"gitId":"arvejw"},"content":"     * @return boolean \u003ccode\u003etrue\u003c/code\u003e if within range, \u003ccode\u003efalse\u003c/code\u003e otherwise.","lastModifiedDate":"2021-11-03"},{"lineNumber":237,"author":{"gitId":"arvejw"},"content":"     */","lastModifiedDate":"2021-10-31"},{"lineNumber":238,"author":{"gitId":"arvejw"},"content":"    public boolean isWorkoutNumberWithinRange(int workoutNumber) {","lastModifiedDate":"2021-10-11"},{"lineNumber":239,"author":{"gitId":"arvejw"},"content":"        int upperBound \u003d workouts.size();","lastModifiedDate":"2021-10-20"},{"lineNumber":240,"author":{"gitId":"arvejw"},"content":"        int lowerBound \u003d LOWER_BOUND_INDEX_NON_EMPTY_LIST_ONES_INDEXING;","lastModifiedDate":"2021-10-11"},{"lineNumber":241,"author":{"gitId":"arvejw"},"content":"        return (workoutNumber \u003e\u003d lowerBound) \u0026\u0026 (workoutNumber \u003c\u003d upperBound);","lastModifiedDate":"2021-10-11"},{"lineNumber":242,"author":{"gitId":"arvejw"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":243,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":244,"author":{"gitId":"arvejw"},"content":"    /**","lastModifiedDate":"2021-10-31"},{"lineNumber":245,"author":{"gitId":"arvejw"},"content":"     * Checks whether the description of the workout is missing in the user input.","lastModifiedDate":"2021-10-31"},{"lineNumber":246,"author":{"gitId":"arvejw"},"content":"     *","lastModifiedDate":"2021-10-31"},{"lineNumber":247,"author":{"gitId":"arvejw"},"content":"     * @param inputArguments Arguments input by the user that come after the command word.","lastModifiedDate":"2021-10-31"},{"lineNumber":248,"author":{"gitId":"arvejw"},"content":"     * @throws WorkoutException If unable to find description or find separators.","lastModifiedDate":"2021-11-03"},{"lineNumber":249,"author":{"gitId":"arvejw"},"content":"     */","lastModifiedDate":"2021-10-31"},{"lineNumber":250,"author":{"gitId":"arvejw"},"content":"    public void missingDescriptionCheck(String inputArguments) throws WorkoutException {","lastModifiedDate":"2021-10-24"},{"lineNumber":251,"author":{"gitId":"arvejw"},"content":"        int indexOfFirstCalorieSeparator \u003d inputArguments.indexOf(Parser.CALORIE_SEPARATOR.trim());","lastModifiedDate":"2021-10-12"},{"lineNumber":252,"author":{"gitId":"arvejw"},"content":"        String subStringBeforeCalorieSeparator \u003d \"\";","lastModifiedDate":"2021-10-14"},{"lineNumber":253,"author":{"gitId":"arvejw"},"content":"        if (indexOfFirstCalorieSeparator !\u003d -1) { // calorie separator not found","lastModifiedDate":"2021-10-17"},{"lineNumber":254,"author":{"gitId":"arvejw"},"content":"            subStringBeforeCalorieSeparator \u003d inputArguments.substring(0, indexOfFirstCalorieSeparator).trim();","lastModifiedDate":"2021-10-12"},{"lineNumber":255,"author":{"gitId":"arvejw"},"content":"        } else {","lastModifiedDate":"2021-10-20"},{"lineNumber":256,"author":{"gitId":"arvejw"},"content":"            throw new MissingWorkoutCalorieSeparatorException();","lastModifiedDate":"2021-10-24"},{"lineNumber":257,"author":{"gitId":"arvejw"},"content":"        }","lastModifiedDate":"2021-10-12"},{"lineNumber":258,"author":{"gitId":"arvejw"},"content":"        if (subStringBeforeCalorieSeparator.isEmpty()) {","lastModifiedDate":"2021-10-12"},{"lineNumber":259,"author":{"gitId":"arvejw"},"content":"            WORKOUT_TRACKER_LOGGER.log(Level.WARNING, \"Description is missing in user input arguments.\");","lastModifiedDate":"2021-10-13"},{"lineNumber":260,"author":{"gitId":"arvejw"},"content":"            throw new MissingWorkoutDescriptionException();","lastModifiedDate":"2021-10-24"},{"lineNumber":261,"author":{"gitId":"arvejw"},"content":"        }","lastModifiedDate":"2021-10-12"},{"lineNumber":262,"author":{"gitId":"arvejw"},"content":"        WORKOUT_TRACKER_LOGGER.log(Level.INFO, \"Description is present in user input arguments.\");","lastModifiedDate":"2021-10-13"},{"lineNumber":263,"author":{"gitId":"arvejw"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":264,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":265,"author":{"gitId":"arvejw"},"content":"    /**","lastModifiedDate":"2021-10-31"},{"lineNumber":266,"author":{"gitId":"arvejw"},"content":"     * Checks whether a duplicate workout already exists in the list.","lastModifiedDate":"2021-10-31"},{"lineNumber":267,"author":{"gitId":"arvejw"},"content":"     *","lastModifiedDate":"2021-10-31"},{"lineNumber":268,"author":{"gitId":"arvejw"},"content":"     * @param inputArguments The arguments of the workout to be potentially added.","lastModifiedDate":"2021-10-31"},{"lineNumber":269,"author":{"gitId":"arvejw"},"content":"     * @throws WorkoutException If there are duplicate workouts detected.","lastModifiedDate":"2021-11-03"},{"lineNumber":270,"author":{"gitId":"arvejw"},"content":"     */","lastModifiedDate":"2021-10-31"},{"lineNumber":271,"author":{"gitId":"arvejw"},"content":"    public void duplicateWorkoutCheck(String inputArguments) throws WorkoutException {","lastModifiedDate":"2021-10-31"},{"lineNumber":272,"author":{"gitId":"arvejw"},"content":"        for (String w : workouts) {","lastModifiedDate":"2021-10-31"},{"lineNumber":273,"author":{"gitId":"arvejw"},"content":"            if (inputArguments.trim().equals(w)) {","lastModifiedDate":"2021-10-31"},{"lineNumber":274,"author":{"gitId":"arvejw"},"content":"                throw new DuplicateWorkoutException();","lastModifiedDate":"2021-10-31"},{"lineNumber":275,"author":{"gitId":"arvejw"},"content":"            }","lastModifiedDate":"2021-10-31"},{"lineNumber":276,"author":{"gitId":"arvejw"},"content":"        }","lastModifiedDate":"2021-10-31"},{"lineNumber":277,"author":{"gitId":"arvejw"},"content":"    }","lastModifiedDate":"2021-10-31"},{"lineNumber":278,"author":{"gitId":"arvejw"},"content":"}","lastModifiedDate":"2021-10-11"}],"authorContributionMap":{"arvejw":278}},{"path":"src/main/java/seedu/duke/exceptions/DukeException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VishalJeyaram"},"content":"package seedu.duke.exceptions;","lastModifiedDate":"2021-10-14"},{"lineNumber":2,"author":{"gitId":"VishalJeyaram"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":3,"author":{"gitId":"VishalJeyaram"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2021-10-07"},{"lineNumber":4,"author":{"gitId":"VishalJeyaram"},"content":"    public DukeException(String errorMessage) {","lastModifiedDate":"2021-10-07"},{"lineNumber":5,"author":{"gitId":"VishalJeyaram"},"content":"        super(errorMessage);","lastModifiedDate":"2021-10-07"},{"lineNumber":6,"author":{"gitId":"VishalJeyaram"},"content":"        System.out.println(errorMessage);","lastModifiedDate":"2021-10-07"},{"lineNumber":7,"author":{"gitId":"VishalJeyaram"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":8,"author":{"gitId":"VishalJeyaram"},"content":"}","lastModifiedDate":"2021-10-07"}],"authorContributionMap":{"VishalJeyaram":8}},{"path":"src/main/java/seedu/duke/exceptions/LoadException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VishalJeyaram"},"content":"package seedu.duke.exceptions;","lastModifiedDate":"2021-10-20"},{"lineNumber":2,"author":{"gitId":"VishalJeyaram"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":3,"author":{"gitId":"VishalJeyaram"},"content":"public class LoadException extends Exception {","lastModifiedDate":"2021-10-20"},{"lineNumber":4,"author":{"gitId":"VishalJeyaram"},"content":"}","lastModifiedDate":"2021-10-20"}],"authorContributionMap":{"VishalJeyaram":4}},{"path":"src/main/java/seedu/duke/exceptions/fluid/DeleteEmptyFluidListException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"pragyan01"},"content":"package seedu.duke.exceptions.fluid;","lastModifiedDate":"2021-10-28"},{"lineNumber":2,"author":{"gitId":"pragyan01"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":3,"author":{"gitId":"pragyan01"},"content":"//@@author pragyan01","lastModifiedDate":"2021-11-05"},{"lineNumber":4,"author":{"gitId":"pragyan01"},"content":"/**","lastModifiedDate":"2021-11-05"},{"lineNumber":5,"author":{"gitId":"pragyan01"},"content":" * Custom exception for when user tries to delete a fluid entry but fluid array is empty.","lastModifiedDate":"2021-11-05"},{"lineNumber":6,"author":{"gitId":"pragyan01"},"content":" *","lastModifiedDate":"2021-11-05"},{"lineNumber":7,"author":{"gitId":"pragyan01"},"content":" * @author pragyan01","lastModifiedDate":"2021-11-05"},{"lineNumber":8,"author":{"gitId":"pragyan01"},"content":" */","lastModifiedDate":"2021-11-05"},{"lineNumber":9,"author":{"gitId":"pragyan01"},"content":"public class DeleteEmptyFluidListException extends FluidExceptions {","lastModifiedDate":"2021-10-28"},{"lineNumber":10,"author":{"gitId":"pragyan01"},"content":"    @Override","lastModifiedDate":"2021-10-28"},{"lineNumber":11,"author":{"gitId":"pragyan01"},"content":"    public String getMessage() {","lastModifiedDate":"2021-10-28"},{"lineNumber":12,"author":{"gitId":"pragyan01"},"content":"        return \"You don\u0027t have any fluid entries to delete. You may wish to add a fluid entry first.\";","lastModifiedDate":"2021-10-28"},{"lineNumber":13,"author":{"gitId":"pragyan01"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":14,"author":{"gitId":"pragyan01"},"content":"}","lastModifiedDate":"2021-10-28"}],"authorContributionMap":{"pragyan01":14}},{"path":"src/main/java/seedu/duke/exceptions/fluid/EmptyFluidList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"pragyan01"},"content":"package seedu.duke.exceptions.fluid;","lastModifiedDate":"2021-11-06"},{"lineNumber":2,"author":{"gitId":"pragyan01"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":3,"author":{"gitId":"pragyan01"},"content":"//@@author pragyan01","lastModifiedDate":"2021-11-06"},{"lineNumber":4,"author":{"gitId":"pragyan01"},"content":"/**","lastModifiedDate":"2021-11-06"},{"lineNumber":5,"author":{"gitId":"pragyan01"},"content":" * Custom exception for when fluidList is empty.","lastModifiedDate":"2021-11-06"},{"lineNumber":6,"author":{"gitId":"pragyan01"},"content":" *","lastModifiedDate":"2021-11-06"},{"lineNumber":7,"author":{"gitId":"pragyan01"},"content":" * @author pragyan01","lastModifiedDate":"2021-11-06"},{"lineNumber":8,"author":{"gitId":"pragyan01"},"content":" */","lastModifiedDate":"2021-11-06"},{"lineNumber":9,"author":{"gitId":"pragyan01"},"content":"public class EmptyFluidList extends FluidExceptions {","lastModifiedDate":"2021-11-06"},{"lineNumber":10,"author":{"gitId":"pragyan01"},"content":"    @Override","lastModifiedDate":"2021-11-06"},{"lineNumber":11,"author":{"gitId":"pragyan01"},"content":"    public String getMessage() {","lastModifiedDate":"2021-11-06"},{"lineNumber":12,"author":{"gitId":"pragyan01"},"content":"        return \"An unknown error has occurred in FluidTracker\";","lastModifiedDate":"2021-11-06"},{"lineNumber":13,"author":{"gitId":"pragyan01"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":14,"author":{"gitId":"pragyan01"},"content":"}","lastModifiedDate":"2021-11-06"}],"authorContributionMap":{"pragyan01":14}},{"path":"src/main/java/seedu/duke/exceptions/fluid/FluidExceptions.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"pragyan01"},"content":"package seedu.duke.exceptions.fluid;","lastModifiedDate":"2021-10-28"},{"lineNumber":2,"author":{"gitId":"pragyan01"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":3,"author":{"gitId":"pragyan01"},"content":"//@@author pragyan01","lastModifiedDate":"2021-11-05"},{"lineNumber":4,"author":{"gitId":"pragyan01"},"content":"/**","lastModifiedDate":"2021-11-05"},{"lineNumber":5,"author":{"gitId":"pragyan01"},"content":" * Custom exception for when unknown error related to fluid tracker occurs.","lastModifiedDate":"2021-11-05"},{"lineNumber":6,"author":{"gitId":"pragyan01"},"content":" * Parent exception class for fluid exceptions.","lastModifiedDate":"2021-11-06"},{"lineNumber":7,"author":{"gitId":"pragyan01"},"content":" *","lastModifiedDate":"2021-11-05"},{"lineNumber":8,"author":{"gitId":"pragyan01"},"content":" * @author pragyan01","lastModifiedDate":"2021-11-05"},{"lineNumber":9,"author":{"gitId":"pragyan01"},"content":" */","lastModifiedDate":"2021-11-05"},{"lineNumber":10,"author":{"gitId":"pragyan01"},"content":"public class FluidExceptions extends Exception {","lastModifiedDate":"2021-10-28"},{"lineNumber":11,"author":{"gitId":"pragyan01"},"content":"    @Override","lastModifiedDate":"2021-10-28"},{"lineNumber":12,"author":{"gitId":"pragyan01"},"content":"    public String getMessage() {","lastModifiedDate":"2021-10-28"},{"lineNumber":13,"author":{"gitId":"pragyan01"},"content":"        return \"An unknown error has occurred in FluidTracker\";","lastModifiedDate":"2021-10-28"},{"lineNumber":14,"author":{"gitId":"pragyan01"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":15,"author":{"gitId":"pragyan01"},"content":"}","lastModifiedDate":"2021-10-28"}],"authorContributionMap":{"pragyan01":15}},{"path":"src/main/java/seedu/duke/exceptions/fluid/InvalidFluidDescription.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"pragyan01"},"content":"package seedu.duke.exceptions.fluid;","lastModifiedDate":"2021-10-28"},{"lineNumber":2,"author":{"gitId":"pragyan01"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":3,"author":{"gitId":"pragyan01"},"content":"//@@author pragyan01","lastModifiedDate":"2021-11-05"},{"lineNumber":4,"author":{"gitId":"pragyan01"},"content":"/**","lastModifiedDate":"2021-11-05"},{"lineNumber":5,"author":{"gitId":"pragyan01"},"content":" * Custom exception for when user tries to add a fluid entry without providing a description.","lastModifiedDate":"2021-11-05"},{"lineNumber":6,"author":{"gitId":"pragyan01"},"content":" *","lastModifiedDate":"2021-11-05"},{"lineNumber":7,"author":{"gitId":"pragyan01"},"content":" * @author pragyan01","lastModifiedDate":"2021-11-05"},{"lineNumber":8,"author":{"gitId":"pragyan01"},"content":" */","lastModifiedDate":"2021-11-05"},{"lineNumber":9,"author":{"gitId":"pragyan01"},"content":"public class InvalidFluidDescription extends FluidExceptions {","lastModifiedDate":"2021-10-28"},{"lineNumber":10,"author":{"gitId":"pragyan01"},"content":"    @Override","lastModifiedDate":"2021-10-28"},{"lineNumber":11,"author":{"gitId":"pragyan01"},"content":"    public String getMessage() {","lastModifiedDate":"2021-10-28"},{"lineNumber":12,"author":{"gitId":"pragyan01"},"content":"        return \"Please enter a valid fluid description\";","lastModifiedDate":"2021-10-28"},{"lineNumber":13,"author":{"gitId":"pragyan01"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":14,"author":{"gitId":"pragyan01"},"content":"}","lastModifiedDate":"2021-10-28"}],"authorContributionMap":{"pragyan01":14}},{"path":"src/main/java/seedu/duke/exceptions/fluid/NoCaloriesEntered.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"pragyan01"},"content":"package seedu.duke.exceptions.fluid;","lastModifiedDate":"2021-11-06"},{"lineNumber":2,"author":{"gitId":"pragyan01"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":3,"author":{"gitId":"pragyan01"},"content":"//@@author pragyan01","lastModifiedDate":"2021-11-06"},{"lineNumber":4,"author":{"gitId":"pragyan01"},"content":"/**","lastModifiedDate":"2021-11-06"},{"lineNumber":5,"author":{"gitId":"pragyan01"},"content":" * Custom exception for when user tries to add a fluid entry without providing its calorie intake.","lastModifiedDate":"2021-11-06"},{"lineNumber":6,"author":{"gitId":"pragyan01"},"content":" *","lastModifiedDate":"2021-11-06"},{"lineNumber":7,"author":{"gitId":"pragyan01"},"content":" * @author pragyan01","lastModifiedDate":"2021-11-06"},{"lineNumber":8,"author":{"gitId":"pragyan01"},"content":" */","lastModifiedDate":"2021-11-06"},{"lineNumber":9,"author":{"gitId":"pragyan01"},"content":"public class NoCaloriesEntered extends FluidExceptions {","lastModifiedDate":"2021-11-06"},{"lineNumber":10,"author":{"gitId":"pragyan01"},"content":"    @Override","lastModifiedDate":"2021-11-06"},{"lineNumber":11,"author":{"gitId":"pragyan01"},"content":"    public String getMessage() {","lastModifiedDate":"2021-11-06"},{"lineNumber":12,"author":{"gitId":"pragyan01"},"content":"        return \"Please enter calories.\";","lastModifiedDate":"2021-11-06"},{"lineNumber":13,"author":{"gitId":"pragyan01"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":14,"author":{"gitId":"pragyan01"},"content":"}","lastModifiedDate":"2021-11-06"}],"authorContributionMap":{"pragyan01":14}},{"path":"src/main/java/seedu/duke/exceptions/fluid/NoDeleteFluidIndexException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"pragyan01"},"content":"package seedu.duke.exceptions.fluid;","lastModifiedDate":"2021-10-28"},{"lineNumber":2,"author":{"gitId":"pragyan01"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":3,"author":{"gitId":"pragyan01"},"content":"//@@author pragyan01","lastModifiedDate":"2021-11-05"},{"lineNumber":4,"author":{"gitId":"pragyan01"},"content":"/**","lastModifiedDate":"2021-11-05"},{"lineNumber":5,"author":{"gitId":"pragyan01"},"content":" * Custom exception for when user tries to delete a fluid entry of an invalid index.","lastModifiedDate":"2021-11-05"},{"lineNumber":6,"author":{"gitId":"pragyan01"},"content":" *","lastModifiedDate":"2021-11-05"},{"lineNumber":7,"author":{"gitId":"pragyan01"},"content":" * @author pragyan01","lastModifiedDate":"2021-11-05"},{"lineNumber":8,"author":{"gitId":"pragyan01"},"content":" */","lastModifiedDate":"2021-11-05"},{"lineNumber":9,"author":{"gitId":"pragyan01"},"content":"public class NoDeleteFluidIndexException extends FluidExceptions {","lastModifiedDate":"2021-10-28"},{"lineNumber":10,"author":{"gitId":"pragyan01"},"content":"    @Override","lastModifiedDate":"2021-10-28"},{"lineNumber":11,"author":{"gitId":"pragyan01"},"content":"    public String getMessage() {","lastModifiedDate":"2021-10-28"},{"lineNumber":12,"author":{"gitId":"pragyan01"},"content":"        return \"Please enter a valid fluid index. You may wish to list to check the index numbers.\";","lastModifiedDate":"2021-10-28"},{"lineNumber":13,"author":{"gitId":"pragyan01"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":14,"author":{"gitId":"pragyan01"},"content":"}","lastModifiedDate":"2021-10-28"}],"authorContributionMap":{"pragyan01":14}},{"path":"src/main/java/seedu/duke/exceptions/fluid/NoFluidToDelete.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"pragyan01"},"content":"package seedu.duke.exceptions.fluid;","lastModifiedDate":"2021-10-28"},{"lineNumber":2,"author":{"gitId":"pragyan01"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":3,"author":{"gitId":"pragyan01"},"content":"//@@author pragyan01","lastModifiedDate":"2021-11-05"},{"lineNumber":4,"author":{"gitId":"pragyan01"},"content":"/**","lastModifiedDate":"2021-11-05"},{"lineNumber":5,"author":{"gitId":"pragyan01"},"content":" * Custom exception for when user tries to delete a fluid entry which does not exist.","lastModifiedDate":"2021-11-05"},{"lineNumber":6,"author":{"gitId":"pragyan01"},"content":" *","lastModifiedDate":"2021-11-05"},{"lineNumber":7,"author":{"gitId":"pragyan01"},"content":" * @author pragyan01","lastModifiedDate":"2021-11-05"},{"lineNumber":8,"author":{"gitId":"pragyan01"},"content":" */","lastModifiedDate":"2021-11-05"},{"lineNumber":9,"author":{"gitId":"pragyan01"},"content":"public class NoFluidToDelete extends FluidExceptions {","lastModifiedDate":"2021-10-28"},{"lineNumber":10,"author":{"gitId":"pragyan01"},"content":"    @Override","lastModifiedDate":"2021-10-28"},{"lineNumber":11,"author":{"gitId":"pragyan01"},"content":"    public String getMessage() {","lastModifiedDate":"2021-10-28"},{"lineNumber":12,"author":{"gitId":"pragyan01"},"content":"        return \"This fluid entry does not exist. You may try again or wish to add a fluid entry first.\";","lastModifiedDate":"2021-10-28"},{"lineNumber":13,"author":{"gitId":"pragyan01"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":14,"author":{"gitId":"pragyan01"},"content":"}","lastModifiedDate":"2021-10-28"}],"authorContributionMap":{"pragyan01":14}},{"path":"src/main/java/seedu/duke/exceptions/fluid/NoVolumeEntered.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"pragyan01"},"content":"package seedu.duke.exceptions.fluid;","lastModifiedDate":"2021-11-04"},{"lineNumber":2,"author":{"gitId":"pragyan01"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":3,"author":{"gitId":"pragyan01"},"content":"//@@author pragyan01","lastModifiedDate":"2021-11-05"},{"lineNumber":4,"author":{"gitId":"pragyan01"},"content":"/**","lastModifiedDate":"2021-11-05"},{"lineNumber":5,"author":{"gitId":"pragyan01"},"content":" * Custom exception for when user tries to add a fluid entry without providing its volume.","lastModifiedDate":"2021-11-05"},{"lineNumber":6,"author":{"gitId":"pragyan01"},"content":" *","lastModifiedDate":"2021-11-05"},{"lineNumber":7,"author":{"gitId":"pragyan01"},"content":" * @author pragyan01","lastModifiedDate":"2021-11-05"},{"lineNumber":8,"author":{"gitId":"pragyan01"},"content":" */","lastModifiedDate":"2021-11-05"},{"lineNumber":9,"author":{"gitId":"pragyan01"},"content":"public class NoVolumeEntered extends FluidExceptions {","lastModifiedDate":"2021-11-04"},{"lineNumber":10,"author":{"gitId":"pragyan01"},"content":"    @Override","lastModifiedDate":"2021-11-04"},{"lineNumber":11,"author":{"gitId":"pragyan01"},"content":"    public String getMessage() {","lastModifiedDate":"2021-11-04"},{"lineNumber":12,"author":{"gitId":"pragyan01"},"content":"        return \"Please enter volume.\";","lastModifiedDate":"2021-11-04"},{"lineNumber":13,"author":{"gitId":"pragyan01"},"content":"    }","lastModifiedDate":"2021-11-04"},{"lineNumber":14,"author":{"gitId":"pragyan01"},"content":"}","lastModifiedDate":"2021-11-04"}],"authorContributionMap":{"pragyan01":14}},{"path":"src/main/java/seedu/duke/exceptions/foodbank/DuplicateFood.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"pragyan01"},"content":"package seedu.duke.exceptions.foodbank;","lastModifiedDate":"2021-11-04"},{"lineNumber":2,"author":{"gitId":"pragyan01"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":3,"author":{"gitId":"pragyan01"},"content":"//@@author pragyan01","lastModifiedDate":"2021-11-05"},{"lineNumber":4,"author":{"gitId":"pragyan01"},"content":"public class DuplicateFood extends FoodBankException {","lastModifiedDate":"2021-11-04"},{"lineNumber":5,"author":{"gitId":"pragyan01"},"content":"    @Override","lastModifiedDate":"2021-11-04"},{"lineNumber":6,"author":{"gitId":"pragyan01"},"content":"    public String getMessage() {","lastModifiedDate":"2021-11-04"},{"lineNumber":7,"author":{"gitId":"pragyan01"},"content":"        return \"This food entry already exists.\";","lastModifiedDate":"2021-11-04"},{"lineNumber":8,"author":{"gitId":"pragyan01"},"content":"    }","lastModifiedDate":"2021-11-04"},{"lineNumber":9,"author":{"gitId":"pragyan01"},"content":"}","lastModifiedDate":"2021-11-04"}],"authorContributionMap":{"pragyan01":9}},{"path":"src/main/java/seedu/duke/exceptions/foodbank/EmptyFluidBankException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VishalJeyaram"},"content":"package seedu.duke.exceptions.foodbank;","lastModifiedDate":"2021-10-28"},{"lineNumber":2,"author":{"gitId":"VishalJeyaram"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":3,"author":{"gitId":"pragyan01"},"content":"//@@author pragyan01","lastModifiedDate":"2021-11-05"},{"lineNumber":4,"author":{"gitId":"pragyan01"},"content":"public class EmptyFluidBankException extends FoodBankException {","lastModifiedDate":"2021-10-28"},{"lineNumber":5,"author":{"gitId":"pragyan01"},"content":"    @Override","lastModifiedDate":"2021-10-28"},{"lineNumber":6,"author":{"gitId":"pragyan01"},"content":"    public String getMessage() {","lastModifiedDate":"2021-10-28"},{"lineNumber":7,"author":{"gitId":"pragyan01"},"content":"        return \"You don\u0027t have any fluids in your library!\";","lastModifiedDate":"2021-10-28"},{"lineNumber":8,"author":{"gitId":"pragyan01"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":9,"author":{"gitId":"pragyan01"},"content":"}","lastModifiedDate":"2021-10-28"}],"authorContributionMap":{"pragyan01":7,"VishalJeyaram":2}},{"path":"src/main/java/seedu/duke/exceptions/foodbank/EmptyFoodDescription.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VishalJeyaram"},"content":"package seedu.duke.exceptions.foodbank;","lastModifiedDate":"2021-10-28"},{"lineNumber":2,"author":{"gitId":"VishalJeyaram"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":3,"author":{"gitId":"pragyan01"},"content":"//@@author pragyan01","lastModifiedDate":"2021-11-05"},{"lineNumber":4,"author":{"gitId":"pragyan01"},"content":"public class EmptyFoodDescription extends FoodBankException {","lastModifiedDate":"2021-10-28"},{"lineNumber":5,"author":{"gitId":"pragyan01"},"content":"    @Override","lastModifiedDate":"2021-10-28"},{"lineNumber":6,"author":{"gitId":"pragyan01"},"content":"    public String getMessage() {","lastModifiedDate":"2021-10-28"},{"lineNumber":7,"author":{"gitId":"pragyan01"},"content":"        return \"Please enter a valid meal/fluid description!\";","lastModifiedDate":"2021-10-28"},{"lineNumber":8,"author":{"gitId":"pragyan01"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":9,"author":{"gitId":"pragyan01"},"content":"}","lastModifiedDate":"2021-10-28"}],"authorContributionMap":{"pragyan01":7,"VishalJeyaram":2}},{"path":"src/main/java/seedu/duke/exceptions/foodbank/EmptyMealBankException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VishalJeyaram"},"content":"package seedu.duke.exceptions.foodbank;","lastModifiedDate":"2021-10-28"},{"lineNumber":2,"author":{"gitId":"VishalJeyaram"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":3,"author":{"gitId":"pragyan01"},"content":"//@@author pragyan01","lastModifiedDate":"2021-11-05"},{"lineNumber":4,"author":{"gitId":"pragyan01"},"content":"public class EmptyMealBankException extends FoodBankException {","lastModifiedDate":"2021-10-28"},{"lineNumber":5,"author":{"gitId":"pragyan01"},"content":"    @Override","lastModifiedDate":"2021-10-28"},{"lineNumber":6,"author":{"gitId":"pragyan01"},"content":"    public String getMessage() {","lastModifiedDate":"2021-10-28"},{"lineNumber":7,"author":{"gitId":"pragyan01"},"content":"        return \"You don\u0027t have any meals in your library!\";","lastModifiedDate":"2021-10-28"},{"lineNumber":8,"author":{"gitId":"pragyan01"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":9,"author":{"gitId":"pragyan01"},"content":"}","lastModifiedDate":"2021-10-28"}],"authorContributionMap":{"pragyan01":7,"VishalJeyaram":2}},{"path":"src/main/java/seedu/duke/exceptions/foodbank/FoodBankException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VishalJeyaram"},"content":"package seedu.duke.exceptions.foodbank;","lastModifiedDate":"2021-10-28"},{"lineNumber":2,"author":{"gitId":"VishalJeyaram"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":3,"author":{"gitId":"pragyan01"},"content":"//@@author pragyan01","lastModifiedDate":"2021-11-05"},{"lineNumber":4,"author":{"gitId":"pragyan01"},"content":"public class FoodBankException extends Exception {","lastModifiedDate":"2021-10-28"},{"lineNumber":5,"author":{"gitId":"pragyan01"},"content":"    @Override","lastModifiedDate":"2021-10-28"},{"lineNumber":6,"author":{"gitId":"pragyan01"},"content":"    public String getMessage() {","lastModifiedDate":"2021-10-28"},{"lineNumber":7,"author":{"gitId":"pragyan01"},"content":"        return \"Unknown Error occurred\";","lastModifiedDate":"2021-10-28"},{"lineNumber":8,"author":{"gitId":"pragyan01"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":9,"author":{"gitId":"pragyan01"},"content":"}","lastModifiedDate":"2021-10-28"}],"authorContributionMap":{"pragyan01":7,"VishalJeyaram":2}},{"path":"src/main/java/seedu/duke/exceptions/foodbank/InvalidFluidIndexException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VishalJeyaram"},"content":"package seedu.duke.exceptions.foodbank;","lastModifiedDate":"2021-11-04"},{"lineNumber":2,"author":{"gitId":"VishalJeyaram"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":3,"author":{"gitId":"VishalJeyaram"},"content":"public class InvalidFluidIndexException extends FoodBankException {","lastModifiedDate":"2021-11-04"},{"lineNumber":4,"author":{"gitId":"VishalJeyaram"},"content":"    @Override","lastModifiedDate":"2021-11-04"},{"lineNumber":5,"author":{"gitId":"VishalJeyaram"},"content":"    public String getMessage() {","lastModifiedDate":"2021-11-04"},{"lineNumber":6,"author":{"gitId":"VishalJeyaram"},"content":"        return \"Please enter a valid fluid index! Use \\\"library listfluids\\\" to see the fluid indexes\";","lastModifiedDate":"2021-11-04"},{"lineNumber":7,"author":{"gitId":"VishalJeyaram"},"content":"    }","lastModifiedDate":"2021-11-04"},{"lineNumber":8,"author":{"gitId":"VishalJeyaram"},"content":"}","lastModifiedDate":"2021-11-04"}],"authorContributionMap":{"VishalJeyaram":8}},{"path":"src/main/java/seedu/duke/exceptions/foodbank/InvalidMealIndexException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VishalJeyaram"},"content":"package seedu.duke.exceptions.foodbank;","lastModifiedDate":"2021-11-04"},{"lineNumber":2,"author":{"gitId":"VishalJeyaram"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":3,"author":{"gitId":"VishalJeyaram"},"content":"public class InvalidMealIndexException extends FoodBankException {","lastModifiedDate":"2021-11-04"},{"lineNumber":4,"author":{"gitId":"VishalJeyaram"},"content":"    @Override","lastModifiedDate":"2021-11-04"},{"lineNumber":5,"author":{"gitId":"VishalJeyaram"},"content":"    public String getMessage() {","lastModifiedDate":"2021-11-04"},{"lineNumber":6,"author":{"gitId":"VishalJeyaram"},"content":"        return \"Please enter a valid meal index! Use \\\"library listmeals\\\" to see the meal indexes\";","lastModifiedDate":"2021-11-04"},{"lineNumber":7,"author":{"gitId":"VishalJeyaram"},"content":"    }","lastModifiedDate":"2021-11-04"},{"lineNumber":8,"author":{"gitId":"VishalJeyaram"},"content":"}","lastModifiedDate":"2021-11-04"}],"authorContributionMap":{"VishalJeyaram":8}},{"path":"src/main/java/seedu/duke/exceptions/foodbank/NoFoodFoundException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VishalJeyaram"},"content":"package seedu.duke.exceptions.foodbank;","lastModifiedDate":"2021-10-28"},{"lineNumber":2,"author":{"gitId":"VishalJeyaram"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":3,"author":{"gitId":"VishalJeyaram"},"content":"import seedu.duke.ClickfitMessages;","lastModifiedDate":"2021-10-28"},{"lineNumber":4,"author":{"gitId":"VishalJeyaram"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":5,"author":{"gitId":"VishalJeyaram"},"content":"public class NoFoodFoundException extends FoodBankException {","lastModifiedDate":"2021-10-28"},{"lineNumber":6,"author":{"gitId":"VishalJeyaram"},"content":"    @Override","lastModifiedDate":"2021-10-28"},{"lineNumber":7,"author":{"gitId":"VishalJeyaram"},"content":"    public String getMessage() {","lastModifiedDate":"2021-10-28"},{"lineNumber":8,"author":{"gitId":"VishalJeyaram"},"content":"        return ClickfitMessages.FOOD_BANK_EXCEPTION_MESSAGE;","lastModifiedDate":"2021-10-28"},{"lineNumber":9,"author":{"gitId":"VishalJeyaram"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":10,"author":{"gitId":"VishalJeyaram"},"content":"}","lastModifiedDate":"2021-10-28"}],"authorContributionMap":{"VishalJeyaram":10}},{"path":"src/main/java/seedu/duke/exceptions/foodbank/NoFoodIndexException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VishalJeyaram"},"content":"package seedu.duke.exceptions.foodbank;","lastModifiedDate":"2021-10-28"},{"lineNumber":2,"author":{"gitId":"VishalJeyaram"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":3,"author":{"gitId":"VishalJeyaram"},"content":"public class NoFoodIndexException extends FoodBankException {","lastModifiedDate":"2021-10-28"},{"lineNumber":4,"author":{"gitId":"VishalJeyaram"},"content":"    @Override","lastModifiedDate":"2021-10-28"},{"lineNumber":5,"author":{"gitId":"VishalJeyaram"},"content":"    public String getMessage() {","lastModifiedDate":"2021-10-28"},{"lineNumber":6,"author":{"gitId":"VishalJeyaram"},"content":"        return \"Please enter a valid meal/fluid index! \"","lastModifiedDate":"2021-10-28"},{"lineNumber":7,"author":{"gitId":"VishalJeyaram"},"content":"                + \"Use \\\"library listmeals\\\" to view each meal\u0027s index, and \"","lastModifiedDate":"2021-10-28"},{"lineNumber":8,"author":{"gitId":"VishalJeyaram"},"content":"                + \"use \\\"library listfluids\\\" to view each fluid\u0027s index!\";","lastModifiedDate":"2021-10-28"},{"lineNumber":9,"author":{"gitId":"VishalJeyaram"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":10,"author":{"gitId":"VishalJeyaram"},"content":"}","lastModifiedDate":"2021-10-28"}],"authorContributionMap":{"VishalJeyaram":10}},{"path":"src/main/java/seedu/duke/exceptions/meal/EmptyMealListException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VishalJeyaram"},"content":"package seedu.duke.exceptions.meal;","lastModifiedDate":"2021-10-28"},{"lineNumber":2,"author":{"gitId":"VishalJeyaram"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":3,"author":{"gitId":"VishalJeyaram"},"content":"public class EmptyMealListException extends MealException {","lastModifiedDate":"2021-10-28"},{"lineNumber":4,"author":{"gitId":"VishalJeyaram"},"content":"    @Override","lastModifiedDate":"2021-10-28"},{"lineNumber":5,"author":{"gitId":"VishalJeyaram"},"content":"    public String getMessage() {","lastModifiedDate":"2021-10-28"},{"lineNumber":6,"author":{"gitId":"VishalJeyaram"},"content":"        return \"Your meal list is empty!\";","lastModifiedDate":"2021-10-28"},{"lineNumber":7,"author":{"gitId":"VishalJeyaram"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":8,"author":{"gitId":"VishalJeyaram"},"content":"}","lastModifiedDate":"2021-10-28"}],"authorContributionMap":{"VishalJeyaram":8}},{"path":"src/main/java/seedu/duke/exceptions/meal/MealException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VishalJeyaram"},"content":"package seedu.duke.exceptions.meal;","lastModifiedDate":"2021-10-28"},{"lineNumber":2,"author":{"gitId":"VishalJeyaram"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":3,"author":{"gitId":"VishalJeyaram"},"content":"public class MealException extends Exception {","lastModifiedDate":"2021-10-28"},{"lineNumber":4,"author":{"gitId":"VishalJeyaram"},"content":"    @Override","lastModifiedDate":"2021-10-28"},{"lineNumber":5,"author":{"gitId":"VishalJeyaram"},"content":"    public String getMessage() {","lastModifiedDate":"2021-10-28"},{"lineNumber":6,"author":{"gitId":"VishalJeyaram"},"content":"        return \"An unknown error has occurred\";","lastModifiedDate":"2021-10-28"},{"lineNumber":7,"author":{"gitId":"VishalJeyaram"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":8,"author":{"gitId":"VishalJeyaram"},"content":"}","lastModifiedDate":"2021-10-28"}],"authorContributionMap":{"VishalJeyaram":8}},{"path":"src/main/java/seedu/duke/exceptions/meal/NoDeleteMealIndexException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VishalJeyaram"},"content":"package seedu.duke.exceptions.meal;","lastModifiedDate":"2021-10-28"},{"lineNumber":2,"author":{"gitId":"VishalJeyaram"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":3,"author":{"gitId":"VishalJeyaram"},"content":"public class NoDeleteMealIndexException extends MealException {","lastModifiedDate":"2021-10-28"},{"lineNumber":4,"author":{"gitId":"VishalJeyaram"},"content":"    @Override","lastModifiedDate":"2021-10-28"},{"lineNumber":5,"author":{"gitId":"VishalJeyaram"},"content":"    public String getMessage() {","lastModifiedDate":"2021-10-28"},{"lineNumber":6,"author":{"gitId":"VishalJeyaram"},"content":"        return \"Please enter the index of the meal you wish to delete!\";","lastModifiedDate":"2021-10-28"},{"lineNumber":7,"author":{"gitId":"VishalJeyaram"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":8,"author":{"gitId":"VishalJeyaram"},"content":"}","lastModifiedDate":"2021-10-28"}],"authorContributionMap":{"VishalJeyaram":8}},{"path":"src/main/java/seedu/duke/exceptions/meal/NoMealDescriptionException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VishalJeyaram"},"content":"package seedu.duke.exceptions.meal;","lastModifiedDate":"2021-10-28"},{"lineNumber":2,"author":{"gitId":"VishalJeyaram"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":3,"author":{"gitId":"VishalJeyaram"},"content":"public class NoMealDescriptionException extends MealException {","lastModifiedDate":"2021-10-28"},{"lineNumber":4,"author":{"gitId":"VishalJeyaram"},"content":"    @Override","lastModifiedDate":"2021-10-28"},{"lineNumber":5,"author":{"gitId":"VishalJeyaram"},"content":"    public String getMessage() {","lastModifiedDate":"2021-10-28"},{"lineNumber":6,"author":{"gitId":"VishalJeyaram"},"content":"        return \"Please enter the description/name of the meal you wish to add!\";","lastModifiedDate":"2021-10-28"},{"lineNumber":7,"author":{"gitId":"VishalJeyaram"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":8,"author":{"gitId":"VishalJeyaram"},"content":"}","lastModifiedDate":"2021-10-28"}],"authorContributionMap":{"VishalJeyaram":8}},{"path":"src/main/java/seedu/duke/exceptions/meal/NoMealDetailsException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VishalJeyaram"},"content":"package seedu.duke.exceptions.meal;","lastModifiedDate":"2021-10-28"},{"lineNumber":2,"author":{"gitId":"VishalJeyaram"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":3,"author":{"gitId":"VishalJeyaram"},"content":"public class NoMealDetailsException extends MealException {","lastModifiedDate":"2021-10-28"},{"lineNumber":4,"author":{"gitId":"VishalJeyaram"},"content":"    @Override","lastModifiedDate":"2021-10-28"},{"lineNumber":5,"author":{"gitId":"VishalJeyaram"},"content":"    public String getMessage() {","lastModifiedDate":"2021-10-28"},{"lineNumber":6,"author":{"gitId":"VishalJeyaram"},"content":"        return \"Please enter the details of the meal you wish to add!\";","lastModifiedDate":"2021-10-28"},{"lineNumber":7,"author":{"gitId":"VishalJeyaram"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":8,"author":{"gitId":"VishalJeyaram"},"content":"}","lastModifiedDate":"2021-10-28"}],"authorContributionMap":{"VishalJeyaram":8}},{"path":"src/main/java/seedu/duke/exceptions/meal/NoSuchMealIndexException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VishalJeyaram"},"content":"package seedu.duke.exceptions.meal;","lastModifiedDate":"2021-10-28"},{"lineNumber":2,"author":{"gitId":"VishalJeyaram"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":3,"author":{"gitId":"VishalJeyaram"},"content":"public class NoSuchMealIndexException extends MealException {","lastModifiedDate":"2021-10-28"},{"lineNumber":4,"author":{"gitId":"VishalJeyaram"},"content":"    @Override","lastModifiedDate":"2021-10-28"},{"lineNumber":5,"author":{"gitId":"VishalJeyaram"},"content":"    public String getMessage() {","lastModifiedDate":"2021-10-28"},{"lineNumber":6,"author":{"gitId":"VishalJeyaram"},"content":"        return \"Please enter a proper meal index. Use \\\"list meals all\\\" to view each meal\u0027s index\";","lastModifiedDate":"2021-10-28"},{"lineNumber":7,"author":{"gitId":"VishalJeyaram"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":8,"author":{"gitId":"VishalJeyaram"},"content":"}","lastModifiedDate":"2021-10-28"}],"authorContributionMap":{"VishalJeyaram":8}},{"path":"src/main/java/seedu/duke/exceptions/schedule/DeleteScheduleException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"arvejw"},"content":"package seedu.duke.exceptions.schedule;","lastModifiedDate":"2021-10-24"},{"lineNumber":2,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":3,"author":{"gitId":"arvejw"},"content":"public class DeleteScheduleException extends ScheduleException {","lastModifiedDate":"2021-10-24"},{"lineNumber":4,"author":{"gitId":"arvejw"},"content":"    @Override","lastModifiedDate":"2021-10-24"},{"lineNumber":5,"author":{"gitId":"arvejw"},"content":"    public String getMessage() {","lastModifiedDate":"2021-10-24"},{"lineNumber":6,"author":{"gitId":"arvejw"},"content":"        return \"Failed to delete that scheduled workout! Please enter an Integer within range.\";","lastModifiedDate":"2021-10-24"},{"lineNumber":7,"author":{"gitId":"arvejw"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":8,"author":{"gitId":"arvejw"},"content":"}","lastModifiedDate":"2021-10-24"}],"authorContributionMap":{"arvejw":8}},{"path":"src/main/java/seedu/duke/exceptions/schedule/DuplicateRescheduledWorkoutException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"arvejw"},"content":"package seedu.duke.exceptions.schedule;","lastModifiedDate":"2021-11-06"},{"lineNumber":2,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":3,"author":{"gitId":"arvejw"},"content":"public class DuplicateRescheduledWorkoutException extends ScheduleException {","lastModifiedDate":"2021-11-06"},{"lineNumber":4,"author":{"gitId":"arvejw"},"content":"    @Override","lastModifiedDate":"2021-11-06"},{"lineNumber":5,"author":{"gitId":"arvejw"},"content":"    public String getMessage() {","lastModifiedDate":"2021-11-06"},{"lineNumber":6,"author":{"gitId":"arvejw"},"content":"        return \"Failed to reschedule that scheduled workout. \" + System.lineSeparator()","lastModifiedDate":"2021-11-06"},{"lineNumber":7,"author":{"gitId":"arvejw"},"content":"                + \"A duplicate scheduled workout with the same arguments is already in your schedule.\";","lastModifiedDate":"2021-11-06"},{"lineNumber":8,"author":{"gitId":"arvejw"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":9,"author":{"gitId":"arvejw"},"content":"}","lastModifiedDate":"2021-11-06"}],"authorContributionMap":{"arvejw":9}},{"path":"src/main/java/seedu/duke/exceptions/schedule/DuplicateScheduledWorkoutException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"arvejw"},"content":"package seedu.duke.exceptions.schedule;","lastModifiedDate":"2021-10-31"},{"lineNumber":2,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":3,"author":{"gitId":"arvejw"},"content":"public class DuplicateScheduledWorkoutException extends ScheduleException {","lastModifiedDate":"2021-10-31"},{"lineNumber":4,"author":{"gitId":"arvejw"},"content":"    @Override","lastModifiedDate":"2021-10-31"},{"lineNumber":5,"author":{"gitId":"arvejw"},"content":"    public String getMessage() {","lastModifiedDate":"2021-10-31"},{"lineNumber":6,"author":{"gitId":"arvejw"},"content":"        return \"Failed to add that scheduled workout. \" + System.lineSeparator()","lastModifiedDate":"2021-10-31"},{"lineNumber":7,"author":{"gitId":"arvejw"},"content":"                + \"A duplicate scheduled workout with the same arguments is already in your schedule.\";","lastModifiedDate":"2021-10-31"},{"lineNumber":8,"author":{"gitId":"arvejw"},"content":"    }","lastModifiedDate":"2021-10-31"},{"lineNumber":9,"author":{"gitId":"arvejw"},"content":"}","lastModifiedDate":"2021-10-31"}],"authorContributionMap":{"arvejw":9}},{"path":"src/main/java/seedu/duke/exceptions/schedule/GetActivityException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"arvejw"},"content":"package seedu.duke.exceptions.schedule;","lastModifiedDate":"2021-10-24"},{"lineNumber":2,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":3,"author":{"gitId":"arvejw"},"content":"public class GetActivityException extends ScheduleException {","lastModifiedDate":"2021-10-24"},{"lineNumber":4,"author":{"gitId":"arvejw"},"content":"    @Override","lastModifiedDate":"2021-10-24"},{"lineNumber":5,"author":{"gitId":"arvejw"},"content":"    public String getMessage() {","lastModifiedDate":"2021-10-24"},{"lineNumber":6,"author":{"gitId":"arvejw"},"content":"        return \"Error getting activity quantifiers.\";","lastModifiedDate":"2021-10-24"},{"lineNumber":7,"author":{"gitId":"arvejw"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":8,"author":{"gitId":"arvejw"},"content":"}","lastModifiedDate":"2021-10-24"}],"authorContributionMap":{"arvejw":8}},{"path":"src/main/java/seedu/duke/exceptions/schedule/InvalidActivityFormatException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"arvejw"},"content":"package seedu.duke.exceptions.schedule;","lastModifiedDate":"2021-10-24"},{"lineNumber":2,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":3,"author":{"gitId":"arvejw"},"content":"public class InvalidActivityFormatException extends ScheduleException {","lastModifiedDate":"2021-10-22"},{"lineNumber":4,"author":{"gitId":"arvejw"},"content":"    @Override","lastModifiedDate":"2021-10-22"},{"lineNumber":5,"author":{"gitId":"arvejw"},"content":"    public String getMessage() {","lastModifiedDate":"2021-10-22"},{"lineNumber":6,"author":{"gitId":"arvejw"},"content":"        return \"There was an issue getting your activity breakdown.\" + System.lineSeparator()","lastModifiedDate":"2021-10-31"},{"lineNumber":7,"author":{"gitId":"arvejw"},"content":"                + \"Please enter a positive integer [distance in metres] for distance based \"","lastModifiedDate":"2021-11-04"},{"lineNumber":8,"author":{"gitId":"arvejw"},"content":"                + \"activities(swimming/running/cycling).\" + System.lineSeparator() + \"E.g. running:8000\" + \"\"","lastModifiedDate":"2021-10-22"},{"lineNumber":9,"author":{"gitId":"arvejw"},"content":"                + System.lineSeparator() + \"Enter two positive integers in the format [set]x[reps] for everything else.\"","lastModifiedDate":"2021-11-04"},{"lineNumber":10,"author":{"gitId":"arvejw"},"content":"                + System.lineSeparator() + \"E.g. bench press:3x12\" + System.lineSeparator()","lastModifiedDate":"2021-10-31"},{"lineNumber":11,"author":{"gitId":"arvejw"},"content":"                + \"For multiple activities please separate them by \\\",\\\"\";","lastModifiedDate":"2021-10-31"},{"lineNumber":12,"author":{"gitId":"arvejw"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":13,"author":{"gitId":"arvejw"},"content":"}","lastModifiedDate":"2021-10-22"}],"authorContributionMap":{"arvejw":13}},{"path":"src/main/java/seedu/duke/exceptions/schedule/InvalidScheduleDescriptionException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"arvejw"},"content":"package seedu.duke.exceptions.schedule;","lastModifiedDate":"2021-10-24"},{"lineNumber":2,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":3,"author":{"gitId":"arvejw"},"content":"public class InvalidScheduleDescriptionException extends ScheduleException {","lastModifiedDate":"2021-10-24"},{"lineNumber":4,"author":{"gitId":"arvejw"},"content":"    @Override","lastModifiedDate":"2021-10-24"},{"lineNumber":5,"author":{"gitId":"arvejw"},"content":"    public String getMessage() {","lastModifiedDate":"2021-10-24"},{"lineNumber":6,"author":{"gitId":"arvejw"},"content":"        return \"Invalid schedule description detected!\" + System.lineSeparator()","lastModifiedDate":"2021-10-24"},{"lineNumber":7,"author":{"gitId":"arvejw"},"content":"                + \"Please enter a valid description for your workout!\";","lastModifiedDate":"2021-10-24"},{"lineNumber":8,"author":{"gitId":"arvejw"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":9,"author":{"gitId":"arvejw"},"content":"}","lastModifiedDate":"2021-10-24"}],"authorContributionMap":{"arvejw":9}},{"path":"src/main/java/seedu/duke/exceptions/schedule/MissingActivityQuantifierException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"arvejw"},"content":"package seedu.duke.exceptions.schedule;","lastModifiedDate":"2021-10-24"},{"lineNumber":2,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":3,"author":{"gitId":"arvejw"},"content":"public class MissingActivityQuantifierException extends ScheduleException {","lastModifiedDate":"2021-10-24"},{"lineNumber":4,"author":{"gitId":"arvejw"},"content":"    @Override","lastModifiedDate":"2021-10-24"},{"lineNumber":5,"author":{"gitId":"arvejw"},"content":"    public String getMessage() {","lastModifiedDate":"2021-10-24"},{"lineNumber":6,"author":{"gitId":"arvejw"},"content":"        return \"Missing activity quantifier \\\"x\\\" detected.\" + System.lineSeparator()","lastModifiedDate":"2021-10-24"},{"lineNumber":7,"author":{"gitId":"arvejw"},"content":"                + \"Please enter your [sets]x[reps] for your non-distance based workout activities.\";","lastModifiedDate":"2021-11-06"},{"lineNumber":8,"author":{"gitId":"arvejw"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":9,"author":{"gitId":"arvejw"},"content":"}","lastModifiedDate":"2021-10-24"}],"authorContributionMap":{"arvejw":9}},{"path":"src/main/java/seedu/duke/exceptions/schedule/MissingActivitySplitterException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"arvejw"},"content":"package seedu.duke.exceptions.schedule;","lastModifiedDate":"2021-10-24"},{"lineNumber":2,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":3,"author":{"gitId":"arvejw"},"content":"public class MissingActivitySplitterException extends ScheduleException {","lastModifiedDate":"2021-10-24"},{"lineNumber":4,"author":{"gitId":"arvejw"},"content":"    @Override","lastModifiedDate":"2021-10-24"},{"lineNumber":5,"author":{"gitId":"arvejw"},"content":"    public String getMessage() {","lastModifiedDate":"2021-10-24"},{"lineNumber":6,"author":{"gitId":"arvejw"},"content":"        return \"Missing activity splitter \\\":\\\" detected.\" + System.lineSeparator()","lastModifiedDate":"2021-10-24"},{"lineNumber":7,"author":{"gitId":"arvejw"},"content":"                + \"Please enter [activity name]:[sets]x[reps] \"","lastModifiedDate":"2021-10-24"},{"lineNumber":8,"author":{"gitId":"arvejw"},"content":"                + \"or [activity name]:[distance in metres] for your workout activities\";","lastModifiedDate":"2021-11-05"},{"lineNumber":9,"author":{"gitId":"arvejw"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":10,"author":{"gitId":"arvejw"},"content":"}","lastModifiedDate":"2021-10-24"}],"authorContributionMap":{"arvejw":10}},{"path":"src/main/java/seedu/duke/exceptions/schedule/MissingScheduleDescriptionException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"arvejw"},"content":"package seedu.duke.exceptions.schedule;","lastModifiedDate":"2021-10-24"},{"lineNumber":2,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":3,"author":{"gitId":"arvejw"},"content":"public class MissingScheduleDescriptionException extends ScheduleException {","lastModifiedDate":"2021-10-24"},{"lineNumber":4,"author":{"gitId":"arvejw"},"content":"    @Override","lastModifiedDate":"2021-10-24"},{"lineNumber":5,"author":{"gitId":"arvejw"},"content":"    public String getMessage() {","lastModifiedDate":"2021-10-24"},{"lineNumber":6,"author":{"gitId":"arvejw"},"content":"        return \"I am sorry... it appears the description is missing.\" + System.lineSeparator()","lastModifiedDate":"2021-10-24"},{"lineNumber":7,"author":{"gitId":"arvejw"},"content":"                + \"Please enter a description for your scheduled workout!\";","lastModifiedDate":"2021-10-24"},{"lineNumber":8,"author":{"gitId":"arvejw"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":9,"author":{"gitId":"arvejw"},"content":"}","lastModifiedDate":"2021-10-24"}],"authorContributionMap":{"arvejw":9}},{"path":"src/main/java/seedu/duke/exceptions/schedule/MissingScheduleSeparatorException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"arvejw"},"content":"package seedu.duke.exceptions.schedule;","lastModifiedDate":"2021-10-24"},{"lineNumber":2,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":3,"author":{"gitId":"arvejw"},"content":"public class MissingScheduleSeparatorException extends ScheduleException {","lastModifiedDate":"2021-10-24"},{"lineNumber":4,"author":{"gitId":"arvejw"},"content":"    @Override","lastModifiedDate":"2021-10-24"},{"lineNumber":5,"author":{"gitId":"arvejw"},"content":"    public String getMessage() {","lastModifiedDate":"2021-10-24"},{"lineNumber":6,"author":{"gitId":"arvejw"},"content":"        return \"CLI.ckFit is having difficulties finding the separators...\" + System.lineSeparator()","lastModifiedDate":"2021-10-31"},{"lineNumber":7,"author":{"gitId":"arvejw"},"content":"                + \"Please enter in the format: add schedule [workout_description] /d [dd/mm/yyyy] /t [hh:mm]\"","lastModifiedDate":"2021-10-31"},{"lineNumber":8,"author":{"gitId":"arvejw"},"content":"                + System.lineSeparator() + \"Do remember to put spaces between your separators.\";","lastModifiedDate":"2021-10-31"},{"lineNumber":9,"author":{"gitId":"arvejw"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":10,"author":{"gitId":"arvejw"},"content":"}","lastModifiedDate":"2021-10-24"}],"authorContributionMap":{"arvejw":10}},{"path":"src/main/java/seedu/duke/exceptions/schedule/NoScheduleIndexException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"arvejw"},"content":"package seedu.duke.exceptions.schedule;","lastModifiedDate":"2021-10-28"},{"lineNumber":2,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":3,"author":{"gitId":"arvejw"},"content":"public class NoScheduleIndexException extends ScheduleException {","lastModifiedDate":"2021-10-28"},{"lineNumber":4,"author":{"gitId":"arvejw"},"content":"    @Override","lastModifiedDate":"2021-10-28"},{"lineNumber":5,"author":{"gitId":"arvejw"},"content":"    public String getMessage() {","lastModifiedDate":"2021-10-28"},{"lineNumber":6,"author":{"gitId":"arvejw"},"content":"        return \"Please enter the schedule index in the format: delete schedule [index]\";","lastModifiedDate":"2021-10-28"},{"lineNumber":7,"author":{"gitId":"arvejw"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":8,"author":{"gitId":"arvejw"},"content":"}","lastModifiedDate":"2021-10-28"}],"authorContributionMap":{"arvejw":8}},{"path":"src/main/java/seedu/duke/exceptions/schedule/ScheduleException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"arvejw"},"content":"package seedu.duke.exceptions.schedule;","lastModifiedDate":"2021-10-24"},{"lineNumber":2,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":3,"author":{"gitId":"arvejw"},"content":"public class ScheduleException extends Exception {","lastModifiedDate":"2021-10-22"},{"lineNumber":4,"author":{"gitId":"arvejw"},"content":"    @Override","lastModifiedDate":"2021-10-22"},{"lineNumber":5,"author":{"gitId":"arvejw"},"content":"    public String getMessage() {","lastModifiedDate":"2021-10-22"},{"lineNumber":6,"author":{"gitId":"arvejw"},"content":"        return \"An unknown error has occurred in ScheduleTracker\";","lastModifiedDate":"2021-10-24"},{"lineNumber":7,"author":{"gitId":"arvejw"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":8,"author":{"gitId":"arvejw"},"content":"}","lastModifiedDate":"2021-10-22"}],"authorContributionMap":{"arvejw":8}},{"path":"src/main/java/seedu/duke/exceptions/schedule/ScheduleNullArgumentException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"arvejw"},"content":"package seedu.duke.exceptions.schedule;","lastModifiedDate":"2021-10-24"},{"lineNumber":2,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":3,"author":{"gitId":"arvejw"},"content":"public class ScheduleNullArgumentException extends ScheduleException {","lastModifiedDate":"2021-10-24"},{"lineNumber":4,"author":{"gitId":"arvejw"},"content":"    @Override","lastModifiedDate":"2021-10-24"},{"lineNumber":5,"author":{"gitId":"arvejw"},"content":"    public String getMessage() {","lastModifiedDate":"2021-10-24"},{"lineNumber":6,"author":{"gitId":"arvejw"},"content":"        return \"Please enter arguments in the format: add schedule [workout_description] \"","lastModifiedDate":"2021-10-24"},{"lineNumber":7,"author":{"gitId":"arvejw"},"content":"                + \"/d [dd/mm/yyyy] /t [hh:mm]\" + System.lineSeparator() + \"Add /a followed by \"","lastModifiedDate":"2021-10-24"},{"lineNumber":8,"author":{"gitId":"arvejw"},"content":"                + \"[activity_name]:[distance] \"","lastModifiedDate":"2021-10-24"},{"lineNumber":9,"author":{"gitId":"arvejw"},"content":"                + \"or [activity_name]:[sets]x[reps] to schedule a more detailed workout!\";","lastModifiedDate":"2021-10-24"},{"lineNumber":10,"author":{"gitId":"arvejw"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":11,"author":{"gitId":"arvejw"},"content":"}","lastModifiedDate":"2021-10-24"}],"authorContributionMap":{"arvejw":11}},{"path":"src/main/java/seedu/duke/exceptions/schedule/UnnecessaryQuantifierException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"arvejw"},"content":"package seedu.duke.exceptions.schedule;","lastModifiedDate":"2021-11-04"},{"lineNumber":2,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":3,"author":{"gitId":"arvejw"},"content":"public class UnnecessaryQuantifierException extends ScheduleException {","lastModifiedDate":"2021-11-04"},{"lineNumber":4,"author":{"gitId":"arvejw"},"content":"    @Override","lastModifiedDate":"2021-11-04"},{"lineNumber":5,"author":{"gitId":"arvejw"},"content":"    public String getMessage() {","lastModifiedDate":"2021-11-04"},{"lineNumber":6,"author":{"gitId":"arvejw"},"content":"        return \"Unnecessary activity quantifier splitter \\\"x\\\" detected.\" + System.lineSeparator()","lastModifiedDate":"2021-11-04"},{"lineNumber":7,"author":{"gitId":"arvejw"},"content":"                + \"Please enter [activity name]:[distance in metres] for distance based workout activities if your\"","lastModifiedDate":"2021-11-05"},{"lineNumber":8,"author":{"gitId":"arvejw"},"content":"                + System.lineSeparator() + \"activity name is either running/swimming/cycling.\"","lastModifiedDate":"2021-11-05"},{"lineNumber":9,"author":{"gitId":"arvejw"},"content":"                + System.lineSeparator() + \"E.g. running:8000\";","lastModifiedDate":"2021-11-05"},{"lineNumber":10,"author":{"gitId":"arvejw"},"content":"    }","lastModifiedDate":"2021-11-04"},{"lineNumber":11,"author":{"gitId":"arvejw"},"content":"}","lastModifiedDate":"2021-11-04"}],"authorContributionMap":{"arvejw":11}},{"path":"src/main/java/seedu/duke/exceptions/weight/AddWeightException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"teoziyiivy"},"content":"package seedu.duke.exceptions.weight;","lastModifiedDate":"2021-10-26"},{"lineNumber":2,"author":{"gitId":"teoziyiivy"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":3,"author":{"gitId":"teoziyiivy"},"content":"import seedu.duke.ClickfitMessages;","lastModifiedDate":"2021-10-26"},{"lineNumber":4,"author":{"gitId":"teoziyiivy"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":5,"author":{"gitId":"teoziyiivy"},"content":"public class AddWeightException extends WeightException {","lastModifiedDate":"2021-10-26"},{"lineNumber":6,"author":{"gitId":"teoziyiivy"},"content":"    @Override","lastModifiedDate":"2021-10-26"},{"lineNumber":7,"author":{"gitId":"teoziyiivy"},"content":"    public String getMessage() {","lastModifiedDate":"2021-10-26"},{"lineNumber":8,"author":{"gitId":"teoziyiivy"},"content":"        return ClickfitMessages.WEIGHT_ADD_FORMAT_ERROR;","lastModifiedDate":"2021-10-26"},{"lineNumber":9,"author":{"gitId":"teoziyiivy"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":10,"author":{"gitId":"teoziyiivy"},"content":"}","lastModifiedDate":"2021-10-26"}],"authorContributionMap":{"teoziyiivy":10}},{"path":"src/main/java/seedu/duke/exceptions/weight/DeleteWeightException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"teoziyiivy"},"content":"package seedu.duke.exceptions.weight;","lastModifiedDate":"2021-10-26"},{"lineNumber":2,"author":{"gitId":"teoziyiivy"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":3,"author":{"gitId":"teoziyiivy"},"content":"import seedu.duke.ClickfitMessages;","lastModifiedDate":"2021-10-26"},{"lineNumber":4,"author":{"gitId":"teoziyiivy"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":5,"author":{"gitId":"teoziyiivy"},"content":"public class DeleteWeightException extends WeightException {","lastModifiedDate":"2021-10-26"},{"lineNumber":6,"author":{"gitId":"teoziyiivy"},"content":"    @Override","lastModifiedDate":"2021-10-26"},{"lineNumber":7,"author":{"gitId":"teoziyiivy"},"content":"    public String getMessage() {","lastModifiedDate":"2021-10-26"},{"lineNumber":8,"author":{"gitId":"teoziyiivy"},"content":"        return ClickfitMessages.WEIGHT_DELETE_FORMAT_ERROR;","lastModifiedDate":"2021-10-26"},{"lineNumber":9,"author":{"gitId":"teoziyiivy"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":10,"author":{"gitId":"teoziyiivy"},"content":"}","lastModifiedDate":"2021-10-26"}],"authorContributionMap":{"teoziyiivy":10}},{"path":"src/main/java/seedu/duke/exceptions/weight/DeleteWeightIndexException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"teoziyiivy"},"content":"package seedu.duke.exceptions.weight;","lastModifiedDate":"2021-10-26"},{"lineNumber":2,"author":{"gitId":"teoziyiivy"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":3,"author":{"gitId":"teoziyiivy"},"content":"import seedu.duke.ClickfitMessages;","lastModifiedDate":"2021-10-26"},{"lineNumber":4,"author":{"gitId":"teoziyiivy"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":5,"author":{"gitId":"teoziyiivy"},"content":"public class DeleteWeightIndexException extends WeightException {","lastModifiedDate":"2021-10-26"},{"lineNumber":6,"author":{"gitId":"teoziyiivy"},"content":"    @Override","lastModifiedDate":"2021-10-26"},{"lineNumber":7,"author":{"gitId":"teoziyiivy"},"content":"    public String getMessage() {","lastModifiedDate":"2021-10-26"},{"lineNumber":8,"author":{"gitId":"teoziyiivy"},"content":"        return ClickfitMessages.WEIGHT_DELETE_INDEX_ERROR;","lastModifiedDate":"2021-10-26"},{"lineNumber":9,"author":{"gitId":"teoziyiivy"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":10,"author":{"gitId":"teoziyiivy"},"content":"}","lastModifiedDate":"2021-10-26"}],"authorContributionMap":{"teoziyiivy":10}},{"path":"src/main/java/seedu/duke/exceptions/weight/FutureWeightException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VishalJeyaram"},"content":"package seedu.duke.exceptions.weight;","lastModifiedDate":"2021-11-04"},{"lineNumber":2,"author":{"gitId":"VishalJeyaram"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":3,"author":{"gitId":"VishalJeyaram"},"content":"import seedu.duke.ClickfitMessages;","lastModifiedDate":"2021-11-04"},{"lineNumber":4,"author":{"gitId":"VishalJeyaram"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":5,"author":{"gitId":"VishalJeyaram"},"content":"public class FutureWeightException extends WeightException {","lastModifiedDate":"2021-11-04"},{"lineNumber":6,"author":{"gitId":"VishalJeyaram"},"content":"    @Override","lastModifiedDate":"2021-11-04"},{"lineNumber":7,"author":{"gitId":"VishalJeyaram"},"content":"    public String getMessage() {","lastModifiedDate":"2021-11-04"},{"lineNumber":8,"author":{"gitId":"VishalJeyaram"},"content":"        return \"Please input a date before or equal to today\u0027s date!\";","lastModifiedDate":"2021-11-04"},{"lineNumber":9,"author":{"gitId":"VishalJeyaram"},"content":"    }","lastModifiedDate":"2021-11-04"},{"lineNumber":10,"author":{"gitId":"VishalJeyaram"},"content":"}","lastModifiedDate":"2021-11-04"}],"authorContributionMap":{"VishalJeyaram":10}},{"path":"src/main/java/seedu/duke/exceptions/weight/NoWeightsException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"teoziyiivy"},"content":"package seedu.duke.exceptions.weight;","lastModifiedDate":"2021-10-26"},{"lineNumber":2,"author":{"gitId":"teoziyiivy"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":3,"author":{"gitId":"teoziyiivy"},"content":"import seedu.duke.ClickfitMessages;","lastModifiedDate":"2021-10-26"},{"lineNumber":4,"author":{"gitId":"teoziyiivy"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":5,"author":{"gitId":"teoziyiivy"},"content":"public class NoWeightsException extends WeightException {","lastModifiedDate":"2021-10-26"},{"lineNumber":6,"author":{"gitId":"teoziyiivy"},"content":"    @Override","lastModifiedDate":"2021-10-26"},{"lineNumber":7,"author":{"gitId":"teoziyiivy"},"content":"    public String getMessage() {","lastModifiedDate":"2021-10-26"},{"lineNumber":8,"author":{"gitId":"teoziyiivy"},"content":"        return ClickfitMessages.WEIGHT_EMPTY_ERROR;","lastModifiedDate":"2021-10-26"},{"lineNumber":9,"author":{"gitId":"teoziyiivy"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":10,"author":{"gitId":"teoziyiivy"},"content":"}","lastModifiedDate":"2021-10-26"}],"authorContributionMap":{"teoziyiivy":10}},{"path":"src/main/java/seedu/duke/exceptions/weight/WeightException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"teoziyiivy"},"content":"package seedu.duke.exceptions.weight;","lastModifiedDate":"2021-10-26"},{"lineNumber":2,"author":{"gitId":"teoziyiivy"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":3,"author":{"gitId":"teoziyiivy"},"content":"public class WeightException extends Exception {","lastModifiedDate":"2021-10-26"},{"lineNumber":4,"author":{"gitId":"teoziyiivy"},"content":"    @Override","lastModifiedDate":"2021-10-26"},{"lineNumber":5,"author":{"gitId":"teoziyiivy"},"content":"    public String getMessage() {","lastModifiedDate":"2021-10-26"},{"lineNumber":6,"author":{"gitId":"VishalJeyaram"},"content":"        return \"An unknown error has occurred in Weight Tracker\";","lastModifiedDate":"2021-10-28"},{"lineNumber":7,"author":{"gitId":"teoziyiivy"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":8,"author":{"gitId":"teoziyiivy"},"content":"}","lastModifiedDate":"2021-10-26"}],"authorContributionMap":{"teoziyiivy":7,"VishalJeyaram":1}},{"path":"src/main/java/seedu/duke/exceptions/workout/DeleteWorkoutException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"arvejw"},"content":"package seedu.duke.exceptions.workout;","lastModifiedDate":"2021-10-24"},{"lineNumber":2,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":3,"author":{"gitId":"arvejw"},"content":"public class DeleteWorkoutException extends WorkoutException {","lastModifiedDate":"2021-10-24"},{"lineNumber":4,"author":{"gitId":"arvejw"},"content":"    @Override","lastModifiedDate":"2021-10-24"},{"lineNumber":5,"author":{"gitId":"arvejw"},"content":"    public String getMessage() {","lastModifiedDate":"2021-10-24"},{"lineNumber":6,"author":{"gitId":"arvejw"},"content":"        return \"Failed to delete that workout! Please enter an Integer within range.\";","lastModifiedDate":"2021-10-24"},{"lineNumber":7,"author":{"gitId":"arvejw"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":8,"author":{"gitId":"arvejw"},"content":"}","lastModifiedDate":"2021-10-24"}],"authorContributionMap":{"arvejw":8}},{"path":"src/main/java/seedu/duke/exceptions/workout/DuplicateWorkoutException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"arvejw"},"content":"package seedu.duke.exceptions.workout;","lastModifiedDate":"2021-10-31"},{"lineNumber":2,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":3,"author":{"gitId":"arvejw"},"content":"public class DuplicateWorkoutException extends WorkoutException {","lastModifiedDate":"2021-10-31"},{"lineNumber":4,"author":{"gitId":"arvejw"},"content":"    @Override","lastModifiedDate":"2021-10-31"},{"lineNumber":5,"author":{"gitId":"arvejw"},"content":"    public String getMessage() {","lastModifiedDate":"2021-10-31"},{"lineNumber":6,"author":{"gitId":"arvejw"},"content":"        return \"Failed to add that workout. \" + System.lineSeparator()","lastModifiedDate":"2021-10-31"},{"lineNumber":7,"author":{"gitId":"arvejw"},"content":"                + \"A duplicate workout with the same arguments is already in your list.\";","lastModifiedDate":"2021-10-31"},{"lineNumber":8,"author":{"gitId":"arvejw"},"content":"    }","lastModifiedDate":"2021-10-31"},{"lineNumber":9,"author":{"gitId":"arvejw"},"content":"}","lastModifiedDate":"2021-10-31"}],"authorContributionMap":{"arvejw":9}},{"path":"src/main/java/seedu/duke/exceptions/workout/MissingWorkoutCalorieSeparatorException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"arvejw"},"content":"package seedu.duke.exceptions.workout;","lastModifiedDate":"2021-10-24"},{"lineNumber":2,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":3,"author":{"gitId":"arvejw"},"content":"public class MissingWorkoutCalorieSeparatorException extends WorkoutException {","lastModifiedDate":"2021-10-24"},{"lineNumber":4,"author":{"gitId":"arvejw"},"content":"    @Override","lastModifiedDate":"2021-10-24"},{"lineNumber":5,"author":{"gitId":"arvejw"},"content":"    public String getMessage() {","lastModifiedDate":"2021-10-24"},{"lineNumber":6,"author":{"gitId":"arvejw"},"content":"        return \"CLI.ckFit is having difficulties finding the calorie separator /c\" + System.lineSeparator()","lastModifiedDate":"2021-10-31"},{"lineNumber":7,"author":{"gitId":"arvejw"},"content":"                + \"Please minimally have the format: add workout [workout_description] /c [calories]\"","lastModifiedDate":"2021-10-31"},{"lineNumber":8,"author":{"gitId":"arvejw"},"content":"                + System.lineSeparator() + \"Do remember to put spaces between your separators!\";","lastModifiedDate":"2021-10-31"},{"lineNumber":9,"author":{"gitId":"arvejw"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":10,"author":{"gitId":"arvejw"},"content":"}","lastModifiedDate":"2021-10-24"}],"authorContributionMap":{"arvejw":10}},{"path":"src/main/java/seedu/duke/exceptions/workout/MissingWorkoutDescriptionException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"arvejw"},"content":"package seedu.duke.exceptions.workout;","lastModifiedDate":"2021-10-24"},{"lineNumber":2,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":3,"author":{"gitId":"arvejw"},"content":"public class MissingWorkoutDescriptionException extends WorkoutException {","lastModifiedDate":"2021-10-24"},{"lineNumber":4,"author":{"gitId":"arvejw"},"content":"    @Override","lastModifiedDate":"2021-10-24"},{"lineNumber":5,"author":{"gitId":"arvejw"},"content":"    public String getMessage() {","lastModifiedDate":"2021-10-24"},{"lineNumber":6,"author":{"gitId":"arvejw"},"content":"        return \"I am sorry... it appears the description is missing.\" + System.lineSeparator()","lastModifiedDate":"2021-10-24"},{"lineNumber":7,"author":{"gitId":"arvejw"},"content":"                + \"Please enter a workout description!\";","lastModifiedDate":"2021-10-24"},{"lineNumber":8,"author":{"gitId":"arvejw"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":9,"author":{"gitId":"arvejw"},"content":"}","lastModifiedDate":"2021-10-24"}],"authorContributionMap":{"arvejw":9}},{"path":"src/main/java/seedu/duke/exceptions/workout/NegativeWorkoutCalorieException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"arvejw"},"content":"package seedu.duke.exceptions.workout;","lastModifiedDate":"2021-10-24"},{"lineNumber":2,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":3,"author":{"gitId":"arvejw"},"content":"public class NegativeWorkoutCalorieException extends WorkoutException {","lastModifiedDate":"2021-10-24"},{"lineNumber":4,"author":{"gitId":"arvejw"},"content":"    @Override","lastModifiedDate":"2021-10-24"},{"lineNumber":5,"author":{"gitId":"arvejw"},"content":"    public String getMessage() {","lastModifiedDate":"2021-10-24"},{"lineNumber":6,"author":{"gitId":"arvejw"},"content":"        return \"Negative calories detected... Please enter a positive integer for your calories burned\";","lastModifiedDate":"2021-10-24"},{"lineNumber":7,"author":{"gitId":"arvejw"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":8,"author":{"gitId":"arvejw"},"content":"}","lastModifiedDate":"2021-10-24"}],"authorContributionMap":{"arvejw":8}},{"path":"src/main/java/seedu/duke/exceptions/workout/NoWorkoutIndexException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"arvejw"},"content":"package seedu.duke.exceptions.workout;","lastModifiedDate":"2021-10-28"},{"lineNumber":2,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":3,"author":{"gitId":"arvejw"},"content":"public class NoWorkoutIndexException extends WorkoutException {","lastModifiedDate":"2021-10-28"},{"lineNumber":4,"author":{"gitId":"arvejw"},"content":"    @Override","lastModifiedDate":"2021-10-28"},{"lineNumber":5,"author":{"gitId":"arvejw"},"content":"    public String getMessage() {","lastModifiedDate":"2021-10-28"},{"lineNumber":6,"author":{"gitId":"arvejw"},"content":"        return \"Please enter the workout index in the format: delete workout [index]\";","lastModifiedDate":"2021-10-28"},{"lineNumber":7,"author":{"gitId":"arvejw"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":8,"author":{"gitId":"arvejw"},"content":"}","lastModifiedDate":"2021-10-28"}],"authorContributionMap":{"arvejw":8}},{"path":"src/main/java/seedu/duke/exceptions/workout/WorkoutException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"arvejw"},"content":"package seedu.duke.exceptions.workout;","lastModifiedDate":"2021-10-24"},{"lineNumber":2,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":3,"author":{"gitId":"arvejw"},"content":"public class WorkoutException extends Exception {","lastModifiedDate":"2021-10-24"},{"lineNumber":4,"author":{"gitId":"arvejw"},"content":"    @Override","lastModifiedDate":"2021-10-24"},{"lineNumber":5,"author":{"gitId":"arvejw"},"content":"    public String getMessage() {","lastModifiedDate":"2021-10-24"},{"lineNumber":6,"author":{"gitId":"arvejw"},"content":"        return \"An unknown error has occurred in WorkoutTracker\";","lastModifiedDate":"2021-10-24"},{"lineNumber":7,"author":{"gitId":"arvejw"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":8,"author":{"gitId":"arvejw"},"content":"}","lastModifiedDate":"2021-10-24"}],"authorContributionMap":{"arvejw":8}},{"path":"src/main/java/seedu/duke/exceptions/workout/WorkoutNullArgumentException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"arvejw"},"content":"package seedu.duke.exceptions.workout;","lastModifiedDate":"2021-10-24"},{"lineNumber":2,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":3,"author":{"gitId":"arvejw"},"content":"public class WorkoutNullArgumentException extends WorkoutException {","lastModifiedDate":"2021-10-24"},{"lineNumber":4,"author":{"gitId":"arvejw"},"content":"    public String getMessage() {","lastModifiedDate":"2021-10-24"},{"lineNumber":5,"author":{"gitId":"arvejw"},"content":"        return \"Please enter arguments in the format: \"","lastModifiedDate":"2021-10-24"},{"lineNumber":6,"author":{"gitId":"arvejw"},"content":"                + \"add workout [workout_description] /c [calories] /d [date] /t [time]\"","lastModifiedDate":"2021-10-24"},{"lineNumber":7,"author":{"gitId":"arvejw"},"content":"                + System.lineSeparator() + \"If [date] and [time] not specified, \"","lastModifiedDate":"2021-10-24"},{"lineNumber":8,"author":{"gitId":"arvejw"},"content":"                + \"the system\u0027s current date and time will be taken instead.\";","lastModifiedDate":"2021-10-24"},{"lineNumber":9,"author":{"gitId":"arvejw"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":10,"author":{"gitId":"arvejw"},"content":"}","lastModifiedDate":"2021-10-24"}],"authorContributionMap":{"arvejw":10}},{"path":"src/main/java/seedu/duke/schedule/ScheduleTracker.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"arvejw"},"content":"package seedu.duke.schedule;","lastModifiedDate":"2021-10-22"},{"lineNumber":2,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":3,"author":{"gitId":"arvejw"},"content":"import seedu.duke.ClickfitMessages;","lastModifiedDate":"2021-10-21"},{"lineNumber":4,"author":{"gitId":"arvejw"},"content":"import seedu.duke.Storage;","lastModifiedDate":"2021-10-20"},{"lineNumber":5,"author":{"gitId":"arvejw"},"content":"import seedu.duke.Parser;","lastModifiedDate":"2021-10-11"},{"lineNumber":6,"author":{"gitId":"arvejw"},"content":"import seedu.duke.exceptions.schedule.DuplicateRescheduledWorkoutException;","lastModifiedDate":"2021-11-06"},{"lineNumber":7,"author":{"gitId":"arvejw"},"content":"import seedu.duke.exceptions.schedule.DuplicateScheduledWorkoutException;","lastModifiedDate":"2021-10-31"},{"lineNumber":8,"author":{"gitId":"arvejw"},"content":"import seedu.duke.exceptions.schedule.InvalidActivityFormatException;","lastModifiedDate":"2021-10-24"},{"lineNumber":9,"author":{"gitId":"arvejw"},"content":"import seedu.duke.exceptions.schedule.DeleteScheduleException;","lastModifiedDate":"2021-10-24"},{"lineNumber":10,"author":{"gitId":"arvejw"},"content":"import seedu.duke.exceptions.schedule.MissingScheduleDescriptionException;","lastModifiedDate":"2021-10-24"},{"lineNumber":11,"author":{"gitId":"arvejw"},"content":"import seedu.duke.exceptions.schedule.MissingScheduleSeparatorException;","lastModifiedDate":"2021-10-24"},{"lineNumber":12,"author":{"gitId":"arvejw"},"content":"import seedu.duke.exceptions.schedule.NoScheduleIndexException;","lastModifiedDate":"2021-10-28"},{"lineNumber":13,"author":{"gitId":"arvejw"},"content":"import seedu.duke.exceptions.schedule.ScheduleException;","lastModifiedDate":"2021-10-24"},{"lineNumber":14,"author":{"gitId":"arvejw"},"content":"import seedu.duke.exceptions.schedule.ScheduleNullArgumentException;","lastModifiedDate":"2021-10-24"},{"lineNumber":15,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":16,"author":{"gitId":"arvejw"},"content":"import java.io.File;","lastModifiedDate":"2021-10-20"},{"lineNumber":17,"author":{"gitId":"arvejw"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2021-10-20"},{"lineNumber":18,"author":{"gitId":"arvejw"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-10-15"},{"lineNumber":19,"author":{"gitId":"arvejw"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-10-15"},{"lineNumber":20,"author":{"gitId":"arvejw"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-10-11"},{"lineNumber":21,"author":{"gitId":"arvejw"},"content":"import java.time.temporal.ChronoUnit;","lastModifiedDate":"2021-10-15"},{"lineNumber":22,"author":{"gitId":"arvejw"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-11"},{"lineNumber":23,"author":{"gitId":"arvejw"},"content":"import java.util.Comparator;","lastModifiedDate":"2021-10-15"},{"lineNumber":24,"author":{"gitId":"arvejw"},"content":"import java.util.Map;","lastModifiedDate":"2021-10-20"},{"lineNumber":25,"author":{"gitId":"arvejw"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-10-20"},{"lineNumber":26,"author":{"gitId":"arvejw"},"content":"import java.util.logging.Level;","lastModifiedDate":"2021-10-12"},{"lineNumber":27,"author":{"gitId":"arvejw"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-10-13"},{"lineNumber":28,"author":{"gitId":"arvejw"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2021-10-20"},{"lineNumber":29,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":30,"author":{"gitId":"arvejw"},"content":"//@@author arvejw","lastModifiedDate":"2021-10-22"},{"lineNumber":31,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":32,"author":{"gitId":"arvejw"},"content":"/**","lastModifiedDate":"2021-10-31"},{"lineNumber":33,"author":{"gitId":"arvejw"},"content":" * Manages the tracking of scheduled workouts and various other operations such as adding new scheduled workouts and","lastModifiedDate":"2021-10-31"},{"lineNumber":34,"author":{"gitId":"arvejw"},"content":" * deleting them.","lastModifiedDate":"2021-10-31"},{"lineNumber":35,"author":{"gitId":"arvejw"},"content":" */","lastModifiedDate":"2021-10-31"},{"lineNumber":36,"author":{"gitId":"arvejw"},"content":"public class ScheduleTracker {","lastModifiedDate":"2021-10-11"},{"lineNumber":37,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":38,"author":{"gitId":"arvejw"},"content":"    private ArrayList\u003cScheduledWorkout\u003e scheduledWorkouts;","lastModifiedDate":"2021-10-18"},{"lineNumber":39,"author":{"gitId":"arvejw"},"content":"    private static final int LOWER_BOUND_INDEX_NON_EMPTY_LIST_ONES_INDEXING \u003d 1;","lastModifiedDate":"2021-10-11"},{"lineNumber":40,"author":{"gitId":"arvejw"},"content":"    private static final int FIRST_INDEX_IN_LIST \u003d 0;","lastModifiedDate":"2021-10-15"},{"lineNumber":41,"author":{"gitId":"arvejw"},"content":"    private static final int DAYS_IN_A_WEEK \u003d 7;","lastModifiedDate":"2021-10-15"},{"lineNumber":42,"author":{"gitId":"arvejw"},"content":"    private static final String INPUT_ALL \u003d \"all\";","lastModifiedDate":"2021-10-20"},{"lineNumber":43,"author":{"gitId":"arvejw"},"content":"    public static final Logger SCHEDULE_TRACKER_LOGGER \u003d Logger.getLogger(\"ScheduleTrackerLogger\");","lastModifiedDate":"2021-10-13"},{"lineNumber":44,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":45,"author":{"gitId":"arvejw"},"content":"    public ScheduleTracker() {","lastModifiedDate":"2021-10-11"},{"lineNumber":46,"author":{"gitId":"arvejw"},"content":"        scheduledWorkouts \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-18"},{"lineNumber":47,"author":{"gitId":"arvejw"},"content":"        SCHEDULE_TRACKER_LOGGER.setLevel(Level.SEVERE);","lastModifiedDate":"2021-10-13"},{"lineNumber":48,"author":{"gitId":"arvejw"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":49,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":50,"author":{"gitId":"arvejw"},"content":"    /**","lastModifiedDate":"2021-10-31"},{"lineNumber":51,"author":{"gitId":"arvejw"},"content":"     * Returns the private attribute scheduledWorkouts.","lastModifiedDate":"2021-10-31"},{"lineNumber":52,"author":{"gitId":"arvejw"},"content":"     *","lastModifiedDate":"2021-10-31"},{"lineNumber":53,"author":{"gitId":"arvejw"},"content":"     * @return Array List of scheduled workouts.","lastModifiedDate":"2021-11-03"},{"lineNumber":54,"author":{"gitId":"arvejw"},"content":"     */","lastModifiedDate":"2021-10-31"},{"lineNumber":55,"author":{"gitId":"arvejw"},"content":"    public ArrayList\u003cScheduledWorkout\u003e getScheduledWorkouts() {","lastModifiedDate":"2021-10-22"},{"lineNumber":56,"author":{"gitId":"arvejw"},"content":"        return scheduledWorkouts;","lastModifiedDate":"2021-10-22"},{"lineNumber":57,"author":{"gitId":"arvejw"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":58,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":59,"author":{"gitId":"arvejw"},"content":"    /**","lastModifiedDate":"2021-10-31"},{"lineNumber":60,"author":{"gitId":"arvejw"},"content":"     * Loads the schedule data from the data file.","lastModifiedDate":"2021-10-31"},{"lineNumber":61,"author":{"gitId":"arvejw"},"content":"     */","lastModifiedDate":"2021-10-31"},{"lineNumber":62,"author":{"gitId":"arvejw"},"content":"    public void loadScheduleData() {","lastModifiedDate":"2021-10-22"},{"lineNumber":63,"author":{"gitId":"arvejw"},"content":"        File dataFile \u003d new File(Storage.SCHEDULE_FILE_PATH);","lastModifiedDate":"2021-10-24"},{"lineNumber":64,"author":{"gitId":"arvejw"},"content":"        if (dataFile.length() \u003d\u003d 0) {","lastModifiedDate":"2021-10-20"},{"lineNumber":65,"author":{"gitId":"arvejw"},"content":"            return;","lastModifiedDate":"2021-10-20"},{"lineNumber":66,"author":{"gitId":"arvejw"},"content":"        }","lastModifiedDate":"2021-10-20"},{"lineNumber":67,"author":{"gitId":"arvejw"},"content":"        Scanner fileScanner;","lastModifiedDate":"2021-10-22"},{"lineNumber":68,"author":{"gitId":"arvejw"},"content":"        try {","lastModifiedDate":"2021-10-22"},{"lineNumber":69,"author":{"gitId":"arvejw"},"content":"            fileScanner \u003d new Scanner(dataFile);","lastModifiedDate":"2021-10-22"},{"lineNumber":70,"author":{"gitId":"arvejw"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2021-10-22"},{"lineNumber":71,"author":{"gitId":"arvejw"},"content":"            System.out.println(ClickfitMessages.SCHEDULE_DATA_NOT_FOUND);","lastModifiedDate":"2021-10-22"},{"lineNumber":72,"author":{"gitId":"arvejw"},"content":"            return;","lastModifiedDate":"2021-10-22"},{"lineNumber":73,"author":{"gitId":"arvejw"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":74,"author":{"gitId":"arvejw"},"content":"        String currentLine \u003d Parser.EMPTY_STRING;","lastModifiedDate":"2021-11-05"},{"lineNumber":75,"author":{"gitId":"arvejw"},"content":"        boolean isDataLoadCorrectly \u003d true;","lastModifiedDate":"2021-10-20"},{"lineNumber":76,"author":{"gitId":"arvejw"},"content":"        while (fileScanner.hasNext()) {","lastModifiedDate":"2021-10-20"},{"lineNumber":77,"author":{"gitId":"arvejw"},"content":"            currentLine \u003d fileScanner.nextLine();","lastModifiedDate":"2021-10-20"},{"lineNumber":78,"author":{"gitId":"arvejw"},"content":"            if (currentLine.isEmpty()) {","lastModifiedDate":"2021-10-20"},{"lineNumber":79,"author":{"gitId":"arvejw"},"content":"                continue;","lastModifiedDate":"2021-10-20"},{"lineNumber":80,"author":{"gitId":"arvejw"},"content":"            }","lastModifiedDate":"2021-10-20"},{"lineNumber":81,"author":{"gitId":"arvejw"},"content":"            try {","lastModifiedDate":"2021-10-20"},{"lineNumber":82,"author":{"gitId":"arvejw"},"content":"                addScheduledWorkout(currentLine, true, false);","lastModifiedDate":"2021-10-26"},{"lineNumber":83,"author":{"gitId":"arvejw"},"content":"            } catch (Exception e) {","lastModifiedDate":"2021-11-05"},{"lineNumber":84,"author":{"gitId":"arvejw"},"content":"                isDataLoadCorrectly \u003d false;","lastModifiedDate":"2021-10-20"},{"lineNumber":85,"author":{"gitId":"arvejw"},"content":"            }","lastModifiedDate":"2021-10-20"},{"lineNumber":86,"author":{"gitId":"arvejw"},"content":"        }","lastModifiedDate":"2021-10-20"},{"lineNumber":87,"author":{"gitId":"arvejw"},"content":"        cleanUpScheduleList();","lastModifiedDate":"2021-10-26"},{"lineNumber":88,"author":{"gitId":"arvejw"},"content":"        if (!isDataLoadCorrectly) {","lastModifiedDate":"2021-10-20"},{"lineNumber":89,"author":{"gitId":"arvejw"},"content":"            System.out.println(ClickfitMessages.INCORRECT_LOADING_SCHEDULE_DATA);","lastModifiedDate":"2021-10-22"},{"lineNumber":90,"author":{"gitId":"arvejw"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":91,"author":{"gitId":"arvejw"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":92,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":93,"author":{"gitId":"arvejw"},"content":"    /**","lastModifiedDate":"2021-10-31"},{"lineNumber":94,"author":{"gitId":"arvejw"},"content":"     * Generates the parameters to be used to construct a ScheduledWorkout object.","lastModifiedDate":"2021-10-31"},{"lineNumber":95,"author":{"gitId":"arvejw"},"content":"     * Parameters will be returned as a String[] of size 3. String[0] contains the workout description,","lastModifiedDate":"2021-10-31"},{"lineNumber":96,"author":{"gitId":"arvejw"},"content":"     * String[1] contains the workout date, String[2] contains the workout time.","lastModifiedDate":"2021-10-31"},{"lineNumber":97,"author":{"gitId":"arvejw"},"content":"     *","lastModifiedDate":"2021-10-31"},{"lineNumber":98,"author":{"gitId":"arvejw"},"content":"     * @param inputArguments Arguments input by the user that come after the command word.","lastModifiedDate":"2021-10-31"},{"lineNumber":99,"author":{"gitId":"arvejw"},"content":"     * @return String[] The generated parameters in a String array of size 3.","lastModifiedDate":"2021-11-03"},{"lineNumber":100,"author":{"gitId":"arvejw"},"content":"     * @throws ScheduleException If there are issues generating schedule description.","lastModifiedDate":"2021-11-03"},{"lineNumber":101,"author":{"gitId":"arvejw"},"content":"     */","lastModifiedDate":"2021-10-31"},{"lineNumber":102,"author":{"gitId":"arvejw"},"content":"    public String[] generateScheduledWorkoutParameters(String inputArguments) throws ScheduleException {","lastModifiedDate":"2021-10-24"},{"lineNumber":103,"author":{"gitId":"arvejw"},"content":"        SCHEDULE_TRACKER_LOGGER.log(Level.INFO, \"Starting generation of parameters for scheduled workout.\");","lastModifiedDate":"2021-10-13"},{"lineNumber":104,"author":{"gitId":"arvejw"},"content":"        String workoutDescription \u003d Parser.getScheduleDescription(inputArguments);","lastModifiedDate":"2021-10-11"},{"lineNumber":105,"author":{"gitId":"arvejw"},"content":"        String workoutDate \u003d Parser.getDateNoDateTracker(inputArguments);","lastModifiedDate":"2021-10-20"},{"lineNumber":106,"author":{"gitId":"arvejw"},"content":"        String workoutTime \u003d Parser.getTime(inputArguments);","lastModifiedDate":"2021-10-11"},{"lineNumber":107,"author":{"gitId":"arvejw"},"content":"        String[] generatedParameters \u003d {workoutDescription, workoutDate, workoutTime};","lastModifiedDate":"2021-10-11"},{"lineNumber":108,"author":{"gitId":"arvejw"},"content":"        SCHEDULE_TRACKER_LOGGER.log(Level.INFO, \"Successfully generated parameters for scheduled workout.\");","lastModifiedDate":"2021-10-13"},{"lineNumber":109,"author":{"gitId":"arvejw"},"content":"        return generatedParameters;","lastModifiedDate":"2021-10-11"},{"lineNumber":110,"author":{"gitId":"arvejw"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":111,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":112,"author":{"gitId":"arvejw"},"content":"    /**","lastModifiedDate":"2021-10-31"},{"lineNumber":113,"author":{"gitId":"arvejw"},"content":"     * Adds a scheduled workout to the list of scheduled workouts.","lastModifiedDate":"2021-10-31"},{"lineNumber":114,"author":{"gitId":"arvejw"},"content":"     *","lastModifiedDate":"2021-10-31"},{"lineNumber":115,"author":{"gitId":"arvejw"},"content":"     * @param inputArguments      Arguments input by the user that come after the command word.","lastModifiedDate":"2021-10-31"},{"lineNumber":116,"author":{"gitId":"arvejw"},"content":"     * @param isSquelchAddMessage Flag that determines whether to squelch the message printed to the user","lastModifiedDate":"2021-10-31"},{"lineNumber":117,"author":{"gitId":"arvejw"},"content":"     *                            during successful adding of a scheduled workout. \u003ccode\u003etrue\u003c/code\u003e to squelch,","lastModifiedDate":"2021-10-31"},{"lineNumber":118,"author":{"gitId":"arvejw"},"content":"     *                            \u003ccode\u003efalse\u003c/code\u003e to continue printing the message.","lastModifiedDate":"2021-10-31"},{"lineNumber":119,"author":{"gitId":"arvejw"},"content":"     * @param isCleanUp           Flag that determines whether to clean up the schedule list after successfully","lastModifiedDate":"2021-10-31"},{"lineNumber":120,"author":{"gitId":"arvejw"},"content":"     *                            adding a scheduled workout.","lastModifiedDate":"2021-10-31"},{"lineNumber":121,"author":{"gitId":"arvejw"},"content":"     * @throws ScheduleException If there are issues adding a scheduled workout.","lastModifiedDate":"2021-11-03"},{"lineNumber":122,"author":{"gitId":"arvejw"},"content":"     */","lastModifiedDate":"2021-10-31"},{"lineNumber":123,"author":{"gitId":"arvejw"},"content":"    public void addScheduledWorkout(String inputArguments, boolean isSquelchAddMessage, boolean isCleanUp)","lastModifiedDate":"2021-10-26"},{"lineNumber":124,"author":{"gitId":"arvejw"},"content":"            throws ScheduleException {","lastModifiedDate":"2021-10-24"},{"lineNumber":125,"author":{"gitId":"arvejw"},"content":"        SCHEDULE_TRACKER_LOGGER.log(Level.INFO, \"Starting to try and add scheduled workout.\");","lastModifiedDate":"2021-10-13"},{"lineNumber":126,"author":{"gitId":"arvejw"},"content":"        nullArgumentCheck(inputArguments);","lastModifiedDate":"2021-10-11"},{"lineNumber":127,"author":{"gitId":"arvejw"},"content":"        assert inputArguments !\u003d null : \"Exception should already been thrown if argument is null\";","lastModifiedDate":"2021-10-14"},{"lineNumber":128,"author":{"gitId":"arvejw"},"content":"        missingDescriptionCheck(inputArguments);","lastModifiedDate":"2021-10-14"},{"lineNumber":129,"author":{"gitId":"arvejw"},"content":"        scheduledWorkoutSeparatorCheck(inputArguments);","lastModifiedDate":"2021-10-14"},{"lineNumber":130,"author":{"gitId":"arvejw"},"content":"        // index 0: description | index 1: date | index 2: time","lastModifiedDate":"2021-10-11"},{"lineNumber":131,"author":{"gitId":"arvejw"},"content":"        String[] generatedParameters \u003d generateScheduledWorkoutParameters(inputArguments);","lastModifiedDate":"2021-10-11"},{"lineNumber":132,"author":{"gitId":"arvejw"},"content":"        assert generatedParameters.length \u003d\u003d 3 : \"Exactly 3 parameters should be generated\";","lastModifiedDate":"2021-10-12"},{"lineNumber":133,"author":{"gitId":"arvejw"},"content":"        String workoutDescription \u003d generatedParameters[0];","lastModifiedDate":"2021-10-11"},{"lineNumber":134,"author":{"gitId":"arvejw"},"content":"        String workoutDate \u003d generatedParameters[1];","lastModifiedDate":"2021-10-11"},{"lineNumber":135,"author":{"gitId":"arvejw"},"content":"        String workoutTime \u003d generatedParameters[2];","lastModifiedDate":"2021-10-11"},{"lineNumber":136,"author":{"gitId":"arvejw"},"content":"        Map\u003cString, ArrayList\u003cInteger\u003e\u003e activityMap;","lastModifiedDate":"2021-10-21"},{"lineNumber":137,"author":{"gitId":"arvejw"},"content":"        try {","lastModifiedDate":"2021-10-21"},{"lineNumber":138,"author":{"gitId":"arvejw"},"content":"            activityMap \u003d Parser.getActivities(inputArguments);","lastModifiedDate":"2021-10-21"},{"lineNumber":139,"author":{"gitId":"arvejw"},"content":"        } catch (NumberFormatException nfe) {","lastModifiedDate":"2021-10-21"},{"lineNumber":140,"author":{"gitId":"arvejw"},"content":"            throw new InvalidActivityFormatException();","lastModifiedDate":"2021-10-22"},{"lineNumber":141,"author":{"gitId":"arvejw"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":142,"author":{"gitId":"arvejw"},"content":"        boolean isRecurringWorkout \u003d Parser.isRecurringWorkout(inputArguments);","lastModifiedDate":"2021-10-15"},{"lineNumber":143,"author":{"gitId":"arvejw"},"content":"        ScheduledWorkout workoutToAdd \u003d new ScheduledWorkout(","lastModifiedDate":"2021-11-03"},{"lineNumber":144,"author":{"gitId":"arvejw"},"content":"                workoutDescription, workoutDate, workoutTime, activityMap, isRecurringWorkout);","lastModifiedDate":"2021-10-31"},{"lineNumber":145,"author":{"gitId":"arvejw"},"content":"        duplicateScheduledWorkoutCheck(workoutToAdd);","lastModifiedDate":"2021-11-03"},{"lineNumber":146,"author":{"gitId":"arvejw"},"content":"        scheduledWorkouts.add(workoutToAdd);","lastModifiedDate":"2021-11-03"},{"lineNumber":147,"author":{"gitId":"arvejw"},"content":"        if (!isSquelchAddMessage) {","lastModifiedDate":"2021-10-20"},{"lineNumber":148,"author":{"gitId":"arvejw"},"content":"            System.out.println(ClickfitMessages.getAddScheduleSuccessMessage(workoutToAdd));","lastModifiedDate":"2021-11-03"},{"lineNumber":149,"author":{"gitId":"arvejw"},"content":"        }","lastModifiedDate":"2021-10-20"},{"lineNumber":150,"author":{"gitId":"arvejw"},"content":"        if (isCleanUp) {","lastModifiedDate":"2021-10-26"},{"lineNumber":151,"author":{"gitId":"arvejw"},"content":"            cleanUpScheduleList();","lastModifiedDate":"2021-10-15"},{"lineNumber":152,"author":{"gitId":"arvejw"},"content":"        }","lastModifiedDate":"2021-10-26"},{"lineNumber":153,"author":{"gitId":"arvejw"},"content":"        SCHEDULE_TRACKER_LOGGER.log(Level.INFO, \"Successfully added workout to schedule.\");","lastModifiedDate":"2021-10-13"},{"lineNumber":154,"author":{"gitId":"arvejw"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":155,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":156,"author":{"gitId":"arvejw"},"content":"    /**","lastModifiedDate":"2021-10-31"},{"lineNumber":157,"author":{"gitId":"arvejw"},"content":"     * Checks whether the scheduled workout index is within range.","lastModifiedDate":"2021-10-31"},{"lineNumber":158,"author":{"gitId":"arvejw"},"content":"     * This check is done under the assumption that ones-indexing is used.","lastModifiedDate":"2021-10-31"},{"lineNumber":159,"author":{"gitId":"arvejw"},"content":"     *","lastModifiedDate":"2021-10-31"},{"lineNumber":160,"author":{"gitId":"arvejw"},"content":"     * @param workoutNumber Index of the scheduled workout.","lastModifiedDate":"2021-10-31"},{"lineNumber":161,"author":{"gitId":"arvejw"},"content":"     * @return boolean \u003ccode\u003etrue\u003c/code\u003e if within range, \u003ccode\u003efalse\u003c/code\u003e otherwise.","lastModifiedDate":"2021-11-03"},{"lineNumber":162,"author":{"gitId":"arvejw"},"content":"     */","lastModifiedDate":"2021-10-31"},{"lineNumber":163,"author":{"gitId":"arvejw"},"content":"    public boolean isScheduledWorkoutNumberWithinRange(int workoutNumber) {","lastModifiedDate":"2021-10-11"},{"lineNumber":164,"author":{"gitId":"arvejw"},"content":"        int upperBound \u003d scheduledWorkouts.size();","lastModifiedDate":"2021-10-18"},{"lineNumber":165,"author":{"gitId":"arvejw"},"content":"        int lowerBound \u003d LOWER_BOUND_INDEX_NON_EMPTY_LIST_ONES_INDEXING;","lastModifiedDate":"2021-10-11"},{"lineNumber":166,"author":{"gitId":"arvejw"},"content":"        return (workoutNumber \u003e\u003d lowerBound) \u0026\u0026 (workoutNumber \u003c\u003d upperBound);","lastModifiedDate":"2021-10-11"},{"lineNumber":167,"author":{"gitId":"arvejw"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":168,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":169,"author":{"gitId":"arvejw"},"content":"    /**","lastModifiedDate":"2021-10-31"},{"lineNumber":170,"author":{"gitId":"arvejw"},"content":"     * Deletes a scheduled workout from the list of scheduled workouts.","lastModifiedDate":"2021-10-31"},{"lineNumber":171,"author":{"gitId":"arvejw"},"content":"     *","lastModifiedDate":"2021-10-31"},{"lineNumber":172,"author":{"gitId":"arvejw"},"content":"     * @param inputArguments Arguments input by the user that come after the command word.","lastModifiedDate":"2021-10-31"},{"lineNumber":173,"author":{"gitId":"arvejw"},"content":"     * @throws ScheduleException If there are issues deleting a scheduled workout","lastModifiedDate":"2021-11-03"},{"lineNumber":174,"author":{"gitId":"arvejw"},"content":"     */","lastModifiedDate":"2021-10-31"},{"lineNumber":175,"author":{"gitId":"arvejw"},"content":"    public void deleteScheduledWorkout(String inputArguments) throws ScheduleException {","lastModifiedDate":"2021-10-24"},{"lineNumber":176,"author":{"gitId":"arvejw"},"content":"        SCHEDULE_TRACKER_LOGGER.log(Level.INFO, \"Starting to try and delete scheduled workout.\");","lastModifiedDate":"2021-10-13"},{"lineNumber":177,"author":{"gitId":"arvejw"},"content":"        if (inputArguments \u003d\u003d null) {","lastModifiedDate":"2021-10-28"},{"lineNumber":178,"author":{"gitId":"arvejw"},"content":"            throw new NoScheduleIndexException();","lastModifiedDate":"2021-10-28"},{"lineNumber":179,"author":{"gitId":"arvejw"},"content":"        }","lastModifiedDate":"2021-10-28"},{"lineNumber":180,"author":{"gitId":"arvejw"},"content":"        assert inputArguments !\u003d null : \"Exception should already been thrown if argument is null\";","lastModifiedDate":"2021-10-11"},{"lineNumber":181,"author":{"gitId":"arvejw"},"content":"        if (isScheduledWorkoutListEmpty()) {","lastModifiedDate":"2021-10-26"},{"lineNumber":182,"author":{"gitId":"arvejw"},"content":"            System.out.println(ClickfitMessages.EMPTY_SCHEDULE_LIST_MESSAGE);","lastModifiedDate":"2021-10-26"},{"lineNumber":183,"author":{"gitId":"arvejw"},"content":"            return;","lastModifiedDate":"2021-10-26"},{"lineNumber":184,"author":{"gitId":"arvejw"},"content":"        }","lastModifiedDate":"2021-10-26"},{"lineNumber":185,"author":{"gitId":"arvejw"},"content":"        assert scheduledWorkouts.size() \u003e 0 : \"List should be non empty at this point\";","lastModifiedDate":"2021-10-18"},{"lineNumber":186,"author":{"gitId":"arvejw"},"content":"        int workoutNumber \u003d Parser.parseStringToInteger(inputArguments);","lastModifiedDate":"2021-10-11"},{"lineNumber":187,"author":{"gitId":"arvejw"},"content":"        int workoutIndex \u003d workoutNumber - 1; // 0-indexing","lastModifiedDate":"2021-10-11"},{"lineNumber":188,"author":{"gitId":"arvejw"},"content":"        if (isScheduledWorkoutNumberWithinRange(workoutNumber)) {","lastModifiedDate":"2021-10-11"},{"lineNumber":189,"author":{"gitId":"arvejw"},"content":"            ScheduledWorkout workoutToDelete \u003d scheduledWorkouts.get(workoutIndex);","lastModifiedDate":"2021-10-18"},{"lineNumber":190,"author":{"gitId":"arvejw"},"content":"            System.out.println(ClickfitMessages.getDeleteScheduleSuccessMessage(workoutToDelete));","lastModifiedDate":"2021-11-03"},{"lineNumber":191,"author":{"gitId":"arvejw"},"content":"            scheduledWorkouts.remove(workoutIndex);","lastModifiedDate":"2021-10-18"},{"lineNumber":192,"author":{"gitId":"arvejw"},"content":"            SCHEDULE_TRACKER_LOGGER.log(Level.INFO, \"Successfully deleted scheduled workout.\");","lastModifiedDate":"2021-10-13"},{"lineNumber":193,"author":{"gitId":"arvejw"},"content":"        } else {","lastModifiedDate":"2021-10-11"},{"lineNumber":194,"author":{"gitId":"arvejw"},"content":"            SCHEDULE_TRACKER_LOGGER.log(Level.WARNING, \"Failed to delete scheduled workout.\");","lastModifiedDate":"2021-10-13"},{"lineNumber":195,"author":{"gitId":"arvejw"},"content":"            throw new DeleteScheduleException();","lastModifiedDate":"2021-10-24"},{"lineNumber":196,"author":{"gitId":"arvejw"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":197,"author":{"gitId":"arvejw"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":198,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":199,"author":{"gitId":"arvejw"},"content":"    /**","lastModifiedDate":"2021-10-31"},{"lineNumber":200,"author":{"gitId":"arvejw"},"content":"     * Prints out the list of scheduled workouts.","lastModifiedDate":"2021-10-31"},{"lineNumber":201,"author":{"gitId":"arvejw"},"content":"     * Either a filtered list based off a certain date or the full schedule list can be printed.","lastModifiedDate":"2021-10-31"},{"lineNumber":202,"author":{"gitId":"arvejw"},"content":"     *","lastModifiedDate":"2021-10-31"},{"lineNumber":203,"author":{"gitId":"arvejw"},"content":"     * @param inputArguments Date to use as a filter in the format dd/mm/yyyy.","lastModifiedDate":"2021-10-31"},{"lineNumber":204,"author":{"gitId":"arvejw"},"content":"     *                       If the input is \u003ccode\u003eall\u003c/code\u003e the full list of all scheduled workouts is printed.","lastModifiedDate":"2021-10-31"},{"lineNumber":205,"author":{"gitId":"arvejw"},"content":"     */","lastModifiedDate":"2021-10-31"},{"lineNumber":206,"author":{"gitId":"arvejw"},"content":"    public void listScheduledWorkouts(String inputArguments) {","lastModifiedDate":"2021-10-31"},{"lineNumber":207,"author":{"gitId":"arvejw"},"content":"        cleanUpScheduleList();","lastModifiedDate":"2021-10-15"},{"lineNumber":208,"author":{"gitId":"arvejw"},"content":"        if (inputArguments.equals(INPUT_ALL)) {","lastModifiedDate":"2021-10-22"},{"lineNumber":209,"author":{"gitId":"arvejw"},"content":"            listAllScheduledWorkouts();","lastModifiedDate":"2021-10-20"},{"lineNumber":210,"author":{"gitId":"arvejw"},"content":"        } else {","lastModifiedDate":"2021-10-20"},{"lineNumber":211,"author":{"gitId":"arvejw"},"content":"            listScheduledWorkoutsOnDate(inputArguments);","lastModifiedDate":"2021-10-20"},{"lineNumber":212,"author":{"gitId":"arvejw"},"content":"        }","lastModifiedDate":"2021-10-20"},{"lineNumber":213,"author":{"gitId":"arvejw"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":214,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":215,"author":{"gitId":"arvejw"},"content":"    /**","lastModifiedDate":"2021-10-31"},{"lineNumber":216,"author":{"gitId":"arvejw"},"content":"     * Prints out the full list of all scheduled workouts.","lastModifiedDate":"2021-10-31"},{"lineNumber":217,"author":{"gitId":"arvejw"},"content":"     */","lastModifiedDate":"2021-10-31"},{"lineNumber":218,"author":{"gitId":"arvejw"},"content":"    public void listAllScheduledWorkouts() {","lastModifiedDate":"2021-10-20"},{"lineNumber":219,"author":{"gitId":"arvejw"},"content":"        SCHEDULE_TRACKER_LOGGER.log(Level.INFO, \"Starting to try and list scheduled workouts.\");","lastModifiedDate":"2021-10-20"},{"lineNumber":220,"author":{"gitId":"arvejw"},"content":"        if (isScheduledWorkoutListEmpty()) {","lastModifiedDate":"2021-10-31"},{"lineNumber":221,"author":{"gitId":"arvejw"},"content":"            System.out.println(ClickfitMessages.EMPTY_SCHEDULE_LIST_MESSAGE);","lastModifiedDate":"2021-10-31"},{"lineNumber":222,"author":{"gitId":"arvejw"},"content":"            return;","lastModifiedDate":"2021-10-31"},{"lineNumber":223,"author":{"gitId":"arvejw"},"content":"        }","lastModifiedDate":"2021-10-31"},{"lineNumber":224,"author":{"gitId":"arvejw"},"content":"        System.out.println(ClickfitMessages.FULL_SCHEDULE_LIST_MESSAGE);","lastModifiedDate":"2021-11-03"},{"lineNumber":225,"author":{"gitId":"arvejw"},"content":"        int currentIndex \u003d 1;","lastModifiedDate":"2021-10-11"},{"lineNumber":226,"author":{"gitId":"arvejw"},"content":"        int scheduleCount \u003d 0;","lastModifiedDate":"2021-11-03"},{"lineNumber":227,"author":{"gitId":"arvejw"},"content":"        for (ScheduledWorkout workout : scheduledWorkouts) {","lastModifiedDate":"2021-10-18"},{"lineNumber":228,"author":{"gitId":"arvejw"},"content":"            System.out.println(currentIndex + \". \" + workout.getWorkoutDescription() + workout.isRecurringStatus());","lastModifiedDate":"2021-10-15"},{"lineNumber":229,"author":{"gitId":"arvejw"},"content":"            System.out.println(\"Date: \" + workout.getWorkoutDate());","lastModifiedDate":"2021-10-11"},{"lineNumber":230,"author":{"gitId":"arvejw"},"content":"            System.out.println(\"Time: \" + workout.getWorkoutTime());","lastModifiedDate":"2021-10-20"},{"lineNumber":231,"author":{"gitId":"arvejw"},"content":"            System.out.println(workout.getActivitiesAsStringToPrint());","lastModifiedDate":"2021-10-22"},{"lineNumber":232,"author":{"gitId":"arvejw"},"content":"            currentIndex++;","lastModifiedDate":"2021-10-11"},{"lineNumber":233,"author":{"gitId":"arvejw"},"content":"            scheduleCount++;","lastModifiedDate":"2021-11-03"},{"lineNumber":234,"author":{"gitId":"arvejw"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":235,"author":{"gitId":"arvejw"},"content":"        System.out.println(ClickfitMessages.getTotalScheduledWorkoutMessage(scheduleCount));","lastModifiedDate":"2021-11-03"},{"lineNumber":236,"author":{"gitId":"arvejw"},"content":"        SCHEDULE_TRACKER_LOGGER.log(Level.INFO, \"Successfully listed workouts.\");","lastModifiedDate":"2021-10-13"},{"lineNumber":237,"author":{"gitId":"arvejw"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":238,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":239,"author":{"gitId":"arvejw"},"content":"    /**","lastModifiedDate":"2021-10-31"},{"lineNumber":240,"author":{"gitId":"arvejw"},"content":"     * Prints out a filtered schedule list based off a certain date.","lastModifiedDate":"2021-10-31"},{"lineNumber":241,"author":{"gitId":"arvejw"},"content":"     *","lastModifiedDate":"2021-10-31"},{"lineNumber":242,"author":{"gitId":"arvejw"},"content":"     * @param inputArguments Date to use as a filter in the format dd/mm/yyyy.","lastModifiedDate":"2021-10-31"},{"lineNumber":243,"author":{"gitId":"arvejw"},"content":"     */","lastModifiedDate":"2021-10-31"},{"lineNumber":244,"author":{"gitId":"arvejw"},"content":"    public void listScheduledWorkoutsOnDate(String inputArguments) {","lastModifiedDate":"2021-10-20"},{"lineNumber":245,"author":{"gitId":"arvejw"},"content":"        ArrayList\u003cScheduledWorkout\u003e filteredScheduleList \u003d (ArrayList\u003cScheduledWorkout\u003e) scheduledWorkouts.stream()","lastModifiedDate":"2021-10-20"},{"lineNumber":246,"author":{"gitId":"arvejw"},"content":"                .filter((t) -\u003e t.getWorkoutDate().equals(inputArguments)).collect(Collectors.toList());","lastModifiedDate":"2021-10-20"},{"lineNumber":247,"author":{"gitId":"arvejw"},"content":"        if (filteredScheduleList.isEmpty()) {","lastModifiedDate":"2021-10-20"},{"lineNumber":248,"author":{"gitId":"arvejw"},"content":"            if (inputArguments.equals(Parser.getSystemDate())) {","lastModifiedDate":"2021-10-31"},{"lineNumber":249,"author":{"gitId":"arvejw"},"content":"                System.out.println(ClickfitMessages.EMPTY_SCHEDULE_LIST_TODAY_MESSAGE);","lastModifiedDate":"2021-11-03"},{"lineNumber":250,"author":{"gitId":"arvejw"},"content":"            } else {","lastModifiedDate":"2021-10-31"},{"lineNumber":251,"author":{"gitId":"arvejw"},"content":"                System.out.println(ClickfitMessages.getEmptyScheduleOnDateMessage(inputArguments));","lastModifiedDate":"2021-11-03"},{"lineNumber":252,"author":{"gitId":"arvejw"},"content":"            }","lastModifiedDate":"2021-10-31"},{"lineNumber":253,"author":{"gitId":"arvejw"},"content":"        } else {","lastModifiedDate":"2021-10-20"},{"lineNumber":254,"author":{"gitId":"arvejw"},"content":"            if (inputArguments.equals(Parser.getSystemDate())) {","lastModifiedDate":"2021-10-20"},{"lineNumber":255,"author":{"gitId":"arvejw"},"content":"                System.out.println(ClickfitMessages.WORKOUT_SCHEDULE_TODAY_MESSAGE);","lastModifiedDate":"2021-11-03"},{"lineNumber":256,"author":{"gitId":"arvejw"},"content":"            } else {","lastModifiedDate":"2021-10-20"},{"lineNumber":257,"author":{"gitId":"arvejw"},"content":"                System.out.println(ClickfitMessages.getWorkoutScheduleOnDateMessage(inputArguments));","lastModifiedDate":"2021-11-03"},{"lineNumber":258,"author":{"gitId":"arvejw"},"content":"            }","lastModifiedDate":"2021-10-20"},{"lineNumber":259,"author":{"gitId":"arvejw"},"content":"            int currentIndex \u003d 1;","lastModifiedDate":"2021-10-20"},{"lineNumber":260,"author":{"gitId":"arvejw"},"content":"            int workoutCount \u003d 0;","lastModifiedDate":"2021-10-22"},{"lineNumber":261,"author":{"gitId":"arvejw"},"content":"            for (ScheduledWorkout workout : filteredScheduleList) {","lastModifiedDate":"2021-10-20"},{"lineNumber":262,"author":{"gitId":"arvejw"},"content":"                System.out.println(currentIndex + \". \"","lastModifiedDate":"2021-10-24"},{"lineNumber":263,"author":{"gitId":"arvejw"},"content":"                        + workout.getWorkoutDescription() + workout.isRecurringStatus());","lastModifiedDate":"2021-10-24"},{"lineNumber":264,"author":{"gitId":"arvejw"},"content":"                System.out.println(\"Date: \" + workout.getWorkoutDate());","lastModifiedDate":"2021-10-20"},{"lineNumber":265,"author":{"gitId":"arvejw"},"content":"                System.out.println(\"Time: \" + workout.getWorkoutTime());","lastModifiedDate":"2021-10-20"},{"lineNumber":266,"author":{"gitId":"arvejw"},"content":"                System.out.println(workout.getActivitiesAsStringToPrint());","lastModifiedDate":"2021-10-22"},{"lineNumber":267,"author":{"gitId":"arvejw"},"content":"                currentIndex++;","lastModifiedDate":"2021-10-20"},{"lineNumber":268,"author":{"gitId":"arvejw"},"content":"                workoutCount++;","lastModifiedDate":"2021-10-22"},{"lineNumber":269,"author":{"gitId":"arvejw"},"content":"            }","lastModifiedDate":"2021-10-20"},{"lineNumber":270,"author":{"gitId":"arvejw"},"content":"            System.out.println(ClickfitMessages.getScheduledWorkoutCountMessage(workoutCount));","lastModifiedDate":"2021-11-03"},{"lineNumber":271,"author":{"gitId":"arvejw"},"content":"        }","lastModifiedDate":"2021-10-20"},{"lineNumber":272,"author":{"gitId":"arvejw"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":273,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":274,"author":{"gitId":"arvejw"},"content":"    /**","lastModifiedDate":"2021-10-31"},{"lineNumber":275,"author":{"gitId":"arvejw"},"content":"     * Cleans up the schedule list from any overdue workouts.","lastModifiedDate":"2021-10-31"},{"lineNumber":276,"author":{"gitId":"arvejw"},"content":"     * If workout is non-recurring and the date is passed it is deleted. Otherwise if it is recurring, the workout","lastModifiedDate":"2021-11-03"},{"lineNumber":277,"author":{"gitId":"arvejw"},"content":"     * is rescheduled by the required days in multiples of 7.","lastModifiedDate":"2021-10-31"},{"lineNumber":278,"author":{"gitId":"arvejw"},"content":"     */","lastModifiedDate":"2021-10-31"},{"lineNumber":279,"author":{"gitId":"arvejw"},"content":"    public void cleanUpScheduleList() {","lastModifiedDate":"2021-10-15"},{"lineNumber":280,"author":{"gitId":"arvejw"},"content":"        if (isScheduledWorkoutListEmpty()) {","lastModifiedDate":"2021-10-26"},{"lineNumber":281,"author":{"gitId":"arvejw"},"content":"            return;","lastModifiedDate":"2021-10-21"},{"lineNumber":282,"author":{"gitId":"arvejw"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":283,"author":{"gitId":"arvejw"},"content":"        sortScheduleList();","lastModifiedDate":"2021-10-15"},{"lineNumber":284,"author":{"gitId":"arvejw"},"content":"        LocalDate currentDate \u003d LocalDateTime.now().toLocalDate();","lastModifiedDate":"2021-10-15"},{"lineNumber":285,"author":{"gitId":"arvejw"},"content":"        boolean isAnyWorkoutUpdatedOrDeleted \u003d false;","lastModifiedDate":"2021-10-15"},{"lineNumber":286,"author":{"gitId":"arvejw"},"content":"        boolean isAnyWorkoutOverdue \u003d true;","lastModifiedDate":"2021-10-15"},{"lineNumber":287,"author":{"gitId":"arvejw"},"content":"        ScheduledWorkout firstWorkoutEntry;","lastModifiedDate":"2021-10-15"},{"lineNumber":288,"author":{"gitId":"arvejw"},"content":"        while (isAnyWorkoutOverdue) {","lastModifiedDate":"2021-10-15"},{"lineNumber":289,"author":{"gitId":"arvejw"},"content":"            if (isScheduledWorkoutListEmpty()) {","lastModifiedDate":"2021-11-05"},{"lineNumber":290,"author":{"gitId":"arvejw"},"content":"                break;","lastModifiedDate":"2021-10-31"},{"lineNumber":291,"author":{"gitId":"arvejw"},"content":"            }","lastModifiedDate":"2021-10-31"},{"lineNumber":292,"author":{"gitId":"arvejw"},"content":"            firstWorkoutEntry \u003d scheduledWorkouts.get(FIRST_INDEX_IN_LIST);","lastModifiedDate":"2021-10-18"},{"lineNumber":293,"author":{"gitId":"arvejw"},"content":"            if (firstWorkoutEntry.getWorkoutDateAsLocalDate().isBefore(currentDate)) {","lastModifiedDate":"2021-10-15"},{"lineNumber":294,"author":{"gitId":"arvejw"},"content":"                updateOrDeleteScheduledWorkout(firstWorkoutEntry, currentDate);","lastModifiedDate":"2021-10-15"},{"lineNumber":295,"author":{"gitId":"arvejw"},"content":"                isAnyWorkoutUpdatedOrDeleted \u003d true;","lastModifiedDate":"2021-10-15"},{"lineNumber":296,"author":{"gitId":"arvejw"},"content":"            } else {","lastModifiedDate":"2021-10-15"},{"lineNumber":297,"author":{"gitId":"arvejw"},"content":"                isAnyWorkoutOverdue \u003d false;","lastModifiedDate":"2021-10-15"},{"lineNumber":298,"author":{"gitId":"arvejw"},"content":"            }","lastModifiedDate":"2021-10-15"},{"lineNumber":299,"author":{"gitId":"arvejw"},"content":"        }","lastModifiedDate":"2021-10-15"},{"lineNumber":300,"author":{"gitId":"arvejw"},"content":"        if (isAnyWorkoutUpdatedOrDeleted) {","lastModifiedDate":"2021-10-15"},{"lineNumber":301,"author":{"gitId":"arvejw"},"content":"            System.out.println(ClickfitMessages.DELETE_OR_UPDATE_SCHEDULE_MESSAGE);","lastModifiedDate":"2021-10-24"},{"lineNumber":302,"author":{"gitId":"arvejw"},"content":"        }","lastModifiedDate":"2021-10-15"},{"lineNumber":303,"author":{"gitId":"arvejw"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":304,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":305,"author":{"gitId":"arvejw"},"content":"    /**","lastModifiedDate":"2021-10-31"},{"lineNumber":306,"author":{"gitId":"arvejw"},"content":"     * If workout is non recurring and the date is passed it is deleted.","lastModifiedDate":"2021-10-31"},{"lineNumber":307,"author":{"gitId":"arvejw"},"content":"     * Otherwise if it is recurring, the workout\u0027s date is updated by the required days in multiples of 7.","lastModifiedDate":"2021-10-31"},{"lineNumber":308,"author":{"gitId":"arvejw"},"content":"     *","lastModifiedDate":"2021-10-31"},{"lineNumber":309,"author":{"gitId":"arvejw"},"content":"     * @param scheduledWorkout Scheduled workout to be updated or deleted.","lastModifiedDate":"2021-10-31"},{"lineNumber":310,"author":{"gitId":"arvejw"},"content":"     * @param currentDate      Current date.","lastModifiedDate":"2021-10-31"},{"lineNumber":311,"author":{"gitId":"arvejw"},"content":"     */","lastModifiedDate":"2021-10-31"},{"lineNumber":312,"author":{"gitId":"arvejw"},"content":"    public void updateOrDeleteScheduledWorkout(ScheduledWorkout scheduledWorkout, LocalDate currentDate) {","lastModifiedDate":"2021-10-15"},{"lineNumber":313,"author":{"gitId":"arvejw"},"content":"        if (scheduledWorkout.isRecurring()) {","lastModifiedDate":"2021-10-15"},{"lineNumber":314,"author":{"gitId":"arvejw"},"content":"            try {","lastModifiedDate":"2021-11-06"},{"lineNumber":315,"author":{"gitId":"arvejw"},"content":"                rescheduleRecurringWorkout(scheduledWorkout, currentDate);","lastModifiedDate":"2021-10-15"},{"lineNumber":316,"author":{"gitId":"arvejw"},"content":"            } catch (ScheduleException e) {","lastModifiedDate":"2021-11-06"},{"lineNumber":317,"author":{"gitId":"arvejw"},"content":"                scheduledWorkouts.remove(scheduledWorkout);","lastModifiedDate":"2021-11-06"},{"lineNumber":318,"author":{"gitId":"arvejw"},"content":"                System.out.println(e.getMessage());","lastModifiedDate":"2021-11-06"},{"lineNumber":319,"author":{"gitId":"arvejw"},"content":"            }","lastModifiedDate":"2021-11-06"},{"lineNumber":320,"author":{"gitId":"arvejw"},"content":"        } else {","lastModifiedDate":"2021-10-15"},{"lineNumber":321,"author":{"gitId":"arvejw"},"content":"            scheduledWorkouts.remove(scheduledWorkout);","lastModifiedDate":"2021-10-26"},{"lineNumber":322,"author":{"gitId":"arvejw"},"content":"        }","lastModifiedDate":"2021-10-15"},{"lineNumber":323,"author":{"gitId":"arvejw"},"content":"        sortScheduleList();","lastModifiedDate":"2021-10-15"},{"lineNumber":324,"author":{"gitId":"arvejw"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":325,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":326,"author":{"gitId":"arvejw"},"content":"    /**","lastModifiedDate":"2021-10-31"},{"lineNumber":327,"author":{"gitId":"arvejw"},"content":"     * Reschedules recurring workout by the required days in multiples of 7.","lastModifiedDate":"2021-10-31"},{"lineNumber":328,"author":{"gitId":"arvejw"},"content":"     *","lastModifiedDate":"2021-10-31"},{"lineNumber":329,"author":{"gitId":"arvejw"},"content":"     * @param scheduledWorkout Scheduled workout to be rescheduled.","lastModifiedDate":"2021-10-31"},{"lineNumber":330,"author":{"gitId":"arvejw"},"content":"     * @param currentDate      Current date.","lastModifiedDate":"2021-10-31"},{"lineNumber":331,"author":{"gitId":"arvejw"},"content":"     * @throws ScheduleException If workout to be rescheduled already exists in the list.","lastModifiedDate":"2021-11-06"},{"lineNumber":332,"author":{"gitId":"arvejw"},"content":"     */","lastModifiedDate":"2021-10-31"},{"lineNumber":333,"author":{"gitId":"arvejw"},"content":"    public void rescheduleRecurringWorkout(ScheduledWorkout scheduledWorkout, LocalDate currentDate)","lastModifiedDate":"2021-11-06"},{"lineNumber":334,"author":{"gitId":"arvejw"},"content":"            throws ScheduleException {","lastModifiedDate":"2021-11-06"},{"lineNumber":335,"author":{"gitId":"arvejw"},"content":"        long daysUntilCurrentDate \u003d ChronoUnit.DAYS.between(scheduledWorkout.getWorkoutDateAsLocalDate(), currentDate);","lastModifiedDate":"2021-11-06"},{"lineNumber":336,"author":{"gitId":"arvejw"},"content":"        long daysToAdd \u003d (long) (Math.ceil((double) daysUntilCurrentDate / DAYS_IN_A_WEEK) * DAYS_IN_A_WEEK);","lastModifiedDate":"2021-10-15"},{"lineNumber":337,"author":{"gitId":"arvejw"},"content":"        ScheduledWorkout copyOfScheduledWorkout \u003d new ScheduledWorkout(scheduledWorkout);","lastModifiedDate":"2021-11-06"},{"lineNumber":338,"author":{"gitId":"arvejw"},"content":"        copyOfScheduledWorkout.incrementWorkoutDate(daysToAdd);","lastModifiedDate":"2021-11-06"},{"lineNumber":339,"author":{"gitId":"arvejw"},"content":"        try {","lastModifiedDate":"2021-11-06"},{"lineNumber":340,"author":{"gitId":"arvejw"},"content":"            duplicateScheduledWorkoutCheck(copyOfScheduledWorkout);","lastModifiedDate":"2021-11-06"},{"lineNumber":341,"author":{"gitId":"arvejw"},"content":"        } catch (ScheduleException e) {","lastModifiedDate":"2021-11-06"},{"lineNumber":342,"author":{"gitId":"arvejw"},"content":"            throw new DuplicateRescheduledWorkoutException();","lastModifiedDate":"2021-11-06"},{"lineNumber":343,"author":{"gitId":"arvejw"},"content":"        }","lastModifiedDate":"2021-11-06"},{"lineNumber":344,"author":{"gitId":"arvejw"},"content":"        scheduledWorkout.incrementWorkoutDate(daysToAdd);","lastModifiedDate":"2021-10-15"},{"lineNumber":345,"author":{"gitId":"arvejw"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":346,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":347,"author":{"gitId":"arvejw"},"content":"    /**","lastModifiedDate":"2021-10-31"},{"lineNumber":348,"author":{"gitId":"arvejw"},"content":"     * Sorts the list of scheduled workouts in ascending order of date time.","lastModifiedDate":"2021-10-31"},{"lineNumber":349,"author":{"gitId":"arvejw"},"content":"     */","lastModifiedDate":"2021-10-31"},{"lineNumber":350,"author":{"gitId":"arvejw"},"content":"    public void sortScheduleList() {","lastModifiedDate":"2021-10-15"},{"lineNumber":351,"author":{"gitId":"arvejw"},"content":"        scheduledWorkouts.sort(Comparator.comparing(ScheduledWorkout::getWorkoutDateTime));","lastModifiedDate":"2021-10-18"},{"lineNumber":352,"author":{"gitId":"arvejw"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":353,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":354,"author":{"gitId":"arvejw"},"content":"    /**","lastModifiedDate":"2021-10-31"},{"lineNumber":355,"author":{"gitId":"arvejw"},"content":"     * Checks whether input argument is null.","lastModifiedDate":"2021-10-31"},{"lineNumber":356,"author":{"gitId":"arvejw"},"content":"     *","lastModifiedDate":"2021-10-31"},{"lineNumber":357,"author":{"gitId":"arvejw"},"content":"     * @param inputArguments Arguments input by the user that come after the command word.","lastModifiedDate":"2021-10-31"},{"lineNumber":358,"author":{"gitId":"arvejw"},"content":"     * @throws ScheduleException If input argument is null.","lastModifiedDate":"2021-11-03"},{"lineNumber":359,"author":{"gitId":"arvejw"},"content":"     */","lastModifiedDate":"2021-10-31"},{"lineNumber":360,"author":{"gitId":"arvejw"},"content":"    public void nullArgumentCheck(String inputArguments) throws ScheduleException {","lastModifiedDate":"2021-10-24"},{"lineNumber":361,"author":{"gitId":"arvejw"},"content":"        if (inputArguments \u003d\u003d null) {","lastModifiedDate":"2021-10-11"},{"lineNumber":362,"author":{"gitId":"arvejw"},"content":"            SCHEDULE_TRACKER_LOGGER.log(Level.WARNING, \"User input argument is null.\");","lastModifiedDate":"2021-10-24"},{"lineNumber":363,"author":{"gitId":"arvejw"},"content":"            throw new ScheduleNullArgumentException();","lastModifiedDate":"2021-10-24"},{"lineNumber":364,"author":{"gitId":"arvejw"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":365,"author":{"gitId":"arvejw"},"content":"        SCHEDULE_TRACKER_LOGGER.log(Level.INFO, \"User input argument(s) is not null.\");","lastModifiedDate":"2021-10-13"},{"lineNumber":366,"author":{"gitId":"arvejw"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":367,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":368,"author":{"gitId":"arvejw"},"content":"    /**","lastModifiedDate":"2021-10-31"},{"lineNumber":369,"author":{"gitId":"arvejw"},"content":"     * Checks whether the compulsory separators are present in the user input.","lastModifiedDate":"2021-10-31"},{"lineNumber":370,"author":{"gitId":"arvejw"},"content":"     * Namely the the date separator \u003ccode\u003e/d\u003c/code\u003e and time separator \u003ccode\u003e/t\u003c/code\u003e.","lastModifiedDate":"2021-10-31"},{"lineNumber":371,"author":{"gitId":"arvejw"},"content":"     *","lastModifiedDate":"2021-10-31"},{"lineNumber":372,"author":{"gitId":"arvejw"},"content":"     * @param inputArguments Arguments input by the user that come after the command word.","lastModifiedDate":"2021-10-31"},{"lineNumber":373,"author":{"gitId":"arvejw"},"content":"     * @throws ScheduleException If missing separator detected.","lastModifiedDate":"2021-11-03"},{"lineNumber":374,"author":{"gitId":"arvejw"},"content":"     */","lastModifiedDate":"2021-10-31"},{"lineNumber":375,"author":{"gitId":"arvejw"},"content":"    public void scheduledWorkoutSeparatorCheck(String inputArguments) throws ScheduleException {","lastModifiedDate":"2021-10-24"},{"lineNumber":376,"author":{"gitId":"arvejw"},"content":"        boolean areSeparatorsCorrect \u003d Parser.containsDateSeparator(inputArguments)","lastModifiedDate":"2021-10-11"},{"lineNumber":377,"author":{"gitId":"arvejw"},"content":"                \u0026\u0026 Parser.containsTimeSeparator(inputArguments);","lastModifiedDate":"2021-10-11"},{"lineNumber":378,"author":{"gitId":"arvejw"},"content":"        if (!areSeparatorsCorrect) {","lastModifiedDate":"2021-10-11"},{"lineNumber":379,"author":{"gitId":"arvejw"},"content":"            SCHEDULE_TRACKER_LOGGER.log(Level.WARNING, \"Separators in user input are missing or invalid.\");","lastModifiedDate":"2021-10-13"},{"lineNumber":380,"author":{"gitId":"arvejw"},"content":"            throw new MissingScheduleSeparatorException();","lastModifiedDate":"2021-10-24"},{"lineNumber":381,"author":{"gitId":"arvejw"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":382,"author":{"gitId":"arvejw"},"content":"        SCHEDULE_TRACKER_LOGGER.log(Level.INFO, \"Separators in user input are correct.\");","lastModifiedDate":"2021-10-13"},{"lineNumber":383,"author":{"gitId":"arvejw"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":384,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":385,"author":{"gitId":"arvejw"},"content":"    /**","lastModifiedDate":"2021-10-31"},{"lineNumber":386,"author":{"gitId":"arvejw"},"content":"     * Checks whether the list of scheduled workouts is empty.","lastModifiedDate":"2021-10-31"},{"lineNumber":387,"author":{"gitId":"arvejw"},"content":"     *","lastModifiedDate":"2021-10-31"},{"lineNumber":388,"author":{"gitId":"arvejw"},"content":"     * @return \u003ccode\u003etrue\u003c/code\u003e if schedule list is empty, \u003ccode\u003efalse\u003c/code\u003e otherwise.","lastModifiedDate":"2021-10-31"},{"lineNumber":389,"author":{"gitId":"arvejw"},"content":"     */","lastModifiedDate":"2021-10-31"},{"lineNumber":390,"author":{"gitId":"arvejw"},"content":"    public boolean isScheduledWorkoutListEmpty() {","lastModifiedDate":"2021-10-26"},{"lineNumber":391,"author":{"gitId":"arvejw"},"content":"        return scheduledWorkouts.isEmpty();","lastModifiedDate":"2021-10-26"},{"lineNumber":392,"author":{"gitId":"arvejw"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":393,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":394,"author":{"gitId":"arvejw"},"content":"    /**","lastModifiedDate":"2021-10-31"},{"lineNumber":395,"author":{"gitId":"arvejw"},"content":"     * Checks whether the description of the scheduled workout is missing in the user input.","lastModifiedDate":"2021-10-31"},{"lineNumber":396,"author":{"gitId":"arvejw"},"content":"     *","lastModifiedDate":"2021-10-31"},{"lineNumber":397,"author":{"gitId":"arvejw"},"content":"     * @param inputArguments Arguments input by the user that come after the command word.","lastModifiedDate":"2021-10-31"},{"lineNumber":398,"author":{"gitId":"arvejw"},"content":"     * @throws ScheduleException If unable to find description or find separators.","lastModifiedDate":"2021-11-03"},{"lineNumber":399,"author":{"gitId":"arvejw"},"content":"     */","lastModifiedDate":"2021-10-31"},{"lineNumber":400,"author":{"gitId":"arvejw"},"content":"    public void missingDescriptionCheck(String inputArguments) throws ScheduleException {","lastModifiedDate":"2021-10-24"},{"lineNumber":401,"author":{"gitId":"arvejw"},"content":"        int indexOfFirstDateSeparator \u003d inputArguments.indexOf(Parser.DATE_SEPARATOR.trim());","lastModifiedDate":"2021-10-12"},{"lineNumber":402,"author":{"gitId":"arvejw"},"content":"        String subStringBeforeDateSeparator \u003d \"\";","lastModifiedDate":"2021-10-14"},{"lineNumber":403,"author":{"gitId":"arvejw"},"content":"        if (indexOfFirstDateSeparator !\u003d -1) {","lastModifiedDate":"2021-10-31"},{"lineNumber":404,"author":{"gitId":"arvejw"},"content":"            subStringBeforeDateSeparator \u003d inputArguments.substring(0, indexOfFirstDateSeparator).trim();","lastModifiedDate":"2021-10-12"},{"lineNumber":405,"author":{"gitId":"arvejw"},"content":"        } else {","lastModifiedDate":"2021-10-14"},{"lineNumber":406,"author":{"gitId":"arvejw"},"content":"            scheduledWorkoutSeparatorCheck(inputArguments);","lastModifiedDate":"2021-10-14"},{"lineNumber":407,"author":{"gitId":"arvejw"},"content":"        }","lastModifiedDate":"2021-10-12"},{"lineNumber":408,"author":{"gitId":"arvejw"},"content":"        if (subStringBeforeDateSeparator.isEmpty()) {","lastModifiedDate":"2021-10-12"},{"lineNumber":409,"author":{"gitId":"arvejw"},"content":"            SCHEDULE_TRACKER_LOGGER.log(Level.WARNING, \"Description is missing in user input arguments.\");","lastModifiedDate":"2021-10-13"},{"lineNumber":410,"author":{"gitId":"arvejw"},"content":"            throw new MissingScheduleDescriptionException();","lastModifiedDate":"2021-10-24"},{"lineNumber":411,"author":{"gitId":"arvejw"},"content":"        }","lastModifiedDate":"2021-10-12"},{"lineNumber":412,"author":{"gitId":"arvejw"},"content":"        SCHEDULE_TRACKER_LOGGER.log(Level.INFO, \"Description is present in user input arguments.\");","lastModifiedDate":"2021-10-13"},{"lineNumber":413,"author":{"gitId":"arvejw"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":414,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":415,"author":{"gitId":"arvejw"},"content":"    /**","lastModifiedDate":"2021-10-31"},{"lineNumber":416,"author":{"gitId":"arvejw"},"content":"     * Checks whether a duplicate scheduled workout already exists in the list.","lastModifiedDate":"2021-10-31"},{"lineNumber":417,"author":{"gitId":"arvejw"},"content":"     *","lastModifiedDate":"2021-10-31"},{"lineNumber":418,"author":{"gitId":"arvejw"},"content":"     * @param scheduledWorkoutToAdd The \u003ccode\u003eScheduledWorkout\u003c/code\u003e object to be potentially added.","lastModifiedDate":"2021-10-31"},{"lineNumber":419,"author":{"gitId":"arvejw"},"content":"     * @throws ScheduleException If duplicate workout detected.","lastModifiedDate":"2021-11-03"},{"lineNumber":420,"author":{"gitId":"arvejw"},"content":"     */","lastModifiedDate":"2021-10-31"},{"lineNumber":421,"author":{"gitId":"arvejw"},"content":"    public void duplicateScheduledWorkoutCheck(ScheduledWorkout scheduledWorkoutToAdd) throws ScheduleException {","lastModifiedDate":"2021-10-31"},{"lineNumber":422,"author":{"gitId":"arvejw"},"content":"        String scheduledWorkoutAsString \u003d scheduledWorkoutToAdd.getScheduledWorkoutAsString();","lastModifiedDate":"2021-10-31"},{"lineNumber":423,"author":{"gitId":"arvejw"},"content":"        for (ScheduledWorkout s : scheduledWorkouts) {","lastModifiedDate":"2021-10-31"},{"lineNumber":424,"author":{"gitId":"arvejw"},"content":"            if (scheduledWorkoutAsString.equals(s.getScheduledWorkoutAsString())) {","lastModifiedDate":"2021-10-31"},{"lineNumber":425,"author":{"gitId":"arvejw"},"content":"                throw new DuplicateScheduledWorkoutException();","lastModifiedDate":"2021-10-31"},{"lineNumber":426,"author":{"gitId":"arvejw"},"content":"            }","lastModifiedDate":"2021-10-31"},{"lineNumber":427,"author":{"gitId":"arvejw"},"content":"        }","lastModifiedDate":"2021-10-31"},{"lineNumber":428,"author":{"gitId":"arvejw"},"content":"    }","lastModifiedDate":"2021-10-31"},{"lineNumber":429,"author":{"gitId":"arvejw"},"content":"}","lastModifiedDate":"2021-10-11"}],"authorContributionMap":{"arvejw":429}},{"path":"src/main/java/seedu/duke/schedule/ScheduledWorkout.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"arvejw"},"content":"package seedu.duke.schedule;","lastModifiedDate":"2021-10-22"},{"lineNumber":2,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":3,"author":{"gitId":"arvejw"},"content":"import seedu.duke.Parser;","lastModifiedDate":"2021-10-22"},{"lineNumber":4,"author":{"gitId":"arvejw"},"content":"import seedu.duke.Ui;","lastModifiedDate":"2021-11-03"},{"lineNumber":5,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":6,"author":{"gitId":"arvejw"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-10-15"},{"lineNumber":7,"author":{"gitId":"arvejw"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-10-15"},{"lineNumber":8,"author":{"gitId":"arvejw"},"content":"import java.time.LocalTime;","lastModifiedDate":"2021-10-15"},{"lineNumber":9,"author":{"gitId":"arvejw"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-10-15"},{"lineNumber":10,"author":{"gitId":"arvejw"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-20"},{"lineNumber":11,"author":{"gitId":"arvejw"},"content":"import java.util.Map;","lastModifiedDate":"2021-10-20"},{"lineNumber":12,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":13,"author":{"gitId":"arvejw"},"content":"//@@author arvejw","lastModifiedDate":"2021-10-22"},{"lineNumber":14,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":15,"author":{"gitId":"arvejw"},"content":"/**","lastModifiedDate":"2021-10-31"},{"lineNumber":16,"author":{"gitId":"arvejw"},"content":" * Represents a scheduled workout. Namely, a \u003ccode\u003eScheduledWorkout\u003c/code\u003e stores information about","lastModifiedDate":"2021-10-31"},{"lineNumber":17,"author":{"gitId":"arvejw"},"content":" * the scheduled workout such as its description, date and time, as well as whether the workout is recurring.","lastModifiedDate":"2021-10-31"},{"lineNumber":18,"author":{"gitId":"arvejw"},"content":" */","lastModifiedDate":"2021-10-31"},{"lineNumber":19,"author":{"gitId":"arvejw"},"content":"public class ScheduledWorkout {","lastModifiedDate":"2021-10-11"},{"lineNumber":20,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":21,"author":{"gitId":"arvejw"},"content":"    private String workoutDescription;","lastModifiedDate":"2021-10-08"},{"lineNumber":22,"author":{"gitId":"arvejw"},"content":"    private ArrayList\u003cWorkoutActivity\u003e activities;","lastModifiedDate":"2021-10-20"},{"lineNumber":23,"author":{"gitId":"arvejw"},"content":"    private String workoutDate;","lastModifiedDate":"2021-10-11"},{"lineNumber":24,"author":{"gitId":"arvejw"},"content":"    private String workoutTime;","lastModifiedDate":"2021-10-11"},{"lineNumber":25,"author":{"gitId":"arvejw"},"content":"    private LocalDateTime workoutDateTime;","lastModifiedDate":"2021-10-15"},{"lineNumber":26,"author":{"gitId":"arvejw"},"content":"    private boolean isRecurring;","lastModifiedDate":"2021-10-20"},{"lineNumber":27,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":28,"author":{"gitId":"arvejw"},"content":"    /**","lastModifiedDate":"2021-10-31"},{"lineNumber":29,"author":{"gitId":"arvejw"},"content":"     * Constructs a \u003ccode\u003eScheduledWorkout\u003c/code\u003e object.","lastModifiedDate":"2021-10-31"},{"lineNumber":30,"author":{"gitId":"arvejw"},"content":"     *","lastModifiedDate":"2021-10-31"},{"lineNumber":31,"author":{"gitId":"arvejw"},"content":"     * @param workoutDescription The description of the workout.","lastModifiedDate":"2021-11-03"},{"lineNumber":32,"author":{"gitId":"arvejw"},"content":"     * @param workoutDate        The date of the workout.","lastModifiedDate":"2021-11-03"},{"lineNumber":33,"author":{"gitId":"arvejw"},"content":"     * @param workoutTime        The time of the workout.","lastModifiedDate":"2021-11-03"},{"lineNumber":34,"author":{"gitId":"arvejw"},"content":"     * @param activityMap        The activities of the workout.","lastModifiedDate":"2021-11-03"},{"lineNumber":35,"author":{"gitId":"arvejw"},"content":"     * @param isRecurring        The type of workout, namely whether its recurring or not.","lastModifiedDate":"2021-11-03"},{"lineNumber":36,"author":{"gitId":"arvejw"},"content":"     */","lastModifiedDate":"2021-10-31"},{"lineNumber":37,"author":{"gitId":"arvejw"},"content":"    public ScheduledWorkout(String workoutDescription, String workoutDate, String workoutTime,","lastModifiedDate":"2021-10-20"},{"lineNumber":38,"author":{"gitId":"arvejw"},"content":"                            Map\u003cString, ArrayList\u003cInteger\u003e\u003e activityMap, boolean isRecurring) {","lastModifiedDate":"2021-10-21"},{"lineNumber":39,"author":{"gitId":"arvejw"},"content":"        this.workoutDescription \u003d workoutDescription;","lastModifiedDate":"2021-10-08"},{"lineNumber":40,"author":{"gitId":"arvejw"},"content":"        this.workoutDate \u003d workoutDate;","lastModifiedDate":"2021-10-08"},{"lineNumber":41,"author":{"gitId":"arvejw"},"content":"        this.workoutTime \u003d workoutTime;","lastModifiedDate":"2021-10-08"},{"lineNumber":42,"author":{"gitId":"arvejw"},"content":"        workoutDateTime \u003d LocalDateTime.of(","lastModifiedDate":"2021-10-15"},{"lineNumber":43,"author":{"gitId":"arvejw"},"content":"                LocalDate.parse(workoutDate, DateTimeFormatter.ofPattern(\"dd/MM/yyyy\")),","lastModifiedDate":"2021-10-15"},{"lineNumber":44,"author":{"gitId":"arvejw"},"content":"                LocalTime.parse(workoutTime, DateTimeFormatter.ofPattern(\"HH:mm\")));","lastModifiedDate":"2021-10-17"},{"lineNumber":45,"author":{"gitId":"arvejw"},"content":"        this.isRecurring \u003d isRecurring;","lastModifiedDate":"2021-10-15"},{"lineNumber":46,"author":{"gitId":"arvejw"},"content":"        activities \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-20"},{"lineNumber":47,"author":{"gitId":"arvejw"},"content":"//        if (!activityMap.isEmpty()) {","lastModifiedDate":"2021-11-06"},{"lineNumber":48,"author":{"gitId":"arvejw"},"content":"//            for (var entry : activityMap.entrySet()) {","lastModifiedDate":"2021-11-06"},{"lineNumber":49,"author":{"gitId":"arvejw"},"content":"//                activities.add(","lastModifiedDate":"2021-11-06"},{"lineNumber":50,"author":{"gitId":"arvejw"},"content":"//                        new WorkoutActivity(","lastModifiedDate":"2021-11-06"},{"lineNumber":51,"author":{"gitId":"arvejw"},"content":"//                                entry.getKey().trim(), entry.getValue(),","lastModifiedDate":"2021-11-06"},{"lineNumber":52,"author":{"gitId":"arvejw"},"content":"//                                WorkoutActivity.isDistanceActivity(entry.getKey())","lastModifiedDate":"2021-11-06"},{"lineNumber":53,"author":{"gitId":"arvejw"},"content":"//                        )","lastModifiedDate":"2021-11-06"},{"lineNumber":54,"author":{"gitId":"arvejw"},"content":"//                );","lastModifiedDate":"2021-11-06"},{"lineNumber":55,"author":{"gitId":"arvejw"},"content":"//            }","lastModifiedDate":"2021-11-06"},{"lineNumber":56,"author":{"gitId":"arvejw"},"content":"//        }","lastModifiedDate":"2021-11-06"},{"lineNumber":57,"author":{"gitId":"arvejw"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":58,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":59,"author":{"gitId":"arvejw"},"content":"    /**","lastModifiedDate":"2021-11-06"},{"lineNumber":60,"author":{"gitId":"arvejw"},"content":"     * Copies and constructs a \u003ccode\u003eScheduledWorkout\u003c/code\u003e object with the same parameters.","lastModifiedDate":"2021-11-06"},{"lineNumber":61,"author":{"gitId":"arvejw"},"content":"     *","lastModifiedDate":"2021-11-06"},{"lineNumber":62,"author":{"gitId":"arvejw"},"content":"     * @param scheduledWorkout \u003ccode\u003eScheduledWorkout\u003c/code\u003e object to be copied.","lastModifiedDate":"2021-11-06"},{"lineNumber":63,"author":{"gitId":"arvejw"},"content":"     */","lastModifiedDate":"2021-11-06"},{"lineNumber":64,"author":{"gitId":"arvejw"},"content":"    public ScheduledWorkout(ScheduledWorkout scheduledWorkout) {","lastModifiedDate":"2021-11-06"},{"lineNumber":65,"author":{"gitId":"arvejw"},"content":"        this.workoutDescription \u003d scheduledWorkout.workoutDescription;","lastModifiedDate":"2021-11-06"},{"lineNumber":66,"author":{"gitId":"arvejw"},"content":"        this.activities \u003d scheduledWorkout.activities;","lastModifiedDate":"2021-11-06"},{"lineNumber":67,"author":{"gitId":"arvejw"},"content":"        this.workoutDate \u003d scheduledWorkout.workoutDate;","lastModifiedDate":"2021-11-06"},{"lineNumber":68,"author":{"gitId":"arvejw"},"content":"        this.workoutTime \u003d scheduledWorkout.workoutTime;","lastModifiedDate":"2021-11-06"},{"lineNumber":69,"author":{"gitId":"arvejw"},"content":"        this.workoutDateTime \u003d scheduledWorkout.workoutDateTime;","lastModifiedDate":"2021-11-06"},{"lineNumber":70,"author":{"gitId":"arvejw"},"content":"        this.isRecurring \u003d scheduledWorkout.isRecurring;","lastModifiedDate":"2021-11-06"},{"lineNumber":71,"author":{"gitId":"arvejw"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":72,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":73,"author":{"gitId":"arvejw"},"content":"    public String getWorkoutDescription() {","lastModifiedDate":"2021-10-08"},{"lineNumber":74,"author":{"gitId":"arvejw"},"content":"        return workoutDescription;","lastModifiedDate":"2021-10-08"},{"lineNumber":75,"author":{"gitId":"arvejw"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":76,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":77,"author":{"gitId":"arvejw"},"content":"    public String getWorkoutDate() {","lastModifiedDate":"2021-10-11"},{"lineNumber":78,"author":{"gitId":"arvejw"},"content":"        return workoutDate;","lastModifiedDate":"2021-10-08"},{"lineNumber":79,"author":{"gitId":"arvejw"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":80,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":81,"author":{"gitId":"arvejw"},"content":"    public void incrementWorkoutDate(long days) {","lastModifiedDate":"2021-10-15"},{"lineNumber":82,"author":{"gitId":"arvejw"},"content":"        workoutDateTime \u003d workoutDateTime.plusDays(days);","lastModifiedDate":"2021-10-15"},{"lineNumber":83,"author":{"gitId":"arvejw"},"content":"        workoutDate \u003d workoutDateTime.toLocalDate().format(DateTimeFormatter.ofPattern(\"dd/MM/yyyy\"));","lastModifiedDate":"2021-10-15"},{"lineNumber":84,"author":{"gitId":"arvejw"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":85,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":86,"author":{"gitId":"arvejw"},"content":"    public LocalDate getWorkoutDateAsLocalDate() {","lastModifiedDate":"2021-10-15"},{"lineNumber":87,"author":{"gitId":"arvejw"},"content":"        return workoutDateTime.toLocalDate();","lastModifiedDate":"2021-10-15"},{"lineNumber":88,"author":{"gitId":"arvejw"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":89,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":90,"author":{"gitId":"arvejw"},"content":"    public String getWorkoutTime() {","lastModifiedDate":"2021-10-11"},{"lineNumber":91,"author":{"gitId":"arvejw"},"content":"        return workoutTime;","lastModifiedDate":"2021-10-08"},{"lineNumber":92,"author":{"gitId":"arvejw"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":93,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":94,"author":{"gitId":"arvejw"},"content":"    public LocalDateTime getWorkoutDateTime() {","lastModifiedDate":"2021-10-15"},{"lineNumber":95,"author":{"gitId":"arvejw"},"content":"        return workoutDateTime;","lastModifiedDate":"2021-10-15"},{"lineNumber":96,"author":{"gitId":"arvejw"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":97,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":98,"author":{"gitId":"arvejw"},"content":"    public boolean isRecurring() {","lastModifiedDate":"2021-10-15"},{"lineNumber":99,"author":{"gitId":"arvejw"},"content":"        return isRecurring;","lastModifiedDate":"2021-10-15"},{"lineNumber":100,"author":{"gitId":"arvejw"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":101,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":102,"author":{"gitId":"arvejw"},"content":"    public String isRecurringStatus() {","lastModifiedDate":"2021-10-15"},{"lineNumber":103,"author":{"gitId":"arvejw"},"content":"        return isRecurring ? \" [R]\" : \"\";","lastModifiedDate":"2021-10-15"},{"lineNumber":104,"author":{"gitId":"arvejw"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":105,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":106,"author":{"gitId":"arvejw"},"content":"    public String isRecurringStatusAsText() {","lastModifiedDate":"2021-10-15"},{"lineNumber":107,"author":{"gitId":"arvejw"},"content":"        return isRecurring ? \"recurring \" : \"\";","lastModifiedDate":"2021-10-15"},{"lineNumber":108,"author":{"gitId":"arvejw"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":109,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":110,"author":{"gitId":"arvejw"},"content":"    /**","lastModifiedDate":"2021-10-31"},{"lineNumber":111,"author":{"gitId":"arvejw"},"content":"     * Returns the activities in a more readable String format to be printed.","lastModifiedDate":"2021-10-31"},{"lineNumber":112,"author":{"gitId":"arvejw"},"content":"     *","lastModifiedDate":"2021-10-31"},{"lineNumber":113,"author":{"gitId":"arvejw"},"content":"     * @return String Activity breakdown as a single String to be printed.","lastModifiedDate":"2021-11-03"},{"lineNumber":114,"author":{"gitId":"arvejw"},"content":"     */","lastModifiedDate":"2021-10-31"},{"lineNumber":115,"author":{"gitId":"arvejw"},"content":"    public String getActivitiesAsStringToPrint() {","lastModifiedDate":"2021-10-22"},{"lineNumber":116,"author":{"gitId":"arvejw"},"content":"        String output \u003d System.lineSeparator() + \"Activities Breakdown: \" + System.lineSeparator();","lastModifiedDate":"2021-10-20"},{"lineNumber":117,"author":{"gitId":"arvejw"},"content":"        if (activities.isEmpty()) {","lastModifiedDate":"2021-10-20"},{"lineNumber":118,"author":{"gitId":"arvejw"},"content":"            return output + \"nil\" + System.lineSeparator() + Ui.HORIZONTAL_BAR_SHORT;","lastModifiedDate":"2021-11-03"},{"lineNumber":119,"author":{"gitId":"arvejw"},"content":"        }","lastModifiedDate":"2021-10-20"},{"lineNumber":120,"author":{"gitId":"arvejw"},"content":"        int currentIndex \u003d 1;","lastModifiedDate":"2021-10-21"},{"lineNumber":121,"author":{"gitId":"arvejw"},"content":"        for (WorkoutActivity a : activities) {","lastModifiedDate":"2021-10-20"},{"lineNumber":122,"author":{"gitId":"arvejw"},"content":"            if (a.isDistanceActivity()) {","lastModifiedDate":"2021-10-20"},{"lineNumber":123,"author":{"gitId":"arvejw"},"content":"                output +\u003d currentIndex + \". \" + a.getActivityDescription() + \": \" + a.getActivityDistance()","lastModifiedDate":"2021-10-21"},{"lineNumber":124,"author":{"gitId":"arvejw"},"content":"                        + \"metres\" + System.lineSeparator();","lastModifiedDate":"2021-10-20"},{"lineNumber":125,"author":{"gitId":"arvejw"},"content":"            } else {","lastModifiedDate":"2021-10-20"},{"lineNumber":126,"author":{"gitId":"arvejw"},"content":"                output +\u003d currentIndex + \". \" + a.getActivityDescription() + \": \" + a.getActivitySets() + \"sets x \"","lastModifiedDate":"2021-10-21"},{"lineNumber":127,"author":{"gitId":"arvejw"},"content":"                        + a.getActivityReps() + \"reps\" + System.lineSeparator();","lastModifiedDate":"2021-10-21"},{"lineNumber":128,"author":{"gitId":"arvejw"},"content":"            }","lastModifiedDate":"2021-10-20"},{"lineNumber":129,"author":{"gitId":"arvejw"},"content":"            currentIndex++;","lastModifiedDate":"2021-10-21"},{"lineNumber":130,"author":{"gitId":"arvejw"},"content":"        }","lastModifiedDate":"2021-10-20"},{"lineNumber":131,"author":{"gitId":"arvejw"},"content":"        return output + System.lineSeparator() + Ui.HORIZONTAL_BAR_SHORT;","lastModifiedDate":"2021-11-03"},{"lineNumber":132,"author":{"gitId":"arvejw"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":133,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":134,"author":{"gitId":"arvejw"},"content":"    /**","lastModifiedDate":"2021-10-31"},{"lineNumber":135,"author":{"gitId":"arvejw"},"content":"     * Returns the information of the ScheduledWorkout in a data file compatible format.","lastModifiedDate":"2021-10-31"},{"lineNumber":136,"author":{"gitId":"arvejw"},"content":"     *","lastModifiedDate":"2021-10-31"},{"lineNumber":137,"author":{"gitId":"arvejw"},"content":"     * @return String Scheduled workout information as a single String.","lastModifiedDate":"2021-11-03"},{"lineNumber":138,"author":{"gitId":"arvejw"},"content":"     */","lastModifiedDate":"2021-10-31"},{"lineNumber":139,"author":{"gitId":"arvejw"},"content":"    public String getScheduledWorkoutAsString() {","lastModifiedDate":"2021-10-22"},{"lineNumber":140,"author":{"gitId":"arvejw"},"content":"        String output \u003d workoutDescription + Parser.DATE_SEPARATOR","lastModifiedDate":"2021-10-22"},{"lineNumber":141,"author":{"gitId":"arvejw"},"content":"                + workoutDate + Parser.TIME_SEPARATOR + workoutTime;","lastModifiedDate":"2021-10-22"},{"lineNumber":142,"author":{"gitId":"arvejw"},"content":"        output +\u003d getActivitiesAsString();","lastModifiedDate":"2021-10-22"},{"lineNumber":143,"author":{"gitId":"arvejw"},"content":"        if (isRecurring) {","lastModifiedDate":"2021-10-22"},{"lineNumber":144,"author":{"gitId":"arvejw"},"content":"            output +\u003d Parser.RECURRING_FLAG;","lastModifiedDate":"2021-10-22"},{"lineNumber":145,"author":{"gitId":"arvejw"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":146,"author":{"gitId":"arvejw"},"content":"        return output;","lastModifiedDate":"2021-10-22"},{"lineNumber":147,"author":{"gitId":"arvejw"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":148,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":149,"author":{"gitId":"arvejw"},"content":"    /**","lastModifiedDate":"2021-10-31"},{"lineNumber":150,"author":{"gitId":"arvejw"},"content":"     * Returns the activity breakdown of the ScheduledWorkout in a data file compatible format.","lastModifiedDate":"2021-10-31"},{"lineNumber":151,"author":{"gitId":"arvejw"},"content":"     *","lastModifiedDate":"2021-10-31"},{"lineNumber":152,"author":{"gitId":"arvejw"},"content":"     * @return String Activity breakdown information as a single String to be stored.","lastModifiedDate":"2021-11-03"},{"lineNumber":153,"author":{"gitId":"arvejw"},"content":"     */","lastModifiedDate":"2021-10-31"},{"lineNumber":154,"author":{"gitId":"arvejw"},"content":"    public String getActivitiesAsString() {","lastModifiedDate":"2021-10-31"},{"lineNumber":155,"author":{"gitId":"arvejw"},"content":"        StringBuilder activityString \u003d new StringBuilder();","lastModifiedDate":"2021-10-22"},{"lineNumber":156,"author":{"gitId":"arvejw"},"content":"        if (!activities.isEmpty()) {","lastModifiedDate":"2021-10-22"},{"lineNumber":157,"author":{"gitId":"arvejw"},"content":"            activityString.append(Parser.ACTIVITY_SEPARATOR);","lastModifiedDate":"2021-10-22"},{"lineNumber":158,"author":{"gitId":"arvejw"},"content":"            int currentIndex \u003d 0;","lastModifiedDate":"2021-10-22"},{"lineNumber":159,"author":{"gitId":"arvejw"},"content":"            for (WorkoutActivity activity : activities) {","lastModifiedDate":"2021-10-22"},{"lineNumber":160,"author":{"gitId":"arvejw"},"content":"                if (activity.isDistanceActivity()) {","lastModifiedDate":"2021-10-22"},{"lineNumber":161,"author":{"gitId":"arvejw"},"content":"                    activityString.append(activity.getActivityDescription())","lastModifiedDate":"2021-10-22"},{"lineNumber":162,"author":{"gitId":"arvejw"},"content":"                            .append(Parser.ACTIVITY_SPLITTER)","lastModifiedDate":"2021-10-22"},{"lineNumber":163,"author":{"gitId":"arvejw"},"content":"                            .append(activity.getActivityDistance());","lastModifiedDate":"2021-10-22"},{"lineNumber":164,"author":{"gitId":"arvejw"},"content":"                } else {","lastModifiedDate":"2021-10-22"},{"lineNumber":165,"author":{"gitId":"arvejw"},"content":"                    activityString.append(activity.getActivityDescription())","lastModifiedDate":"2021-10-22"},{"lineNumber":166,"author":{"gitId":"arvejw"},"content":"                            .append(Parser.ACTIVITY_SPLITTER)","lastModifiedDate":"2021-10-22"},{"lineNumber":167,"author":{"gitId":"arvejw"},"content":"                            .append(activity.getActivitySets())","lastModifiedDate":"2021-10-22"},{"lineNumber":168,"author":{"gitId":"arvejw"},"content":"                            .append(Parser.QUANTIFIER_SPLITTER)","lastModifiedDate":"2021-10-22"},{"lineNumber":169,"author":{"gitId":"arvejw"},"content":"                            .append(activity.getActivityReps());","lastModifiedDate":"2021-10-22"},{"lineNumber":170,"author":{"gitId":"arvejw"},"content":"                }","lastModifiedDate":"2021-10-22"},{"lineNumber":171,"author":{"gitId":"arvejw"},"content":"                currentIndex++;","lastModifiedDate":"2021-10-22"},{"lineNumber":172,"author":{"gitId":"arvejw"},"content":"                activityString.append(","lastModifiedDate":"2021-10-22"},{"lineNumber":173,"author":{"gitId":"arvejw"},"content":"                        (currentIndex \u003c activities.size()) ? Parser.MULTIPLE_ACTIVITY_MARKER : \"\");","lastModifiedDate":"2021-10-22"},{"lineNumber":174,"author":{"gitId":"arvejw"},"content":"            }","lastModifiedDate":"2021-10-22"},{"lineNumber":175,"author":{"gitId":"arvejw"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":176,"author":{"gitId":"arvejw"},"content":"        return activityString.toString();","lastModifiedDate":"2021-10-22"},{"lineNumber":177,"author":{"gitId":"arvejw"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":178,"author":{"gitId":"arvejw"},"content":"}","lastModifiedDate":"2021-10-08"}],"authorContributionMap":{"arvejw":178}},{"path":"src/main/java/seedu/duke/schedule/WorkoutActivity.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"arvejw"},"content":"package seedu.duke.schedule;","lastModifiedDate":"2021-10-22"},{"lineNumber":2,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":3,"author":{"gitId":"arvejw"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-21"},{"lineNumber":4,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":5,"author":{"gitId":"arvejw"},"content":"//@@author arvejw","lastModifiedDate":"2021-10-22"},{"lineNumber":6,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":7,"author":{"gitId":"arvejw"},"content":"/**","lastModifiedDate":"2021-10-31"},{"lineNumber":8,"author":{"gitId":"arvejw"},"content":" * Represents a workout activity. Namely, a \u003ccode\u003eWorkoutActivity\u003c/code\u003e objects contains information of the","lastModifiedDate":"2021-10-31"},{"lineNumber":9,"author":{"gitId":"arvejw"},"content":" * activity description and the quantifiers tied to it.","lastModifiedDate":"2021-10-31"},{"lineNumber":10,"author":{"gitId":"arvejw"},"content":" */","lastModifiedDate":"2021-10-31"},{"lineNumber":11,"author":{"gitId":"arvejw"},"content":"public class WorkoutActivity {","lastModifiedDate":"2021-10-20"},{"lineNumber":12,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":13,"author":{"gitId":"arvejw"},"content":"    private String activityDescription;","lastModifiedDate":"2021-10-20"},{"lineNumber":14,"author":{"gitId":"arvejw"},"content":"    private boolean isDistanceActivity \u003d false;","lastModifiedDate":"2021-10-20"},{"lineNumber":15,"author":{"gitId":"arvejw"},"content":"    private int activityDistance;","lastModifiedDate":"2021-10-20"},{"lineNumber":16,"author":{"gitId":"arvejw"},"content":"    private int activitySets;","lastModifiedDate":"2021-10-20"},{"lineNumber":17,"author":{"gitId":"arvejw"},"content":"    private int activityReps;","lastModifiedDate":"2021-10-20"},{"lineNumber":18,"author":{"gitId":"arvejw"},"content":"    public static final String ACTIVITY_SWIMMING \u003d \"swimming\";","lastModifiedDate":"2021-10-20"},{"lineNumber":19,"author":{"gitId":"arvejw"},"content":"    public static final String ACTIVITY_RUNNING \u003d \"running\";","lastModifiedDate":"2021-10-20"},{"lineNumber":20,"author":{"gitId":"arvejw"},"content":"    public static final String ACTIVITY_CYCLING \u003d \"cycling\";","lastModifiedDate":"2021-10-20"},{"lineNumber":21,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":22,"author":{"gitId":"arvejw"},"content":"    /**","lastModifiedDate":"2021-10-31"},{"lineNumber":23,"author":{"gitId":"arvejw"},"content":"     * Constructs a \u003ccode\u003eWorkoutActivity\u003c/code\u003e object.","lastModifiedDate":"2021-10-31"},{"lineNumber":24,"author":{"gitId":"arvejw"},"content":"     *","lastModifiedDate":"2021-10-31"},{"lineNumber":25,"author":{"gitId":"arvejw"},"content":"     * @param activityDescription Description of the activity.","lastModifiedDate":"2021-10-31"},{"lineNumber":26,"author":{"gitId":"arvejw"},"content":"     * @param activityQuantifier Quantifier of the activity.","lastModifiedDate":"2021-10-31"},{"lineNumber":27,"author":{"gitId":"arvejw"},"content":"     * @param isDistanceActivity Flag to determine if the activity is distance based.","lastModifiedDate":"2021-10-31"},{"lineNumber":28,"author":{"gitId":"arvejw"},"content":"     */","lastModifiedDate":"2021-10-31"},{"lineNumber":29,"author":{"gitId":"arvejw"},"content":"    public WorkoutActivity(String activityDescription,","lastModifiedDate":"2021-10-21"},{"lineNumber":30,"author":{"gitId":"arvejw"},"content":"                           ArrayList\u003cInteger\u003e activityQuantifier, boolean isDistanceActivity) {","lastModifiedDate":"2021-10-21"},{"lineNumber":31,"author":{"gitId":"arvejw"},"content":"        this.activityDescription \u003d activityDescription;","lastModifiedDate":"2021-10-20"},{"lineNumber":32,"author":{"gitId":"arvejw"},"content":"        if (isDistanceActivity) {","lastModifiedDate":"2021-10-20"},{"lineNumber":33,"author":{"gitId":"arvejw"},"content":"            activityDistance \u003d activityQuantifier.get(0);","lastModifiedDate":"2021-10-21"},{"lineNumber":34,"author":{"gitId":"arvejw"},"content":"            this.isDistanceActivity \u003d true;","lastModifiedDate":"2021-10-20"},{"lineNumber":35,"author":{"gitId":"arvejw"},"content":"        } else {","lastModifiedDate":"2021-10-20"},{"lineNumber":36,"author":{"gitId":"arvejw"},"content":"            activitySets \u003d activityQuantifier.get(0);","lastModifiedDate":"2021-10-21"},{"lineNumber":37,"author":{"gitId":"arvejw"},"content":"            activityReps \u003d activityQuantifier.get(1);","lastModifiedDate":"2021-10-21"},{"lineNumber":38,"author":{"gitId":"arvejw"},"content":"        }","lastModifiedDate":"2021-10-20"},{"lineNumber":39,"author":{"gitId":"arvejw"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":40,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":41,"author":{"gitId":"arvejw"},"content":"    /**","lastModifiedDate":"2021-10-31"},{"lineNumber":42,"author":{"gitId":"arvejw"},"content":"     * Helps check if the activity is one of the 3 pre-defined distance based activity swimming/running/cycling.","lastModifiedDate":"2021-10-31"},{"lineNumber":43,"author":{"gitId":"arvejw"},"content":"     *","lastModifiedDate":"2021-10-31"},{"lineNumber":44,"author":{"gitId":"arvejw"},"content":"     * @param activityDescription Description of the activity.","lastModifiedDate":"2021-10-31"},{"lineNumber":45,"author":{"gitId":"arvejw"},"content":"     * @return boolean \u003ccode\u003etrue\u003c/code\u003e if the activity is distance based, \u003ccode\u003efalse\u003c/code\u003e otherwise.","lastModifiedDate":"2021-11-03"},{"lineNumber":46,"author":{"gitId":"arvejw"},"content":"     */","lastModifiedDate":"2021-10-31"},{"lineNumber":47,"author":{"gitId":"arvejw"},"content":"    public static boolean isDistanceActivity(String activityDescription) {","lastModifiedDate":"2021-10-20"},{"lineNumber":48,"author":{"gitId":"arvejw"},"content":"        if (activityDescription.trim().equals(ACTIVITY_SWIMMING)","lastModifiedDate":"2021-10-21"},{"lineNumber":49,"author":{"gitId":"arvejw"},"content":"                || activityDescription.trim().equals(ACTIVITY_RUNNING)","lastModifiedDate":"2021-10-21"},{"lineNumber":50,"author":{"gitId":"arvejw"},"content":"                || activityDescription.trim().equals(ACTIVITY_CYCLING)) {","lastModifiedDate":"2021-10-21"},{"lineNumber":51,"author":{"gitId":"arvejw"},"content":"            return true;","lastModifiedDate":"2021-10-20"},{"lineNumber":52,"author":{"gitId":"arvejw"},"content":"        } else {","lastModifiedDate":"2021-10-20"},{"lineNumber":53,"author":{"gitId":"arvejw"},"content":"            return false;","lastModifiedDate":"2021-10-20"},{"lineNumber":54,"author":{"gitId":"arvejw"},"content":"        }","lastModifiedDate":"2021-10-20"},{"lineNumber":55,"author":{"gitId":"arvejw"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":56,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":57,"author":{"gitId":"arvejw"},"content":"    public boolean isDistanceActivity() {","lastModifiedDate":"2021-10-20"},{"lineNumber":58,"author":{"gitId":"arvejw"},"content":"        return isDistanceActivity;","lastModifiedDate":"2021-10-20"},{"lineNumber":59,"author":{"gitId":"arvejw"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":60,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":61,"author":{"gitId":"arvejw"},"content":"    public String getActivityDescription() {","lastModifiedDate":"2021-10-20"},{"lineNumber":62,"author":{"gitId":"arvejw"},"content":"        return activityDescription;","lastModifiedDate":"2021-10-20"},{"lineNumber":63,"author":{"gitId":"arvejw"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":64,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":65,"author":{"gitId":"arvejw"},"content":"    public int getActivityDistance() {","lastModifiedDate":"2021-10-20"},{"lineNumber":66,"author":{"gitId":"arvejw"},"content":"        return activityDistance;","lastModifiedDate":"2021-10-20"},{"lineNumber":67,"author":{"gitId":"arvejw"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":68,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":69,"author":{"gitId":"arvejw"},"content":"    public int getActivitySets() {","lastModifiedDate":"2021-10-20"},{"lineNumber":70,"author":{"gitId":"arvejw"},"content":"        return activitySets;","lastModifiedDate":"2021-10-20"},{"lineNumber":71,"author":{"gitId":"arvejw"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":72,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":73,"author":{"gitId":"arvejw"},"content":"    public int getActivityReps() {","lastModifiedDate":"2021-10-20"},{"lineNumber":74,"author":{"gitId":"arvejw"},"content":"        return activityReps;","lastModifiedDate":"2021-10-20"},{"lineNumber":75,"author":{"gitId":"arvejw"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":76,"author":{"gitId":"arvejw"},"content":"}","lastModifiedDate":"2021-10-20"}],"authorContributionMap":{"arvejw":76}},{"path":"src/test/java/seedu/duke/CommandManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"EdwardZYWang"},"content":"package seedu.duke;","lastModifiedDate":"2021-10-08"},{"lineNumber":2,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":3,"author":{"gitId":"EdwardZYWang"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-08"},{"lineNumber":4,"author":{"gitId":"EdwardZYWang"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-11-06"},{"lineNumber":5,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":6,"author":{"gitId":"EdwardZYWang"},"content":"//@@author EdwardZYWang","lastModifiedDate":"2021-11-02"},{"lineNumber":7,"author":{"gitId":"EdwardZYWang"},"content":"class CommandManagerTest {","lastModifiedDate":"2021-10-08"},{"lineNumber":8,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":9,"author":{"gitId":"EdwardZYWang"},"content":"    @Test","lastModifiedDate":"2021-10-08"},{"lineNumber":10,"author":{"gitId":"EdwardZYWang"},"content":"    void commandManager1() {","lastModifiedDate":"2021-10-08"},{"lineNumber":11,"author":{"gitId":"EdwardZYWang"},"content":"        String input \u003d \"workout leg day /at 23:59 /c 388\";","lastModifiedDate":"2021-10-08"},{"lineNumber":12,"author":{"gitId":"EdwardZYWang"},"content":"        String[] result \u003d input.trim().split(\" \", 2);","lastModifiedDate":"2021-10-08"},{"lineNumber":13,"author":{"gitId":"EdwardZYWang"},"content":"        String command \u003d result[0];","lastModifiedDate":"2021-10-08"},{"lineNumber":14,"author":{"gitId":"EdwardZYWang"},"content":"        assert command.equals(Keywords.INPUT_ADD_WORKOUT);","lastModifiedDate":"2021-10-14"},{"lineNumber":15,"author":{"gitId":"EdwardZYWang"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":16,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":17,"author":{"gitId":"EdwardZYWang"},"content":"    @Test","lastModifiedDate":"2021-10-08"},{"lineNumber":18,"author":{"gitId":"EdwardZYWang"},"content":"    void commandManager3() {","lastModifiedDate":"2021-10-08"},{"lineNumber":19,"author":{"gitId":"EdwardZYWang"},"content":"        String input \u003d \"addweight 30 12/12/2021\";","lastModifiedDate":"2021-10-08"},{"lineNumber":20,"author":{"gitId":"EdwardZYWang"},"content":"        String[] result \u003d input.trim().split(\" \", 2);","lastModifiedDate":"2021-10-08"},{"lineNumber":21,"author":{"gitId":"EdwardZYWang"},"content":"        String command \u003d result[0];","lastModifiedDate":"2021-10-08"},{"lineNumber":22,"author":{"gitId":"EdwardZYWang"},"content":"        assert command.equals(Keywords.INPUT_ADD_WEIGHT);","lastModifiedDate":"2021-10-14"},{"lineNumber":23,"author":{"gitId":"EdwardZYWang"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":24,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":25,"author":{"gitId":"EdwardZYWang"},"content":"    @Test","lastModifiedDate":"2021-10-14"},{"lineNumber":26,"author":{"gitId":"EdwardZYWang"},"content":"    void commandManager4() {","lastModifiedDate":"2021-10-14"},{"lineNumber":27,"author":{"gitId":"EdwardZYWang"},"content":"        String input \u003d \"bye\";","lastModifiedDate":"2021-10-14"},{"lineNumber":28,"author":{"gitId":"EdwardZYWang"},"content":"        String[] result \u003d input.trim().split(\" \", 2);","lastModifiedDate":"2021-10-14"},{"lineNumber":29,"author":{"gitId":"EdwardZYWang"},"content":"        String command \u003d result[0];","lastModifiedDate":"2021-10-14"},{"lineNumber":30,"author":{"gitId":"EdwardZYWang"},"content":"        assert command.equals(Keywords.INPUT_BYE);","lastModifiedDate":"2021-10-14"},{"lineNumber":31,"author":{"gitId":"EdwardZYWang"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":32,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":33,"author":{"gitId":"EdwardZYWang"},"content":"    @Test","lastModifiedDate":"2021-10-14"},{"lineNumber":34,"author":{"gitId":"EdwardZYWang"},"content":"    void commandManager5() {","lastModifiedDate":"2021-10-14"},{"lineNumber":35,"author":{"gitId":"EdwardZYWang"},"content":"        String input \u003d \"help\";","lastModifiedDate":"2021-10-14"},{"lineNumber":36,"author":{"gitId":"EdwardZYWang"},"content":"        String[] result \u003d input.trim().split(\" \", 2);","lastModifiedDate":"2021-10-14"},{"lineNumber":37,"author":{"gitId":"EdwardZYWang"},"content":"        String command \u003d result[0];","lastModifiedDate":"2021-10-14"},{"lineNumber":38,"author":{"gitId":"EdwardZYWang"},"content":"        assert command.equals(Keywords.INPUT_HELP);","lastModifiedDate":"2021-10-14"},{"lineNumber":39,"author":{"gitId":"EdwardZYWang"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":40,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":41,"author":{"gitId":"EdwardZYWang"},"content":"    @Test","lastModifiedDate":"2021-10-14"},{"lineNumber":42,"author":{"gitId":"EdwardZYWang"},"content":"    void commandManager6() {","lastModifiedDate":"2021-10-14"},{"lineNumber":43,"author":{"gitId":"EdwardZYWang"},"content":"        String input \u003d \"deletemeal\";","lastModifiedDate":"2021-10-14"},{"lineNumber":44,"author":{"gitId":"EdwardZYWang"},"content":"        String[] result \u003d input.trim().split(\" \", 2);","lastModifiedDate":"2021-10-14"},{"lineNumber":45,"author":{"gitId":"EdwardZYWang"},"content":"        String command \u003d result[0];","lastModifiedDate":"2021-10-14"},{"lineNumber":46,"author":{"gitId":"EdwardZYWang"},"content":"        assert command.equals(Keywords.DELETE_MEAL);","lastModifiedDate":"2021-10-14"},{"lineNumber":47,"author":{"gitId":"EdwardZYWang"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":48,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":49,"author":{"gitId":"EdwardZYWang"},"content":"    @Test","lastModifiedDate":"2021-10-14"},{"lineNumber":50,"author":{"gitId":"EdwardZYWang"},"content":"    void commandManager7() {","lastModifiedDate":"2021-10-14"},{"lineNumber":51,"author":{"gitId":"EdwardZYWang"},"content":"        String input \u003d \"listfluids\";","lastModifiedDate":"2021-10-14"},{"lineNumber":52,"author":{"gitId":"EdwardZYWang"},"content":"        String[] result \u003d input.trim().split(\" \", 2);","lastModifiedDate":"2021-10-14"},{"lineNumber":53,"author":{"gitId":"EdwardZYWang"},"content":"        String command \u003d result[0];","lastModifiedDate":"2021-10-14"},{"lineNumber":54,"author":{"gitId":"EdwardZYWang"},"content":"        assert command.equals(Keywords.LIST_DRINKS);","lastModifiedDate":"2021-10-14"},{"lineNumber":55,"author":{"gitId":"EdwardZYWang"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":56,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":57,"author":{"gitId":"EdwardZYWang"},"content":"    @Test","lastModifiedDate":"2021-11-06"},{"lineNumber":58,"author":{"gitId":"EdwardZYWang"},"content":"    void foodBankParser1() {","lastModifiedDate":"2021-11-06"},{"lineNumber":59,"author":{"gitId":"EdwardZYWang"},"content":"        String command \u003d \"\";","lastModifiedDate":"2021-11-06"},{"lineNumber":60,"author":{"gitId":"EdwardZYWang"},"content":"        String inputArguments \u003d \"addfluid coke\";","lastModifiedDate":"2021-11-06"},{"lineNumber":61,"author":{"gitId":"EdwardZYWang"},"content":"        String[] splitResults \u003d inputArguments.trim().split(\" \", 2);","lastModifiedDate":"2021-11-06"},{"lineNumber":62,"author":{"gitId":"EdwardZYWang"},"content":"        command \u003d splitResults[0];","lastModifiedDate":"2021-11-06"},{"lineNumber":63,"author":{"gitId":"EdwardZYWang"},"content":"        inputArguments \u003d (splitResults.length \u003d\u003d 2) ? splitResults[1] : null;","lastModifiedDate":"2021-11-06"},{"lineNumber":64,"author":{"gitId":"EdwardZYWang"},"content":"        assert command.equals(Keywords.ADD_FLUID);","lastModifiedDate":"2021-11-06"},{"lineNumber":65,"author":{"gitId":"EdwardZYWang"},"content":"        assert inputArguments.equals(\"coke\");","lastModifiedDate":"2021-11-06"},{"lineNumber":66,"author":{"gitId":"EdwardZYWang"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":67,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":68,"author":{"gitId":"EdwardZYWang"},"content":"    @Test","lastModifiedDate":"2021-11-06"},{"lineNumber":69,"author":{"gitId":"EdwardZYWang"},"content":"    void foodBankParser2() {","lastModifiedDate":"2021-11-06"},{"lineNumber":70,"author":{"gitId":"EdwardZYWang"},"content":"        String command \u003d \"\";","lastModifiedDate":"2021-11-06"},{"lineNumber":71,"author":{"gitId":"EdwardZYWang"},"content":"        String inputArguments \u003d \"addfluid\";","lastModifiedDate":"2021-11-06"},{"lineNumber":72,"author":{"gitId":"EdwardZYWang"},"content":"        String[] splitResults \u003d inputArguments.trim().split(\" \", 2);","lastModifiedDate":"2021-11-06"},{"lineNumber":73,"author":{"gitId":"EdwardZYWang"},"content":"        command \u003d splitResults[0];","lastModifiedDate":"2021-11-06"},{"lineNumber":74,"author":{"gitId":"EdwardZYWang"},"content":"        inputArguments \u003d (splitResults.length \u003d\u003d 2) ? splitResults[1] : null;","lastModifiedDate":"2021-11-06"},{"lineNumber":75,"author":{"gitId":"EdwardZYWang"},"content":"        assert command.equals(Keywords.ADD_FLUID);","lastModifiedDate":"2021-11-06"},{"lineNumber":76,"author":{"gitId":"EdwardZYWang"},"content":"        assert inputArguments \u003d\u003d null;","lastModifiedDate":"2021-11-06"},{"lineNumber":77,"author":{"gitId":"EdwardZYWang"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":78,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":79,"author":{"gitId":"EdwardZYWang"},"content":"    @Test","lastModifiedDate":"2021-11-06"},{"lineNumber":80,"author":{"gitId":"EdwardZYWang"},"content":"    void listParser() {","lastModifiedDate":"2021-11-06"},{"lineNumber":81,"author":{"gitId":"EdwardZYWang"},"content":"        String command \u003d \"\";","lastModifiedDate":"2021-11-06"},{"lineNumber":82,"author":{"gitId":"EdwardZYWang"},"content":"        String date \u003d \"\";","lastModifiedDate":"2021-11-06"},{"lineNumber":83,"author":{"gitId":"EdwardZYWang"},"content":"        String inputArguments \u003d \"meals 06/11/2022\";","lastModifiedDate":"2021-11-06"},{"lineNumber":84,"author":{"gitId":"EdwardZYWang"},"content":"        String[] splitResults \u003d inputArguments.trim().split(\" \", 2);","lastModifiedDate":"2021-11-06"},{"lineNumber":85,"author":{"gitId":"EdwardZYWang"},"content":"        command \u003d splitResults[0];","lastModifiedDate":"2021-11-06"},{"lineNumber":86,"author":{"gitId":"EdwardZYWang"},"content":"        date \u003d splitResults[1];","lastModifiedDate":"2021-11-06"},{"lineNumber":87,"author":{"gitId":"EdwardZYWang"},"content":"        assert command.equals(Keywords.MEALS);","lastModifiedDate":"2021-11-06"},{"lineNumber":88,"author":{"gitId":"EdwardZYWang"},"content":"        assert date.equals(\"06/11/2022\");","lastModifiedDate":"2021-11-06"},{"lineNumber":89,"author":{"gitId":"EdwardZYWang"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":90,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":91,"author":{"gitId":"EdwardZYWang"},"content":"    @Test","lastModifiedDate":"2021-11-06"},{"lineNumber":92,"author":{"gitId":"EdwardZYWang"},"content":"    void listParser1() {","lastModifiedDate":"2021-11-06"},{"lineNumber":93,"author":{"gitId":"EdwardZYWang"},"content":"        String command \u003d \"\";","lastModifiedDate":"2021-11-06"},{"lineNumber":94,"author":{"gitId":"EdwardZYWang"},"content":"        String date \u003d \"\";","lastModifiedDate":"2021-11-06"},{"lineNumber":95,"author":{"gitId":"EdwardZYWang"},"content":"        String inputArguments \u003d \"meals\";","lastModifiedDate":"2021-11-06"},{"lineNumber":96,"author":{"gitId":"EdwardZYWang"},"content":"        String[] splitResults \u003d inputArguments.trim().split(\" \", 2);","lastModifiedDate":"2021-11-06"},{"lineNumber":97,"author":{"gitId":"EdwardZYWang"},"content":"        command \u003d splitResults[0];","lastModifiedDate":"2021-11-06"},{"lineNumber":98,"author":{"gitId":"EdwardZYWang"},"content":"        assert command.equals(Keywords.MEALS);","lastModifiedDate":"2021-11-06"},{"lineNumber":99,"author":{"gitId":"EdwardZYWang"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":100,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":101,"author":{"gitId":"EdwardZYWang"},"content":"    @Test","lastModifiedDate":"2021-11-06"},{"lineNumber":102,"author":{"gitId":"EdwardZYWang"},"content":"    void addParser1() {","lastModifiedDate":"2021-11-06"},{"lineNumber":103,"author":{"gitId":"EdwardZYWang"},"content":"        String command \u003d \"\";","lastModifiedDate":"2021-11-06"},{"lineNumber":104,"author":{"gitId":"EdwardZYWang"},"content":"        String inputArguments \u003d \"\";","lastModifiedDate":"2021-11-06"},{"lineNumber":105,"author":{"gitId":"EdwardZYWang"},"content":"        String input \u003d \"meals pasta /c 100 /d 06/11/2021 /t 23:59\";","lastModifiedDate":"2021-11-06"},{"lineNumber":106,"author":{"gitId":"EdwardZYWang"},"content":"        String[] splitResults \u003d input.trim().split(\" \", 2);","lastModifiedDate":"2021-11-06"},{"lineNumber":107,"author":{"gitId":"EdwardZYWang"},"content":"        command \u003d splitResults[0];","lastModifiedDate":"2021-11-06"},{"lineNumber":108,"author":{"gitId":"EdwardZYWang"},"content":"        inputArguments \u003d (splitResults.length \u003d\u003d 2) ? splitResults[1] : null;","lastModifiedDate":"2021-11-06"},{"lineNumber":109,"author":{"gitId":"EdwardZYWang"},"content":"        assert command.equals(Keywords.MEALS);","lastModifiedDate":"2021-11-06"},{"lineNumber":110,"author":{"gitId":"EdwardZYWang"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":111,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":112,"author":{"gitId":"EdwardZYWang"},"content":"    @Test","lastModifiedDate":"2021-11-06"},{"lineNumber":113,"author":{"gitId":"EdwardZYWang"},"content":"    void addParser2() {","lastModifiedDate":"2021-11-06"},{"lineNumber":114,"author":{"gitId":"EdwardZYWang"},"content":"        String command \u003d \"\";","lastModifiedDate":"2021-11-06"},{"lineNumber":115,"author":{"gitId":"EdwardZYWang"},"content":"        String inputArguments \u003d \"\";","lastModifiedDate":"2021-11-06"},{"lineNumber":116,"author":{"gitId":"EdwardZYWang"},"content":"        String input \u003d \"meals\";","lastModifiedDate":"2021-11-06"},{"lineNumber":117,"author":{"gitId":"EdwardZYWang"},"content":"        String[] splitResults \u003d input.trim().split(\" \", 2);","lastModifiedDate":"2021-11-06"},{"lineNumber":118,"author":{"gitId":"EdwardZYWang"},"content":"        command \u003d splitResults[0];","lastModifiedDate":"2021-11-06"},{"lineNumber":119,"author":{"gitId":"EdwardZYWang"},"content":"        inputArguments \u003d (splitResults.length \u003d\u003d 2) ? splitResults[1] : null;","lastModifiedDate":"2021-11-06"},{"lineNumber":120,"author":{"gitId":"EdwardZYWang"},"content":"        assert command.equals(Keywords.MEALS);","lastModifiedDate":"2021-11-06"},{"lineNumber":121,"author":{"gitId":"EdwardZYWang"},"content":"        assert inputArguments \u003d\u003d null;","lastModifiedDate":"2021-11-06"},{"lineNumber":122,"author":{"gitId":"EdwardZYWang"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":123,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":124,"author":{"gitId":"EdwardZYWang"},"content":"}","lastModifiedDate":"2021-10-08"}],"authorContributionMap":{"EdwardZYWang":124}},{"path":"src/test/java/seedu/duke/FluidTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"pragyan01"},"content":"package seedu.duke;","lastModifiedDate":"2021-10-07"},{"lineNumber":2,"author":{"gitId":"pragyan01"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":3,"author":{"gitId":"pragyan01"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-07"},{"lineNumber":4,"author":{"gitId":"pragyan01"},"content":"import seedu.duke.exceptions.fluid.DeleteEmptyFluidListException;","lastModifiedDate":"2021-11-06"},{"lineNumber":5,"author":{"gitId":"pragyan01"},"content":"import seedu.duke.exceptions.fluid.EmptyFluidList;","lastModifiedDate":"2021-11-06"},{"lineNumber":6,"author":{"gitId":"pragyan01"},"content":"import seedu.duke.exceptions.fluid.FluidExceptions;","lastModifiedDate":"2021-10-28"},{"lineNumber":7,"author":{"gitId":"pragyan01"},"content":"import seedu.duke.exceptions.fluid.InvalidFluidDescription;","lastModifiedDate":"2021-11-06"},{"lineNumber":8,"author":{"gitId":"pragyan01"},"content":"import seedu.duke.exceptions.fluid.NoCaloriesEntered;","lastModifiedDate":"2021-11-06"},{"lineNumber":9,"author":{"gitId":"pragyan01"},"content":"import seedu.duke.exceptions.fluid.NoDeleteFluidIndexException;","lastModifiedDate":"2021-11-06"},{"lineNumber":10,"author":{"gitId":"pragyan01"},"content":"import seedu.duke.exceptions.fluid.NoFluidToDelete;","lastModifiedDate":"2021-11-06"},{"lineNumber":11,"author":{"gitId":"pragyan01"},"content":"import seedu.duke.exceptions.fluid.NoVolumeEntered;","lastModifiedDate":"2021-11-06"},{"lineNumber":12,"author":{"gitId":"pragyan01"},"content":"import seedu.duke.exceptions.foodbank.FoodBankException;","lastModifiedDate":"2021-11-06"},{"lineNumber":13,"author":{"gitId":"pragyan01"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":14,"author":{"gitId":"pragyan01"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-10-07"},{"lineNumber":15,"author":{"gitId":"pragyan01"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":16,"author":{"gitId":"pragyan01"},"content":"import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;","lastModifiedDate":"2021-11-06"},{"lineNumber":17,"author":{"gitId":"pragyan01"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2021-10-16"},{"lineNumber":18,"author":{"gitId":"pragyan01"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":19,"author":{"gitId":"pragyan01"},"content":"//@@author pragyan01","lastModifiedDate":"2021-11-02"},{"lineNumber":20,"author":{"gitId":"pragyan01"},"content":"class FluidTest {","lastModifiedDate":"2021-10-07"},{"lineNumber":21,"author":{"gitId":"pragyan01"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":22,"author":{"gitId":"pragyan01"},"content":"    @Test","lastModifiedDate":"2021-10-07"},{"lineNumber":23,"author":{"gitId":"pragyan01"},"content":"    void addFluid() {","lastModifiedDate":"2021-10-14"},{"lineNumber":24,"author":{"gitId":"pragyan01"},"content":"        Fluid fluid \u003d new Fluid();","lastModifiedDate":"2021-10-07"},{"lineNumber":25,"author":{"gitId":"pragyan01"},"content":"        String input \u003d \"coke /c 40 /v 100 /d 12/12/2021 /t 10:30\";","lastModifiedDate":"2021-11-06"},{"lineNumber":26,"author":{"gitId":"pragyan01"},"content":"        assertDoesNotThrow(() -\u003e fluid.addFluid(input));","lastModifiedDate":"2021-11-06"},{"lineNumber":27,"author":{"gitId":"pragyan01"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":28,"author":{"gitId":"pragyan01"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":29,"author":{"gitId":"pragyan01"},"content":"    @Test","lastModifiedDate":"2021-10-14"},{"lineNumber":30,"author":{"gitId":"pragyan01"},"content":"    void addFluid2() {","lastModifiedDate":"2021-10-14"},{"lineNumber":31,"author":{"gitId":"pragyan01"},"content":"        Fluid fluid \u003d new Fluid();","lastModifiedDate":"2021-10-14"},{"lineNumber":32,"author":{"gitId":"pragyan01"},"content":"        String input \u003d \"coke /c 40 /v 100 /d 12/12/2021\";","lastModifiedDate":"2021-11-06"},{"lineNumber":33,"author":{"gitId":"pragyan01"},"content":"        assertDoesNotThrow(() -\u003e fluid.addFluid(input));","lastModifiedDate":"2021-11-06"},{"lineNumber":34,"author":{"gitId":"pragyan01"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":35,"author":{"gitId":"pragyan01"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":36,"author":{"gitId":"pragyan01"},"content":"    @Test","lastModifiedDate":"2021-10-14"},{"lineNumber":37,"author":{"gitId":"pragyan01"},"content":"    void addFluid3() {","lastModifiedDate":"2021-10-14"},{"lineNumber":38,"author":{"gitId":"pragyan01"},"content":"        Fluid fluid \u003d new Fluid();","lastModifiedDate":"2021-10-14"},{"lineNumber":39,"author":{"gitId":"pragyan01"},"content":"        String input \u003d \"coke /c 40 /v 100 /t 10:30\";","lastModifiedDate":"2021-11-06"},{"lineNumber":40,"author":{"gitId":"pragyan01"},"content":"        assertDoesNotThrow(() -\u003e fluid.addFluid(input));","lastModifiedDate":"2021-11-06"},{"lineNumber":41,"author":{"gitId":"pragyan01"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":42,"author":{"gitId":"pragyan01"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":43,"author":{"gitId":"pragyan01"},"content":"    @Test","lastModifiedDate":"2021-10-14"},{"lineNumber":44,"author":{"gitId":"pragyan01"},"content":"    void addFluid4() {","lastModifiedDate":"2021-10-14"},{"lineNumber":45,"author":{"gitId":"pragyan01"},"content":"        Fluid fluid \u003d new Fluid();","lastModifiedDate":"2021-10-14"},{"lineNumber":46,"author":{"gitId":"pragyan01"},"content":"        String input \u003d \"coke /c 40 /v 100 /d 2021-3-9 /t 10:30\";","lastModifiedDate":"2021-11-06"},{"lineNumber":47,"author":{"gitId":"pragyan01"},"content":"        assertThrows(DateTimeParseException.class, () -\u003e fluid.addFluid(input));","lastModifiedDate":"2021-11-06"},{"lineNumber":48,"author":{"gitId":"pragyan01"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":49,"author":{"gitId":"pragyan01"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":50,"author":{"gitId":"pragyan01"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":51,"author":{"gitId":"pragyan01"},"content":"    @Test","lastModifiedDate":"2021-11-06"},{"lineNumber":52,"author":{"gitId":"pragyan01"},"content":"    void addFluid5() {","lastModifiedDate":"2021-11-06"},{"lineNumber":53,"author":{"gitId":"pragyan01"},"content":"        Fluid fluid \u003d new Fluid();","lastModifiedDate":"2021-11-06"},{"lineNumber":54,"author":{"gitId":"pragyan01"},"content":"        String input \u003d \"coke /c 40 /v 100 /d 12/12/2021 /t 2359pm\";","lastModifiedDate":"2021-11-06"},{"lineNumber":55,"author":{"gitId":"pragyan01"},"content":"        assertThrows(DateTimeParseException.class, () -\u003e fluid.addFluid(input));","lastModifiedDate":"2021-11-06"},{"lineNumber":56,"author":{"gitId":"pragyan01"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":57,"author":{"gitId":"pragyan01"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":58,"author":{"gitId":"pragyan01"},"content":"    @Test","lastModifiedDate":"2021-11-06"},{"lineNumber":59,"author":{"gitId":"pragyan01"},"content":"    void addFluid6() {","lastModifiedDate":"2021-11-06"},{"lineNumber":60,"author":{"gitId":"pragyan01"},"content":"        Fluid fluid \u003d new Fluid();","lastModifiedDate":"2021-11-06"},{"lineNumber":61,"author":{"gitId":"pragyan01"},"content":"        String input \u003d \"coke /c hello /v 100 /d 12/12/2021 /t 10:30\";","lastModifiedDate":"2021-11-06"},{"lineNumber":62,"author":{"gitId":"pragyan01"},"content":"        assertThrows(NumberFormatException.class, () -\u003e fluid.addFluid(input));","lastModifiedDate":"2021-10-14"},{"lineNumber":63,"author":{"gitId":"pragyan01"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":64,"author":{"gitId":"pragyan01"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":65,"author":{"gitId":"pragyan01"},"content":"    @Test","lastModifiedDate":"2021-10-16"},{"lineNumber":66,"author":{"gitId":"pragyan01"},"content":"    void addFluid7() {","lastModifiedDate":"2021-11-06"},{"lineNumber":67,"author":{"gitId":"pragyan01"},"content":"        Fluid fluid \u003d new Fluid();","lastModifiedDate":"2021-10-16"},{"lineNumber":68,"author":{"gitId":"pragyan01"},"content":"        String input \u003d \"coke /c 40 /v 100ml /d 12/12/2021 /t 10:30\";","lastModifiedDate":"2021-11-06"},{"lineNumber":69,"author":{"gitId":"pragyan01"},"content":"        assertThrows(NumberFormatException.class, () -\u003e fluid.addFluid(input));","lastModifiedDate":"2021-11-06"},{"lineNumber":70,"author":{"gitId":"pragyan01"},"content":"    }","lastModifiedDate":"2021-10-16"},{"lineNumber":71,"author":{"gitId":"pragyan01"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":72,"author":{"gitId":"pragyan01"},"content":"    @Test","lastModifiedDate":"2021-11-06"},{"lineNumber":73,"author":{"gitId":"pragyan01"},"content":"    void addFluid8() {","lastModifiedDate":"2021-11-06"},{"lineNumber":74,"author":{"gitId":"pragyan01"},"content":"        Fluid fluid \u003d new Fluid();","lastModifiedDate":"2021-11-06"},{"lineNumber":75,"author":{"gitId":"pragyan01"},"content":"        String input \u003d \"/c 40 /v 100 /d 12/12/2021 /t 10:30\";","lastModifiedDate":"2021-11-06"},{"lineNumber":76,"author":{"gitId":"pragyan01"},"content":"        assertThrows(InvalidFluidDescription.class, () -\u003e fluid.addFluid(input));","lastModifiedDate":"2021-11-06"},{"lineNumber":77,"author":{"gitId":"pragyan01"},"content":"    }","lastModifiedDate":"2021-10-16"},{"lineNumber":78,"author":{"gitId":"pragyan01"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":79,"author":{"gitId":"pragyan01"},"content":"    @Test","lastModifiedDate":"2021-11-06"},{"lineNumber":80,"author":{"gitId":"pragyan01"},"content":"    void addFluid9() {","lastModifiedDate":"2021-11-06"},{"lineNumber":81,"author":{"gitId":"pragyan01"},"content":"        Fluid fluid \u003d new Fluid();","lastModifiedDate":"2021-11-06"},{"lineNumber":82,"author":{"gitId":"pragyan01"},"content":"        String input \u003d \"coke /c 40 /d 12/12/2021 /t 10:30\";","lastModifiedDate":"2021-11-06"},{"lineNumber":83,"author":{"gitId":"pragyan01"},"content":"        assertThrows(NoVolumeEntered.class, () -\u003e fluid.addFluid(input));","lastModifiedDate":"2021-11-06"},{"lineNumber":84,"author":{"gitId":"pragyan01"},"content":"    }","lastModifiedDate":"2021-10-16"},{"lineNumber":85,"author":{"gitId":"pragyan01"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":86,"author":{"gitId":"pragyan01"},"content":"    @Test","lastModifiedDate":"2021-10-16"},{"lineNumber":87,"author":{"gitId":"pragyan01"},"content":"    void addFluid10() {   //DOES NOT WORK","lastModifiedDate":"2021-11-06"},{"lineNumber":88,"author":{"gitId":"pragyan01"},"content":"        Fluid fluid \u003d new Fluid();","lastModifiedDate":"2021-10-16"},{"lineNumber":89,"author":{"gitId":"pragyan01"},"content":"        String input \u003d \"coke /v 100 /d 12/12/2021 /t 10:30\";","lastModifiedDate":"2021-11-06"},{"lineNumber":90,"author":{"gitId":"pragyan01"},"content":"        assertThrows(NullPointerException.class, () -\u003e fluid.addFluid(input));","lastModifiedDate":"2021-11-06"},{"lineNumber":91,"author":{"gitId":"pragyan01"},"content":"    }","lastModifiedDate":"2021-10-16"},{"lineNumber":92,"author":{"gitId":"pragyan01"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":93,"author":{"gitId":"pragyan01"},"content":"    @Test","lastModifiedDate":"2021-10-16"},{"lineNumber":94,"author":{"gitId":"pragyan01"},"content":"    void deleteFluid() throws FoodBankException, FluidExceptions {","lastModifiedDate":"2021-11-06"},{"lineNumber":95,"author":{"gitId":"pragyan01"},"content":"        Fluid fluid \u003d new Fluid();","lastModifiedDate":"2021-10-16"},{"lineNumber":96,"author":{"gitId":"pragyan01"},"content":"        fluid.addFluid(\"coke /c 40 /v 100 /d 12/12/2021 /t 10:30\");","lastModifiedDate":"2021-11-06"},{"lineNumber":97,"author":{"gitId":"pragyan01"},"content":"        String input \u003d \"1\";","lastModifiedDate":"2021-11-06"},{"lineNumber":98,"author":{"gitId":"pragyan01"},"content":"        assertDoesNotThrow(() -\u003e fluid.deleteFluid(input));","lastModifiedDate":"2021-11-06"},{"lineNumber":99,"author":{"gitId":"pragyan01"},"content":"    }","lastModifiedDate":"2021-10-16"},{"lineNumber":100,"author":{"gitId":"pragyan01"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":101,"author":{"gitId":"pragyan01"},"content":"    @Test","lastModifiedDate":"2021-10-14"},{"lineNumber":102,"author":{"gitId":"pragyan01"},"content":"    void deleteFluid2() throws FoodBankException, FluidExceptions {","lastModifiedDate":"2021-11-06"},{"lineNumber":103,"author":{"gitId":"pragyan01"},"content":"        Fluid fluid \u003d new Fluid();","lastModifiedDate":"2021-10-14"},{"lineNumber":104,"author":{"gitId":"pragyan01"},"content":"        fluid.addFluid(\"coke /c 40 /v 100 /d 12/12/2021 /t 10:30\");","lastModifiedDate":"2021-10-14"},{"lineNumber":105,"author":{"gitId":"pragyan01"},"content":"        String input \u003d \"one\";","lastModifiedDate":"2021-11-06"},{"lineNumber":106,"author":{"gitId":"pragyan01"},"content":"        assertThrows(NumberFormatException.class, () -\u003e fluid.deleteFluid(input));","lastModifiedDate":"2021-10-14"},{"lineNumber":107,"author":{"gitId":"pragyan01"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":108,"author":{"gitId":"pragyan01"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":109,"author":{"gitId":"pragyan01"},"content":"    @Test","lastModifiedDate":"2021-10-16"},{"lineNumber":110,"author":{"gitId":"pragyan01"},"content":"    void deleteFluid3() throws FluidExceptions, FoodBankException {","lastModifiedDate":"2021-11-06"},{"lineNumber":111,"author":{"gitId":"pragyan01"},"content":"        Fluid fluid \u003d new Fluid();","lastModifiedDate":"2021-10-16"},{"lineNumber":112,"author":{"gitId":"pragyan01"},"content":"        fluid.addFluid(\"coke /c 40 /v 100 /d 12/12/2021 /t 10:30\");","lastModifiedDate":"2021-10-16"},{"lineNumber":113,"author":{"gitId":"pragyan01"},"content":"        String input \u003d null;","lastModifiedDate":"2021-11-06"},{"lineNumber":114,"author":{"gitId":"pragyan01"},"content":"        assertThrows(NoDeleteFluidIndexException.class, () -\u003e fluid.deleteFluid(input));","lastModifiedDate":"2021-11-06"},{"lineNumber":115,"author":{"gitId":"pragyan01"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":116,"author":{"gitId":"pragyan01"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":117,"author":{"gitId":"pragyan01"},"content":"    @Test","lastModifiedDate":"2021-11-06"},{"lineNumber":118,"author":{"gitId":"pragyan01"},"content":"    void deleteFluid4() throws FluidExceptions, FoodBankException {","lastModifiedDate":"2021-11-06"},{"lineNumber":119,"author":{"gitId":"pragyan01"},"content":"        Fluid fluid \u003d new Fluid();","lastModifiedDate":"2021-11-06"},{"lineNumber":120,"author":{"gitId":"pragyan01"},"content":"        fluid.addFluid(\"coke /c 40 /v 100 /d 12/12/2021 /t 10:30\");","lastModifiedDate":"2021-11-06"},{"lineNumber":121,"author":{"gitId":"pragyan01"},"content":"        String input \u003d \"\";","lastModifiedDate":"2021-11-06"},{"lineNumber":122,"author":{"gitId":"pragyan01"},"content":"        assertThrows(NumberFormatException.class, () -\u003e fluid.deleteFluid(input));","lastModifiedDate":"2021-10-16"},{"lineNumber":123,"author":{"gitId":"pragyan01"},"content":"    }","lastModifiedDate":"2021-10-16"},{"lineNumber":124,"author":{"gitId":"pragyan01"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":125,"author":{"gitId":"pragyan01"},"content":"    @Test","lastModifiedDate":"2021-10-16"},{"lineNumber":126,"author":{"gitId":"pragyan01"},"content":"    void deleteFluid5() {","lastModifiedDate":"2021-11-06"},{"lineNumber":127,"author":{"gitId":"pragyan01"},"content":"        Fluid fluid \u003d new Fluid();","lastModifiedDate":"2021-11-06"},{"lineNumber":128,"author":{"gitId":"pragyan01"},"content":"        String input \u003d \"1\";","lastModifiedDate":"2021-11-06"},{"lineNumber":129,"author":{"gitId":"pragyan01"},"content":"        assertThrows(DeleteEmptyFluidListException.class, () -\u003e fluid.deleteFluid(input));","lastModifiedDate":"2021-11-06"},{"lineNumber":130,"author":{"gitId":"pragyan01"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":131,"author":{"gitId":"pragyan01"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":132,"author":{"gitId":"pragyan01"},"content":"    @Test","lastModifiedDate":"2021-11-06"},{"lineNumber":133,"author":{"gitId":"pragyan01"},"content":"    void deleteFluid6() throws FluidExceptions, FoodBankException {","lastModifiedDate":"2021-11-06"},{"lineNumber":134,"author":{"gitId":"pragyan01"},"content":"        Fluid fluid \u003d new Fluid();","lastModifiedDate":"2021-11-06"},{"lineNumber":135,"author":{"gitId":"pragyan01"},"content":"        fluid.addFluid(\"coke /c 40 /v 100 /d 12/12/2021 /t 10:30\");","lastModifiedDate":"2021-11-06"},{"lineNumber":136,"author":{"gitId":"pragyan01"},"content":"        String input \u003d \"5\";","lastModifiedDate":"2021-11-06"},{"lineNumber":137,"author":{"gitId":"pragyan01"},"content":"        assertThrows(NoFluidToDelete.class, () -\u003e fluid.deleteFluid(input));","lastModifiedDate":"2021-11-06"},{"lineNumber":138,"author":{"gitId":"pragyan01"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":139,"author":{"gitId":"pragyan01"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":140,"author":{"gitId":"pragyan01"},"content":"    @Test","lastModifiedDate":"2021-11-06"},{"lineNumber":141,"author":{"gitId":"pragyan01"},"content":"    void deleteFluid7() throws FluidExceptions, FoodBankException {","lastModifiedDate":"2021-11-06"},{"lineNumber":142,"author":{"gitId":"pragyan01"},"content":"        Fluid fluid \u003d new Fluid();","lastModifiedDate":"2021-11-06"},{"lineNumber":143,"author":{"gitId":"pragyan01"},"content":"        fluid.addFluid(\"coke /c 40 /v 100 /d 12/12/2021 /t 10:30\");","lastModifiedDate":"2021-11-06"},{"lineNumber":144,"author":{"gitId":"pragyan01"},"content":"        String input \u003d \"-3\";","lastModifiedDate":"2021-11-06"},{"lineNumber":145,"author":{"gitId":"pragyan01"},"content":"        assertThrows(NoFluidToDelete.class, () -\u003e fluid.deleteFluid(input));","lastModifiedDate":"2021-11-06"},{"lineNumber":146,"author":{"gitId":"pragyan01"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":147,"author":{"gitId":"pragyan01"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":148,"author":{"gitId":"pragyan01"},"content":"    @Test","lastModifiedDate":"2021-11-06"},{"lineNumber":149,"author":{"gitId":"pragyan01"},"content":"    void listFluid() throws FoodBankException, FluidExceptions {","lastModifiedDate":"2021-11-06"},{"lineNumber":150,"author":{"gitId":"pragyan01"},"content":"        Fluid fluid \u003d new Fluid();","lastModifiedDate":"2021-10-20"},{"lineNumber":151,"author":{"gitId":"pragyan01"},"content":"        fluid.addFluid(\"coke /c 40 /v 100 /d 12/12/2021 /t 10:30\");","lastModifiedDate":"2021-11-06"},{"lineNumber":152,"author":{"gitId":"pragyan01"},"content":"        assertDoesNotThrow(() -\u003e fluid.listFluids(\"12/12/2021\"));","lastModifiedDate":"2021-11-06"},{"lineNumber":153,"author":{"gitId":"pragyan01"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":154,"author":{"gitId":"pragyan01"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":155,"author":{"gitId":"pragyan01"},"content":"    @Test","lastModifiedDate":"2021-11-06"},{"lineNumber":156,"author":{"gitId":"pragyan01"},"content":"    void listFluid2() throws FoodBankException, FluidExceptions {","lastModifiedDate":"2021-11-06"},{"lineNumber":157,"author":{"gitId":"pragyan01"},"content":"        Fluid fluid \u003d new Fluid();","lastModifiedDate":"2021-11-06"},{"lineNumber":158,"author":{"gitId":"pragyan01"},"content":"        fluid.addFluid(\"coke /c 40 /v 100 /d 12/12/2021 /t 10:30\");","lastModifiedDate":"2021-11-06"},{"lineNumber":159,"author":{"gitId":"pragyan01"},"content":"        fluid.addFluid(\"water /c 50 /v 200 /d 13/12/2021 /t 12:30\");","lastModifiedDate":"2021-11-06"},{"lineNumber":160,"author":{"gitId":"pragyan01"},"content":"        assertDoesNotThrow(() -\u003e fluid.listFluids(\"all\"));","lastModifiedDate":"2021-11-06"},{"lineNumber":161,"author":{"gitId":"pragyan01"},"content":"    }","lastModifiedDate":"2021-10-16"},{"lineNumber":162,"author":{"gitId":"pragyan01"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":163,"author":{"gitId":"pragyan01"},"content":"    @Test","lastModifiedDate":"2021-10-16"},{"lineNumber":164,"author":{"gitId":"pragyan01"},"content":"    void listFluid3() {","lastModifiedDate":"2021-11-06"},{"lineNumber":165,"author":{"gitId":"pragyan01"},"content":"        Fluid fluid \u003d new Fluid();","lastModifiedDate":"2021-10-20"},{"lineNumber":166,"author":{"gitId":"pragyan01"},"content":"        assertThrows(EmptyFluidList.class, () -\u003e fluid.listFluids(\"all\"));","lastModifiedDate":"2021-11-06"},{"lineNumber":167,"author":{"gitId":"pragyan01"},"content":"    }","lastModifiedDate":"2021-10-16"},{"lineNumber":168,"author":{"gitId":"pragyan01"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":169,"author":{"gitId":"pragyan01"},"content":"    @Test","lastModifiedDate":"2021-11-06"},{"lineNumber":170,"author":{"gitId":"pragyan01"},"content":"    void listFluid4() {","lastModifiedDate":"2021-11-06"},{"lineNumber":171,"author":{"gitId":"pragyan01"},"content":"        Fluid fluid \u003d new Fluid();","lastModifiedDate":"2021-11-06"},{"lineNumber":172,"author":{"gitId":"pragyan01"},"content":"        assertThrows(EmptyFluidList.class, () -\u003e fluid.listFluids(\"12/12/2021\"));","lastModifiedDate":"2021-11-06"},{"lineNumber":173,"author":{"gitId":"pragyan01"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":174,"author":{"gitId":"pragyan01"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":175,"author":{"gitId":"pragyan01"},"content":"    @Test","lastModifiedDate":"2021-11-06"},{"lineNumber":176,"author":{"gitId":"pragyan01"},"content":"    void listFluid5() throws FoodBankException, FluidExceptions {","lastModifiedDate":"2021-11-06"},{"lineNumber":177,"author":{"gitId":"pragyan01"},"content":"        Fluid fluid \u003d new Fluid();","lastModifiedDate":"2021-11-06"},{"lineNumber":178,"author":{"gitId":"pragyan01"},"content":"        fluid.addFluid(\"coke /c 40 /v 100 /d 21/12/2021 /t 10:30\");","lastModifiedDate":"2021-11-06"},{"lineNumber":179,"author":{"gitId":"pragyan01"},"content":"        assertDoesNotThrow(() -\u003e fluid.listFluids(\"10/12/2021\"));","lastModifiedDate":"2021-11-06"},{"lineNumber":180,"author":{"gitId":"pragyan01"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":181,"author":{"gitId":"pragyan01"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":182,"author":{"gitId":"pragyan01"},"content":"    @Test","lastModifiedDate":"2021-11-06"},{"lineNumber":183,"author":{"gitId":"pragyan01"},"content":"    void listFluid6() throws FoodBankException, FluidExceptions {","lastModifiedDate":"2021-11-06"},{"lineNumber":184,"author":{"gitId":"pragyan01"},"content":"        Fluid fluid \u003d new Fluid();","lastModifiedDate":"2021-11-06"},{"lineNumber":185,"author":{"gitId":"pragyan01"},"content":"        fluid.addFluid(\"coke /c 40 /v 100 /d 21/12/2021 /t 10:30\");","lastModifiedDate":"2021-11-06"},{"lineNumber":186,"author":{"gitId":"pragyan01"},"content":"        assertDoesNotThrow(() -\u003e fluid.listFluids(\"all\"));","lastModifiedDate":"2021-11-06"},{"lineNumber":187,"author":{"gitId":"pragyan01"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":188,"author":{"gitId":"pragyan01"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":189,"author":{"gitId":"pragyan01"},"content":"    @Test","lastModifiedDate":"2021-11-06"},{"lineNumber":190,"author":{"gitId":"pragyan01"},"content":"    void getCalories() throws FoodBankException, FluidExceptions {","lastModifiedDate":"2021-11-06"},{"lineNumber":191,"author":{"gitId":"pragyan01"},"content":"        Fluid fluid \u003d new Fluid();","lastModifiedDate":"2021-11-06"},{"lineNumber":192,"author":{"gitId":"pragyan01"},"content":"        fluid.addFluid(\"coke /c 40 /v 100\");","lastModifiedDate":"2021-11-06"},{"lineNumber":193,"author":{"gitId":"pragyan01"},"content":"        assertDoesNotThrow(() -\u003e fluid.getCalories(\"all\"));","lastModifiedDate":"2021-11-06"},{"lineNumber":194,"author":{"gitId":"pragyan01"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":195,"author":{"gitId":"pragyan01"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":196,"author":{"gitId":"pragyan01"},"content":"    @Test","lastModifiedDate":"2021-11-06"},{"lineNumber":197,"author":{"gitId":"pragyan01"},"content":"    void getCalories2() throws FoodBankException, FluidExceptions {","lastModifiedDate":"2021-11-06"},{"lineNumber":198,"author":{"gitId":"pragyan01"},"content":"        Fluid fluid \u003d new Fluid();","lastModifiedDate":"2021-11-06"},{"lineNumber":199,"author":{"gitId":"pragyan01"},"content":"        fluid.addFluid(\"coke /c 40 /v 100 /d 12/12/2021 /t 10:30\");","lastModifiedDate":"2021-11-06"},{"lineNumber":200,"author":{"gitId":"pragyan01"},"content":"        assertDoesNotThrow(() -\u003e fluid.getCalories(\"12/12/2021\"));","lastModifiedDate":"2021-11-06"},{"lineNumber":201,"author":{"gitId":"pragyan01"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":202,"author":{"gitId":"pragyan01"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":203,"author":{"gitId":"pragyan01"},"content":"    @Test","lastModifiedDate":"2021-11-06"},{"lineNumber":204,"author":{"gitId":"pragyan01"},"content":"    void getCalories3() throws FoodBankException, FluidExceptions {","lastModifiedDate":"2021-11-06"},{"lineNumber":205,"author":{"gitId":"pragyan01"},"content":"        Fluid fluid \u003d new Fluid();","lastModifiedDate":"2021-11-06"},{"lineNumber":206,"author":{"gitId":"pragyan01"},"content":"        fluid.addFluid(\"coke /c 40 /v 100 /d 12/12/2021 /t 10:30\");","lastModifiedDate":"2021-11-06"},{"lineNumber":207,"author":{"gitId":"pragyan01"},"content":"        assertDoesNotThrow(() -\u003e fluid.getCalories(\"23/12/2021\"));","lastModifiedDate":"2021-11-06"},{"lineNumber":208,"author":{"gitId":"pragyan01"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":209,"author":{"gitId":"pragyan01"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":210,"author":{"gitId":"pragyan01"},"content":"    @Test","lastModifiedDate":"2021-11-06"},{"lineNumber":211,"author":{"gitId":"pragyan01"},"content":"    void getVolume() throws FoodBankException, FluidExceptions {","lastModifiedDate":"2021-11-06"},{"lineNumber":212,"author":{"gitId":"pragyan01"},"content":"        Fluid fluid \u003d new Fluid();","lastModifiedDate":"2021-11-06"},{"lineNumber":213,"author":{"gitId":"pragyan01"},"content":"        fluid.addFluid(\"coke /c 40 /v 100\");","lastModifiedDate":"2021-11-06"},{"lineNumber":214,"author":{"gitId":"pragyan01"},"content":"        assertDoesNotThrow(() -\u003e fluid.getVolume(\"all\"));","lastModifiedDate":"2021-11-06"},{"lineNumber":215,"author":{"gitId":"pragyan01"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":216,"author":{"gitId":"pragyan01"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":217,"author":{"gitId":"pragyan01"},"content":"    @Test","lastModifiedDate":"2021-11-06"},{"lineNumber":218,"author":{"gitId":"pragyan01"},"content":"    void getVolume2() throws FoodBankException, FluidExceptions {","lastModifiedDate":"2021-11-06"},{"lineNumber":219,"author":{"gitId":"pragyan01"},"content":"        Fluid fluid \u003d new Fluid();","lastModifiedDate":"2021-11-06"},{"lineNumber":220,"author":{"gitId":"pragyan01"},"content":"        fluid.addFluid(\"coke /c 40 /v 100 /d 12/12/2021 /t 10:30\");","lastModifiedDate":"2021-11-06"},{"lineNumber":221,"author":{"gitId":"pragyan01"},"content":"        assertDoesNotThrow(() -\u003e fluid.getVolume(\"12/12/2021\"));","lastModifiedDate":"2021-11-06"},{"lineNumber":222,"author":{"gitId":"pragyan01"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":223,"author":{"gitId":"pragyan01"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":224,"author":{"gitId":"pragyan01"},"content":"    @Test","lastModifiedDate":"2021-11-06"},{"lineNumber":225,"author":{"gitId":"pragyan01"},"content":"    void getVolume3() throws FoodBankException, FluidExceptions {","lastModifiedDate":"2021-11-06"},{"lineNumber":226,"author":{"gitId":"pragyan01"},"content":"        Fluid fluid \u003d new Fluid();","lastModifiedDate":"2021-11-06"},{"lineNumber":227,"author":{"gitId":"pragyan01"},"content":"        fluid.addFluid(\"coke /c 40 /v 100 /d 12/12/2021 /t 10:30\");","lastModifiedDate":"2021-11-06"},{"lineNumber":228,"author":{"gitId":"pragyan01"},"content":"        assertDoesNotThrow(() -\u003e fluid.getVolume(\"23/12/2021\"));","lastModifiedDate":"2021-11-06"},{"lineNumber":229,"author":{"gitId":"pragyan01"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":230,"author":{"gitId":"pragyan01"},"content":"}","lastModifiedDate":"2021-10-07"}],"authorContributionMap":{"pragyan01":230}},{"path":"src/test/java/seedu/duke/MealTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VishalJeyaram"},"content":"package seedu.duke;","lastModifiedDate":"2021-10-07"},{"lineNumber":2,"author":{"gitId":"VishalJeyaram"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":3,"author":{"gitId":"VishalJeyaram"},"content":"import org.junit.jupiter.api.Assertions;","lastModifiedDate":"2021-10-07"},{"lineNumber":4,"author":{"gitId":"VishalJeyaram"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-07"},{"lineNumber":5,"author":{"gitId":"VishalJeyaram"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":6,"author":{"gitId":"arvejw"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-10-11"},{"lineNumber":7,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":8,"author":{"gitId":"VishalJeyaram"},"content":"//@@author VishalJeyaram","lastModifiedDate":"2021-11-02"},{"lineNumber":9,"author":{"gitId":"VishalJeyaram"},"content":"class MealTest {","lastModifiedDate":"2021-10-07"},{"lineNumber":10,"author":{"gitId":"VishalJeyaram"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":11,"author":{"gitId":"VishalJeyaram"},"content":"    /*","lastModifiedDate":"2021-10-21"},{"lineNumber":12,"author":{"gitId":"VishalJeyaram"},"content":"    @Test","lastModifiedDate":"2021-10-07"},{"lineNumber":13,"author":{"gitId":"VishalJeyaram"},"content":"    void addMeal1() {","lastModifiedDate":"2021-10-14"},{"lineNumber":14,"author":{"gitId":"VishalJeyaram"},"content":"        Meal meal \u003d new Meal();","lastModifiedDate":"2021-10-07"},{"lineNumber":15,"author":{"gitId":"VishalJeyaram"},"content":"        String input \u003d \"pasta /c 356 /d 14/09/2021 /t 7pm\";","lastModifiedDate":"2021-10-14"},{"lineNumber":16,"author":{"gitId":"VishalJeyaram"},"content":"        Assertions.assertThrows(DateTimeParseException.class, () -\u003e {","lastModifiedDate":"2021-10-11"},{"lineNumber":17,"author":{"gitId":"VishalJeyaram"},"content":"            meal.addMeal(input);","lastModifiedDate":"2021-10-07"},{"lineNumber":18,"author":{"gitId":"VishalJeyaram"},"content":"        });","lastModifiedDate":"2021-10-07"},{"lineNumber":19,"author":{"gitId":"VishalJeyaram"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":20,"author":{"gitId":"VishalJeyaram"},"content":"     */","lastModifiedDate":"2021-10-21"},{"lineNumber":21,"author":{"gitId":"VishalJeyaram"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":22,"author":{"gitId":"VishalJeyaram"},"content":"    @Test","lastModifiedDate":"2021-10-14"},{"lineNumber":23,"author":{"gitId":"VishalJeyaram"},"content":"    void addMeal2() {","lastModifiedDate":"2021-10-14"},{"lineNumber":24,"author":{"gitId":"VishalJeyaram"},"content":"        Meal meal \u003d new Meal();","lastModifiedDate":"2021-10-14"},{"lineNumber":25,"author":{"gitId":"VishalJeyaram"},"content":"        String input \u003d \"pasta /c 356 /d 14-09-2021 /t 17:45\";","lastModifiedDate":"2021-10-14"},{"lineNumber":26,"author":{"gitId":"VishalJeyaram"},"content":"        Assertions.assertThrows(DateTimeParseException.class, () -\u003e {","lastModifiedDate":"2021-10-14"},{"lineNumber":27,"author":{"gitId":"VishalJeyaram"},"content":"            meal.addMeal(input);","lastModifiedDate":"2021-10-14"},{"lineNumber":28,"author":{"gitId":"VishalJeyaram"},"content":"        });","lastModifiedDate":"2021-10-14"},{"lineNumber":29,"author":{"gitId":"VishalJeyaram"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":30,"author":{"gitId":"VishalJeyaram"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":31,"author":{"gitId":"VishalJeyaram"},"content":"    @Test","lastModifiedDate":"2021-10-14"},{"lineNumber":32,"author":{"gitId":"VishalJeyaram"},"content":"    void addMeal3() {","lastModifiedDate":"2021-10-14"},{"lineNumber":33,"author":{"gitId":"VishalJeyaram"},"content":"        Meal meal \u003d new Meal();","lastModifiedDate":"2021-10-14"},{"lineNumber":34,"author":{"gitId":"VishalJeyaram"},"content":"        String input \u003d \"pasta /c sauce /d 14/09/2021 /t 17:45\";","lastModifiedDate":"2021-10-14"},{"lineNumber":35,"author":{"gitId":"VishalJeyaram"},"content":"        Assertions.assertThrows(NumberFormatException.class, () -\u003e {","lastModifiedDate":"2021-10-14"},{"lineNumber":36,"author":{"gitId":"VishalJeyaram"},"content":"            meal.addMeal(input);","lastModifiedDate":"2021-10-14"},{"lineNumber":37,"author":{"gitId":"VishalJeyaram"},"content":"        });","lastModifiedDate":"2021-10-14"},{"lineNumber":38,"author":{"gitId":"VishalJeyaram"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":39,"author":{"gitId":"VishalJeyaram"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":40,"author":{"gitId":"VishalJeyaram"},"content":"    /*","lastModifiedDate":"2021-10-21"},{"lineNumber":41,"author":{"gitId":"VishalJeyaram"},"content":"    @Test","lastModifiedDate":"2021-10-14"},{"lineNumber":42,"author":{"gitId":"VishalJeyaram"},"content":"    void deleteMeal1() throws MealException, FoodBankException {","lastModifiedDate":"2021-10-18"},{"lineNumber":43,"author":{"gitId":"VishalJeyaram"},"content":"        Meal meal \u003d new Meal();","lastModifiedDate":"2021-10-14"},{"lineNumber":44,"author":{"gitId":"VishalJeyaram"},"content":"        String input \u003d \"pasta /c 300 /d 14/09/2021 /t 17:45\";","lastModifiedDate":"2021-10-14"},{"lineNumber":45,"author":{"gitId":"VishalJeyaram"},"content":"        meal.addMeal(input);","lastModifiedDate":"2021-10-14"},{"lineNumber":46,"author":{"gitId":"VishalJeyaram"},"content":"        String deleteInput \u003d \"two\";","lastModifiedDate":"2021-10-14"},{"lineNumber":47,"author":{"gitId":"VishalJeyaram"},"content":"        Assertions.assertThrows(NumberFormatException.class, () -\u003e {","lastModifiedDate":"2021-10-14"},{"lineNumber":48,"author":{"gitId":"VishalJeyaram"},"content":"            meal.deleteMeal(deleteInput);","lastModifiedDate":"2021-10-14"},{"lineNumber":49,"author":{"gitId":"VishalJeyaram"},"content":"        });","lastModifiedDate":"2021-10-14"},{"lineNumber":50,"author":{"gitId":"VishalJeyaram"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":51,"author":{"gitId":"VishalJeyaram"},"content":"     */","lastModifiedDate":"2021-10-21"},{"lineNumber":52,"author":{"gitId":"VishalJeyaram"},"content":"}","lastModifiedDate":"2021-10-07"}],"authorContributionMap":{"VishalJeyaram":50,"arvejw":2}},{"path":"src/test/java/seedu/duke/ParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"arvejw"},"content":"package seedu.duke;","lastModifiedDate":"2021-10-31"},{"lineNumber":2,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":3,"author":{"gitId":"arvejw"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-31"},{"lineNumber":4,"author":{"gitId":"arvejw"},"content":"import seedu.duke.exceptions.schedule.ScheduleException;","lastModifiedDate":"2021-10-31"},{"lineNumber":5,"author":{"gitId":"arvejw"},"content":"import seedu.duke.exceptions.workout.WorkoutException;","lastModifiedDate":"2021-10-31"},{"lineNumber":6,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":7,"author":{"gitId":"arvejw"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-10-31"},{"lineNumber":8,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":9,"author":{"gitId":"arvejw"},"content":"import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;","lastModifiedDate":"2021-10-31"},{"lineNumber":10,"author":{"gitId":"arvejw"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2021-10-31"},{"lineNumber":11,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":12,"author":{"gitId":"arvejw"},"content":"class ParserTest {","lastModifiedDate":"2021-10-31"},{"lineNumber":13,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":14,"author":{"gitId":"arvejw"},"content":"    //@@author arvejw","lastModifiedDate":"2021-10-31"},{"lineNumber":15,"author":{"gitId":"arvejw"},"content":"    @Test","lastModifiedDate":"2021-10-31"},{"lineNumber":16,"author":{"gitId":"arvejw"},"content":"    void getCaloriesBurnedForWorkout_negativeCalories_exceptionThrow() {","lastModifiedDate":"2021-10-31"},{"lineNumber":17,"author":{"gitId":"arvejw"},"content":"        String input \u003d \"test /c -123\";","lastModifiedDate":"2021-10-31"},{"lineNumber":18,"author":{"gitId":"arvejw"},"content":"        assertThrows(WorkoutException.class, () -\u003e Parser.getCaloriesBurnedForWorkout(input));","lastModifiedDate":"2021-10-31"},{"lineNumber":19,"author":{"gitId":"arvejw"},"content":"    }","lastModifiedDate":"2021-10-31"},{"lineNumber":20,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":21,"author":{"gitId":"arvejw"},"content":"    //@@author arvejw","lastModifiedDate":"2021-10-31"},{"lineNumber":22,"author":{"gitId":"arvejw"},"content":"    @Test","lastModifiedDate":"2021-10-31"},{"lineNumber":23,"author":{"gitId":"arvejw"},"content":"    void getCaloriesBurnedForWorkout_nonIntegerCalories_exceptionThrow() {","lastModifiedDate":"2021-10-31"},{"lineNumber":24,"author":{"gitId":"arvejw"},"content":"        String input \u003d \"test /c !%!@\";","lastModifiedDate":"2021-10-31"},{"lineNumber":25,"author":{"gitId":"arvejw"},"content":"        assertThrows(NumberFormatException.class, () -\u003e Parser.getCaloriesBurnedForWorkout(input));","lastModifiedDate":"2021-10-31"},{"lineNumber":26,"author":{"gitId":"arvejw"},"content":"    }","lastModifiedDate":"2021-10-31"},{"lineNumber":27,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":28,"author":{"gitId":"arvejw"},"content":"    //@@author arvejw","lastModifiedDate":"2021-10-31"},{"lineNumber":29,"author":{"gitId":"arvejw"},"content":"    @Test","lastModifiedDate":"2021-10-31"},{"lineNumber":30,"author":{"gitId":"arvejw"},"content":"    void getCaloriesBurnedForWorkout_positiveIntegerCalories_noExceptionThrow() {","lastModifiedDate":"2021-10-31"},{"lineNumber":31,"author":{"gitId":"arvejw"},"content":"        String input \u003d \"test /c 123\";","lastModifiedDate":"2021-10-31"},{"lineNumber":32,"author":{"gitId":"arvejw"},"content":"        assertDoesNotThrow(() -\u003e Parser.getCaloriesBurnedForWorkout(input));","lastModifiedDate":"2021-10-31"},{"lineNumber":33,"author":{"gitId":"arvejw"},"content":"    }","lastModifiedDate":"2021-10-31"},{"lineNumber":34,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":35,"author":{"gitId":"arvejw"},"content":"    //@@author arvejw","lastModifiedDate":"2021-10-31"},{"lineNumber":36,"author":{"gitId":"arvejw"},"content":"    @Test","lastModifiedDate":"2021-10-31"},{"lineNumber":37,"author":{"gitId":"arvejw"},"content":"    void getDateNoDateTracker_invalidDateFormat_exceptionThrow() {","lastModifiedDate":"2021-10-31"},{"lineNumber":38,"author":{"gitId":"arvejw"},"content":"        String input \u003d \"test /d 1/12/21 /t 17:50\";","lastModifiedDate":"2021-10-31"},{"lineNumber":39,"author":{"gitId":"arvejw"},"content":"        assertThrows(DateTimeParseException.class, () -\u003e Parser.getDateNoDateTracker(input));","lastModifiedDate":"2021-10-31"},{"lineNumber":40,"author":{"gitId":"arvejw"},"content":"    }","lastModifiedDate":"2021-10-31"},{"lineNumber":41,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":42,"author":{"gitId":"arvejw"},"content":"    //@@author arvejw","lastModifiedDate":"2021-10-31"},{"lineNumber":43,"author":{"gitId":"arvejw"},"content":"    @Test","lastModifiedDate":"2021-10-31"},{"lineNumber":44,"author":{"gitId":"arvejw"},"content":"    void getDateNoDateTracker_validDateFormat_noExceptionThrow() {","lastModifiedDate":"2021-10-31"},{"lineNumber":45,"author":{"gitId":"arvejw"},"content":"        String input \u003d \"test /d 12/12/2021 /t 17:50\";","lastModifiedDate":"2021-10-31"},{"lineNumber":46,"author":{"gitId":"arvejw"},"content":"        assertDoesNotThrow(() -\u003e Parser.getDateNoDateTracker(input));","lastModifiedDate":"2021-10-31"},{"lineNumber":47,"author":{"gitId":"arvejw"},"content":"    }","lastModifiedDate":"2021-10-31"},{"lineNumber":48,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":49,"author":{"gitId":"arvejw"},"content":"    //@@author arvejw","lastModifiedDate":"2021-10-31"},{"lineNumber":50,"author":{"gitId":"arvejw"},"content":"    @Test","lastModifiedDate":"2021-10-31"},{"lineNumber":51,"author":{"gitId":"arvejw"},"content":"    void getScheduleDescription_noDescription_exceptionThrow() {","lastModifiedDate":"2021-10-31"},{"lineNumber":52,"author":{"gitId":"arvejw"},"content":"        String input \u003d \"/d 12/12/2021 /t 17:59\";","lastModifiedDate":"2021-10-31"},{"lineNumber":53,"author":{"gitId":"arvejw"},"content":"        assertThrows(ScheduleException.class, () -\u003e Parser.getScheduleDescription(input));","lastModifiedDate":"2021-10-31"},{"lineNumber":54,"author":{"gitId":"arvejw"},"content":"    }","lastModifiedDate":"2021-10-31"},{"lineNumber":55,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":56,"author":{"gitId":"arvejw"},"content":"    //@@author arvejw","lastModifiedDate":"2021-10-31"},{"lineNumber":57,"author":{"gitId":"arvejw"},"content":"    @Test","lastModifiedDate":"2021-10-31"},{"lineNumber":58,"author":{"gitId":"arvejw"},"content":"    void getScheduleDescription_validDescription_noExceptionThrow() {","lastModifiedDate":"2021-10-31"},{"lineNumber":59,"author":{"gitId":"arvejw"},"content":"        String input \u003d \"test /d 12/12/2021 /t 17:59\";","lastModifiedDate":"2021-10-31"},{"lineNumber":60,"author":{"gitId":"arvejw"},"content":"        assertDoesNotThrow(() -\u003e Parser.getScheduleDescription(input));","lastModifiedDate":"2021-10-31"},{"lineNumber":61,"author":{"gitId":"arvejw"},"content":"    }","lastModifiedDate":"2021-10-31"},{"lineNumber":62,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":63,"author":{"gitId":"arvejw"},"content":"    //@@author arvejw","lastModifiedDate":"2021-10-31"},{"lineNumber":64,"author":{"gitId":"arvejw"},"content":"    @Test","lastModifiedDate":"2021-10-31"},{"lineNumber":65,"author":{"gitId":"arvejw"},"content":"    void getActivities_noQuantifier_exceptionThrow() {","lastModifiedDate":"2021-10-31"},{"lineNumber":66,"author":{"gitId":"arvejw"},"content":"        String input \u003d \"add schedule test123 /d 28/12/2021 /t 18:59 /a squats:310\";","lastModifiedDate":"2021-10-31"},{"lineNumber":67,"author":{"gitId":"arvejw"},"content":"        assertThrows(ScheduleException.class, () -\u003e Parser.getActivities(input));","lastModifiedDate":"2021-10-31"},{"lineNumber":68,"author":{"gitId":"arvejw"},"content":"    }","lastModifiedDate":"2021-10-31"},{"lineNumber":69,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":70,"author":{"gitId":"arvejw"},"content":"    //@@author arvejw","lastModifiedDate":"2021-10-31"},{"lineNumber":71,"author":{"gitId":"arvejw"},"content":"    @Test","lastModifiedDate":"2021-10-31"},{"lineNumber":72,"author":{"gitId":"arvejw"},"content":"    void getActivities_noSeparator_exceptionThrow() {","lastModifiedDate":"2021-10-31"},{"lineNumber":73,"author":{"gitId":"arvejw"},"content":"        String input2 \u003d \"add schedule test123 /d 28/12/2021 /t 18:59 /a swimming  800\";","lastModifiedDate":"2021-10-31"},{"lineNumber":74,"author":{"gitId":"arvejw"},"content":"        assertThrows(ScheduleException.class, () -\u003e Parser.getActivities(input2));","lastModifiedDate":"2021-10-31"},{"lineNumber":75,"author":{"gitId":"arvejw"},"content":"    }","lastModifiedDate":"2021-10-31"},{"lineNumber":76,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":77,"author":{"gitId":"arvejw"},"content":"    //@@author arvejw","lastModifiedDate":"2021-10-31"},{"lineNumber":78,"author":{"gitId":"arvejw"},"content":"    @Test","lastModifiedDate":"2021-10-31"},{"lineNumber":79,"author":{"gitId":"arvejw"},"content":"    void getActivities_noMarker_exceptionThrow() {","lastModifiedDate":"2021-10-31"},{"lineNumber":80,"author":{"gitId":"arvejw"},"content":"        String input \u003d \"add schedule test123 /d 28/12/2021 /t 18:59 /a squats:3x10 swimming:600\";","lastModifiedDate":"2021-10-31"},{"lineNumber":81,"author":{"gitId":"arvejw"},"content":"        assertThrows(ScheduleException.class, () -\u003e Parser.getActivities(input));","lastModifiedDate":"2021-10-31"},{"lineNumber":82,"author":{"gitId":"arvejw"},"content":"    }","lastModifiedDate":"2021-10-31"},{"lineNumber":83,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":84,"author":{"gitId":"arvejw"},"content":"    //@@author arvejw","lastModifiedDate":"2021-10-31"},{"lineNumber":85,"author":{"gitId":"arvejw"},"content":"    @Test","lastModifiedDate":"2021-10-31"},{"lineNumber":86,"author":{"gitId":"arvejw"},"content":"    void getActivities_validActivityFormat_exceptionThrow() {","lastModifiedDate":"2021-10-31"},{"lineNumber":87,"author":{"gitId":"arvejw"},"content":"        String input1 \u003d \"add schedule test123 /d 28/12/2021 /t 18:59 /a swimming:310 /r\";","lastModifiedDate":"2021-10-31"},{"lineNumber":88,"author":{"gitId":"arvejw"},"content":"        String input2 \u003d \"add schedule test123 /d 28/12/2021 /t 18:59 /a squats:3x10 /r\";","lastModifiedDate":"2021-10-31"},{"lineNumber":89,"author":{"gitId":"arvejw"},"content":"        String input3 \u003d \"add schedule test123 /d 28/12/2021 /t 18:59 /a squats: 3x10, swimming:1000, running:1000\";","lastModifiedDate":"2021-10-31"},{"lineNumber":90,"author":{"gitId":"arvejw"},"content":"        String[] inputs \u003d {input1, input2, input3};","lastModifiedDate":"2021-10-31"},{"lineNumber":91,"author":{"gitId":"arvejw"},"content":"        for (String i : inputs) {","lastModifiedDate":"2021-10-31"},{"lineNumber":92,"author":{"gitId":"arvejw"},"content":"            assertDoesNotThrow(() -\u003e Parser.getActivities(i));","lastModifiedDate":"2021-10-31"},{"lineNumber":93,"author":{"gitId":"arvejw"},"content":"        }","lastModifiedDate":"2021-10-31"},{"lineNumber":94,"author":{"gitId":"arvejw"},"content":"    }","lastModifiedDate":"2021-10-31"},{"lineNumber":95,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":96,"author":{"gitId":"arvejw"},"content":"}","lastModifiedDate":"2021-10-31"}],"authorContributionMap":{"arvejw":96}},{"path":"src/test/java/seedu/duke/StorageTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"EdwardZYWang"},"content":"package seedu.duke;","lastModifiedDate":"2021-11-06"},{"lineNumber":2,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":3,"author":{"gitId":"EdwardZYWang"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-11-06"},{"lineNumber":4,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":5,"author":{"gitId":"EdwardZYWang"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-11-06"},{"lineNumber":6,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":7,"author":{"gitId":"EdwardZYWang"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-11-06"},{"lineNumber":8,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":9,"author":{"gitId":"EdwardZYWang"},"content":"class StorageTest {","lastModifiedDate":"2021-11-06"},{"lineNumber":10,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":11,"author":{"gitId":"EdwardZYWang"},"content":"    @Test","lastModifiedDate":"2021-11-06"},{"lineNumber":12,"author":{"gitId":"EdwardZYWang"},"content":"    void mealSummary() {","lastModifiedDate":"2021-11-06"},{"lineNumber":13,"author":{"gitId":"EdwardZYWang"},"content":"        ArrayList\u003cString\u003e mealTest \u003d new ArrayList\u003cString\u003e();","lastModifiedDate":"2021-11-06"},{"lineNumber":14,"author":{"gitId":"EdwardZYWang"},"content":"        mealTest.add(\"pasta /c 100 /d 06/11/2021 /t 23:59\");","lastModifiedDate":"2021-11-06"},{"lineNumber":15,"author":{"gitId":"EdwardZYWang"},"content":"        mealTest.add(\"risotto /c 200 /d 06/11/2021 /t 23:59\");","lastModifiedDate":"2021-11-06"},{"lineNumber":16,"author":{"gitId":"EdwardZYWang"},"content":"        mealTest.add(\"linguini /c 300 /d 06/11/2021 /t 23:59\");","lastModifiedDate":"2021-11-06"},{"lineNumber":17,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":18,"author":{"gitId":"EdwardZYWang"},"content":"        int totalCalories \u003d 0;","lastModifiedDate":"2021-11-06"},{"lineNumber":19,"author":{"gitId":"EdwardZYWang"},"content":"        int i \u003d 1;","lastModifiedDate":"2021-11-06"},{"lineNumber":20,"author":{"gitId":"EdwardZYWang"},"content":"        for (String m : mealTest) {","lastModifiedDate":"2021-11-06"},{"lineNumber":21,"author":{"gitId":"EdwardZYWang"},"content":"            if (m.contains(\"[\")) {","lastModifiedDate":"2021-11-06"},{"lineNumber":22,"author":{"gitId":"EdwardZYWang"},"content":"                String[] descriptor \u003d m.substring(1).split(\" /c \");","lastModifiedDate":"2021-11-06"},{"lineNumber":23,"author":{"gitId":"EdwardZYWang"},"content":"                String[] calorie \u003d descriptor[1].split(\" /d \");","lastModifiedDate":"2021-11-06"},{"lineNumber":24,"author":{"gitId":"EdwardZYWang"},"content":"                String description \u003d descriptor[0];","lastModifiedDate":"2021-11-06"},{"lineNumber":25,"author":{"gitId":"EdwardZYWang"},"content":"                System.out.println(i + \". \" + description);","lastModifiedDate":"2021-11-06"},{"lineNumber":26,"author":{"gitId":"EdwardZYWang"},"content":"                String calorieIndiv \u003d calorie[0];","lastModifiedDate":"2021-11-06"},{"lineNumber":27,"author":{"gitId":"EdwardZYWang"},"content":"                totalCalories +\u003d Integer.parseInt(calorieIndiv);","lastModifiedDate":"2021-11-06"},{"lineNumber":28,"author":{"gitId":"EdwardZYWang"},"content":"                i++;","lastModifiedDate":"2021-11-06"},{"lineNumber":29,"author":{"gitId":"EdwardZYWang"},"content":"            } else {","lastModifiedDate":"2021-11-06"},{"lineNumber":30,"author":{"gitId":"EdwardZYWang"},"content":"                String[] descriptor \u003d m.split(\" /c \");","lastModifiedDate":"2021-11-06"},{"lineNumber":31,"author":{"gitId":"EdwardZYWang"},"content":"                String[] calorie \u003d descriptor[1].split(\" /d \");","lastModifiedDate":"2021-11-06"},{"lineNumber":32,"author":{"gitId":"EdwardZYWang"},"content":"                String description \u003d descriptor[0];","lastModifiedDate":"2021-11-06"},{"lineNumber":33,"author":{"gitId":"EdwardZYWang"},"content":"                System.out.println(i + \". \" + description);","lastModifiedDate":"2021-11-06"},{"lineNumber":34,"author":{"gitId":"EdwardZYWang"},"content":"                String calorieIndiv \u003d calorie[0];","lastModifiedDate":"2021-11-06"},{"lineNumber":35,"author":{"gitId":"EdwardZYWang"},"content":"                totalCalories +\u003d Integer.parseInt(calorieIndiv);","lastModifiedDate":"2021-11-06"},{"lineNumber":36,"author":{"gitId":"EdwardZYWang"},"content":"                i++;","lastModifiedDate":"2021-11-06"},{"lineNumber":37,"author":{"gitId":"EdwardZYWang"},"content":"            }","lastModifiedDate":"2021-11-06"},{"lineNumber":38,"author":{"gitId":"EdwardZYWang"},"content":"        }","lastModifiedDate":"2021-11-06"},{"lineNumber":39,"author":{"gitId":"EdwardZYWang"},"content":"        System.out.println(System.lineSeparator() + \"Total number of meals \u003d \" + (i - 1));","lastModifiedDate":"2021-11-06"},{"lineNumber":40,"author":{"gitId":"EdwardZYWang"},"content":"        System.out.println(\"Total calories \u003d \" + totalCalories);","lastModifiedDate":"2021-11-06"},{"lineNumber":41,"author":{"gitId":"EdwardZYWang"},"content":"        assertEquals(600, totalCalories);","lastModifiedDate":"2021-11-06"},{"lineNumber":42,"author":{"gitId":"EdwardZYWang"},"content":"        assertEquals(3, mealTest.size());","lastModifiedDate":"2021-11-06"},{"lineNumber":43,"author":{"gitId":"EdwardZYWang"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":44,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":45,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":46,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":47,"author":{"gitId":"EdwardZYWang"},"content":"    @Test","lastModifiedDate":"2021-11-06"},{"lineNumber":48,"author":{"gitId":"EdwardZYWang"},"content":"    void fluidSummary() {","lastModifiedDate":"2021-11-06"},{"lineNumber":49,"author":{"gitId":"EdwardZYWang"},"content":"        ArrayList\u003cString\u003e fluidTest \u003d new ArrayList\u003cString\u003e();","lastModifiedDate":"2021-11-06"},{"lineNumber":50,"author":{"gitId":"EdwardZYWang"},"content":"        fluidTest.add(\"cola /c 100 /v 100 /d 06/11/2021 /t 23:59\");","lastModifiedDate":"2021-11-06"},{"lineNumber":51,"author":{"gitId":"EdwardZYWang"},"content":"        fluidTest.add(\"water /c 200 /v 200 /d 06/11/2021 /t 23:59\");","lastModifiedDate":"2021-11-06"},{"lineNumber":52,"author":{"gitId":"EdwardZYWang"},"content":"        fluidTest.add(\"sprite /c 300 /v 300 /d 06/11/2021 /t 23:59\");","lastModifiedDate":"2021-11-06"},{"lineNumber":53,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":54,"author":{"gitId":"EdwardZYWang"},"content":"        int totalCalories \u003d 0;","lastModifiedDate":"2021-11-06"},{"lineNumber":55,"author":{"gitId":"EdwardZYWang"},"content":"        int totalVolume \u003d 0;","lastModifiedDate":"2021-11-06"},{"lineNumber":56,"author":{"gitId":"EdwardZYWang"},"content":"        int i \u003d 1;","lastModifiedDate":"2021-11-06"},{"lineNumber":57,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":58,"author":{"gitId":"EdwardZYWang"},"content":"        for (String f : fluidTest) {","lastModifiedDate":"2021-11-06"},{"lineNumber":59,"author":{"gitId":"EdwardZYWang"},"content":"            if (f.contains(\"[\")) {","lastModifiedDate":"2021-11-06"},{"lineNumber":60,"author":{"gitId":"EdwardZYWang"},"content":"                String[] descriptor \u003d f.substring(1).split(\" /c \");","lastModifiedDate":"2021-11-06"},{"lineNumber":61,"author":{"gitId":"EdwardZYWang"},"content":"                String[] calorie \u003d descriptor[1].split(\" /v \");","lastModifiedDate":"2021-11-06"},{"lineNumber":62,"author":{"gitId":"EdwardZYWang"},"content":"                String[] volumeSplitter \u003d calorie[1].split(\" /d \");","lastModifiedDate":"2021-11-06"},{"lineNumber":63,"author":{"gitId":"EdwardZYWang"},"content":"                String description \u003d descriptor[0];","lastModifiedDate":"2021-11-06"},{"lineNumber":64,"author":{"gitId":"EdwardZYWang"},"content":"                System.out.println(i + \". \" + description);","lastModifiedDate":"2021-11-06"},{"lineNumber":65,"author":{"gitId":"EdwardZYWang"},"content":"                String calorieIndiv \u003d calorie[0];","lastModifiedDate":"2021-11-06"},{"lineNumber":66,"author":{"gitId":"EdwardZYWang"},"content":"                String volumeIndiv \u003d volumeSplitter[0];","lastModifiedDate":"2021-11-06"},{"lineNumber":67,"author":{"gitId":"EdwardZYWang"},"content":"                totalCalories +\u003d Integer.parseInt(calorieIndiv);","lastModifiedDate":"2021-11-06"},{"lineNumber":68,"author":{"gitId":"EdwardZYWang"},"content":"                totalVolume +\u003d Integer.parseInt((volumeIndiv));","lastModifiedDate":"2021-11-06"},{"lineNumber":69,"author":{"gitId":"EdwardZYWang"},"content":"                i++;","lastModifiedDate":"2021-11-06"},{"lineNumber":70,"author":{"gitId":"EdwardZYWang"},"content":"            } else {","lastModifiedDate":"2021-11-06"},{"lineNumber":71,"author":{"gitId":"EdwardZYWang"},"content":"                String[] descriptor \u003d f.split(\" /c \");","lastModifiedDate":"2021-11-06"},{"lineNumber":72,"author":{"gitId":"EdwardZYWang"},"content":"                String[] calorie \u003d descriptor[1].split(\" /v \");","lastModifiedDate":"2021-11-06"},{"lineNumber":73,"author":{"gitId":"EdwardZYWang"},"content":"                String[] volumeSplitter \u003d calorie[1].split(\" /d \");","lastModifiedDate":"2021-11-06"},{"lineNumber":74,"author":{"gitId":"EdwardZYWang"},"content":"                String description \u003d descriptor[0];","lastModifiedDate":"2021-11-06"},{"lineNumber":75,"author":{"gitId":"EdwardZYWang"},"content":"                System.out.println(i + \". \" + description);","lastModifiedDate":"2021-11-06"},{"lineNumber":76,"author":{"gitId":"EdwardZYWang"},"content":"                String calorieIndiv \u003d calorie[0];","lastModifiedDate":"2021-11-06"},{"lineNumber":77,"author":{"gitId":"EdwardZYWang"},"content":"                String volumeIndiv \u003d volumeSplitter[0];","lastModifiedDate":"2021-11-06"},{"lineNumber":78,"author":{"gitId":"EdwardZYWang"},"content":"                totalCalories +\u003d Integer.parseInt(calorieIndiv);","lastModifiedDate":"2021-11-06"},{"lineNumber":79,"author":{"gitId":"EdwardZYWang"},"content":"                totalVolume +\u003d Integer.parseInt((volumeIndiv));","lastModifiedDate":"2021-11-06"},{"lineNumber":80,"author":{"gitId":"EdwardZYWang"},"content":"                i++;","lastModifiedDate":"2021-11-06"},{"lineNumber":81,"author":{"gitId":"EdwardZYWang"},"content":"            }","lastModifiedDate":"2021-11-06"},{"lineNumber":82,"author":{"gitId":"EdwardZYWang"},"content":"        }","lastModifiedDate":"2021-11-06"},{"lineNumber":83,"author":{"gitId":"EdwardZYWang"},"content":"        if (totalVolume \u003e 0) {","lastModifiedDate":"2021-11-06"},{"lineNumber":84,"author":{"gitId":"EdwardZYWang"},"content":"            System.out.println(\"Total volume consumed \u003d \" + totalVolume);","lastModifiedDate":"2021-11-06"},{"lineNumber":85,"author":{"gitId":"EdwardZYWang"},"content":"        } else {","lastModifiedDate":"2021-11-06"},{"lineNumber":86,"author":{"gitId":"EdwardZYWang"},"content":"            System.out.println(System.lineSeparator() + \"Total variety of drinks \u003d \" + (i - 1));","lastModifiedDate":"2021-11-06"},{"lineNumber":87,"author":{"gitId":"EdwardZYWang"},"content":"        }","lastModifiedDate":"2021-11-06"},{"lineNumber":88,"author":{"gitId":"EdwardZYWang"},"content":"        System.out.println(\"Total calories \u003d \" + totalCalories);","lastModifiedDate":"2021-11-06"},{"lineNumber":89,"author":{"gitId":"EdwardZYWang"},"content":"        assertEquals(600, totalCalories);","lastModifiedDate":"2021-11-06"},{"lineNumber":90,"author":{"gitId":"EdwardZYWang"},"content":"        assertEquals(3,fluidTest.size());","lastModifiedDate":"2021-11-06"},{"lineNumber":91,"author":{"gitId":"EdwardZYWang"},"content":"        assertEquals(600,totalVolume);","lastModifiedDate":"2021-11-06"},{"lineNumber":92,"author":{"gitId":"EdwardZYWang"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":93,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":94,"author":{"gitId":"EdwardZYWang"},"content":"    @Test","lastModifiedDate":"2021-11-06"},{"lineNumber":95,"author":{"gitId":"EdwardZYWang"},"content":"    void workoutSummary() {","lastModifiedDate":"2021-11-06"},{"lineNumber":96,"author":{"gitId":"EdwardZYWang"},"content":"        ArrayList\u003cString\u003e workoutTest \u003d new ArrayList\u003cString\u003e();","lastModifiedDate":"2021-11-06"},{"lineNumber":97,"author":{"gitId":"EdwardZYWang"},"content":"        workoutTest.add(\"pull ups /c 100 /d 06/11/2021 /t 23:59\");","lastModifiedDate":"2021-11-06"},{"lineNumber":98,"author":{"gitId":"EdwardZYWang"},"content":"        workoutTest.add(\"run /c 200 /d 06/11/2021 /t 23:59\");","lastModifiedDate":"2021-11-06"},{"lineNumber":99,"author":{"gitId":"EdwardZYWang"},"content":"        workoutTest.add(\"fight /c 300 /d 06/11/2021 /t 23:59\");","lastModifiedDate":"2021-11-06"},{"lineNumber":100,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":101,"author":{"gitId":"EdwardZYWang"},"content":"        int totalCalories \u003d 0;","lastModifiedDate":"2021-11-06"},{"lineNumber":102,"author":{"gitId":"EdwardZYWang"},"content":"        int i \u003d 1;","lastModifiedDate":"2021-11-06"},{"lineNumber":103,"author":{"gitId":"EdwardZYWang"},"content":"        for (String w : workoutTest) {","lastModifiedDate":"2021-11-06"},{"lineNumber":104,"author":{"gitId":"EdwardZYWang"},"content":"            if (w.contains(\"[\")) {","lastModifiedDate":"2021-11-06"},{"lineNumber":105,"author":{"gitId":"EdwardZYWang"},"content":"                String[] descriptor \u003d w.substring(1).split(\" /c \");","lastModifiedDate":"2021-11-06"},{"lineNumber":106,"author":{"gitId":"EdwardZYWang"},"content":"                String[] calorie \u003d descriptor[1].split(\" /d \");","lastModifiedDate":"2021-11-06"},{"lineNumber":107,"author":{"gitId":"EdwardZYWang"},"content":"                String description \u003d descriptor[0];","lastModifiedDate":"2021-11-06"},{"lineNumber":108,"author":{"gitId":"EdwardZYWang"},"content":"                System.out.println(i + \". \" + description);","lastModifiedDate":"2021-11-06"},{"lineNumber":109,"author":{"gitId":"EdwardZYWang"},"content":"                String calorieIndiv \u003d calorie[0];","lastModifiedDate":"2021-11-06"},{"lineNumber":110,"author":{"gitId":"EdwardZYWang"},"content":"                totalCalories +\u003d Integer.parseInt(calorieIndiv);","lastModifiedDate":"2021-11-06"},{"lineNumber":111,"author":{"gitId":"EdwardZYWang"},"content":"                i++;","lastModifiedDate":"2021-11-06"},{"lineNumber":112,"author":{"gitId":"EdwardZYWang"},"content":"            } else {","lastModifiedDate":"2021-11-06"},{"lineNumber":113,"author":{"gitId":"EdwardZYWang"},"content":"                String[] descriptor \u003d w.split(\" /c \");","lastModifiedDate":"2021-11-06"},{"lineNumber":114,"author":{"gitId":"EdwardZYWang"},"content":"                String[] calorie \u003d descriptor[1].split(\" /d \");","lastModifiedDate":"2021-11-06"},{"lineNumber":115,"author":{"gitId":"EdwardZYWang"},"content":"                String description \u003d descriptor[0];","lastModifiedDate":"2021-11-06"},{"lineNumber":116,"author":{"gitId":"EdwardZYWang"},"content":"                System.out.println(i + \". \" + description);","lastModifiedDate":"2021-11-06"},{"lineNumber":117,"author":{"gitId":"EdwardZYWang"},"content":"                String calorieIndiv \u003d calorie[0];","lastModifiedDate":"2021-11-06"},{"lineNumber":118,"author":{"gitId":"EdwardZYWang"},"content":"                totalCalories +\u003d Integer.parseInt(calorieIndiv);","lastModifiedDate":"2021-11-06"},{"lineNumber":119,"author":{"gitId":"EdwardZYWang"},"content":"                i++;","lastModifiedDate":"2021-11-06"},{"lineNumber":120,"author":{"gitId":"EdwardZYWang"},"content":"            }","lastModifiedDate":"2021-11-06"},{"lineNumber":121,"author":{"gitId":"EdwardZYWang"},"content":"        }","lastModifiedDate":"2021-11-06"},{"lineNumber":122,"author":{"gitId":"EdwardZYWang"},"content":"        System.out.println(System.lineSeparator() + \"Completed Workouts \u003d \" + (i - 1));","lastModifiedDate":"2021-11-06"},{"lineNumber":123,"author":{"gitId":"EdwardZYWang"},"content":"        System.out.println(\"Total calories burned \u003d \" + totalCalories);","lastModifiedDate":"2021-11-06"},{"lineNumber":124,"author":{"gitId":"EdwardZYWang"},"content":"        assertEquals(600, totalCalories);","lastModifiedDate":"2021-11-06"},{"lineNumber":125,"author":{"gitId":"EdwardZYWang"},"content":"        assertEquals(3, workoutTest.size());","lastModifiedDate":"2021-11-06"},{"lineNumber":126,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":127,"author":{"gitId":"EdwardZYWang"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":128,"author":{"gitId":"EdwardZYWang"},"content":"}","lastModifiedDate":"2021-11-06"}],"authorContributionMap":{"EdwardZYWang":128}},{"path":"src/test/java/seedu/duke/UiTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"EdwardZYWang"},"content":"package seedu.duke;","lastModifiedDate":"2021-11-06"},{"lineNumber":2,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":3,"author":{"gitId":"EdwardZYWang"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-11-06"},{"lineNumber":4,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":5,"author":{"gitId":"EdwardZYWang"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-11-06"},{"lineNumber":6,"author":{"gitId":"EdwardZYWang"},"content":"import static seedu.duke.ClickfitMessages.MEMORY_STARTUP_N_INPUT;","lastModifiedDate":"2021-11-06"},{"lineNumber":7,"author":{"gitId":"EdwardZYWang"},"content":"import static seedu.duke.ClickfitMessages.MEMORY_STARTUP_Y_INPUT;","lastModifiedDate":"2021-11-06"},{"lineNumber":8,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":9,"author":{"gitId":"EdwardZYWang"},"content":"//@@author EdwardZYWang","lastModifiedDate":"2021-11-06"},{"lineNumber":10,"author":{"gitId":"EdwardZYWang"},"content":"class UiTest {","lastModifiedDate":"2021-11-06"},{"lineNumber":11,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":12,"author":{"gitId":"EdwardZYWang"},"content":"    @Test","lastModifiedDate":"2021-11-06"},{"lineNumber":13,"author":{"gitId":"EdwardZYWang"},"content":"    void memoryStartup() {","lastModifiedDate":"2021-11-06"},{"lineNumber":14,"author":{"gitId":"EdwardZYWang"},"content":"        boolean flag \u003d false;","lastModifiedDate":"2021-11-06"},{"lineNumber":15,"author":{"gitId":"EdwardZYWang"},"content":"        boolean result \u003d false;","lastModifiedDate":"2021-11-06"},{"lineNumber":16,"author":{"gitId":"EdwardZYWang"},"content":"        String uiInput \u003d \"y\";","lastModifiedDate":"2021-11-06"},{"lineNumber":17,"author":{"gitId":"EdwardZYWang"},"content":"        if (uiInput.trim().equals(\"y\")) {","lastModifiedDate":"2021-11-06"},{"lineNumber":18,"author":{"gitId":"EdwardZYWang"},"content":"            System.out.println(MEMORY_STARTUP_Y_INPUT);","lastModifiedDate":"2021-11-06"},{"lineNumber":19,"author":{"gitId":"EdwardZYWang"},"content":"            result \u003d true;","lastModifiedDate":"2021-11-06"},{"lineNumber":20,"author":{"gitId":"EdwardZYWang"},"content":"            flag \u003d true;","lastModifiedDate":"2021-11-06"},{"lineNumber":21,"author":{"gitId":"EdwardZYWang"},"content":"        }","lastModifiedDate":"2021-11-06"},{"lineNumber":22,"author":{"gitId":"EdwardZYWang"},"content":"        assertEquals(true, flag);","lastModifiedDate":"2021-11-06"},{"lineNumber":23,"author":{"gitId":"EdwardZYWang"},"content":"        assertEquals(true, result);","lastModifiedDate":"2021-11-06"},{"lineNumber":24,"author":{"gitId":"EdwardZYWang"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":25,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":26,"author":{"gitId":"EdwardZYWang"},"content":"    @Test","lastModifiedDate":"2021-11-06"},{"lineNumber":27,"author":{"gitId":"EdwardZYWang"},"content":"    void memoryStartup1() {","lastModifiedDate":"2021-11-06"},{"lineNumber":28,"author":{"gitId":"EdwardZYWang"},"content":"        boolean flag \u003d false;","lastModifiedDate":"2021-11-06"},{"lineNumber":29,"author":{"gitId":"EdwardZYWang"},"content":"        boolean result \u003d false;","lastModifiedDate":"2021-11-06"},{"lineNumber":30,"author":{"gitId":"EdwardZYWang"},"content":"        String uiInput \u003d \"y\";","lastModifiedDate":"2021-11-06"},{"lineNumber":31,"author":{"gitId":"EdwardZYWang"},"content":"        if (uiInput.isEmpty()) {","lastModifiedDate":"2021-11-06"},{"lineNumber":32,"author":{"gitId":"EdwardZYWang"},"content":"            System.out.println(MEMORY_STARTUP_N_INPUT);","lastModifiedDate":"2021-11-06"},{"lineNumber":33,"author":{"gitId":"EdwardZYWang"},"content":"            System.out.println(System.lineSeparator() + \"What would you like to do?\");","lastModifiedDate":"2021-11-06"},{"lineNumber":34,"author":{"gitId":"EdwardZYWang"},"content":"            result \u003d false;","lastModifiedDate":"2021-11-06"},{"lineNumber":35,"author":{"gitId":"EdwardZYWang"},"content":"            flag \u003d true;","lastModifiedDate":"2021-11-06"},{"lineNumber":36,"author":{"gitId":"EdwardZYWang"},"content":"            assertEquals(true, flag);","lastModifiedDate":"2021-11-06"},{"lineNumber":37,"author":{"gitId":"EdwardZYWang"},"content":"            assertEquals(false, result);","lastModifiedDate":"2021-11-06"},{"lineNumber":38,"author":{"gitId":"EdwardZYWang"},"content":"        }","lastModifiedDate":"2021-11-06"},{"lineNumber":39,"author":{"gitId":"EdwardZYWang"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":40,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":41,"author":{"gitId":"EdwardZYWang"},"content":"}","lastModifiedDate":"2021-11-06"}],"authorContributionMap":{"EdwardZYWang":41}},{"path":"src/test/java/seedu/duke/UserHelpTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"EdwardZYWang"},"content":"package seedu.duke;","lastModifiedDate":"2021-10-11"},{"lineNumber":2,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":3,"author":{"gitId":"EdwardZYWang"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-11"},{"lineNumber":4,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":5,"author":{"gitId":"EdwardZYWang"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-11"},{"lineNumber":6,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":7,"author":{"gitId":"EdwardZYWang"},"content":"class UserHelpTest {","lastModifiedDate":"2021-10-11"},{"lineNumber":8,"author":{"gitId":"EdwardZYWang"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":9,"author":{"gitId":"EdwardZYWang"},"content":"    //@@author EdwardZYWang","lastModifiedDate":"2021-11-02"},{"lineNumber":10,"author":{"gitId":"EdwardZYWang"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":11,"author":{"gitId":"EdwardZYWang"},"content":"    void generateUserHelpParameters() {","lastModifiedDate":"2021-10-11"},{"lineNumber":12,"author":{"gitId":"EdwardZYWang"},"content":"        String input \u003d \"commands\";","lastModifiedDate":"2021-10-11"},{"lineNumber":13,"author":{"gitId":"EdwardZYWang"},"content":"        assertTrue(input.trim().equals(\"commands\"));","lastModifiedDate":"2021-10-11"},{"lineNumber":14,"author":{"gitId":"EdwardZYWang"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":15,"author":{"gitId":"EdwardZYWang"},"content":"}","lastModifiedDate":"2021-10-11"}],"authorContributionMap":{"EdwardZYWang":15}},{"path":"src/test/java/seedu/duke/WeightTrackerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"teoziyiivy"},"content":"package seedu.duke;","lastModifiedDate":"2021-10-08"},{"lineNumber":2,"author":{"gitId":"teoziyiivy"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":3,"author":{"gitId":"teoziyiivy"},"content":"import org.junit.jupiter.api.Assertions;","lastModifiedDate":"2021-10-08"},{"lineNumber":4,"author":{"gitId":"teoziyiivy"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-08"},{"lineNumber":5,"author":{"gitId":"VishalJeyaram"},"content":"import seedu.duke.exceptions.weight.WeightException;","lastModifiedDate":"2021-10-28"},{"lineNumber":6,"author":{"gitId":"teoziyiivy"},"content":"import seedu.duke.exceptions.weight.DeleteWeightException;","lastModifiedDate":"2021-10-26"},{"lineNumber":7,"author":{"gitId":"teoziyiivy"},"content":"import seedu.duke.exceptions.weight.DeleteWeightIndexException;","lastModifiedDate":"2021-10-28"},{"lineNumber":8,"author":{"gitId":"teoziyiivy"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":9,"author":{"gitId":"teoziyiivy"},"content":"import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;","lastModifiedDate":"2021-11-03"},{"lineNumber":10,"author":{"gitId":"teoziyiivy"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":11,"author":{"gitId":"teoziyiivy"},"content":"//@@author teoziyiivy","lastModifiedDate":"2021-11-02"},{"lineNumber":12,"author":{"gitId":"teoziyiivy"},"content":"public class WeightTrackerTest {","lastModifiedDate":"2021-10-08"},{"lineNumber":13,"author":{"gitId":"teoziyiivy"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":14,"author":{"gitId":"teoziyiivy"},"content":"    @Test","lastModifiedDate":"2021-10-08"},{"lineNumber":15,"author":{"gitId":"teoziyiivy"},"content":"    void addWeight_validFormat1_noExceptionThrow() {","lastModifiedDate":"2021-11-03"},{"lineNumber":16,"author":{"gitId":"teoziyiivy"},"content":"        WeightTracker weights \u003d new WeightTracker();","lastModifiedDate":"2021-11-03"},{"lineNumber":17,"author":{"gitId":"teoziyiivy"},"content":"        String input \u003d \"50 /d 03/11/2021\";","lastModifiedDate":"2021-11-03"},{"lineNumber":18,"author":{"gitId":"teoziyiivy"},"content":"        assertDoesNotThrow(() -\u003e weights.addWeight(input));","lastModifiedDate":"2021-11-03"},{"lineNumber":19,"author":{"gitId":"teoziyiivy"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":20,"author":{"gitId":"teoziyiivy"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":21,"author":{"gitId":"teoziyiivy"},"content":"    @Test","lastModifiedDate":"2021-11-03"},{"lineNumber":22,"author":{"gitId":"teoziyiivy"},"content":"    void addWeight_validFormat2_noExceptionThrow() {","lastModifiedDate":"2021-11-03"},{"lineNumber":23,"author":{"gitId":"teoziyiivy"},"content":"        WeightTracker weights \u003d new WeightTracker();","lastModifiedDate":"2021-11-03"},{"lineNumber":24,"author":{"gitId":"teoziyiivy"},"content":"        String input \u003d \"50\";","lastModifiedDate":"2021-11-03"},{"lineNumber":25,"author":{"gitId":"teoziyiivy"},"content":"        assertDoesNotThrow(() -\u003e weights.addWeight(input));","lastModifiedDate":"2021-11-03"},{"lineNumber":26,"author":{"gitId":"teoziyiivy"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":27,"author":{"gitId":"teoziyiivy"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":28,"author":{"gitId":"teoziyiivy"},"content":"    @Test","lastModifiedDate":"2021-11-03"},{"lineNumber":29,"author":{"gitId":"teoziyiivy"},"content":"    void addWeight_invalidFormat_exceptionThrow() {","lastModifiedDate":"2021-11-03"},{"lineNumber":30,"author":{"gitId":"teoziyiivy"},"content":"        WeightTracker weights \u003d new WeightTracker();","lastModifiedDate":"2021-10-08"},{"lineNumber":31,"author":{"gitId":"teoziyiivy"},"content":"        String input \u003d \"\";","lastModifiedDate":"2021-10-26"},{"lineNumber":32,"author":{"gitId":"teoziyiivy"},"content":"        Assertions.assertThrows(WeightException.class, () -\u003e weights.addWeight(input));","lastModifiedDate":"2021-10-28"},{"lineNumber":33,"author":{"gitId":"teoziyiivy"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":34,"author":{"gitId":"teoziyiivy"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":35,"author":{"gitId":"teoziyiivy"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":36,"author":{"gitId":"teoziyiivy"},"content":"    void deleteWeight_validFormat_noExceptionThrow() throws WeightException {","lastModifiedDate":"2021-11-03"},{"lineNumber":37,"author":{"gitId":"teoziyiivy"},"content":"        WeightTracker weights \u003d new WeightTracker();","lastModifiedDate":"2021-11-03"},{"lineNumber":38,"author":{"gitId":"teoziyiivy"},"content":"        String entry \u003d \"50 /d 03/11/2021\";","lastModifiedDate":"2021-11-03"},{"lineNumber":39,"author":{"gitId":"teoziyiivy"},"content":"        String input \u003d \"1\";","lastModifiedDate":"2021-11-03"},{"lineNumber":40,"author":{"gitId":"teoziyiivy"},"content":"        weights.addWeight(entry);","lastModifiedDate":"2021-11-03"},{"lineNumber":41,"author":{"gitId":"teoziyiivy"},"content":"        assertDoesNotThrow(() -\u003e weights.deleteWeight(input));","lastModifiedDate":"2021-11-03"},{"lineNumber":42,"author":{"gitId":"teoziyiivy"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":43,"author":{"gitId":"teoziyiivy"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":44,"author":{"gitId":"teoziyiivy"},"content":"    @Test","lastModifiedDate":"2021-11-03"},{"lineNumber":45,"author":{"gitId":"teoziyiivy"},"content":"    void deleteWeight_invalidFormat_exceptionThrow() {","lastModifiedDate":"2021-11-03"},{"lineNumber":46,"author":{"gitId":"teoziyiivy"},"content":"        WeightTracker weights \u003d new WeightTracker();","lastModifiedDate":"2021-10-11"},{"lineNumber":47,"author":{"gitId":"teoziyiivy"},"content":"        String input \u003d \"delete weight\";","lastModifiedDate":"2021-10-11"},{"lineNumber":48,"author":{"gitId":"teoziyiivy"},"content":"        Assertions.assertThrows(DeleteWeightException.class, () -\u003e weights.deleteWeight(input));","lastModifiedDate":"2021-10-11"},{"lineNumber":49,"author":{"gitId":"teoziyiivy"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":50,"author":{"gitId":"teoziyiivy"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":51,"author":{"gitId":"teoziyiivy"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":52,"author":{"gitId":"teoziyiivy"},"content":"    void deleteWeightIndex_invalidIndex_exceptionThrow() {","lastModifiedDate":"2021-11-03"},{"lineNumber":53,"author":{"gitId":"teoziyiivy"},"content":"        WeightTracker weights \u003d new WeightTracker();","lastModifiedDate":"2021-10-11"},{"lineNumber":54,"author":{"gitId":"teoziyiivy"},"content":"        String input \u003d \"1\";","lastModifiedDate":"2021-10-11"},{"lineNumber":55,"author":{"gitId":"teoziyiivy"},"content":"        Assertions.assertThrows(DeleteWeightIndexException.class, () -\u003e weights.deleteWeight(input));","lastModifiedDate":"2021-10-28"},{"lineNumber":56,"author":{"gitId":"teoziyiivy"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":57,"author":{"gitId":"teoziyiivy"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":58,"author":{"gitId":"teoziyiivy"},"content":"    @Test","lastModifiedDate":"2021-11-03"},{"lineNumber":59,"author":{"gitId":"teoziyiivy"},"content":"    void listWeightIndex_validFormat1_noExceptionThrow() throws WeightException {","lastModifiedDate":"2021-11-03"},{"lineNumber":60,"author":{"gitId":"teoziyiivy"},"content":"        WeightTracker weights \u003d new WeightTracker();","lastModifiedDate":"2021-11-03"},{"lineNumber":61,"author":{"gitId":"teoziyiivy"},"content":"        String entry \u003d \"50 /d 03/11/2021\";","lastModifiedDate":"2021-11-03"},{"lineNumber":62,"author":{"gitId":"teoziyiivy"},"content":"        weights.addWeight(entry);","lastModifiedDate":"2021-11-03"},{"lineNumber":63,"author":{"gitId":"teoziyiivy"},"content":"        String input \u003d \"03/11/2021\";","lastModifiedDate":"2021-11-03"},{"lineNumber":64,"author":{"gitId":"teoziyiivy"},"content":"        assertDoesNotThrow(() -\u003e weights.listWeights(input));","lastModifiedDate":"2021-11-03"},{"lineNumber":65,"author":{"gitId":"teoziyiivy"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":66,"author":{"gitId":"teoziyiivy"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":67,"author":{"gitId":"teoziyiivy"},"content":"    @Test","lastModifiedDate":"2021-11-03"},{"lineNumber":68,"author":{"gitId":"teoziyiivy"},"content":"    void listWeightIndex_validFormat2_noExceptionThrow() throws WeightException {","lastModifiedDate":"2021-11-03"},{"lineNumber":69,"author":{"gitId":"teoziyiivy"},"content":"        WeightTracker weights \u003d new WeightTracker();","lastModifiedDate":"2021-11-03"},{"lineNumber":70,"author":{"gitId":"teoziyiivy"},"content":"        String entry1 \u003d \"50 /d 02/11/2021\";","lastModifiedDate":"2021-11-03"},{"lineNumber":71,"author":{"gitId":"teoziyiivy"},"content":"        String entry2 \u003d \"45 /d 03/11/2021\";","lastModifiedDate":"2021-11-03"},{"lineNumber":72,"author":{"gitId":"teoziyiivy"},"content":"        weights.addWeight(entry1);","lastModifiedDate":"2021-11-03"},{"lineNumber":73,"author":{"gitId":"teoziyiivy"},"content":"        weights.addWeight(entry2);","lastModifiedDate":"2021-11-03"},{"lineNumber":74,"author":{"gitId":"teoziyiivy"},"content":"        String input \u003d \"03/11/2021\";","lastModifiedDate":"2021-11-03"},{"lineNumber":75,"author":{"gitId":"teoziyiivy"},"content":"        assertDoesNotThrow(() -\u003e weights.listWeights(input));","lastModifiedDate":"2021-11-03"},{"lineNumber":76,"author":{"gitId":"teoziyiivy"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":77,"author":{"gitId":"teoziyiivy"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":78,"author":{"gitId":"teoziyiivy"},"content":"    @Test","lastModifiedDate":"2021-11-03"},{"lineNumber":79,"author":{"gitId":"teoziyiivy"},"content":"    void listWeightIndex_validFormat3_noExceptionThrow() throws WeightException {","lastModifiedDate":"2021-11-03"},{"lineNumber":80,"author":{"gitId":"teoziyiivy"},"content":"        WeightTracker weights \u003d new WeightTracker();","lastModifiedDate":"2021-11-03"},{"lineNumber":81,"author":{"gitId":"teoziyiivy"},"content":"        String entry1 \u003d \"50 /d 02/11/2021\";","lastModifiedDate":"2021-11-03"},{"lineNumber":82,"author":{"gitId":"teoziyiivy"},"content":"        String entry2 \u003d \"45 /d 03/11/2021\";","lastModifiedDate":"2021-11-03"},{"lineNumber":83,"author":{"gitId":"teoziyiivy"},"content":"        weights.addWeight(entry1);","lastModifiedDate":"2021-11-03"},{"lineNumber":84,"author":{"gitId":"teoziyiivy"},"content":"        weights.addWeight(entry2);","lastModifiedDate":"2021-11-03"},{"lineNumber":85,"author":{"gitId":"teoziyiivy"},"content":"        String input \u003d \"all\";","lastModifiedDate":"2021-11-03"},{"lineNumber":86,"author":{"gitId":"teoziyiivy"},"content":"        assertDoesNotThrow(() -\u003e weights.listWeights(input));","lastModifiedDate":"2021-11-03"},{"lineNumber":87,"author":{"gitId":"teoziyiivy"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":88,"author":{"gitId":"teoziyiivy"},"content":"}","lastModifiedDate":"2021-10-08"}],"authorContributionMap":{"teoziyiivy":87,"VishalJeyaram":1}},{"path":"src/test/java/seedu/duke/schedule/ScheduleTrackerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"arvejw"},"content":"package seedu.duke.schedule;","lastModifiedDate":"2021-10-22"},{"lineNumber":2,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":3,"author":{"gitId":"arvejw"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-11"},{"lineNumber":4,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":5,"author":{"gitId":"VishalJeyaram"},"content":"import seedu.duke.exceptions.DukeException;","lastModifiedDate":"2021-10-14"},{"lineNumber":6,"author":{"gitId":"arvejw"},"content":"import seedu.duke.exceptions.schedule.ScheduleException;","lastModifiedDate":"2021-10-24"},{"lineNumber":7,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":8,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":9,"author":{"gitId":"arvejw"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-10-11"},{"lineNumber":10,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":11,"author":{"gitId":"arvejw"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-11"},{"lineNumber":12,"author":{"gitId":"arvejw"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2021-10-11"},{"lineNumber":13,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":14,"author":{"gitId":"arvejw"},"content":"//@@author arvejw","lastModifiedDate":"2021-10-31"},{"lineNumber":15,"author":{"gitId":"arvejw"},"content":"class ScheduleTrackerTest {","lastModifiedDate":"2021-10-11"},{"lineNumber":16,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":17,"author":{"gitId":"arvejw"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":18,"author":{"gitId":"arvejw"},"content":"    void nullArgumentCheck_NullInput_exceptionThrow() {","lastModifiedDate":"2021-10-11"},{"lineNumber":19,"author":{"gitId":"arvejw"},"content":"        ScheduleTracker st \u003d new ScheduleTracker();","lastModifiedDate":"2021-10-11"},{"lineNumber":20,"author":{"gitId":"arvejw"},"content":"        assertThrows(ScheduleException.class, () -\u003e st.nullArgumentCheck(null));","lastModifiedDate":"2021-10-24"},{"lineNumber":21,"author":{"gitId":"arvejw"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":22,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":23,"author":{"gitId":"arvejw"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":24,"author":{"gitId":"arvejw"},"content":"    void isScheduledWorkoutNumberWithinRange_inputOutOfRangeNegative_failure() {","lastModifiedDate":"2021-10-11"},{"lineNumber":25,"author":{"gitId":"arvejw"},"content":"        ScheduleTracker st \u003d new ScheduleTracker();","lastModifiedDate":"2021-10-11"},{"lineNumber":26,"author":{"gitId":"arvejw"},"content":"        assertFalse(st.isScheduledWorkoutNumberWithinRange(-256));","lastModifiedDate":"2021-10-11"},{"lineNumber":27,"author":{"gitId":"arvejw"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":28,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":29,"author":{"gitId":"arvejw"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":30,"author":{"gitId":"arvejw"},"content":"    void scheduledWorkoutSeparatorCheck_MissingSeparator_exceptionThrow() {","lastModifiedDate":"2021-10-11"},{"lineNumber":31,"author":{"gitId":"arvejw"},"content":"        ScheduleTracker st \u003d new ScheduleTracker();","lastModifiedDate":"2021-10-11"},{"lineNumber":32,"author":{"gitId":"arvejw"},"content":"        String argumentInput \u003d \"test /d 07/07/2022 17:59\";","lastModifiedDate":"2021-10-15"},{"lineNumber":33,"author":{"gitId":"arvejw"},"content":"        assertThrows(ScheduleException.class, () -\u003e st.scheduledWorkoutSeparatorCheck(argumentInput));","lastModifiedDate":"2021-10-24"},{"lineNumber":34,"author":{"gitId":"arvejw"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":35,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":36,"author":{"gitId":"arvejw"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":37,"author":{"gitId":"arvejw"},"content":"    void deleteScheduledWorkout_outOfRange_exceptionThrow() throws ScheduleException {","lastModifiedDate":"2021-10-26"},{"lineNumber":38,"author":{"gitId":"arvejw"},"content":"        ScheduleTracker st \u003d new ScheduleTracker();","lastModifiedDate":"2021-10-11"},{"lineNumber":39,"author":{"gitId":"arvejw"},"content":"        String argumentInput1 \u003d \"test /d 07/07/2022 /t 17:59\";","lastModifiedDate":"2021-10-26"},{"lineNumber":40,"author":{"gitId":"arvejw"},"content":"        st.addScheduledWorkout(argumentInput1, false, true); //must be non empty list","lastModifiedDate":"2021-10-26"},{"lineNumber":41,"author":{"gitId":"arvejw"},"content":"        assertThrows(ScheduleException.class, () -\u003e st.deleteScheduledWorkout(\"-10\"));","lastModifiedDate":"2021-10-24"},{"lineNumber":42,"author":{"gitId":"arvejw"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":43,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":44,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":45,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":46,"author":{"gitId":"arvejw"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":47,"author":{"gitId":"arvejw"},"content":"    void deleteScheduledWorkout_nonInteger_exceptionThrow() throws DukeException, ScheduleException {","lastModifiedDate":"2021-10-22"},{"lineNumber":48,"author":{"gitId":"arvejw"},"content":"        ScheduleTracker st \u003d new ScheduleTracker();","lastModifiedDate":"2021-10-11"},{"lineNumber":49,"author":{"gitId":"arvejw"},"content":"        String argumentInput1 \u003d \"test /d 07/07/2022 /t 17:59\";","lastModifiedDate":"2021-10-15"},{"lineNumber":50,"author":{"gitId":"arvejw"},"content":"        st.addScheduledWorkout(argumentInput1, false, true); //must be non empty list","lastModifiedDate":"2021-10-26"},{"lineNumber":51,"author":{"gitId":"arvejw"},"content":"        String argumentInput2 \u003d \"@!$!@$!\";","lastModifiedDate":"2021-10-12"},{"lineNumber":52,"author":{"gitId":"arvejw"},"content":"        assertThrows(NumberFormatException.class, () -\u003e st.deleteScheduledWorkout(argumentInput2));","lastModifiedDate":"2021-10-12"},{"lineNumber":53,"author":{"gitId":"arvejw"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":54,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":55,"author":{"gitId":"arvejw"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":56,"author":{"gitId":"arvejw"},"content":"    void addScheduledWorkout_missingSeparator_exceptionThrow() {","lastModifiedDate":"2021-10-11"},{"lineNumber":57,"author":{"gitId":"arvejw"},"content":"        ScheduleTracker st \u003d new ScheduleTracker();","lastModifiedDate":"2021-10-11"},{"lineNumber":58,"author":{"gitId":"arvejw"},"content":"        String argumentInput \u003d \"test /d 07/07/2022 17:59\";","lastModifiedDate":"2021-10-15"},{"lineNumber":59,"author":{"gitId":"arvejw"},"content":"        assertThrows(ScheduleException.class, () -\u003e st.addScheduledWorkout(argumentInput, false, true));","lastModifiedDate":"2021-10-26"},{"lineNumber":60,"author":{"gitId":"arvejw"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":61,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":62,"author":{"gitId":"arvejw"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":63,"author":{"gitId":"arvejw"},"content":"    void addScheduledWorkout_invalidDateFormat_exceptionThrow() {","lastModifiedDate":"2021-10-11"},{"lineNumber":64,"author":{"gitId":"arvejw"},"content":"        ScheduleTracker st \u003d new ScheduleTracker();","lastModifiedDate":"2021-10-11"},{"lineNumber":65,"author":{"gitId":"arvejw"},"content":"        String argumentInput \u003d \"test /d 07-07-2022 /t 17:59\";","lastModifiedDate":"2021-10-15"},{"lineNumber":66,"author":{"gitId":"arvejw"},"content":"        assertThrows(DateTimeParseException.class, () -\u003e st.addScheduledWorkout(argumentInput, false, true));","lastModifiedDate":"2021-10-26"},{"lineNumber":67,"author":{"gitId":"arvejw"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":68,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":69,"author":{"gitId":"arvejw"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":70,"author":{"gitId":"arvejw"},"content":"    void addScheduledWorkout_invalidTimeFormat_exceptionThrow() {","lastModifiedDate":"2021-10-11"},{"lineNumber":71,"author":{"gitId":"arvejw"},"content":"        ScheduleTracker st \u003d new ScheduleTracker();","lastModifiedDate":"2021-10-11"},{"lineNumber":72,"author":{"gitId":"arvejw"},"content":"        String argumentInput \u003d \"test /d 07/07/2022 /t 7pm\";","lastModifiedDate":"2021-10-15"},{"lineNumber":73,"author":{"gitId":"arvejw"},"content":"        assertThrows(DateTimeParseException.class, () -\u003e st.addScheduledWorkout(argumentInput, false, true));","lastModifiedDate":"2021-10-26"},{"lineNumber":74,"author":{"gitId":"arvejw"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":75,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":76,"author":{"gitId":"arvejw"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":77,"author":{"gitId":"arvejw"},"content":"    void missingDescriptionCheck_missingDescription_exceptionThrow() {","lastModifiedDate":"2021-10-12"},{"lineNumber":78,"author":{"gitId":"arvejw"},"content":"        ScheduleTracker st \u003d new ScheduleTracker();","lastModifiedDate":"2021-10-12"},{"lineNumber":79,"author":{"gitId":"arvejw"},"content":"        String argumentInput \u003d \" /d 07/07/2022 /t 07:59\";","lastModifiedDate":"2021-10-15"},{"lineNumber":80,"author":{"gitId":"arvejw"},"content":"        assertThrows(ScheduleException.class, () -\u003e st.missingDescriptionCheck(argumentInput));","lastModifiedDate":"2021-10-24"},{"lineNumber":81,"author":{"gitId":"arvejw"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":82,"author":{"gitId":"arvejw"},"content":"}","lastModifiedDate":"2021-10-11"}],"authorContributionMap":{"VishalJeyaram":1,"arvejw":81}},{"path":"src/test/java/seedu/duke/schedule/WorkoutTrackerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"arvejw"},"content":"package seedu.duke.schedule;","lastModifiedDate":"2021-10-22"},{"lineNumber":2,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":3,"author":{"gitId":"arvejw"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-11"},{"lineNumber":4,"author":{"gitId":"arvejw"},"content":"import seedu.duke.WorkoutTracker;","lastModifiedDate":"2021-10-22"},{"lineNumber":5,"author":{"gitId":"arvejw"},"content":"import seedu.duke.exceptions.workout.WorkoutException;","lastModifiedDate":"2021-10-24"},{"lineNumber":6,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":7,"author":{"gitId":"arvejw"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-10-11"},{"lineNumber":8,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":9,"author":{"gitId":"arvejw"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2021-10-11"},{"lineNumber":10,"author":{"gitId":"arvejw"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-11"},{"lineNumber":11,"author":{"gitId":"arvejw"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-11"},{"lineNumber":12,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":13,"author":{"gitId":"arvejw"},"content":"//@@author arvejw","lastModifiedDate":"2021-10-31"},{"lineNumber":14,"author":{"gitId":"arvejw"},"content":"class WorkoutTrackerTest {","lastModifiedDate":"2021-10-11"},{"lineNumber":15,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":16,"author":{"gitId":"arvejw"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":17,"author":{"gitId":"arvejw"},"content":"    void nullArgumentCheck_NullInput_exceptionThrow() {","lastModifiedDate":"2021-10-11"},{"lineNumber":18,"author":{"gitId":"arvejw"},"content":"        WorkoutTracker wt \u003d new WorkoutTracker();","lastModifiedDate":"2021-10-24"},{"lineNumber":19,"author":{"gitId":"arvejw"},"content":"        assertThrows(WorkoutException.class, () -\u003e wt.nullArgumentCheck(null));","lastModifiedDate":"2021-10-24"},{"lineNumber":20,"author":{"gitId":"arvejw"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":21,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":22,"author":{"gitId":"arvejw"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":23,"author":{"gitId":"arvejw"},"content":"    void isCompletedWorkoutNumberWithinRange_inputOutOfRange_failure() {","lastModifiedDate":"2021-10-11"},{"lineNumber":24,"author":{"gitId":"arvejw"},"content":"        WorkoutTracker wt \u003d new WorkoutTracker();","lastModifiedDate":"2021-10-11"},{"lineNumber":25,"author":{"gitId":"arvejw"},"content":"        assertFalse(wt.isWorkoutNumberWithinRange(-256));","lastModifiedDate":"2021-10-11"},{"lineNumber":26,"author":{"gitId":"arvejw"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":27,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":28,"author":{"gitId":"arvejw"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":29,"author":{"gitId":"arvejw"},"content":"    void isCompletedWorkoutNumberWithinRange_inputWithinRange_success() throws WorkoutException {","lastModifiedDate":"2021-10-24"},{"lineNumber":30,"author":{"gitId":"arvejw"},"content":"        WorkoutTracker wt \u003d new WorkoutTracker();","lastModifiedDate":"2021-10-11"},{"lineNumber":31,"author":{"gitId":"arvejw"},"content":"        String argumentInput \u003d \"test /c 123 /d 07/07/2021 /t 17:59\";","lastModifiedDate":"2021-10-11"},{"lineNumber":32,"author":{"gitId":"arvejw"},"content":"        wt.addWorkout(argumentInput, true);","lastModifiedDate":"2021-10-20"},{"lineNumber":33,"author":{"gitId":"arvejw"},"content":"        assertTrue(wt.isWorkoutNumberWithinRange(1));","lastModifiedDate":"2021-10-11"},{"lineNumber":34,"author":{"gitId":"arvejw"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":35,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":36,"author":{"gitId":"arvejw"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":37,"author":{"gitId":"arvejw"},"content":"    void deleteWorkout_outOfRange_exceptionThrow() throws WorkoutException {","lastModifiedDate":"2021-10-26"},{"lineNumber":38,"author":{"gitId":"arvejw"},"content":"        WorkoutTracker wt \u003d new WorkoutTracker();","lastModifiedDate":"2021-10-11"},{"lineNumber":39,"author":{"gitId":"arvejw"},"content":"        String argumentInput1 \u003d \"test /c 123 /d 07/07/2021 /t 17:59\";","lastModifiedDate":"2021-10-26"},{"lineNumber":40,"author":{"gitId":"arvejw"},"content":"        wt.addWorkout(argumentInput1, true);","lastModifiedDate":"2021-10-26"},{"lineNumber":41,"author":{"gitId":"arvejw"},"content":"        assertThrows(WorkoutException.class, () -\u003e wt.deleteWorkout(\"-10\"));","lastModifiedDate":"2021-10-24"},{"lineNumber":42,"author":{"gitId":"arvejw"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":43,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":44,"author":{"gitId":"arvejw"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":45,"author":{"gitId":"arvejw"},"content":"    void deleteWorkout_nonInteger_exceptionThrow() throws WorkoutException {","lastModifiedDate":"2021-10-24"},{"lineNumber":46,"author":{"gitId":"arvejw"},"content":"        WorkoutTracker wt \u003d new WorkoutTracker();","lastModifiedDate":"2021-10-11"},{"lineNumber":47,"author":{"gitId":"arvejw"},"content":"        String argumentInput1 \u003d \"test /c 123 /d 07/07/2021 /t 17:59\";","lastModifiedDate":"2021-10-12"},{"lineNumber":48,"author":{"gitId":"arvejw"},"content":"        wt.addWorkout(argumentInput1, true);","lastModifiedDate":"2021-10-20"},{"lineNumber":49,"author":{"gitId":"arvejw"},"content":"        String argumentInput2 \u003d \"@!$!@$!\";","lastModifiedDate":"2021-10-12"},{"lineNumber":50,"author":{"gitId":"arvejw"},"content":"        assertThrows(NumberFormatException.class, () -\u003e wt.deleteWorkout(argumentInput2));","lastModifiedDate":"2021-10-12"},{"lineNumber":51,"author":{"gitId":"arvejw"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":52,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":53,"author":{"gitId":"arvejw"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":54,"author":{"gitId":"arvejw"},"content":"    void addWorkout_invalidDateFormat_exceptionThrow() {","lastModifiedDate":"2021-10-11"},{"lineNumber":55,"author":{"gitId":"arvejw"},"content":"        WorkoutTracker wt \u003d new WorkoutTracker();","lastModifiedDate":"2021-10-12"},{"lineNumber":56,"author":{"gitId":"arvejw"},"content":"        String argumentInput \u003d \"test /c 123 /d 07-07-2021 /t 17:59\";","lastModifiedDate":"2021-10-11"},{"lineNumber":57,"author":{"gitId":"arvejw"},"content":"        assertThrows(DateTimeParseException.class, () -\u003e wt.addWorkout(argumentInput, true));","lastModifiedDate":"2021-10-20"},{"lineNumber":58,"author":{"gitId":"arvejw"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":59,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":60,"author":{"gitId":"arvejw"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":61,"author":{"gitId":"arvejw"},"content":"    void addWorkout_invalidTimeFormat_exceptionThrow() {","lastModifiedDate":"2021-10-11"},{"lineNumber":62,"author":{"gitId":"arvejw"},"content":"        WorkoutTracker wt \u003d new WorkoutTracker();","lastModifiedDate":"2021-10-12"},{"lineNumber":63,"author":{"gitId":"arvejw"},"content":"        String argumentInput \u003d \"test /c 123 /d 07/07/2021 /t 7pm\";","lastModifiedDate":"2021-10-11"},{"lineNumber":64,"author":{"gitId":"arvejw"},"content":"        assertThrows(DateTimeParseException.class, () -\u003e wt.addWorkout(argumentInput, true));","lastModifiedDate":"2021-10-20"},{"lineNumber":65,"author":{"gitId":"arvejw"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":66,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":67,"author":{"gitId":"arvejw"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":68,"author":{"gitId":"arvejw"},"content":"    void addWorkout_nonIntegerCalorie_exceptionThrow() {","lastModifiedDate":"2021-10-11"},{"lineNumber":69,"author":{"gitId":"arvejw"},"content":"        WorkoutTracker wt \u003d new WorkoutTracker();","lastModifiedDate":"2021-10-12"},{"lineNumber":70,"author":{"gitId":"arvejw"},"content":"        String argumentInput \u003d \"test /c @$! /d 07/07/2021 /t 7:59\";","lastModifiedDate":"2021-10-12"},{"lineNumber":71,"author":{"gitId":"arvejw"},"content":"        assertThrows(NumberFormatException.class, () -\u003e wt.addWorkout(argumentInput, true));","lastModifiedDate":"2021-10-20"},{"lineNumber":72,"author":{"gitId":"arvejw"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":73,"author":{"gitId":"arvejw"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":74,"author":{"gitId":"arvejw"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":75,"author":{"gitId":"arvejw"},"content":"    void missingDescriptionCheck_missingDescription_exceptionThrow() {","lastModifiedDate":"2021-10-12"},{"lineNumber":76,"author":{"gitId":"arvejw"},"content":"        WorkoutTracker wt \u003d new WorkoutTracker();","lastModifiedDate":"2021-10-12"},{"lineNumber":77,"author":{"gitId":"arvejw"},"content":"        String argumentInput \u003d \"  /c 123 /d 07/07/2021 /t 07:59\";","lastModifiedDate":"2021-10-12"},{"lineNumber":78,"author":{"gitId":"arvejw"},"content":"        assertThrows(WorkoutException.class, () -\u003e wt.missingDescriptionCheck(argumentInput));","lastModifiedDate":"2021-10-24"},{"lineNumber":79,"author":{"gitId":"arvejw"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":80,"author":{"gitId":"arvejw"},"content":"}","lastModifiedDate":"2021-10-11"}],"authorContributionMap":{"arvejw":80}}]
