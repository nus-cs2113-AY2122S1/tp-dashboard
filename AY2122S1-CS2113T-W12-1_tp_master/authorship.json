[{"path":"build.gradle","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    mainClassName \u003d \"seedu.duke.Duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"checkstyle {","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.23\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"brendanlsz"},"content":"    enableAssertions \u003d true","lastModifiedDate":"2021-10-10"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"brendanlsz":1,"-":46}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# About us","lastModifiedDate":"2020-05-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"Display | Name | Github Profile | Portfolio ","lastModifiedDate":"2020-05-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"--------|:----:|:--------------:|:---------:","lastModifiedDate":"2020-05-24"},{"lineNumber":5,"author":{"gitId":"kengjit"},"content":"![](https://via.placeholder.com/100.png?text\u003dPhoto) | Keng Jit | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)","lastModifiedDate":"2021-09-29"},{"lineNumber":6,"author":{"gitId":"brendanlsz"},"content":"![](https://via.placeholder.com/100.png?text\u003dPhoto) | Brendan Lau | [Github](https://github.com/brendanlsz) | [Portfolio](docs/team/johndoe.md)","lastModifiedDate":"2021-09-29"},{"lineNumber":7,"author":{"gitId":"praj-bellakka"},"content":"![](https://via.placeholder.com/100.png?text\u003dPhoto) |  Prajwal Bellakka | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)","lastModifiedDate":"2021-09-29"},{"lineNumber":8,"author":{"gitId":"brendanlsz"},"content":"![](https://via.placeholder.com/100.png?text\u003dPhoto) | Cheng Siyuan | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)","lastModifiedDate":"2021-09-29"},{"lineNumber":9,"author":{"gitId":"aaapppsss"},"content":"![](https://via.placeholder.com/100.png?text\u003dPhoto) | Adeline Boo | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)","lastModifiedDate":"2021-09-29"}],"authorContributionMap":{"kengjit":1,"brendanlsz":2,"-":4,"aaapppsss":1,"praj-bellakka":1}},{"path":"docs/DeveloperGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# Developer Guide","lastModifiedDate":"2021-10-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":3,"author":{"gitId":"aaapppsss"},"content":"## Content","lastModifiedDate":"2021-10-26"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":5,"author":{"gitId":"siyuancheng178"},"content":"1. [Product Scope](#product-scope)","lastModifiedDate":"2021-11-06"},{"lineNumber":6,"author":{"gitId":"siyuancheng178"},"content":"2. [Quick Start](#quick-start)","lastModifiedDate":"2021-11-06"},{"lineNumber":7,"author":{"gitId":"siyuancheng178"},"content":"3. [User Story](#user-stories)","lastModifiedDate":"2021-11-06"},{"lineNumber":8,"author":{"gitId":"siyuancheng178"},"content":"4. [Application Architecture](#architecture)","lastModifiedDate":"2021-11-06"},{"lineNumber":9,"author":{"gitId":"siyuancheng178"},"content":"   - [Overall Architecture](#overall-architecture)","lastModifiedDate":"2021-11-06"},{"lineNumber":10,"author":{"gitId":"kengjit"},"content":"   - [Entry](#entry)","lastModifiedDate":"2021-11-06"},{"lineNumber":11,"author":{"gitId":"kengjit"},"content":"   - [Entry Database](#entry-database)","lastModifiedDate":"2021-11-06"},{"lineNumber":12,"author":{"gitId":"siyuancheng178"},"content":"   - [Food Database](#food-database)","lastModifiedDate":"2021-11-06"},{"lineNumber":13,"author":{"gitId":"siyuancheng178"},"content":"   - [User](#user)","lastModifiedDate":"2021-11-06"},{"lineNumber":14,"author":{"gitId":"siyuancheng178"},"content":"   - [Summary](#summary)","lastModifiedDate":"2021-11-06"},{"lineNumber":15,"author":{"gitId":"siyuancheng178"},"content":"   - [Suggest](#view-food-suggestions)","lastModifiedDate":"2021-11-06"},{"lineNumber":16,"author":{"gitId":"siyuancheng178"},"content":"   - [Command](#command)","lastModifiedDate":"2021-11-06"},{"lineNumber":17,"author":{"gitId":"siyuancheng178"},"content":"   - [Storage](#storage)","lastModifiedDate":"2021-11-06"},{"lineNumber":18,"author":{"gitId":"siyuancheng178"},"content":"   - [Parser](#parser)","lastModifiedDate":"2021-11-06"},{"lineNumber":19,"author":{"gitId":"kengjit"},"content":"5. [Implementation](#implementation)","lastModifiedDate":"2021-11-06"},{"lineNumber":20,"author":{"gitId":"kengjit"},"content":"   - [Add Food Entry](#add-food-entry)","lastModifiedDate":"2021-11-06"},{"lineNumber":21,"author":{"gitId":"kengjit"},"content":"   - [Edit Food Entry](#edit-food-entry)","lastModifiedDate":"2021-11-06"},{"lineNumber":22,"author":{"gitId":"kengjit"},"content":"   - [List Food Entry](#list-food-entry)","lastModifiedDate":"2021-11-06"},{"lineNumber":23,"author":{"gitId":"kengjit"},"content":"   - [Delete Food Entry](#delete-food-entry)","lastModifiedDate":"2021-11-06"},{"lineNumber":24,"author":{"gitId":"kengjit"},"content":"6. [Instruction for manual testing](#instructions-for-manual-testing)","lastModifiedDate":"2021-11-06"},{"lineNumber":25,"author":{"gitId":"kengjit"},"content":"    - [Add Food Entry](#add-food-entry-instructions)","lastModifiedDate":"2021-11-06"},{"lineNumber":26,"author":{"gitId":"kengjit"},"content":"7. [Non-functional Requirement](#nf-requirements)","lastModifiedDate":"2021-11-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"## Product scope","lastModifiedDate":"2021-10-26"},{"lineNumber":29,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":30,"author":{"gitId":"-"},"content":"### Target user profile","lastModifiedDate":"2021-10-26"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":32,"author":{"gitId":"siyuancheng178"},"content":"NUS Computer Engineering students reside in UTown going on diet.","lastModifiedDate":"2021-10-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":34,"author":{"gitId":"-"},"content":"### Value proposition","lastModifiedDate":"2021-10-26"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":36,"author":{"gitId":"siyuancheng178"},"content":"Help user to keep track of their daily calorie intake, and manage their diet wisely.","lastModifiedDate":"2021-10-23"},{"lineNumber":37,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":38,"author":{"gitId":"aaapppsss"},"content":"## Quick Start","lastModifiedDate":"2021-10-26"},{"lineNumber":39,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":40,"author":{"gitId":"siyuancheng178"},"content":"1. Ensure you have Java 11 or above installed in your Computer. ","lastModifiedDate":"2021-10-22"},{"lineNumber":41,"author":{"gitId":"siyuancheng178"},"content":"2. Download the latest fitnus.jar from here (no link for now). ","lastModifiedDate":"2021-10-22"},{"lineNumber":42,"author":{"gitId":"siyuancheng178"},"content":"3. Copy the file to the folder you want to use as the home folder for your WellNUS Tracker ","lastModifiedDate":"2021-10-22"},{"lineNumber":43,"author":{"gitId":"aaapppsss"},"content":"4. Type the following command in your terminal to run this program: `java -jar fitnus.jar` (You should change directory to where the `wellnus.jar` file is located or provide the absolute path of `wellnus.jar`).","lastModifiedDate":"2021-10-26"},{"lineNumber":44,"author":{"gitId":"aaapppsss"},"content":"5. The application will prompt first-time users (i.e. users with incomplete or missing user data) to set up their profile.","lastModifiedDate":"2021-10-27"},{"lineNumber":45,"author":{"gitId":"aaapppsss"},"content":"6. Some example commands you can try: ","lastModifiedDate":"2021-10-27"},{"lineNumber":46,"author":{"gitId":"kengjit"},"content":"   - `add Chicken Rice /cal 607`: Adds an entry of Chicken Rice with 607 calories to your EntryDatabase and food database. ","lastModifiedDate":"2021-11-06"},{"lineNumber":47,"author":{"gitId":"siyuancheng178"},"content":"   - `list food`: Lists all foods in database ","lastModifiedDate":"2021-10-22"},{"lineNumber":48,"author":{"gitId":"kengjit"},"content":"   - `list intake /DAY`: Lists all entries in the EntryDatabase for the day. ","lastModifiedDate":"2021-11-06"},{"lineNumber":49,"author":{"gitId":"siyuancheng178"},"content":"   - `exit`: Exits the app.  ","lastModifiedDate":"2021-10-22"},{"lineNumber":50,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":51,"author":{"gitId":"siyuancheng178"},"content":"Refer to the User Guide (no link for now) for details of each command.","lastModifiedDate":"2021-10-22"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":53,"author":{"gitId":"-"},"content":"## User Stories","lastModifiedDate":"2021-10-26"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":55,"author":{"gitId":"siyuancheng178"},"content":"|Version| As a ... | I want to ... | So that I can ...| ","lastModifiedDate":"2021-10-27"},{"lineNumber":56,"author":{"gitId":"siyuancheng178"},"content":"|--------|----------|---------------|------------------| ","lastModifiedDate":"2021-10-27"},{"lineNumber":57,"author":{"gitId":"siyuancheng178"},"content":"|v1.0|new user|see usage instructions|refer to them when I forget how to use the application| ","lastModifiedDate":"2021-10-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"|v2.0|user|find a to-do item by name|locate a to-do without having to go through the entire list|","lastModifiedDate":"2021-10-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":60,"author":{"gitId":"aaapppsss"},"content":"## Architecture","lastModifiedDate":"2021-10-26"},{"lineNumber":61,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":62,"author":{"gitId":"aaapppsss"},"content":"### Overall Architecture","lastModifiedDate":"2021-10-26"},{"lineNumber":63,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":64,"author":{"gitId":"praj-bellakka"},"content":"![Overall Architecture Diagram](diagrams-DG/overall%20architecture.png)  ","lastModifiedDate":"2021-11-02"},{"lineNumber":65,"author":{"gitId":"aaapppsss"},"content":"The Architecture Diagram given above explains the high-level design of the App.  ","lastModifiedDate":"2021-10-26"},{"lineNumber":66,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":67,"author":{"gitId":"siyuancheng178"},"content":"Given below is a quick overview of main components and how they interact with each other.","lastModifiedDate":"2021-10-23"},{"lineNumber":68,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":69,"author":{"gitId":"aaapppsss"},"content":"The entry point of the app is the `FitNUS` class, where the application is run and all other components are initialised and used.","lastModifiedDate":"2021-10-26"},{"lineNumber":70,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":71,"author":{"gitId":"aaapppsss"},"content":"The primary components of the app are listed below:","lastModifiedDate":"2021-10-26"},{"lineNumber":72,"author":{"gitId":"aaapppsss"},"content":"- `Storage`: For handling backend storage.","lastModifiedDate":"2021-10-26"},{"lineNumber":73,"author":{"gitId":"aaapppsss"},"content":"- `Parser`: For parsing user input.","lastModifiedDate":"2021-10-26"},{"lineNumber":74,"author":{"gitId":"aaapppsss"},"content":"- `Command`: The abstract class that all other command classes inherit from","lastModifiedDate":"2021-10-26"},{"lineNumber":75,"author":{"gitId":"aaapppsss"},"content":"- `Ui`: For displaying information to the user.","lastModifiedDate":"2021-10-26"},{"lineNumber":76,"author":{"gitId":"kengjit"},"content":"- `EntryDatabase`: For handling all functionality regarding entries.","lastModifiedDate":"2021-11-06"},{"lineNumber":77,"author":{"gitId":"aaapppsss"},"content":"- `FoodDatabase`: For handling all functionality regarding food database entries.","lastModifiedDate":"2021-10-26"},{"lineNumber":78,"author":{"gitId":"praj-bellakka"},"content":"- `MealPlanDatabase`: For handling all functionality regarding meal plan database entries.","lastModifiedDate":"2021-11-01"},{"lineNumber":79,"author":{"gitId":"aaapppsss"},"content":"- `User`: For handling all functionality regarding personalisation of user experience.","lastModifiedDate":"2021-10-26"},{"lineNumber":80,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":81,"author":{"gitId":"aaapppsss"},"content":"#### How the overall architecture works","lastModifiedDate":"2021-10-26"},{"lineNumber":82,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":83,"author":{"gitId":"aaapppsss"},"content":"1. When the user enters a command, `FitNUS` uses the Parser class to parse the user command.","lastModifiedDate":"2021-10-26"},{"lineNumber":84,"author":{"gitId":"aaapppsss"},"content":"2. This results in a `Command` object (more precisely, an object of one of its subclasses e.g., `AddFoodEntryCommand`). ","lastModifiedDate":"2021-10-26"},{"lineNumber":85,"author":{"gitId":"aaapppsss"},"content":"3. The `Command` object calls its `execute` method which performs the function required.","lastModifiedDate":"2021-10-26"},{"lineNumber":86,"author":{"gitId":"kengjit"},"content":"   - Since the `execute` method receives the `FoodDatabase`, `EntryDatabase` and `MealPlanDatabase` initialised in `FitNUS`, it is able to perform operations related to those components (e.g. to add an entry).","lastModifiedDate":"2021-11-06"},{"lineNumber":87,"author":{"gitId":"aaapppsss"},"content":"4. The `execute` method returns a `String` object that contains the outcome message of the command that was executed, which is displayed to the user by the `Ui` component.","lastModifiedDate":"2021-10-26"},{"lineNumber":88,"author":{"gitId":"aaapppsss"},"content":"---","lastModifiedDate":"2021-10-26"},{"lineNumber":89,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":90,"author":{"gitId":"kengjit"},"content":"### Entry","lastModifiedDate":"2021-11-06"},{"lineNumber":91,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":92,"author":{"gitId":"praj-bellakka"},"content":"![tracker class diagram](diagrams-DG/tracker%20class%20diagram.png)","lastModifiedDate":"2021-11-02"},{"lineNumber":93,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":94,"author":{"gitId":"kengjit"},"content":"---","lastModifiedDate":"2021-10-26"},{"lineNumber":95,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":96,"author":{"gitId":"kengjit"},"content":"### EntryDatabase","lastModifiedDate":"2021-11-06"},{"lineNumber":97,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":98,"author":{"gitId":"kengjit"},"content":"The EntryDatabase is represented by the class `EntryDatabase`.","lastModifiedDate":"2021-11-06"},{"lineNumber":99,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":100,"author":{"gitId":"kengjit"},"content":"![EntryDatabase Class Diagram](diagrams-DG/FoodTrackerDatabase_Class.png)","lastModifiedDate":"2021-11-06"},{"lineNumber":101,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":102,"author":{"gitId":"kengjit"},"content":"The `EntryDatabase` class consists of an ArrayList of Entry. It handles all functionalities ","lastModifiedDate":"2021-11-02"},{"lineNumber":103,"author":{"gitId":"kengjit"},"content":"that uses/amends the EntryDatabase. ","lastModifiedDate":"2021-11-06"},{"lineNumber":104,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":105,"author":{"gitId":"kengjit"},"content":"The `EntryDatabase` component consists of:","lastModifiedDate":"2021-11-02"},{"lineNumber":106,"author":{"gitId":"kengjit"},"content":"- `addEntry()` Adds an Entry object to the database.","lastModifiedDate":"2021-11-02"},{"lineNumber":107,"author":{"gitId":"kengjit"},"content":"- `sortDatabase()` Sorts the database by date.","lastModifiedDate":"2021-10-26"},{"lineNumber":108,"author":{"gitId":"kengjit"},"content":"- `deleteEntry(int)` Removes a specified Entry object from the database.","lastModifiedDate":"2021-11-02"},{"lineNumber":109,"author":{"gitId":"kengjit"},"content":"- `getTotalDailyCalorie()` Returns the total calorie intake for the day.","lastModifiedDate":"2021-10-26"},{"lineNumber":110,"author":{"gitId":"kengjit"},"content":"- `convertDatabaseToString()` Returns a String representation of all Entry objects in the database.","lastModifiedDate":"2021-11-02"},{"lineNumber":111,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":112,"author":{"gitId":"praj-bellakka"},"content":"  ![convertDatabaseToString Sequence Diagram](diagrams-DG/EntryDatabase_convertDatabaseToString_Seq.png)","lastModifiedDate":"2021-11-02"},{"lineNumber":113,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":114,"author":{"gitId":"kengjit"},"content":"- `preloadDatabase(BufferedReader)` Preloads the database using data from the text file.","lastModifiedDate":"2021-10-26"},{"lineNumber":115,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":116,"author":{"gitId":"praj-bellakka"},"content":"  ![preloadDatabase Sequence Diagram](diagrams-DG/EntryDatabase_preLoadDatabase_Seq.png)","lastModifiedDate":"2021-11-02"},{"lineNumber":117,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":118,"author":{"gitId":"kengjit"},"content":"- `getEntries()` Returns an ArrayList of all Entry objects within the database.","lastModifiedDate":"2021-11-02"},{"lineNumber":119,"author":{"gitId":"kengjit"},"content":"- `getEntryAtIndex(int)` Returns the Entry object at the specified index.","lastModifiedDate":"2021-11-02"},{"lineNumber":120,"author":{"gitId":"kengjit"},"content":"- `listEntries()` Returns a formatted String of all Food objects to be printed.","lastModifiedDate":"2021-10-26"},{"lineNumber":121,"author":{"gitId":"kengjit"},"content":"- `findEntries(String)` Returns an ArrayList containing matching Entry objects based on a keyword.","lastModifiedDate":"2021-11-02"},{"lineNumber":122,"author":{"gitId":"kengjit"},"content":"- `getPastDaysEntryDatabase(int)` Returns a subset of the original database consisting of Entry objects added in the current day","lastModifiedDate":"2021-11-02"},{"lineNumber":123,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":124,"author":{"gitId":"praj-bellakka"},"content":"  ![getPastDaysEntryDatabase Sequence Diagram](diagrams-DG/EntryDatabase_getPastDaysEntryDatabase_Seq.png)","lastModifiedDate":"2021-11-02"},{"lineNumber":125,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":126,"author":{"gitId":"kengjit"},"content":"- `getPastMonthsEntryDatabase()` Returns a subset of the original database consisting of Entry objects added in the current month","lastModifiedDate":"2021-11-02"},{"lineNumber":127,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":128,"author":{"gitId":"praj-bellakka"},"content":"  ![getPastMonthsEntryDatabase Sequence Diagram](diagrams-DG/EntryDatabase_getPastMonthsEntryDatabase_Seq.png) ","lastModifiedDate":"2021-11-02"},{"lineNumber":129,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":130,"author":{"gitId":"kengjit"},"content":"- `editEntryAtIndex(int, Food)` Edits the Entry object at the specified index to the new specified Food object","lastModifiedDate":"2021-11-02"},{"lineNumber":131,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":132,"author":{"gitId":"kengjit"},"content":"The diagram below showcases the relationships between EntryDatabase object and various components.","lastModifiedDate":"2021-11-02"},{"lineNumber":133,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":134,"author":{"gitId":"kengjit"},"content":"![EntryDatabase Class Architecture](diagrams-DG/FoodTrackerDatabase_Classes.png)","lastModifiedDate":"2021-11-06"},{"lineNumber":135,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":136,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":137,"author":{"gitId":"aaapppsss"},"content":"---","lastModifiedDate":"2021-10-26"},{"lineNumber":138,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":139,"author":{"gitId":"aaapppsss"},"content":"### Food Database","lastModifiedDate":"2021-10-26"},{"lineNumber":140,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":141,"author":{"gitId":"brendanlsz"},"content":"The `FoodDatabase` is used to keep a record of all the various types of `Food` objects.","lastModifiedDate":"2021-11-02"},{"lineNumber":142,"author":{"gitId":"brendanlsz"},"content":"Keeping a record of all types of `Food` allows users to have a more seamless","lastModifiedDate":"2021-11-02"},{"lineNumber":143,"author":{"gitId":"brendanlsz"},"content":"experience as they do not have to input all details when adding an `Entry` to the `EntryDatabase`.","lastModifiedDate":"2021-11-02"},{"lineNumber":144,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":145,"author":{"gitId":"praj-bellakka"},"content":"![](diagrams-DG/FoodDatabase_Class.png)  ","lastModifiedDate":"2021-11-02"},{"lineNumber":146,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":147,"author":{"gitId":"kengjit"},"content":"The `FoodDatabase` component consists of:","lastModifiedDate":"2021-10-26"},{"lineNumber":148,"author":{"gitId":"brendanlsz"},"content":"- `databaseFoods`: ArrayList of `Food` objects to store `Food` objects.","lastModifiedDate":"2021-11-07"},{"lineNumber":149,"author":{"gitId":"brendanlsz"},"content":"- `UTOWN_FOOD_LIST`: Stores information about food available at UTown, NUS.","lastModifiedDate":"2021-11-07"},{"lineNumber":150,"author":{"gitId":"brendanlsz"},"content":"- `addFood()`: Adds a `Food` object to the database. ","lastModifiedDate":"2021-11-07"},{"lineNumber":151,"author":{"gitId":"brendanlsz"},"content":"- `convertDatabaseToString()`: Returns a String representation of ","lastModifiedDate":"2021-11-07"},{"lineNumber":152,"author":{"gitId":"brendanlsz"},"content":"all Food objects in the database. ","lastModifiedDate":"2021-11-07"},{"lineNumber":153,"author":{"gitId":"praj-bellakka"},"content":"![](diagrams-DG/FoodDatabase_convertDatabaseToString_Seq.png)","lastModifiedDate":"2021-11-02"},{"lineNumber":154,"author":{"gitId":"brendanlsz"},"content":"- `deleteFood()`: Removes a specified Food object from the database. ","lastModifiedDate":"2021-11-07"},{"lineNumber":155,"author":{"gitId":"brendanlsz"},"content":"- `findFoods()`: Returns an ArrayList containing matching Food objects based on a keyword. ","lastModifiedDate":"2021-11-07"},{"lineNumber":156,"author":{"gitId":"brendanlsz"},"content":"- `findSuggestions()`: Returns an ArrayList containing matching Food objects based on the specified FoodType ","lastModifiedDate":"2021-11-07"},{"lineNumber":157,"author":{"gitId":"brendanlsz"},"content":"and the user\u0027s calorie goal. The code snippet below shows how this method makes use of `stream` to filter","lastModifiedDate":"2021-10-26"},{"lineNumber":158,"author":{"gitId":"brendanlsz"},"content":"matching Food objects.","lastModifiedDate":"2021-10-26"},{"lineNumber":159,"author":{"gitId":"brendanlsz"},"content":"```","lastModifiedDate":"2021-10-26"},{"lineNumber":160,"author":{"gitId":"brendanlsz"},"content":"public ArrayList\u003cFood\u003e findSuggestions(Food.FoodType type, int calories, boolean isSort) {","lastModifiedDate":"2021-10-26"},{"lineNumber":161,"author":{"gitId":"brendanlsz"},"content":"    ArrayList\u003cFood\u003e matchingSuggestions \u003d (ArrayList\u003cFood\u003e) databaseFoods.stream()","lastModifiedDate":"2021-10-26"},{"lineNumber":162,"author":{"gitId":"brendanlsz"},"content":"            .filter(t -\u003e t.getType().equals(type))","lastModifiedDate":"2021-10-26"},{"lineNumber":163,"author":{"gitId":"brendanlsz"},"content":"            .filter(c -\u003e c.getCalories() \u003c calories)","lastModifiedDate":"2021-10-26"},{"lineNumber":164,"author":{"gitId":"brendanlsz"},"content":"            .collect(Collectors.toList());","lastModifiedDate":"2021-10-26"},{"lineNumber":165,"author":{"gitId":"brendanlsz"},"content":"    if (isSort) {","lastModifiedDate":"2021-10-26"},{"lineNumber":166,"author":{"gitId":"brendanlsz"},"content":"        matchingSuggestions.sort(Comparator.comparing(Food::getCalories));","lastModifiedDate":"2021-10-26"},{"lineNumber":167,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":168,"author":{"gitId":"brendanlsz"},"content":"    return matchingSuggestions;","lastModifiedDate":"2021-10-26"},{"lineNumber":169,"author":{"gitId":"brendanlsz"},"content":"}","lastModifiedDate":"2021-10-26"},{"lineNumber":170,"author":{"gitId":"brendanlsz"},"content":"```","lastModifiedDate":"2021-10-26"},{"lineNumber":171,"author":{"gitId":"brendanlsz"},"content":"- `getFoodAtIndex()`: Returns the Food object at the specified index. ","lastModifiedDate":"2021-11-07"},{"lineNumber":172,"author":{"gitId":"brendanlsz"},"content":"- `getFoodDatabase()`: Returns the whole `databaseFoods` ArrayList.","lastModifiedDate":"2021-11-07"},{"lineNumber":173,"author":{"gitId":"brendanlsz"},"content":"- `listFoods()`: Returns a formatted String of all Food objects to be printed. ","lastModifiedDate":"2021-11-07"},{"lineNumber":174,"author":{"gitId":"brendanlsz"},"content":"- `loadFood()`: Loads `Food` objects into the `FoodDatabase`.","lastModifiedDate":"2021-11-07"},{"lineNumber":175,"author":{"gitId":"brendanlsz"},"content":"- `preloadDatabase(BufferedReader)`: Preloads the database using data from the text file.","lastModifiedDate":"2021-11-07"},{"lineNumber":176,"author":{"gitId":"praj-bellakka"},"content":"   \u003cbr /\u003e ![](diagrams-DG/FoodDatabase_preloadDatabase_Seq.png)","lastModifiedDate":"2021-11-02"},{"lineNumber":177,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":178,"author":{"gitId":"brendanlsz"},"content":"The class diagram below showcases the relationships between the `FoodDatabase` class and various components.","lastModifiedDate":"2021-10-27"},{"lineNumber":179,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":180,"author":{"gitId":"praj-bellakka"},"content":"![](diagrams-DG/FoodDatabase_Classes.png)  ","lastModifiedDate":"2021-11-02"},{"lineNumber":181,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":182,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":183,"author":{"gitId":"praj-bellakka"},"content":"---","lastModifiedDate":"2021-10-29"},{"lineNumber":184,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":185,"author":{"gitId":"praj-bellakka"},"content":"### Meal Plan Database","lastModifiedDate":"2021-10-29"},{"lineNumber":186,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":187,"author":{"gitId":"praj-bellakka"},"content":"The meal plan database is responsible for storing custom meal plans created by the user. ","lastModifiedDate":"2021-11-06"},{"lineNumber":188,"author":{"gitId":"praj-bellakka"},"content":"Each meal plan consists of a name, and a list of `Food` items linked to the meal plan.","lastModifiedDate":"2021-11-06"},{"lineNumber":189,"author":{"gitId":"praj-bellakka"},"content":"The class diagram of the `MealPlanDatabase` is shown below.","lastModifiedDate":"2021-11-06"},{"lineNumber":190,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":191,"author":{"gitId":"praj-bellakka"},"content":"![](diagrams-DG/MealPlanDatabase_Class.png)","lastModifiedDate":"2021-11-06"},{"lineNumber":192,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":193,"author":{"gitId":"praj-bellakka"},"content":"The `MealPlanDatabase` component consists of:","lastModifiedDate":"2021-10-29"},{"lineNumber":194,"author":{"gitId":"praj-bellakka"},"content":"- `convertFoodToString(ArrayList\u003cFood\u003e)` Returns a string representation of all MealPlan objects in the database.","lastModifiedDate":"2021-11-02"},{"lineNumber":195,"author":{"gitId":"praj-bellakka"},"content":"- `addMealPlan(MealPlan)` Adds a MealPlan object to the database.","lastModifiedDate":"2021-11-02"},{"lineNumber":196,"author":{"gitId":"praj-bellakka"},"content":"- `getMealAtIndex(int)` Returns the MealPlan object at that index inside the database. ","lastModifiedDate":"2021-11-02"},{"lineNumber":197,"author":{"gitId":"praj-bellakka"},"content":"- `convertDatabaseToString()` Returns a string presentation of the MealPlanDatabase object.","lastModifiedDate":"2021-11-02"},{"lineNumber":198,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":199,"author":{"gitId":"praj-bellakka"},"content":"![](diagrams-DG/MealPlanDatabase_convertDatabaseToString_Seq.png)","lastModifiedDate":"2021-11-06"},{"lineNumber":200,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":201,"author":{"gitId":"praj-bellakka"},"content":"- `preloadDatabase(BufferedReader)` Preloads the database using data from the text file containing meal plans.","lastModifiedDate":"2021-11-02"},{"lineNumber":202,"author":{"gitId":"praj-bellakka"},"content":"  ","lastModifiedDate":"2021-11-06"},{"lineNumber":203,"author":{"gitId":"praj-bellakka"},"content":"The `preloadDatabase()` method is used to populate `databaseMealPlans` when FitNus is first launched.","lastModifiedDate":"2021-11-06"},{"lineNumber":204,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":205,"author":{"gitId":"praj-bellakka"},"content":"![](diagrams-DG/MealPlanDatabase_preLoadDatabase_Seq.png)","lastModifiedDate":"2021-11-06"},{"lineNumber":206,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":207,"author":{"gitId":"praj-bellakka"},"content":"- `listMealPlan()` Returns a String representation of all MealPlan objects saved in the database by stating its name and `Food` items under it.","lastModifiedDate":"2021-10-29"},{"lineNumber":208,"author":{"gitId":"praj-bellakka"},"content":"  ","lastModifiedDate":"2021-10-29"},{"lineNumber":209,"author":{"gitId":"praj-bellakka"},"content":"![](diagrams-DG/MealPlanDatabase_listMealPlan_Seq.png)","lastModifiedDate":"2021-11-06"},{"lineNumber":210,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":211,"author":{"gitId":"praj-bellakka"},"content":"#### Implementation","lastModifiedDate":"2021-10-29"},{"lineNumber":212,"author":{"gitId":"praj-bellakka"},"content":"`MealPlanDatabase` is first populated when the `preloadDatabase()` method is called from the `Storage` class. ","lastModifiedDate":"2021-10-29"},{"lineNumber":213,"author":{"gitId":"praj-bellakka"},"content":"It reads the lines inside the `mealplan.txt` using a `BufferedReader`. The class has the following features:","lastModifiedDate":"2021-10-29"},{"lineNumber":214,"author":{"gitId":"praj-bellakka"},"content":"- Automatically detect the name of an individual meal plan.","lastModifiedDate":"2021-10-29"},{"lineNumber":215,"author":{"gitId":"praj-bellakka"},"content":"- Converts string representation of `Food` items under each meal plan into an `ArrayList` of`Food` objects.","lastModifiedDate":"2021-10-29"},{"lineNumber":216,"author":{"gitId":"praj-bellakka"},"content":"- Detects when all the `Food` items under each meal plan has been added and start parsing the next meal plan if it exists.","lastModifiedDate":"2021-10-29"},{"lineNumber":217,"author":{"gitId":"praj-bellakka"},"content":"- Add `MealPlan` object into `databaseMealPlans`, which is an `ArrayList` of `MealPlan` objects.","lastModifiedDate":"2021-10-29"},{"lineNumber":218,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":219,"author":{"gitId":"praj-bellakka"},"content":"The class diagram below showcases the relationships between the `MealPlanDatabase` class and its various components.","lastModifiedDate":"2021-11-02"},{"lineNumber":220,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":221,"author":{"gitId":"praj-bellakka"},"content":"![](diagrams-DG/MealPlanDatabase_Classes.png)","lastModifiedDate":"2021-11-06"},{"lineNumber":222,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":223,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":224,"author":{"gitId":"aaapppsss"},"content":"--- ","lastModifiedDate":"2021-10-26"},{"lineNumber":225,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":226,"author":{"gitId":"aaapppsss"},"content":"### User component","lastModifiedDate":"2021-10-26"},{"lineNumber":227,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":228,"author":{"gitId":"aaapppsss"},"content":"![User Class Diagram](diagrams-DG/User_Class.png)","lastModifiedDate":"2021-11-06"},{"lineNumber":229,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":230,"author":{"gitId":"aaapppsss"},"content":"The `User` component:","lastModifiedDate":"2021-10-26"},{"lineNumber":231,"author":{"gitId":"aaapppsss"},"content":"- Stores the user\u0027s personal data eg gender, age, height, weight","lastModifiedDate":"2021-10-26"},{"lineNumber":232,"author":{"gitId":"aaapppsss"},"content":"- Stores the user\u0027s weight tracker data","lastModifiedDate":"2021-11-06"},{"lineNumber":233,"author":{"gitId":"aaapppsss"},"content":"  (i.e. `WeightRecord` objects which are contained in an `ArrayList` as an attribute in `User`)","lastModifiedDate":"2021-11-06"},{"lineNumber":234,"author":{"gitId":"aaapppsss"},"content":"- Performs functions related to the user\u0027s daily calorie goal such as ","lastModifiedDate":"2021-11-06"},{"lineNumber":235,"author":{"gitId":"aaapppsss"},"content":"generating and setting the calorie goal, and displaying remaining calories","lastModifiedDate":"2021-11-06"},{"lineNumber":236,"author":{"gitId":"aaapppsss"},"content":"for the day","lastModifiedDate":"2021-11-06"},{"lineNumber":237,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":238,"author":{"gitId":"aaapppsss"},"content":"The `User` component consists of the following main methods (helper functions were omitted):","lastModifiedDate":"2021-11-06"},{"lineNumber":239,"author":{"gitId":"aaapppsss"},"content":"- `updateWeightAndWeightTracker(float)` - Sets the user\u0027s weight and updates the weight tracker.","lastModifiedDate":"2021-11-06"},{"lineNumber":240,"author":{"gitId":"aaapppsss"},"content":"- `getWeightTrackerDisplay(int)` - Displays `weightRecords` (the `ArrayList` containing","lastModifiedDate":"2021-11-06"},{"lineNumber":241,"author":{"gitId":"aaapppsss"},"content":"`WeightRecord` objects) in the form of a weight tracker. ","lastModifiedDate":"2021-11-06"},{"lineNumber":242,"author":{"gitId":"aaapppsss"},"content":"- `getCaloriesRemaining(EntryDatabase)` - Returns the remaining number of calories that the user","lastModifiedDate":"2021-11-06"},{"lineNumber":243,"author":{"gitId":"aaapppsss"},"content":"can consume for the day according to their daily calorie goal.","lastModifiedDate":"2021-11-06"},{"lineNumber":244,"author":{"gitId":"aaapppsss"},"content":"- `handleGenerateCalorieGoalCommand(float, String)` - Generates and returns a calorie goal according","lastModifiedDate":"2021-11-06"},{"lineNumber":245,"author":{"gitId":"aaapppsss"},"content":"to the user\u0027s body type and their desired weekly weight change.","lastModifiedDate":"2021-11-06"},{"lineNumber":246,"author":{"gitId":"aaapppsss"},"content":"- `preloadUserData(BufferedReader)` - Loads the user\u0027s data from storage to the User object.","lastModifiedDate":"2021-11-06"},{"lineNumber":247,"author":{"gitId":"aaapppsss"},"content":"- `preloadWeightData(BufferedReader)` - Loads the user\u0027s weight tracker data from storage to the User object.","lastModifiedDate":"2021-11-06"},{"lineNumber":248,"author":{"gitId":"aaapppsss"},"content":"- `getUserDataDisplay()` - Returns a string displaying the user\u0027s data.","lastModifiedDate":"2021-11-06"},{"lineNumber":249,"author":{"gitId":"aaapppsss"},"content":"- `convertUserDataToString()` - Returns user data converted to the correct format for storage.","lastModifiedDate":"2021-11-06"},{"lineNumber":250,"author":{"gitId":"aaapppsss"},"content":"- `convertWeightDataToString()` - Returns weight tracker data converted ","lastModifiedDate":"2021-11-06"},{"lineNumber":251,"author":{"gitId":"aaapppsss"},"content":"to the correct format for storage.","lastModifiedDate":"2021-11-06"},{"lineNumber":252,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":253,"author":{"gitId":"aaapppsss"},"content":"The class diagram below showcases the relationships between the ","lastModifiedDate":"2021-11-06"},{"lineNumber":254,"author":{"gitId":"aaapppsss"},"content":"User class and its various components.","lastModifiedDate":"2021-11-06"},{"lineNumber":255,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":256,"author":{"gitId":"aaapppsss"},"content":"![](diagrams-DG/User_Classes.png)","lastModifiedDate":"2021-11-06"},{"lineNumber":257,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":258,"author":{"gitId":"aaapppsss"},"content":"---","lastModifiedDate":"2021-10-27"},{"lineNumber":259,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":260,"author":{"gitId":"siyuancheng178"},"content":"### Summary","lastModifiedDate":"2021-11-06"},{"lineNumber":261,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":262,"author":{"gitId":"siyuancheng178"},"content":"The Summary class provides an overview of user\u0027s diet over the past week/month.","lastModifiedDate":"2021-10-22"},{"lineNumber":263,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":264,"author":{"gitId":"aaapppsss"},"content":"#### command format","lastModifiedDate":"2021-10-26"},{"lineNumber":265,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":266,"author":{"gitId":"aaapppsss"},"content":"`summary /week` or `summary /month`  ","lastModifiedDate":"2021-10-26"},{"lineNumber":267,"author":{"gitId":"aaapppsss"},"content":"`Summary` class provides two methods `generateWeekSummaryReport()` and `generateMonthSummaryReport()` to give the user weekly/monthly report of their diets.","lastModifiedDate":"2021-10-26"},{"lineNumber":268,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":269,"author":{"gitId":"aaapppsss"},"content":"*   `generateWeekSummaryReport()` shows weekly calorie intake trend graph, average daily calorie intake, and the most/least frequently eaten food over past 7 days.","lastModifiedDate":"2021-10-26"},{"lineNumber":270,"author":{"gitId":"aaapppsss"},"content":"*   `generateMonthSummaryReport()` shows average daily calorie intake, and the most/least frequently eaten food over this month.","lastModifiedDate":"2021-10-26"},{"lineNumber":271,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":272,"author":{"gitId":"aaapppsss"},"content":"#### UML Sequence Diagram","lastModifiedDate":"2021-10-26"},{"lineNumber":273,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":274,"author":{"gitId":"aaapppsss"},"content":"The following sequence diagram describes the operation of the `generateWeekSummary()`.  ","lastModifiedDate":"2021-10-26"},{"lineNumber":275,"author":{"gitId":"siyuancheng178"},"content":"![](diagrams-DG/weekly%20report.png)  ","lastModifiedDate":"2021-11-06"},{"lineNumber":276,"author":{"gitId":"aaapppsss"},"content":"The following sequence diagram describes the operation of `generateMonthSummary()`.  ","lastModifiedDate":"2021-10-26"},{"lineNumber":277,"author":{"gitId":"siyuancheng178"},"content":"![](diagrams-DG/monthly%20report.png)","lastModifiedDate":"2021-11-06"},{"lineNumber":278,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":279,"author":{"gitId":"brendanlsz"},"content":"---","lastModifiedDate":"2021-10-26"},{"lineNumber":280,"author":{"gitId":"brendanlsz"},"content":"### View Food Suggestions","lastModifiedDate":"2021-10-26"},{"lineNumber":281,"author":{"gitId":"brendanlsz"},"content":"#### This feature allows users to find food suggestions based on food type and calorie goal.","lastModifiedDate":"2021-10-26"},{"lineNumber":282,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":283,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":284,"author":{"gitId":"brendanlsz"},"content":"The sequence diagram below describes the execution of the `ViewSuggestionsCommand`.","lastModifiedDate":"2021-10-26"},{"lineNumber":285,"author":{"gitId":"praj-bellakka"},"content":"![](diagrams-DG/SuggestCommandSequence.png) ","lastModifiedDate":"2021-11-02"},{"lineNumber":286,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":287,"author":{"gitId":"brendanlsz"},"content":"Here are the general steps taken when the `ViewSuggestionsCommand` is executed.","lastModifiedDate":"2021-10-26"},{"lineNumber":288,"author":{"gitId":"brendanlsz"},"content":"1. The `ViewSuggestionsCommand` obtains the user\u0027s calorie goal (`calorieGoal`) from the `user` object ","lastModifiedDate":"2021-10-26"},{"lineNumber":289,"author":{"gitId":"brendanlsz"},"content":"and current calorie consumption (`caloriesConsumed`) from the `entryDatabase` object.","lastModifiedDate":"2021-10-26"},{"lineNumber":290,"author":{"gitId":"brendanlsz"},"content":"2. The remaining calories for the day is calculated by `calorieGoal - caloriesConsumed`.","lastModifiedDate":"2021-10-26"},{"lineNumber":291,"author":{"gitId":"brendanlsz"},"content":"3. `findSuggestions()` method from `foodDatabase` is called to filter out all matching `Food` objects","lastModifiedDate":"2021-10-26"},{"lineNumber":292,"author":{"gitId":"brendanlsz"},"content":"based on the remaining calories and specified type. The user also has the option to have the result sorted ","lastModifiedDate":"2021-10-26"},{"lineNumber":293,"author":{"gitId":"brendanlsz"},"content":"in ascending order of calories. This is indicated by the boolean `isSort` variable.","lastModifiedDate":"2021-10-26"},{"lineNumber":294,"author":{"gitId":"brendanlsz"},"content":"4. The returned ArrayList of matching `Food` objects is passed to `Ui` to be printed to the user.","lastModifiedDate":"2021-10-26"},{"lineNumber":295,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":296,"author":{"gitId":"aaapppsss"},"content":"---","lastModifiedDate":"2021-10-26"},{"lineNumber":297,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":298,"author":{"gitId":"aaapppsss"},"content":"### Command","lastModifiedDate":"2021-10-26"},{"lineNumber":299,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":300,"author":{"gitId":"praj-bellakka"},"content":"![command class diagram](diagrams-DG/command%20class%20diagram.drawio.png)","lastModifiedDate":"2021-11-02"},{"lineNumber":301,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":302,"author":{"gitId":"aaapppsss"},"content":"The `Command` class is an abstract class that all other specific command classes (eg AddFoodEntryCommand, DeleteEntryCommand) inherit from. ","lastModifiedDate":"2021-10-26"},{"lineNumber":303,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":304,"author":{"gitId":"aaapppsss"},"content":"The `Command` component","lastModifiedDate":"2021-10-26"},{"lineNumber":305,"author":{"gitId":"aaapppsss"},"content":"    ","lastModifiedDate":"2021-10-26"},{"lineNumber":306,"author":{"gitId":"kengjit"},"content":"- Contains an abstract method `execute`. In the specific command classes that inherit from `Command`, `execute` performs the function that the command describes. (For example, in `AddFoodEntryCommand`, `execute` adds an entry to the EntryDatabase.) ","lastModifiedDate":"2021-11-06"},{"lineNumber":307,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":308,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":309,"author":{"gitId":"aaapppsss"},"content":"---","lastModifiedDate":"2021-10-26"},{"lineNumber":310,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":311,"author":{"gitId":"aaapppsss"},"content":"### Storage","lastModifiedDate":"2021-10-26"},{"lineNumber":312,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":313,"author":{"gitId":"brendanlsz"},"content":"The `Storage` class reads and writes data to and from the text files.","lastModifiedDate":"2021-11-07"},{"lineNumber":314,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":315,"author":{"gitId":"brendanlsz"},"content":"![](diagrams-DG/Storage_class.png)","lastModifiedDate":"2021-11-07"},{"lineNumber":316,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":317,"author":{"gitId":"brendanlsz"},"content":"The `Storage` component consists of:","lastModifiedDate":"2021-11-07"},{"lineNumber":318,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":319,"author":{"gitId":"brendanlsz"},"content":"- `Path` variables and `ROOT` that determines the location of the text files.","lastModifiedDate":"2021-11-07"},{"lineNumber":320,"author":{"gitId":"brendanlsz"},"content":"- `createDirectory()`: Creates a directory at the specified location.","lastModifiedDate":"2021-11-07"},{"lineNumber":321,"author":{"gitId":"brendanlsz"},"content":"- `createDirectoryAndFiles()`: Creates the necessary directory and text files for `Storage`.","lastModifiedDate":"2021-11-07"},{"lineNumber":322,"author":{"gitId":"brendanlsz"},"content":"- `createFile()`: Creates a text file at the specified location.","lastModifiedDate":"2021-11-07"},{"lineNumber":323,"author":{"gitId":"brendanlsz"},"content":"- `initialiseEntryDatabase()`: Initialises the `EntryDatabase` by preloading data from file.","lastModifiedDate":"2021-11-07"},{"lineNumber":324,"author":{"gitId":"brendanlsz"},"content":"- `initialiseFoodDatabase()`: Initialises the `FoodDatabase` by preloading data from file.","lastModifiedDate":"2021-11-07"},{"lineNumber":325,"author":{"gitId":"brendanlsz"},"content":"- `initialiseMealPlanDatabase()`: Initialises the `MealPlanDatabase` by preloading data from file.","lastModifiedDate":"2021-11-07"},{"lineNumber":326,"author":{"gitId":"brendanlsz"},"content":"- `initialiseUser()`:  Initialises `User` data from file.","lastModifiedDate":"2021-11-07"},{"lineNumber":327,"author":{"gitId":"brendanlsz"},"content":"- `initialiseWeightProgress()`: Initialises weight progress data from file.","lastModifiedDate":"2021-11-07"},{"lineNumber":328,"author":{"gitId":"brendanlsz"},"content":"- `saveData()`: Saves data to a specified file.","lastModifiedDate":"2021-11-07"},{"lineNumber":329,"author":{"gitId":"brendanlsz"},"content":"- `saveEntryDatabase()`: Saves all the `EntryDatabase` data to file.","lastModifiedDate":"2021-11-07"},{"lineNumber":330,"author":{"gitId":"brendanlsz"},"content":"- `saveFoodDatabase()`: Saves all the `FoodDatabase` data to file.","lastModifiedDate":"2021-11-07"},{"lineNumber":331,"author":{"gitId":"brendanlsz"},"content":"- `saveMealPlanDatabase()`: Saves all the `MealPlanDatabase` data to file.","lastModifiedDate":"2021-11-07"},{"lineNumber":332,"author":{"gitId":"brendanlsz"},"content":"- `saveUserData()`: Saves all the `User` data to file.","lastModifiedDate":"2021-11-07"},{"lineNumber":333,"author":{"gitId":"brendanlsz"},"content":"- `saveWeightData()`: Saves all weight data to file.","lastModifiedDate":"2021-11-07"},{"lineNumber":334,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":335,"author":{"gitId":"brendanlsz"},"content":"#### Storage format (in the text files)","lastModifiedDate":"2021-11-06"},{"lineNumber":336,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":337,"author":{"gitId":"brendanlsz"},"content":"**Every line in each text file represents one food / entry / record**","lastModifiedDate":"2021-11-06"},{"lineNumber":338,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":339,"author":{"gitId":"brendanlsz"},"content":"* FoodDatabase (`food.txt`): `FOODNAME | CALORIE_VALUE | FOOD_TYPE`  ","lastModifiedDate":"2021-11-07"},{"lineNumber":340,"author":{"gitId":"brendanlsz"},"content":"    Example: ","lastModifiedDate":"2021-11-06"},{"lineNumber":341,"author":{"gitId":"brendanlsz"},"content":"    ```","lastModifiedDate":"2021-11-06"},{"lineNumber":342,"author":{"gitId":"brendanlsz"},"content":"    fried rice | 400 | MEAL","lastModifiedDate":"2021-11-06"},{"lineNumber":343,"author":{"gitId":"brendanlsz"},"content":"    ramen | 500 | MEAL","lastModifiedDate":"2021-11-06"},{"lineNumber":344,"author":{"gitId":"brendanlsz"},"content":"    ```","lastModifiedDate":"2021-11-06"},{"lineNumber":345,"author":{"gitId":"brendanlsz"},"content":"* EntryDatabase (`entry.txt`): `MEALTYPE | FOODNAME | CALORIE_VALUE | DATE | FOOD_TYPE`  ","lastModifiedDate":"2021-11-07"},{"lineNumber":346,"author":{"gitId":"brendanlsz"},"content":"    Example: ","lastModifiedDate":"2021-11-06"},{"lineNumber":347,"author":{"gitId":"brendanlsz"},"content":"    ```","lastModifiedDate":"2021-11-06"},{"lineNumber":348,"author":{"gitId":"brendanlsz"},"content":"    Lunch | fried rice | 400 | 2021-11-06 | MEAL","lastModifiedDate":"2021-11-06"},{"lineNumber":349,"author":{"gitId":"brendanlsz"},"content":"    Dinner | ramen | 500 | 2021-11-06 | MEAL","lastModifiedDate":"2021-11-06"},{"lineNumber":350,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":351,"author":{"gitId":"brendanlsz"},"content":"    ```","lastModifiedDate":"2021-11-06"},{"lineNumber":352,"author":{"gitId":"brendanlsz"},"content":"* User (`user.txt`): `CALORIE_GOAL | GENDER | AGE | HEIGHT | WEIGHT`  ","lastModifiedDate":"2021-11-07"},{"lineNumber":353,"author":{"gitId":"brendanlsz"},"content":"    Example: ","lastModifiedDate":"2021-11-06"},{"lineNumber":354,"author":{"gitId":"brendanlsz"},"content":"    ```","lastModifiedDate":"2021-11-06"},{"lineNumber":355,"author":{"gitId":"brendanlsz"},"content":"    2503 | m | 21 | 184 | 75.0","lastModifiedDate":"2021-11-06"},{"lineNumber":356,"author":{"gitId":"brendanlsz"},"content":"    ```","lastModifiedDate":"2021-11-06"},{"lineNumber":357,"author":{"gitId":"brendanlsz"},"content":"* User weight (`weight.txt`): `WEIGHT | DATE`  ","lastModifiedDate":"2021-11-07"},{"lineNumber":358,"author":{"gitId":"brendanlsz"},"content":"    Example: ","lastModifiedDate":"2021-11-06"},{"lineNumber":359,"author":{"gitId":"brendanlsz"},"content":"    ```","lastModifiedDate":"2021-11-06"},{"lineNumber":360,"author":{"gitId":"brendanlsz"},"content":"    75.0 | 2021-11-05","lastModifiedDate":"2021-11-06"},{"lineNumber":361,"author":{"gitId":"brendanlsz"},"content":"    75.5 | 2021-11-06","lastModifiedDate":"2021-11-06"},{"lineNumber":362,"author":{"gitId":"brendanlsz"},"content":"    ```","lastModifiedDate":"2021-11-06"},{"lineNumber":363,"author":{"gitId":"brendanlsz"},"content":"\u003e **_NOTE:_** Example of `mealplan.txt` is omitted because its format is largely similar to `food.txt`","lastModifiedDate":"2021-11-07"},{"lineNumber":364,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":365,"author":{"gitId":"brendanlsz"},"content":"#### Sequence of operations","lastModifiedDate":"2021-11-06"},{"lineNumber":366,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":367,"author":{"gitId":"brendanlsz"},"content":"1. **Saving to text file**","lastModifiedDate":"2021-11-02"},{"lineNumber":368,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":369,"author":{"gitId":"brendanlsz"},"content":"`FoodDatabase`, `EntryDatabase`, and `User` classes each have a method to convert its data to String format. ","lastModifiedDate":"2021-11-06"},{"lineNumber":370,"author":{"gitId":"brendanlsz"},"content":"This String is then saved to the text file. For instance, when saving the `FoodDatabase` data, `Storage` ","lastModifiedDate":"2021-11-06"},{"lineNumber":371,"author":{"gitId":"brendanlsz"},"content":"calls the `convertDatabaseToString()` method to obtain the String representation of all the data within the ","lastModifiedDate":"2021-11-06"},{"lineNumber":372,"author":{"gitId":"brendanlsz"},"content":"`FoodDatabase`. This String is then written to the text file.","lastModifiedDate":"2021-11-06"},{"lineNumber":373,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":374,"author":{"gitId":"brendanlsz"},"content":"The following sequence diagram describes the operation of the `saveFoodDatabase()` operation.  ","lastModifiedDate":"2021-11-06"},{"lineNumber":375,"author":{"gitId":"brendanlsz"},"content":"![](diagrams-DG/Storage_sequence_save.png)","lastModifiedDate":"2021-11-06"},{"lineNumber":376,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":377,"author":{"gitId":"brendanlsz"},"content":"2. **Loading from text file**","lastModifiedDate":"2021-11-02"},{"lineNumber":378,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":379,"author":{"gitId":"brendanlsz"},"content":"`Storage` makes use of the `BufferedReader` and `FileInputStream` provided by `java.io` to access the ","lastModifiedDate":"2021-11-06"},{"lineNumber":380,"author":{"gitId":"brendanlsz"},"content":"contents of the storage text files. This is then passed to the respective objects for preloading.  ","lastModifiedDate":"2021-11-06"},{"lineNumber":381,"author":{"gitId":"brendanlsz"},"content":"For instance, when preloading the `FoodDatabase` data, `Storage` accesses the storage text file and ","lastModifiedDate":"2021-11-06"},{"lineNumber":382,"author":{"gitId":"brendanlsz"},"content":"passes the file contents to the `preLoadDatabase()` method in `FoodDatabase` which populates the ","lastModifiedDate":"2021-11-06"},{"lineNumber":383,"author":{"gitId":"brendanlsz"},"content":"ArrayList in `FoodDatabase`.","lastModifiedDate":"2021-11-06"},{"lineNumber":384,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":385,"author":{"gitId":"brendanlsz"},"content":"The following sequence diagram describes the operation of the `initialiseFoodDatabase()` operation.  ","lastModifiedDate":"2021-11-06"},{"lineNumber":386,"author":{"gitId":"brendanlsz"},"content":"![](diagrams-DG/Storage_sequence_initialise.png)","lastModifiedDate":"2021-11-06"},{"lineNumber":387,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":388,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":389,"author":{"gitId":"brendanlsz"},"content":"#### Design considerations","lastModifiedDate":"2021-11-06"},{"lineNumber":390,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":391,"author":{"gitId":"brendanlsz"},"content":"1. The `Path` of each text file is hardcoded within the `Storage` class. This eliminates","lastModifiedDate":"2021-11-02"},{"lineNumber":392,"author":{"gitId":"brendanlsz"},"content":"the need to pass the `Path` of the destination file each time. For example, to save the `FoodDatabase`","lastModifiedDate":"2021-11-02"},{"lineNumber":393,"author":{"gitId":"brendanlsz"},"content":"contents, the method call is `saveFoodDatabase()` rather than `saveFoodDatabase(PATH)`.","lastModifiedDate":"2021-11-02"},{"lineNumber":394,"author":{"gitId":"brendanlsz"},"content":"2. All public methods are declared as `static` methods. This allows various methods within the","lastModifiedDate":"2021-11-02"},{"lineNumber":395,"author":{"gitId":"brendanlsz"},"content":"`Storage` class to be called without having to instantiate a `Storage` object.","lastModifiedDate":"2021-11-02"},{"lineNumber":396,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":397,"author":{"gitId":"aaapppsss"},"content":"---","lastModifiedDate":"2021-10-26"},{"lineNumber":398,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":399,"author":{"gitId":"siyuancheng178"},"content":"### Parser","lastModifiedDate":"2021-11-06"},{"lineNumber":400,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":401,"author":{"gitId":"praj-bellakka"},"content":"The parser component makes use of the user input String from the `FitNus` class to detect the type of `Command` object called. It then returns a `Command` object that represents the type of command called through the input.","lastModifiedDate":"2021-11-07"},{"lineNumber":402,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":403,"author":{"gitId":"praj-bellakka"},"content":"##### Identifying type of method called","lastModifiedDate":"2021-11-07"},{"lineNumber":404,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":405,"author":{"gitId":"praj-bellakka"},"content":"  The `Parser` is invoked through the `parseCommandType()` method. The input is first split up by identifying a space character.","lastModifiedDate":"2021-11-07"},{"lineNumber":406,"author":{"gitId":"praj-bellakka"},"content":"  If no space character is detected, and the `help` or `exit` method was not called, a `FitNusException` is thrown. The first string element is then compared with default list of commands to determine the type of method called using if-else statements.","lastModifiedDate":"2021-11-07"},{"lineNumber":407,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":408,"author":{"gitId":"praj-bellakka"},"content":"#### How it works","lastModifiedDate":"2021-11-07"},{"lineNumber":409,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":410,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":411,"author":{"gitId":"praj-bellakka"},"content":"- `parseAddFoodCommand(input, fd, mealTypeString)`","lastModifiedDate":"2021-11-07"},{"lineNumber":412,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":413,"author":{"gitId":"praj-bellakka"},"content":"    `parseAddFoodCommand` checks whether the user is calling to add a new `Food` or a `MealPlan` and returns the corresponding `parseAddMealPlanFoodCommand` or `parseAddFoodCommand` methods. ","lastModifiedDate":"2021-11-07"},{"lineNumber":414,"author":{"gitId":"praj-bellakka"},"content":"This decision is done via a simple if-else check as shown in the code snippet below. `DESCRIPTOR_MEALPLAN` is defined as the String `\"/mealplan\"`. ","lastModifiedDate":"2021-11-07"},{"lineNumber":415,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":416,"author":{"gitId":"praj-bellakka"},"content":"     ```","lastModifiedDate":"2021-11-07"},{"lineNumber":417,"author":{"gitId":"praj-bellakka"},"content":"    if (mealTypeString.equals(DESCRIPTOR_MEALPLAN)) {","lastModifiedDate":"2021-11-07"},{"lineNumber":418,"author":{"gitId":"praj-bellakka"},"content":"    return parseAddMealPlanFoodCommand(md, input);","lastModifiedDate":"2021-11-07"},{"lineNumber":419,"author":{"gitId":"praj-bellakka"},"content":"    } else {","lastModifiedDate":"2021-11-07"},{"lineNumber":420,"author":{"gitId":"praj-bellakka"},"content":"    return parseAddFoodCommand(input, fd, mealTypeString);","lastModifiedDate":"2021-11-07"},{"lineNumber":421,"author":{"gitId":"praj-bellakka"},"content":"    }","lastModifiedDate":"2021-11-07"},{"lineNumber":422,"author":{"gitId":"praj-bellakka"},"content":"    ```","lastModifiedDate":"2021-11-07"},{"lineNumber":423,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":424,"author":{"gitId":"praj-bellakka"},"content":"- `parseAddFoodCommand(input, fd, mealTypeString)`","lastModifiedDate":"2021-11-07"},{"lineNumber":425,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":426,"author":{"gitId":"praj-bellakka"},"content":"    - `parseAddFoodCommand` returns a `AddFoodEntryCommand` object when called. The method first finds the `MealType` of the food by calling the `parseMealType` command.  ","lastModifiedDate":"2021-11-07"},{"lineNumber":427,"author":{"gitId":"praj-bellakka"},"content":"    - The food name input by the user is then compared to the `FoodDatabase` and `tempDbFoods`, an ArrayList containing matching Food objects, is displayed","lastModifiedDate":"2021-11-07"},{"lineNumber":428,"author":{"gitId":"praj-bellakka"},"content":"    - If there are no matching food, a new food object will be created. `returnUserInput` will be returned and the user will be directly prompted to enter the calories and meal type of the new food.","lastModifiedDate":"2021-11-07"},{"lineNumber":429,"author":{"gitId":"praj-bellakka"},"content":"    - If there are matching foods, `returnUserInput` will be returned and the user will be  prompted to choose the food from the matching list. ","lastModifiedDate":"2021-11-07"},{"lineNumber":430,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":431,"author":{"gitId":"praj-bellakka"},"content":"\u003e ⚠️ Notes about matching foods:","lastModifiedDate":"2021-11-07"},{"lineNumber":432,"author":{"gitId":"praj-bellakka"},"content":"\u003e- The user is allowed to create a new `Food` object when being prompted to selected matching foods. However, the scenario has not been displayed below for the sake of clarity.","lastModifiedDate":"2021-11-07"},{"lineNumber":433,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":434,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":435,"author":{"gitId":"praj-bellakka"},"content":"![](diagrams-DG/Parser_parseAddFoodCommand_Seq.png)","lastModifiedDate":"2021-11-07"},{"lineNumber":436,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":437,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":438,"author":{"gitId":"praj-bellakka"},"content":"- `parseCreateCommand(input, fd)`","lastModifiedDate":"2021-11-07"},{"lineNumber":439,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":440,"author":{"gitId":"praj-bellakka"},"content":"    - `parseCreateCommand` creates custom meal plans when called. The method is responsible for handling all meal plan creation requests.","lastModifiedDate":"2021-11-07"},{"lineNumber":441,"author":{"gitId":"praj-bellakka"},"content":"    - The method calls the `readIndexesInput` from the `Ui` class and returns an ArrayList of inputs.","lastModifiedDate":"2021-11-07"},{"lineNumber":442,"author":{"gitId":"praj-bellakka"},"content":"    - For each valid input, the relevant Food object from the `FoodDatabase` is extracted and stored in a temporary list of Food items.","lastModifiedDate":"2021-11-07"},{"lineNumber":443,"author":{"gitId":"praj-bellakka"},"content":"    - Once all inputs have been parsed, a `CreateMealPlanCommand` is returned.","lastModifiedDate":"2021-11-07"},{"lineNumber":444,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":445,"author":{"gitId":"praj-bellakka"},"content":"\u003e ⚠️ Notes about inputs:","lastModifiedDate":"2021-11-07"},{"lineNumber":446,"author":{"gitId":"praj-bellakka"},"content":"\u003e-  All non-integer inputs and inputs outside the range of the database will be ignored.","lastModifiedDate":"2021-11-07"},{"lineNumber":447,"author":{"gitId":"praj-bellakka"},"content":"\u003e ","lastModifiedDate":"2021-11-07"},{"lineNumber":448,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":449,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":450,"author":{"gitId":"praj-bellakka"},"content":"![](diagrams-DG/Parser_parseCreateCommand_Seq.png)","lastModifiedDate":"2021-11-07"},{"lineNumber":451,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":452,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":453,"author":{"gitId":"praj-bellakka"},"content":"- `promptUserCalories(index, mealType, foodName, newUi)`","lastModifiedDate":"2021-11-07"},{"lineNumber":454,"author":{"gitId":"praj-bellakka"},"content":"  - `promptUserCalories` prompts the user for extra inputs when called.","lastModifiedDate":"2021-11-07"},{"lineNumber":455,"author":{"gitId":"praj-bellakka"},"content":"  - The method uses 2 do-while loops to receive inputs for calories and foodType variables as shown below. An internal boolean flag, `isLoopFlagOn`, is used to handle the loop logic. The flag is set to true until a valid calorie input is entered.","lastModifiedDate":"2021-11-07"},{"lineNumber":456,"author":{"gitId":"praj-bellakka"},"content":"  ```","lastModifiedDate":"2021-11-07"},{"lineNumber":457,"author":{"gitId":"praj-bellakka"},"content":"    do {","lastModifiedDate":"2021-11-07"},{"lineNumber":458,"author":{"gitId":"praj-bellakka"},"content":"        userInput \u003d parseInteger(newUi.readInput(System.in, System.out)); //getting calories","lastModifiedDate":"2021-11-07"},{"lineNumber":459,"author":{"gitId":"praj-bellakka"},"content":"    } while (isLoopFlagOn);","lastModifiedDate":"2021-11-07"},{"lineNumber":460,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":461,"author":{"gitId":"praj-bellakka"},"content":"    ```","lastModifiedDate":"2021-11-07"},{"lineNumber":462,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":463,"author":{"gitId":"praj-bellakka"},"content":"![](diagrams-DG/Parser_promptUserCalories_Seq.png)","lastModifiedDate":"2021-11-07"},{"lineNumber":464,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":465,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":466,"author":{"gitId":"kengjit"},"content":"## Implementation","lastModifiedDate":"2021-11-06"},{"lineNumber":467,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":468,"author":{"gitId":"kengjit"},"content":"#### Add Food Entry Feature","lastModifiedDate":"2021-11-06"},{"lineNumber":469,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":470,"author":{"gitId":"kengjit"},"content":"The add food entry mechanism is facilitated by `AddFoodEntryCommand`. It extends `Command` and stores the data internally into `EntryDatabase` and `FoodDatabase`.","lastModifiedDate":"2021-11-06"},{"lineNumber":471,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":472,"author":{"gitId":"kengjit"},"content":"Additionally, it implements the following operations:","lastModifiedDate":"2021-11-06"},{"lineNumber":473,"author":{"gitId":"kengjit"},"content":"- `EntryDatabase#addEntry(Entry)` -- Adds a new entry into the entry database","lastModifiedDate":"2021-11-06"},{"lineNumber":474,"author":{"gitId":"kengjit"},"content":"- `FoodDatabase#addFood` -- Adds a new food into the food database","lastModifiedDate":"2021-11-06"},{"lineNumber":475,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":476,"author":{"gitId":"kengjit"},"content":"Given below is an example usage scenario and how the add food entry mechanism behaves at each step.","lastModifiedDate":"2021-11-06"},{"lineNumber":477,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":478,"author":{"gitId":"kengjit"},"content":"1. The user executes the `add soft boiled eggs` command to add a food entry to the Entry Database. ","lastModifiedDate":"2021-11-06"},{"lineNumber":479,"author":{"gitId":"kengjit"},"content":"2. Since the meal type was not specified, the `Parser` will automatically select the meal type based on the current timing.","lastModifiedDate":"2021-11-06"},{"lineNumber":480,"author":{"gitId":"kengjit"},"content":"3. The `add` command calls `AddFoodEntryCommand#execute()`, which checks whether the specified food, \"soft boiled eggs\",","lastModifiedDate":"2021-11-06"},{"lineNumber":481,"author":{"gitId":"kengjit"},"content":"exists in the current Food Database. ","lastModifiedDate":"2021-11-06"},{"lineNumber":482,"author":{"gitId":"kengjit"},"content":"4. Assuming there are no such food found in the Food Database, the user will be prompted to add \"soft boiled eggs\" as a ","lastModifiedDate":"2021-11-06"},{"lineNumber":483,"author":{"gitId":"kengjit"},"content":"new custom food. The user then inputs the relevant details required to add the new food. ","lastModifiedDate":"2021-11-06"},{"lineNumber":484,"author":{"gitId":"kengjit"},"content":"5. `AddFoodEntryCommand#execute()` will create a new Food object which corresponds to the specified food. It then calls","lastModifiedDate":"2021-11-06"},{"lineNumber":485,"author":{"gitId":"kengjit"},"content":"both `EntryDatabase#addEntry(Entry)` and `FoodDatabase#addFood()` and passes in the newly created food into these methods ","lastModifiedDate":"2021-11-06"},{"lineNumber":486,"author":{"gitId":"kengjit"},"content":"to add \"soft boiled eggs\" to both the Entry Database and Food Database.","lastModifiedDate":"2021-11-06"},{"lineNumber":487,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":488,"author":{"gitId":"kengjit"},"content":"The following Sequence Diagram shows how the add food entry feature works:","lastModifiedDate":"2021-11-06"},{"lineNumber":489,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":490,"author":{"gitId":"kengjit"},"content":"![AddFoodEntrySeqDiagram](diagrams-DG/Command_AddFoodEntryCommand_Seq.png \"AddFoodEntry Sequence Diagram\")","lastModifiedDate":"2021-11-06"},{"lineNumber":491,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":492,"author":{"gitId":"kengjit"},"content":"#### Edit Food Entry Feature","lastModifiedDate":"2021-11-06"},{"lineNumber":493,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":494,"author":{"gitId":"kengjit"},"content":"The edit food entry mechanism is facilitated by `EditFoodEntryCommand`. It extends `Command` and stores the data internally into `EntryDatabase` and `FoodDatabase`.","lastModifiedDate":"2021-11-06"},{"lineNumber":495,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":496,"author":{"gitId":"kengjit"},"content":"Additionally, it implements the following operations:","lastModifiedDate":"2021-11-06"},{"lineNumber":497,"author":{"gitId":"kengjit"},"content":"- `EntryDatabase#editEntryAtIndex(int, Entry)` -- Edits the entry at the specified index of the entry database","lastModifiedDate":"2021-11-06"},{"lineNumber":498,"author":{"gitId":"kengjit"},"content":"- `FoodDatabase#addFood` -- Adds a new food into the food database","lastModifiedDate":"2021-11-06"},{"lineNumber":499,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":500,"author":{"gitId":"kengjit"},"content":"Given below is an example usage scenario and how the edit food entry mechanism behaves at each step.","lastModifiedDate":"2021-11-06"},{"lineNumber":501,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":502,"author":{"gitId":"kengjit"},"content":"1. The user executes the `edit 1 chicken cutlet` command to edit the first entry\u0027s food to \"chicken cutlet\".","lastModifiedDate":"2021-11-06"},{"lineNumber":503,"author":{"gitId":"kengjit"},"content":"2. The `edit` command calls `EditFoodEntryCommand#execute()`, which checks whether the specified food, \"chicken cutlet\",","lastModifiedDate":"2021-11-06"},{"lineNumber":504,"author":{"gitId":"kengjit"},"content":"   exists in the current Food Database. In this case, fortunately, there were multiple foods that were found in FitNUS\u0027s ","lastModifiedDate":"2021-11-06"},{"lineNumber":505,"author":{"gitId":"kengjit"},"content":"Food Database. ","lastModifiedDate":"2021-11-06"},{"lineNumber":506,"author":{"gitId":"kengjit"},"content":"3. The user is then prompted to select one of the foods found in the Food Database, the user then selects the first option, ","lastModifiedDate":"2021-11-06"},{"lineNumber":507,"author":{"gitId":"kengjit"},"content":"\"salted egg chicken cutlet\".","lastModifiedDate":"2021-11-06"},{"lineNumber":508,"author":{"gitId":"kengjit"},"content":"4. `EditFoodEntryCommand#execute()` calls `EntryDatabase#editEntryAtIndex(int, Entry)` which proceeds to change the food","lastModifiedDate":"2021-11-06"},{"lineNumber":509,"author":{"gitId":"kengjit"},"content":"at the first entry to \"salted egg chicken cutlet\".","lastModifiedDate":"2021-11-06"},{"lineNumber":510,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":511,"author":{"gitId":"kengjit"},"content":"The following Sequence Diagram shows how the edit food entry feature works:","lastModifiedDate":"2021-11-06"},{"lineNumber":512,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":513,"author":{"gitId":"kengjit"},"content":"![EditFoodEntrySeqDiagram](diagrams-DG/Command_EditFoodEntryCommand_Seq.png \"EditFoodEntry Sequence Diagram\")","lastModifiedDate":"2021-11-06"},{"lineNumber":514,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":515,"author":{"gitId":"kengjit"},"content":"#### List Food Entry Feature","lastModifiedDate":"2021-11-06"},{"lineNumber":516,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":517,"author":{"gitId":"kengjit"},"content":"The list food entry mechanism is facilitated by `ListFoodEntryAllCommand`, `ListFoodEntryDayCommand`, `ListFoodEntryWeekCommand`. They extend `Command`.","lastModifiedDate":"2021-11-06"},{"lineNumber":518,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":519,"author":{"gitId":"kengjit"},"content":"Additionally, they implement the following operations:","lastModifiedDate":"2021-11-06"},{"lineNumber":520,"author":{"gitId":"kengjit"},"content":"- `EntryDatabase#listEntries()` -- Lists all entries within the entry database","lastModifiedDate":"2021-11-06"},{"lineNumber":521,"author":{"gitId":"kengjit"},"content":"- `EntryDatabase#getPastDaysEntryDatabase(int)` -- returns a subset of the original entry database containing only entries of the past specified days","lastModifiedDate":"2021-11-06"},{"lineNumber":522,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":523,"author":{"gitId":"kengjit"},"content":"Given below is an example usage scenario and how the list food entry mechanism behaves at each step.","lastModifiedDate":"2021-11-06"},{"lineNumber":524,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":525,"author":{"gitId":"kengjit"},"content":"1. The user executes the `list /entry /week` command to list out all entries in the past week. ","lastModifiedDate":"2021-11-06"},{"lineNumber":526,"author":{"gitId":"kengjit"},"content":"2. This calls `ListFoodEntryWeekCommand#execute()`, which creates a temporary EntryDatabase by calling","lastModifiedDate":"2021-11-06"},{"lineNumber":527,"author":{"gitId":"kengjit"},"content":"`EntryDatabase#getPastDaysEntryDatabase(int)` with \u00277\u0027 as its parameter (Since there are 7 days a week).","lastModifiedDate":"2021-11-06"},{"lineNumber":528,"author":{"gitId":"kengjit"},"content":"3. `EntryDatabase#getPastDaysEntryDatabase(int)` then returns a EntryDatabase with entries of the past 7 days.","lastModifiedDate":"2021-11-06"},{"lineNumber":529,"author":{"gitId":"kengjit"},"content":"4. With the new temporary EntryDatabase, `EntryDatabase#listEntries()` then displays the past week\u0027s entries","lastModifiedDate":"2021-11-06"},{"lineNumber":530,"author":{"gitId":"kengjit"},"content":"to the user.","lastModifiedDate":"2021-11-06"},{"lineNumber":531,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":532,"author":{"gitId":"kengjit"},"content":"The following Sequence Diagrams shows how the list food entry feature works:","lastModifiedDate":"2021-11-06"},{"lineNumber":533,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":534,"author":{"gitId":"kengjit"},"content":"![ListFoodEntryAllSeqDiagram](diagrams-DG/ListFoodEntryAll.png \"ListFoodEntryAll Sequence Diagram\")","lastModifiedDate":"2021-11-06"},{"lineNumber":535,"author":{"gitId":"kengjit"},"content":"![ListFoodEntryCustomSeqDiagram](diagrams-DG/ListFoodEntryCustom.png \"ListFoodEntryCustom Sequence Diagram\")","lastModifiedDate":"2021-11-06"},{"lineNumber":536,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":537,"author":{"gitId":"kengjit"},"content":"#### Delete Food Entry Feature","lastModifiedDate":"2021-11-06"},{"lineNumber":538,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":539,"author":{"gitId":"kengjit"},"content":"The delete food entry mechanism is facilitated by `DeleteEntryCommand` It extends `Command` and stores the data internally into `EntryDatabase` and `FoodDatabase`.","lastModifiedDate":"2021-11-06"},{"lineNumber":540,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":541,"author":{"gitId":"kengjit"},"content":"Additionally, they implement the following operations:","lastModifiedDate":"2021-11-06"},{"lineNumber":542,"author":{"gitId":"kengjit"},"content":"- `EntryDatabase#deleteEntry(int)` -- Deletes the entry at the specified index from EntryDatabase.","lastModifiedDate":"2021-11-06"},{"lineNumber":543,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":544,"author":{"gitId":"kengjit"},"content":"Given below is an example usage scenario and how the delete food entry mechanism behaves at each step.","lastModifiedDate":"2021-11-06"},{"lineNumber":545,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":546,"author":{"gitId":"kengjit"},"content":"1. The user executes the `delete /entry 2` command to delete the second entry from the EntryDatabase.","lastModifiedDate":"2021-11-06"},{"lineNumber":547,"author":{"gitId":"kengjit"},"content":"2. This calls `DeleteEntryCommand#execute()`, which then calls `EntryDatabase#deleteEntry(int)` with \u00272\u0027 as its parameter","lastModifiedDate":"2021-11-06"},{"lineNumber":548,"author":{"gitId":"kengjit"},"content":"   (Since the user wishes to delete the second entry).","lastModifiedDate":"2021-11-06"},{"lineNumber":549,"author":{"gitId":"kengjit"},"content":"3. `EntryDatabase#deleteEntry(int)` simply deletes the respective entry from the EntryDatabase.","lastModifiedDate":"2021-11-06"},{"lineNumber":550,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":551,"author":{"gitId":"siyuancheng178"},"content":"## Instructions for manual testing","lastModifiedDate":"2021-11-06"},{"lineNumber":552,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":553,"author":{"gitId":"aaapppsss"},"content":"### User Profile Setup and Editing","lastModifiedDate":"2021-11-06"},{"lineNumber":554,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":555,"author":{"gitId":"aaapppsss"},"content":"This feature allows the user to set up and","lastModifiedDate":"2021-11-06"},{"lineNumber":556,"author":{"gitId":"aaapppsss"},"content":"edit various attributes of their user profile such as their","lastModifiedDate":"2021-11-06"},{"lineNumber":557,"author":{"gitId":"aaapppsss"},"content":"gender, height, weight, age and daily calorie goal.","lastModifiedDate":"2021-11-06"},{"lineNumber":558,"author":{"gitId":"aaapppsss"},"content":"Given below is an example usage scenario and","lastModifiedDate":"2021-11-06"},{"lineNumber":559,"author":{"gitId":"aaapppsss"},"content":"how the user profile setup and editing","lastModifiedDate":"2021-11-06"},{"lineNumber":560,"author":{"gitId":"aaapppsss"},"content":"mechanism behaves at each step respectively.","lastModifiedDate":"2021-11-06"},{"lineNumber":561,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":562,"author":{"gitId":"aaapppsss"},"content":"#### User Profile Setup","lastModifiedDate":"2021-11-06"},{"lineNumber":563,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":564,"author":{"gitId":"aaapppsss"},"content":"1. The user launches the application, causing `FitNUS#initialiseFitNUS`","lastModifiedDate":"2021-11-06"},{"lineNumber":565,"author":{"gitId":"aaapppsss"},"content":"to be called. Since this is the first time the user is using the app,","lastModifiedDate":"2021-11-06"},{"lineNumber":566,"author":{"gitId":"aaapppsss"},"content":"the `user.txt` file containing the user data does not exist yet,","lastModifiedDate":"2021-11-06"},{"lineNumber":567,"author":{"gitId":"aaapppsss"},"content":"prompting FitNUS to create an empty text file storing the user data","lastModifiedDate":"2021-11-06"},{"lineNumber":568,"author":{"gitId":"aaapppsss"},"content":"(user.txt). ","lastModifiedDate":"2021-11-06"},{"lineNumber":569,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":570,"author":{"gitId":"aaapppsss"},"content":"2. Since the text file is empty, the check for whether","lastModifiedDate":"2021-11-06"},{"lineNumber":571,"author":{"gitId":"aaapppsss"},"content":"the user data in the storage is valid returns false, causing FitNUS to","lastModifiedDate":"2021-11-06"},{"lineNumber":572,"author":{"gitId":"aaapppsss"},"content":"begin the user profile setup process.","lastModifiedDate":"2021-11-06"},{"lineNumber":573,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":574,"author":{"gitId":"aaapppsss"},"content":"    \u003e ⚠️ Note: If `user.txt` is not empty but the user data is","lastModifiedDate":"2021-11-06"},{"lineNumber":575,"author":{"gitId":"aaapppsss"},"content":"    in an invalid or incomplete format, ","lastModifiedDate":"2021-11-06"},{"lineNumber":576,"author":{"gitId":"aaapppsss"},"content":"    the user profile setup process is continued. ","lastModifiedDate":"2021-11-06"},{"lineNumber":577,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":578,"author":{"gitId":"aaapppsss"},"content":"3. FitNUS begins the gender setting process by calling ","lastModifiedDate":"2021-11-06"},{"lineNumber":579,"author":{"gitId":"aaapppsss"},"content":"`FitNUS#initialiseAttribute` for the gender. This prompts the user to ","lastModifiedDate":"2021-11-06"},{"lineNumber":580,"author":{"gitId":"aaapppsss"},"content":"enter the character indicating their gender. ","lastModifiedDate":"2021-11-06"},{"lineNumber":581,"author":{"gitId":"aaapppsss"},"content":"The entered character is appended to a string ","lastModifiedDate":"2021-11-06"},{"lineNumber":582,"author":{"gitId":"aaapppsss"},"content":"\"gender /set \" (eg if the user entered \"m\", the string becomes","lastModifiedDate":"2021-11-06"},{"lineNumber":583,"author":{"gitId":"aaapppsss"},"content":" \"gender /set m\"). This string is passed into `Parser#parseCommandType`.","lastModifiedDate":"2021-11-06"},{"lineNumber":584,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":585,"author":{"gitId":"aaapppsss"},"content":"4. If the user input for the character indicating the gender is valid,","lastModifiedDate":"2021-11-06"},{"lineNumber":586,"author":{"gitId":"aaapppsss"},"content":"`Parser#parseCommandType` returns the corresponding `SetGenderCommand` object.","lastModifiedDate":"2021-11-06"},{"lineNumber":587,"author":{"gitId":"aaapppsss"},"content":"The `execute` method of the `SetGenderCommand` object is called, which","lastModifiedDate":"2021-11-06"},{"lineNumber":588,"author":{"gitId":"aaapppsss"},"content":"sets the `gender` attribute of the `User` object. This terminates the ","lastModifiedDate":"2021-11-06"},{"lineNumber":589,"author":{"gitId":"aaapppsss"},"content":"gender initialisation process.","lastModifiedDate":"2021-11-06"},{"lineNumber":590,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":591,"author":{"gitId":"aaapppsss"},"content":"5. If any `FitNUSException` was thrown in steps 4 and 5 due to invalid user","lastModifiedDate":"2021-11-06"},{"lineNumber":592,"author":{"gitId":"aaapppsss"},"content":"input, steps 4 and 5 are repeated until no exception is thrown (i.e. valid","lastModifiedDate":"2021-11-06"},{"lineNumber":593,"author":{"gitId":"aaapppsss"},"content":"user input was received).","lastModifiedDate":"2021-11-06"},{"lineNumber":594,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":595,"author":{"gitId":"aaapppsss"},"content":"6. Steps 3 to 6 are repeated for `age`, `height` and `weight` attributes.","lastModifiedDate":"2021-11-06"},{"lineNumber":596,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":597,"author":{"gitId":"aaapppsss"},"content":"7. A daily calorie goal that allows the user to maintain their current weight","lastModifiedDate":"2021-11-06"},{"lineNumber":598,"author":{"gitId":"aaapppsss"},"content":"is generated by calling `User#calculateCalorieGoal`","lastModifiedDate":"2021-11-06"},{"lineNumber":599,"author":{"gitId":"aaapppsss"},"content":"and the `calorieGoal` attribute is set to the generated goal. ","lastModifiedDate":"2021-11-06"},{"lineNumber":600,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":601,"author":{"gitId":"aaapppsss"},"content":"#### User Profile Editing","lastModifiedDate":"2021-11-06"},{"lineNumber":602,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":603,"author":{"gitId":"aaapppsss"},"content":"1. The user executes the `height /set 180` command to set their height to 180cm. ","lastModifiedDate":"2021-11-06"},{"lineNumber":604,"author":{"gitId":"aaapppsss"},"content":"`SetHeightCommand#execute` is called, which sets the `height` attribute","lastModifiedDate":"2021-11-06"},{"lineNumber":605,"author":{"gitId":"aaapppsss"},"content":"of the `User` object to 180 by calling `User#setHeight`.","lastModifiedDate":"2021-11-06"},{"lineNumber":606,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":607,"author":{"gitId":"aaapppsss"},"content":"### Record Weight","lastModifiedDate":"2021-11-06"},{"lineNumber":608,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":609,"author":{"gitId":"aaapppsss"},"content":"This feature allows the user to record their weight for the day in the","lastModifiedDate":"2021-11-06"},{"lineNumber":610,"author":{"gitId":"aaapppsss"},"content":"weight tracker and also update their weight in their user profile.","lastModifiedDate":"2021-11-06"},{"lineNumber":611,"author":{"gitId":"aaapppsss"},"content":"Given below is an example usage scenario and","lastModifiedDate":"2021-11-06"},{"lineNumber":612,"author":{"gitId":"aaapppsss"},"content":"how its mechanism behaves at each step.","lastModifiedDate":"2021-11-06"},{"lineNumber":613,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":614,"author":{"gitId":"aaapppsss"},"content":"1. The user executes the `weight /set 65.5` command to set their weight to 65.5 kg.","lastModifiedDate":"2021-11-06"},{"lineNumber":615,"author":{"gitId":"aaapppsss"},"content":"`SetWeightCommand#execute` is called, which calls `User#updateWeightAndWeightTracker`.","lastModifiedDate":"2021-11-06"},{"lineNumber":616,"author":{"gitId":"aaapppsss"},"content":"2. The `weight` attribute of the `User` object is set to 65.5.","lastModifiedDate":"2021-11-06"},{"lineNumber":617,"author":{"gitId":"aaapppsss"},"content":"3. If a weight record for the current day already exists in the weight tracker,","lastModifiedDate":"2021-11-06"},{"lineNumber":618,"author":{"gitId":"aaapppsss"},"content":"that record is replaced with another record with the updated weight. Otherwise, a","lastModifiedDate":"2021-11-06"},{"lineNumber":619,"author":{"gitId":"aaapppsss"},"content":"new weight record with the updated weight is created and added to the weight tracker.","lastModifiedDate":"2021-11-06"},{"lineNumber":620,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":621,"author":{"gitId":"aaapppsss"},"content":"### Generate Calorie Goal","lastModifiedDate":"2021-11-06"},{"lineNumber":622,"author":{"gitId":"aaapppsss"},"content":"This feature allows the user to generate a daily calorie goal","lastModifiedDate":"2021-11-06"},{"lineNumber":623,"author":{"gitId":"aaapppsss"},"content":"according to their body type and their desired weekly weight change","lastModifiedDate":"2021-11-06"},{"lineNumber":624,"author":{"gitId":"aaapppsss"},"content":"and set that as their daily goal.","lastModifiedDate":"2021-11-06"},{"lineNumber":625,"author":{"gitId":"aaapppsss"},"content":"Given below is an example usage scenario and","lastModifiedDate":"2021-11-06"},{"lineNumber":626,"author":{"gitId":"aaapppsss"},"content":"how its mechanism behaves at each step.","lastModifiedDate":"2021-11-06"},{"lineNumber":627,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":628,"author":{"gitId":"aaapppsss"},"content":"1. The user executes the `calorie /generate /lose 0.1` command to ","lastModifiedDate":"2021-11-06"},{"lineNumber":629,"author":{"gitId":"aaapppsss"},"content":"generate a calorie goal that allows them to lose 0.1 kg per week","lastModifiedDate":"2021-11-06"},{"lineNumber":630,"author":{"gitId":"aaapppsss"},"content":"and set that as their daily goal. `GenerateCalorieGoalCommand#execute` is called, ","lastModifiedDate":"2021-11-06"},{"lineNumber":631,"author":{"gitId":"aaapppsss"},"content":"which calls `User#handleGenerateCalorieGoalCommand`. ","lastModifiedDate":"2021-11-06"},{"lineNumber":632,"author":{"gitId":"aaapppsss"},"content":"2. If no exceptions were thrown, `User#calculateCalorieGoal` is called, which ","lastModifiedDate":"2021-11-06"},{"lineNumber":633,"author":{"gitId":"aaapppsss"},"content":"calculates the calorie goal accordingly and returns it.","lastModifiedDate":"2021-11-06"},{"lineNumber":634,"author":{"gitId":"aaapppsss"},"content":"3. `User#setCalorieGoal` is called to set the user\u0027s calorie goal to the generated","lastModifiedDate":"2021-11-06"},{"lineNumber":635,"author":{"gitId":"aaapppsss"},"content":"goal.","lastModifiedDate":"2021-11-06"},{"lineNumber":636,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":637,"author":{"gitId":"aaapppsss"},"content":"### View Remaining Calories","lastModifiedDate":"2021-11-06"},{"lineNumber":638,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":639,"author":{"gitId":"aaapppsss"},"content":"This feature allows the user to view how many calories they have remaining","lastModifiedDate":"2021-11-06"},{"lineNumber":640,"author":{"gitId":"aaapppsss"},"content":"for the day before they hit their daily calorie goal. ","lastModifiedDate":"2021-11-06"},{"lineNumber":641,"author":{"gitId":"aaapppsss"},"content":"Given below is an example usage scenario and","lastModifiedDate":"2021-11-06"},{"lineNumber":642,"author":{"gitId":"aaapppsss"},"content":"how its mechanism behaves at each step.","lastModifiedDate":"2021-11-06"},{"lineNumber":643,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":644,"author":{"gitId":"aaapppsss"},"content":"1. The user executes the `calorie /remain` command to view their remaining calories","lastModifiedDate":"2021-11-06"},{"lineNumber":645,"author":{"gitId":"aaapppsss"},"content":"for the day. `ViewRemainingCalorieCommand#execute` is called, which calls `User#getCaloriesRemaining`.","lastModifiedDate":"2021-11-06"},{"lineNumber":646,"author":{"gitId":"aaapppsss"},"content":"2. `EntryDatabase#getTotalDailyCalorie` is then called, which adds up the calories of all","lastModifiedDate":"2021-11-06"},{"lineNumber":647,"author":{"gitId":"aaapppsss"},"content":"entries in the food tracker. This is subtracted from the user\u0027s daily calorie goal. ","lastModifiedDate":"2021-11-06"},{"lineNumber":648,"author":{"gitId":"aaapppsss"},"content":"The resulting calories remaining is then displayed to the user. ","lastModifiedDate":"2021-11-06"},{"lineNumber":649,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":650,"author":{"gitId":"kengjit"},"content":"### Add Food Entry","lastModifiedDate":"2021-11-06"},{"lineNumber":651,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":652,"author":{"gitId":"kengjit"},"content":"**Add from existing database**","lastModifiedDate":"2021-11-06"},{"lineNumber":653,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":654,"author":{"gitId":"kengjit"},"content":"Test case: `add /bfast chicken cutlet`","lastModifiedDate":"2021-11-06"},{"lineNumber":655,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":656,"author":{"gitId":"kengjit"},"content":"Expected: User to be able to choose from a list of food from existing database which includes \"chicken cutlet\"","lastModifiedDate":"2021-11-06"},{"lineNumber":657,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":658,"author":{"gitId":"kengjit"},"content":"**Add a custom food entry**","lastModifiedDate":"2021-11-06"},{"lineNumber":659,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":660,"author":{"gitId":"kengjit"},"content":"Test case: `add /snack vanilla icecream`","lastModifiedDate":"2021-11-06"},{"lineNumber":661,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":662,"author":{"gitId":"kengjit"},"content":"Expected: User to be able to add a new food entry \"vanilla icecream\" since it does not exist in the existing database","lastModifiedDate":"2021-11-06"},{"lineNumber":663,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":664,"author":{"gitId":"kengjit"},"content":"### Edit Food Entry","lastModifiedDate":"2021-11-06"},{"lineNumber":665,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":666,"author":{"gitId":"kengjit"},"content":"Prerequisite: User must have **1 or more** existing food entries","lastModifiedDate":"2021-11-06"},{"lineNumber":667,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":668,"author":{"gitId":"kengjit"},"content":"Test case: `edit 1 chicken rice`","lastModifiedDate":"2021-11-06"},{"lineNumber":669,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":670,"author":{"gitId":"kengjit"},"content":"Expected: User to be able to choose from a list of food from existing database to edit the first entry to","lastModifiedDate":"2021-11-06"},{"lineNumber":671,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":672,"author":{"gitId":"kengjit"},"content":"### List Food Entry","lastModifiedDate":"2021-11-06"},{"lineNumber":673,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":674,"author":{"gitId":"kengjit"},"content":"Prerequisite: User should have **1 or more** existing food entries","lastModifiedDate":"2021-11-06"},{"lineNumber":675,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":676,"author":{"gitId":"kengjit"},"content":"**List entries for the day**","lastModifiedDate":"2021-11-06"},{"lineNumber":677,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":678,"author":{"gitId":"kengjit"},"content":"Test case: `list /entry /day`","lastModifiedDate":"2021-11-06"},{"lineNumber":679,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":680,"author":{"gitId":"kengjit"},"content":"Expected: User should be able to see all food entries that was logged in today","lastModifiedDate":"2021-11-06"},{"lineNumber":681,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":682,"author":{"gitId":"kengjit"},"content":"**List entries for the past week**","lastModifiedDate":"2021-11-06"},{"lineNumber":683,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":684,"author":{"gitId":"kengjit"},"content":"Test case: `list /entry /week`","lastModifiedDate":"2021-11-06"},{"lineNumber":685,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":686,"author":{"gitId":"kengjit"},"content":"Expected: User should be able to see all food entries that was logged in the past week","lastModifiedDate":"2021-11-06"},{"lineNumber":687,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":688,"author":{"gitId":"kengjit"},"content":"### Delete Food Entry","lastModifiedDate":"2021-11-06"},{"lineNumber":689,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":690,"author":{"gitId":"kengjit"},"content":"Prerequisite: User should have **1 or more** existing food entries","lastModifiedDate":"2021-11-06"},{"lineNumber":691,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":692,"author":{"gitId":"kengjit"},"content":"Test case: `remove /entry 1`","lastModifiedDate":"2021-11-06"},{"lineNumber":693,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":694,"author":{"gitId":"kengjit"},"content":"Expected: The first entry is deleted","lastModifiedDate":"2021-11-06"},{"lineNumber":695,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":696,"author":{"gitId":"kengjit"},"content":"### Find Food Entry","lastModifiedDate":"2021-11-06"},{"lineNumber":697,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":698,"author":{"gitId":"kengjit"},"content":"Prerequisite: User should have **1 or more** existing food entries consisting of the keyword \"chicken\"","lastModifiedDate":"2021-11-06"},{"lineNumber":699,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":700,"author":{"gitId":"kengjit"},"content":"Test case: `find /entry chicken`","lastModifiedDate":"2021-11-06"},{"lineNumber":701,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":702,"author":{"gitId":"kengjit"},"content":"Expected: User should be able to see all entries consisting of the keyword \"chicken\"","lastModifiedDate":"2021-11-06"},{"lineNumber":703,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":704,"author":{"gitId":"brendanlsz"},"content":"### View statistics","lastModifiedDate":"2021-11-07"},{"lineNumber":705,"author":{"gitId":"brendanlsz"},"content":"#### Weekly report","lastModifiedDate":"2021-11-07"},{"lineNumber":706,"author":{"gitId":"brendanlsz"},"content":"Prerequisite: Have at least one existing `Entry`","lastModifiedDate":"2021-11-07"},{"lineNumber":707,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":708,"author":{"gitId":"brendanlsz"},"content":"Test case: `summary /week`","lastModifiedDate":"2021-11-07"},{"lineNumber":709,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":710,"author":{"gitId":"brendanlsz"},"content":"Expected Output: A weekly report is generated similar to the following:","lastModifiedDate":"2021-11-07"},{"lineNumber":711,"author":{"gitId":"brendanlsz"},"content":"![img](diagrams-UG/week-summary.png)","lastModifiedDate":"2021-11-07"},{"lineNumber":712,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":713,"author":{"gitId":"brendanlsz"},"content":"#### Monthly report","lastModifiedDate":"2021-11-07"},{"lineNumber":714,"author":{"gitId":"brendanlsz"},"content":"Prerequisite: Have at least one existing `Entry`","lastModifiedDate":"2021-11-07"},{"lineNumber":715,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":716,"author":{"gitId":"brendanlsz"},"content":"Test case: `summary /month`","lastModifiedDate":"2021-11-07"},{"lineNumber":717,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":718,"author":{"gitId":"brendanlsz"},"content":"Expected Output: A monthly report is generated similar to the following:","lastModifiedDate":"2021-11-07"},{"lineNumber":719,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":720,"author":{"gitId":"brendanlsz"},"content":"![img](diagrams-UG/month-summary.png)","lastModifiedDate":"2021-11-07"},{"lineNumber":721,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":722,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":723,"author":{"gitId":"brendanlsz"},"content":"### View suggestions","lastModifiedDate":"2021-11-07"},{"lineNumber":724,"author":{"gitId":"brendanlsz"},"content":"Prerequisite: ","lastModifiedDate":"2021-11-07"},{"lineNumber":725,"author":{"gitId":"brendanlsz"},"content":"- User data (gender, age, weight, height) is set correctly to ensure the calorie","lastModifiedDate":"2021-11-07"},{"lineNumber":726,"author":{"gitId":"brendanlsz"},"content":"goal is generated correctly","lastModifiedDate":"2021-11-07"},{"lineNumber":727,"author":{"gitId":"brendanlsz"},"content":"- `FoodDatabase` has at least one `Food`","lastModifiedDate":"2021-11-07"},{"lineNumber":728,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":729,"author":{"gitId":"brendanlsz"},"content":"Test cases: ","lastModifiedDate":"2021-11-07"},{"lineNumber":730,"author":{"gitId":"brendanlsz"},"content":"- `suggest /FOODTYPE` (result unsorted)","lastModifiedDate":"2021-11-07"},{"lineNumber":731,"author":{"gitId":"brendanlsz"},"content":"- `suggest /FOODTYPE /sort` (result sorted)","lastModifiedDate":"2021-11-07"},{"lineNumber":732,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":733,"author":{"gitId":"brendanlsz"},"content":"\u003e **_NOTE:_** FOODTYPE is one of: `meal` / `snack` / `beverage` / `others`","lastModifiedDate":"2021-11-07"},{"lineNumber":734,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":735,"author":{"gitId":"brendanlsz"},"content":"Expected Output: Matching `Food` suggestions are shown.","lastModifiedDate":"2021-11-07"},{"lineNumber":736,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":737,"author":{"gitId":"brendanlsz"},"content":"\u003ch3\u003eParser Component\u003c/h3\u003e","lastModifiedDate":"2021-10-26"},{"lineNumber":738,"author":{"gitId":"brendanlsz"},"content":"\u003cdiv\u003eThe parser component makes use of the user input String from the \u003ccode\u003efitNus\u003c/code\u003e class to detect the type of \u003ccode\u003eCommand\u003c/code\u003e object called.","lastModifiedDate":"2021-10-26"},{"lineNumber":739,"author":{"gitId":"brendanlsz"},"content":"It then returns a \u003ccode\u003eCommand\u003c/code\u003e object that represents the type of command called through the input.\u003c/div\u003e","lastModifiedDate":"2021-10-26"},{"lineNumber":740,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":741,"author":{"gitId":"brendanlsz"},"content":"\u003cul\u003e","lastModifiedDate":"2021-10-26"},{"lineNumber":742,"author":{"gitId":"brendanlsz"},"content":"\u003cli\u003edetermines the type of \u003ccode\u003eCommand\u003c/code\u003e object and returns it.\u003c/li\u003e","lastModifiedDate":"2021-10-26"},{"lineNumber":743,"author":{"gitId":"brendanlsz"},"content":"\u003cli\u003ehandles input exceptions and returns relevant \u003ccode\u003eFitNusException\u003c/code\u003e command.\u003c/li\u003e","lastModifiedDate":"2021-10-26"},{"lineNumber":744,"author":{"gitId":"brendanlsz"},"content":"\u003c/ul\u003e","lastModifiedDate":"2021-10-26"},{"lineNumber":745,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":746,"author":{"gitId":"brendanlsz"},"content":"\u003ch4\u003eImplementation\u003c/h4\u003e","lastModifiedDate":"2021-10-26"},{"lineNumber":747,"author":{"gitId":"brendanlsz"},"content":"\u003cul\u003e","lastModifiedDate":"2021-10-26"},{"lineNumber":748,"author":{"gitId":"brendanlsz"},"content":"\u003cli\u003e\u003ch5\u003eIdentifying type of method called\u003c/h5\u003e","lastModifiedDate":"2021-10-26"},{"lineNumber":749,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":750,"author":{"gitId":"brendanlsz"},"content":"The \u003ccode\u003eParser\u003c/code\u003e is invoked through the \u003ccode\u003eparseCommandType()\u003c/code\u003e method. The input is first split up by identifying a space character.","lastModifiedDate":"2021-10-26"},{"lineNumber":751,"author":{"gitId":"brendanlsz"},"content":"If no space character is detected, and the \u003ccode\u003ehelp\u003c/code\u003e or \u003ccode\u003eexit\u003c/code\u003e method was not called, a \u003ccode\u003eFitNusException\u003c/code\u003e is thrown. The first string element is ","lastModifiedDate":"2021-10-26"},{"lineNumber":752,"author":{"gitId":"brendanlsz"},"content":"then compared with default list of commands to determine the type of method called using if-else statements.","lastModifiedDate":"2021-10-26"},{"lineNumber":753,"author":{"gitId":"siyuancheng178"},"content":"\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e","lastModifiedDate":"2021-10-27"},{"lineNumber":754,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":755,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":756,"author":{"gitId":"-"},"content":"## Instructions for manual testing","lastModifiedDate":"2021-11-06"},{"lineNumber":757,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":758,"author":{"gitId":"siyuancheng178"},"content":"### Delete food","lastModifiedDate":"2021-11-06"},{"lineNumber":759,"author":{"gitId":"siyuancheng178"},"content":"1. Delete food inside the food database at certain index.","lastModifiedDate":"2021-11-06"},{"lineNumber":760,"author":{"gitId":"siyuancheng178"},"content":"2. Prerequisite: there must be at least one food inside the database","lastModifiedDate":"2021-11-06"},{"lineNumber":761,"author":{"gitId":"siyuancheng178"},"content":"3. Test case: `remove /food 2`","lastModifiedDate":"2021-11-06"},{"lineNumber":762,"author":{"gitId":"siyuancheng178"},"content":"Expected: delete the 2nd food at the food database successfully.","lastModifiedDate":"2021-11-06"},{"lineNumber":763,"author":{"gitId":"siyuancheng178"},"content":"4. Other incorrect commands to try:","lastModifiedDate":"2021-11-06"},{"lineNumber":764,"author":{"gitId":"siyuancheng178"},"content":"  - `remove /food` (the index for food is mandatory)","lastModifiedDate":"2021-11-06"},{"lineNumber":765,"author":{"gitId":"siyuancheng178"},"content":"  - `remove /food a` (the index is supposed to be an integer)","lastModifiedDate":"2021-11-06"},{"lineNumber":766,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":767,"author":{"gitId":"siyuancheng178"},"content":"### Find food","lastModifiedDate":"2021-11-06"},{"lineNumber":768,"author":{"gitId":"siyuancheng178"},"content":"1. find food inside the food database according to keywords.","lastModifiedDate":"2021-11-06"},{"lineNumber":769,"author":{"gitId":"siyuancheng178"},"content":"2. Prerequisite: there must be at least one food inside the database","lastModifiedDate":"2021-11-06"},{"lineNumber":770,"author":{"gitId":"siyuancheng178"},"content":"3. Test case: `remove /food rice`","lastModifiedDate":"2021-11-06"},{"lineNumber":771,"author":{"gitId":"siyuancheng178"},"content":"   Expected: returns all the foods inside the food database contain the keyword \"rice\".","lastModifiedDate":"2021-11-06"},{"lineNumber":772,"author":{"gitId":"siyuancheng178"},"content":"4. Other incorrect commands to try:","lastModifiedDate":"2021-11-06"},{"lineNumber":773,"author":{"gitId":"siyuancheng178"},"content":"- `remove /food` (the keyword for searching is mandatory)","lastModifiedDate":"2021-11-06"},{"lineNumber":774,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":775,"author":{"gitId":"siyuancheng178"},"content":"### List foods","lastModifiedDate":"2021-11-06"},{"lineNumber":776,"author":{"gitId":"siyuancheng178"},"content":"1. List all foods inside food database","lastModifiedDate":"2021-11-06"},{"lineNumber":777,"author":{"gitId":"siyuancheng178"},"content":"2. Prerequisite: there must be at least one food inside the database","lastModifiedDate":"2021-11-06"},{"lineNumber":778,"author":{"gitId":"siyuancheng178"},"content":"3. Test case: `list /food`","lastModifiedDate":"2021-11-06"},{"lineNumber":779,"author":{"gitId":"siyuancheng178"},"content":"   Expected: returns all the foods inside the food database.","lastModifiedDate":"2021-11-06"},{"lineNumber":780,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":781,"author":{"gitId":"siyuancheng178"},"content":"## NF Requirements","lastModifiedDate":"2021-11-06"},{"lineNumber":782,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":783,"author":{"gitId":"siyuancheng178"},"content":"1. The software should be compatible with mainstream operating systems (Windows, macOS, Linux).","lastModifiedDate":"2021-11-06"},{"lineNumber":784,"author":{"gitId":"siyuancheng178"},"content":"2. Data of users and foods should be stored and retrieved swiftly without delay, even for a long time user with very a big data set. ","lastModifiedDate":"2021-11-06"},{"lineNumber":785,"author":{"gitId":"siyuancheng178"},"content":"3. User\u0027s and food\u0027s data should be kept safely, and it is crashed, the program should be able to detect it.","lastModifiedDate":"2021-11-06"}],"authorContributionMap":{"kengjit":195,"brendanlsz":174,"siyuancheng178":65,"-":21,"aaapppsss":218,"praj-bellakka":112}},{"path":"docs/README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"siyuancheng178"},"content":"# FitNus","lastModifiedDate":"2021-11-06"},{"lineNumber":2,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":3,"author":{"gitId":"siyuancheng178"},"content":"FitNUS Tracker is a desktop app specially made for Computing Students","lastModifiedDate":"2021-11-06"},{"lineNumber":4,"author":{"gitId":"siyuancheng178"},"content":"living in University Town, to track daily food intake and keep a healthy lifestyle.","lastModifiedDate":"2021-11-06"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Useful links:","lastModifiedDate":"2020-05-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"* [User Guide](UserGuide.md)","lastModifiedDate":"2020-05-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"* [Developer Guide](DeveloperGuide.md)","lastModifiedDate":"2020-05-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"* [About Us](AboutUs.md)","lastModifiedDate":"2020-05-24"}],"authorContributionMap":{"siyuancheng178":4,"-":6}},{"path":"docs/UserGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide","lastModifiedDate":"2020-05-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"## Introduction","lastModifiedDate":"2020-05-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":5,"author":{"gitId":"kengjit"},"content":"FitNUS Tracker is a desktop app for tracking daily food intake to keep a healthy lifestyle. FitNUS is specially made for Computing Students","lastModifiedDate":"2021-11-02"},{"lineNumber":6,"author":{"gitId":"kengjit"},"content":"living in University Town, with features and functionalities taylor made for them.","lastModifiedDate":"2021-11-02"},{"lineNumber":7,"author":{"gitId":"aaapppsss"},"content":"It is based on a Command Line Interface (CLI) and has rich functionality in order to cater to the needs of potential users.","lastModifiedDate":"2021-10-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":9,"author":{"gitId":"praj-bellakka"},"content":"Here is the list of sections we will be covering in this User Guide.","lastModifiedDate":"2021-10-22"},{"lineNumber":10,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":11,"author":{"gitId":"siyuancheng178"},"content":"- [Quick Start](#quick-start)","lastModifiedDate":"2021-11-06"},{"lineNumber":12,"author":{"gitId":"siyuancheng178"},"content":"- [Features](#features)","lastModifiedDate":"2021-11-06"},{"lineNumber":13,"author":{"gitId":"kengjit"},"content":"  - [Entry Database](#food-tracker)","lastModifiedDate":"2021-11-06"},{"lineNumber":14,"author":{"gitId":"kengjit"},"content":"    - [Adding food entry: `add`](#adding-food-tracker-entry-add)","lastModifiedDate":"2021-11-06"},{"lineNumber":15,"author":{"gitId":"siyuancheng178"},"content":"    - [Adding meal plan entry: `add /mealplan`](#adding-meal-plan-entry-add-mealplan)","lastModifiedDate":"2021-11-06"},{"lineNumber":16,"author":{"gitId":"kengjit"},"content":"    - [Editing existing food entry: `edit`](#editing-existing-food-tracker-entry-edit)","lastModifiedDate":"2021-11-06"},{"lineNumber":17,"author":{"gitId":"kengjit"},"content":"    - [Deleting food entry: `remove /entry`](#deleting-food-tracker-entry-remove)","lastModifiedDate":"2021-11-06"},{"lineNumber":18,"author":{"gitId":"siyuancheng178"},"content":"    - [Listing tracker entries: `list /entry`](#listing-tracker-entries-list)","lastModifiedDate":"2021-11-06"},{"lineNumber":19,"author":{"gitId":"siyuancheng178"},"content":"    - [Searching for tracker entries with keyword: `find /entry`](#searching-for-tracker-entries-with-keyword-find)","lastModifiedDate":"2021-11-06"},{"lineNumber":20,"author":{"gitId":"siyuancheng178"},"content":"  - [Food Database](#food-database)","lastModifiedDate":"2021-11-06"},{"lineNumber":21,"author":{"gitId":"siyuancheng178"},"content":"    - [Deleting food from food database: `remove /food`](#deleting-food-from-food-database-remove)","lastModifiedDate":"2021-11-06"},{"lineNumber":22,"author":{"gitId":"siyuancheng178"},"content":"    - [Searching for foods with keyword: `find /food`](#searching-for-foods-with-keyword-find)","lastModifiedDate":"2021-11-06"},{"lineNumber":23,"author":{"gitId":"siyuancheng178"},"content":"    - [Listing foods in food database: `list /food`](#listing-foods-in-food-database-list)","lastModifiedDate":"2021-11-06"},{"lineNumber":24,"author":{"gitId":"siyuancheng178"},"content":"  - [Meal Plan Database](#meal-plan-database)","lastModifiedDate":"2021-11-06"},{"lineNumber":25,"author":{"gitId":"siyuancheng178"},"content":"    - [Creating new meal plan: `create /mealplan`](#creating-meal-plan-by-adding-food-create)","lastModifiedDate":"2021-11-06"},{"lineNumber":26,"author":{"gitId":"siyuancheng178"},"content":"    - [Listing meal plan entries: `list /mealplan`](#listing-meal-plan-entries-list)","lastModifiedDate":"2021-11-06"},{"lineNumber":27,"author":{"gitId":"kengjit"},"content":"  - [Weight Tracker](#weight-tracker)","lastModifiedDate":"2021-11-06"},{"lineNumber":28,"author":{"gitId":"siyuancheng178"},"content":"    - [Recording weight: `weight /set`](#recording-weight-weight-set)","lastModifiedDate":"2021-11-06"},{"lineNumber":29,"author":{"gitId":"siyuancheng178"},"content":"    - [Listing weight records: `list /weight`](#listing-weight-records-list)","lastModifiedDate":"2021-11-06"},{"lineNumber":30,"author":{"gitId":"siyuancheng178"},"content":"  - [Personalisation](#personalisation)","lastModifiedDate":"2021-11-06"},{"lineNumber":31,"author":{"gitId":"siyuancheng178"},"content":"    - [Setting gender: `gender /set`](#setting-gender-gender-set)","lastModifiedDate":"2021-11-06"},{"lineNumber":32,"author":{"gitId":"siyuancheng178"},"content":"    - [Setting height: `height /set`](#setting-height-height-set)","lastModifiedDate":"2021-11-06"},{"lineNumber":33,"author":{"gitId":"siyuancheng178"},"content":"    - [Setting age: `age /set`](#setting-age-age-set)","lastModifiedDate":"2021-11-06"},{"lineNumber":34,"author":{"gitId":"siyuancheng178"},"content":"    - [Setting calorie goal: `calorie /set`](#setting-calorie-goal-calorie-set)","lastModifiedDate":"2021-11-06"},{"lineNumber":35,"author":{"gitId":"siyuancheng178"},"content":"    - [Generate and set calorie goal: `calorie /generate`](#generate-and-set-calorie-goal-calorie-generate)","lastModifiedDate":"2021-11-06"},{"lineNumber":36,"author":{"gitId":"siyuancheng178"},"content":"    - [View personal data: `list /user`](#view-personal-data-list-user)","lastModifiedDate":"2021-11-06"},{"lineNumber":37,"author":{"gitId":"siyuancheng178"},"content":"  - [Other](#other)","lastModifiedDate":"2021-11-06"},{"lineNumber":38,"author":{"gitId":"siyuancheng178"},"content":"    - [Viewing statistics: `summary`](#view-statistics-summary)","lastModifiedDate":"2021-11-06"},{"lineNumber":39,"author":{"gitId":"siyuancheng178"},"content":"    - [Viewing help: `help`](#viewing-help-help)","lastModifiedDate":"2021-11-06"},{"lineNumber":40,"author":{"gitId":"siyuancheng178"},"content":"    - [Getting food recommendations: `suggest`](#suggest-food-based-on-food-type-and-calorie-goal-suggest)","lastModifiedDate":"2021-11-06"},{"lineNumber":41,"author":{"gitId":"siyuancheng178"},"content":"    - [Exiting FitNUS: `exit`](#quit-fitnus)","lastModifiedDate":"2021-11-06"},{"lineNumber":42,"author":{"gitId":"kengjit"},"content":"- [User Stories](#user-stories)","lastModifiedDate":"2021-11-06"},{"lineNumber":43,"author":{"gitId":"siyuancheng178"},"content":"- [Command Summary](#command-summary)","lastModifiedDate":"2021-11-06"},{"lineNumber":44,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":45,"author":{"gitId":"praj-bellakka"},"content":"---","lastModifiedDate":"2021-10-22"},{"lineNumber":46,"author":{"gitId":"-"},"content":"## Quick Start","lastModifiedDate":"2020-05-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":48,"author":{"gitId":"praj-bellakka"},"content":"1. Ensure that you have Java 11 installed in your computer. ","lastModifiedDate":"2021-10-22"},{"lineNumber":49,"author":{"gitId":"praj-bellakka"},"content":"2. Download the latest version of `fitNus.jar` from [here](https://github.com/AY2122S1-CS2113T-W12-1/tp/releases/tag/V2.0).","lastModifiedDate":"2021-10-22"},{"lineNumber":50,"author":{"gitId":"praj-bellakka"},"content":"3. Copy the file to the folder you want to use as the home folder for your FitNUS Tracker.","lastModifiedDate":"2021-10-22"},{"lineNumber":51,"author":{"gitId":"siyuancheng178"},"content":"4. Type the following command in your terminal to run this program:`java -jar FitNus.jar`","lastModifiedDate":"2021-11-06"},{"lineNumber":52,"author":{"gitId":"siyuancheng178"},"content":"5. The application will prompt first-time users (i.e. users with incomplete or missing user data) to set up their profile. If you have successfully run the programme, you should see the following message as follows:","lastModifiedDate":"2021-10-31"},{"lineNumber":53,"author":{"gitId":"siyuancheng178"},"content":"```","lastModifiedDate":"2021-10-31"},{"lineNumber":54,"author":{"gitId":"aaapppsss"},"content":"------------------","lastModifiedDate":"2021-11-06"},{"lineNumber":55,"author":{"gitId":"siyuancheng178"},"content":"Welcome to FitNUS Tracker!","lastModifiedDate":"2021-10-31"},{"lineNumber":56,"author":{"gitId":"aaapppsss"},"content":"Successfully preloaded 0 foods","lastModifiedDate":"2021-10-27"},{"lineNumber":57,"author":{"gitId":"aaapppsss"},"content":"Successfully preloaded 0 entries","lastModifiedDate":"2021-10-27"},{"lineNumber":58,"author":{"gitId":"aaapppsss"},"content":"Successfully preloaded 0 meal plans","lastModifiedDate":"2021-11-06"},{"lineNumber":59,"author":{"gitId":"aaapppsss"},"content":"Successfully preloaded weight data","lastModifiedDate":"2021-10-27"},{"lineNumber":60,"author":{"gitId":"aaapppsss"},"content":"------------------","lastModifiedDate":"2021-11-06"},{"lineNumber":61,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":62,"author":{"gitId":"aaapppsss"},"content":"[X] Please enter your gender (m/f):","lastModifiedDate":"2021-11-06"},{"lineNumber":63,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":64,"author":{"gitId":"siyuancheng178"},"content":"```","lastModifiedDate":"2021-10-31"},{"lineNumber":65,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":66,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":67,"author":{"gitId":"-"},"content":"## Features","lastModifiedDate":"2020-05-24"},{"lineNumber":68,"author":{"gitId":"praj-bellakka"},"content":"\u003e **⚠️ Notes about command format**","lastModifiedDate":"2021-10-22"},{"lineNumber":69,"author":{"gitId":"praj-bellakka"},"content":"\u003e ","lastModifiedDate":"2021-10-22"},{"lineNumber":70,"author":{"gitId":"praj-bellakka"},"content":"\u003e - Words in **UPPER_CASE** are the parameters to be input by the user!","lastModifiedDate":"2021-10-22"},{"lineNumber":71,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":72,"author":{"gitId":"praj-bellakka"},"content":"\u003e  e.g. in `add /food NAME`, NAME is a parameter which can be substituted as `add /food burgers`.","lastModifiedDate":"2021-10-22"},{"lineNumber":73,"author":{"gitId":"praj-bellakka"},"content":"\u003e - Items in **[Square brackets]** are optional!","lastModifiedDate":"2021-10-22"},{"lineNumber":74,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":75,"author":{"gitId":"aaapppsss"},"content":"\u003e  e.g. `add [/MEALTYPE] FOOD_NAME` can be used as `add /lunch sandwiches` or `add sandwiches`.","lastModifiedDate":"2021-10-23"},{"lineNumber":76,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":77,"author":{"gitId":"kengjit"},"content":"### Entry Database","lastModifiedDate":"2021-11-06"},{"lineNumber":78,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":79,"author":{"gitId":"kengjit"},"content":"#### Adding food entry: `add`","lastModifiedDate":"2021-11-06"},{"lineNumber":80,"author":{"gitId":"kengjit"},"content":"Adds an entry to the Entry Database and prompts the user to fill in any additional information needed if an exact match to the user inputted food name was not found in the food database. ","lastModifiedDate":"2021-11-06"},{"lineNumber":81,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":82,"author":{"gitId":"praj-bellakka"},"content":"Format: `add [/MEALTYPE] FOOD_NAME`","lastModifiedDate":"2021-10-22"},{"lineNumber":83,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":84,"author":{"gitId":"praj-bellakka"},"content":"* The `MEALTYPE` can be of the following 4 types:","lastModifiedDate":"2021-10-22"},{"lineNumber":85,"author":{"gitId":"praj-bellakka"},"content":"  * `bfast` - to denote breakfast","lastModifiedDate":"2021-10-22"},{"lineNumber":86,"author":{"gitId":"praj-bellakka"},"content":"  * `lunch` - to denote lunch","lastModifiedDate":"2021-10-22"},{"lineNumber":87,"author":{"gitId":"praj-bellakka"},"content":"  * `dinner` - to denote dinner","lastModifiedDate":"2021-10-22"},{"lineNumber":88,"author":{"gitId":"praj-bellakka"},"content":"  * `snack` - to denote snacks","lastModifiedDate":"2021-10-22"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":90,"author":{"gitId":"praj-bellakka"},"content":"\u003e **⚠️ Notes about omitting `MEALTYPE`**","lastModifiedDate":"2021-10-22"},{"lineNumber":91,"author":{"gitId":"praj-bellakka"},"content":"\u003e","lastModifiedDate":"2021-10-22"},{"lineNumber":92,"author":{"gitId":"praj-bellakka"},"content":"\u003e The `MEALTYPE` will be automatically added based on the current time if not explicitly specified based on the following criteria:","lastModifiedDate":"2021-10-22"},{"lineNumber":93,"author":{"gitId":"praj-bellakka"},"content":"\u003e- Breakfast: 6am to 10am","lastModifiedDate":"2021-10-22"},{"lineNumber":94,"author":{"gitId":"praj-bellakka"},"content":"\u003e- Lunch: 11am to 2pm","lastModifiedDate":"2021-10-22"},{"lineNumber":95,"author":{"gitId":"praj-bellakka"},"content":"\u003e- Dinner: 6pm to 9pm","lastModifiedDate":"2021-10-22"},{"lineNumber":96,"author":{"gitId":"praj-bellakka"},"content":"\u003e- Snack: Remaining time","lastModifiedDate":"2021-10-22"},{"lineNumber":97,"author":{"gitId":"praj-bellakka"},"content":"\u003e ","lastModifiedDate":"2021-11-02"},{"lineNumber":98,"author":{"gitId":"praj-bellakka"},"content":"\u003e **If a backslash character (\"/\") is written as the first character of the food name when omitting the `MEALTYPE`, the app will reject the input!**","lastModifiedDate":"2021-11-02"},{"lineNumber":99,"author":{"gitId":"praj-bellakka"},"content":"\u003e","lastModifiedDate":"2021-11-02"},{"lineNumber":100,"author":{"gitId":"praj-bellakka"},"content":"\u003e Eg. The input `add /rice noodles` will be rejected, whereas the input `add /bfast /rice noodles` will be accepted.","lastModifiedDate":"2021-11-02"},{"lineNumber":101,"author":{"gitId":"kengjit"},"content":"* If there are any pre-set food that matches `FOOD_NAME`:","lastModifiedDate":"2021-10-25"},{"lineNumber":102,"author":{"gitId":"kengjit"},"content":"  * You can do one of the following:","lastModifiedDate":"2021-10-25"},{"lineNumber":103,"author":{"gitId":"kengjit"},"content":"    * Select which food you would like to add","lastModifiedDate":"2021-10-25"},{"lineNumber":104,"author":{"gitId":"kengjit"},"content":"    * Create your own custom food","lastModifiedDate":"2021-10-25"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":107,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":108,"author":{"gitId":"kengjit"},"content":"Examples of usage: `add /bfast chocolate`","lastModifiedDate":"2021-10-25"},{"lineNumber":109,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":110,"author":{"gitId":"kengjit"},"content":"Sample output:","lastModifiedDate":"2021-10-25"},{"lineNumber":111,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":112,"author":{"gitId":"kengjit"},"content":"![Add Entry Sample Output](diagrams-UG/AddEntrySampleOutput.PNG)","lastModifiedDate":"2021-11-06"},{"lineNumber":113,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":114,"author":{"gitId":"kengjit"},"content":"\u003cp\u003e\u0026nbsp;\u003c/p\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":115,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":116,"author":{"gitId":"praj-bellakka"},"content":"#### Adding meal plan entry: `add /mealplan`","lastModifiedDate":"2021-11-02"},{"lineNumber":117,"author":{"gitId":"praj-bellakka"},"content":"Adds a meal plan consisting of existing food items. To add a meal plan, there needs to be at least 1 meal plan inside the meal plan database. ","lastModifiedDate":"2021-11-07"},{"lineNumber":118,"author":{"gitId":"praj-bellakka"},"content":"Click on [this link](#creating-meal-plan-by-adding-food-create) to create a meal plan.  ","lastModifiedDate":"2021-11-07"},{"lineNumber":119,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":120,"author":{"gitId":"praj-bellakka"},"content":"Format: `add /mealplan [/MEALTYPE] INDEX_OF_MEALPLAN`","lastModifiedDate":"2021-11-02"},{"lineNumber":121,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":122,"author":{"gitId":"praj-bellakka"},"content":"* The `MEALTYPE` can be of the following 4 types:","lastModifiedDate":"2021-11-07"},{"lineNumber":123,"author":{"gitId":"praj-bellakka"},"content":"  * `bfast` - to denote breakfast","lastModifiedDate":"2021-11-07"},{"lineNumber":124,"author":{"gitId":"praj-bellakka"},"content":"  * `lunch` - to denote lunch","lastModifiedDate":"2021-11-07"},{"lineNumber":125,"author":{"gitId":"praj-bellakka"},"content":"  * `dinner` - to denote dinner","lastModifiedDate":"2021-11-07"},{"lineNumber":126,"author":{"gitId":"praj-bellakka"},"content":"  * `snack` - to denote snacks","lastModifiedDate":"2021-11-07"},{"lineNumber":127,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":128,"author":{"gitId":"praj-bellakka"},"content":"If a MEALTYPE is not specified, FitNus will automatically tag the meal based on the current time.","lastModifiedDate":"2021-11-07"},{"lineNumber":129,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":130,"author":{"gitId":"praj-bellakka"},"content":"\u003e **⚠️ Notes about `INDEX_OF_MEALPLAN`**","lastModifiedDate":"2021-11-02"},{"lineNumber":131,"author":{"gitId":"praj-bellakka"},"content":"\u003e","lastModifiedDate":"2021-11-02"},{"lineNumber":132,"author":{"gitId":"praj-bellakka"},"content":"\u003e INDEX_OF_MEALPLAN refers to the index of the meal plan(s) shown when command `list /mealplan` is used.","lastModifiedDate":"2021-11-02"},{"lineNumber":133,"author":{"gitId":"praj-bellakka"},"content":"\u003e","lastModifiedDate":"2021-11-02"},{"lineNumber":134,"author":{"gitId":"praj-bellakka"},"content":"\u003e INDEX_OF_MEALPLAN must be an integer value and within the range shown above.","lastModifiedDate":"2021-11-02"},{"lineNumber":135,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":136,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":137,"author":{"gitId":"praj-bellakka"},"content":"Examples of usage: `add /mealplan /dinner 1`","lastModifiedDate":"2021-11-02"},{"lineNumber":138,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":139,"author":{"gitId":"praj-bellakka"},"content":"Sample output:","lastModifiedDate":"2021-11-02"},{"lineNumber":140,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":141,"author":{"gitId":"praj-bellakka"},"content":"![img.png](diagrams-UG/addMealPlan.png)","lastModifiedDate":"2021-11-07"},{"lineNumber":142,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":143,"author":{"gitId":"kengjit"},"content":"#### Editing existing food entry: `edit`","lastModifiedDate":"2021-11-06"},{"lineNumber":144,"author":{"gitId":"kengjit"},"content":"Edits an existing entry\u0027s food information. FitNUS will search for FOOD_NAME in the food database ","lastModifiedDate":"2021-11-06"},{"lineNumber":145,"author":{"gitId":"kengjit"},"content":"and update the specified entry\u0027s food details accordingly.","lastModifiedDate":"2021-10-24"},{"lineNumber":146,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":147,"author":{"gitId":"kengjit"},"content":"Format: `edit INDEX_OF_ENTRY FOOD_NAME`","lastModifiedDate":"2021-10-24"},{"lineNumber":148,"author":{"gitId":"kengjit"},"content":"\u003e **⚠️ Notes about `INDEX_OF_ENTRY`**","lastModifiedDate":"2021-10-24"},{"lineNumber":149,"author":{"gitId":"kengjit"},"content":"\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":150,"author":{"gitId":"kengjit"},"content":"\u003e INDEX_OF_ENTRY refers to the index of the entry shown when command `list /entry` is used.","lastModifiedDate":"2021-10-24"},{"lineNumber":151,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":152,"author":{"gitId":"kengjit"},"content":"* If there are any pre-set food that matches `FOOD_NAME`:","lastModifiedDate":"2021-11-02"},{"lineNumber":153,"author":{"gitId":"kengjit"},"content":"  * You can do one of the following:","lastModifiedDate":"2021-11-02"},{"lineNumber":154,"author":{"gitId":"kengjit"},"content":"    * Select which food you would like to add","lastModifiedDate":"2021-11-02"},{"lineNumber":155,"author":{"gitId":"kengjit"},"content":"    * Create your own custom food","lastModifiedDate":"2021-11-02"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":157,"author":{"gitId":"-"},"content":"Example of usage:","lastModifiedDate":"2020-05-24"},{"lineNumber":158,"author":{"gitId":"kengjit"},"content":"`edit 1 chicken`","lastModifiedDate":"2021-11-06"},{"lineNumber":159,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":160,"author":{"gitId":"kengjit"},"content":"Sample output:","lastModifiedDate":"2021-11-02"},{"lineNumber":161,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":162,"author":{"gitId":"kengjit"},"content":"![Edit Entry Sample Output](diagrams-UG/EditEntrySampleOutput.PNG)","lastModifiedDate":"2021-11-06"},{"lineNumber":163,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":164,"author":{"gitId":"kengjit"},"content":"\u003cp\u003e\u0026nbsp;\u003c/p\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":165,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":166,"author":{"gitId":"kengjit"},"content":"#### Deleting food entry: `remove`","lastModifiedDate":"2021-11-06"},{"lineNumber":167,"author":{"gitId":"kengjit"},"content":"Deletes an entry from the EntryDatabase.","lastModifiedDate":"2021-11-06"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":169,"author":{"gitId":"praj-bellakka"},"content":"Format: `remove /entry INDEX_OF_FOOD`","lastModifiedDate":"2021-10-22"},{"lineNumber":170,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":171,"author":{"gitId":"praj-bellakka"},"content":"Example of usage:","lastModifiedDate":"2021-10-22"},{"lineNumber":172,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":173,"author":{"gitId":"kengjit"},"content":"`remove /entry 1`","lastModifiedDate":"2021-11-06"},{"lineNumber":174,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":175,"author":{"gitId":"kengjit"},"content":"![Delete Entry Sample Output](diagrams-UG/DeleteEntrySampleOutput.PNG)","lastModifiedDate":"2021-11-06"},{"lineNumber":176,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":177,"author":{"gitId":"kengjit"},"content":"\u003cp\u003e\u0026nbsp;\u003c/p\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":178,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":179,"author":{"gitId":"kengjit"},"content":"#### Listing tracker entries: `list`","lastModifiedDate":"2021-10-24"},{"lineNumber":180,"author":{"gitId":"kengjit"},"content":"Lists out all foods entered for a given timeframe.","lastModifiedDate":"2021-10-24"},{"lineNumber":181,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":182,"author":{"gitId":"kengjit"},"content":"Format: `list /entry [/TIMEFRAME]`","lastModifiedDate":"2021-10-24"},{"lineNumber":183,"author":{"gitId":"kengjit"},"content":"* The `TIMEFRAME` can be of the following 2 types:","lastModifiedDate":"2021-10-24"},{"lineNumber":184,"author":{"gitId":"kengjit"},"content":"  * `day` - to show entries in the current day","lastModifiedDate":"2021-10-24"},{"lineNumber":185,"author":{"gitId":"kengjit"},"content":"  * `week` - to show entries in the past week","lastModifiedDate":"2021-10-24"},{"lineNumber":186,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":187,"author":{"gitId":"kengjit"},"content":"\u003e **⚠️ Notes about omitting `TIMEFRAME`**","lastModifiedDate":"2021-10-24"},{"lineNumber":188,"author":{"gitId":"kengjit"},"content":"\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":189,"author":{"gitId":"kengjit"},"content":"\u003e Command will list out **ALL** available food entries.","lastModifiedDate":"2021-10-24"},{"lineNumber":190,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":191,"author":{"gitId":"praj-bellakka"},"content":"Example of usage:","lastModifiedDate":"2021-10-22"},{"lineNumber":192,"author":{"gitId":"kengjit"},"content":"`list /entry /week`","lastModifiedDate":"2021-10-24"},{"lineNumber":193,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":194,"author":{"gitId":"kengjit"},"content":"![img.png](diagrams-UG/ListWeekEntrySampleOutput.PNG)","lastModifiedDate":"2021-11-02"},{"lineNumber":195,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":196,"author":{"gitId":"kengjit"},"content":"\u003cp\u003e\u0026nbsp;\u003c/p\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":197,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":198,"author":{"gitId":"aaapppsss"},"content":"#### Searching for tracker entries with keyword: `find`","lastModifiedDate":"2021-10-23"},{"lineNumber":199,"author":{"gitId":"aaapppsss"},"content":"Finds all matching entries in the EntryDatabase based on the keyword you provided.","lastModifiedDate":"2021-10-23"},{"lineNumber":200,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":201,"author":{"gitId":"aaapppsss"},"content":"Format: `find /entry KEYWORD`","lastModifiedDate":"2021-10-23"},{"lineNumber":202,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":203,"author":{"gitId":"praj-bellakka"},"content":"Example of usage:","lastModifiedDate":"2021-10-22"},{"lineNumber":204,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":205,"author":{"gitId":"kengjit"},"content":"`find /entry chicken`","lastModifiedDate":"2021-11-06"},{"lineNumber":206,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":207,"author":{"gitId":"kengjit"},"content":"![Find Entry Sample Output](diagrams-UG/FindEntrySampleOutput.PNG)","lastModifiedDate":"2021-11-06"},{"lineNumber":208,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":209,"author":{"gitId":"kengjit"},"content":"\u003cp\u003e\u0026nbsp;\u003c/p\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":210,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":211,"author":{"gitId":"praj-bellakka"},"content":"----","lastModifiedDate":"2021-11-02"},{"lineNumber":212,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":213,"author":{"gitId":"aaapppsss"},"content":"#### View remaining calories for the day: `calorie /remain`","lastModifiedDate":"2021-11-06"},{"lineNumber":214,"author":{"gitId":"aaapppsss"},"content":"Shows the remaining number of calories the user can consume for the day to stay","lastModifiedDate":"2021-11-06"},{"lineNumber":215,"author":{"gitId":"aaapppsss"},"content":"within their daily calorie goal.","lastModifiedDate":"2021-11-06"},{"lineNumber":216,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":217,"author":{"gitId":"aaapppsss"},"content":"Format: `calorie /remain`","lastModifiedDate":"2021-11-06"},{"lineNumber":218,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":219,"author":{"gitId":"aaapppsss"},"content":"Sample output:","lastModifiedDate":"2021-11-06"},{"lineNumber":220,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":221,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":222,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":223,"author":{"gitId":"aaapppsss"},"content":"### Food Database","lastModifiedDate":"2021-10-23"},{"lineNumber":224,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":225,"author":{"gitId":"aaapppsss"},"content":"#### Deleting food from food database: `remove`","lastModifiedDate":"2021-10-23"},{"lineNumber":226,"author":{"gitId":"aaapppsss"},"content":"Deletes food from the food database.","lastModifiedDate":"2021-10-23"},{"lineNumber":227,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":228,"author":{"gitId":"aaapppsss"},"content":"Format: `remove /food INDEX_OF_FOOD`","lastModifiedDate":"2021-10-23"},{"lineNumber":229,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":230,"author":{"gitId":"brendanlsz"},"content":"Example of usage: `remove /food 12`","lastModifiedDate":"2021-11-07"},{"lineNumber":231,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":232,"author":{"gitId":"brendanlsz"},"content":"Sample output:","lastModifiedDate":"2021-11-07"},{"lineNumber":233,"author":{"gitId":"brendanlsz"},"content":"![](diagrams-UG/remove_food.png)","lastModifiedDate":"2021-11-07"},{"lineNumber":234,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":235,"author":{"gitId":"kengjit"},"content":"\u003cp\u003e\u0026nbsp;\u003c/p\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":236,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":237,"author":{"gitId":"aaapppsss"},"content":"#### Searching for foods with keyword: `find`","lastModifiedDate":"2021-10-23"},{"lineNumber":238,"author":{"gitId":"aaapppsss"},"content":"Finds all matching food in the FoodDatabase based on the keyword you provided.","lastModifiedDate":"2021-10-23"},{"lineNumber":239,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":240,"author":{"gitId":"aaapppsss"},"content":"Format: `find /food KEYWORD`","lastModifiedDate":"2021-10-23"},{"lineNumber":241,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":242,"author":{"gitId":"brendanlsz"},"content":"Example of usage: `find /food ramen`","lastModifiedDate":"2021-11-07"},{"lineNumber":243,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":244,"author":{"gitId":"brendanlsz"},"content":"Sample output:","lastModifiedDate":"2021-11-07"},{"lineNumber":245,"author":{"gitId":"brendanlsz"},"content":"![](diagrams-UG/find_food.png)","lastModifiedDate":"2021-11-07"},{"lineNumber":246,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":247,"author":{"gitId":"kengjit"},"content":"\u003cp\u003e\u0026nbsp;\u003c/p\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":248,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":249,"author":{"gitId":"aaapppsss"},"content":"#### Listing foods in food database: `list`","lastModifiedDate":"2021-10-23"},{"lineNumber":250,"author":{"gitId":"praj-bellakka"},"content":"Lists out all foods in the database and their respective calories.","lastModifiedDate":"2021-10-22"},{"lineNumber":251,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":252,"author":{"gitId":"praj-bellakka"},"content":"Format: `list /food`","lastModifiedDate":"2021-10-22"},{"lineNumber":253,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":254,"author":{"gitId":"brendanlsz"},"content":"Example of usage: `list /food`","lastModifiedDate":"2021-11-07"},{"lineNumber":255,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":256,"author":{"gitId":"brendanlsz"},"content":"Sample output:","lastModifiedDate":"2021-11-07"},{"lineNumber":257,"author":{"gitId":"brendanlsz"},"content":"![](diagrams-UG/list_food.png)","lastModifiedDate":"2021-11-07"},{"lineNumber":258,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":259,"author":{"gitId":"kengjit"},"content":"\u003cp\u003e\u0026nbsp;\u003c/p\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":260,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":261,"author":{"gitId":"praj-bellakka"},"content":"---- ","lastModifiedDate":"2021-11-02"},{"lineNumber":262,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":263,"author":{"gitId":"praj-bellakka"},"content":"### Meal Plan Database","lastModifiedDate":"2021-11-02"},{"lineNumber":264,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":265,"author":{"gitId":"praj-bellakka"},"content":"#### Creating meal plan by adding food: `create`","lastModifiedDate":"2021-11-02"},{"lineNumber":266,"author":{"gitId":"praj-bellakka"},"content":"Creates a custom meal plan by adding existing food items inside the food database to the meal plan. A meal plan consists of a name, and a list of Food items. ","lastModifiedDate":"2021-11-07"},{"lineNumber":267,"author":{"gitId":"praj-bellakka"},"content":"In order to create a meal plan, you must add at least 1 food item to the plan. ","lastModifiedDate":"2021-11-07"},{"lineNumber":268,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":269,"author":{"gitId":"praj-bellakka"},"content":"Format: `create /mealplan NAME_OF_MEALPLAN`","lastModifiedDate":"2021-11-02"},{"lineNumber":270,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":271,"author":{"gitId":"praj-bellakka"},"content":"Once a valid `NAME_OF_MEALPLAN` has been added, you will be shown a list of food inside the database and will be prompted to input the indexes of the foods you want to include inside the meal plan. A visual walkthrough has been shown below.","lastModifiedDate":"2021-11-07"},{"lineNumber":272,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":273,"author":{"gitId":"praj-bellakka"},"content":"\u003e **⚠️ Notes about `NAME_OF_MEALPLAN`**","lastModifiedDate":"2021-11-02"},{"lineNumber":274,"author":{"gitId":"praj-bellakka"},"content":"\u003e","lastModifiedDate":"2021-11-02"},{"lineNumber":275,"author":{"gitId":"praj-bellakka"},"content":"\u003e `NAME_OF_MEALPLAN` must be at least 1 character in length. Pipe Characters will be automatically be removed if included.","lastModifiedDate":"2021-11-07"},{"lineNumber":276,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":277,"author":{"gitId":"praj-bellakka"},"content":"\u003e **⚠️ Notes about adding food items to meal plan**","lastModifiedDate":"2021-11-02"},{"lineNumber":278,"author":{"gitId":"praj-bellakka"},"content":"\u003e","lastModifiedDate":"2021-11-02"},{"lineNumber":279,"author":{"gitId":"praj-bellakka"},"content":"\u003e Only valid indexes entered will be parsed. The `index` MUST be an integer value and within the range of food items displayed. Invalid indexes will be ignored as shown below.","lastModifiedDate":"2021-11-02"},{"lineNumber":280,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":281,"author":{"gitId":"praj-bellakka"},"content":"**Examples of usage:**","lastModifiedDate":"2021-11-07"},{"lineNumber":282,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":283,"author":{"gitId":"praj-bellakka"},"content":"**Example 1 - All input indexes are valid**","lastModifiedDate":"2021-11-07"},{"lineNumber":284,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":285,"author":{"gitId":"praj-bellakka"},"content":"Input 1: `create /mealplan dinner plan`","lastModifiedDate":"2021-11-07"},{"lineNumber":286,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":287,"author":{"gitId":"praj-bellakka"},"content":"Input 2: `1 4 5` ","lastModifiedDate":"2021-11-07"},{"lineNumber":288,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":289,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":290,"author":{"gitId":"praj-bellakka"},"content":"Sample output:","lastModifiedDate":"2021-11-02"},{"lineNumber":291,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":292,"author":{"gitId":"praj-bellakka"},"content":"![img.png](diagrams-UG/createMealPlan.png)","lastModifiedDate":"2021-11-07"},{"lineNumber":293,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":294,"author":{"gitId":"praj-bellakka"},"content":"![img_2.png](diagrams-UG/createMealPlanP3.png)","lastModifiedDate":"2021-11-07"},{"lineNumber":295,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":296,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":297,"author":{"gitId":"praj-bellakka"},"content":"**Example 2 - Some input indexes are invalid**","lastModifiedDate":"2021-11-07"},{"lineNumber":298,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":299,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":300,"author":{"gitId":"praj-bellakka"},"content":"Input 1: `create /mealplan supper plan`","lastModifiedDate":"2021-11-07"},{"lineNumber":301,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":302,"author":{"gitId":"praj-bellakka"},"content":"Input 2: `1 89 abc` ","lastModifiedDate":"2021-11-07"},{"lineNumber":303,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":304,"author":{"gitId":"praj-bellakka"},"content":"- Input index `89` is not valid as it is outside the range of the food database.","lastModifiedDate":"2021-11-07"},{"lineNumber":305,"author":{"gitId":"praj-bellakka"},"content":"- Input `abc` is not valid as it is not an integer.","lastModifiedDate":"2021-11-02"},{"lineNumber":306,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":307,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":308,"author":{"gitId":"praj-bellakka"},"content":"Sample output:","lastModifiedDate":"2021-11-02"},{"lineNumber":309,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":310,"author":{"gitId":"praj-bellakka"},"content":"![img_4.png](diagrams-UG/createMealPlanP4.png)","lastModifiedDate":"2021-11-07"},{"lineNumber":311,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":312,"author":{"gitId":"praj-bellakka"},"content":"![img_5.png](diagrams-UG/createMealPlanInvalidIndexes.png)","lastModifiedDate":"2021-11-07"},{"lineNumber":313,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":314,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":315,"author":{"gitId":"praj-bellakka"},"content":"**Example 3 - All input indexes are invalid**","lastModifiedDate":"2021-11-07"},{"lineNumber":316,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":317,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":318,"author":{"gitId":"praj-bellakka"},"content":"Input 1: `create /mealplan supper plan`","lastModifiedDate":"2021-11-07"},{"lineNumber":319,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":320,"author":{"gitId":"praj-bellakka"},"content":"Input 2: `blah -100`","lastModifiedDate":"2021-11-07"},{"lineNumber":321,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":322,"author":{"gitId":"praj-bellakka"},"content":"- Input `blah` is not valid as it is not an integer.","lastModifiedDate":"2021-11-07"},{"lineNumber":323,"author":{"gitId":"praj-bellakka"},"content":"- Input index `-100` is not valid as it is outside the range of the food database.","lastModifiedDate":"2021-11-07"},{"lineNumber":324,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":325,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":326,"author":{"gitId":"praj-bellakka"},"content":"Sample output:","lastModifiedDate":"2021-11-07"},{"lineNumber":327,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":328,"author":{"gitId":"praj-bellakka"},"content":"![img_4.png](diagrams-UG/createMealPlanP4.png)","lastModifiedDate":"2021-11-07"},{"lineNumber":329,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":330,"author":{"gitId":"praj-bellakka"},"content":"![img_6.png](diagrams-UG/createMealPlanInvalid.png)","lastModifiedDate":"2021-11-07"},{"lineNumber":331,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":332,"author":{"gitId":"praj-bellakka"},"content":"\u003e **⚠️ Notes about duplicate meal plans**","lastModifiedDate":"2021-11-07"},{"lineNumber":333,"author":{"gitId":"praj-bellakka"},"content":"\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":334,"author":{"gitId":"praj-bellakka"},"content":"\u003e Duplicate meal plans are allowed as restricting either the name or the food added to a meal plan would not improve the usability of the app.","lastModifiedDate":"2021-11-07"},{"lineNumber":335,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":336,"author":{"gitId":"praj-bellakka"},"content":"---- ","lastModifiedDate":"2021-11-07"},{"lineNumber":337,"author":{"gitId":"praj-bellakka"},"content":"#### Listing meal plan entries: `list`","lastModifiedDate":"2021-11-02"},{"lineNumber":338,"author":{"gitId":"praj-bellakka"},"content":"Lists out all meal plans entered. Each individual meal plan along with its associated food items are listed as shown below.","lastModifiedDate":"2021-11-07"},{"lineNumber":339,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":340,"author":{"gitId":"praj-bellakka"},"content":"Format: `list /mealplan`","lastModifiedDate":"2021-11-02"},{"lineNumber":341,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":342,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":343,"author":{"gitId":"praj-bellakka"},"content":"**Example of usage:**","lastModifiedDate":"2021-11-07"},{"lineNumber":344,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":345,"author":{"gitId":"praj-bellakka"},"content":"`list /mealplan`","lastModifiedDate":"2021-11-02"},{"lineNumber":346,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":347,"author":{"gitId":"praj-bellakka"},"content":"Sample output: ","lastModifiedDate":"2021-11-02"},{"lineNumber":348,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":349,"author":{"gitId":"praj-bellakka"},"content":"![img_7.png](diagrams-UG/listMealPlan.png)","lastModifiedDate":"2021-11-07"},{"lineNumber":350,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":351,"author":{"gitId":"praj-bellakka"},"content":"\u003cp\u003e\u0026nbsp;\u003c/p\u003e","lastModifiedDate":"2021-11-02"},{"lineNumber":352,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":353,"author":{"gitId":"praj-bellakka"},"content":"---- ","lastModifiedDate":"2021-11-02"},{"lineNumber":354,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":355,"author":{"gitId":"aaapppsss"},"content":"### Weight Tracker","lastModifiedDate":"2021-10-23"},{"lineNumber":356,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":357,"author":{"gitId":"aaapppsss"},"content":"#### Recording weight: `weight /set`","lastModifiedDate":"2021-10-23"},{"lineNumber":358,"author":{"gitId":"aaapppsss"},"content":"Updates the user\u0027s current weight as well as ","lastModifiedDate":"2021-11-06"},{"lineNumber":359,"author":{"gitId":"aaapppsss"},"content":"their weight record for the day in the weight tracker.","lastModifiedDate":"2021-11-06"},{"lineNumber":360,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":361,"author":{"gitId":"aaapppsss"},"content":"Format: `weight /set WEIGHT`","lastModifiedDate":"2021-10-23"},{"lineNumber":362,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":363,"author":{"gitId":"aaapppsss"},"content":"- `WEIGHT` is a positive number with 1 decimal place and cannot be above 500.0","lastModifiedDate":"2021-11-06"},{"lineNumber":364,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":365,"author":{"gitId":"aaapppsss"},"content":"\u003e **⚠️ Notes about recording weight**","lastModifiedDate":"2021-11-06"},{"lineNumber":366,"author":{"gitId":"aaapppsss"},"content":"\u003e- If the user has already recorded their weight for the day, recording the weight again","lastModifiedDate":"2021-11-06"},{"lineNumber":367,"author":{"gitId":"aaapppsss"},"content":"  will override the previous weight record for the day instead of creating a new record.","lastModifiedDate":"2021-11-06"},{"lineNumber":368,"author":{"gitId":"aaapppsss"},"content":"\u003e- If `WEIGHT` is entered as a number with more than 1 decimal place, the trailing decimals","lastModifiedDate":"2021-11-06"},{"lineNumber":369,"author":{"gitId":"aaapppsss"},"content":"\u003e will be cut off (no rounding will take place).","lastModifiedDate":"2021-11-06"},{"lineNumber":370,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":371,"author":{"gitId":"praj-bellakka"},"content":"Example of usage:","lastModifiedDate":"2021-10-22"},{"lineNumber":372,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":373,"author":{"gitId":"aaapppsss"},"content":"`weight /set 55.6`","lastModifiedDate":"2021-10-23"},{"lineNumber":374,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":375,"author":{"gitId":"siyuancheng178"},"content":"Sample Output:","lastModifiedDate":"2021-11-01"},{"lineNumber":376,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":377,"author":{"gitId":"siyuancheng178"},"content":"```","lastModifiedDate":"2021-11-01"},{"lineNumber":378,"author":{"gitId":"aaapppsss"},"content":"You have updated your weight for today to 55.6 kg!","lastModifiedDate":"2021-11-06"},{"lineNumber":379,"author":{"gitId":"aaapppsss"},"content":"You have lost 9.6 kg from the previous weight entry of 65.2 kg on 2021-11-07","lastModifiedDate":"2021-11-06"},{"lineNumber":380,"author":{"gitId":"siyuancheng178"},"content":"```","lastModifiedDate":"2021-11-01"},{"lineNumber":381,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":382,"author":{"gitId":"kengjit"},"content":"\u003cp\u003e\u0026nbsp;\u003c/p\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":383,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":384,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":385,"author":{"gitId":"aaapppsss"},"content":"#### Listing weight records: `list`","lastModifiedDate":"2021-10-23"},{"lineNumber":386,"author":{"gitId":"aaapppsss"},"content":"Lists weight records within a certain timeframe (either all time or a particular month in ","lastModifiedDate":"2021-11-06"},{"lineNumber":387,"author":{"gitId":"aaapppsss"},"content":"the current year). ","lastModifiedDate":"2021-11-06"},{"lineNumber":388,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":389,"author":{"gitId":"aaapppsss"},"content":"Format:","lastModifiedDate":"2021-11-06"},{"lineNumber":390,"author":{"gitId":"aaapppsss"},"content":"`list /weight /all` OR `list /weight /month MONTH_INTEGER`","lastModifiedDate":"2021-11-06"},{"lineNumber":391,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":392,"author":{"gitId":"aaapppsss"},"content":"- `MONTH_INTEGER` refers to the integer representation of a particular month.","lastModifiedDate":"2021-11-06"},{"lineNumber":393,"author":{"gitId":"aaapppsss"},"content":"  (e.g. 1 represents January, 2 represents February etc.)","lastModifiedDate":"2021-11-06"},{"lineNumber":394,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":395,"author":{"gitId":"aaapppsss"},"content":"Examples of usage:","lastModifiedDate":"2021-11-06"},{"lineNumber":396,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":397,"author":{"gitId":"aaapppsss"},"content":"1. List weight progress since the start of using FitNus: `list /weight /all`","lastModifiedDate":"2021-11-06"},{"lineNumber":398,"author":{"gitId":"aaapppsss"},"content":"   - Sample output:","lastModifiedDate":"2021-11-06"},{"lineNumber":399,"author":{"gitId":"siyuancheng178"},"content":"     ","lastModifiedDate":"2021-11-01"},{"lineNumber":400,"author":{"gitId":"siyuancheng178"},"content":"   ``` ","lastModifiedDate":"2021-11-01"},{"lineNumber":401,"author":{"gitId":"siyuancheng178"},"content":"   Your weight progress since the start of your FitNUS journey: ","lastModifiedDate":"2021-11-01"},{"lineNumber":402,"author":{"gitId":"siyuancheng178"},"content":"   2021-03-12: 51.5kg","lastModifiedDate":"2021-11-01"},{"lineNumber":403,"author":{"gitId":"siyuancheng178"},"content":"   2021-03-13: 51.7kg","lastModifiedDate":"2021-11-01"},{"lineNumber":404,"author":{"gitId":"siyuancheng178"},"content":"   2021-03-14: 51.8kg","lastModifiedDate":"2021-11-01"},{"lineNumber":405,"author":{"gitId":"siyuancheng178"},"content":"   2021-03-15: 51.9kg","lastModifiedDate":"2021-11-01"},{"lineNumber":406,"author":{"gitId":"siyuancheng178"},"content":"   2021-04-12: 54.2kg","lastModifiedDate":"2021-11-01"},{"lineNumber":407,"author":{"gitId":"siyuancheng178"},"content":"   2021-10-27: 63.3kg","lastModifiedDate":"2021-11-01"},{"lineNumber":408,"author":{"gitId":"siyuancheng178"},"content":"   2021-10-31: 54.0kg","lastModifiedDate":"2021-11-01"},{"lineNumber":409,"author":{"gitId":"siyuancheng178"},"content":"   2021-11-01: 55.6kg      ","lastModifiedDate":"2021-11-01"},{"lineNumber":410,"author":{"gitId":"siyuancheng178"},"content":"   You have gained 4.1 kg since the start of your FitNUS Journey!","lastModifiedDate":"2021-11-01"},{"lineNumber":411,"author":{"gitId":"siyuancheng178"},"content":"   ```","lastModifiedDate":"2021-11-01"},{"lineNumber":412,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":413,"author":{"gitId":"aaapppsss"},"content":"2. List weight progress in a certain month in the current year:`list /weight /month 3`","lastModifiedDate":"2021-11-06"},{"lineNumber":414,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":415,"author":{"gitId":"aaapppsss"},"content":"   - Sample output:","lastModifiedDate":"2021-11-06"},{"lineNumber":416,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":417,"author":{"gitId":"siyuancheng178"},"content":"    ```","lastModifiedDate":"2021-11-01"},{"lineNumber":418,"author":{"gitId":"siyuancheng178"},"content":"    Your weight progress in March: ","lastModifiedDate":"2021-11-01"},{"lineNumber":419,"author":{"gitId":"siyuancheng178"},"content":"    2021-03-12: 51.5kg","lastModifiedDate":"2021-11-01"},{"lineNumber":420,"author":{"gitId":"siyuancheng178"},"content":"    2021-03-13: 51.7kg","lastModifiedDate":"2021-11-01"},{"lineNumber":421,"author":{"gitId":"siyuancheng178"},"content":"    2021-03-14: 51.8kg","lastModifiedDate":"2021-11-01"},{"lineNumber":422,"author":{"gitId":"siyuancheng178"},"content":"    2021-03-15: 51.9kg    ","lastModifiedDate":"2021-11-01"},{"lineNumber":423,"author":{"gitId":"siyuancheng178"},"content":"    You have gained 0.4 kg during the month of March!","lastModifiedDate":"2021-11-01"},{"lineNumber":424,"author":{"gitId":"siyuancheng178"},"content":"    ```","lastModifiedDate":"2021-11-01"},{"lineNumber":425,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":426,"author":{"gitId":"kengjit"},"content":"\u003cp\u003e\u0026nbsp;\u003c/p\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":427,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":428,"author":{"gitId":"aaapppsss"},"content":"### Personalisation","lastModifiedDate":"2021-10-23"},{"lineNumber":429,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":430,"author":{"gitId":"aaapppsss"},"content":"####  Setting gender: `gender /set`","lastModifiedDate":"2021-10-23"},{"lineNumber":431,"author":{"gitId":"aaapppsss"},"content":"Sets the user\u0027s gender to either Male or Female.","lastModifiedDate":"2021-10-23"},{"lineNumber":432,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":433,"author":{"gitId":"aaapppsss"},"content":"Format: `gender /set GENDER_SYMBOL`","lastModifiedDate":"2021-10-23"},{"lineNumber":434,"author":{"gitId":"aaapppsss"},"content":"- The `GENDER_SYMBOL` can be of the following types:","lastModifiedDate":"2021-11-06"},{"lineNumber":435,"author":{"gitId":"aaapppsss"},"content":"  - `M` or `m` - denotes Male ","lastModifiedDate":"2021-11-06"},{"lineNumber":436,"author":{"gitId":"aaapppsss"},"content":"  - `F` or `f` - denotes Female","lastModifiedDate":"2021-11-06"},{"lineNumber":437,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":438,"author":{"gitId":"siyuancheng178"},"content":"Example of usage: `gender /set m`","lastModifiedDate":"2021-10-31"},{"lineNumber":439,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":440,"author":{"gitId":"siyuancheng178"},"content":"Sample output:","lastModifiedDate":"2021-10-31"},{"lineNumber":441,"author":{"gitId":"siyuancheng178"},"content":"```","lastModifiedDate":"2021-10-31"},{"lineNumber":442,"author":{"gitId":"siyuancheng178"},"content":"You have set your gender to Male","lastModifiedDate":"2021-10-31"},{"lineNumber":443,"author":{"gitId":"siyuancheng178"},"content":"```","lastModifiedDate":"2021-10-31"},{"lineNumber":444,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":445,"author":{"gitId":"kengjit"},"content":"\u003cp\u003e\u0026nbsp;\u003c/p\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":446,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":447,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":448,"author":{"gitId":"aaapppsss"},"content":"####  Setting height: `height /set`","lastModifiedDate":"2021-10-23"},{"lineNumber":449,"author":{"gitId":"aaapppsss"},"content":"Sets the user\u0027s height in centimeters.","lastModifiedDate":"2021-10-23"},{"lineNumber":450,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":451,"author":{"gitId":"aaapppsss"},"content":"Format: `height /set HEIGHT`","lastModifiedDate":"2021-10-23"},{"lineNumber":452,"author":{"gitId":"aaapppsss"},"content":"- `HEIGHT` is an integer between 40 and 300","lastModifiedDate":"2021-11-06"},{"lineNumber":453,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":454,"author":{"gitId":"siyuancheng178"},"content":"Example of usage:`height /set 180`","lastModifiedDate":"2021-10-31"},{"lineNumber":455,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":456,"author":{"gitId":"siyuancheng178"},"content":"Sample output:","lastModifiedDate":"2021-10-31"},{"lineNumber":457,"author":{"gitId":"siyuancheng178"},"content":"```","lastModifiedDate":"2021-10-31"},{"lineNumber":458,"author":{"gitId":"siyuancheng178"},"content":"You have set your height to 180 cm!","lastModifiedDate":"2021-10-31"},{"lineNumber":459,"author":{"gitId":"siyuancheng178"},"content":"```","lastModifiedDate":"2021-10-31"},{"lineNumber":460,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":461,"author":{"gitId":"kengjit"},"content":"\u003cp\u003e\u0026nbsp;\u003c/p\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":462,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":463,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":464,"author":{"gitId":"aaapppsss"},"content":"####  Setting age: `age /set`","lastModifiedDate":"2021-10-23"},{"lineNumber":465,"author":{"gitId":"aaapppsss"},"content":"Sets the user\u0027s age in years.","lastModifiedDate":"2021-10-23"},{"lineNumber":466,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":467,"author":{"gitId":"aaapppsss"},"content":"Format: `age /set AGE`","lastModifiedDate":"2021-10-23"},{"lineNumber":468,"author":{"gitId":"aaapppsss"},"content":"- `AGE` is an integer between 12 and 100","lastModifiedDate":"2021-11-06"},{"lineNumber":469,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":470,"author":{"gitId":"siyuancheng178"},"content":"Example of usage:`age /set 18`","lastModifiedDate":"2021-10-31"},{"lineNumber":471,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":472,"author":{"gitId":"siyuancheng178"},"content":"Sample output:","lastModifiedDate":"2021-10-31"},{"lineNumber":473,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":474,"author":{"gitId":"siyuancheng178"},"content":"![img](diagrams-UG/set-age.png)","lastModifiedDate":"2021-11-06"},{"lineNumber":475,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":476,"author":{"gitId":"kengjit"},"content":"\u003cp\u003e\u0026nbsp;\u003c/p\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":477,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":478,"author":{"gitId":"aaapppsss"},"content":"####  Setting calorie goal: `calorie /set`","lastModifiedDate":"2021-10-23"},{"lineNumber":479,"author":{"gitId":"aaapppsss"},"content":"Sets the user\u0027s calorie goal in kcal.","lastModifiedDate":"2021-10-23"},{"lineNumber":480,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":481,"author":{"gitId":"aaapppsss"},"content":"Format: `calorie /set CALORIE_GOAL`","lastModifiedDate":"2021-10-23"},{"lineNumber":482,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":483,"author":{"gitId":"aaapppsss"},"content":"\u003e **⚠️ Notes about setting calorie goal**","lastModifiedDate":"2021-11-06"},{"lineNumber":484,"author":{"gitId":"aaapppsss"},"content":"\u003e - FitNUS calculates the minimum and maximum calorie goal according to the user\u0027s height,","lastModifiedDate":"2021-11-06"},{"lineNumber":485,"author":{"gitId":"aaapppsss"},"content":"  weight, gender and age that is within the recommended healthy amount of weight loss or gain","lastModifiedDate":"2021-11-06"},{"lineNumber":486,"author":{"gitId":"aaapppsss"},"content":"  per week. The user cannot set a goal that is not within the healthy range of daily calorie","lastModifiedDate":"2021-11-06"},{"lineNumber":487,"author":{"gitId":"aaapppsss"},"content":"  intake for their body type.","lastModifiedDate":"2021-11-06"},{"lineNumber":488,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":489,"author":{"gitId":"siyuancheng178"},"content":"Example of usage:`calorie /set 2000`","lastModifiedDate":"2021-10-31"},{"lineNumber":490,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":491,"author":{"gitId":"siyuancheng178"},"content":"Sample output:","lastModifiedDate":"2021-10-31"},{"lineNumber":492,"author":{"gitId":"siyuancheng178"},"content":"![img](diagrams-UG/Setting-calorie-goal.png)","lastModifiedDate":"2021-11-06"},{"lineNumber":493,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":494,"author":{"gitId":"kengjit"},"content":"\u003cp\u003e\u0026nbsp;\u003c/p\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":495,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":496,"author":{"gitId":"aaapppsss"},"content":"####  Generate and set calorie goal: `calorie /generate`","lastModifiedDate":"2021-10-23"},{"lineNumber":497,"author":{"gitId":"aaapppsss"},"content":"Generates and sets a calorie goal based on the user\u0027s ","lastModifiedDate":"2021-11-06"},{"lineNumber":498,"author":{"gitId":"aaapppsss"},"content":"target weight loss/gain per week, age, height, ","lastModifiedDate":"2021-11-06"},{"lineNumber":499,"author":{"gitId":"aaapppsss"},"content":"weight and gender using the Harris-Benedict equation.","lastModifiedDate":"2021-11-06"},{"lineNumber":500,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":501,"author":{"gitId":"aaapppsss"},"content":"Format: `calorie /generate /CHANGE_TYPE WEEKLY_CHANGE_IN_KG`","lastModifiedDate":"2021-11-06"},{"lineNumber":502,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":503,"author":{"gitId":"aaapppsss"},"content":"* `CHANGE_TYPE` can be of the following 2 types: ","lastModifiedDate":"2021-11-06"},{"lineNumber":504,"author":{"gitId":"aaapppsss"},"content":"  * `lose` - denotes aiming to lose weight","lastModifiedDate":"2021-11-06"},{"lineNumber":505,"author":{"gitId":"aaapppsss"},"content":"  * `gain` - denotes aiming to gain weight","lastModifiedDate":"2021-11-06"},{"lineNumber":506,"author":{"gitId":"aaapppsss"},"content":"* `WEEKLY_CHANGE_IN_KG` is a number between 0.01 and 1.0","lastModifiedDate":"2021-11-06"},{"lineNumber":507,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":508,"author":{"gitId":"aaapppsss"},"content":"\u003e **⚠️ Notes about calorie goal generation**","lastModifiedDate":"2021-11-06"},{"lineNumber":509,"author":{"gitId":"aaapppsss"},"content":"\u003e","lastModifiedDate":"2021-11-06"},{"lineNumber":510,"author":{"gitId":"aaapppsss"},"content":"\u003e * The weekly change must be less than 1.0 kg ","lastModifiedDate":"2021-11-06"},{"lineNumber":511,"author":{"gitId":"aaapppsss"},"content":"\u003e according to the recommended amount of weight that can be ","lastModifiedDate":"2021-11-06"},{"lineNumber":512,"author":{"gitId":"aaapppsss"},"content":"\u003e lost or gained per week in a safe and healthy manner. ","lastModifiedDate":"2021-11-06"},{"lineNumber":513,"author":{"gitId":"aaapppsss"},"content":"\u003e * If the weekly change entered is less than 0.01 kg, ","lastModifiedDate":"2021-11-06"},{"lineNumber":514,"author":{"gitId":"aaapppsss"},"content":"\u003e it will be treated as a negligible weekly change and instead generate ","lastModifiedDate":"2021-11-06"},{"lineNumber":515,"author":{"gitId":"aaapppsss"},"content":"\u003e a goal that allows the user to maintain their current weight.","lastModifiedDate":"2021-11-06"},{"lineNumber":516,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":517,"author":{"gitId":"siyuancheng178"},"content":"Example of usage:`calorie /generate /gain 0.5`","lastModifiedDate":"2021-10-31"},{"lineNumber":518,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":519,"author":{"gitId":"siyuancheng178"},"content":"Sample output:","lastModifiedDate":"2021-10-31"},{"lineNumber":520,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":521,"author":{"gitId":"siyuancheng178"},"content":"![img](diagrams-UG/Generate-and-set-calorie-goal.png)","lastModifiedDate":"2021-11-06"},{"lineNumber":522,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":523,"author":{"gitId":"kengjit"},"content":"\u003cp\u003e\u0026nbsp;\u003c/p\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":524,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":525,"author":{"gitId":"aaapppsss"},"content":"#### View user data: `list /user`","lastModifiedDate":"2021-11-06"},{"lineNumber":526,"author":{"gitId":"aaapppsss"},"content":"View user data including gender, age, weight, height and calorie goal.","lastModifiedDate":"2021-11-06"},{"lineNumber":527,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":528,"author":{"gitId":"siyuancheng178"},"content":"Format: `list /user`","lastModifiedDate":"2021-10-31"},{"lineNumber":529,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":530,"author":{"gitId":"siyuancheng178"},"content":"Sample output:","lastModifiedDate":"2021-10-31"},{"lineNumber":531,"author":{"gitId":"siyuancheng178"},"content":"![img](diagrams-UG/list-user.png)","lastModifiedDate":"2021-11-06"},{"lineNumber":532,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":533,"author":{"gitId":"aaapppsss"},"content":"### Other","lastModifiedDate":"2021-10-23"},{"lineNumber":534,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":535,"author":{"gitId":"aaapppsss"},"content":"#### Viewing Help: `help`","lastModifiedDate":"2021-10-23"},{"lineNumber":536,"author":{"gitId":"aaapppsss"},"content":"Lists out available commands and additional information regarding each command.","lastModifiedDate":"2021-10-23"},{"lineNumber":537,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":538,"author":{"gitId":"aaapppsss"},"content":"Format: `help`","lastModifiedDate":"2021-10-23"},{"lineNumber":539,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":540,"author":{"gitId":"kengjit"},"content":"Sample Output:","lastModifiedDate":"2021-11-02"},{"lineNumber":541,"author":{"gitId":"kengjit"},"content":"![img.png](diagrams-UG/HelpCommandSampleOutput.PNG)","lastModifiedDate":"2021-11-02"},{"lineNumber":542,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":543,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":544,"author":{"gitId":"kengjit"},"content":"\u003cp\u003e\u0026nbsp;\u003c/p\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":545,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":546,"author":{"gitId":"siyuancheng178"},"content":"#### View statistics: `summary`","lastModifiedDate":"2021-10-23"},{"lineNumber":547,"author":{"gitId":"kengjit"},"content":"FitNUS supports two kinds of diet reports:","lastModifiedDate":"2021-10-24"},{"lineNumber":548,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":549,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":550,"author":{"gitId":"siyuancheng178"},"content":"##### Weekly report","lastModifiedDate":"2021-10-23"},{"lineNumber":551,"author":{"gitId":"kengjit"},"content":"Weekly report gives you an overview of your diet over the past 7 days, which includes:","lastModifiedDate":"2021-10-24"},{"lineNumber":552,"author":{"gitId":"kengjit"},"content":"- Graph of daily calorie intake","lastModifiedDate":"2021-10-24"},{"lineNumber":553,"author":{"gitId":"kengjit"},"content":"- Average calorie intake","lastModifiedDate":"2021-10-24"},{"lineNumber":554,"author":{"gitId":"kengjit"},"content":"- Most frequently eaten foods","lastModifiedDate":"2021-10-24"},{"lineNumber":555,"author":{"gitId":"kengjit"},"content":"- Least frequently eaten foods","lastModifiedDate":"2021-10-24"},{"lineNumber":556,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":557,"author":{"gitId":"siyuancheng178"},"content":"Format: `summary /week`","lastModifiedDate":"2021-10-23"},{"lineNumber":558,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":559,"author":{"gitId":"siyuancheng178"},"content":"Sample Output:","lastModifiedDate":"2021-11-02"},{"lineNumber":560,"author":{"gitId":"siyuancheng178"},"content":"![img](diagrams-UG/week-summary.png)","lastModifiedDate":"2021-11-06"},{"lineNumber":561,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":562,"author":{"gitId":"siyuancheng178"},"content":"##### Monthly report","lastModifiedDate":"2021-10-23"},{"lineNumber":563,"author":{"gitId":"kengjit"},"content":"Monthly report gives you an overview of your diet over this month, which includes:","lastModifiedDate":"2021-10-24"},{"lineNumber":564,"author":{"gitId":"kengjit"},"content":"- Average calorie intake","lastModifiedDate":"2021-10-24"},{"lineNumber":565,"author":{"gitId":"kengjit"},"content":"- Most frequently eaten foods","lastModifiedDate":"2021-10-24"},{"lineNumber":566,"author":{"gitId":"kengjit"},"content":"- Least frequently eaten foods","lastModifiedDate":"2021-10-24"},{"lineNumber":567,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":568,"author":{"gitId":"siyuancheng178"},"content":"Format: `summary /month`","lastModifiedDate":"2021-10-23"},{"lineNumber":569,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":570,"author":{"gitId":"siyuancheng178"},"content":"Sample Output:","lastModifiedDate":"2021-11-02"},{"lineNumber":571,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":572,"author":{"gitId":"siyuancheng178"},"content":"![img](diagrams-UG/month-summary.png)","lastModifiedDate":"2021-11-06"},{"lineNumber":573,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":574,"author":{"gitId":"kengjit"},"content":"\u003cp\u003e\u0026nbsp;\u003c/p\u003e","lastModifiedDate":"2021-10-24"},{"lineNumber":575,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":576,"author":{"gitId":"kengjit"},"content":"#### Suggest food based on food type and calorie goal: `suggest`","lastModifiedDate":"2021-10-24"},{"lineNumber":577,"author":{"gitId":"brendanlsz"},"content":"Filters food items in the database based on food type (meal, snack, beverage, others) ","lastModifiedDate":"2021-10-23"},{"lineNumber":578,"author":{"gitId":"brendanlsz"},"content":"that if consumed, will not exceed the daily calorie goal set by the user.","lastModifiedDate":"2021-10-23"},{"lineNumber":579,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":580,"author":{"gitId":"brendanlsz"},"content":"Format: `suggest /FOODTYPE` `suggest /FOODTYPE /sort`","lastModifiedDate":"2021-11-07"},{"lineNumber":581,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":582,"author":{"gitId":"brendanlsz"},"content":"\u003e **_NOTE:_** FOODTYPE is one of: `meal` / `snack` / `beverage` / `others`","lastModifiedDate":"2021-11-07"},{"lineNumber":583,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":584,"author":{"gitId":"brendanlsz"},"content":"\u003e **_NOTE:_** Appending `/sort` will sort the suggestions by calorie value in","lastModifiedDate":"2021-11-07"},{"lineNumber":585,"author":{"gitId":"brendanlsz"},"content":"\u003e ascending order","lastModifiedDate":"2021-11-07"},{"lineNumber":586,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":587,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":588,"author":{"gitId":"brendanlsz"},"content":"Example of usage: `suggest /meal` `suggest /snack /sort`","lastModifiedDate":"2021-11-07"},{"lineNumber":589,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":590,"author":{"gitId":"brendanlsz"},"content":"Sample output:","lastModifiedDate":"2021-11-07"},{"lineNumber":591,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":592,"author":{"gitId":"brendanlsz"},"content":"![](diagrams-UG/suggest_meal.png)","lastModifiedDate":"2021-11-07"},{"lineNumber":593,"author":{"gitId":"brendanlsz"},"content":"![](diagrams-UG/suggest_snack_sort.png)","lastModifiedDate":"2021-11-07"},{"lineNumber":594,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":595,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":596,"author":{"gitId":"siyuancheng178"},"content":"#### quit FitNus","lastModifiedDate":"2021-11-06"},{"lineNumber":597,"author":{"gitId":"siyuancheng178"},"content":"Exit FitNus program","lastModifiedDate":"2021-11-06"},{"lineNumber":598,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":599,"author":{"gitId":"siyuancheng178"},"content":"Format: `exit`","lastModifiedDate":"2021-11-06"},{"lineNumber":600,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":601,"author":{"gitId":"siyuancheng178"},"content":"Sample Output:","lastModifiedDate":"2021-11-06"},{"lineNumber":602,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":603,"author":{"gitId":"siyuancheng178"},"content":"![img](diagrams-UG/exit.png)","lastModifiedDate":"2021-11-06"},{"lineNumber":604,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":605,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":606,"author":{"gitId":"-"},"content":"## FAQ","lastModifiedDate":"2021-10-22"},{"lineNumber":607,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":608,"author":{"gitId":"kengjit"},"content":"##User Stories","lastModifiedDate":"2021-11-06"},{"lineNumber":609,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":610,"author":{"gitId":"kengjit"},"content":"| As a... | I can...                                 | So that I can...                                                    |","lastModifiedDate":"2021-11-06"},{"lineNumber":611,"author":{"gitId":"kengjit"},"content":"|---------|------------------------------------------|---------------------------------------------------------------------|","lastModifiedDate":"2021-11-06"},{"lineNumber":612,"author":{"gitId":"kengjit"},"content":"| User    | input entries every time I eat something | incorporate it seamlessly into my daily life                        |","lastModifiedDate":"2021-11-06"},{"lineNumber":613,"author":{"gitId":"kengjit"},"content":"| User    | edit my entries                          | make changes to my food entries at a later time                     |","lastModifiedDate":"2021-11-06"},{"lineNumber":614,"author":{"gitId":"kengjit"},"content":"| User    | delete entries in case I mistype         | -                                                                   |","lastModifiedDate":"2021-11-06"},{"lineNumber":615,"author":{"gitId":"kengjit"},"content":"| User    | list all my entries                      | look back at what I ate in the past                                 |","lastModifiedDate":"2021-11-06"},{"lineNumber":616,"author":{"gitId":"kengjit"},"content":"| User    | search food by a keyword                 | easily look for the food that I ate                                 |","lastModifiedDate":"2021-11-06"},{"lineNumber":617,"author":{"gitId":"kengjit"},"content":"| User    | create meal plans                        | add multiple food entries at once                                   |","lastModifiedDate":"2021-11-06"},{"lineNumber":618,"author":{"gitId":"kengjit"},"content":"| User    | record my current weight                 | look back and keep track of my weight in the future                 |","lastModifiedDate":"2021-11-06"},{"lineNumber":619,"author":{"gitId":"kengjit"},"content":"| User    | list out previous weight records         | look at my progress of weight loss/gain                             |","lastModifiedDate":"2021-11-06"},{"lineNumber":620,"author":{"gitId":"kengjit"},"content":"| User    | set my gender/height/age                 | get a more accurate calorie goal when using FitNUS                  |","lastModifiedDate":"2021-11-06"},{"lineNumber":621,"author":{"gitId":"kengjit"},"content":"| User    | set my calorie goal                      | have fixed objective of calorie intake                              |","lastModifiedDate":"2021-11-06"},{"lineNumber":622,"author":{"gitId":"kengjit"},"content":"| User    | generate my calorie goal                 | find out the optimal calorie intake to lose/gain  my desired weight |","lastModifiedDate":"2021-11-06"},{"lineNumber":623,"author":{"gitId":"kengjit"},"content":"| User    | list my user details                     | see my current user details at a glance                             |","lastModifiedDate":"2021-11-06"},{"lineNumber":624,"author":{"gitId":"kengjit"},"content":"| User    | show a summary of my past food intake    | easily see how much I have eaten and what I have  eaten at a glance |","lastModifiedDate":"2021-11-06"},{"lineNumber":625,"author":{"gitId":"kengjit"},"content":"| User    | ask for help                             | see all the available commands at a glance                          |","lastModifiedDate":"2021-11-06"},{"lineNumber":626,"author":{"gitId":"kengjit"},"content":"| User    | ask for food suggestions                 | get recommendations of food to eat based on my calorie intake       |","lastModifiedDate":"2021-11-06"},{"lineNumber":627,"author":{"gitId":"kengjit"},"content":"| User    | exit FitNUS                              | -                                                                   |","lastModifiedDate":"2021-11-06"},{"lineNumber":628,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":629,"author":{"gitId":"brendanlsz"},"content":"## Command summary","lastModifiedDate":"2021-10-23"},{"lineNumber":630,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":631,"author":{"gitId":"brendanlsz"},"content":"Action | Command Format | Example","lastModifiedDate":"2021-10-23"},{"lineNumber":632,"author":{"gitId":"brendanlsz"},"content":"--- | --- | --- | ","lastModifiedDate":"2021-10-23"},{"lineNumber":633,"author":{"gitId":"praj-bellakka"},"content":"Add food| add /MEALTYPE FOOD_NAME | `add /bfast chocolate rolls`","lastModifiedDate":"2021-11-02"},{"lineNumber":634,"author":{"gitId":"praj-bellakka"},"content":"Add meal plan| add /mealplan /MEALTYPE MEALPLAN_INDEX | `add /mealplan /bfast 1`","lastModifiedDate":"2021-11-02"},{"lineNumber":635,"author":{"gitId":"praj-bellakka"},"content":"Create meal plan| create /mealplan MEALPLAN_NAME | `create /mealplan bulking`","lastModifiedDate":"2021-11-02"},{"lineNumber":636,"author":{"gitId":"kengjit"},"content":"Edit | edit INDEX_OF_FOOD FOOD_NAME | `edit 1 burger`","lastModifiedDate":"2021-10-24"},{"lineNumber":637,"author":{"gitId":"brendanlsz"},"content":"Remove entry | remove /entry INDEX_OF_FOOD | `remove /entry 2`","lastModifiedDate":"2021-10-23"},{"lineNumber":638,"author":{"gitId":"brendanlsz"},"content":"Remove food | remove /food INDEX_OF_FOOD | `remove /food 12`","lastModifiedDate":"2021-10-23"},{"lineNumber":639,"author":{"gitId":"brendanlsz"},"content":"Find food | find /food KEYWORD | `find /food rice`","lastModifiedDate":"2021-10-23"},{"lineNumber":640,"author":{"gitId":"brendanlsz"},"content":"Find entry | find /entry KEYWORD | `find /entry rice`","lastModifiedDate":"2021-10-23"},{"lineNumber":641,"author":{"gitId":"brendanlsz"},"content":"List food | list /food | `list /food`","lastModifiedDate":"2021-10-23"},{"lineNumber":642,"author":{"gitId":"praj-bellakka"},"content":"List meal plan | list /mealplan | `list /mealplan`","lastModifiedDate":"2021-11-02"},{"lineNumber":643,"author":{"gitId":"kengjit"},"content":"List all entries | list /entry | `list /entry`","lastModifiedDate":"2021-10-24"},{"lineNumber":644,"author":{"gitId":"kengjit"},"content":"List daily entry | list /entry | `list /entry /day`","lastModifiedDate":"2021-10-24"},{"lineNumber":645,"author":{"gitId":"kengjit"},"content":"List weekly entry | list /entry | `list /entry /week`","lastModifiedDate":"2021-10-24"},{"lineNumber":646,"author":{"gitId":"brendanlsz"},"content":"List weight record | list /weight | `list /weight`","lastModifiedDate":"2021-10-23"},{"lineNumber":647,"author":{"gitId":"siyuancheng178"},"content":"View weekly statistics | summary /week | `summary /week`","lastModifiedDate":"2021-10-23"},{"lineNumber":648,"author":{"gitId":"siyuancheng178"},"content":"View monthly statistics | summary /month | `summary /month`","lastModifiedDate":"2021-10-23"},{"lineNumber":649,"author":{"gitId":"brendanlsz"},"content":"Suggest food | suggest /FOODTYPE \u003cbr /\u003e suggest /FOODTYPE /sort | `suggest /meal` \u003cbr /\u003e `suggest /snack /sort`","lastModifiedDate":"2021-10-23"},{"lineNumber":650,"author":{"gitId":"siyuancheng178"},"content":"Exit the program | exit |","lastModifiedDate":"2021-11-06"},{"lineNumber":651,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":652,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"}],"authorContributionMap":{"kengjit":139,"brendanlsz":37,"siyuancheng178":117,"-":32,"aaapppsss":140,"praj-bellakka":187}},{"path":"docs/diagrams-DG/Command_AddFoodEntryCommand_Seq.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"kengjit"},"content":"@startuml","lastModifiedDate":"2021-10-20"},{"lineNumber":2,"author":{"gitId":"kengjit"},"content":"\u0027https://plantuml.com/sequence-diagram","lastModifiedDate":"2021-10-20"},{"lineNumber":3,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":4,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":5,"author":{"gitId":"kengjit"},"content":"-\u003e \":AddFoodEntryCommand\": execute()","lastModifiedDate":"2021-10-20"},{"lineNumber":6,"author":{"gitId":"kengjit"},"content":"activate \":AddFoodEntryCommand\"","lastModifiedDate":"2021-10-20"},{"lineNumber":7,"author":{"gitId":"kengjit"},"content":"alt Food does not exist in database","lastModifiedDate":"2021-10-20"},{"lineNumber":8,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":9,"author":{"gitId":"kengjit"},"content":"    create \":Food\"","lastModifiedDate":"2021-10-20"},{"lineNumber":10,"author":{"gitId":"kengjit"},"content":"    \":AddFoodEntryCommand\" -\u003e \":Food\" : new","lastModifiedDate":"2021-10-20"},{"lineNumber":11,"author":{"gitId":"kengjit"},"content":"    activate \":Food\"","lastModifiedDate":"2021-10-20"},{"lineNumber":12,"author":{"gitId":"kengjit"},"content":"    return customFood:Food","lastModifiedDate":"2021-10-20"},{"lineNumber":13,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":14,"author":{"gitId":"kengjit"},"content":"    \":AddFoodEntryCommand\" -\u003e \":EntryDatabase\" : addEntry","lastModifiedDate":"2021-10-20"},{"lineNumber":15,"author":{"gitId":"kengjit"},"content":"    activate \":EntryDatabase\"","lastModifiedDate":"2021-10-20"},{"lineNumber":16,"author":{"gitId":"kengjit"},"content":"    return","lastModifiedDate":"2021-10-20"},{"lineNumber":17,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":18,"author":{"gitId":"kengjit"},"content":"    \":AddFoodEntryCommand\" -\u003e \":FoodDatabase\" : addFood","lastModifiedDate":"2021-10-20"},{"lineNumber":19,"author":{"gitId":"kengjit"},"content":"    activate \":FoodDatabase\"","lastModifiedDate":"2021-10-20"},{"lineNumber":20,"author":{"gitId":"kengjit"},"content":"    return","lastModifiedDate":"2021-10-20"},{"lineNumber":21,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":22,"author":{"gitId":"kengjit"},"content":"else Food exists in database","lastModifiedDate":"2021-10-20"},{"lineNumber":23,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":24,"author":{"gitId":"kengjit"},"content":"    \":AddFoodEntryCommand\" -\u003e \":EntryDatabase\" : addEntry","lastModifiedDate":"2021-10-20"},{"lineNumber":25,"author":{"gitId":"kengjit"},"content":"    activate \":EntryDatabase\"","lastModifiedDate":"2021-10-20"},{"lineNumber":26,"author":{"gitId":"kengjit"},"content":"    return","lastModifiedDate":"2021-10-20"},{"lineNumber":27,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":28,"author":{"gitId":"kengjit"},"content":"end","lastModifiedDate":"2021-10-20"},{"lineNumber":29,"author":{"gitId":"kengjit"},"content":"return output","lastModifiedDate":"2021-10-20"},{"lineNumber":30,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":31,"author":{"gitId":"kengjit"},"content":"@enduml","lastModifiedDate":"2021-10-20"}],"authorContributionMap":{"kengjit":31}},{"path":"docs/diagrams-DG/Command_EditFoodEntryCommand_Seq.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"kengjit"},"content":"@startuml","lastModifiedDate":"2021-10-20"},{"lineNumber":2,"author":{"gitId":"kengjit"},"content":"\u0027https://plantuml.com/sequence-diagram","lastModifiedDate":"2021-10-20"},{"lineNumber":3,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":4,"author":{"gitId":"kengjit"},"content":"-\u003e \":EditFoodEntryCommand\": execute()","lastModifiedDate":"2021-10-25"},{"lineNumber":5,"author":{"gitId":"kengjit"},"content":"activate \":EditFoodEntryCommand\"","lastModifiedDate":"2021-10-25"},{"lineNumber":6,"author":{"gitId":"kengjit"},"content":"alt Food does not exist in database","lastModifiedDate":"2021-10-20"},{"lineNumber":7,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":8,"author":{"gitId":"kengjit"},"content":"    create \":Food\"","lastModifiedDate":"2021-10-20"},{"lineNumber":9,"author":{"gitId":"kengjit"},"content":"    \":EditFoodEntryCommand\" -\u003e \":Food\" : new","lastModifiedDate":"2021-10-25"},{"lineNumber":10,"author":{"gitId":"kengjit"},"content":"    activate \":Food\"","lastModifiedDate":"2021-10-20"},{"lineNumber":11,"author":{"gitId":"kengjit"},"content":"    return customFood:Food","lastModifiedDate":"2021-10-20"},{"lineNumber":12,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":13,"author":{"gitId":"kengjit"},"content":"    \":EditFoodEntryCommand\" -\u003e \":EntryDatabase\" : editEntryAtIndex","lastModifiedDate":"2021-10-25"},{"lineNumber":14,"author":{"gitId":"kengjit"},"content":"    activate \":EntryDatabase\"","lastModifiedDate":"2021-10-20"},{"lineNumber":15,"author":{"gitId":"kengjit"},"content":"    return","lastModifiedDate":"2021-10-20"},{"lineNumber":16,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":17,"author":{"gitId":"kengjit"},"content":"    \":EditFoodEntryCommand\" -\u003e \":FoodDatabase\" : addFood","lastModifiedDate":"2021-10-25"},{"lineNumber":18,"author":{"gitId":"kengjit"},"content":"    activate \":FoodDatabase\"","lastModifiedDate":"2021-10-20"},{"lineNumber":19,"author":{"gitId":"kengjit"},"content":"    return","lastModifiedDate":"2021-10-20"},{"lineNumber":20,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":21,"author":{"gitId":"kengjit"},"content":"else Food exists in database","lastModifiedDate":"2021-10-20"},{"lineNumber":22,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":23,"author":{"gitId":"kengjit"},"content":"    \":EditFoodEntryCommand\" -\u003e \":EntryDatabase\" : editEntryAtIndex","lastModifiedDate":"2021-10-25"},{"lineNumber":24,"author":{"gitId":"kengjit"},"content":"    activate \":EntryDatabase\"","lastModifiedDate":"2021-10-20"},{"lineNumber":25,"author":{"gitId":"kengjit"},"content":"    return","lastModifiedDate":"2021-10-20"},{"lineNumber":26,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":27,"author":{"gitId":"kengjit"},"content":"end","lastModifiedDate":"2021-10-20"},{"lineNumber":28,"author":{"gitId":"kengjit"},"content":"return output","lastModifiedDate":"2021-10-20"},{"lineNumber":29,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":30,"author":{"gitId":"kengjit"},"content":"@enduml","lastModifiedDate":"2021-10-20"}],"authorContributionMap":{"kengjit":30}},{"path":"docs/diagrams-DG/EntryDatabase_convertDatabaseToString_Seq.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"kengjit"},"content":"@startuml","lastModifiedDate":"2021-10-26"},{"lineNumber":2,"author":{"gitId":"kengjit"},"content":"\u0027https://plantuml.com/sequence-diagram","lastModifiedDate":"2021-10-26"},{"lineNumber":3,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":4,"author":{"gitId":"kengjit"},"content":"-\u003e \":EntryDatabase\": convertDatabaseToString()","lastModifiedDate":"2021-10-26"},{"lineNumber":5,"author":{"gitId":"kengjit"},"content":"activate \":EntryDatabase\"","lastModifiedDate":"2021-10-26"},{"lineNumber":6,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":7,"author":{"gitId":"kengjit"},"content":"loop For every FoodTracker object in EntryDatabase","lastModifiedDate":"2021-10-26"},{"lineNumber":8,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":9,"author":{"gitId":"kengjit"},"content":"    \":EntryDatabase\" -\u003e \":Entry\": getFood()","lastModifiedDate":"2021-10-26"},{"lineNumber":10,"author":{"gitId":"kengjit"},"content":"    activate \":Entry\"","lastModifiedDate":"2021-10-26"},{"lineNumber":11,"author":{"gitId":"kengjit"},"content":"    return food:Food","lastModifiedDate":"2021-10-26"},{"lineNumber":12,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":13,"author":{"gitId":"kengjit"},"content":"    \":EntryDatabase\" -\u003e \":Entry\": getDate()","lastModifiedDate":"2021-10-26"},{"lineNumber":14,"author":{"gitId":"kengjit"},"content":"    activate \":Entry\"","lastModifiedDate":"2021-10-26"},{"lineNumber":15,"author":{"gitId":"kengjit"},"content":"    return date:String","lastModifiedDate":"2021-10-26"},{"lineNumber":16,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":17,"author":{"gitId":"kengjit"},"content":"    \":EntryDatabase\" -\u003e \":Food\": getName()","lastModifiedDate":"2021-10-26"},{"lineNumber":18,"author":{"gitId":"kengjit"},"content":"    activate \":Food\"","lastModifiedDate":"2021-10-26"},{"lineNumber":19,"author":{"gitId":"kengjit"},"content":"    return name:String","lastModifiedDate":"2021-10-26"},{"lineNumber":20,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":21,"author":{"gitId":"kengjit"},"content":"    \":EntryDatabase\" -\u003e \":Food\": getCalories()","lastModifiedDate":"2021-10-26"},{"lineNumber":22,"author":{"gitId":"kengjit"},"content":"    activate \":Food\"","lastModifiedDate":"2021-10-26"},{"lineNumber":23,"author":{"gitId":"kengjit"},"content":"    return calories:Integer","lastModifiedDate":"2021-10-26"},{"lineNumber":24,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":25,"author":{"gitId":"kengjit"},"content":"    \":EntryDatabase\" -\u003e \":Food\": getType()","lastModifiedDate":"2021-10-26"},{"lineNumber":26,"author":{"gitId":"kengjit"},"content":"    activate \":Food\"","lastModifiedDate":"2021-10-26"},{"lineNumber":27,"author":{"gitId":"kengjit"},"content":"    return type:String","lastModifiedDate":"2021-10-26"},{"lineNumber":28,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":29,"author":{"gitId":"kengjit"},"content":"    \":EntryDatabase\" -\u003e \":EntryDatabase\": append info onto String","lastModifiedDate":"2021-10-26"},{"lineNumber":30,"author":{"gitId":"kengjit"},"content":"    ","lastModifiedDate":"2021-10-26"},{"lineNumber":31,"author":{"gitId":"kengjit"},"content":"end","lastModifiedDate":"2021-10-26"},{"lineNumber":32,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":33,"author":{"gitId":"kengjit"},"content":"return String","lastModifiedDate":"2021-10-26"},{"lineNumber":34,"author":{"gitId":"kengjit"},"content":"@enduml","lastModifiedDate":"2021-10-26"}],"authorContributionMap":{"kengjit":34}},{"path":"docs/diagrams-DG/EntryDatabase_getPastDaysEntryDatabase_Seq.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"kengjit"},"content":"@startuml","lastModifiedDate":"2021-10-26"},{"lineNumber":2,"author":{"gitId":"kengjit"},"content":"\u0027https://plantuml.com/sequence-diagram","lastModifiedDate":"2021-10-26"},{"lineNumber":3,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":4,"author":{"gitId":"kengjit"},"content":"-\u003e \":EntryDatabase\": getPastDaysEntryDatabase(int days)","lastModifiedDate":"2021-10-26"},{"lineNumber":5,"author":{"gitId":"kengjit"},"content":"activate \":EntryDatabase\"","lastModifiedDate":"2021-10-26"},{"lineNumber":6,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":7,"author":{"gitId":"kengjit"},"content":"\":EntryDatabase\" -\u003e \":EntryDatabase\": sortDatabase()","lastModifiedDate":"2021-10-26"},{"lineNumber":8,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":9,"author":{"gitId":"kengjit"},"content":"\":EntryDatabase\" -\u003e \":EntryDatabase\": getEntries()","lastModifiedDate":"2021-10-26"},{"lineNumber":10,"author":{"gitId":"kengjit"},"content":"activate \":EntryDatabase\"","lastModifiedDate":"2021-11-02"},{"lineNumber":11,"author":{"gitId":"kengjit"},"content":"\":EntryDatabase\" --\u003e \":EntryDatabase\": totalEntries:ArrayList\u003cFoodTracker\u003e","lastModifiedDate":"2021-10-26"},{"lineNumber":12,"author":{"gitId":"kengjit"},"content":"deactivate \":EntryDatabase\"","lastModifiedDate":"2021-11-02"},{"lineNumber":13,"author":{"gitId":"kengjit"},"content":"create \"pastDaysEntries:EntryDatabase\"","lastModifiedDate":"2021-10-26"},{"lineNumber":14,"author":{"gitId":"kengjit"},"content":"\":EntryDatabase\" -\u003e \"pastDaysEntries:EntryDatabase\": new","lastModifiedDate":"2021-10-26"},{"lineNumber":15,"author":{"gitId":"kengjit"},"content":"activate \"pastDaysEntries:EntryDatabase\"","lastModifiedDate":"2021-10-26"},{"lineNumber":16,"author":{"gitId":"kengjit"},"content":"return","lastModifiedDate":"2021-10-26"},{"lineNumber":17,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":18,"author":{"gitId":"kengjit"},"content":"loop Until it iterates through all the days or entries","lastModifiedDate":"2021-10-26"},{"lineNumber":19,"author":{"gitId":"kengjit"},"content":"    loop Until current entry date does not equal to pointer date","lastModifiedDate":"2021-10-26"},{"lineNumber":20,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":21,"author":{"gitId":"kengjit"},"content":"        \":EntryDatabase\" -\u003e \"pastDaysEntries:EntryDatabase\": addEntry()","lastModifiedDate":"2021-10-26"},{"lineNumber":22,"author":{"gitId":"kengjit"},"content":"        activate \"pastDaysEntries:EntryDatabase\"","lastModifiedDate":"2021-10-26"},{"lineNumber":23,"author":{"gitId":"kengjit"},"content":"        return","lastModifiedDate":"2021-10-26"},{"lineNumber":24,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":25,"author":{"gitId":"kengjit"},"content":"        \":EntryDatabase\" -\u003e \":EntryDatabase\": decrement counter","lastModifiedDate":"2021-10-26"},{"lineNumber":26,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":27,"author":{"gitId":"kengjit"},"content":"    end","lastModifiedDate":"2021-10-26"},{"lineNumber":28,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":29,"author":{"gitId":"kengjit"},"content":"    \":EntryDatabase\" -\u003e \":EntryDatabase\": decrement pointer date","lastModifiedDate":"2021-10-26"},{"lineNumber":30,"author":{"gitId":"kengjit"},"content":"end","lastModifiedDate":"2021-10-26"},{"lineNumber":31,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":32,"author":{"gitId":"kengjit"},"content":"return pastDaysEntries","lastModifiedDate":"2021-10-26"},{"lineNumber":33,"author":{"gitId":"kengjit"},"content":"@enduml","lastModifiedDate":"2021-10-26"}],"authorContributionMap":{"kengjit":33}},{"path":"docs/diagrams-DG/EntryDatabase_getPastMonthsEntryDatabase_Seq.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"kengjit"},"content":"@startuml","lastModifiedDate":"2021-10-26"},{"lineNumber":2,"author":{"gitId":"kengjit"},"content":"\u0027https://plantuml.com/sequence-diagram","lastModifiedDate":"2021-10-26"},{"lineNumber":3,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":4,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":5,"author":{"gitId":"kengjit"},"content":"-\u003e \":EntryDatabase\": getPastMonthEntryDatabase()","lastModifiedDate":"2021-10-26"},{"lineNumber":6,"author":{"gitId":"kengjit"},"content":"activate \":EntryDatabase\"","lastModifiedDate":"2021-10-26"},{"lineNumber":7,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":8,"author":{"gitId":"kengjit"},"content":"\":EntryDatabase\" -\u003e \":EntryDatabase\": sortDatabase()","lastModifiedDate":"2021-10-26"},{"lineNumber":9,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":10,"author":{"gitId":"kengjit"},"content":"\":EntryDatabase\" -\u003e \":EntryDatabase\": getEntries()","lastModifiedDate":"2021-10-26"},{"lineNumber":11,"author":{"gitId":"kengjit"},"content":"activate \":EntryDatabase\"","lastModifiedDate":"2021-11-02"},{"lineNumber":12,"author":{"gitId":"kengjit"},"content":"\":EntryDatabase\" --\u003e \":EntryDatabase\": totalEntries:ArrayList\u003cFoodTracker\u003e","lastModifiedDate":"2021-10-26"},{"lineNumber":13,"author":{"gitId":"kengjit"},"content":"deactivate \":EntryDatabase\"","lastModifiedDate":"2021-11-02"},{"lineNumber":14,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":15,"author":{"gitId":"kengjit"},"content":"create \"pastMonthsEntries:EntryDatabase\"","lastModifiedDate":"2021-10-26"},{"lineNumber":16,"author":{"gitId":"kengjit"},"content":"\":EntryDatabase\" -\u003e \"pastMonthsEntries:EntryDatabase\": new","lastModifiedDate":"2021-10-26"},{"lineNumber":17,"author":{"gitId":"kengjit"},"content":"activate \"pastMonthsEntries:EntryDatabase\"","lastModifiedDate":"2021-10-26"},{"lineNumber":18,"author":{"gitId":"kengjit"},"content":"return","lastModifiedDate":"2021-10-26"},{"lineNumber":19,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":20,"author":{"gitId":"kengjit"},"content":"loop Until current entry month does not equal to current month or has iterated through all entries","lastModifiedDate":"2021-10-26"},{"lineNumber":21,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":22,"author":{"gitId":"kengjit"},"content":"    \":EntryDatabase\" -\u003e \"pastMonthsEntries:EntryDatabase\": addEntry()","lastModifiedDate":"2021-10-26"},{"lineNumber":23,"author":{"gitId":"kengjit"},"content":"    activate \"pastMonthsEntries:EntryDatabase\"","lastModifiedDate":"2021-10-26"},{"lineNumber":24,"author":{"gitId":"kengjit"},"content":"    return","lastModifiedDate":"2021-10-26"},{"lineNumber":25,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":26,"author":{"gitId":"kengjit"},"content":"    \":EntryDatabase\" -\u003e \":EntryDatabase\": decrement counter","lastModifiedDate":"2021-10-26"},{"lineNumber":27,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":28,"author":{"gitId":"kengjit"},"content":"end","lastModifiedDate":"2021-10-26"},{"lineNumber":29,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":30,"author":{"gitId":"kengjit"},"content":"return pastMonthsEntries","lastModifiedDate":"2021-10-26"},{"lineNumber":31,"author":{"gitId":"kengjit"},"content":"@enduml","lastModifiedDate":"2021-10-26"}],"authorContributionMap":{"kengjit":31}},{"path":"docs/diagrams-DG/EntryDatabase_preLoadDatabase_Seq.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"kengjit"},"content":"@startuml","lastModifiedDate":"2021-10-26"},{"lineNumber":2,"author":{"gitId":"kengjit"},"content":"\u0027https://plantuml.com/sequence-diagram","lastModifiedDate":"2021-10-26"},{"lineNumber":3,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":4,"author":{"gitId":"kengjit"},"content":"-\u003e \":EntryDatabase\": preloadDatabase()","lastModifiedDate":"2021-10-26"},{"lineNumber":5,"author":{"gitId":"kengjit"},"content":"activate \":EntryDatabase\"","lastModifiedDate":"2021-10-26"},{"lineNumber":6,"author":{"gitId":"kengjit"},"content":"participant Parser \u003c\u003c Class \u003e\u003e","lastModifiedDate":"2021-11-02"},{"lineNumber":7,"author":{"gitId":"kengjit"},"content":"loop While there are still unread lines","lastModifiedDate":"2021-10-26"},{"lineNumber":8,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":9,"author":{"gitId":"kengjit"},"content":"    \":EntryDatabase\" -\u003e Parser: parseMealType()","lastModifiedDate":"2021-11-02"},{"lineNumber":10,"author":{"gitId":"kengjit"},"content":"    activate Parser","lastModifiedDate":"2021-11-02"},{"lineNumber":11,"author":{"gitId":"kengjit"},"content":"    return mealType:MealType","lastModifiedDate":"2021-10-26"},{"lineNumber":12,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":13,"author":{"gitId":"kengjit"},"content":"    \":EntryDatabase\" -\u003e Parser: parseFoodType()","lastModifiedDate":"2021-11-02"},{"lineNumber":14,"author":{"gitId":"kengjit"},"content":"    activate Parser","lastModifiedDate":"2021-11-02"},{"lineNumber":15,"author":{"gitId":"kengjit"},"content":"    return type:FoodType","lastModifiedDate":"2021-10-26"},{"lineNumber":16,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":17,"author":{"gitId":"kengjit"},"content":"    \":EntryDatabase\" -\u003e Parser: getDate()","lastModifiedDate":"2021-11-02"},{"lineNumber":18,"author":{"gitId":"kengjit"},"content":"    activate Parser","lastModifiedDate":"2021-11-02"},{"lineNumber":19,"author":{"gitId":"kengjit"},"content":"    return date:LocalDate","lastModifiedDate":"2021-10-26"},{"lineNumber":20,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":21,"author":{"gitId":"kengjit"},"content":"    create \":Food\"","lastModifiedDate":"2021-10-26"},{"lineNumber":22,"author":{"gitId":"kengjit"},"content":"    \":EntryDatabase\" -\u003e \":Food\": new Food(name, calories, type)","lastModifiedDate":"2021-10-26"},{"lineNumber":23,"author":{"gitId":"kengjit"},"content":"    activate \":Food\"","lastModifiedDate":"2021-10-26"},{"lineNumber":24,"author":{"gitId":"kengjit"},"content":"    return food:Food","lastModifiedDate":"2021-10-26"},{"lineNumber":25,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":26,"author":{"gitId":"kengjit"},"content":"    create \":Entry\"","lastModifiedDate":"2021-10-26"},{"lineNumber":27,"author":{"gitId":"kengjit"},"content":"    \":EntryDatabase\" -\u003e \":Entry\": new Entry(mealType, food, date)","lastModifiedDate":"2021-10-26"},{"lineNumber":28,"author":{"gitId":"kengjit"},"content":"    activate \":Entry\"","lastModifiedDate":"2021-10-26"},{"lineNumber":29,"author":{"gitId":"kengjit"},"content":"    return entry:Entry","lastModifiedDate":"2021-10-26"},{"lineNumber":30,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":31,"author":{"gitId":"kengjit"},"content":"    \":EntryDatabase\" -\u003e \":EntryDatabase\": addEntry(entry)","lastModifiedDate":"2021-10-26"},{"lineNumber":32,"author":{"gitId":"brendanlsz"},"content":"    activate \":EntryDatabase\"","lastModifiedDate":"2021-10-26"},{"lineNumber":33,"author":{"gitId":"brendanlsz"},"content":"    return","lastModifiedDate":"2021-10-26"},{"lineNumber":34,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":35,"author":{"gitId":"kengjit"},"content":"end","lastModifiedDate":"2021-10-26"},{"lineNumber":36,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":37,"author":{"gitId":"kengjit"},"content":"return","lastModifiedDate":"2021-10-26"},{"lineNumber":38,"author":{"gitId":"kengjit"},"content":"@enduml","lastModifiedDate":"2021-10-26"}],"authorContributionMap":{"kengjit":36,"brendanlsz":2}},{"path":"docs/diagrams-DG/FoodDatabase_Class.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"brendanlsz"},"content":"@startuml","lastModifiedDate":"2021-10-25"},{"lineNumber":2,"author":{"gitId":"brendanlsz"},"content":"\u0027https://plantuml.com/class-diagram","lastModifiedDate":"2021-10-25"},{"lineNumber":3,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":4,"author":{"gitId":"brendanlsz"},"content":"hide circle","lastModifiedDate":"2021-10-26"},{"lineNumber":5,"author":{"gitId":"brendanlsz"},"content":"skinparam classAttributeIconSize 0","lastModifiedDate":"2021-10-26"},{"lineNumber":6,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":7,"author":{"gitId":"brendanlsz"},"content":"class FoodDatabase {","lastModifiedDate":"2021-10-25"},{"lineNumber":8,"author":{"gitId":"brendanlsz"},"content":"- databaseFoods:ArrayList\u003cFood\u003e","lastModifiedDate":"2021-10-25"},{"lineNumber":9,"author":{"gitId":"brendanlsz"},"content":"- UTOWN_FOOD_LIST: String","lastModifiedDate":"2021-11-07"},{"lineNumber":10,"author":{"gitId":"brendanlsz"},"content":"+ addFood(Food): void","lastModifiedDate":"2021-10-25"},{"lineNumber":11,"author":{"gitId":"brendanlsz"},"content":"+ addFood(String, Integer, FoodType): void","lastModifiedDate":"2021-10-25"},{"lineNumber":12,"author":{"gitId":"brendanlsz"},"content":"+ convertDatabaseToString(): String","lastModifiedDate":"2021-10-25"},{"lineNumber":13,"author":{"gitId":"brendanlsz"},"content":"+ deleteFood(int): void","lastModifiedDate":"2021-10-25"},{"lineNumber":14,"author":{"gitId":"brendanlsz"},"content":"+ findFoods(String): ArrayList\u003cFood\u003e","lastModifiedDate":"2021-10-25"},{"lineNumber":15,"author":{"gitId":"brendanlsz"},"content":"+ findSuggestions(FoodType, int, boolean): ArrayList\u003cFood\u003e","lastModifiedDate":"2021-10-25"},{"lineNumber":16,"author":{"gitId":"brendanlsz"},"content":"+ getFoodAtIndex(int): Food","lastModifiedDate":"2021-10-25"},{"lineNumber":17,"author":{"gitId":"brendanlsz"},"content":"+ getFoodDatabase(): ArrayList\u003cFood\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":18,"author":{"gitId":"brendanlsz"},"content":"+ listFoods(): String","lastModifiedDate":"2021-10-25"},{"lineNumber":19,"author":{"gitId":"brendanlsz"},"content":"+ loadFood(String): int","lastModifiedDate":"2021-11-07"},{"lineNumber":20,"author":{"gitId":"brendanlsz"},"content":"+ preloadDatabase(BufferedReader): void","lastModifiedDate":"2021-10-25"},{"lineNumber":21,"author":{"gitId":"brendanlsz"},"content":"}","lastModifiedDate":"2021-10-25"},{"lineNumber":22,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":23,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":24,"author":{"gitId":"brendanlsz"},"content":"@enduml","lastModifiedDate":"2021-10-25"}],"authorContributionMap":{"brendanlsz":24}},{"path":"docs/diagrams-DG/FoodDatabase_Classes.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"brendanlsz"},"content":"@startuml","lastModifiedDate":"2021-10-25"},{"lineNumber":2,"author":{"gitId":"brendanlsz"},"content":"hide member","lastModifiedDate":"2021-10-25"},{"lineNumber":3,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":4,"author":{"gitId":"brendanlsz"},"content":"hide circle","lastModifiedDate":"2021-10-26"},{"lineNumber":5,"author":{"gitId":"brendanlsz"},"content":"skinparam classAttributeIconSize 0","lastModifiedDate":"2021-10-26"},{"lineNumber":6,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":7,"author":{"gitId":"brendanlsz"},"content":"class FitNus","lastModifiedDate":"2021-10-25"},{"lineNumber":8,"author":{"gitId":"brendanlsz"},"content":"package parser {","lastModifiedDate":"2021-10-25"},{"lineNumber":9,"author":{"gitId":"brendanlsz"},"content":"    class Parser","lastModifiedDate":"2021-10-25"},{"lineNumber":10,"author":{"gitId":"brendanlsz"},"content":"}","lastModifiedDate":"2021-10-25"},{"lineNumber":11,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":12,"author":{"gitId":"brendanlsz"},"content":"package command {","lastModifiedDate":"2021-10-25"},{"lineNumber":13,"author":{"gitId":"brendanlsz"},"content":"    class \"{Abstract}\\nCommand\"","lastModifiedDate":"2021-10-25"},{"lineNumber":14,"author":{"gitId":"brendanlsz"},"content":"}","lastModifiedDate":"2021-10-25"},{"lineNumber":15,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":16,"author":{"gitId":"brendanlsz"},"content":"package database {","lastModifiedDate":"2021-10-25"},{"lineNumber":17,"author":{"gitId":"brendanlsz"},"content":"    class FoodDatabase","lastModifiedDate":"2021-10-25"},{"lineNumber":18,"author":{"gitId":"brendanlsz"},"content":"}","lastModifiedDate":"2021-10-25"},{"lineNumber":19,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":20,"author":{"gitId":"brendanlsz"},"content":"package storage {","lastModifiedDate":"2021-10-25"},{"lineNumber":21,"author":{"gitId":"brendanlsz"},"content":"    class Storage","lastModifiedDate":"2021-10-25"},{"lineNumber":22,"author":{"gitId":"brendanlsz"},"content":"}","lastModifiedDate":"2021-10-25"},{"lineNumber":23,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":24,"author":{"gitId":"brendanlsz"},"content":"package tracker {","lastModifiedDate":"2021-10-25"},{"lineNumber":25,"author":{"gitId":"brendanlsz"},"content":"    class Food","lastModifiedDate":"2021-10-25"},{"lineNumber":26,"author":{"gitId":"brendanlsz"},"content":"}","lastModifiedDate":"2021-10-25"},{"lineNumber":27,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":28,"author":{"gitId":"brendanlsz"},"content":"package utility {","lastModifiedDate":"2021-10-25"},{"lineNumber":29,"author":{"gitId":"brendanlsz"},"content":"    class Ui","lastModifiedDate":"2021-10-25"},{"lineNumber":30,"author":{"gitId":"brendanlsz"},"content":"}","lastModifiedDate":"2021-10-25"},{"lineNumber":31,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":32,"author":{"gitId":"brendanlsz"},"content":"Storage ..\u003e FoodDatabase","lastModifiedDate":"2021-10-25"},{"lineNumber":33,"author":{"gitId":"brendanlsz"},"content":"FitNus *-\u003e FoodDatabase","lastModifiedDate":"2021-10-26"},{"lineNumber":34,"author":{"gitId":"brendanlsz"},"content":"\"{Abstract}\\nCommand\" ..\u003e FoodDatabase","lastModifiedDate":"2021-10-25"},{"lineNumber":35,"author":{"gitId":"brendanlsz"},"content":"Parser ..\u003e FoodDatabase","lastModifiedDate":"2021-10-25"},{"lineNumber":36,"author":{"gitId":"brendanlsz"},"content":"FoodDatabase ..\u003e Parser","lastModifiedDate":"2021-10-25"},{"lineNumber":37,"author":{"gitId":"brendanlsz"},"content":"FoodDatabase *-\u003e Food","lastModifiedDate":"2021-10-26"},{"lineNumber":38,"author":{"gitId":"brendanlsz"},"content":"FoodDatabase ..\u003e Ui","lastModifiedDate":"2021-10-25"},{"lineNumber":39,"author":{"gitId":"brendanlsz"},"content":"@enduml","lastModifiedDate":"2021-10-25"}],"authorContributionMap":{"brendanlsz":39}},{"path":"docs/diagrams-DG/FoodDatabase_convertDatabaseToString_Seq.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"brendanlsz"},"content":"@startuml","lastModifiedDate":"2021-10-26"},{"lineNumber":2,"author":{"gitId":"brendanlsz"},"content":"\u0027https://plantuml.com/sequence-diagram","lastModifiedDate":"2021-10-26"},{"lineNumber":3,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":4,"author":{"gitId":"brendanlsz"},"content":"-\u003e \":FoodDatabase\": convertDatabaseToString()","lastModifiedDate":"2021-10-26"},{"lineNumber":5,"author":{"gitId":"brendanlsz"},"content":"activate \":FoodDatabase\"","lastModifiedDate":"2021-10-26"},{"lineNumber":6,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":7,"author":{"gitId":"brendanlsz"},"content":"loop For every Food object in FoodDatabase","lastModifiedDate":"2021-10-26"},{"lineNumber":8,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":9,"author":{"gitId":"brendanlsz"},"content":"    \":FoodDatabase\" -\u003e \":Food\": convertToStringForStorage()","lastModifiedDate":"2021-11-02"},{"lineNumber":10,"author":{"gitId":"brendanlsz"},"content":"    activate \":Food\"","lastModifiedDate":"2021-11-02"},{"lineNumber":11,"author":{"gitId":"brendanlsz"},"content":"    \":Food\" -\u003e \":Food\": getName()","lastModifiedDate":"2021-11-02"},{"lineNumber":12,"author":{"gitId":"brendanlsz"},"content":"    activate \":Food\"","lastModifiedDate":"2021-10-26"},{"lineNumber":13,"author":{"gitId":"brendanlsz"},"content":"    return name","lastModifiedDate":"2021-10-26"},{"lineNumber":14,"author":{"gitId":"brendanlsz"},"content":"    \":Food\" -\u003e \":Food\": getCalories()","lastModifiedDate":"2021-11-02"},{"lineNumber":15,"author":{"gitId":"brendanlsz"},"content":"    activate \":Food\"","lastModifiedDate":"2021-10-26"},{"lineNumber":16,"author":{"gitId":"brendanlsz"},"content":"    return calories","lastModifiedDate":"2021-10-26"},{"lineNumber":17,"author":{"gitId":"brendanlsz"},"content":"    \":Food\" -\u003e \":Food\": getType()","lastModifiedDate":"2021-11-02"},{"lineNumber":18,"author":{"gitId":"brendanlsz"},"content":"    activate \":Food\"","lastModifiedDate":"2021-10-26"},{"lineNumber":19,"author":{"gitId":"brendanlsz"},"content":"    return type","lastModifiedDate":"2021-10-26"},{"lineNumber":20,"author":{"gitId":"brendanlsz"},"content":"    return Food object as String","lastModifiedDate":"2021-11-02"},{"lineNumber":21,"author":{"gitId":"brendanlsz"},"content":"end","lastModifiedDate":"2021-10-26"},{"lineNumber":22,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":23,"author":{"gitId":"brendanlsz"},"content":"return content as String","lastModifiedDate":"2021-10-26"},{"lineNumber":24,"author":{"gitId":"brendanlsz"},"content":"@enduml","lastModifiedDate":"2021-10-26"}],"authorContributionMap":{"brendanlsz":24}},{"path":"docs/diagrams-DG/FoodDatabase_preloadDatabase_Seq.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"brendanlsz"},"content":"@startuml","lastModifiedDate":"2021-10-26"},{"lineNumber":2,"author":{"gitId":"brendanlsz"},"content":"\u0027https://plantuml.com/sequence-diagram","lastModifiedDate":"2021-10-26"},{"lineNumber":3,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":4,"author":{"gitId":"brendanlsz"},"content":"-\u003e \":FoodDatabase\": preloadDatabase()","lastModifiedDate":"2021-10-26"},{"lineNumber":5,"author":{"gitId":"brendanlsz"},"content":"activate \":FoodDatabase\"","lastModifiedDate":"2021-10-26"},{"lineNumber":6,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":7,"author":{"gitId":"brendanlsz"},"content":"loop While there are still unread lines","lastModifiedDate":"2021-10-26"},{"lineNumber":8,"author":{"gitId":"brendanlsz"},"content":"    \":FoodDatabase\" -\u003e \":FoodDatabase\": loadFood()","lastModifiedDate":"2021-11-06"},{"lineNumber":9,"author":{"gitId":"brendanlsz"},"content":"    activate \":FoodDatabase\"","lastModifiedDate":"2021-11-06"},{"lineNumber":10,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":11,"author":{"gitId":"brendanlsz"},"content":"    \":FoodDatabase\" -\u003e \"\u003c\u003cClass\u003e\u003e\\nParser\": parseFoodType()","lastModifiedDate":"2021-11-02"},{"lineNumber":12,"author":{"gitId":"brendanlsz"},"content":"    activate \"\u003c\u003cClass\u003e\u003e\\nParser\"","lastModifiedDate":"2021-11-02"},{"lineNumber":13,"author":{"gitId":"brendanlsz"},"content":"    return type","lastModifiedDate":"2021-10-26"},{"lineNumber":14,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":15,"author":{"gitId":"brendanlsz"},"content":"    \":FoodDatabase\" -\u003e \":FoodDatabase\": addFood(name, calories, type)","lastModifiedDate":"2021-10-26"},{"lineNumber":16,"author":{"gitId":"brendanlsz"},"content":"    activate \":FoodDatabase\"","lastModifiedDate":"2021-10-26"},{"lineNumber":17,"author":{"gitId":"brendanlsz"},"content":"    return","lastModifiedDate":"2021-10-26"},{"lineNumber":18,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":19,"author":{"gitId":"brendanlsz"},"content":"    return","lastModifiedDate":"2021-11-06"},{"lineNumber":20,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":21,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":22,"author":{"gitId":"brendanlsz"},"content":"end","lastModifiedDate":"2021-10-26"},{"lineNumber":23,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":24,"author":{"gitId":"brendanlsz"},"content":"return","lastModifiedDate":"2021-10-26"},{"lineNumber":25,"author":{"gitId":"brendanlsz"},"content":"@enduml","lastModifiedDate":"2021-10-26"}],"authorContributionMap":{"brendanlsz":25}},{"path":"docs/diagrams-DG/FoodTrackerDatabase_Class.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"kengjit"},"content":"@startuml","lastModifiedDate":"2021-10-26"},{"lineNumber":2,"author":{"gitId":"kengjit"},"content":"\u0027https://plantuml.com/class-diagram","lastModifiedDate":"2021-10-26"},{"lineNumber":3,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":4,"author":{"gitId":"kengjit"},"content":"hide circle","lastModifiedDate":"2021-10-26"},{"lineNumber":5,"author":{"gitId":"kengjit"},"content":"skinparam classAttributeIconSize 0","lastModifiedDate":"2021-10-26"},{"lineNumber":6,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":7,"author":{"gitId":"kengjit"},"content":"class EntryDatabase {","lastModifiedDate":"2021-11-02"},{"lineNumber":8,"author":{"gitId":"kengjit"},"content":"- entries:ArrayList\u003cEntry\u003e","lastModifiedDate":"2021-11-02"},{"lineNumber":9,"author":{"gitId":"kengjit"},"content":"+ addEntry(MealType, Food):void","lastModifiedDate":"2021-10-26"},{"lineNumber":10,"author":{"gitId":"kengjit"},"content":"+ addEntry(Entry):void","lastModifiedDate":"2021-11-02"},{"lineNumber":11,"author":{"gitId":"kengjit"},"content":"+ sortDatabase():void","lastModifiedDate":"2021-10-26"},{"lineNumber":12,"author":{"gitId":"kengjit"},"content":"+ deleteEntry(int):void","lastModifiedDate":"2021-10-26"},{"lineNumber":13,"author":{"gitId":"kengjit"},"content":"+ getTotalDailyCalorie():int","lastModifiedDate":"2021-10-26"},{"lineNumber":14,"author":{"gitId":"kengjit"},"content":"+ convertDatabaseToString():String","lastModifiedDate":"2021-10-26"},{"lineNumber":15,"author":{"gitId":"kengjit"},"content":"+ preloadDatabase(BufferedReader):void","lastModifiedDate":"2021-10-26"},{"lineNumber":16,"author":{"gitId":"kengjit"},"content":"+ getEntries():ArrayList\u003cEntry\u003e","lastModifiedDate":"2021-11-02"},{"lineNumber":17,"author":{"gitId":"kengjit"},"content":"+ getEntryAtIndex(int):void","lastModifiedDate":"2021-10-26"},{"lineNumber":18,"author":{"gitId":"kengjit"},"content":"+ listEntries():String","lastModifiedDate":"2021-10-26"},{"lineNumber":19,"author":{"gitId":"kengjit"},"content":"+ findEntries(String):ArrayList\u003cEntry\u003e","lastModifiedDate":"2021-11-02"},{"lineNumber":20,"author":{"gitId":"kengjit"},"content":"+ getPastDaysEntryDatabase(int):EntryDatabase","lastModifiedDate":"2021-11-02"},{"lineNumber":21,"author":{"gitId":"kengjit"},"content":"+ getPastMonthEntryDatabase():EntryDatabase","lastModifiedDate":"2021-11-02"},{"lineNumber":22,"author":{"gitId":"kengjit"},"content":"+ editEntryAtIndex(int, Food):void","lastModifiedDate":"2021-10-26"},{"lineNumber":23,"author":{"gitId":"kengjit"},"content":"}","lastModifiedDate":"2021-10-26"},{"lineNumber":24,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":25,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":26,"author":{"gitId":"kengjit"},"content":"@enduml","lastModifiedDate":"2021-10-26"}],"authorContributionMap":{"kengjit":26}},{"path":"docs/diagrams-DG/FoodTrackerDatabase_Classes.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"kengjit"},"content":"@startuml","lastModifiedDate":"2021-10-26"},{"lineNumber":2,"author":{"gitId":"kengjit"},"content":"hide member","lastModifiedDate":"2021-10-26"},{"lineNumber":3,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":4,"author":{"gitId":"kengjit"},"content":"hide circle","lastModifiedDate":"2021-10-26"},{"lineNumber":5,"author":{"gitId":"kengjit"},"content":"skinparam classAttributeIconSize 0","lastModifiedDate":"2021-10-26"},{"lineNumber":6,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":7,"author":{"gitId":"kengjit"},"content":"class FitNus","lastModifiedDate":"2021-10-26"},{"lineNumber":8,"author":{"gitId":"kengjit"},"content":"package parser {","lastModifiedDate":"2021-10-26"},{"lineNumber":9,"author":{"gitId":"kengjit"},"content":"    class Parser","lastModifiedDate":"2021-10-26"},{"lineNumber":10,"author":{"gitId":"kengjit"},"content":"}","lastModifiedDate":"2021-10-26"},{"lineNumber":11,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":12,"author":{"gitId":"kengjit"},"content":"package command {","lastModifiedDate":"2021-10-26"},{"lineNumber":13,"author":{"gitId":"kengjit"},"content":"    class \"{Abstract}\\nCommand\"","lastModifiedDate":"2021-10-26"},{"lineNumber":14,"author":{"gitId":"kengjit"},"content":"}","lastModifiedDate":"2021-10-26"},{"lineNumber":15,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":16,"author":{"gitId":"kengjit"},"content":"package database {","lastModifiedDate":"2021-10-26"},{"lineNumber":17,"author":{"gitId":"kengjit"},"content":"    class EntryDatabase","lastModifiedDate":"2021-11-02"},{"lineNumber":18,"author":{"gitId":"kengjit"},"content":"}","lastModifiedDate":"2021-10-26"},{"lineNumber":19,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":20,"author":{"gitId":"kengjit"},"content":"package storage {","lastModifiedDate":"2021-10-26"},{"lineNumber":21,"author":{"gitId":"kengjit"},"content":"    class Storage","lastModifiedDate":"2021-10-26"},{"lineNumber":22,"author":{"gitId":"kengjit"},"content":"}","lastModifiedDate":"2021-10-26"},{"lineNumber":23,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":24,"author":{"gitId":"kengjit"},"content":"package tracker {","lastModifiedDate":"2021-10-26"},{"lineNumber":25,"author":{"gitId":"kengjit"},"content":"    class Entry","lastModifiedDate":"2021-11-02"},{"lineNumber":26,"author":{"gitId":"kengjit"},"content":"    class Food","lastModifiedDate":"2021-10-26"},{"lineNumber":27,"author":{"gitId":"kengjit"},"content":"}","lastModifiedDate":"2021-10-26"},{"lineNumber":28,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":29,"author":{"gitId":"kengjit"},"content":"package utility {","lastModifiedDate":"2021-10-26"},{"lineNumber":30,"author":{"gitId":"kengjit"},"content":"    class Ui","lastModifiedDate":"2021-10-26"},{"lineNumber":31,"author":{"gitId":"kengjit"},"content":"}","lastModifiedDate":"2021-10-26"},{"lineNumber":32,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":33,"author":{"gitId":"kengjit"},"content":"Storage ..\u003e EntryDatabase","lastModifiedDate":"2021-11-02"},{"lineNumber":34,"author":{"gitId":"kengjit"},"content":"FitNus *-\u003e EntryDatabase","lastModifiedDate":"2021-11-02"},{"lineNumber":35,"author":{"gitId":"kengjit"},"content":"\"{Abstract}\\nCommand\" ..\u003e EntryDatabase","lastModifiedDate":"2021-11-02"},{"lineNumber":36,"author":{"gitId":"kengjit"},"content":"Parser ..\u003e EntryDatabase","lastModifiedDate":"2021-11-02"},{"lineNumber":37,"author":{"gitId":"kengjit"},"content":"EntryDatabase ..\u003e Parser","lastModifiedDate":"2021-11-02"},{"lineNumber":38,"author":{"gitId":"kengjit"},"content":"EntryDatabase *-\u003e Entry","lastModifiedDate":"2021-11-02"},{"lineNumber":39,"author":{"gitId":"kengjit"},"content":"EntryDatabase ..\u003e Food","lastModifiedDate":"2021-11-02"},{"lineNumber":40,"author":{"gitId":"kengjit"},"content":"EntryDatabase ..\u003e Ui","lastModifiedDate":"2021-11-02"},{"lineNumber":41,"author":{"gitId":"kengjit"},"content":"@enduml","lastModifiedDate":"2021-10-26"}],"authorContributionMap":{"kengjit":41}},{"path":"docs/diagrams-DG/ListFoodEntryAll.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"kengjit"},"content":"@startuml","lastModifiedDate":"2021-10-25"},{"lineNumber":2,"author":{"gitId":"kengjit"},"content":"\u0027https://plantuml.com/sequence-diagram","lastModifiedDate":"2021-10-25"},{"lineNumber":3,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":4,"author":{"gitId":"kengjit"},"content":"-\u003e \":ListFoodEntryAllCommand\": execute()","lastModifiedDate":"2021-10-25"},{"lineNumber":5,"author":{"gitId":"kengjit"},"content":"activate \":ListFoodEntryAllCommand\"","lastModifiedDate":"2021-10-25"},{"lineNumber":6,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":7,"author":{"gitId":"kengjit"},"content":"    \":ListFoodEntryAllCommand\" -\u003e \":EntryDatabase\" : listEntries","lastModifiedDate":"2021-10-25"},{"lineNumber":8,"author":{"gitId":"kengjit"},"content":"    activate \":EntryDatabase\"","lastModifiedDate":"2021-10-25"},{"lineNumber":9,"author":{"gitId":"kengjit"},"content":"    return entries","lastModifiedDate":"2021-10-25"},{"lineNumber":10,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":11,"author":{"gitId":"kengjit"},"content":"return output","lastModifiedDate":"2021-10-25"},{"lineNumber":12,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":13,"author":{"gitId":"kengjit"},"content":"@enduml","lastModifiedDate":"2021-10-25"}],"authorContributionMap":{"kengjit":13}},{"path":"docs/diagrams-DG/ListFoodEntryCustom.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"kengjit"},"content":"@startuml","lastModifiedDate":"2021-10-25"},{"lineNumber":2,"author":{"gitId":"kengjit"},"content":"\u0027https://plantuml.com/sequence-diagram","lastModifiedDate":"2021-10-25"},{"lineNumber":3,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":4,"author":{"gitId":"kengjit"},"content":"-\u003e \":ListFoodEntryCustomCommand\": execute()","lastModifiedDate":"2021-10-25"},{"lineNumber":5,"author":{"gitId":"kengjit"},"content":"activate \":ListFoodEntryCustomCommand\"","lastModifiedDate":"2021-10-25"},{"lineNumber":6,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":7,"author":{"gitId":"kengjit"},"content":"    create \":EntryDatabase\"","lastModifiedDate":"2021-10-25"},{"lineNumber":8,"author":{"gitId":"kengjit"},"content":"    \":ListFoodEntryCustomCommand\" -\u003e \":EntryDatabase\" : getPastDaysEntryDatabase(int)","lastModifiedDate":"2021-10-25"},{"lineNumber":9,"author":{"gitId":"kengjit"},"content":"    activate \":EntryDatabase\"","lastModifiedDate":"2021-10-25"},{"lineNumber":10,"author":{"gitId":"kengjit"},"content":"    return CustomDayEntryDatabase: EntryDatabase","lastModifiedDate":"2021-10-25"},{"lineNumber":11,"author":{"gitId":"kengjit"},"content":"    \":ListFoodEntryCustomCommand\" -\u003e \":EntryDatabase\" : listEntries","lastModifiedDate":"2021-10-25"},{"lineNumber":12,"author":{"gitId":"kengjit"},"content":"    activate \":EntryDatabase\"","lastModifiedDate":"2021-10-25"},{"lineNumber":13,"author":{"gitId":"kengjit"},"content":"    return entries","lastModifiedDate":"2021-10-25"},{"lineNumber":14,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":15,"author":{"gitId":"kengjit"},"content":"return output","lastModifiedDate":"2021-10-25"},{"lineNumber":16,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":17,"author":{"gitId":"kengjit"},"content":"@enduml","lastModifiedDate":"2021-10-25"}],"authorContributionMap":{"kengjit":17}},{"path":"docs/diagrams-DG/MealPlanDatabase_Class.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"praj-bellakka"},"content":"@startuml","lastModifiedDate":"2021-11-01"},{"lineNumber":2,"author":{"gitId":"praj-bellakka"},"content":"\u0027https://plantuml.com/class-diagram","lastModifiedDate":"2021-11-01"},{"lineNumber":3,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":4,"author":{"gitId":"praj-bellakka"},"content":"hide circle","lastModifiedDate":"2021-11-01"},{"lineNumber":5,"author":{"gitId":"praj-bellakka"},"content":"skinparam classAttributeIconSize 0","lastModifiedDate":"2021-11-01"},{"lineNumber":6,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":7,"author":{"gitId":"praj-bellakka"},"content":"class MealPlanDatabase {","lastModifiedDate":"2021-11-01"},{"lineNumber":8,"author":{"gitId":"praj-bellakka"},"content":"- databaseMealPlans:ArrayList\u003cMealPlan\u003e","lastModifiedDate":"2021-11-01"},{"lineNumber":9,"author":{"gitId":"praj-bellakka"},"content":"- convertFoodToString(ArrayList\u003cFood\u003e):String","lastModifiedDate":"2021-11-01"},{"lineNumber":10,"author":{"gitId":"praj-bellakka"},"content":"+ addMealPlan(MealPlan):void","lastModifiedDate":"2021-11-01"},{"lineNumber":11,"author":{"gitId":"praj-bellakka"},"content":"+ getMealAtIndex(int):MealPlan","lastModifiedDate":"2021-11-01"},{"lineNumber":12,"author":{"gitId":"praj-bellakka"},"content":"+ convertDatabaseToString():String","lastModifiedDate":"2021-11-01"},{"lineNumber":13,"author":{"gitId":"praj-bellakka"},"content":"+ preloadDatabase(BufferedReader):void","lastModifiedDate":"2021-11-01"},{"lineNumber":14,"author":{"gitId":"praj-bellakka"},"content":"+ listMealPlan():String","lastModifiedDate":"2021-11-02"},{"lineNumber":15,"author":{"gitId":"praj-bellakka"},"content":"}","lastModifiedDate":"2021-11-01"},{"lineNumber":16,"author":{"gitId":"praj-bellakka"},"content":"@enduml","lastModifiedDate":"2021-11-01"}],"authorContributionMap":{"praj-bellakka":16}},{"path":"docs/diagrams-DG/MealPlanDatabase_Classes.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"praj-bellakka"},"content":"@startuml","lastModifiedDate":"2021-11-02"},{"lineNumber":2,"author":{"gitId":"praj-bellakka"},"content":"hide member","lastModifiedDate":"2021-11-02"},{"lineNumber":3,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":4,"author":{"gitId":"praj-bellakka"},"content":"hide circle","lastModifiedDate":"2021-11-02"},{"lineNumber":5,"author":{"gitId":"praj-bellakka"},"content":"skinparam classAttributeIconSize 0","lastModifiedDate":"2021-11-02"},{"lineNumber":6,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":7,"author":{"gitId":"praj-bellakka"},"content":"class FitNus","lastModifiedDate":"2021-11-02"},{"lineNumber":8,"author":{"gitId":"praj-bellakka"},"content":"package parser {","lastModifiedDate":"2021-11-02"},{"lineNumber":9,"author":{"gitId":"praj-bellakka"},"content":"    class Parser","lastModifiedDate":"2021-11-02"},{"lineNumber":10,"author":{"gitId":"praj-bellakka"},"content":"}","lastModifiedDate":"2021-11-02"},{"lineNumber":11,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":12,"author":{"gitId":"praj-bellakka"},"content":"package tracker {","lastModifiedDate":"2021-11-02"},{"lineNumber":13,"author":{"gitId":"praj-bellakka"},"content":"    class Food","lastModifiedDate":"2021-11-02"},{"lineNumber":14,"author":{"gitId":"praj-bellakka"},"content":"    class MealPlan","lastModifiedDate":"2021-11-02"},{"lineNumber":15,"author":{"gitId":"praj-bellakka"},"content":"}","lastModifiedDate":"2021-11-02"},{"lineNumber":16,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":17,"author":{"gitId":"praj-bellakka"},"content":"package database {","lastModifiedDate":"2021-11-02"},{"lineNumber":18,"author":{"gitId":"praj-bellakka"},"content":"    class MealPlanDatabase","lastModifiedDate":"2021-11-02"},{"lineNumber":19,"author":{"gitId":"praj-bellakka"},"content":"}","lastModifiedDate":"2021-11-02"},{"lineNumber":20,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":21,"author":{"gitId":"praj-bellakka"},"content":"package storage {","lastModifiedDate":"2021-11-02"},{"lineNumber":22,"author":{"gitId":"praj-bellakka"},"content":"    class Storage","lastModifiedDate":"2021-11-02"},{"lineNumber":23,"author":{"gitId":"praj-bellakka"},"content":"}","lastModifiedDate":"2021-11-02"},{"lineNumber":24,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":25,"author":{"gitId":"praj-bellakka"},"content":"package utility {","lastModifiedDate":"2021-11-02"},{"lineNumber":26,"author":{"gitId":"praj-bellakka"},"content":"    class Ui","lastModifiedDate":"2021-11-02"},{"lineNumber":27,"author":{"gitId":"praj-bellakka"},"content":"}","lastModifiedDate":"2021-11-02"},{"lineNumber":28,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":29,"author":{"gitId":"praj-bellakka"},"content":"FitNus *-\u003e MealPlanDatabase","lastModifiedDate":"2021-11-02"},{"lineNumber":30,"author":{"gitId":"praj-bellakka"},"content":"Parser ..\u003e MealPlanDatabase","lastModifiedDate":"2021-11-02"},{"lineNumber":31,"author":{"gitId":"praj-bellakka"},"content":"MealPlanDatabase ..\u003e Parser","lastModifiedDate":"2021-11-02"},{"lineNumber":32,"author":{"gitId":"praj-bellakka"},"content":"MealPlanDatabase ..\u003e Ui","lastModifiedDate":"2021-11-02"},{"lineNumber":33,"author":{"gitId":"praj-bellakka"},"content":"Storage ..\u003e MealPlanDatabase","lastModifiedDate":"2021-11-02"},{"lineNumber":34,"author":{"gitId":"praj-bellakka"},"content":"MealPlanDatabase *-\u003e Food","lastModifiedDate":"2021-11-02"},{"lineNumber":35,"author":{"gitId":"praj-bellakka"},"content":"MealPlanDatabase *-\u003e MealPlan","lastModifiedDate":"2021-11-02"},{"lineNumber":36,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":37,"author":{"gitId":"praj-bellakka"},"content":"@enduml","lastModifiedDate":"2021-11-02"}],"authorContributionMap":{"praj-bellakka":37}},{"path":"docs/diagrams-DG/MealPlanDatabase_convertDatabaseToString_Seq.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"praj-bellakka"},"content":"@startuml","lastModifiedDate":"2021-11-06"},{"lineNumber":2,"author":{"gitId":"praj-bellakka"},"content":"\u0027https://plantuml.com/sequence-diagram","lastModifiedDate":"2021-11-06"},{"lineNumber":3,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":4,"author":{"gitId":"praj-bellakka"},"content":"-\u003e \":MealPlanDatabase\": convertDatabaseToString()","lastModifiedDate":"2021-11-06"},{"lineNumber":5,"author":{"gitId":"praj-bellakka"},"content":"activate \":MealPlanDatabase\"","lastModifiedDate":"2021-11-06"},{"lineNumber":6,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":7,"author":{"gitId":"praj-bellakka"},"content":"loop For every MealPlan object in MealPlanDatabase","lastModifiedDate":"2021-11-06"},{"lineNumber":8,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":9,"author":{"gitId":"praj-bellakka"},"content":"    \":MealPlanDatabase\" -\u003e \":MealPlan\": getMealPlanName()","lastModifiedDate":"2021-11-06"},{"lineNumber":10,"author":{"gitId":"praj-bellakka"},"content":"    activate \":MealPlan\"","lastModifiedDate":"2021-11-06"},{"lineNumber":11,"author":{"gitId":"praj-bellakka"},"content":"    return name","lastModifiedDate":"2021-11-06"},{"lineNumber":12,"author":{"gitId":"praj-bellakka"},"content":"    \":MealPlanDatabase\" -\u003e \":MealPlan\": getMealPlanFoods()","lastModifiedDate":"2021-11-06"},{"lineNumber":13,"author":{"gitId":"praj-bellakka"},"content":"    activate \":MealPlan\"","lastModifiedDate":"2021-11-06"},{"lineNumber":14,"author":{"gitId":"praj-bellakka"},"content":"    return ArrayList\u003cFood\u003e","lastModifiedDate":"2021-11-06"},{"lineNumber":15,"author":{"gitId":"praj-bellakka"},"content":"    \":MealPlanDatabase\" -\u003e \":MealPlanDatabase\": convertFoodToString()","lastModifiedDate":"2021-11-06"},{"lineNumber":16,"author":{"gitId":"praj-bellakka"},"content":"    activate \":MealPlanDatabase\"","lastModifiedDate":"2021-11-06"},{"lineNumber":17,"author":{"gitId":"praj-bellakka"},"content":"    return Food ArrayList as String","lastModifiedDate":"2021-11-06"},{"lineNumber":18,"author":{"gitId":"praj-bellakka"},"content":"end","lastModifiedDate":"2021-11-06"},{"lineNumber":19,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":20,"author":{"gitId":"praj-bellakka"},"content":"return content as String","lastModifiedDate":"2021-11-06"},{"lineNumber":21,"author":{"gitId":"praj-bellakka"},"content":"@enduml","lastModifiedDate":"2021-11-06"},{"lineNumber":22,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-06"}],"authorContributionMap":{"praj-bellakka":22}},{"path":"docs/diagrams-DG/MealPlanDatabase_listMealPlan_Seq.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"praj-bellakka"},"content":"@startuml","lastModifiedDate":"2021-11-06"},{"lineNumber":2,"author":{"gitId":"praj-bellakka"},"content":"\u0027https://plantuml.com/sequence-diagram","lastModifiedDate":"2021-11-06"},{"lineNumber":3,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":4,"author":{"gitId":"praj-bellakka"},"content":"-\u003e \":MealPlanDatabase\": listMealPlan()","lastModifiedDate":"2021-11-06"},{"lineNumber":5,"author":{"gitId":"praj-bellakka"},"content":"activate \":MealPlanDatabase\"","lastModifiedDate":"2021-11-06"},{"lineNumber":6,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":7,"author":{"gitId":"praj-bellakka"},"content":"alt If database size is \u003e 0","lastModifiedDate":"2021-11-06"},{"lineNumber":8,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":9,"author":{"gitId":"praj-bellakka"},"content":"loop While MealPlan exists in database","lastModifiedDate":"2021-11-06"},{"lineNumber":10,"author":{"gitId":"praj-bellakka"},"content":"    \":MealPlanDatabase\" -\u003e \":MealPlan\": getMealPlanName()","lastModifiedDate":"2021-11-06"},{"lineNumber":11,"author":{"gitId":"praj-bellakka"},"content":"    activate \":MealPlan\"","lastModifiedDate":"2021-11-06"},{"lineNumber":12,"author":{"gitId":"praj-bellakka"},"content":"    return name","lastModifiedDate":"2021-11-06"},{"lineNumber":13,"author":{"gitId":"praj-bellakka"},"content":"    \":MealPlanDatabase\" -\u003e \":MealPlan\": getFoodString()","lastModifiedDate":"2021-11-06"},{"lineNumber":14,"author":{"gitId":"praj-bellakka"},"content":"    activate \":MealPlan\"","lastModifiedDate":"2021-11-06"},{"lineNumber":15,"author":{"gitId":"praj-bellakka"},"content":"    return Food as String","lastModifiedDate":"2021-11-06"},{"lineNumber":16,"author":{"gitId":"praj-bellakka"},"content":"    \":MealPlanDatabase\" -\u003e \":MealPlanDatabase\": append()","lastModifiedDate":"2021-11-06"},{"lineNumber":17,"author":{"gitId":"praj-bellakka"},"content":"    activate \":MealPlanDatabase\"","lastModifiedDate":"2021-11-06"},{"lineNumber":18,"author":{"gitId":"praj-bellakka"},"content":"    return StringBuilder","lastModifiedDate":"2021-11-06"},{"lineNumber":19,"author":{"gitId":"praj-bellakka"},"content":"end","lastModifiedDate":"2021-11-06"},{"lineNumber":20,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":21,"author":{"gitId":"praj-bellakka"},"content":"end","lastModifiedDate":"2021-11-06"},{"lineNumber":22,"author":{"gitId":"praj-bellakka"},"content":"return MealPlan as String","lastModifiedDate":"2021-11-06"},{"lineNumber":23,"author":{"gitId":"praj-bellakka"},"content":"@enduml","lastModifiedDate":"2021-11-06"},{"lineNumber":24,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-06"}],"authorContributionMap":{"praj-bellakka":24}},{"path":"docs/diagrams-DG/MealPlanDatabase_preLoadDatabase_Seq.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"praj-bellakka"},"content":"@startuml","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"praj-bellakka"},"content":"\u0027https://plantuml.com/sequence-diagram","lastModifiedDate":"2021-10-29"},{"lineNumber":3,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":4,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":5,"author":{"gitId":"praj-bellakka"},"content":"-\u003e \":MealPlanDatabase\": preloadDatabase()","lastModifiedDate":"2021-10-29"},{"lineNumber":6,"author":{"gitId":"praj-bellakka"},"content":"activate \":MealPlanDatabase\"","lastModifiedDate":"2021-10-29"},{"lineNumber":7,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":8,"author":{"gitId":"praj-bellakka"},"content":"loop While there are still unread lines","lastModifiedDate":"2021-10-29"},{"lineNumber":9,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":10,"author":{"gitId":"praj-bellakka"},"content":"    alt If MealPlan decoder is detected","lastModifiedDate":"2021-11-06"},{"lineNumber":11,"author":{"gitId":"praj-bellakka"},"content":"        create \":MealPlan\"","lastModifiedDate":"2021-10-29"},{"lineNumber":12,"author":{"gitId":"praj-bellakka"},"content":"        \":MealPlanDatabase\" -\u003e \":MealPlan\": new MealPlan(mealPlanName, tempArray)","lastModifiedDate":"2021-10-29"},{"lineNumber":13,"author":{"gitId":"praj-bellakka"},"content":"        activate \":MealPlan\"","lastModifiedDate":"2021-10-29"},{"lineNumber":14,"author":{"gitId":"praj-bellakka"},"content":"        return tempMealPlan:MealPlan","lastModifiedDate":"2021-10-29"},{"lineNumber":15,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":16,"author":{"gitId":"praj-bellakka"},"content":"        \":MealPlanDatabase\" -\u003e \":MealPlanDatabase\": addMealPlan(tempMealPlan)","lastModifiedDate":"2021-10-29"},{"lineNumber":17,"author":{"gitId":"praj-bellakka"},"content":"        activate \":MealPlanDatabase\"","lastModifiedDate":"2021-10-29"},{"lineNumber":18,"author":{"gitId":"praj-bellakka"},"content":"        return","lastModifiedDate":"2021-10-29"},{"lineNumber":19,"author":{"gitId":"praj-bellakka"},"content":"    end","lastModifiedDate":"2021-10-29"},{"lineNumber":20,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":21,"author":{"gitId":"praj-bellakka"},"content":"    \":MealPlanDatabase\" -\u003e \"\u003c\u003cClass\u003e\u003e\\nParser\": parseFoodType()","lastModifiedDate":"2021-11-06"},{"lineNumber":22,"author":{"gitId":"praj-bellakka"},"content":"    activate \"\u003c\u003cClass\u003e\u003e\\nParser\"","lastModifiedDate":"2021-11-06"},{"lineNumber":23,"author":{"gitId":"praj-bellakka"},"content":"    return type","lastModifiedDate":"2021-11-06"},{"lineNumber":24,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":25,"author":{"gitId":"praj-bellakka"},"content":"    create \":Food\"","lastModifiedDate":"2021-10-29"},{"lineNumber":26,"author":{"gitId":"praj-bellakka"},"content":"    \":MealPlanDatabase\" -\u003e \":Food\": new Food(name, calories, type)","lastModifiedDate":"2021-10-29"},{"lineNumber":27,"author":{"gitId":"praj-bellakka"},"content":"    activate \":Food\"","lastModifiedDate":"2021-10-29"},{"lineNumber":28,"author":{"gitId":"praj-bellakka"},"content":"    return food","lastModifiedDate":"2021-11-06"},{"lineNumber":29,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":30,"author":{"gitId":"praj-bellakka"},"content":"    \":MealPlanDatabase\" -\u003e \":MealPlanDatabase\": addFood(name, calories, type)","lastModifiedDate":"2021-11-06"},{"lineNumber":31,"author":{"gitId":"praj-bellakka"},"content":"    note right: Food is added into a temporary\\narrayList until decoder is detected","lastModifiedDate":"2021-11-06"},{"lineNumber":32,"author":{"gitId":"praj-bellakka"},"content":"    activate \":MealPlanDatabase\"","lastModifiedDate":"2021-10-29"},{"lineNumber":33,"author":{"gitId":"praj-bellakka"},"content":"    return","lastModifiedDate":"2021-10-29"},{"lineNumber":34,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":35,"author":{"gitId":"praj-bellakka"},"content":"end","lastModifiedDate":"2021-10-29"},{"lineNumber":36,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":37,"author":{"gitId":"praj-bellakka"},"content":"return","lastModifiedDate":"2021-10-29"},{"lineNumber":38,"author":{"gitId":"praj-bellakka"},"content":"@enduml","lastModifiedDate":"2021-10-29"}],"authorContributionMap":{"praj-bellakka":38}},{"path":"docs/diagrams-DG/Parser_parseAddFoodCommand_Seq.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"praj-bellakka"},"content":"@startuml","lastModifiedDate":"2021-11-07"},{"lineNumber":2,"author":{"gitId":"praj-bellakka"},"content":"\u0027https://plantuml.com/sequence-diagram","lastModifiedDate":"2021-11-07"},{"lineNumber":3,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":4,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":5,"author":{"gitId":"praj-bellakka"},"content":"-\u003e \":Parser\": parseAddFoodCommand(input, mealTypeString)","lastModifiedDate":"2021-11-07"},{"lineNumber":6,"author":{"gitId":"praj-bellakka"},"content":"activate \":Parser\"","lastModifiedDate":"2021-11-07"},{"lineNumber":7,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":8,"author":{"gitId":"praj-bellakka"},"content":"create \"\u003c\u003cenumeration\u003e\u003e\\n:MealType\"","lastModifiedDate":"2021-11-07"},{"lineNumber":9,"author":{"gitId":"praj-bellakka"},"content":"\":Parser\" -\u003e \"\u003c\u003cenumeration\u003e\u003e\\n:MealType\": parseMealType(mealTypeString)","lastModifiedDate":"2021-11-07"},{"lineNumber":10,"author":{"gitId":"praj-bellakka"},"content":"activate \"\u003c\u003cenumeration\u003e\u003e\\n:MealType\"","lastModifiedDate":"2021-11-07"},{"lineNumber":11,"author":{"gitId":"praj-bellakka"},"content":"return mealType","lastModifiedDate":"2021-11-07"},{"lineNumber":12,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":13,"author":{"gitId":"praj-bellakka"},"content":"create \":FoodDatabase\"","lastModifiedDate":"2021-11-07"},{"lineNumber":14,"author":{"gitId":"praj-bellakka"},"content":"\":Parser\" -\u003e \":FoodDatabase\": findFoods(foodName)","lastModifiedDate":"2021-11-07"},{"lineNumber":15,"author":{"gitId":"praj-bellakka"},"content":"activate \":FoodDatabase\"","lastModifiedDate":"2021-11-07"},{"lineNumber":16,"author":{"gitId":"praj-bellakka"},"content":"return tempDbFoods:ArrayList\u003cFood\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":17,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":18,"author":{"gitId":"praj-bellakka"},"content":"alt If size of tempDbFoods is \u003e 0","lastModifiedDate":"2021-11-07"},{"lineNumber":19,"author":{"gitId":"praj-bellakka"},"content":"    \":Parser\" -\u003e \":Parser\": returnUserInput(mealType, foodName, tempDbFoods, newUi, true)","lastModifiedDate":"2021-11-07"},{"lineNumber":20,"author":{"gitId":"praj-bellakka"},"content":"    note right: User is prompted to pick food from database.\\nMethod to prompt user to enter calorie/meal\\ndetails is then called","lastModifiedDate":"2021-11-07"},{"lineNumber":21,"author":{"gitId":"praj-bellakka"},"content":"    activate \":Parser\"","lastModifiedDate":"2021-11-07"},{"lineNumber":22,"author":{"gitId":"praj-bellakka"},"content":"    return AddFoodEntryCommand","lastModifiedDate":"2021-11-07"},{"lineNumber":23,"author":{"gitId":"praj-bellakka"},"content":"else size of tempDbFoods \u003d 0","lastModifiedDate":"2021-11-07"},{"lineNumber":24,"author":{"gitId":"praj-bellakka"},"content":"    \":Parser\" -\u003e \":Parser\": returnUserInput(mealType, foodName, tempDbFoods, newUi, false)","lastModifiedDate":"2021-11-07"},{"lineNumber":25,"author":{"gitId":"praj-bellakka"},"content":"    note right: Method to prompt user to enter calorie/meal\\ndetails is called here","lastModifiedDate":"2021-11-07"},{"lineNumber":26,"author":{"gitId":"praj-bellakka"},"content":"    activate \":Parser\"","lastModifiedDate":"2021-11-07"},{"lineNumber":27,"author":{"gitId":"praj-bellakka"},"content":"    return AddFoodEntryCommand","lastModifiedDate":"2021-11-07"},{"lineNumber":28,"author":{"gitId":"praj-bellakka"},"content":"end","lastModifiedDate":"2021-11-07"},{"lineNumber":29,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":30,"author":{"gitId":"praj-bellakka"},"content":"return AddFoodEntryCommand","lastModifiedDate":"2021-11-07"},{"lineNumber":31,"author":{"gitId":"praj-bellakka"},"content":"@enduml","lastModifiedDate":"2021-11-07"}],"authorContributionMap":{"praj-bellakka":31}},{"path":"docs/diagrams-DG/Parser_parseCreateCommand_Seq.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"praj-bellakka"},"content":"@startuml","lastModifiedDate":"2021-11-07"},{"lineNumber":2,"author":{"gitId":"praj-bellakka"},"content":"\u0027https://plantuml.com/sequence-diagram","lastModifiedDate":"2021-11-07"},{"lineNumber":3,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":4,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":5,"author":{"gitId":"praj-bellakka"},"content":"-\u003e \":Parser\": parseCreateCommand(input, fd)","lastModifiedDate":"2021-11-07"},{"lineNumber":6,"author":{"gitId":"praj-bellakka"},"content":"activate \":Parser\"","lastModifiedDate":"2021-11-07"},{"lineNumber":7,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":8,"author":{"gitId":"praj-bellakka"},"content":"create \":Ui\"","lastModifiedDate":"2021-11-07"},{"lineNumber":9,"author":{"gitId":"praj-bellakka"},"content":"\":Parser\" -\u003e \":Ui\": readIndexesInput()","lastModifiedDate":"2021-11-07"},{"lineNumber":10,"author":{"gitId":"praj-bellakka"},"content":"activate \":Ui\"","lastModifiedDate":"2021-11-07"},{"lineNumber":11,"author":{"gitId":"praj-bellakka"},"content":"return user inputs","lastModifiedDate":"2021-11-07"},{"lineNumber":12,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":13,"author":{"gitId":"praj-bellakka"},"content":"loop for each input","lastModifiedDate":"2021-11-07"},{"lineNumber":14,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":15,"author":{"gitId":"praj-bellakka"},"content":"    alt If input is valid","lastModifiedDate":"2021-11-07"},{"lineNumber":16,"author":{"gitId":"praj-bellakka"},"content":"        \":Parser\" -\u003e \":FoodDatabase\": getFoodDatabase()","lastModifiedDate":"2021-11-07"},{"lineNumber":17,"author":{"gitId":"praj-bellakka"},"content":"        activate \":FoodDatabase\"","lastModifiedDate":"2021-11-07"},{"lineNumber":18,"author":{"gitId":"praj-bellakka"},"content":"        return ArrayList\u003cFood\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":19,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":20,"author":{"gitId":"praj-bellakka"},"content":"        \":Parser\" -\u003e \":Parser\": get(input)","lastModifiedDate":"2021-11-07"},{"lineNumber":21,"author":{"gitId":"praj-bellakka"},"content":"        activate \":Parser\"","lastModifiedDate":"2021-11-07"},{"lineNumber":22,"author":{"gitId":"praj-bellakka"},"content":"        return Food","lastModifiedDate":"2021-11-07"},{"lineNumber":23,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":24,"author":{"gitId":"praj-bellakka"},"content":"        \":Parser\" -\u003e \":Parser\": add(food)","lastModifiedDate":"2021-11-07"},{"lineNumber":25,"author":{"gitId":"praj-bellakka"},"content":"        note right: Food is added to a temporary ArrayList of Food items","lastModifiedDate":"2021-11-07"},{"lineNumber":26,"author":{"gitId":"praj-bellakka"},"content":"        activate \":Parser\"","lastModifiedDate":"2021-11-07"},{"lineNumber":27,"author":{"gitId":"praj-bellakka"},"content":"        return AddFoodEntryCommand","lastModifiedDate":"2021-11-07"},{"lineNumber":28,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":29,"author":{"gitId":"praj-bellakka"},"content":"    end","lastModifiedDate":"2021-11-07"},{"lineNumber":30,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":31,"author":{"gitId":"praj-bellakka"},"content":"end","lastModifiedDate":"2021-11-07"},{"lineNumber":32,"author":{"gitId":"praj-bellakka"},"content":"return CreateMealPlanCommand","lastModifiedDate":"2021-11-07"},{"lineNumber":33,"author":{"gitId":"praj-bellakka"},"content":"@enduml","lastModifiedDate":"2021-11-07"}],"authorContributionMap":{"praj-bellakka":33}},{"path":"docs/diagrams-DG/Parser_promptUserCalories_Seq.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"praj-bellakka"},"content":"@startuml","lastModifiedDate":"2021-11-07"},{"lineNumber":2,"author":{"gitId":"praj-bellakka"},"content":"\u0027https://plantuml.com/sequence-diagram","lastModifiedDate":"2021-11-07"},{"lineNumber":3,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":4,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":5,"author":{"gitId":"praj-bellakka"},"content":"-\u003e \":Parser\": promptUserCalories(index, mealType, foodName, ui)","lastModifiedDate":"2021-11-07"},{"lineNumber":6,"author":{"gitId":"praj-bellakka"},"content":"activate \":Parser\"","lastModifiedDate":"2021-11-07"},{"lineNumber":7,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":8,"author":{"gitId":"praj-bellakka"},"content":"create \":Ui\"","lastModifiedDate":"2021-11-07"},{"lineNumber":9,"author":{"gitId":"praj-bellakka"},"content":"\":Parser\" -\u003e \":Ui\": printAddCalorieToFood(foodName)","lastModifiedDate":"2021-11-07"},{"lineNumber":10,"author":{"gitId":"praj-bellakka"},"content":"activate \":Ui\"","lastModifiedDate":"2021-11-07"},{"lineNumber":11,"author":{"gitId":"praj-bellakka"},"content":"return","lastModifiedDate":"2021-11-07"},{"lineNumber":12,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":13,"author":{"gitId":"praj-bellakka"},"content":"alt If input is invalid or first prompt","lastModifiedDate":"2021-11-07"},{"lineNumber":14,"author":{"gitId":"praj-bellakka"},"content":"    loop while input is invalid","lastModifiedDate":"2021-11-07"},{"lineNumber":15,"author":{"gitId":"praj-bellakka"},"content":"        \":Parser\" -\u003e \":Parser\": parseInteger()","lastModifiedDate":"2021-11-07"},{"lineNumber":16,"author":{"gitId":"praj-bellakka"},"content":"        activate \":Parser\"","lastModifiedDate":"2021-11-07"},{"lineNumber":17,"author":{"gitId":"praj-bellakka"},"content":"            \":Parser\" -\u003e \":Ui\": readInput()","lastModifiedDate":"2021-11-07"},{"lineNumber":18,"author":{"gitId":"praj-bellakka"},"content":"            activate \":Ui\"","lastModifiedDate":"2021-11-07"},{"lineNumber":19,"author":{"gitId":"praj-bellakka"},"content":"            return user input calories","lastModifiedDate":"2021-11-07"},{"lineNumber":20,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":21,"author":{"gitId":"praj-bellakka"},"content":"        return userInput","lastModifiedDate":"2021-11-07"},{"lineNumber":22,"author":{"gitId":"praj-bellakka"},"content":"    end","lastModifiedDate":"2021-11-07"},{"lineNumber":23,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":24,"author":{"gitId":"praj-bellakka"},"content":"end","lastModifiedDate":"2021-11-07"},{"lineNumber":25,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":26,"author":{"gitId":"praj-bellakka"},"content":"alt If foodType input is invalid or first prompt","lastModifiedDate":"2021-11-07"},{"lineNumber":27,"author":{"gitId":"praj-bellakka"},"content":"    loop while foodType input is invalid","lastModifiedDate":"2021-11-07"},{"lineNumber":28,"author":{"gitId":"praj-bellakka"},"content":"            \":Parser\" -\u003e \":Ui\": readInput()","lastModifiedDate":"2021-11-07"},{"lineNumber":29,"author":{"gitId":"praj-bellakka"},"content":"            activate \":Ui\"","lastModifiedDate":"2021-11-07"},{"lineNumber":30,"author":{"gitId":"praj-bellakka"},"content":"            return foodType","lastModifiedDate":"2021-11-07"},{"lineNumber":31,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":32,"author":{"gitId":"praj-bellakka"},"content":"      alt If foodType matches built-in types","lastModifiedDate":"2021-11-07"},{"lineNumber":33,"author":{"gitId":"praj-bellakka"},"content":"            \":Parser\" -\u003e \":Food\": parseFoodType()","lastModifiedDate":"2021-11-07"},{"lineNumber":34,"author":{"gitId":"praj-bellakka"},"content":"            activate \":Food\"","lastModifiedDate":"2021-11-07"},{"lineNumber":35,"author":{"gitId":"praj-bellakka"},"content":"            return FoodType","lastModifiedDate":"2021-11-07"},{"lineNumber":36,"author":{"gitId":"praj-bellakka"},"content":"        end","lastModifiedDate":"2021-11-07"},{"lineNumber":37,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":38,"author":{"gitId":"praj-bellakka"},"content":"    end","lastModifiedDate":"2021-11-07"},{"lineNumber":39,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":40,"author":{"gitId":"praj-bellakka"},"content":"end","lastModifiedDate":"2021-11-07"},{"lineNumber":41,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":42,"author":{"gitId":"praj-bellakka"},"content":"return AddFoodEntryCommand","lastModifiedDate":"2021-11-07"},{"lineNumber":43,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":44,"author":{"gitId":"praj-bellakka"},"content":"@enduml","lastModifiedDate":"2021-11-07"}],"authorContributionMap":{"praj-bellakka":44}},{"path":"docs/diagrams-DG/Storage_class.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"brendanlsz"},"content":"@startuml","lastModifiedDate":"2021-11-07"},{"lineNumber":2,"author":{"gitId":"brendanlsz"},"content":"\u0027https://plantuml.com/class-diagram","lastModifiedDate":"2021-11-07"},{"lineNumber":3,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":4,"author":{"gitId":"brendanlsz"},"content":"hide circle","lastModifiedDate":"2021-11-07"},{"lineNumber":5,"author":{"gitId":"brendanlsz"},"content":"skinparam classAttributeIconSize 0","lastModifiedDate":"2021-11-07"},{"lineNumber":6,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":7,"author":{"gitId":"brendanlsz"},"content":"class Storage {","lastModifiedDate":"2021-11-07"},{"lineNumber":8,"author":{"gitId":"brendanlsz"},"content":"-ROOT: String","lastModifiedDate":"2021-11-07"},{"lineNumber":9,"author":{"gitId":"brendanlsz"},"content":"-DIRECTORY_PATH: Path","lastModifiedDate":"2021-11-07"},{"lineNumber":10,"author":{"gitId":"brendanlsz"},"content":"-FILE_PATH_FOOD_DATA: Path","lastModifiedDate":"2021-11-07"},{"lineNumber":11,"author":{"gitId":"brendanlsz"},"content":"-FILE_PATH_USER_DATA: Path","lastModifiedDate":"2021-11-07"},{"lineNumber":12,"author":{"gitId":"brendanlsz"},"content":"-FILE_PATH_ENTRY_DATA: Path","lastModifiedDate":"2021-11-07"},{"lineNumber":13,"author":{"gitId":"brendanlsz"},"content":"-FILE_PATH_WEIGHT_DATA: Path","lastModifiedDate":"2021-11-07"},{"lineNumber":14,"author":{"gitId":"brendanlsz"},"content":"-FILE_PATH_MEALPLAN_DATA: Path","lastModifiedDate":"2021-11-07"},{"lineNumber":15,"author":{"gitId":"brendanlsz"},"content":"-createDirectory(String): void","lastModifiedDate":"2021-11-07"},{"lineNumber":16,"author":{"gitId":"brendanlsz"},"content":"+createDirectoryAndFiles(): void","lastModifiedDate":"2021-11-07"},{"lineNumber":17,"author":{"gitId":"brendanlsz"},"content":"-createFile(String): void","lastModifiedDate":"2021-11-07"},{"lineNumber":18,"author":{"gitId":"brendanlsz"},"content":"+initialiseEntryDatabase(EntryDatabase): void","lastModifiedDate":"2021-11-07"},{"lineNumber":19,"author":{"gitId":"brendanlsz"},"content":"+initialiseFoodDatabase(FoodDatabase): void","lastModifiedDate":"2021-11-07"},{"lineNumber":20,"author":{"gitId":"brendanlsz"},"content":"+initialiseMealPlanDatabase(MealPlanDatabase): void","lastModifiedDate":"2021-11-07"},{"lineNumber":21,"author":{"gitId":"brendanlsz"},"content":"+initialiseUser(User): int","lastModifiedDate":"2021-11-07"},{"lineNumber":22,"author":{"gitId":"brendanlsz"},"content":"+initialiseWeightProgress(User): void","lastModifiedDate":"2021-11-07"},{"lineNumber":23,"author":{"gitId":"brendanlsz"},"content":"-saveData(String, String): void","lastModifiedDate":"2021-11-07"},{"lineNumber":24,"author":{"gitId":"brendanlsz"},"content":"+saveEntryDatabase(EntryDatabase): void","lastModifiedDate":"2021-11-07"},{"lineNumber":25,"author":{"gitId":"brendanlsz"},"content":"+saveFoodDatabase(FoodDatabase): void","lastModifiedDate":"2021-11-07"},{"lineNumber":26,"author":{"gitId":"brendanlsz"},"content":"+saveMealPlanDatabase(MealPlanDatabase): void","lastModifiedDate":"2021-11-07"},{"lineNumber":27,"author":{"gitId":"brendanlsz"},"content":"+saveUserData(User): void","lastModifiedDate":"2021-11-07"},{"lineNumber":28,"author":{"gitId":"brendanlsz"},"content":"+saveWeightData(User): void","lastModifiedDate":"2021-11-07"},{"lineNumber":29,"author":{"gitId":"brendanlsz"},"content":"}","lastModifiedDate":"2021-11-07"},{"lineNumber":30,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":31,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":32,"author":{"gitId":"brendanlsz"},"content":"@enduml","lastModifiedDate":"2021-11-07"}],"authorContributionMap":{"brendanlsz":32}},{"path":"docs/diagrams-DG/Storage_sequence_initialise.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"brendanlsz"},"content":"@startuml","lastModifiedDate":"2021-11-06"},{"lineNumber":2,"author":{"gitId":"brendanlsz"},"content":"\u0027https://plantuml.com/sequence-diagram","lastModifiedDate":"2021-11-06"},{"lineNumber":3,"author":{"gitId":"brendanlsz"},"content":"activate \":FitNUS\"","lastModifiedDate":"2021-11-06"},{"lineNumber":4,"author":{"gitId":"brendanlsz"},"content":"\":FitNUS\" -\u003e \"\u003c\u003cclass\u003e\u003e\\n Storage\": initialiseFoodDatabase()","lastModifiedDate":"2021-11-06"},{"lineNumber":5,"author":{"gitId":"brendanlsz"},"content":"activate \"\u003c\u003cclass\u003e\u003e\\n Storage\"","lastModifiedDate":"2021-11-06"},{"lineNumber":6,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":7,"author":{"gitId":"brendanlsz"},"content":"\"\u003c\u003cclass\u003e\u003e\\n Storage\" -\u003e \":FoodDatabase\": preloadDatabase()","lastModifiedDate":"2021-11-06"},{"lineNumber":8,"author":{"gitId":"brendanlsz"},"content":"activate \":FoodDatabase\"","lastModifiedDate":"2021-11-06"},{"lineNumber":9,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":10,"author":{"gitId":"brendanlsz"},"content":"loop While there are still unread lines","lastModifiedDate":"2021-11-06"},{"lineNumber":11,"author":{"gitId":"brendanlsz"},"content":"    \":FoodDatabase\" -\u003e \":FoodDatabase\": loadFood()","lastModifiedDate":"2021-11-06"},{"lineNumber":12,"author":{"gitId":"brendanlsz"},"content":"    activate \":FoodDatabase\"","lastModifiedDate":"2021-11-06"},{"lineNumber":13,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":14,"author":{"gitId":"brendanlsz"},"content":"    \":FoodDatabase\" -\u003e \"\u003c\u003cClass\u003e\u003e\\nParser\": parseFoodType()","lastModifiedDate":"2021-11-06"},{"lineNumber":15,"author":{"gitId":"brendanlsz"},"content":"    activate \"\u003c\u003cClass\u003e\u003e\\nParser\"","lastModifiedDate":"2021-11-06"},{"lineNumber":16,"author":{"gitId":"brendanlsz"},"content":"    return type","lastModifiedDate":"2021-11-06"},{"lineNumber":17,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":18,"author":{"gitId":"brendanlsz"},"content":"    \":FoodDatabase\" -\u003e \":FoodDatabase\": addFood(name, calories, type)","lastModifiedDate":"2021-11-06"},{"lineNumber":19,"author":{"gitId":"brendanlsz"},"content":"    activate \":FoodDatabase\"","lastModifiedDate":"2021-11-06"},{"lineNumber":20,"author":{"gitId":"brendanlsz"},"content":"    return","lastModifiedDate":"2021-11-06"},{"lineNumber":21,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":22,"author":{"gitId":"brendanlsz"},"content":"    return","lastModifiedDate":"2021-11-06"},{"lineNumber":23,"author":{"gitId":"brendanlsz"},"content":"end","lastModifiedDate":"2021-11-06"},{"lineNumber":24,"author":{"gitId":"brendanlsz"},"content":"return","lastModifiedDate":"2021-11-06"},{"lineNumber":25,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":26,"author":{"gitId":"brendanlsz"},"content":"return","lastModifiedDate":"2021-11-06"},{"lineNumber":27,"author":{"gitId":"brendanlsz"},"content":"@enduml","lastModifiedDate":"2021-11-06"}],"authorContributionMap":{"brendanlsz":27}},{"path":"docs/diagrams-DG/Storage_sequence_save.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"brendanlsz"},"content":"@startuml","lastModifiedDate":"2021-10-25"},{"lineNumber":2,"author":{"gitId":"brendanlsz"},"content":"\u0027https://plantuml.com/sequence-diagram","lastModifiedDate":"2021-10-25"},{"lineNumber":3,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":4,"author":{"gitId":"brendanlsz"},"content":"activate \":FitNUS\"","lastModifiedDate":"2021-10-25"},{"lineNumber":5,"author":{"gitId":"brendanlsz"},"content":"\":FitNUS\" -\u003e \"\u003c\u003cclass\u003e\u003e\\n Storage\": saveFoodDatabase(foodDatabase)","lastModifiedDate":"2021-10-26"},{"lineNumber":6,"author":{"gitId":"brendanlsz"},"content":"activate \"\u003c\u003cclass\u003e\u003e\\n Storage\"","lastModifiedDate":"2021-10-25"},{"lineNumber":7,"author":{"gitId":"brendanlsz"},"content":"\"\u003c\u003cclass\u003e\u003e\\n Storage\" -\u003e \":FoodDatabase\" : convertDatabaseToString()","lastModifiedDate":"2021-10-26"},{"lineNumber":8,"author":{"gitId":"brendanlsz"},"content":"activate \":FoodDatabase\"","lastModifiedDate":"2021-10-25"},{"lineNumber":9,"author":{"gitId":"brendanlsz"},"content":"loop for all food objects","lastModifiedDate":"2021-10-25"},{"lineNumber":10,"author":{"gitId":"brendanlsz"},"content":"    \":FoodDatabase\" -\u003e \":Food\": convertToStringForStorage()","lastModifiedDate":"2021-11-03"},{"lineNumber":11,"author":{"gitId":"brendanlsz"},"content":"    activate \":Food\"","lastModifiedDate":"2021-11-03"},{"lineNumber":12,"author":{"gitId":"brendanlsz"},"content":"    \":Food\" -\u003e \":Food\": getName()","lastModifiedDate":"2021-11-03"},{"lineNumber":13,"author":{"gitId":"brendanlsz"},"content":"    activate \":Food\"","lastModifiedDate":"2021-10-25"},{"lineNumber":14,"author":{"gitId":"brendanlsz"},"content":"    return name","lastModifiedDate":"2021-10-25"},{"lineNumber":15,"author":{"gitId":"brendanlsz"},"content":"    \":Food\" -\u003e \":Food\": getCalories()","lastModifiedDate":"2021-11-03"},{"lineNumber":16,"author":{"gitId":"brendanlsz"},"content":"    activate \":Food\"","lastModifiedDate":"2021-10-25"},{"lineNumber":17,"author":{"gitId":"brendanlsz"},"content":"    return calories","lastModifiedDate":"2021-10-25"},{"lineNumber":18,"author":{"gitId":"brendanlsz"},"content":"    \":Food\" -\u003e \":Food\": getType()","lastModifiedDate":"2021-11-03"},{"lineNumber":19,"author":{"gitId":"brendanlsz"},"content":"    activate \":Food\"","lastModifiedDate":"2021-10-25"},{"lineNumber":20,"author":{"gitId":"brendanlsz"},"content":"    return type","lastModifiedDate":"2021-10-25"},{"lineNumber":21,"author":{"gitId":"brendanlsz"},"content":"    return Food object as String","lastModifiedDate":"2021-11-03"},{"lineNumber":22,"author":{"gitId":"brendanlsz"},"content":"end","lastModifiedDate":"2021-10-25"},{"lineNumber":23,"author":{"gitId":"brendanlsz"},"content":"return content as String","lastModifiedDate":"2021-10-26"},{"lineNumber":24,"author":{"gitId":"brendanlsz"},"content":"\"\u003c\u003cclass\u003e\u003e\\n Storage\" -\u003e \"\u003c\u003cclass\u003e\u003e\\n Storage\" : saveData(filePath, content)","lastModifiedDate":"2021-10-26"},{"lineNumber":25,"author":{"gitId":"brendanlsz"},"content":"activate \"\u003c\u003cclass\u003e\u003e\\n Storage\"","lastModifiedDate":"2021-10-25"},{"lineNumber":26,"author":{"gitId":"brendanlsz"},"content":"return","lastModifiedDate":"2021-10-25"},{"lineNumber":27,"author":{"gitId":"brendanlsz"},"content":"return","lastModifiedDate":"2021-10-25"},{"lineNumber":28,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":29,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":30,"author":{"gitId":"brendanlsz"},"content":"@enduml","lastModifiedDate":"2021-10-25"}],"authorContributionMap":{"brendanlsz":30}},{"path":"docs/diagrams-DG/SuggestCommandSequence.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"brendanlsz"},"content":"@startuml","lastModifiedDate":"2021-10-26"},{"lineNumber":2,"author":{"gitId":"brendanlsz"},"content":"\u0027https://plantuml.com/class-diagram","lastModifiedDate":"2021-10-26"},{"lineNumber":3,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":4,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":5,"author":{"gitId":"brendanlsz"},"content":"-\u003e \":ViewSuggestionsCommand\": execute()","lastModifiedDate":"2021-10-26"},{"lineNumber":6,"author":{"gitId":"brendanlsz"},"content":"activate \":ViewSuggestionsCommand\"","lastModifiedDate":"2021-10-26"},{"lineNumber":7,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":8,"author":{"gitId":"brendanlsz"},"content":"\":ViewSuggestionsCommand\" -\u003e \":User\" : getCalorieGoal()","lastModifiedDate":"2021-10-26"},{"lineNumber":9,"author":{"gitId":"brendanlsz"},"content":"activate \":User\"","lastModifiedDate":"2021-10-26"},{"lineNumber":10,"author":{"gitId":"brendanlsz"},"content":"return calorieGoal","lastModifiedDate":"2021-10-26"},{"lineNumber":11,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":12,"author":{"gitId":"brendanlsz"},"content":"\":ViewSuggestionsCommand\" -\u003e \":EntryDatabase\" : getTotalDailyCalorie()","lastModifiedDate":"2021-10-26"},{"lineNumber":13,"author":{"gitId":"brendanlsz"},"content":"activate \":EntryDatabase\"","lastModifiedDate":"2021-10-26"},{"lineNumber":14,"author":{"gitId":"brendanlsz"},"content":"return caloriesConsumed","lastModifiedDate":"2021-10-26"},{"lineNumber":15,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":16,"author":{"gitId":"brendanlsz"},"content":"\":ViewSuggestionsCommand\" -\u003e \":FoodDatabase\" : findSuggestions(type, remaining, isSort)","lastModifiedDate":"2021-10-26"},{"lineNumber":17,"author":{"gitId":"brendanlsz"},"content":"note right","lastModifiedDate":"2021-10-26"},{"lineNumber":18,"author":{"gitId":"brendanlsz"},"content":"remaining \u003d calorieGoal - caloriesConsumed","lastModifiedDate":"2021-10-26"},{"lineNumber":19,"author":{"gitId":"brendanlsz"},"content":"end note","lastModifiedDate":"2021-10-26"},{"lineNumber":20,"author":{"gitId":"brendanlsz"},"content":"activate \":FoodDatabase\"","lastModifiedDate":"2021-10-26"},{"lineNumber":21,"author":{"gitId":"brendanlsz"},"content":"return suggestions","lastModifiedDate":"2021-10-26"},{"lineNumber":22,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":23,"author":{"gitId":"brendanlsz"},"content":"\":ViewSuggestionsCommand\" -\u003e \"\u003c\u003cClass\u003e\u003e\\nUi\" : printMatchingSuggestions(suggestions)","lastModifiedDate":"2021-10-26"},{"lineNumber":24,"author":{"gitId":"brendanlsz"},"content":"activate \"\u003c\u003cClass\u003e\u003e\\nUi\"","lastModifiedDate":"2021-10-26"},{"lineNumber":25,"author":{"gitId":"brendanlsz"},"content":"return","lastModifiedDate":"2021-10-26"},{"lineNumber":26,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":27,"author":{"gitId":"brendanlsz"},"content":"return","lastModifiedDate":"2021-10-26"},{"lineNumber":28,"author":{"gitId":"brendanlsz"},"content":"@enduml","lastModifiedDate":"2021-10-26"}],"authorContributionMap":{"brendanlsz":28}},{"path":"docs/overallClassDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"kengjit"},"content":"@startuml","lastModifiedDate":"2021-10-20"},{"lineNumber":2,"author":{"gitId":"kengjit"},"content":"\u0027https://plantuml.com/class-diagram","lastModifiedDate":"2021-10-20"},{"lineNumber":3,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":4,"author":{"gitId":"kengjit"},"content":"class FitNus {","lastModifiedDate":"2021-10-20"},{"lineNumber":5,"author":{"gitId":"kengjit"},"content":"+main(String[])","lastModifiedDate":"2021-10-20"},{"lineNumber":6,"author":{"gitId":"kengjit"},"content":"}","lastModifiedDate":"2021-10-20"},{"lineNumber":7,"author":{"gitId":"kengjit"},"content":"class User {","lastModifiedDate":"2021-10-20"},{"lineNumber":8,"author":{"gitId":"kengjit"},"content":"-calorieGoal:int","lastModifiedDate":"2021-10-20"},{"lineNumber":9,"author":{"gitId":"kengjit"},"content":"-gender:int","lastModifiedDate":"2021-10-20"},{"lineNumber":10,"author":{"gitId":"kengjit"},"content":"+getCalorieGoal()","lastModifiedDate":"2021-10-20"},{"lineNumber":11,"author":{"gitId":"kengjit"},"content":"+setCalorieGoal(int)","lastModifiedDate":"2021-10-20"},{"lineNumber":12,"author":{"gitId":"kengjit"},"content":"+getGender()","lastModifiedDate":"2021-10-20"},{"lineNumber":13,"author":{"gitId":"kengjit"},"content":"+setGender(int)","lastModifiedDate":"2021-10-20"},{"lineNumber":14,"author":{"gitId":"kengjit"},"content":"+showCaloriesRemaining(EntryDatabase)","lastModifiedDate":"2021-10-20"},{"lineNumber":15,"author":{"gitId":"kengjit"},"content":"+preloadUserData(BufferedReader)","lastModifiedDate":"2021-10-20"},{"lineNumber":16,"author":{"gitId":"kengjit"},"content":"+listUserData()","lastModifiedDate":"2021-10-20"},{"lineNumber":17,"author":{"gitId":"kengjit"},"content":"+convertUserDataToString()","lastModifiedDate":"2021-10-20"},{"lineNumber":18,"author":{"gitId":"kengjit"},"content":"}","lastModifiedDate":"2021-10-20"},{"lineNumber":19,"author":{"gitId":"kengjit"},"content":"class Ui {","lastModifiedDate":"2021-10-20"},{"lineNumber":20,"author":{"gitId":"kengjit"},"content":"+printWelcomeMessage()","lastModifiedDate":"2021-10-20"},{"lineNumber":21,"author":{"gitId":"kengjit"},"content":"+println(String)","lastModifiedDate":"2021-10-20"},{"lineNumber":22,"author":{"gitId":"kengjit"},"content":"+print(String)","lastModifiedDate":"2021-10-20"},{"lineNumber":23,"author":{"gitId":"kengjit"},"content":"+printPreloadDatabaseError()","lastModifiedDate":"2021-10-20"},{"lineNumber":24,"author":{"gitId":"kengjit"},"content":"+printPreloadUserError()","lastModifiedDate":"2021-10-20"},{"lineNumber":25,"author":{"gitId":"kengjit"},"content":"+readInput()","lastModifiedDate":"2021-10-20"},{"lineNumber":26,"author":{"gitId":"kengjit"},"content":"+printNoMatchingResults()","lastModifiedDate":"2021-10-20"},{"lineNumber":27,"author":{"gitId":"kengjit"},"content":"+printMatchingFoods(ArrayList\u003cFood\u003e)","lastModifiedDate":"2021-10-20"},{"lineNumber":28,"author":{"gitId":"kengjit"},"content":"+printMatchingEntries(ArrayList\u003cEntry\u003e)","lastModifiedDate":"2021-10-20"},{"lineNumber":29,"author":{"gitId":"kengjit"},"content":"}","lastModifiedDate":"2021-10-20"},{"lineNumber":30,"author":{"gitId":"kengjit"},"content":"class Storage {","lastModifiedDate":"2021-10-20"},{"lineNumber":31,"author":{"gitId":"kengjit"},"content":"+createDirectoryAndFiles()","lastModifiedDate":"2021-10-20"},{"lineNumber":32,"author":{"gitId":"kengjit"},"content":"+initialiseFoodDatabase(FoodDatabase)","lastModifiedDate":"2021-10-20"},{"lineNumber":33,"author":{"gitId":"kengjit"},"content":"+initialiseEntryDatabase(EntryDatabase)","lastModifiedDate":"2021-10-20"},{"lineNumber":34,"author":{"gitId":"kengjit"},"content":"+initialiseUser(User)","lastModifiedDate":"2021-10-20"},{"lineNumber":35,"author":{"gitId":"kengjit"},"content":"+saveFoodDatabase(FoodDatabase)","lastModifiedDate":"2021-10-20"},{"lineNumber":36,"author":{"gitId":"kengjit"},"content":"+saveEntryDatabase(EntryDatabase)","lastModifiedDate":"2021-10-20"},{"lineNumber":37,"author":{"gitId":"kengjit"},"content":"+saveUserData(User)","lastModifiedDate":"2021-10-20"},{"lineNumber":38,"author":{"gitId":"kengjit"},"content":"+saveData(String)","lastModifiedDate":"2021-10-20"},{"lineNumber":39,"author":{"gitId":"kengjit"},"content":"+createFile(String)","lastModifiedDate":"2021-10-20"},{"lineNumber":40,"author":{"gitId":"kengjit"},"content":"+createDirectory(String)","lastModifiedDate":"2021-10-20"},{"lineNumber":41,"author":{"gitId":"kengjit"},"content":"}","lastModifiedDate":"2021-10-20"},{"lineNumber":42,"author":{"gitId":"kengjit"},"content":"class Parser","lastModifiedDate":"2021-10-20"},{"lineNumber":43,"author":{"gitId":"kengjit"},"content":"class Entry","lastModifiedDate":"2021-10-20"},{"lineNumber":44,"author":{"gitId":"kengjit"},"content":"class Food","lastModifiedDate":"2021-10-20"},{"lineNumber":45,"author":{"gitId":"kengjit"},"content":"enum MealType {","lastModifiedDate":"2021-10-20"},{"lineNumber":46,"author":{"gitId":"kengjit"},"content":"BREAKFAST","lastModifiedDate":"2021-10-20"},{"lineNumber":47,"author":{"gitId":"kengjit"},"content":"LUNCH","lastModifiedDate":"2021-10-20"},{"lineNumber":48,"author":{"gitId":"kengjit"},"content":"DINNER","lastModifiedDate":"2021-10-20"},{"lineNumber":49,"author":{"gitId":"kengjit"},"content":"SNACK","lastModifiedDate":"2021-10-20"},{"lineNumber":50,"author":{"gitId":"kengjit"},"content":"}","lastModifiedDate":"2021-10-20"},{"lineNumber":51,"author":{"gitId":"kengjit"},"content":"class EntryDatabase","lastModifiedDate":"2021-10-20"},{"lineNumber":52,"author":{"gitId":"kengjit"},"content":"class FoodDatabase","lastModifiedDate":"2021-10-20"},{"lineNumber":53,"author":{"gitId":"kengjit"},"content":"abstract Command","lastModifiedDate":"2021-10-20"},{"lineNumber":54,"author":{"gitId":"kengjit"},"content":"class XYZCommand","lastModifiedDate":"2021-10-20"},{"lineNumber":55,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":56,"author":{"gitId":"kengjit"},"content":"@enduml","lastModifiedDate":"2021-10-20"}],"authorContributionMap":{"kengjit":56}},{"path":"docs/team/brendanlsz.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"brendanlsz"},"content":"# Brendan Lau Siew Zhi (brendanlsz) - Project Portfolio Page","lastModifiedDate":"2021-11-07"},{"lineNumber":2,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":3,"author":{"gitId":"brendanlsz"},"content":"## Product Overview","lastModifiedDate":"2021-11-05"},{"lineNumber":4,"author":{"gitId":"brendanlsz"},"content":"FitNUS Tracker is a desktop app for tracking daily food intake to help users keep a healthy lifestyle. ","lastModifiedDate":"2021-11-06"},{"lineNumber":5,"author":{"gitId":"brendanlsz"},"content":"FitNUS is specially made for Computing Students living in University Town, with features and ","lastModifiedDate":"2021-11-05"},{"lineNumber":6,"author":{"gitId":"brendanlsz"},"content":"functionalities taylor made for them. It is based on a Command Line Interface (CLI) and has ","lastModifiedDate":"2021-11-05"},{"lineNumber":7,"author":{"gitId":"brendanlsz"},"content":"rich functionality in order to cater to the needs of potential users.","lastModifiedDate":"2021-11-05"},{"lineNumber":8,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":9,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":10,"author":{"gitId":"brendanlsz"},"content":"## Summary of Contributions","lastModifiedDate":"2021-11-06"},{"lineNumber":11,"author":{"gitId":"brendanlsz"},"content":"Backend Software Engineer: Responsible for implementing various backend features including","lastModifiedDate":"2021-11-05"},{"lineNumber":12,"author":{"gitId":"brendanlsz"},"content":"`Storage`, `FoodDatabase`, and `EntryDatabase`.","lastModifiedDate":"2021-11-05"},{"lineNumber":13,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":14,"author":{"gitId":"brendanlsz"},"content":"### Code Contributed","lastModifiedDate":"2021-11-05"},{"lineNumber":15,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":16,"author":{"gitId":"brendanlsz"},"content":"[This is the RepoSense report of the code contributed.](https://nus-cs2113-ay2122s1.github.io/tp-dashboard/?search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dtrue\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026since\u003d2021-09-25\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dbrendanlsz\u0026tabRepo\u003dAY2122S1-CS2113T-W12-1%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs~functional-code~test-code~other\u0026authorshipIsBinaryFileTypeChecked\u003dfalse)","lastModifiedDate":"2021-11-05"},{"lineNumber":17,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":18,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":19,"author":{"gitId":"brendanlsz"},"content":"### Enhancements Implemented","lastModifiedDate":"2021-11-05"},{"lineNumber":20,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":21,"author":{"gitId":"brendanlsz"},"content":"Implemented the core functionalities of the following:","lastModifiedDate":"2021-11-05"},{"lineNumber":22,"author":{"gitId":"brendanlsz"},"content":"- `Storage`: I implemented the file storage functionality, which allows the FitNus application","lastModifiedDate":"2021-11-05"},{"lineNumber":23,"author":{"gitId":"brendanlsz"},"content":"to save the user\u0027s data to a text file. This enables FitNus to retain the user\u0027s progress and data","lastModifiedDate":"2021-11-05"},{"lineNumber":24,"author":{"gitId":"brendanlsz"},"content":"even after terminating the application. The `Storage` class is also designed such that it fails","lastModifiedDate":"2021-11-06"},{"lineNumber":25,"author":{"gitId":"brendanlsz"},"content":"gracefully in the event that the text files are corrupted. This is achieved by discarding corrupted ","lastModifiedDate":"2021-11-06"},{"lineNumber":26,"author":{"gitId":"brendanlsz"},"content":"data and providing messages to the user.","lastModifiedDate":"2021-11-06"},{"lineNumber":27,"author":{"gitId":"brendanlsz"},"content":"- `FoodDatabase`: At the beginning of the project, I implemented the core functionalities of the `FoodDatabase` ","lastModifiedDate":"2021-11-06"},{"lineNumber":28,"author":{"gitId":"brendanlsz"},"content":"class, used to keep a record of all the various types of `Food` objects. Over the course of the project, ","lastModifiedDate":"2021-11-06"},{"lineNumber":29,"author":{"gitId":"brendanlsz"},"content":"I also continuously added enhancements, including features that allow users to search `Food` objects ","lastModifiedDate":"2021-11-06"},{"lineNumber":30,"author":{"gitId":"brendanlsz"},"content":"as well as find `Food` suggestions.","lastModifiedDate":"2021-11-06"},{"lineNumber":31,"author":{"gitId":"brendanlsz"},"content":"- `EntryDatabase`: I co-implemented the basic features of the `EntryDatabase` class, used to handle ","lastModifiedDate":"2021-11-06"},{"lineNumber":32,"author":{"gitId":"brendanlsz"},"content":"all functionalities relating to the Entry objects.","lastModifiedDate":"2021-11-06"},{"lineNumber":33,"author":{"gitId":"brendanlsz"},"content":"- `ViewSuggestionsCommand`: In V2.0, I implemented the `ViewSuggestionsCommand`, which enables users","lastModifiedDate":"2021-11-06"},{"lineNumber":34,"author":{"gitId":"brendanlsz"},"content":"to find suggestions from their `FoodDatabase` on what to eat based on their calorie goal and ","lastModifiedDate":"2021-11-06"},{"lineNumber":35,"author":{"gitId":"brendanlsz"},"content":"the food type they specify.","lastModifiedDate":"2021-11-06"},{"lineNumber":36,"author":{"gitId":"brendanlsz"},"content":"- `FindFoodsCommand`: I implemented the `FindFoodsCommand` in V2.0 which allows users to search the","lastModifiedDate":"2021-11-06"},{"lineNumber":37,"author":{"gitId":"brendanlsz"},"content":"`FoodDatabase` using a keyword. This allows users to easily find matching `Food` objects in the database.","lastModifiedDate":"2021-11-06"},{"lineNumber":38,"author":{"gitId":"brendanlsz"},"content":"- `FindEntriesCommand`: I implemented the `FindEntriesCommand` in V2.0 which allows users to search the","lastModifiedDate":"2021-11-06"},{"lineNumber":39,"author":{"gitId":"brendanlsz"},"content":"`EntryDatabase` using a keyword. This allows users to easily find matching `Entry` objects in the database.","lastModifiedDate":"2021-11-06"},{"lineNumber":40,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":41,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":42,"author":{"gitId":"brendanlsz"},"content":"### Contributions to the UG:","lastModifiedDate":"2021-11-06"},{"lineNumber":43,"author":{"gitId":"brendanlsz"},"content":"- Feature: Searching for foods with keyword.","lastModifiedDate":"2021-11-06"},{"lineNumber":44,"author":{"gitId":"brendanlsz"},"content":"- Feature: Searching for entries with keyword.","lastModifiedDate":"2021-11-06"},{"lineNumber":45,"author":{"gitId":"brendanlsz"},"content":"- Feature: Suggest food based on food type and calorie goal.","lastModifiedDate":"2021-11-06"},{"lineNumber":46,"author":{"gitId":"brendanlsz"},"content":"- I also contributed to the `Command summary` section of the UG.","lastModifiedDate":"2021-11-06"},{"lineNumber":47,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":48,"author":{"gitId":"brendanlsz"},"content":"### Contributions to the DG:","lastModifiedDate":"2021-11-06"},{"lineNumber":49,"author":{"gitId":"brendanlsz"},"content":"- Design and implementation: `Storage`","lastModifiedDate":"2021-11-06"},{"lineNumber":50,"author":{"gitId":"brendanlsz"},"content":"  - Added a UML sequence diagram demonstrating the process of saving the `FoodDatabase`","lastModifiedDate":"2021-11-06"},{"lineNumber":51,"author":{"gitId":"brendanlsz"},"content":"  data to text file.","lastModifiedDate":"2021-11-06"},{"lineNumber":52,"author":{"gitId":"brendanlsz"},"content":"  - Added a UML sequence diagram demonstrating the process of preloading the `FoodDatabase`","lastModifiedDate":"2021-11-07"},{"lineNumber":53,"author":{"gitId":"brendanlsz"},"content":"  data from text file.","lastModifiedDate":"2021-11-07"},{"lineNumber":54,"author":{"gitId":"brendanlsz"},"content":"  - Provided explanation on the implementation as well as design considerations taken into account.","lastModifiedDate":"2021-11-07"},{"lineNumber":55,"author":{"gitId":"brendanlsz"},"content":"- Design and implementation: `FoodDatabase`","lastModifiedDate":"2021-11-06"},{"lineNumber":56,"author":{"gitId":"brendanlsz"},"content":"  - Added a UML class diagram to highlight the relationships between the `FoodDatabase` ","lastModifiedDate":"2021-11-06"},{"lineNumber":57,"author":{"gitId":"brendanlsz"},"content":"  class and various components.","lastModifiedDate":"2021-11-06"},{"lineNumber":58,"author":{"gitId":"brendanlsz"},"content":"  - Added UML sequence diagrams for `preloadDatabase()` and `convertDatabaseToString()` methods.","lastModifiedDate":"2021-11-06"},{"lineNumber":59,"author":{"gitId":"brendanlsz"},"content":"  - Provided information on the various methods within the `FoodDatabase` class and their use cases.","lastModifiedDate":"2021-11-06"},{"lineNumber":60,"author":{"gitId":"brendanlsz"},"content":"- Design and implementation: `ViewSuggestionsCommand`","lastModifiedDate":"2021-11-06"},{"lineNumber":61,"author":{"gitId":"brendanlsz"},"content":"  - Added a UML sequence diagram that shows the execution of the ","lastModifiedDate":"2021-11-06"},{"lineNumber":62,"author":{"gitId":"brendanlsz"},"content":"  `ViewSuggestionsCommand`.","lastModifiedDate":"2021-11-06"},{"lineNumber":63,"author":{"gitId":"brendanlsz"},"content":"  - Provided detailed explanation on the sequence of the execution.","lastModifiedDate":"2021-11-06"},{"lineNumber":64,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":65,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":66,"author":{"gitId":"brendanlsz"},"content":"### Developer Guide Extract: Storage","lastModifiedDate":"2021-11-06"},{"lineNumber":67,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":68,"author":{"gitId":"brendanlsz"},"content":"The Storage class reads and writes data to and from the text file.","lastModifiedDate":"2021-11-06"},{"lineNumber":69,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":70,"author":{"gitId":"brendanlsz"},"content":"#### Storage format","lastModifiedDate":"2021-11-06"},{"lineNumber":71,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":72,"author":{"gitId":"brendanlsz"},"content":"**Every line in each text file represents one object / entry / item**","lastModifiedDate":"2021-11-06"},{"lineNumber":73,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":74,"author":{"gitId":"brendanlsz"},"content":"*   FoodDatabase:`FOODNAME | CALORIE_VALUE`  ","lastModifiedDate":"2021-11-06"},{"lineNumber":75,"author":{"gitId":"brendanlsz"},"content":"    Example: `Nasi Lemak | 400`   `Ramen | 600`","lastModifiedDate":"2021-11-06"},{"lineNumber":76,"author":{"gitId":"brendanlsz"},"content":"*   EntryDatabase:`MEALTYPE | FOODNAME | CALORIE_VALUE | DATE`  ","lastModifiedDate":"2021-11-06"},{"lineNumber":77,"author":{"gitId":"brendanlsz"},"content":"    Example: `Dinner | Ramen | 500 | 2021-10-20`   `Lunch | Fried rice | 600 | 2021-10-20`","lastModifiedDate":"2021-11-06"},{"lineNumber":78,"author":{"gitId":"brendanlsz"},"content":"*   User:`CALORIE_GOAL | GENDER`  ","lastModifiedDate":"2021-11-06"},{"lineNumber":79,"author":{"gitId":"brendanlsz"},"content":"    Example: `1000 | 0`","lastModifiedDate":"2021-11-06"},{"lineNumber":80,"author":{"gitId":"brendanlsz"},"content":"*   User weight:`WEIGHT | DATE`  ","lastModifiedDate":"2021-11-06"},{"lineNumber":81,"author":{"gitId":"brendanlsz"},"content":"    Example: `60.0 | 2021-07-20`   `59.0 | 2021-08-20`   `58.0 | 2021-09-20`   `45.0 | 2021-10-21`","lastModifiedDate":"2021-11-06"},{"lineNumber":82,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":83,"author":{"gitId":"brendanlsz"},"content":"#### Implementation","lastModifiedDate":"2021-11-06"},{"lineNumber":84,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":85,"author":{"gitId":"brendanlsz"},"content":"1.  **Saving to text file**","lastModifiedDate":"2021-11-06"},{"lineNumber":86,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":87,"author":{"gitId":"brendanlsz"},"content":"    `FoodDatabase`, `EntryDatabase`, and `User` classes each have a method to convert its data to String format. This String is then saved to the text file.  ","lastModifiedDate":"2021-11-06"},{"lineNumber":88,"author":{"gitId":"brendanlsz"},"content":"    For instance, when saving the `FoodDatabase` data, `Storage` calls the `convertDatabaseToString()` method to obtain the String representation of all the data within the \\`FoodDatabase\\`. This String is then written to the text file.","lastModifiedDate":"2021-11-06"},{"lineNumber":89,"author":{"gitId":"brendanlsz"},"content":"2.  **Loading from text file**","lastModifiedDate":"2021-11-06"},{"lineNumber":90,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":91,"author":{"gitId":"brendanlsz"},"content":"    `Storage` makes use of the `BufferedReader` and `FileInputStream` provided by `java.io` to access the contents of the storage text files. This is then passed to the respective objects for preloading.  ","lastModifiedDate":"2021-11-06"},{"lineNumber":92,"author":{"gitId":"brendanlsz"},"content":"    For instance, when preloading the `FoodDatabase` data, `Storage` accesses the storage text file and passes the file contents to the `preLoadDatabase()` method in ,`FoodDatabase` which populates the ArrayList in `FoodDatabase`.","lastModifiedDate":"2021-11-06"},{"lineNumber":93,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":94,"author":{"gitId":"brendanlsz"},"content":"#### Implementation considerations","lastModifiedDate":"2021-11-06"},{"lineNumber":95,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":96,"author":{"gitId":"brendanlsz"},"content":"1. The `Path` of each text file is hardcoded within the `Storage` class. This eliminates","lastModifiedDate":"2021-11-06"},{"lineNumber":97,"author":{"gitId":"brendanlsz"},"content":"   the need to pass the `Path` of the destination file each time. For example, to save the `FoodDatabase`","lastModifiedDate":"2021-11-06"},{"lineNumber":98,"author":{"gitId":"brendanlsz"},"content":"   contents, the method call is `saveFoodDatabase()` rather than `saveFoodDatabase(PATH)`.","lastModifiedDate":"2021-11-06"},{"lineNumber":99,"author":{"gitId":"brendanlsz"},"content":"2. All public methods are declared as `static` methods. This allows various methods within the","lastModifiedDate":"2021-11-06"},{"lineNumber":100,"author":{"gitId":"brendanlsz"},"content":"   `Storage` class to be called without having to instantiate a `Storage` object.","lastModifiedDate":"2021-11-06"},{"lineNumber":101,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":102,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":103,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":104,"author":{"gitId":"brendanlsz"},"content":"#### UML Sequence Diagram","lastModifiedDate":"2021-11-06"},{"lineNumber":105,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":106,"author":{"gitId":"brendanlsz"},"content":"The following sequence diagram describes the operation of the `saveFoodDatabase()` operation.  ","lastModifiedDate":"2021-11-06"},{"lineNumber":107,"author":{"gitId":"brendanlsz"},"content":"![](./../diagrams-DG/Storage_sequence.png)","lastModifiedDate":"2021-11-06"},{"lineNumber":108,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-11-05"}],"authorContributionMap":{"brendanlsz":108}},{"path":"docs/team/siyuancheng178.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"siyuancheng178"},"content":"# Cheng Siyuan - Project Portfolio Page","lastModifiedDate":"2021-11-06"},{"lineNumber":2,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":3,"author":{"gitId":"siyuancheng178"},"content":"## Product Overview - FitNus","lastModifiedDate":"2021-11-06"},{"lineNumber":4,"author":{"gitId":"siyuancheng178"},"content":"FitNUS Tracker is a command line based desktop app for tracking daily food intake to keep a healthy lifestyle.","lastModifiedDate":"2021-11-06"},{"lineNumber":5,"author":{"gitId":"siyuancheng178"},"content":"FitNUS is specially made for Computing Students living in University Town, with features and","lastModifiedDate":"2021-11-06"},{"lineNumber":6,"author":{"gitId":"siyuancheng178"},"content":"functionalities taylor made for them.","lastModifiedDate":"2021-11-06"},{"lineNumber":7,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":8,"author":{"gitId":"siyuancheng178"},"content":"## Summary of Contributions","lastModifiedDate":"2021-11-06"},{"lineNumber":9,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":10,"author":{"gitId":"siyuancheng178"},"content":"Given below are my contributions to the project:","lastModifiedDate":"2021-11-06"},{"lineNumber":11,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":12,"author":{"gitId":"siyuancheng178"},"content":"- Code contribution: [This is the RepoSense report of the code contributed.](https://nus-cs2113-ay2122s1.github.io/tp-dashboard/?search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dtrue\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026since\u003d2021-09-25\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dsiyuancheng178\u0026tabRepo\u003dAY2122S1-CS2113T-W12-1%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs~functional-code~test-code\u0026authorshipIsBinaryFileTypeChecked\u003dfalse)","lastModifiedDate":"2021-11-06"},{"lineNumber":13,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":14,"author":{"gitId":"siyuancheng178"},"content":"- **New Feature**: view weekly/monthly entry summary","lastModifiedDate":"2021-11-06"},{"lineNumber":15,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":16,"author":{"gitId":"siyuancheng178"},"content":"What it does: allow users to view a concise summary of what he/she has eaten in the past week/month. ","lastModifiedDate":"2021-11-06"},{"lineNumber":17,"author":{"gitId":"siyuancheng178"},"content":"Weekly summary includes components of calorie trend graph, average daily calorie and most/least eaten foods in this month.","lastModifiedDate":"2021-11-06"},{"lineNumber":18,"author":{"gitId":"siyuancheng178"},"content":"Monthly summary includes components of average daily calorie and most/least eaten foods in the past 7 days.","lastModifiedDate":"2021-11-06"},{"lineNumber":19,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":20,"author":{"gitId":"siyuancheng178"},"content":"- **Documentation**","lastModifiedDate":"2021-11-06"},{"lineNumber":21,"author":{"gitId":"siyuancheng178"},"content":"  - User Guide: Add descriptions and sample outputs for several commands","lastModifiedDate":"2021-11-06"},{"lineNumber":22,"author":{"gitId":"siyuancheng178"},"content":"  ","lastModifiedDate":"2021-11-06"},{"lineNumber":23,"author":{"gitId":"siyuancheng178"},"content":"  - Developer Guide: Add the overall architecture of this software and implementation details of `summary` feature.","lastModifiedDate":"2021-11-06"},{"lineNumber":24,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":25,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-11-06"}],"authorContributionMap":{"siyuancheng178":25}},{"path":"src/main/java/fitnus/FitNus.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"kengjit"},"content":"package fitnus;","lastModifiedDate":"2021-10-03"},{"lineNumber":2,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":3,"author":{"gitId":"aaapppsss"},"content":"import fitnus.command.HelpCommand;","lastModifiedDate":"2021-10-23"},{"lineNumber":4,"author":{"gitId":"aaapppsss"},"content":"import fitnus.command.ExitCommand;","lastModifiedDate":"2021-10-23"},{"lineNumber":5,"author":{"gitId":"aaapppsss"},"content":"import fitnus.command.Command;","lastModifiedDate":"2021-10-23"},{"lineNumber":6,"author":{"gitId":"siyuancheng178"},"content":"import fitnus.command.ViewWeekSummaryCommand;","lastModifiedDate":"2021-11-01"},{"lineNumber":7,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.database.EntryDatabase;","lastModifiedDate":"2021-10-12"},{"lineNumber":8,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.database.FoodDatabase;","lastModifiedDate":"2021-10-12"},{"lineNumber":9,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.database.MealPlanDatabase;","lastModifiedDate":"2021-10-24"},{"lineNumber":10,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.exception.FitNusException;","lastModifiedDate":"2021-10-12"},{"lineNumber":11,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.parser.Parser;","lastModifiedDate":"2021-10-06"},{"lineNumber":12,"author":{"gitId":"brendanlsz"},"content":"import fitnus.storage.Storage;","lastModifiedDate":"2021-10-20"},{"lineNumber":13,"author":{"gitId":"siyuancheng178"},"content":"import fitnus.tracker.Gender;","lastModifiedDate":"2021-10-23"},{"lineNumber":14,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.utility.Ui;","lastModifiedDate":"2021-10-12"},{"lineNumber":15,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.utility.User;","lastModifiedDate":"2021-10-12"},{"lineNumber":16,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":17,"author":{"gitId":"brendanlsz"},"content":"import java.io.IOException;","lastModifiedDate":"2021-10-12"},{"lineNumber":18,"author":{"gitId":"siyuancheng178"},"content":"import java.util.logging.Level;","lastModifiedDate":"2021-10-14"},{"lineNumber":19,"author":{"gitId":"siyuancheng178"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-10-14"},{"lineNumber":20,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":21,"author":{"gitId":"brendanlsz"},"content":"public class FitNus {","lastModifiedDate":"2021-10-12"},{"lineNumber":22,"author":{"gitId":"brendanlsz"},"content":"    private static final Logger logger \u003d Logger.getLogger(\"FitNus\");","lastModifiedDate":"2021-10-23"},{"lineNumber":23,"author":{"gitId":"brendanlsz"},"content":"    private final FoodDatabase foodDatabase;","lastModifiedDate":"2021-10-26"},{"lineNumber":24,"author":{"gitId":"brendanlsz"},"content":"    private final EntryDatabase entryDatabase;","lastModifiedDate":"2021-10-26"},{"lineNumber":25,"author":{"gitId":"brendanlsz"},"content":"    private final MealPlanDatabase mealPlanDatabase;","lastModifiedDate":"2021-10-26"},{"lineNumber":26,"author":{"gitId":"brendanlsz"},"content":"    private final User user;","lastModifiedDate":"2021-10-25"},{"lineNumber":27,"author":{"gitId":"brendanlsz"},"content":"    private final Ui ui;","lastModifiedDate":"2021-10-25"},{"lineNumber":28,"author":{"gitId":"brendanlsz"},"content":"    private final Parser parser;","lastModifiedDate":"2021-10-25"},{"lineNumber":29,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":30,"author":{"gitId":"brendanlsz"},"content":"    private void initialiseFitNus() {","lastModifiedDate":"2021-10-25"},{"lineNumber":31,"author":{"gitId":"kengjit"},"content":"        // Load From Storage","lastModifiedDate":"2021-10-06"},{"lineNumber":32,"author":{"gitId":"brendanlsz"},"content":"        try {","lastModifiedDate":"2021-10-12"},{"lineNumber":33,"author":{"gitId":"brendanlsz"},"content":"            Storage.createDirectoryAndFiles();","lastModifiedDate":"2021-10-06"},{"lineNumber":34,"author":{"gitId":"brendanlsz"},"content":"            Storage.initialiseFoodDatabase(foodDatabase);","lastModifiedDate":"2021-10-26"},{"lineNumber":35,"author":{"gitId":"brendanlsz"},"content":"            Storage.initialiseEntryDatabase(entryDatabase);","lastModifiedDate":"2021-10-26"},{"lineNumber":36,"author":{"gitId":"praj-bellakka"},"content":"            Storage.initialiseMealPlanDatabase(mealPlanDatabase);","lastModifiedDate":"2021-10-27"},{"lineNumber":37,"author":{"gitId":"aaapppsss"},"content":"            Storage.initialiseWeightProgress(user);","lastModifiedDate":"2021-10-20"},{"lineNumber":38,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":39,"author":{"gitId":"aaapppsss"},"content":"            int successfullyInitialisedUser \u003d Storage.initialiseUser(user);","lastModifiedDate":"2021-10-23"},{"lineNumber":40,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":41,"author":{"gitId":"aaapppsss"},"content":"            if (successfullyInitialisedUser \u003d\u003d 0) { //did not successfully initialise user data","lastModifiedDate":"2021-10-23"},{"lineNumber":42,"author":{"gitId":"kengjit"},"content":"                Ui.println(Ui.DIVIDER);","lastModifiedDate":"2021-11-06"},{"lineNumber":43,"author":{"gitId":"kengjit"},"content":"                Ui.println(Ui.INIT_GENDER);","lastModifiedDate":"2021-11-06"},{"lineNumber":44,"author":{"gitId":"brendanlsz"},"content":"                initialiseAttribute(ui, entryDatabase, foodDatabase, mealPlanDatabase,","lastModifiedDate":"2021-11-07"},{"lineNumber":45,"author":{"gitId":"brendanlsz"},"content":"                        user, \"gender /set \");","lastModifiedDate":"2021-11-07"},{"lineNumber":46,"author":{"gitId":"kengjit"},"content":"                Ui.println(Ui.DIVIDER);","lastModifiedDate":"2021-11-06"},{"lineNumber":47,"author":{"gitId":"kengjit"},"content":"                Ui.println(Ui.INIT_AGE);","lastModifiedDate":"2021-11-06"},{"lineNumber":48,"author":{"gitId":"brendanlsz"},"content":"                initialiseAttribute(ui, entryDatabase, foodDatabase, mealPlanDatabase,","lastModifiedDate":"2021-11-07"},{"lineNumber":49,"author":{"gitId":"brendanlsz"},"content":"                        user, \"age /set \");","lastModifiedDate":"2021-11-07"},{"lineNumber":50,"author":{"gitId":"kengjit"},"content":"                Ui.println(Ui.DIVIDER);","lastModifiedDate":"2021-11-06"},{"lineNumber":51,"author":{"gitId":"kengjit"},"content":"                Ui.println(Ui.INIT_HEIGHT);","lastModifiedDate":"2021-11-06"},{"lineNumber":52,"author":{"gitId":"brendanlsz"},"content":"                initialiseAttribute(ui, entryDatabase, foodDatabase, mealPlanDatabase,","lastModifiedDate":"2021-11-07"},{"lineNumber":53,"author":{"gitId":"brendanlsz"},"content":"                        user, \"height /set \");","lastModifiedDate":"2021-11-07"},{"lineNumber":54,"author":{"gitId":"kengjit"},"content":"                Ui.println(Ui.DIVIDER);","lastModifiedDate":"2021-11-06"},{"lineNumber":55,"author":{"gitId":"kengjit"},"content":"                Ui.println(Ui.INIT_WEIGHT);","lastModifiedDate":"2021-11-06"},{"lineNumber":56,"author":{"gitId":"brendanlsz"},"content":"                initialiseAttribute(ui, entryDatabase, foodDatabase, mealPlanDatabase,","lastModifiedDate":"2021-11-07"},{"lineNumber":57,"author":{"gitId":"brendanlsz"},"content":"                        user, \"weight /set \");","lastModifiedDate":"2021-11-07"},{"lineNumber":58,"author":{"gitId":"kengjit"},"content":"                Ui.println(Ui.INIT_SUCCESS);","lastModifiedDate":"2021-11-06"},{"lineNumber":59,"author":{"gitId":"aaapppsss"},"content":"                int calorieGoal \u003d user.calculateCalorieGoal(0, \"gain\");","lastModifiedDate":"2021-11-04"},{"lineNumber":60,"author":{"gitId":"aaapppsss"},"content":"                user.setCalorieGoal(calorieGoal);","lastModifiedDate":"2021-10-23"},{"lineNumber":61,"author":{"gitId":"kengjit"},"content":"                Ui.printCalorieGoal(calorieGoal);","lastModifiedDate":"2021-11-06"},{"lineNumber":62,"author":{"gitId":"kengjit"},"content":"                Ui.println(Ui.DIVIDER);","lastModifiedDate":"2021-11-06"},{"lineNumber":63,"author":{"gitId":"brendanlsz"},"content":"                saveFitNus();","lastModifiedDate":"2021-11-07"},{"lineNumber":64,"author":{"gitId":"aaapppsss"},"content":"            }","lastModifiedDate":"2021-10-23"},{"lineNumber":65,"author":{"gitId":"brendanlsz"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-10-12"},{"lineNumber":66,"author":{"gitId":"siyuancheng178"},"content":"            logger.log(Level.INFO, \"some problems when loading data\");","lastModifiedDate":"2021-10-14"},{"lineNumber":67,"author":{"gitId":"brendanlsz"},"content":"            Ui.println(\"I/O error! \" + e.getMessage());","lastModifiedDate":"2021-10-12"},{"lineNumber":68,"author":{"gitId":"brendanlsz"},"content":"        } catch (FitNusException e) {","lastModifiedDate":"2021-10-12"},{"lineNumber":69,"author":{"gitId":"siyuancheng178"},"content":"            logger.log(Level.INFO, \"some problems when loading data\");","lastModifiedDate":"2021-10-14"},{"lineNumber":70,"author":{"gitId":"brendanlsz"},"content":"            Ui.println(e.getMessage());","lastModifiedDate":"2021-10-12"},{"lineNumber":71,"author":{"gitId":"brendanlsz"},"content":"        }","lastModifiedDate":"2021-10-12"},{"lineNumber":72,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":73,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":74,"author":{"gitId":"aaapppsss"},"content":"    private static void initialiseAttribute(Ui ui, EntryDatabase ed, FoodDatabase fd,","lastModifiedDate":"2021-10-25"},{"lineNumber":75,"author":{"gitId":"aaapppsss"},"content":"                                            MealPlanDatabase md, User user, String commandStringFront) {","lastModifiedDate":"2021-10-25"},{"lineNumber":76,"author":{"gitId":"aaapppsss"},"content":"        Parser parser \u003d new Parser();","lastModifiedDate":"2021-10-25"},{"lineNumber":77,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":78,"author":{"gitId":"aaapppsss"},"content":"        boolean attributeInitialised \u003d false;","lastModifiedDate":"2021-10-25"},{"lineNumber":79,"author":{"gitId":"kengjit"},"content":"        while (!attributeInitialised) {","lastModifiedDate":"2021-11-06"},{"lineNumber":80,"author":{"gitId":"aaapppsss"},"content":"            try {","lastModifiedDate":"2021-10-23"},{"lineNumber":81,"author":{"gitId":"praj-bellakka"},"content":"                String requiredInput \u003d ui.readInput(System.in, System.out).strip();","lastModifiedDate":"2021-11-06"},{"lineNumber":82,"author":{"gitId":"aaapppsss"},"content":"                String commandString \u003d commandStringFront + requiredInput;","lastModifiedDate":"2021-10-25"},{"lineNumber":83,"author":{"gitId":"aaapppsss"},"content":"                Command c \u003d parser.parseCommandType(commandString, fd, ed, md);","lastModifiedDate":"2021-10-25"},{"lineNumber":84,"author":{"gitId":"siyuancheng178"},"content":"                String msg \u003d c.execute(ed, fd, md, user);","lastModifiedDate":"2021-11-01"},{"lineNumber":85,"author":{"gitId":"siyuancheng178"},"content":"                if (!(c instanceof ViewWeekSummaryCommand)) {","lastModifiedDate":"2021-11-01"},{"lineNumber":86,"author":{"gitId":"siyuancheng178"},"content":"                    Ui.println(msg);","lastModifiedDate":"2021-11-01"},{"lineNumber":87,"author":{"gitId":"siyuancheng178"},"content":"                }","lastModifiedDate":"2021-11-01"},{"lineNumber":88,"author":{"gitId":"aaapppsss"},"content":"                attributeInitialised \u003d true;","lastModifiedDate":"2021-10-25"},{"lineNumber":89,"author":{"gitId":"aaapppsss"},"content":"            } catch (FitNusException e) {","lastModifiedDate":"2021-10-23"},{"lineNumber":90,"author":{"gitId":"aaapppsss"},"content":"                Ui.println(e.getMessage());","lastModifiedDate":"2021-10-23"},{"lineNumber":91,"author":{"gitId":"aaapppsss"},"content":"            }","lastModifiedDate":"2021-10-23"},{"lineNumber":92,"author":{"gitId":"aaapppsss"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":93,"author":{"gitId":"aaapppsss"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":94,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":95,"author":{"gitId":"brendanlsz"},"content":"    private void saveFitNus() {","lastModifiedDate":"2021-11-07"},{"lineNumber":96,"author":{"gitId":"brendanlsz"},"content":"        try {","lastModifiedDate":"2021-10-12"},{"lineNumber":97,"author":{"gitId":"brendanlsz"},"content":"            Storage.createDirectoryAndFiles();","lastModifiedDate":"2021-10-12"},{"lineNumber":98,"author":{"gitId":"brendanlsz"},"content":"            Storage.saveFoodDatabase(foodDatabase);","lastModifiedDate":"2021-10-26"},{"lineNumber":99,"author":{"gitId":"brendanlsz"},"content":"            Storage.saveEntryDatabase(entryDatabase);","lastModifiedDate":"2021-10-26"},{"lineNumber":100,"author":{"gitId":"praj-bellakka"},"content":"            Storage.saveMealPlanDatabase(mealPlanDatabase);","lastModifiedDate":"2021-10-27"},{"lineNumber":101,"author":{"gitId":"brendanlsz"},"content":"            Storage.saveUserData(user);","lastModifiedDate":"2021-10-10"},{"lineNumber":102,"author":{"gitId":"aaapppsss"},"content":"            Storage.saveWeightData(user);","lastModifiedDate":"2021-10-21"},{"lineNumber":103,"author":{"gitId":"brendanlsz"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-10-12"},{"lineNumber":104,"author":{"gitId":"siyuancheng178"},"content":"            logger.log(Level.INFO, \"some problems when saving data\");","lastModifiedDate":"2021-10-14"},{"lineNumber":105,"author":{"gitId":"brendanlsz"},"content":"            Ui.println(\"I/O error! \" + e.getMessage());","lastModifiedDate":"2021-10-12"},{"lineNumber":106,"author":{"gitId":"brendanlsz"},"content":"        }","lastModifiedDate":"2021-10-12"},{"lineNumber":107,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":108,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":109,"author":{"gitId":"brendanlsz"},"content":"    private void run() {","lastModifiedDate":"2021-10-25"},{"lineNumber":110,"author":{"gitId":"brendanlsz"},"content":"        Ui.println(new HelpCommand().execute(entryDatabase, foodDatabase, mealPlanDatabase, user));","lastModifiedDate":"2021-10-26"},{"lineNumber":111,"author":{"gitId":"kengjit"},"content":"        Ui.print(Ui.DIVIDER);","lastModifiedDate":"2021-11-04"},{"lineNumber":112,"author":{"gitId":"siyuancheng178"},"content":"        while (true) {","lastModifiedDate":"2021-10-09"},{"lineNumber":113,"author":{"gitId":"kengjit"},"content":"            try {","lastModifiedDate":"2021-10-12"},{"lineNumber":114,"author":{"gitId":"siyuancheng178"},"content":"                String userInput;","lastModifiedDate":"2021-10-09"},{"lineNumber":115,"author":{"gitId":"siyuancheng178"},"content":"                Command inputType;","lastModifiedDate":"2021-10-22"},{"lineNumber":116,"author":{"gitId":"kengjit"},"content":"                Ui.print(Ui.USER_INPUT);","lastModifiedDate":"2021-11-04"},{"lineNumber":117,"author":{"gitId":"praj-bellakka"},"content":"                userInput \u003d ui.readInput(System.in, System.out);","lastModifiedDate":"2021-11-06"},{"lineNumber":118,"author":{"gitId":"brendanlsz"},"content":"                inputType \u003d parser.parseCommandType(userInput, foodDatabase, entryDatabase, mealPlanDatabase);","lastModifiedDate":"2021-10-26"},{"lineNumber":119,"author":{"gitId":"brendanlsz"},"content":"                Ui.println(inputType.execute(entryDatabase, foodDatabase, mealPlanDatabase, user));","lastModifiedDate":"2021-10-26"},{"lineNumber":120,"author":{"gitId":"brendanlsz"},"content":"                entryDatabase.sortDatabase();","lastModifiedDate":"2021-10-26"},{"lineNumber":121,"author":{"gitId":"brendanlsz"},"content":"                saveFitNus();","lastModifiedDate":"2021-11-07"},{"lineNumber":122,"author":{"gitId":"siyuancheng178"},"content":"                if (inputType instanceof ExitCommand) {","lastModifiedDate":"2021-10-09"},{"lineNumber":123,"author":{"gitId":"siyuancheng178"},"content":"                    break;","lastModifiedDate":"2021-10-09"},{"lineNumber":124,"author":{"gitId":"siyuancheng178"},"content":"                }","lastModifiedDate":"2021-10-09"},{"lineNumber":125,"author":{"gitId":"kengjit"},"content":"            } catch (FitNusException e) {","lastModifiedDate":"2021-10-12"},{"lineNumber":126,"author":{"gitId":"kengjit"},"content":"                Ui.println(e.getMessage());","lastModifiedDate":"2021-10-12"},{"lineNumber":127,"author":{"gitId":"kengjit"},"content":"            }","lastModifiedDate":"2021-10-12"},{"lineNumber":128,"author":{"gitId":"kengjit"},"content":"            Ui.print(Ui.DIVIDER);","lastModifiedDate":"2021-11-04"},{"lineNumber":129,"author":{"gitId":"praj-bellakka"},"content":"        }","lastModifiedDate":"2021-10-06"},{"lineNumber":130,"author":{"gitId":"praj-bellakka"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":131,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":132,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":133,"author":{"gitId":"brendanlsz"},"content":"    private FitNus() {","lastModifiedDate":"2021-10-25"},{"lineNumber":134,"author":{"gitId":"brendanlsz"},"content":"        foodDatabase \u003d new FoodDatabase();","lastModifiedDate":"2021-10-26"},{"lineNumber":135,"author":{"gitId":"brendanlsz"},"content":"        entryDatabase \u003d new EntryDatabase();","lastModifiedDate":"2021-10-26"},{"lineNumber":136,"author":{"gitId":"brendanlsz"},"content":"        mealPlanDatabase \u003d new MealPlanDatabase();","lastModifiedDate":"2021-10-26"},{"lineNumber":137,"author":{"gitId":"aaapppsss"},"content":"        user \u003d new User(2000, Gender.MALE, 18, 180, 65);","lastModifiedDate":"2021-11-01"},{"lineNumber":138,"author":{"gitId":"brendanlsz"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2021-10-25"},{"lineNumber":139,"author":{"gitId":"brendanlsz"},"content":"        parser \u003d new Parser();","lastModifiedDate":"2021-10-25"},{"lineNumber":140,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":141,"author":{"gitId":"kengjit"},"content":"        // Init","lastModifiedDate":"2021-10-12"},{"lineNumber":142,"author":{"gitId":"brendanlsz"},"content":"        Ui.printWelcomeMessage();","lastModifiedDate":"2021-10-12"},{"lineNumber":143,"author":{"gitId":"brendanlsz"},"content":"        initialiseFitNus();","lastModifiedDate":"2021-10-25"},{"lineNumber":144,"author":{"gitId":"kengjit"},"content":"        Ui.printPreloadedData(foodDatabase, entryDatabase, mealPlanDatabase, user);","lastModifiedDate":"2021-11-06"},{"lineNumber":145,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":146,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":147,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":148,"author":{"gitId":"brendanlsz"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-10-25"},{"lineNumber":149,"author":{"gitId":"brendanlsz"},"content":"        new FitNus().run();","lastModifiedDate":"2021-10-25"},{"lineNumber":150,"author":{"gitId":"kengjit"},"content":"    }","lastModifiedDate":"2021-10-03"},{"lineNumber":151,"author":{"gitId":"kengjit"},"content":"}","lastModifiedDate":"2021-10-03"}],"authorContributionMap":{"kengjit":26,"brendanlsz":61,"siyuancheng178":20,"aaapppsss":28,"praj-bellakka":16}},{"path":"src/main/java/fitnus/command/AddFoodEntryCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"kengjit"},"content":"package fitnus.command;","lastModifiedDate":"2021-10-20"},{"lineNumber":2,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":3,"author":{"gitId":"kengjit"},"content":"import fitnus.database.EntryDatabase;","lastModifiedDate":"2021-10-20"},{"lineNumber":4,"author":{"gitId":"kengjit"},"content":"import fitnus.database.FoodDatabase;","lastModifiedDate":"2021-10-20"},{"lineNumber":5,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.database.MealPlanDatabase;","lastModifiedDate":"2021-10-24"},{"lineNumber":6,"author":{"gitId":"kengjit"},"content":"import fitnus.exception.FitNusException;","lastModifiedDate":"2021-10-20"},{"lineNumber":7,"author":{"gitId":"kengjit"},"content":"import fitnus.tracker.Food;","lastModifiedDate":"2021-10-20"},{"lineNumber":8,"author":{"gitId":"kengjit"},"content":"import fitnus.tracker.MealType;","lastModifiedDate":"2021-10-20"},{"lineNumber":9,"author":{"gitId":"kengjit"},"content":"import fitnus.utility.User;","lastModifiedDate":"2021-10-20"},{"lineNumber":10,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":11,"author":{"gitId":"kengjit"},"content":"public class AddFoodEntryCommand extends Command {","lastModifiedDate":"2021-10-20"},{"lineNumber":12,"author":{"gitId":"kengjit"},"content":"    private final MealType mealType;","lastModifiedDate":"2021-10-20"},{"lineNumber":13,"author":{"gitId":"kengjit"},"content":"    private final String foodName;","lastModifiedDate":"2021-10-20"},{"lineNumber":14,"author":{"gitId":"kengjit"},"content":"    private final int calories;","lastModifiedDate":"2021-10-20"},{"lineNumber":15,"author":{"gitId":"kengjit"},"content":"    private final Food food;","lastModifiedDate":"2021-10-20"},{"lineNumber":16,"author":{"gitId":"kengjit"},"content":"    private final boolean isCustom;","lastModifiedDate":"2021-10-20"},{"lineNumber":17,"author":{"gitId":"brendanlsz"},"content":"    private Food.FoodType type \u003d null;","lastModifiedDate":"2021-10-23"},{"lineNumber":18,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":19,"author":{"gitId":"brendanlsz"},"content":"    public AddFoodEntryCommand(MealType mealType, Food food) {","lastModifiedDate":"2021-10-23"},{"lineNumber":20,"author":{"gitId":"kengjit"},"content":"        this.mealType \u003d mealType;","lastModifiedDate":"2021-10-20"},{"lineNumber":21,"author":{"gitId":"kengjit"},"content":"        this.food \u003d food;","lastModifiedDate":"2021-10-20"},{"lineNumber":22,"author":{"gitId":"kengjit"},"content":"        this.foodName \u003d null;","lastModifiedDate":"2021-10-20"},{"lineNumber":23,"author":{"gitId":"kengjit"},"content":"        this.calories \u003d -1;","lastModifiedDate":"2021-10-20"},{"lineNumber":24,"author":{"gitId":"kengjit"},"content":"        this.isCustom \u003d false;","lastModifiedDate":"2021-10-20"},{"lineNumber":25,"author":{"gitId":"kengjit"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":26,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":27,"author":{"gitId":"brendanlsz"},"content":"    public AddFoodEntryCommand(MealType mealType, String foodName, int calories, Food.FoodType type) {","lastModifiedDate":"2021-10-22"},{"lineNumber":28,"author":{"gitId":"kengjit"},"content":"        this.mealType \u003d mealType;","lastModifiedDate":"2021-10-20"},{"lineNumber":29,"author":{"gitId":"kengjit"},"content":"        this.foodName \u003d foodName;","lastModifiedDate":"2021-10-20"},{"lineNumber":30,"author":{"gitId":"kengjit"},"content":"        this.calories \u003d calories;","lastModifiedDate":"2021-10-20"},{"lineNumber":31,"author":{"gitId":"kengjit"},"content":"        this.food \u003d null;","lastModifiedDate":"2021-10-20"},{"lineNumber":32,"author":{"gitId":"kengjit"},"content":"        this.isCustom \u003d true;","lastModifiedDate":"2021-10-20"},{"lineNumber":33,"author":{"gitId":"brendanlsz"},"content":"        this.type \u003d type;","lastModifiedDate":"2021-10-22"},{"lineNumber":34,"author":{"gitId":"kengjit"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":35,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":36,"author":{"gitId":"kengjit"},"content":"    @Override","lastModifiedDate":"2021-10-20"},{"lineNumber":37,"author":{"gitId":"praj-bellakka"},"content":"    public String execute(EntryDatabase ed, FoodDatabase fd, MealPlanDatabase md, User us) throws FitNusException {","lastModifiedDate":"2021-10-24"},{"lineNumber":38,"author":{"gitId":"kengjit"},"content":"        if (isCustom) {","lastModifiedDate":"2021-10-20"},{"lineNumber":39,"author":{"gitId":"brendanlsz"},"content":"            Food customFood \u003d new Food(foodName, calories, type);","lastModifiedDate":"2021-10-22"},{"lineNumber":40,"author":{"gitId":"kengjit"},"content":"            ed.addEntry(mealType, customFood);","lastModifiedDate":"2021-10-20"},{"lineNumber":41,"author":{"gitId":"kengjit"},"content":"            fd.addFood(customFood);","lastModifiedDate":"2021-10-20"},{"lineNumber":42,"author":{"gitId":"kengjit"},"content":"            return \"You have successfully added \" + customFood;","lastModifiedDate":"2021-10-20"},{"lineNumber":43,"author":{"gitId":"kengjit"},"content":"        } else {","lastModifiedDate":"2021-10-20"},{"lineNumber":44,"author":{"gitId":"kengjit"},"content":"            ed.addEntry(mealType, food);","lastModifiedDate":"2021-10-20"},{"lineNumber":45,"author":{"gitId":"kengjit"},"content":"            return \"You have successfully added \" + food;","lastModifiedDate":"2021-10-20"},{"lineNumber":46,"author":{"gitId":"kengjit"},"content":"        }","lastModifiedDate":"2021-10-20"},{"lineNumber":47,"author":{"gitId":"kengjit"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":48,"author":{"gitId":"kengjit"},"content":"}","lastModifiedDate":"2021-10-20"}],"authorContributionMap":{"kengjit":41,"brendanlsz":5,"praj-bellakka":2}},{"path":"src/main/java/fitnus/command/AddMealPlanEntryCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"praj-bellakka"},"content":"package fitnus.command;","lastModifiedDate":"2021-10-24"},{"lineNumber":2,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":3,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.database.EntryDatabase;","lastModifiedDate":"2021-10-24"},{"lineNumber":4,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.database.FoodDatabase;","lastModifiedDate":"2021-10-24"},{"lineNumber":5,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.database.MealPlanDatabase;","lastModifiedDate":"2021-10-24"},{"lineNumber":6,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.exception.FitNusException;","lastModifiedDate":"2021-10-24"},{"lineNumber":7,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.tracker.Entry;","lastModifiedDate":"2021-10-24"},{"lineNumber":8,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.tracker.Food;","lastModifiedDate":"2021-10-24"},{"lineNumber":9,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.tracker.MealPlan;","lastModifiedDate":"2021-10-24"},{"lineNumber":10,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.tracker.MealType;","lastModifiedDate":"2021-10-24"},{"lineNumber":11,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.utility.User;","lastModifiedDate":"2021-10-24"},{"lineNumber":12,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":13,"author":{"gitId":"praj-bellakka"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-24"},{"lineNumber":14,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":15,"author":{"gitId":"praj-bellakka"},"content":"/**","lastModifiedDate":"2021-10-24"},{"lineNumber":16,"author":{"gitId":"praj-bellakka"},"content":" * Command is for adding entries based on a meal plan.","lastModifiedDate":"2021-10-25"},{"lineNumber":17,"author":{"gitId":"praj-bellakka"},"content":" */","lastModifiedDate":"2021-10-24"},{"lineNumber":18,"author":{"gitId":"praj-bellakka"},"content":"public class AddMealPlanEntryCommand extends Command {","lastModifiedDate":"2021-10-24"},{"lineNumber":19,"author":{"gitId":"praj-bellakka"},"content":"    private final MealPlan mealPlan;","lastModifiedDate":"2021-10-24"},{"lineNumber":20,"author":{"gitId":"praj-bellakka"},"content":"    private final MealType mealType;","lastModifiedDate":"2021-10-24"},{"lineNumber":21,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":22,"author":{"gitId":"praj-bellakka"},"content":"    public AddMealPlanEntryCommand(MealPlan mealPlan, MealType mealType) {","lastModifiedDate":"2021-10-24"},{"lineNumber":23,"author":{"gitId":"praj-bellakka"},"content":"        this.mealPlan \u003d mealPlan;","lastModifiedDate":"2021-10-24"},{"lineNumber":24,"author":{"gitId":"praj-bellakka"},"content":"        this.mealType \u003d mealType;","lastModifiedDate":"2021-10-24"},{"lineNumber":25,"author":{"gitId":"praj-bellakka"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":26,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":27,"author":{"gitId":"praj-bellakka"},"content":"    @Override","lastModifiedDate":"2021-10-24"},{"lineNumber":28,"author":{"gitId":"praj-bellakka"},"content":"    public String execute(EntryDatabase ed, FoodDatabase fd, MealPlanDatabase md, User us) throws FitNusException {","lastModifiedDate":"2021-10-24"},{"lineNumber":29,"author":{"gitId":"praj-bellakka"},"content":"        System.out.println(\"Adding items from the meal plan: \\\"\" + mealPlan.getMealPlanName() + \"\\\"...\");","lastModifiedDate":"2021-11-04"},{"lineNumber":30,"author":{"gitId":"praj-bellakka"},"content":"        ArrayList\u003cFood\u003e allFoodItems \u003d mealPlan.getMealFoods();","lastModifiedDate":"2021-10-24"},{"lineNumber":31,"author":{"gitId":"praj-bellakka"},"content":"        for (Food food : allFoodItems) {","lastModifiedDate":"2021-10-24"},{"lineNumber":32,"author":{"gitId":"praj-bellakka"},"content":"            ed.addEntry(new Entry(mealType, food));","lastModifiedDate":"2021-10-24"},{"lineNumber":33,"author":{"gitId":"praj-bellakka"},"content":"        }","lastModifiedDate":"2021-10-24"},{"lineNumber":34,"author":{"gitId":"praj-bellakka"},"content":"        return \"The following meal plan: \\\"\" + mealPlan + \"\\\" has been added.\";","lastModifiedDate":"2021-11-04"},{"lineNumber":35,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":36,"author":{"gitId":"praj-bellakka"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":37,"author":{"gitId":"praj-bellakka"},"content":"}","lastModifiedDate":"2021-10-24"}],"authorContributionMap":{"praj-bellakka":37}},{"path":"src/main/java/fitnus/command/Command.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"siyuancheng178"},"content":"package fitnus.command;","lastModifiedDate":"2021-10-07"},{"lineNumber":2,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":3,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.database.EntryDatabase;","lastModifiedDate":"2021-10-12"},{"lineNumber":4,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.database.MealPlanDatabase;","lastModifiedDate":"2021-10-24"},{"lineNumber":5,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.exception.FitNusException;","lastModifiedDate":"2021-10-12"},{"lineNumber":6,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.database.FoodDatabase;","lastModifiedDate":"2021-10-12"},{"lineNumber":7,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.utility.User;","lastModifiedDate":"2021-10-12"},{"lineNumber":8,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":9,"author":{"gitId":"siyuancheng178"},"content":"public abstract class Command {","lastModifiedDate":"2021-10-07"},{"lineNumber":10,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":11,"author":{"gitId":"praj-bellakka"},"content":"    public abstract String execute(EntryDatabase ed, FoodDatabase fd, MealPlanDatabase md, User us)","lastModifiedDate":"2021-10-25"},{"lineNumber":12,"author":{"gitId":"praj-bellakka"},"content":"            throws FitNusException;","lastModifiedDate":"2021-10-25"},{"lineNumber":13,"author":{"gitId":"siyuancheng178"},"content":"}","lastModifiedDate":"2021-10-07"}],"authorContributionMap":{"kengjit":1,"siyuancheng178":5,"praj-bellakka":7}},{"path":"src/main/java/fitnus/command/CreateMealPlanCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"praj-bellakka"},"content":"package fitnus.command;","lastModifiedDate":"2021-10-24"},{"lineNumber":2,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":3,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.database.EntryDatabase;","lastModifiedDate":"2021-10-24"},{"lineNumber":4,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.database.FoodDatabase;","lastModifiedDate":"2021-10-24"},{"lineNumber":5,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.database.MealPlanDatabase;","lastModifiedDate":"2021-10-24"},{"lineNumber":6,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.exception.FitNusException;","lastModifiedDate":"2021-10-24"},{"lineNumber":7,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.tracker.Food;","lastModifiedDate":"2021-10-24"},{"lineNumber":8,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.tracker.MealPlan;","lastModifiedDate":"2021-10-24"},{"lineNumber":9,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.utility.User;","lastModifiedDate":"2021-10-24"},{"lineNumber":10,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":11,"author":{"gitId":"praj-bellakka"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-24"},{"lineNumber":12,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":13,"author":{"gitId":"praj-bellakka"},"content":"public class CreateMealPlanCommand extends Command {","lastModifiedDate":"2021-10-24"},{"lineNumber":14,"author":{"gitId":"praj-bellakka"},"content":"    private final ArrayList\u003cFood\u003e mealFood;","lastModifiedDate":"2021-10-24"},{"lineNumber":15,"author":{"gitId":"praj-bellakka"},"content":"    private final String mealPlanName;","lastModifiedDate":"2021-10-24"},{"lineNumber":16,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":17,"author":{"gitId":"praj-bellakka"},"content":"    public CreateMealPlanCommand(ArrayList\u003cFood\u003e mealFood, String mealPlanName) {","lastModifiedDate":"2021-10-24"},{"lineNumber":18,"author":{"gitId":"praj-bellakka"},"content":"        this.mealFood \u003d mealFood;","lastModifiedDate":"2021-10-24"},{"lineNumber":19,"author":{"gitId":"praj-bellakka"},"content":"        this.mealPlanName \u003d mealPlanName;","lastModifiedDate":"2021-10-24"},{"lineNumber":20,"author":{"gitId":"praj-bellakka"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":21,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":22,"author":{"gitId":"praj-bellakka"},"content":"    @Override","lastModifiedDate":"2021-10-24"},{"lineNumber":23,"author":{"gitId":"praj-bellakka"},"content":"    public String execute(EntryDatabase ed, FoodDatabase fd, MealPlanDatabase md, User us) throws FitNusException {","lastModifiedDate":"2021-10-24"},{"lineNumber":24,"author":{"gitId":"praj-bellakka"},"content":"        MealPlan newMealPlan \u003d new MealPlan(mealPlanName, mealFood);","lastModifiedDate":"2021-10-24"},{"lineNumber":25,"author":{"gitId":"praj-bellakka"},"content":"        System.out.println(\"Adding items to meal plan...\");","lastModifiedDate":"2021-11-04"},{"lineNumber":26,"author":{"gitId":"praj-bellakka"},"content":"        md.addMealPlan(newMealPlan);","lastModifiedDate":"2021-10-24"},{"lineNumber":27,"author":{"gitId":"praj-bellakka"},"content":"        newMealPlan.toString();","lastModifiedDate":"2021-10-25"},{"lineNumber":28,"author":{"gitId":"praj-bellakka"},"content":"        return \"You have successfully added the following Meal plan: \" + newMealPlan.getMealPlanName();","lastModifiedDate":"2021-10-25"},{"lineNumber":29,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":30,"author":{"gitId":"praj-bellakka"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":31,"author":{"gitId":"praj-bellakka"},"content":"}","lastModifiedDate":"2021-10-24"}],"authorContributionMap":{"praj-bellakka":31}},{"path":"src/main/java/fitnus/command/DeleteEntryCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"siyuancheng178"},"content":"package fitnus.command;","lastModifiedDate":"2021-10-07"},{"lineNumber":2,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":3,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.database.MealPlanDatabase;","lastModifiedDate":"2021-10-24"},{"lineNumber":4,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.tracker.Entry;","lastModifiedDate":"2021-10-12"},{"lineNumber":5,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.database.EntryDatabase;","lastModifiedDate":"2021-10-12"},{"lineNumber":6,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.database.FoodDatabase;","lastModifiedDate":"2021-10-12"},{"lineNumber":7,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.exception.FitNusException;","lastModifiedDate":"2021-10-12"},{"lineNumber":8,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.utility.User;","lastModifiedDate":"2021-10-12"},{"lineNumber":9,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":10,"author":{"gitId":"kengjit"},"content":"public class DeleteEntryCommand extends Command {","lastModifiedDate":"2021-10-24"},{"lineNumber":11,"author":{"gitId":"kengjit"},"content":"    private final int index;","lastModifiedDate":"2021-10-07"},{"lineNumber":12,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":13,"author":{"gitId":"kengjit"},"content":"    public DeleteEntryCommand(int index) {","lastModifiedDate":"2021-10-24"},{"lineNumber":14,"author":{"gitId":"kengjit"},"content":"        this.index \u003d index;","lastModifiedDate":"2021-10-08"},{"lineNumber":15,"author":{"gitId":"kengjit"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":16,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":17,"author":{"gitId":"siyuancheng178"},"content":"    @Override","lastModifiedDate":"2021-10-07"},{"lineNumber":18,"author":{"gitId":"praj-bellakka"},"content":"    public String execute(EntryDatabase ed, FoodDatabase fd, MealPlanDatabase md, User us) throws FitNusException {","lastModifiedDate":"2021-10-24"},{"lineNumber":19,"author":{"gitId":"kengjit"},"content":"        Entry deletedEntry \u003d ed.getEntryAtIndex(index);","lastModifiedDate":"2021-10-12"},{"lineNumber":20,"author":{"gitId":"kengjit"},"content":"        ed.deleteEntry(index);","lastModifiedDate":"2021-10-07"},{"lineNumber":21,"author":{"gitId":"kengjit"},"content":"        return \"You have successfully deleted \" + deletedEntry.getFood();","lastModifiedDate":"2021-10-12"},{"lineNumber":22,"author":{"gitId":"siyuancheng178"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":23,"author":{"gitId":"siyuancheng178"},"content":"}","lastModifiedDate":"2021-10-07"}],"authorContributionMap":{"kengjit":10,"siyuancheng178":6,"praj-bellakka":7}},{"path":"src/main/java/fitnus/command/DeleteFoodCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"siyuancheng178"},"content":"package fitnus.command;","lastModifiedDate":"2021-10-07"},{"lineNumber":2,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":3,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.database.EntryDatabase;","lastModifiedDate":"2021-10-12"},{"lineNumber":4,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.database.FoodDatabase;","lastModifiedDate":"2021-10-12"},{"lineNumber":5,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.database.MealPlanDatabase;","lastModifiedDate":"2021-10-25"},{"lineNumber":6,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.exception.FitNusException;","lastModifiedDate":"2021-10-12"},{"lineNumber":7,"author":{"gitId":"kengjit"},"content":"import fitnus.tracker.Food;","lastModifiedDate":"2021-10-24"},{"lineNumber":8,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.utility.User;","lastModifiedDate":"2021-10-12"},{"lineNumber":9,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":10,"author":{"gitId":"kengjit"},"content":"public class DeleteFoodCommand extends Command {","lastModifiedDate":"2021-10-24"},{"lineNumber":11,"author":{"gitId":"kengjit"},"content":"    private final int index;","lastModifiedDate":"2021-10-07"},{"lineNumber":12,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":13,"author":{"gitId":"kengjit"},"content":"    public DeleteFoodCommand(int index) {","lastModifiedDate":"2021-10-24"},{"lineNumber":14,"author":{"gitId":"kengjit"},"content":"        this.index \u003d index;","lastModifiedDate":"2021-10-08"},{"lineNumber":15,"author":{"gitId":"kengjit"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":16,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":17,"author":{"gitId":"siyuancheng178"},"content":"    @Override","lastModifiedDate":"2021-10-07"},{"lineNumber":18,"author":{"gitId":"praj-bellakka"},"content":"    public String execute(EntryDatabase ed, FoodDatabase fd, MealPlanDatabase md, User us) throws FitNusException {","lastModifiedDate":"2021-10-24"},{"lineNumber":19,"author":{"gitId":"kengjit"},"content":"        Food deletedFood \u003d fd.getFoodAtIndex(index);","lastModifiedDate":"2021-10-24"},{"lineNumber":20,"author":{"gitId":"kengjit"},"content":"        fd.deleteFood(index);","lastModifiedDate":"2021-10-24"},{"lineNumber":21,"author":{"gitId":"kengjit"},"content":"        return \"You have successfully deleted \" + deletedFood;","lastModifiedDate":"2021-10-24"},{"lineNumber":22,"author":{"gitId":"siyuancheng178"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":23,"author":{"gitId":"siyuancheng178"},"content":"}","lastModifiedDate":"2021-10-07"}],"authorContributionMap":{"kengjit":11,"siyuancheng178":6,"praj-bellakka":6}},{"path":"src/main/java/fitnus/command/EditFoodEntryCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"kengjit"},"content":"package fitnus.command;","lastModifiedDate":"2021-10-20"},{"lineNumber":2,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":3,"author":{"gitId":"kengjit"},"content":"import fitnus.database.EntryDatabase;","lastModifiedDate":"2021-10-20"},{"lineNumber":4,"author":{"gitId":"kengjit"},"content":"import fitnus.database.FoodDatabase;","lastModifiedDate":"2021-10-20"},{"lineNumber":5,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.database.MealPlanDatabase;","lastModifiedDate":"2021-10-24"},{"lineNumber":6,"author":{"gitId":"kengjit"},"content":"import fitnus.exception.FitNusException;","lastModifiedDate":"2021-10-20"},{"lineNumber":7,"author":{"gitId":"kengjit"},"content":"import fitnus.tracker.Food;","lastModifiedDate":"2021-10-20"},{"lineNumber":8,"author":{"gitId":"kengjit"},"content":"import fitnus.utility.User;","lastModifiedDate":"2021-10-20"},{"lineNumber":9,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":10,"author":{"gitId":"kengjit"},"content":"public class EditFoodEntryCommand extends Command {","lastModifiedDate":"2021-10-20"},{"lineNumber":11,"author":{"gitId":"kengjit"},"content":"    private final int index;","lastModifiedDate":"2021-10-20"},{"lineNumber":12,"author":{"gitId":"kengjit"},"content":"    private final String foodName;","lastModifiedDate":"2021-10-20"},{"lineNumber":13,"author":{"gitId":"kengjit"},"content":"    private final int calories;","lastModifiedDate":"2021-10-20"},{"lineNumber":14,"author":{"gitId":"kengjit"},"content":"    private final Food food;","lastModifiedDate":"2021-10-20"},{"lineNumber":15,"author":{"gitId":"kengjit"},"content":"    private final boolean isCustom;","lastModifiedDate":"2021-10-20"},{"lineNumber":16,"author":{"gitId":"brendanlsz"},"content":"    private final Food.FoodType type;","lastModifiedDate":"2021-10-22"},{"lineNumber":17,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":18,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":19,"author":{"gitId":"kengjit"},"content":"    public EditFoodEntryCommand(int index, Food food) {","lastModifiedDate":"2021-10-24"},{"lineNumber":20,"author":{"gitId":"kengjit"},"content":"        this.index \u003d index;","lastModifiedDate":"2021-10-20"},{"lineNumber":21,"author":{"gitId":"kengjit"},"content":"        this.food \u003d food;","lastModifiedDate":"2021-10-20"},{"lineNumber":22,"author":{"gitId":"kengjit"},"content":"        this.foodName \u003d null;","lastModifiedDate":"2021-10-20"},{"lineNumber":23,"author":{"gitId":"kengjit"},"content":"        this.calories \u003d -1;","lastModifiedDate":"2021-10-20"},{"lineNumber":24,"author":{"gitId":"kengjit"},"content":"        this.isCustom \u003d false;","lastModifiedDate":"2021-10-20"},{"lineNumber":25,"author":{"gitId":"kengjit"},"content":"        this.type \u003d food.getType();","lastModifiedDate":"2021-10-24"},{"lineNumber":26,"author":{"gitId":"kengjit"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":27,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":28,"author":{"gitId":"brendanlsz"},"content":"    public EditFoodEntryCommand(int index, String foodName, int calories, Food.FoodType type) {","lastModifiedDate":"2021-10-22"},{"lineNumber":29,"author":{"gitId":"kengjit"},"content":"        this.index \u003d index;","lastModifiedDate":"2021-10-20"},{"lineNumber":30,"author":{"gitId":"kengjit"},"content":"        this.foodName \u003d foodName;","lastModifiedDate":"2021-10-20"},{"lineNumber":31,"author":{"gitId":"kengjit"},"content":"        this.calories \u003d calories;","lastModifiedDate":"2021-10-20"},{"lineNumber":32,"author":{"gitId":"kengjit"},"content":"        this.food \u003d null;","lastModifiedDate":"2021-10-20"},{"lineNumber":33,"author":{"gitId":"kengjit"},"content":"        this.isCustom \u003d true;","lastModifiedDate":"2021-10-20"},{"lineNumber":34,"author":{"gitId":"brendanlsz"},"content":"        this.type \u003d type;","lastModifiedDate":"2021-10-22"},{"lineNumber":35,"author":{"gitId":"kengjit"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":36,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":37,"author":{"gitId":"kengjit"},"content":"    @Override","lastModifiedDate":"2021-10-20"},{"lineNumber":38,"author":{"gitId":"praj-bellakka"},"content":"    public String execute(EntryDatabase ed, FoodDatabase fd, MealPlanDatabase md, User us) throws FitNusException {","lastModifiedDate":"2021-10-24"},{"lineNumber":39,"author":{"gitId":"kengjit"},"content":"        if (isCustom) {","lastModifiedDate":"2021-10-20"},{"lineNumber":40,"author":{"gitId":"brendanlsz"},"content":"            Food customFood \u003d new Food(foodName, calories, type);","lastModifiedDate":"2021-10-22"},{"lineNumber":41,"author":{"gitId":"kengjit"},"content":"            ed.editEntryAtIndex(index, customFood);","lastModifiedDate":"2021-10-20"},{"lineNumber":42,"author":{"gitId":"kengjit"},"content":"            fd.addFood(customFood);","lastModifiedDate":"2021-10-20"},{"lineNumber":43,"author":{"gitId":"kengjit"},"content":"            return \"Entry successfully edited to \" + customFood;","lastModifiedDate":"2021-10-20"},{"lineNumber":44,"author":{"gitId":"kengjit"},"content":"        } else {","lastModifiedDate":"2021-10-20"},{"lineNumber":45,"author":{"gitId":"kengjit"},"content":"            ed.editEntryAtIndex(index, food);","lastModifiedDate":"2021-10-20"},{"lineNumber":46,"author":{"gitId":"kengjit"},"content":"            return \"Entry successfully edited to \" + food;","lastModifiedDate":"2021-10-20"},{"lineNumber":47,"author":{"gitId":"kengjit"},"content":"        }","lastModifiedDate":"2021-10-20"},{"lineNumber":48,"author":{"gitId":"kengjit"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":49,"author":{"gitId":"kengjit"},"content":"}","lastModifiedDate":"2021-10-20"}],"authorContributionMap":{"kengjit":42,"brendanlsz":5,"praj-bellakka":2}},{"path":"src/main/java/fitnus/command/ExitCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"siyuancheng178"},"content":"package fitnus.command;","lastModifiedDate":"2021-10-07"},{"lineNumber":2,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":3,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.database.EntryDatabase;","lastModifiedDate":"2021-10-12"},{"lineNumber":4,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.database.FoodDatabase;","lastModifiedDate":"2021-10-12"},{"lineNumber":5,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.database.MealPlanDatabase;","lastModifiedDate":"2021-10-24"},{"lineNumber":6,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.utility.User;","lastModifiedDate":"2021-10-12"},{"lineNumber":7,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":8,"author":{"gitId":"siyuancheng178"},"content":"public class ExitCommand extends Command {","lastModifiedDate":"2021-10-07"},{"lineNumber":9,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":10,"author":{"gitId":"siyuancheng178"},"content":"    @Override","lastModifiedDate":"2021-10-07"},{"lineNumber":11,"author":{"gitId":"praj-bellakka"},"content":"    public String execute(EntryDatabase ed, FoodDatabase fd, MealPlanDatabase md, User us) {","lastModifiedDate":"2021-10-24"},{"lineNumber":12,"author":{"gitId":"siyuancheng178"},"content":"        return \"Thanks for using FitNUS! See you next time\";","lastModifiedDate":"2021-10-07"},{"lineNumber":13,"author":{"gitId":"siyuancheng178"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":14,"author":{"gitId":"siyuancheng178"},"content":"}","lastModifiedDate":"2021-10-07"}],"authorContributionMap":{"kengjit":1,"siyuancheng178":8,"praj-bellakka":5}},{"path":"src/main/java/fitnus/command/FindEntriesCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"brendanlsz"},"content":"package fitnus.command;","lastModifiedDate":"2021-10-19"},{"lineNumber":2,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":3,"author":{"gitId":"brendanlsz"},"content":"import fitnus.database.EntryDatabase;","lastModifiedDate":"2021-10-19"},{"lineNumber":4,"author":{"gitId":"brendanlsz"},"content":"import fitnus.database.FoodDatabase;","lastModifiedDate":"2021-10-19"},{"lineNumber":5,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.database.MealPlanDatabase;","lastModifiedDate":"2021-10-24"},{"lineNumber":6,"author":{"gitId":"brendanlsz"},"content":"import fitnus.exception.FitNusException;","lastModifiedDate":"2021-10-19"},{"lineNumber":7,"author":{"gitId":"brendanlsz"},"content":"import fitnus.tracker.Entry;","lastModifiedDate":"2021-10-19"},{"lineNumber":8,"author":{"gitId":"brendanlsz"},"content":"import fitnus.utility.Ui;","lastModifiedDate":"2021-10-19"},{"lineNumber":9,"author":{"gitId":"brendanlsz"},"content":"import fitnus.utility.User;","lastModifiedDate":"2021-10-19"},{"lineNumber":10,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":11,"author":{"gitId":"brendanlsz"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-19"},{"lineNumber":12,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":13,"author":{"gitId":"brendanlsz"},"content":"public class FindEntriesCommand extends Command {","lastModifiedDate":"2021-11-04"},{"lineNumber":14,"author":{"gitId":"brendanlsz"},"content":"    private final String keyword;","lastModifiedDate":"2021-10-19"},{"lineNumber":15,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":16,"author":{"gitId":"brendanlsz"},"content":"    public FindEntriesCommand(String keyword) {","lastModifiedDate":"2021-11-04"},{"lineNumber":17,"author":{"gitId":"brendanlsz"},"content":"        this.keyword \u003d keyword;","lastModifiedDate":"2021-10-19"},{"lineNumber":18,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":19,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":20,"author":{"gitId":"praj-bellakka"},"content":"    public String execute(EntryDatabase ed, FoodDatabase fd, MealPlanDatabase md, User us) throws FitNusException {","lastModifiedDate":"2021-10-24"},{"lineNumber":21,"author":{"gitId":"brendanlsz"},"content":"        ArrayList\u003cEntry\u003e matchingEntries \u003d ed.findEntries(keyword);","lastModifiedDate":"2021-10-25"},{"lineNumber":22,"author":{"gitId":"brendanlsz"},"content":"        Ui.printMatchingEntries(matchingEntries);","lastModifiedDate":"2021-10-19"},{"lineNumber":23,"author":{"gitId":"brendanlsz"},"content":"        return \"Found \" + matchingEntries.size() + \" matching entries\";","lastModifiedDate":"2021-11-06"},{"lineNumber":24,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":25,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":26,"author":{"gitId":"brendanlsz"},"content":"}","lastModifiedDate":"2021-10-19"}],"authorContributionMap":{"brendanlsz":24,"praj-bellakka":2}},{"path":"src/main/java/fitnus/command/FindFoodsCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"brendanlsz"},"content":"package fitnus.command;","lastModifiedDate":"2021-10-19"},{"lineNumber":2,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":3,"author":{"gitId":"brendanlsz"},"content":"import fitnus.database.EntryDatabase;","lastModifiedDate":"2021-10-19"},{"lineNumber":4,"author":{"gitId":"brendanlsz"},"content":"import fitnus.database.FoodDatabase;","lastModifiedDate":"2021-10-19"},{"lineNumber":5,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.database.MealPlanDatabase;","lastModifiedDate":"2021-10-24"},{"lineNumber":6,"author":{"gitId":"brendanlsz"},"content":"import fitnus.exception.FitNusException;","lastModifiedDate":"2021-10-19"},{"lineNumber":7,"author":{"gitId":"brendanlsz"},"content":"import fitnus.tracker.Food;","lastModifiedDate":"2021-10-19"},{"lineNumber":8,"author":{"gitId":"brendanlsz"},"content":"import fitnus.utility.Ui;","lastModifiedDate":"2021-10-19"},{"lineNumber":9,"author":{"gitId":"brendanlsz"},"content":"import fitnus.utility.User;","lastModifiedDate":"2021-10-19"},{"lineNumber":10,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":11,"author":{"gitId":"brendanlsz"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-19"},{"lineNumber":12,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":13,"author":{"gitId":"brendanlsz"},"content":"public class FindFoodsCommand extends Command {","lastModifiedDate":"2021-11-04"},{"lineNumber":14,"author":{"gitId":"brendanlsz"},"content":"    private final String keyword;","lastModifiedDate":"2021-10-19"},{"lineNumber":15,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":16,"author":{"gitId":"brendanlsz"},"content":"    public FindFoodsCommand(String keyword) {","lastModifiedDate":"2021-11-04"},{"lineNumber":17,"author":{"gitId":"brendanlsz"},"content":"        this.keyword \u003d keyword;","lastModifiedDate":"2021-10-19"},{"lineNumber":18,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":19,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":20,"author":{"gitId":"praj-bellakka"},"content":"    public String execute(EntryDatabase ed, FoodDatabase fd, MealPlanDatabase md, User us) throws FitNusException {","lastModifiedDate":"2021-10-24"},{"lineNumber":21,"author":{"gitId":"brendanlsz"},"content":"        ArrayList\u003cFood\u003e matchingFoods \u003d fd.findFoods(keyword);","lastModifiedDate":"2021-10-25"},{"lineNumber":22,"author":{"gitId":"brendanlsz"},"content":"        if (matchingFoods.size() \u003e 0) {","lastModifiedDate":"2021-11-06"},{"lineNumber":23,"author":{"gitId":"brendanlsz"},"content":"            System.out.println(\"Here are the matching foods in your database:\");","lastModifiedDate":"2021-11-06"},{"lineNumber":24,"author":{"gitId":"brendanlsz"},"content":"            Ui.printMatchingFoods(matchingFoods);","lastModifiedDate":"2021-10-19"},{"lineNumber":25,"author":{"gitId":"brendanlsz"},"content":"        }","lastModifiedDate":"2021-11-06"},{"lineNumber":26,"author":{"gitId":"brendanlsz"},"content":"        return \"Found \" + matchingFoods.size() + \" matching foods\";","lastModifiedDate":"2021-11-06"},{"lineNumber":27,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":28,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":29,"author":{"gitId":"brendanlsz"},"content":"}","lastModifiedDate":"2021-10-19"}],"authorContributionMap":{"brendanlsz":27,"praj-bellakka":2}},{"path":"src/main/java/fitnus/command/GenerateCalorieGoalCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"aaapppsss"},"content":"package fitnus.command;","lastModifiedDate":"2021-10-21"},{"lineNumber":2,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":3,"author":{"gitId":"aaapppsss"},"content":"import fitnus.database.EntryDatabase;","lastModifiedDate":"2021-10-21"},{"lineNumber":4,"author":{"gitId":"aaapppsss"},"content":"import fitnus.database.FoodDatabase;","lastModifiedDate":"2021-10-21"},{"lineNumber":5,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.database.MealPlanDatabase;","lastModifiedDate":"2021-10-24"},{"lineNumber":6,"author":{"gitId":"aaapppsss"},"content":"import fitnus.exception.FitNusException;","lastModifiedDate":"2021-10-21"},{"lineNumber":7,"author":{"gitId":"aaapppsss"},"content":"import fitnus.utility.User;","lastModifiedDate":"2021-10-21"},{"lineNumber":8,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":9,"author":{"gitId":"aaapppsss"},"content":"public class GenerateCalorieGoalCommand extends Command {","lastModifiedDate":"2021-10-21"},{"lineNumber":10,"author":{"gitId":"aaapppsss"},"content":"    private final float weeklyChange;","lastModifiedDate":"2021-10-21"},{"lineNumber":11,"author":{"gitId":"aaapppsss"},"content":"    private final String changeType;","lastModifiedDate":"2021-10-21"},{"lineNumber":12,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":13,"author":{"gitId":"aaapppsss"},"content":"    private static final float MINIMUM_WEEKLY_CHANGE \u003d (float) 0.01;","lastModifiedDate":"2021-11-04"},{"lineNumber":14,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":15,"author":{"gitId":"aaapppsss"},"content":"    public GenerateCalorieGoalCommand(float weeklyChange, String changeType) {","lastModifiedDate":"2021-10-21"},{"lineNumber":16,"author":{"gitId":"aaapppsss"},"content":"        this.weeklyChange \u003d weeklyChange;","lastModifiedDate":"2021-10-21"},{"lineNumber":17,"author":{"gitId":"aaapppsss"},"content":"        this.changeType \u003d changeType;","lastModifiedDate":"2021-10-21"},{"lineNumber":18,"author":{"gitId":"aaapppsss"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":19,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":20,"author":{"gitId":"aaapppsss"},"content":"    @Override","lastModifiedDate":"2021-10-21"},{"lineNumber":21,"author":{"gitId":"praj-bellakka"},"content":"    public String execute(EntryDatabase ed, FoodDatabase fd, MealPlanDatabase md, User us) throws FitNusException {","lastModifiedDate":"2021-10-24"},{"lineNumber":22,"author":{"gitId":"aaapppsss"},"content":"        int newGoal \u003d us.handleGenerateCalorieGoalCommand(weeklyChange, changeType);","lastModifiedDate":"2021-11-04"},{"lineNumber":23,"author":{"gitId":"aaapppsss"},"content":"        us.setCalorieGoal(newGoal);","lastModifiedDate":"2021-10-21"},{"lineNumber":24,"author":{"gitId":"aaapppsss"},"content":"        if (weeklyChange \u003c MINIMUM_WEEKLY_CHANGE) {","lastModifiedDate":"2021-11-04"},{"lineNumber":25,"author":{"gitId":"aaapppsss"},"content":"            return \"Your new calorie goal to maintain your current weight is \"","lastModifiedDate":"2021-11-04"},{"lineNumber":26,"author":{"gitId":"aaapppsss"},"content":"                    + newGoal + \" kcal daily!\";","lastModifiedDate":"2021-11-04"},{"lineNumber":27,"author":{"gitId":"aaapppsss"},"content":"        }","lastModifiedDate":"2021-11-04"},{"lineNumber":28,"author":{"gitId":"aaapppsss"},"content":"        return \"Your new calorie goal to \" + changeType + \" \" + weeklyChange","lastModifiedDate":"2021-10-21"},{"lineNumber":29,"author":{"gitId":"aaapppsss"},"content":"                + \" kg per week is \" + newGoal + \" kcal daily!\";","lastModifiedDate":"2021-10-21"},{"lineNumber":30,"author":{"gitId":"aaapppsss"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":31,"author":{"gitId":"aaapppsss"},"content":"}","lastModifiedDate":"2021-10-21"}],"authorContributionMap":{"aaapppsss":29,"praj-bellakka":2}},{"path":"src/main/java/fitnus/command/HelpCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"siyuancheng178"},"content":"package fitnus.command;","lastModifiedDate":"2021-10-09"},{"lineNumber":2,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":3,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.database.EntryDatabase;","lastModifiedDate":"2021-10-12"},{"lineNumber":4,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.database.FoodDatabase;","lastModifiedDate":"2021-10-12"},{"lineNumber":5,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.database.MealPlanDatabase;","lastModifiedDate":"2021-10-24"},{"lineNumber":6,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.utility.User;","lastModifiedDate":"2021-10-12"},{"lineNumber":7,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":8,"author":{"gitId":"siyuancheng178"},"content":"public class HelpCommand extends Command {","lastModifiedDate":"2021-10-09"},{"lineNumber":9,"author":{"gitId":"siyuancheng178"},"content":"    public HelpCommand() {","lastModifiedDate":"2021-10-09"},{"lineNumber":10,"author":{"gitId":"siyuancheng178"},"content":"        super();","lastModifiedDate":"2021-10-09"},{"lineNumber":11,"author":{"gitId":"siyuancheng178"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":12,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":13,"author":{"gitId":"siyuancheng178"},"content":"    @Override","lastModifiedDate":"2021-10-09"},{"lineNumber":14,"author":{"gitId":"praj-bellakka"},"content":"    public String execute(EntryDatabase ed, FoodDatabase fd, MealPlanDatabase md, User us) {","lastModifiedDate":"2021-10-24"},{"lineNumber":15,"author":{"gitId":"siyuancheng178"},"content":"        return \"------------------ \\n\"","lastModifiedDate":"2021-10-09"},{"lineNumber":16,"author":{"gitId":"siyuancheng178"},"content":"                + \"Here are some commands that you can use!\\n\"","lastModifiedDate":"2021-10-09"},{"lineNumber":17,"author":{"gitId":"siyuancheng178"},"content":"                + \"------------------ \\n\"","lastModifiedDate":"2021-10-09"},{"lineNumber":18,"author":{"gitId":"praj-bellakka"},"content":"                + \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ADD/CREATE/EDIT/REMOVE \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\\n\"","lastModifiedDate":"2021-10-26"},{"lineNumber":19,"author":{"gitId":"kengjit"},"content":"                + \"[X] Add entry: add /MEALTYPE FOOD_NAME (MEALTYPE - /bfast, /lunch, /dinner, /snack)\\n\"","lastModifiedDate":"2021-10-22"},{"lineNumber":20,"author":{"gitId":"praj-bellakka"},"content":"                + \"[X] Add entry from meal plan: add /mealplan /MEALTYPE INDEX_OF_MEALPLAN \"","lastModifiedDate":"2021-10-26"},{"lineNumber":21,"author":{"gitId":"praj-bellakka"},"content":"                + \"(MEALTYPE - /bfast, /lunch, /dinner, /snack)\\n\"","lastModifiedDate":"2021-10-26"},{"lineNumber":22,"author":{"gitId":"praj-bellakka"},"content":"                + \"[X] Create meal plan: create /mealplan MEALPLAN_NAME\\n\"","lastModifiedDate":"2021-10-26"},{"lineNumber":23,"author":{"gitId":"kengjit"},"content":"                + \"[X] Edit existing entry: edit INDEX_OF_ENTRY FOOD_NAME\\n\"","lastModifiedDate":"2021-10-24"},{"lineNumber":24,"author":{"gitId":"kengjit"},"content":"                + \"[X] Delete entry: remove /entry INDEX_OF_FOOD\\n\"","lastModifiedDate":"2021-10-22"},{"lineNumber":25,"author":{"gitId":"kengjit"},"content":"                + \"[X] Delete preset food: remove /food INDEX_OF_FOOD\\n\\n\"","lastModifiedDate":"2021-10-22"},{"lineNumber":26,"author":{"gitId":"kengjit"},"content":"                + \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d LIST \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\\n\"","lastModifiedDate":"2021-10-22"},{"lineNumber":27,"author":{"gitId":"siyuancheng178"},"content":"                + \"[X] List foods in database: list /food\\n\"","lastModifiedDate":"2021-10-09"},{"lineNumber":28,"author":{"gitId":"kengjit"},"content":"                + \"[X] List out entries: list /entry /TIMEFRAME (/day, /week)\\n\"","lastModifiedDate":"2021-10-24"},{"lineNumber":29,"author":{"gitId":"praj-bellakka"},"content":"                + \"[X] List out meal plans: list /mealplan\\n\"","lastModifiedDate":"2021-10-26"},{"lineNumber":30,"author":{"gitId":"aaapppsss"},"content":"                + \"[X] List user data: list /user\\n\"","lastModifiedDate":"2021-10-27"},{"lineNumber":31,"author":{"gitId":"aaapppsss"},"content":"                + \"[X] List past records of weight: list /weight /TIMEFRAME (/month MONTH_INTEGER, /all)\\n\\n\"","lastModifiedDate":"2021-10-28"},{"lineNumber":32,"author":{"gitId":"kengjit"},"content":"                + \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d SEARCH \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\\n\"","lastModifiedDate":"2021-10-22"},{"lineNumber":33,"author":{"gitId":"kengjit"},"content":"                + \"[X] Search food with keyword: find /food KEYWORD\\n\"","lastModifiedDate":"2021-10-22"},{"lineNumber":34,"author":{"gitId":"kengjit"},"content":"                + \"[X] Search entry with keyword: find /entry KEYWORD\\n\\n\"","lastModifiedDate":"2021-10-22"},{"lineNumber":35,"author":{"gitId":"kengjit"},"content":"                + \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d USER \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\\n\"","lastModifiedDate":"2021-10-22"},{"lineNumber":36,"author":{"gitId":"aaapppsss"},"content":"                + \"[X] Set Gender: gender /set GENDER_SYMBOL (GENDER_SYMBOL - m, f)\\n\"","lastModifiedDate":"2021-10-25"},{"lineNumber":37,"author":{"gitId":"kengjit"},"content":"                + \"[X] Set Weight: weight /set WEIGHT\\n\"","lastModifiedDate":"2021-10-22"},{"lineNumber":38,"author":{"gitId":"siyuancheng178"},"content":"                + \"[X] Set Height: height /set HEIGHT\\n\"","lastModifiedDate":"2021-10-27"},{"lineNumber":39,"author":{"gitId":"aaapppsss"},"content":"                + \"[X] Set Age: age /set AGE\\n\"","lastModifiedDate":"2021-10-27"},{"lineNumber":40,"author":{"gitId":"aaapppsss"},"content":"                + \"[X] Set calorie goal: calorie /set CALORIE_GOAL\\n\"","lastModifiedDate":"2021-11-06"},{"lineNumber":41,"author":{"gitId":"siyuancheng178"},"content":"                + \"[X] Set age: age /set AGE\\n\"","lastModifiedDate":"2021-10-27"},{"lineNumber":42,"author":{"gitId":"siyuancheng178"},"content":"                + \"[X] View remaining calories for the day: calorie /remain\\n\"","lastModifiedDate":"2021-10-09"},{"lineNumber":43,"author":{"gitId":"aaapppsss"},"content":"                + \"[X] Auto generate calorie goal: calorie /generate /CHANGE_TYPE WEEKLY_CHANGE_IN_KG \\n\"","lastModifiedDate":"2021-10-26"},{"lineNumber":44,"author":{"gitId":"aaapppsss"},"content":"                + \"      (CHANGE_TYPE - /lose, /gain)\\n\"","lastModifiedDate":"2021-10-26"},{"lineNumber":45,"author":{"gitId":"kengjit"},"content":"                + \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d OTHERS \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\\n\"","lastModifiedDate":"2021-10-22"},{"lineNumber":46,"author":{"gitId":"kengjit"},"content":"                + \"[X] List out available commands: help\\n\"","lastModifiedDate":"2021-10-22"},{"lineNumber":47,"author":{"gitId":"kengjit"},"content":"                + \"[X] Show summary: summary /TIMEFRAME (/week, /month)\\n\"","lastModifiedDate":"2021-10-22"},{"lineNumber":48,"author":{"gitId":"brendanlsz"},"content":"                + \"[X] Recommend food to eat: suggest /FOODTYPE (/meal, /beverage, /snack, /others)\\n\"","lastModifiedDate":"2021-10-23"},{"lineNumber":49,"author":{"gitId":"brendanlsz"},"content":"                + \"[X] Recommend food to eat (sorted): suggest /FOODTYPE /sort\\n\"","lastModifiedDate":"2021-10-23"},{"lineNumber":50,"author":{"gitId":"kengjit"},"content":"                + \"[X] Exit FitNUS: exit\\n\";","lastModifiedDate":"2021-11-04"},{"lineNumber":51,"author":{"gitId":"siyuancheng178"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":52,"author":{"gitId":"siyuancheng178"},"content":"}","lastModifiedDate":"2021-10-09"}],"authorContributionMap":{"kengjit":15,"brendanlsz":2,"siyuancheng178":18,"aaapppsss":7,"praj-bellakka":10}},{"path":"src/main/java/fitnus/command/ListFoodDatabaseCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"siyuancheng178"},"content":"package fitnus.command;","lastModifiedDate":"2021-10-07"},{"lineNumber":2,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":3,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.database.EntryDatabase;","lastModifiedDate":"2021-10-12"},{"lineNumber":4,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.database.FoodDatabase;","lastModifiedDate":"2021-10-12"},{"lineNumber":5,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.database.MealPlanDatabase;","lastModifiedDate":"2021-10-24"},{"lineNumber":6,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.utility.User;","lastModifiedDate":"2021-10-12"},{"lineNumber":7,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":8,"author":{"gitId":"siyuancheng178"},"content":"public class ListFoodDatabaseCommand extends Command {","lastModifiedDate":"2021-10-07"},{"lineNumber":9,"author":{"gitId":"aaapppsss"},"content":"    public ListFoodDatabaseCommand() {","lastModifiedDate":"2021-10-08"},{"lineNumber":10,"author":{"gitId":"siyuancheng178"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":11,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":12,"author":{"gitId":"siyuancheng178"},"content":"    @Override","lastModifiedDate":"2021-10-07"},{"lineNumber":13,"author":{"gitId":"praj-bellakka"},"content":"    public String execute(EntryDatabase ed, FoodDatabase fd, MealPlanDatabase md, User us) {","lastModifiedDate":"2021-10-24"},{"lineNumber":14,"author":{"gitId":"aaapppsss"},"content":"        return fd.listFoods();","lastModifiedDate":"2021-10-08"},{"lineNumber":15,"author":{"gitId":"siyuancheng178"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":16,"author":{"gitId":"siyuancheng178"},"content":"}","lastModifiedDate":"2021-10-07"}],"authorContributionMap":{"siyuancheng178":9,"aaapppsss":2,"praj-bellakka":5}},{"path":"src/main/java/fitnus/command/ListFoodEntryAllCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"siyuancheng178"},"content":"package fitnus.command;","lastModifiedDate":"2021-10-07"},{"lineNumber":2,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":3,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.database.EntryDatabase;","lastModifiedDate":"2021-10-12"},{"lineNumber":4,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.database.FoodDatabase;","lastModifiedDate":"2021-10-12"},{"lineNumber":5,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.database.MealPlanDatabase;","lastModifiedDate":"2021-10-24"},{"lineNumber":6,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.utility.User;","lastModifiedDate":"2021-10-12"},{"lineNumber":7,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":8,"author":{"gitId":"kengjit"},"content":"public class ListFoodEntryAllCommand extends Command {","lastModifiedDate":"2021-10-24"},{"lineNumber":9,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":10,"author":{"gitId":"kengjit"},"content":"    public ListFoodEntryAllCommand() {","lastModifiedDate":"2021-10-24"},{"lineNumber":11,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":12,"author":{"gitId":"aaapppsss"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":13,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":14,"author":{"gitId":"siyuancheng178"},"content":"    @Override","lastModifiedDate":"2021-10-07"},{"lineNumber":15,"author":{"gitId":"praj-bellakka"},"content":"    public String execute(EntryDatabase ed, FoodDatabase fd, MealPlanDatabase md, User us) {","lastModifiedDate":"2021-10-24"},{"lineNumber":16,"author":{"gitId":"kengjit"},"content":"        return ed.listEntries();","lastModifiedDate":"2021-10-24"},{"lineNumber":17,"author":{"gitId":"siyuancheng178"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":18,"author":{"gitId":"siyuancheng178"},"content":"}","lastModifiedDate":"2021-10-07"},{"lineNumber":19,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":20,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-10-07"}],"authorContributionMap":{"kengjit":3,"siyuancheng178":9,"aaapppsss":3,"praj-bellakka":5}},{"path":"src/main/java/fitnus/command/ListFoodEntryCustomCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"kengjit"},"content":"package fitnus.command;","lastModifiedDate":"2021-10-24"},{"lineNumber":2,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":3,"author":{"gitId":"kengjit"},"content":"import fitnus.database.EntryDatabase;","lastModifiedDate":"2021-10-24"},{"lineNumber":4,"author":{"gitId":"kengjit"},"content":"import fitnus.database.FoodDatabase;","lastModifiedDate":"2021-10-24"},{"lineNumber":5,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.database.MealPlanDatabase;","lastModifiedDate":"2021-10-24"},{"lineNumber":6,"author":{"gitId":"kengjit"},"content":"import fitnus.utility.User;","lastModifiedDate":"2021-10-24"},{"lineNumber":7,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":8,"author":{"gitId":"kengjit"},"content":"public class ListFoodEntryCustomCommand extends Command {","lastModifiedDate":"2021-10-26"},{"lineNumber":9,"author":{"gitId":"kengjit"},"content":"    private final int days;","lastModifiedDate":"2021-10-26"},{"lineNumber":10,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":11,"author":{"gitId":"kengjit"},"content":"    public ListFoodEntryCustomCommand(int days) {","lastModifiedDate":"2021-10-26"},{"lineNumber":12,"author":{"gitId":"kengjit"},"content":"        this.days \u003d days;","lastModifiedDate":"2021-10-26"},{"lineNumber":13,"author":{"gitId":"kengjit"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":14,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":15,"author":{"gitId":"kengjit"},"content":"    @Override","lastModifiedDate":"2021-10-24"},{"lineNumber":16,"author":{"gitId":"praj-bellakka"},"content":"    public String execute(EntryDatabase ed, FoodDatabase fd, MealPlanDatabase md, User us) {","lastModifiedDate":"2021-10-24"},{"lineNumber":17,"author":{"gitId":"kengjit"},"content":"        EntryDatabase dayEntry \u003d ed.getPastDaysEntryDatabase(days);","lastModifiedDate":"2021-10-26"},{"lineNumber":18,"author":{"gitId":"kengjit"},"content":"        return dayEntry.listEntries();","lastModifiedDate":"2021-10-24"},{"lineNumber":19,"author":{"gitId":"kengjit"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":20,"author":{"gitId":"kengjit"},"content":"}","lastModifiedDate":"2021-10-24"}],"authorContributionMap":{"kengjit":18,"praj-bellakka":2}},{"path":"src/main/java/fitnus/command/ListMealPlanDatabaseCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"praj-bellakka"},"content":"package fitnus.command;","lastModifiedDate":"2021-10-26"},{"lineNumber":2,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":3,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.database.EntryDatabase;","lastModifiedDate":"2021-10-26"},{"lineNumber":4,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.database.FoodDatabase;","lastModifiedDate":"2021-10-26"},{"lineNumber":5,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.database.MealPlanDatabase;","lastModifiedDate":"2021-10-26"},{"lineNumber":6,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.utility.User;","lastModifiedDate":"2021-10-26"},{"lineNumber":7,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":8,"author":{"gitId":"praj-bellakka"},"content":"public class ListMealPlanDatabaseCommand extends Command {","lastModifiedDate":"2021-10-26"},{"lineNumber":9,"author":{"gitId":"praj-bellakka"},"content":"    public ListMealPlanDatabaseCommand() {","lastModifiedDate":"2021-10-26"},{"lineNumber":10,"author":{"gitId":"praj-bellakka"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":11,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":12,"author":{"gitId":"praj-bellakka"},"content":"    @Override","lastModifiedDate":"2021-10-26"},{"lineNumber":13,"author":{"gitId":"praj-bellakka"},"content":"    public String execute(EntryDatabase ed, FoodDatabase fd, MealPlanDatabase md, User us) {","lastModifiedDate":"2021-10-26"},{"lineNumber":14,"author":{"gitId":"praj-bellakka"},"content":"        return md.listMealPlan();","lastModifiedDate":"2021-10-26"},{"lineNumber":15,"author":{"gitId":"praj-bellakka"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":16,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":17,"author":{"gitId":"praj-bellakka"},"content":"}","lastModifiedDate":"2021-10-26"}],"authorContributionMap":{"praj-bellakka":17}},{"path":"src/main/java/fitnus/command/ListUserDataCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"aaapppsss"},"content":"package fitnus.command;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":3,"author":{"gitId":"aaapppsss"},"content":"import fitnus.database.EntryDatabase;","lastModifiedDate":"2021-10-27"},{"lineNumber":4,"author":{"gitId":"aaapppsss"},"content":"import fitnus.database.FoodDatabase;","lastModifiedDate":"2021-10-27"},{"lineNumber":5,"author":{"gitId":"aaapppsss"},"content":"import fitnus.database.MealPlanDatabase;","lastModifiedDate":"2021-10-27"},{"lineNumber":6,"author":{"gitId":"aaapppsss"},"content":"import fitnus.exception.FitNusException;","lastModifiedDate":"2021-10-27"},{"lineNumber":7,"author":{"gitId":"aaapppsss"},"content":"import fitnus.utility.User;","lastModifiedDate":"2021-10-27"},{"lineNumber":8,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":9,"author":{"gitId":"aaapppsss"},"content":"public class ListUserDataCommand extends Command {","lastModifiedDate":"2021-10-27"},{"lineNumber":10,"author":{"gitId":"aaapppsss"},"content":"    public ListUserDataCommand() {","lastModifiedDate":"2021-10-27"},{"lineNumber":11,"author":{"gitId":"aaapppsss"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":12,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":13,"author":{"gitId":"aaapppsss"},"content":"    @Override","lastModifiedDate":"2021-10-27"},{"lineNumber":14,"author":{"gitId":"aaapppsss"},"content":"    public String execute(EntryDatabase ed, FoodDatabase fd, MealPlanDatabase md, User us) throws FitNusException {","lastModifiedDate":"2021-10-27"},{"lineNumber":15,"author":{"gitId":"aaapppsss"},"content":"        return us.getUserDataDisplay();","lastModifiedDate":"2021-10-27"},{"lineNumber":16,"author":{"gitId":"aaapppsss"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":17,"author":{"gitId":"aaapppsss"},"content":"}","lastModifiedDate":"2021-10-27"}],"authorContributionMap":{"aaapppsss":17}},{"path":"src/main/java/fitnus/command/ListWeightProgressCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"aaapppsss"},"content":"package fitnus.command;","lastModifiedDate":"2021-10-23"},{"lineNumber":2,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":3,"author":{"gitId":"aaapppsss"},"content":"import fitnus.database.EntryDatabase;","lastModifiedDate":"2021-10-23"},{"lineNumber":4,"author":{"gitId":"aaapppsss"},"content":"import fitnus.database.FoodDatabase;","lastModifiedDate":"2021-10-23"},{"lineNumber":5,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.database.MealPlanDatabase;","lastModifiedDate":"2021-10-24"},{"lineNumber":6,"author":{"gitId":"aaapppsss"},"content":"import fitnus.exception.FitNusException;","lastModifiedDate":"2021-10-26"},{"lineNumber":7,"author":{"gitId":"aaapppsss"},"content":"import fitnus.utility.User;","lastModifiedDate":"2021-10-23"},{"lineNumber":8,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":9,"author":{"gitId":"aaapppsss"},"content":"public class ListWeightProgressCommand extends Command {","lastModifiedDate":"2021-10-23"},{"lineNumber":10,"author":{"gitId":"aaapppsss"},"content":"    int month;","lastModifiedDate":"2021-10-28"},{"lineNumber":11,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":12,"author":{"gitId":"aaapppsss"},"content":"    public ListWeightProgressCommand(int month) {","lastModifiedDate":"2021-10-28"},{"lineNumber":13,"author":{"gitId":"aaapppsss"},"content":"        this.month \u003d month;","lastModifiedDate":"2021-10-28"},{"lineNumber":14,"author":{"gitId":"aaapppsss"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":15,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":16,"author":{"gitId":"aaapppsss"},"content":"    @Override","lastModifiedDate":"2021-10-23"},{"lineNumber":17,"author":{"gitId":"aaapppsss"},"content":"    public String execute(EntryDatabase ed, FoodDatabase fd, MealPlanDatabase md, User us) throws FitNusException {","lastModifiedDate":"2021-10-26"},{"lineNumber":18,"author":{"gitId":"aaapppsss"},"content":"        return us.getWeightTrackerDisplay(month);","lastModifiedDate":"2021-11-06"},{"lineNumber":19,"author":{"gitId":"aaapppsss"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":20,"author":{"gitId":"aaapppsss"},"content":"}","lastModifiedDate":"2021-10-23"}],"authorContributionMap":{"aaapppsss":19,"praj-bellakka":1}},{"path":"src/main/java/fitnus/command/SetAgeCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"aaapppsss"},"content":"package fitnus.command;","lastModifiedDate":"2021-10-23"},{"lineNumber":2,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":3,"author":{"gitId":"aaapppsss"},"content":"import fitnus.database.EntryDatabase;","lastModifiedDate":"2021-10-23"},{"lineNumber":4,"author":{"gitId":"aaapppsss"},"content":"import fitnus.database.FoodDatabase;","lastModifiedDate":"2021-10-23"},{"lineNumber":5,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.database.MealPlanDatabase;","lastModifiedDate":"2021-10-24"},{"lineNumber":6,"author":{"gitId":"aaapppsss"},"content":"import fitnus.exception.FitNusException;","lastModifiedDate":"2021-10-23"},{"lineNumber":7,"author":{"gitId":"aaapppsss"},"content":"import fitnus.utility.User;","lastModifiedDate":"2021-10-23"},{"lineNumber":8,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":9,"author":{"gitId":"aaapppsss"},"content":"public class SetAgeCommand extends Command {","lastModifiedDate":"2021-10-23"},{"lineNumber":10,"author":{"gitId":"aaapppsss"},"content":"    private final int age;","lastModifiedDate":"2021-10-23"},{"lineNumber":11,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":12,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":13,"author":{"gitId":"aaapppsss"},"content":"    public SetAgeCommand(int age) {","lastModifiedDate":"2021-10-23"},{"lineNumber":14,"author":{"gitId":"aaapppsss"},"content":"        this.age \u003d age;","lastModifiedDate":"2021-10-23"},{"lineNumber":15,"author":{"gitId":"aaapppsss"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":16,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":17,"author":{"gitId":"aaapppsss"},"content":"    @Override","lastModifiedDate":"2021-10-23"},{"lineNumber":18,"author":{"gitId":"praj-bellakka"},"content":"    public String execute(EntryDatabase ed, FoodDatabase fd, MealPlanDatabase md, User us) throws FitNusException {","lastModifiedDate":"2021-10-24"},{"lineNumber":19,"author":{"gitId":"aaapppsss"},"content":"        us.setAge(this.age);","lastModifiedDate":"2021-10-23"},{"lineNumber":20,"author":{"gitId":"aaapppsss"},"content":"        return \"You have set your age to \" + this.age + \" years old!\";","lastModifiedDate":"2021-10-23"},{"lineNumber":21,"author":{"gitId":"aaapppsss"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":22,"author":{"gitId":"aaapppsss"},"content":"}","lastModifiedDate":"2021-10-23"}],"authorContributionMap":{"aaapppsss":20,"praj-bellakka":2}},{"path":"src/main/java/fitnus/command/SetCalorieGoalCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"siyuancheng178"},"content":"package fitnus.command;","lastModifiedDate":"2021-10-07"},{"lineNumber":2,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":3,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.database.EntryDatabase;","lastModifiedDate":"2021-10-12"},{"lineNumber":4,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.database.MealPlanDatabase;","lastModifiedDate":"2021-10-24"},{"lineNumber":5,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.exception.FitNusException;","lastModifiedDate":"2021-10-12"},{"lineNumber":6,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.database.FoodDatabase;","lastModifiedDate":"2021-10-12"},{"lineNumber":7,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.utility.User;","lastModifiedDate":"2021-10-12"},{"lineNumber":8,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":9,"author":{"gitId":"siyuancheng178"},"content":"public class SetCalorieGoalCommand extends Command {","lastModifiedDate":"2021-10-07"},{"lineNumber":10,"author":{"gitId":"brendanlsz"},"content":"    private final int calorieGoal;","lastModifiedDate":"2021-10-09"},{"lineNumber":11,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":12,"author":{"gitId":"aaapppsss"},"content":"    public SetCalorieGoalCommand(int calorieGoal) {","lastModifiedDate":"2021-10-08"},{"lineNumber":13,"author":{"gitId":"siyuancheng178"},"content":"        this.calorieGoal \u003d calorieGoal;","lastModifiedDate":"2021-10-07"},{"lineNumber":14,"author":{"gitId":"siyuancheng178"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":15,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":16,"author":{"gitId":"siyuancheng178"},"content":"    @Override","lastModifiedDate":"2021-10-07"},{"lineNumber":17,"author":{"gitId":"praj-bellakka"},"content":"    public String execute(EntryDatabase ed, FoodDatabase fd, MealPlanDatabase md, User us) throws FitNusException {","lastModifiedDate":"2021-10-24"},{"lineNumber":18,"author":{"gitId":"aaapppsss"},"content":"        us.setCalorieGoal(calorieGoal);","lastModifiedDate":"2021-10-08"},{"lineNumber":19,"author":{"gitId":"aaapppsss"},"content":"        return \"Your calorie goal has been set to \" + this.calorieGoal + \" kcal!\";","lastModifiedDate":"2021-11-04"},{"lineNumber":20,"author":{"gitId":"siyuancheng178"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":21,"author":{"gitId":"siyuancheng178"},"content":"}","lastModifiedDate":"2021-10-07"}],"authorContributionMap":{"brendanlsz":1,"siyuancheng178":11,"aaapppsss":3,"praj-bellakka":6}},{"path":"src/main/java/fitnus/command/SetGenderCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"siyuancheng178"},"content":"package fitnus.command;","lastModifiedDate":"2021-10-07"},{"lineNumber":2,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":3,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.database.EntryDatabase;","lastModifiedDate":"2021-10-12"},{"lineNumber":4,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.database.FoodDatabase;","lastModifiedDate":"2021-10-12"},{"lineNumber":5,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.database.MealPlanDatabase;","lastModifiedDate":"2021-10-24"},{"lineNumber":6,"author":{"gitId":"siyuancheng178"},"content":"import fitnus.exception.FitNusException;","lastModifiedDate":"2021-10-23"},{"lineNumber":7,"author":{"gitId":"siyuancheng178"},"content":"import fitnus.tracker.Gender;","lastModifiedDate":"2021-10-23"},{"lineNumber":8,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.utility.User;","lastModifiedDate":"2021-10-12"},{"lineNumber":9,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":10,"author":{"gitId":"siyuancheng178"},"content":"public class SetGenderCommand extends Command {","lastModifiedDate":"2021-10-07"},{"lineNumber":11,"author":{"gitId":"aaapppsss"},"content":"    private final Gender gender;","lastModifiedDate":"2021-11-06"},{"lineNumber":12,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":13,"author":{"gitId":"siyuancheng178"},"content":"    private static final String MALE_SYMBOL \u003d \"Male\";","lastModifiedDate":"2021-10-23"},{"lineNumber":14,"author":{"gitId":"siyuancheng178"},"content":"    private static final String FEMALE_SYMBOL \u003d \"Female\";","lastModifiedDate":"2021-10-23"},{"lineNumber":15,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":16,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":17,"author":{"gitId":"aaapppsss"},"content":"    public SetGenderCommand(String genderSymbol) {","lastModifiedDate":"2021-10-08"},{"lineNumber":18,"author":{"gitId":"aaapppsss"},"content":"        this.gender \u003d Gender.findGender(genderSymbol);","lastModifiedDate":"2021-11-06"},{"lineNumber":19,"author":{"gitId":"aaapppsss"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":20,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":21,"author":{"gitId":"siyuancheng178"},"content":"    @Override","lastModifiedDate":"2021-10-07"},{"lineNumber":22,"author":{"gitId":"praj-bellakka"},"content":"    public String execute(EntryDatabase ed, FoodDatabase fd, MealPlanDatabase md, User us) throws FitNusException {","lastModifiedDate":"2021-10-24"},{"lineNumber":23,"author":{"gitId":"aaapppsss"},"content":"        us.setGender(gender);","lastModifiedDate":"2021-11-06"},{"lineNumber":24,"author":{"gitId":"aaapppsss"},"content":"        if (gender.toString().equals(\"f\")) {","lastModifiedDate":"2021-11-06"},{"lineNumber":25,"author":{"gitId":"siyuancheng178"},"content":"            return \"You have set your gender to \" + FEMALE_SYMBOL;","lastModifiedDate":"2021-10-23"},{"lineNumber":26,"author":{"gitId":"siyuancheng178"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":27,"author":{"gitId":"siyuancheng178"},"content":"        return \"You have set your gender to \" + MALE_SYMBOL;","lastModifiedDate":"2021-10-23"},{"lineNumber":28,"author":{"gitId":"aaapppsss"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":29,"author":{"gitId":"siyuancheng178"},"content":"}","lastModifiedDate":"2021-10-07"}],"authorContributionMap":{"kengjit":1,"siyuancheng178":13,"aaapppsss":10,"praj-bellakka":5}},{"path":"src/main/java/fitnus/command/SetHeightCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"aaapppsss"},"content":"package fitnus.command;","lastModifiedDate":"2021-10-23"},{"lineNumber":2,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":3,"author":{"gitId":"aaapppsss"},"content":"import fitnus.database.EntryDatabase;","lastModifiedDate":"2021-10-23"},{"lineNumber":4,"author":{"gitId":"aaapppsss"},"content":"import fitnus.database.FoodDatabase;","lastModifiedDate":"2021-10-23"},{"lineNumber":5,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.database.MealPlanDatabase;","lastModifiedDate":"2021-10-24"},{"lineNumber":6,"author":{"gitId":"aaapppsss"},"content":"import fitnus.exception.FitNusException;","lastModifiedDate":"2021-10-23"},{"lineNumber":7,"author":{"gitId":"aaapppsss"},"content":"import fitnus.utility.User;","lastModifiedDate":"2021-10-23"},{"lineNumber":8,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":9,"author":{"gitId":"aaapppsss"},"content":"public class SetHeightCommand extends Command {","lastModifiedDate":"2021-10-23"},{"lineNumber":10,"author":{"gitId":"brendanlsz"},"content":"    private final int height;","lastModifiedDate":"2021-11-06"},{"lineNumber":11,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":12,"author":{"gitId":"aaapppsss"},"content":"    public SetHeightCommand(int height) {","lastModifiedDate":"2021-10-23"},{"lineNumber":13,"author":{"gitId":"aaapppsss"},"content":"        this.height \u003d height;","lastModifiedDate":"2021-10-23"},{"lineNumber":14,"author":{"gitId":"aaapppsss"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":15,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":16,"author":{"gitId":"aaapppsss"},"content":"    @Override","lastModifiedDate":"2021-10-23"},{"lineNumber":17,"author":{"gitId":"praj-bellakka"},"content":"    public String execute(EntryDatabase ed, FoodDatabase fd, MealPlanDatabase md, User us) throws FitNusException {","lastModifiedDate":"2021-10-24"},{"lineNumber":18,"author":{"gitId":"aaapppsss"},"content":"        us.setHeight(height);","lastModifiedDate":"2021-10-23"},{"lineNumber":19,"author":{"gitId":"aaapppsss"},"content":"        return \"You have set your height to \" + this.height + \" cm!\";","lastModifiedDate":"2021-10-23"},{"lineNumber":20,"author":{"gitId":"aaapppsss"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":21,"author":{"gitId":"aaapppsss"},"content":"}","lastModifiedDate":"2021-10-23"}],"authorContributionMap":{"brendanlsz":1,"aaapppsss":18,"praj-bellakka":2}},{"path":"src/main/java/fitnus/command/SetWeightCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"aaapppsss"},"content":"package fitnus.command;","lastModifiedDate":"2021-10-20"},{"lineNumber":2,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":3,"author":{"gitId":"aaapppsss"},"content":"import fitnus.database.EntryDatabase;","lastModifiedDate":"2021-10-20"},{"lineNumber":4,"author":{"gitId":"aaapppsss"},"content":"import fitnus.database.FoodDatabase;","lastModifiedDate":"2021-10-20"},{"lineNumber":5,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.database.MealPlanDatabase;","lastModifiedDate":"2021-10-24"},{"lineNumber":6,"author":{"gitId":"aaapppsss"},"content":"import fitnus.exception.FitNusException;","lastModifiedDate":"2021-10-23"},{"lineNumber":7,"author":{"gitId":"aaapppsss"},"content":"import fitnus.utility.User;","lastModifiedDate":"2021-10-20"},{"lineNumber":8,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":9,"author":{"gitId":"aaapppsss"},"content":"public class SetWeightCommand extends Command {","lastModifiedDate":"2021-10-20"},{"lineNumber":10,"author":{"gitId":"aaapppsss"},"content":"    private final float newWeight;","lastModifiedDate":"2021-10-20"},{"lineNumber":11,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":12,"author":{"gitId":"aaapppsss"},"content":"    public SetWeightCommand(float newWeight) {","lastModifiedDate":"2021-10-20"},{"lineNumber":13,"author":{"gitId":"aaapppsss"},"content":"        this.newWeight \u003d newWeight;","lastModifiedDate":"2021-10-20"},{"lineNumber":14,"author":{"gitId":"aaapppsss"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":15,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":16,"author":{"gitId":"aaapppsss"},"content":"    @Override","lastModifiedDate":"2021-10-20"},{"lineNumber":17,"author":{"gitId":"praj-bellakka"},"content":"    public String execute(EntryDatabase ed, FoodDatabase fd, MealPlanDatabase md, User us) throws FitNusException {","lastModifiedDate":"2021-10-24"},{"lineNumber":18,"author":{"gitId":"aaapppsss"},"content":"        float newWeightIn2Dp \u003d (float) (Math.round(newWeight * 10.0) / 10.0);","lastModifiedDate":"2021-10-23"},{"lineNumber":19,"author":{"gitId":"aaapppsss"},"content":"        return us.updateWeightAndWeightTracker(newWeightIn2Dp);","lastModifiedDate":"2021-10-23"},{"lineNumber":20,"author":{"gitId":"aaapppsss"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":21,"author":{"gitId":"aaapppsss"},"content":"}","lastModifiedDate":"2021-10-20"}],"authorContributionMap":{"aaapppsss":19,"praj-bellakka":2}},{"path":"src/main/java/fitnus/command/ViewMonthSummaryCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"kengjit"},"content":"package fitnus.command;","lastModifiedDate":"2021-10-21"},{"lineNumber":2,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":3,"author":{"gitId":"kengjit"},"content":"import fitnus.database.EntryDatabase;","lastModifiedDate":"2021-10-21"},{"lineNumber":4,"author":{"gitId":"kengjit"},"content":"import fitnus.database.FoodDatabase;","lastModifiedDate":"2021-10-21"},{"lineNumber":5,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.database.MealPlanDatabase;","lastModifiedDate":"2021-10-24"},{"lineNumber":6,"author":{"gitId":"kengjit"},"content":"import fitnus.exception.FitNusException;","lastModifiedDate":"2021-10-21"},{"lineNumber":7,"author":{"gitId":"kengjit"},"content":"import fitnus.tracker.Summary;","lastModifiedDate":"2021-10-21"},{"lineNumber":8,"author":{"gitId":"kengjit"},"content":"import fitnus.utility.User;","lastModifiedDate":"2021-10-21"},{"lineNumber":9,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":10,"author":{"gitId":"siyuancheng178"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-10-21"},{"lineNumber":11,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":12,"author":{"gitId":"kengjit"},"content":"public class ViewMonthSummaryCommand extends Command {","lastModifiedDate":"2021-10-21"},{"lineNumber":13,"author":{"gitId":"siyuancheng178"},"content":"    public ViewMonthSummaryCommand() {","lastModifiedDate":"2021-11-02"},{"lineNumber":14,"author":{"gitId":"kengjit"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":15,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":16,"author":{"gitId":"kengjit"},"content":"    @Override","lastModifiedDate":"2021-10-21"},{"lineNumber":17,"author":{"gitId":"praj-bellakka"},"content":"    public String execute(EntryDatabase ed, FoodDatabase fd, MealPlanDatabase md, User us) throws FitNusException {","lastModifiedDate":"2021-10-24"},{"lineNumber":18,"author":{"gitId":"kengjit"},"content":"        // Retrieves all entries that fall in the past week","lastModifiedDate":"2021-10-21"},{"lineNumber":19,"author":{"gitId":"siyuancheng178"},"content":"        EntryDatabase pastMonthEntries \u003d ed.getPastMonthEntryDatabase();","lastModifiedDate":"2021-11-02"},{"lineNumber":20,"author":{"gitId":"siyuancheng178"},"content":"        Summary sum \u003d new Summary(pastMonthEntries, LocalDate.now().getDayOfMonth());","lastModifiedDate":"2021-11-02"},{"lineNumber":21,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":22,"author":{"gitId":"kengjit"},"content":"        return sum.generateMonthSummaryReport();","lastModifiedDate":"2021-10-21"},{"lineNumber":23,"author":{"gitId":"kengjit"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":24,"author":{"gitId":"kengjit"},"content":"}","lastModifiedDate":"2021-10-21"}],"authorContributionMap":{"kengjit":17,"siyuancheng178":5,"praj-bellakka":2}},{"path":"src/main/java/fitnus/command/ViewRemainingCalorieCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"siyuancheng178"},"content":"package fitnus.command;","lastModifiedDate":"2021-10-07"},{"lineNumber":2,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":3,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.database.EntryDatabase;","lastModifiedDate":"2021-10-12"},{"lineNumber":4,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.database.FoodDatabase;","lastModifiedDate":"2021-10-12"},{"lineNumber":5,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.database.MealPlanDatabase;","lastModifiedDate":"2021-10-24"},{"lineNumber":6,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.utility.User;","lastModifiedDate":"2021-10-12"},{"lineNumber":7,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":8,"author":{"gitId":"siyuancheng178"},"content":"public class ViewRemainingCalorieCommand extends Command {","lastModifiedDate":"2021-10-07"},{"lineNumber":9,"author":{"gitId":"aaapppsss"},"content":"    public ViewRemainingCalorieCommand() {","lastModifiedDate":"2021-10-08"},{"lineNumber":10,"author":{"gitId":"siyuancheng178"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":11,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":12,"author":{"gitId":"siyuancheng178"},"content":"    @Override","lastModifiedDate":"2021-10-07"},{"lineNumber":13,"author":{"gitId":"praj-bellakka"},"content":"    public String execute(EntryDatabase ed, FoodDatabase fd, MealPlanDatabase md, User us) {","lastModifiedDate":"2021-10-24"},{"lineNumber":14,"author":{"gitId":"aaapppsss"},"content":"        int calorieRemain \u003d us.getCaloriesRemaining(ed);","lastModifiedDate":"2021-10-26"},{"lineNumber":15,"author":{"gitId":"aaapppsss"},"content":"        int calorieGoal \u003d us.getCalorieGoal();","lastModifiedDate":"2021-11-06"},{"lineNumber":16,"author":{"gitId":"siyuancheng178"},"content":"        if (calorieRemain \u003c 0) {","lastModifiedDate":"2021-10-12"},{"lineNumber":17,"author":{"gitId":"aaapppsss"},"content":"            return String.format(\"Oops! You have exceeded the daily calorie goal by %d kcal\", Math.abs(calorieRemain));","lastModifiedDate":"2021-11-06"},{"lineNumber":18,"author":{"gitId":"siyuancheng178"},"content":"        }","lastModifiedDate":"2021-10-12"},{"lineNumber":19,"author":{"gitId":"aaapppsss"},"content":"        return String.format(\"You have \" + calorieRemain","lastModifiedDate":"2021-11-06"},{"lineNumber":20,"author":{"gitId":"aaapppsss"},"content":"                + \" calories remaining before reaching the daily goal of \"","lastModifiedDate":"2021-11-06"},{"lineNumber":21,"author":{"gitId":"aaapppsss"},"content":"                + calorieGoal + \"kcal!\");","lastModifiedDate":"2021-11-06"},{"lineNumber":22,"author":{"gitId":"siyuancheng178"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":23,"author":{"gitId":"siyuancheng178"},"content":"}","lastModifiedDate":"2021-10-07"}],"authorContributionMap":{"siyuancheng178":11,"aaapppsss":7,"praj-bellakka":5}},{"path":"src/main/java/fitnus/command/ViewSuggestionsCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"brendanlsz"},"content":"package fitnus.command;","lastModifiedDate":"2021-10-23"},{"lineNumber":2,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":3,"author":{"gitId":"brendanlsz"},"content":"import fitnus.database.EntryDatabase;","lastModifiedDate":"2021-10-23"},{"lineNumber":4,"author":{"gitId":"brendanlsz"},"content":"import fitnus.database.FoodDatabase;","lastModifiedDate":"2021-10-23"},{"lineNumber":5,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.database.MealPlanDatabase;","lastModifiedDate":"2021-10-24"},{"lineNumber":6,"author":{"gitId":"brendanlsz"},"content":"import fitnus.exception.FitNusException;","lastModifiedDate":"2021-10-23"},{"lineNumber":7,"author":{"gitId":"brendanlsz"},"content":"import fitnus.tracker.Food;","lastModifiedDate":"2021-10-23"},{"lineNumber":8,"author":{"gitId":"brendanlsz"},"content":"import fitnus.utility.Ui;","lastModifiedDate":"2021-10-23"},{"lineNumber":9,"author":{"gitId":"brendanlsz"},"content":"import fitnus.utility.User;","lastModifiedDate":"2021-10-23"},{"lineNumber":10,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":11,"author":{"gitId":"brendanlsz"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-23"},{"lineNumber":12,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":13,"author":{"gitId":"brendanlsz"},"content":"public class ViewSuggestionsCommand extends Command {","lastModifiedDate":"2021-10-23"},{"lineNumber":14,"author":{"gitId":"brendanlsz"},"content":"    private final Food.FoodType type;","lastModifiedDate":"2021-10-23"},{"lineNumber":15,"author":{"gitId":"brendanlsz"},"content":"    private final boolean isSort;","lastModifiedDate":"2021-10-23"},{"lineNumber":16,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":17,"author":{"gitId":"brendanlsz"},"content":"    public ViewSuggestionsCommand(Food.FoodType type, boolean isSort) {","lastModifiedDate":"2021-10-23"},{"lineNumber":18,"author":{"gitId":"brendanlsz"},"content":"        this.type \u003d type;","lastModifiedDate":"2021-10-23"},{"lineNumber":19,"author":{"gitId":"brendanlsz"},"content":"        this.isSort \u003d isSort;","lastModifiedDate":"2021-10-23"},{"lineNumber":20,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":21,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":22,"author":{"gitId":"praj-bellakka"},"content":"    public String execute(EntryDatabase ed, FoodDatabase fd, MealPlanDatabase md, User us) throws FitNusException {","lastModifiedDate":"2021-10-24"},{"lineNumber":23,"author":{"gitId":"brendanlsz"},"content":"        int remaining \u003d us.getCalorieGoal() - ed.getTotalDailyCalorie();","lastModifiedDate":"2021-10-23"},{"lineNumber":24,"author":{"gitId":"brendanlsz"},"content":"        if (remaining \u003c 0) {","lastModifiedDate":"2021-11-06"},{"lineNumber":25,"author":{"gitId":"brendanlsz"},"content":"            return \"Sorry, you have exceeded your daily calorie goal already!\";","lastModifiedDate":"2021-11-06"},{"lineNumber":26,"author":{"gitId":"brendanlsz"},"content":"        }","lastModifiedDate":"2021-11-06"},{"lineNumber":27,"author":{"gitId":"brendanlsz"},"content":"        ArrayList\u003cFood\u003e suggestions \u003d fd.findSuggestions(type, remaining, isSort);","lastModifiedDate":"2021-10-23"},{"lineNumber":28,"author":{"gitId":"brendanlsz"},"content":"        if (suggestions.size() \u003e 0) {","lastModifiedDate":"2021-11-06"},{"lineNumber":29,"author":{"gitId":"brendanlsz"},"content":"            System.out.println(\"Here are some suggestions:\");","lastModifiedDate":"2021-11-06"},{"lineNumber":30,"author":{"gitId":"brendanlsz"},"content":"            Ui.printMatchingFoods(suggestions);","lastModifiedDate":"2021-11-06"},{"lineNumber":31,"author":{"gitId":"brendanlsz"},"content":"        }","lastModifiedDate":"2021-11-06"},{"lineNumber":32,"author":{"gitId":"brendanlsz"},"content":"        return \"Found \" + suggestions.size() + \" suggestions\";","lastModifiedDate":"2021-11-06"},{"lineNumber":33,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":34,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":35,"author":{"gitId":"brendanlsz"},"content":"}","lastModifiedDate":"2021-10-23"}],"authorContributionMap":{"brendanlsz":33,"praj-bellakka":2}},{"path":"src/main/java/fitnus/command/ViewWeekSummaryCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"kengjit"},"content":"package fitnus.command;","lastModifiedDate":"2021-10-21"},{"lineNumber":2,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":3,"author":{"gitId":"kengjit"},"content":"import fitnus.database.EntryDatabase;","lastModifiedDate":"2021-10-21"},{"lineNumber":4,"author":{"gitId":"kengjit"},"content":"import fitnus.database.FoodDatabase;","lastModifiedDate":"2021-10-21"},{"lineNumber":5,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.database.MealPlanDatabase;","lastModifiedDate":"2021-10-24"},{"lineNumber":6,"author":{"gitId":"kengjit"},"content":"import fitnus.exception.FitNusException;","lastModifiedDate":"2021-10-21"},{"lineNumber":7,"author":{"gitId":"kengjit"},"content":"import fitnus.tracker.Summary;","lastModifiedDate":"2021-10-21"},{"lineNumber":8,"author":{"gitId":"kengjit"},"content":"import fitnus.utility.User;","lastModifiedDate":"2021-10-21"},{"lineNumber":9,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":10,"author":{"gitId":"kengjit"},"content":"public class ViewWeekSummaryCommand extends Command {","lastModifiedDate":"2021-10-21"},{"lineNumber":11,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":12,"author":{"gitId":"kengjit"},"content":"    public static final int DAYS_IN_WEEK \u003d 7;","lastModifiedDate":"2021-10-21"},{"lineNumber":13,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":14,"author":{"gitId":"kengjit"},"content":"    public ViewWeekSummaryCommand() {","lastModifiedDate":"2021-10-21"},{"lineNumber":15,"author":{"gitId":"kengjit"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":16,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":17,"author":{"gitId":"kengjit"},"content":"    @Override","lastModifiedDate":"2021-10-21"},{"lineNumber":18,"author":{"gitId":"praj-bellakka"},"content":"    public String execute(EntryDatabase ed, FoodDatabase fd, MealPlanDatabase md, User us) throws FitNusException {","lastModifiedDate":"2021-10-24"},{"lineNumber":19,"author":{"gitId":"kengjit"},"content":"        // Retrieves all entries that fall in the past week","lastModifiedDate":"2021-10-21"},{"lineNumber":20,"author":{"gitId":"kengjit"},"content":"        EntryDatabase pastWeekEntries \u003d ed.getPastDaysEntryDatabase(DAYS_IN_WEEK);","lastModifiedDate":"2021-10-21"},{"lineNumber":21,"author":{"gitId":"siyuancheng178"},"content":"        Summary sum \u003d new Summary(pastWeekEntries, DAYS_IN_WEEK);","lastModifiedDate":"2021-10-21"},{"lineNumber":22,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":23,"author":{"gitId":"kengjit"},"content":"        return sum.generateWeekSummaryReport();","lastModifiedDate":"2021-10-21"},{"lineNumber":24,"author":{"gitId":"kengjit"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":25,"author":{"gitId":"kengjit"},"content":"}","lastModifiedDate":"2021-10-21"}],"authorContributionMap":{"kengjit":22,"siyuancheng178":1,"praj-bellakka":2}},{"path":"src/main/java/fitnus/database/EntryDatabase.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"praj-bellakka"},"content":"package fitnus.database;","lastModifiedDate":"2021-10-12"},{"lineNumber":2,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":3,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":4,"author":{"gitId":"brendanlsz"},"content":"import java.io.BufferedReader;","lastModifiedDate":"2021-10-09"},{"lineNumber":5,"author":{"gitId":"siyuancheng178"},"content":"import java.io.IOException;","lastModifiedDate":"2021-10-06"},{"lineNumber":6,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":7,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.exception.FitNusException;","lastModifiedDate":"2021-10-12"},{"lineNumber":8,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.tracker.Entry;","lastModifiedDate":"2021-10-12"},{"lineNumber":9,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.tracker.Food;","lastModifiedDate":"2021-10-12"},{"lineNumber":10,"author":{"gitId":"siyuancheng178"},"content":"import fitnus.parser.Parser;","lastModifiedDate":"2021-10-06"},{"lineNumber":11,"author":{"gitId":"kengjit"},"content":"import fitnus.tracker.MealType;","lastModifiedDate":"2021-10-19"},{"lineNumber":12,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.utility.Ui;","lastModifiedDate":"2021-10-12"},{"lineNumber":13,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":14,"author":{"gitId":"brendanlsz"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-10-09"},{"lineNumber":15,"author":{"gitId":"kengjit"},"content":"import java.time.Month;","lastModifiedDate":"2021-10-21"},{"lineNumber":16,"author":{"gitId":"siyuancheng178"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-05"},{"lineNumber":17,"author":{"gitId":"brendanlsz"},"content":"import java.util.Collections;","lastModifiedDate":"2021-10-20"},{"lineNumber":18,"author":{"gitId":"brendanlsz"},"content":"import java.util.Comparator;","lastModifiedDate":"2021-10-20"},{"lineNumber":19,"author":{"gitId":"brendanlsz"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2021-10-19"},{"lineNumber":20,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":21,"author":{"gitId":"brendanlsz"},"content":"/**","lastModifiedDate":"2021-11-06"},{"lineNumber":22,"author":{"gitId":"brendanlsz"},"content":" * Keeps a record of Entry objects and handles functionalities related to Entry objects.","lastModifiedDate":"2021-11-06"},{"lineNumber":23,"author":{"gitId":"brendanlsz"},"content":" */","lastModifiedDate":"2021-11-06"},{"lineNumber":24,"author":{"gitId":"siyuancheng178"},"content":"public class EntryDatabase {","lastModifiedDate":"2021-10-05"},{"lineNumber":25,"author":{"gitId":"brendanlsz"},"content":"    private final ArrayList\u003cEntry\u003e entries;","lastModifiedDate":"2021-10-09"},{"lineNumber":26,"author":{"gitId":"brendanlsz"},"content":"    private static final String DELIMITER \u003d \" | \";","lastModifiedDate":"2021-10-12"},{"lineNumber":27,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":28,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-11-05"},{"lineNumber":29,"author":{"gitId":"brendanlsz"},"content":"     * Constructor.","lastModifiedDate":"2021-11-05"},{"lineNumber":30,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-11-05"},{"lineNumber":31,"author":{"gitId":"siyuancheng178"},"content":"    public EntryDatabase() {","lastModifiedDate":"2021-10-05"},{"lineNumber":32,"author":{"gitId":"siyuancheng178"},"content":"        this.entries \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-05"},{"lineNumber":33,"author":{"gitId":"siyuancheng178"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":34,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":35,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-11-05"},{"lineNumber":36,"author":{"gitId":"brendanlsz"},"content":"     * Adds an Entry object to the database.","lastModifiedDate":"2021-11-05"},{"lineNumber":37,"author":{"gitId":"brendanlsz"},"content":"     *","lastModifiedDate":"2021-11-05"},{"lineNumber":38,"author":{"gitId":"brendanlsz"},"content":"     * @param mealType MealType of this Entry (e.g. dinner / lunch).","lastModifiedDate":"2021-11-05"},{"lineNumber":39,"author":{"gitId":"brendanlsz"},"content":"     * @param food     Food object of this Entry.","lastModifiedDate":"2021-11-05"},{"lineNumber":40,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-11-05"},{"lineNumber":41,"author":{"gitId":"kengjit"},"content":"    public void addEntry(MealType mealType, Food food) {","lastModifiedDate":"2021-10-19"},{"lineNumber":42,"author":{"gitId":"kengjit"},"content":"        this.entries.add(new Entry(mealType, food));","lastModifiedDate":"2021-10-19"},{"lineNumber":43,"author":{"gitId":"siyuancheng178"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":44,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":45,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-11-05"},{"lineNumber":46,"author":{"gitId":"kengjit"},"content":"     * Adds an Entry object to the database.","lastModifiedDate":"2021-11-05"},{"lineNumber":47,"author":{"gitId":"brendanlsz"},"content":"     *","lastModifiedDate":"2021-11-05"},{"lineNumber":48,"author":{"gitId":"brendanlsz"},"content":"     * @param entry The Entry object to be added.","lastModifiedDate":"2021-11-05"},{"lineNumber":49,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-11-05"},{"lineNumber":50,"author":{"gitId":"brendanlsz"},"content":"    public void addEntry(Entry entry) {","lastModifiedDate":"2021-10-09"},{"lineNumber":51,"author":{"gitId":"brendanlsz"},"content":"        this.entries.add(entry);","lastModifiedDate":"2021-10-09"},{"lineNumber":52,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":53,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":54,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-11-05"},{"lineNumber":55,"author":{"gitId":"kengjit"},"content":"     * Sorts the Entry objects in the database in ascending order by date.","lastModifiedDate":"2021-11-05"},{"lineNumber":56,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-11-05"},{"lineNumber":57,"author":{"gitId":"brendanlsz"},"content":"    public void sortDatabase() {","lastModifiedDate":"2021-10-20"},{"lineNumber":58,"author":{"gitId":"brendanlsz"},"content":"        entries.sort(Comparator.comparing(Entry::getDate));","lastModifiedDate":"2021-10-20"},{"lineNumber":59,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":60,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":61,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-11-05"},{"lineNumber":62,"author":{"gitId":"brendanlsz"},"content":"     * Removes a specified Entry from the database.","lastModifiedDate":"2021-11-05"},{"lineNumber":63,"author":{"gitId":"brendanlsz"},"content":"     *","lastModifiedDate":"2021-11-05"},{"lineNumber":64,"author":{"gitId":"brendanlsz"},"content":"     * @param index The index of the Entry to remove.","lastModifiedDate":"2021-11-05"},{"lineNumber":65,"author":{"gitId":"brendanlsz"},"content":"     * @throws FitNusException If the index provided is not valid.","lastModifiedDate":"2021-11-05"},{"lineNumber":66,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-11-05"},{"lineNumber":67,"author":{"gitId":"kengjit"},"content":"    public void deleteEntry(int index) throws FitNusException {","lastModifiedDate":"2021-10-08"},{"lineNumber":68,"author":{"gitId":"kengjit"},"content":"        try {","lastModifiedDate":"2021-10-08"},{"lineNumber":69,"author":{"gitId":"kengjit"},"content":"            this.entries.remove(index - 1);","lastModifiedDate":"2021-10-08"},{"lineNumber":70,"author":{"gitId":"kengjit"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2021-10-08"},{"lineNumber":71,"author":{"gitId":"kengjit"},"content":"            throw new FitNusException(\"Sorry the index chosen is invalid! Please try again!\");","lastModifiedDate":"2021-10-08"},{"lineNumber":72,"author":{"gitId":"kengjit"},"content":"        }","lastModifiedDate":"2021-10-08"},{"lineNumber":73,"author":{"gitId":"siyuancheng178"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":74,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":75,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-11-05"},{"lineNumber":76,"author":{"gitId":"brendanlsz"},"content":"     * Computes and returns the total calories consumed today.","lastModifiedDate":"2021-11-05"},{"lineNumber":77,"author":{"gitId":"brendanlsz"},"content":"     *","lastModifiedDate":"2021-11-05"},{"lineNumber":78,"author":{"gitId":"brendanlsz"},"content":"     * @return Calorie intake for today.","lastModifiedDate":"2021-11-05"},{"lineNumber":79,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-11-05"},{"lineNumber":80,"author":{"gitId":"aaapppsss"},"content":"    public int getTotalDailyCalorie() {","lastModifiedDate":"2021-10-21"},{"lineNumber":81,"author":{"gitId":"siyuancheng178"},"content":"        int caloriesConsumed \u003d 0;","lastModifiedDate":"2021-10-07"},{"lineNumber":82,"author":{"gitId":"siyuancheng178"},"content":"        for (Entry e : entries) {","lastModifiedDate":"2021-10-07"},{"lineNumber":83,"author":{"gitId":"brendanlsz"},"content":"            if (e.getDate().equals(LocalDate.now().toString())) {","lastModifiedDate":"2021-10-23"},{"lineNumber":84,"author":{"gitId":"siyuancheng178"},"content":"                caloriesConsumed +\u003d e.getFood().getCalories();","lastModifiedDate":"2021-10-07"},{"lineNumber":85,"author":{"gitId":"siyuancheng178"},"content":"            }","lastModifiedDate":"2021-10-07"},{"lineNumber":86,"author":{"gitId":"aaapppsss"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":87,"author":{"gitId":"kengjit"},"content":"        assert caloriesConsumed \u003e\u003d 0 : \"calories consumed should be non-negative\";","lastModifiedDate":"2021-10-12"},{"lineNumber":88,"author":{"gitId":"siyuancheng178"},"content":"        return caloriesConsumed;","lastModifiedDate":"2021-10-07"},{"lineNumber":89,"author":{"gitId":"siyuancheng178"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":90,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":91,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-11-05"},{"lineNumber":92,"author":{"gitId":"brendanlsz"},"content":"     * Converts the database content to String form for storage.","lastModifiedDate":"2021-11-05"},{"lineNumber":93,"author":{"gitId":"brendanlsz"},"content":"     *","lastModifiedDate":"2021-11-05"},{"lineNumber":94,"author":{"gitId":"brendanlsz"},"content":"     * @return The database content as String.","lastModifiedDate":"2021-11-05"},{"lineNumber":95,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-11-05"},{"lineNumber":96,"author":{"gitId":"aaapppsss"},"content":"    public String convertDatabaseToString() {","lastModifiedDate":"2021-10-07"},{"lineNumber":97,"author":{"gitId":"brendanlsz"},"content":"        StringBuilder lines \u003d new StringBuilder();","lastModifiedDate":"2021-10-12"},{"lineNumber":98,"author":{"gitId":"siyuancheng178"},"content":"        for (Entry e : entries) {","lastModifiedDate":"2021-10-06"},{"lineNumber":99,"author":{"gitId":"brendanlsz"},"content":"            assert e !\u003d null : \"e should not be null\";","lastModifiedDate":"2021-10-10"},{"lineNumber":100,"author":{"gitId":"kengjit"},"content":"            MealType mealType \u003d e.getMealType();","lastModifiedDate":"2021-10-19"},{"lineNumber":101,"author":{"gitId":"brendanlsz"},"content":"            Food food \u003d e.getFood();","lastModifiedDate":"2021-10-12"},{"lineNumber":102,"author":{"gitId":"brendanlsz"},"content":"            String date \u003d e.getDate();","lastModifiedDate":"2021-10-12"},{"lineNumber":103,"author":{"gitId":"brendanlsz"},"content":"            String name \u003d food.getName();","lastModifiedDate":"2021-10-12"},{"lineNumber":104,"author":{"gitId":"brendanlsz"},"content":"            Integer calories \u003d food.getCalories();","lastModifiedDate":"2021-10-12"},{"lineNumber":105,"author":{"gitId":"brendanlsz"},"content":"            String type \u003d food.getType().toString();","lastModifiedDate":"2021-10-22"},{"lineNumber":106,"author":{"gitId":"kengjit"},"content":"            lines.append(mealType).append(DELIMITER).append(name).append(DELIMITER).append(calories).append(DELIMITER)","lastModifiedDate":"2021-10-19"},{"lineNumber":107,"author":{"gitId":"brendanlsz"},"content":"                    .append(date).append(DELIMITER).append(type).append(System.lineSeparator());","lastModifiedDate":"2021-10-22"},{"lineNumber":108,"author":{"gitId":"siyuancheng178"},"content":"        }","lastModifiedDate":"2021-10-06"},{"lineNumber":109,"author":{"gitId":"brendanlsz"},"content":"        return lines.toString();","lastModifiedDate":"2021-10-12"},{"lineNumber":110,"author":{"gitId":"siyuancheng178"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":111,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":112,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-11-05"},{"lineNumber":113,"author":{"gitId":"kengjit"},"content":"     * Preloads the database from data text file.","lastModifiedDate":"2021-11-05"},{"lineNumber":114,"author":{"gitId":"brendanlsz"},"content":"     *","lastModifiedDate":"2021-11-05"},{"lineNumber":115,"author":{"gitId":"brendanlsz"},"content":"     * @param reader Reads from the file.","lastModifiedDate":"2021-11-05"},{"lineNumber":116,"author":{"gitId":"brendanlsz"},"content":"     * @throws IOException If an I/O error occurs.","lastModifiedDate":"2021-11-05"},{"lineNumber":117,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-11-05"},{"lineNumber":118,"author":{"gitId":"brendanlsz"},"content":"    public void preloadDatabase(BufferedReader reader) throws IOException {","lastModifiedDate":"2021-10-25"},{"lineNumber":119,"author":{"gitId":"brendanlsz"},"content":"        int preloadEntryCount \u003d 0;","lastModifiedDate":"2021-10-09"},{"lineNumber":120,"author":{"gitId":"brendanlsz"},"content":"        String line;","lastModifiedDate":"2021-10-09"},{"lineNumber":121,"author":{"gitId":"brendanlsz"},"content":"        while ((line \u003d reader.readLine()) !\u003d null) {","lastModifiedDate":"2021-10-09"},{"lineNumber":122,"author":{"gitId":"brendanlsz"},"content":"            String[] description \u003d line.trim().split(\"\\\\s*[|]\\\\s*\");","lastModifiedDate":"2021-10-09"},{"lineNumber":123,"author":{"gitId":"brendanlsz"},"content":"            try {","lastModifiedDate":"2021-10-10"},{"lineNumber":124,"author":{"gitId":"praj-bellakka"},"content":"                MealType mealType \u003d Parser.parseMealType(description[0], true);","lastModifiedDate":"2021-10-21"},{"lineNumber":125,"author":{"gitId":"kengjit"},"content":"                String name \u003d description[1];","lastModifiedDate":"2021-10-19"},{"lineNumber":126,"author":{"gitId":"kengjit"},"content":"                Integer calories \u003d Integer.parseInt(description[2]);","lastModifiedDate":"2021-10-19"},{"lineNumber":127,"author":{"gitId":"brendanlsz"},"content":"                Food.FoodType type \u003d Parser.parseFoodType(description[4]);","lastModifiedDate":"2021-10-22"},{"lineNumber":128,"author":{"gitId":"brendanlsz"},"content":"                Food food \u003d new Food(name, calories, type);","lastModifiedDate":"2021-10-22"},{"lineNumber":129,"author":{"gitId":"brendanlsz"},"content":"                LocalDate date \u003d Parser.getDate(line);","lastModifiedDate":"2021-10-09"},{"lineNumber":130,"author":{"gitId":"kengjit"},"content":"                Entry entry \u003d new Entry(mealType, food, date);","lastModifiedDate":"2021-10-19"},{"lineNumber":131,"author":{"gitId":"brendanlsz"},"content":"                this.addEntry(entry);","lastModifiedDate":"2021-10-09"},{"lineNumber":132,"author":{"gitId":"brendanlsz"},"content":"                preloadEntryCount++;","lastModifiedDate":"2021-10-09"},{"lineNumber":133,"author":{"gitId":"brendanlsz"},"content":"            } catch (FitNusException e) {","lastModifiedDate":"2021-10-10"},{"lineNumber":134,"author":{"gitId":"brendanlsz"},"content":"                Ui.println(e.getMessage());","lastModifiedDate":"2021-10-10"},{"lineNumber":135,"author":{"gitId":"brendanlsz"},"content":"                Ui.printPreloadDatabaseError();","lastModifiedDate":"2021-10-10"},{"lineNumber":136,"author":{"gitId":"brendanlsz"},"content":"            } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2021-10-10"},{"lineNumber":137,"author":{"gitId":"brendanlsz"},"content":"                Ui.printPreloadDatabaseError();","lastModifiedDate":"2021-10-10"},{"lineNumber":138,"author":{"gitId":"brendanlsz"},"content":"            } catch (NumberFormatException e) {","lastModifiedDate":"2021-10-25"},{"lineNumber":139,"author":{"gitId":"brendanlsz"},"content":"                Ui.println(e.getMessage());","lastModifiedDate":"2021-10-25"},{"lineNumber":140,"author":{"gitId":"brendanlsz"},"content":"            }","lastModifiedDate":"2021-10-10"},{"lineNumber":141,"author":{"gitId":"brendanlsz"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":142,"author":{"gitId":"brendanlsz"},"content":"        Ui.println(\"Preloaded \" + preloadEntryCount + \" entries\");","lastModifiedDate":"2021-11-07"},{"lineNumber":143,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":144,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":145,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-11-05"},{"lineNumber":146,"author":{"gitId":"brendanlsz"},"content":"     * Returns the whole entries ArrayList.","lastModifiedDate":"2021-11-05"},{"lineNumber":147,"author":{"gitId":"brendanlsz"},"content":"     *","lastModifiedDate":"2021-11-05"},{"lineNumber":148,"author":{"gitId":"brendanlsz"},"content":"     * @return The entries ArrayList.","lastModifiedDate":"2021-11-05"},{"lineNumber":149,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-11-05"},{"lineNumber":150,"author":{"gitId":"aaapppsss"},"content":"    public ArrayList\u003cEntry\u003e getEntries() {","lastModifiedDate":"2021-10-06"},{"lineNumber":151,"author":{"gitId":"aaapppsss"},"content":"        return entries;","lastModifiedDate":"2021-10-06"},{"lineNumber":152,"author":{"gitId":"aaapppsss"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":153,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":154,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-11-05"},{"lineNumber":155,"author":{"gitId":"brendanlsz"},"content":"     * Returns the Entry object at the specified index.","lastModifiedDate":"2021-11-05"},{"lineNumber":156,"author":{"gitId":"brendanlsz"},"content":"     *","lastModifiedDate":"2021-11-05"},{"lineNumber":157,"author":{"gitId":"brendanlsz"},"content":"     * @param index Index of the Entry object.","lastModifiedDate":"2021-11-05"},{"lineNumber":158,"author":{"gitId":"brendanlsz"},"content":"     * @return The Entry object at the specified index.","lastModifiedDate":"2021-11-05"},{"lineNumber":159,"author":{"gitId":"brendanlsz"},"content":"     * @throws FitNusException If the index provided is invalid.","lastModifiedDate":"2021-11-05"},{"lineNumber":160,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-11-05"},{"lineNumber":161,"author":{"gitId":"kengjit"},"content":"    public Entry getEntryAtIndex(int index) throws FitNusException {","lastModifiedDate":"2021-10-12"},{"lineNumber":162,"author":{"gitId":"kengjit"},"content":"        try {","lastModifiedDate":"2021-10-12"},{"lineNumber":163,"author":{"gitId":"kengjit"},"content":"            return entries.get(index - 1);","lastModifiedDate":"2021-10-08"},{"lineNumber":164,"author":{"gitId":"kengjit"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2021-10-12"},{"lineNumber":165,"author":{"gitId":"kengjit"},"content":"            throw new FitNusException(\"Sorry the index chosen is invalid! Please try again!\");","lastModifiedDate":"2021-10-12"},{"lineNumber":166,"author":{"gitId":"kengjit"},"content":"        }","lastModifiedDate":"2021-10-12"},{"lineNumber":167,"author":{"gitId":"kengjit"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":168,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":169,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-11-05"},{"lineNumber":170,"author":{"gitId":"brendanlsz"},"content":"     * Returns the database content as a formatted String (in list form).","lastModifiedDate":"2021-11-05"},{"lineNumber":171,"author":{"gitId":"brendanlsz"},"content":"     *","lastModifiedDate":"2021-11-05"},{"lineNumber":172,"author":{"gitId":"brendanlsz"},"content":"     * @return String representation of the database content.","lastModifiedDate":"2021-11-05"},{"lineNumber":173,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-11-05"},{"lineNumber":174,"author":{"gitId":"brendanlsz"},"content":"    public String listEntries() {","lastModifiedDate":"2021-10-09"},{"lineNumber":175,"author":{"gitId":"siyuancheng178"},"content":"        if (entries.size() \u003d\u003d 0) {","lastModifiedDate":"2021-10-31"},{"lineNumber":176,"author":{"gitId":"kengjit"},"content":"            return \"Oops, there are no records found!\";","lastModifiedDate":"2021-11-04"},{"lineNumber":177,"author":{"gitId":"siyuancheng178"},"content":"        }","lastModifiedDate":"2021-10-31"},{"lineNumber":178,"author":{"gitId":"brendanlsz"},"content":"        StringBuilder result \u003d new StringBuilder();","lastModifiedDate":"2021-11-06"},{"lineNumber":179,"author":{"gitId":"brendanlsz"},"content":"        for (int i \u003d 1; i \u003c\u003d entries.size(); i++) {","lastModifiedDate":"2021-10-09"},{"lineNumber":180,"author":{"gitId":"brendanlsz"},"content":"            result.append(String.format(\" %d.%s\", i, entries.get(i - 1)","lastModifiedDate":"2021-11-06"},{"lineNumber":181,"author":{"gitId":"brendanlsz"},"content":"                    + System.lineSeparator()));","lastModifiedDate":"2021-11-06"},{"lineNumber":182,"author":{"gitId":"brendanlsz"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":183,"author":{"gitId":"brendanlsz"},"content":"        return result.toString();","lastModifiedDate":"2021-11-06"},{"lineNumber":184,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":185,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":186,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-11-05"},{"lineNumber":187,"author":{"gitId":"brendanlsz"},"content":"     * Filters Entry objects based on the keyword provided and returns matching","lastModifiedDate":"2021-11-05"},{"lineNumber":188,"author":{"gitId":"brendanlsz"},"content":"     * Entry objects in an ArrayList.","lastModifiedDate":"2021-11-05"},{"lineNumber":189,"author":{"gitId":"brendanlsz"},"content":"     *","lastModifiedDate":"2021-11-05"},{"lineNumber":190,"author":{"gitId":"brendanlsz"},"content":"     * @param keyword The keyword used to filter Entry objects.","lastModifiedDate":"2021-11-05"},{"lineNumber":191,"author":{"gitId":"brendanlsz"},"content":"     * @return An ArrayList containing matching Entry objects.","lastModifiedDate":"2021-11-05"},{"lineNumber":192,"author":{"gitId":"brendanlsz"},"content":"     * @throws FitNusException If the keyword provided is an empty String.","lastModifiedDate":"2021-11-05"},{"lineNumber":193,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-11-05"},{"lineNumber":194,"author":{"gitId":"brendanlsz"},"content":"    public ArrayList\u003cEntry\u003e findEntries(String keyword) throws FitNusException {","lastModifiedDate":"2021-10-25"},{"lineNumber":195,"author":{"gitId":"brendanlsz"},"content":"        if (keyword.equals(\"\")) {","lastModifiedDate":"2021-10-19"},{"lineNumber":196,"author":{"gitId":"brendanlsz"},"content":"            throw new FitNusException(\"Please provide a valid keyword\");","lastModifiedDate":"2021-10-19"},{"lineNumber":197,"author":{"gitId":"brendanlsz"},"content":"        }","lastModifiedDate":"2021-10-19"},{"lineNumber":198,"author":{"gitId":"brendanlsz"},"content":"        return (ArrayList\u003cEntry\u003e) entries.stream()","lastModifiedDate":"2021-10-19"},{"lineNumber":199,"author":{"gitId":"brendanlsz"},"content":"                .filter(t -\u003e t.getFood().getName().contains(keyword))","lastModifiedDate":"2021-10-19"},{"lineNumber":200,"author":{"gitId":"brendanlsz"},"content":"                .collect(Collectors.toList());","lastModifiedDate":"2021-10-19"},{"lineNumber":201,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":202,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":203,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-11-05"},{"lineNumber":204,"author":{"gitId":"kengjit"},"content":"     * Returns an EntryDatabase with all Entry objects added in the past specified number of days.","lastModifiedDate":"2021-11-05"},{"lineNumber":205,"author":{"gitId":"brendanlsz"},"content":"     *","lastModifiedDate":"2021-11-05"},{"lineNumber":206,"author":{"gitId":"brendanlsz"},"content":"     * @param days The specified number of past days.","lastModifiedDate":"2021-11-05"},{"lineNumber":207,"author":{"gitId":"kengjit"},"content":"     * @return An EntryDatabase containing Entry objects from the specified number of past days.","lastModifiedDate":"2021-11-05"},{"lineNumber":208,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-11-05"},{"lineNumber":209,"author":{"gitId":"kengjit"},"content":"    public EntryDatabase getPastDaysEntryDatabase(int days) {","lastModifiedDate":"2021-10-21"},{"lineNumber":210,"author":{"gitId":"kengjit"},"content":"        sortDatabase();","lastModifiedDate":"2021-10-24"},{"lineNumber":211,"author":{"gitId":"kengjit"},"content":"        ArrayList\u003cEntry\u003e totalEntries \u003d getEntries();","lastModifiedDate":"2021-10-21"},{"lineNumber":212,"author":{"gitId":"kengjit"},"content":"        EntryDatabase pastDaysEntries \u003d new EntryDatabase();","lastModifiedDate":"2021-10-21"},{"lineNumber":213,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":214,"author":{"gitId":"kengjit"},"content":"        LocalDate datePointer \u003d LocalDate.now();","lastModifiedDate":"2021-10-21"},{"lineNumber":215,"author":{"gitId":"kengjit"},"content":"        int count \u003d totalEntries.size() - 1;","lastModifiedDate":"2021-10-21"},{"lineNumber":216,"author":{"gitId":"kengjit"},"content":"        for (int i \u003d 0; count \u003e\u003d 0 \u0026\u0026 i \u003c days; i++) {","lastModifiedDate":"2021-10-21"},{"lineNumber":217,"author":{"gitId":"kengjit"},"content":"            while (count \u003e\u003d 0 \u0026\u0026 totalEntries.get(count).getRawDate().equals(datePointer)) {","lastModifiedDate":"2021-11-05"},{"lineNumber":218,"author":{"gitId":"kengjit"},"content":"                pastDaysEntries.addEntry(totalEntries.get(count));","lastModifiedDate":"2021-10-21"},{"lineNumber":219,"author":{"gitId":"kengjit"},"content":"                count--;","lastModifiedDate":"2021-10-21"},{"lineNumber":220,"author":{"gitId":"kengjit"},"content":"            }","lastModifiedDate":"2021-10-21"},{"lineNumber":221,"author":{"gitId":"kengjit"},"content":"            datePointer \u003d datePointer.minusDays(1);","lastModifiedDate":"2021-10-21"},{"lineNumber":222,"author":{"gitId":"kengjit"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":223,"author":{"gitId":"kengjit"},"content":"        Collections.reverse(pastDaysEntries.entries);","lastModifiedDate":"2021-10-24"},{"lineNumber":224,"author":{"gitId":"kengjit"},"content":"        return pastDaysEntries;","lastModifiedDate":"2021-10-21"},{"lineNumber":225,"author":{"gitId":"kengjit"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":226,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":227,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-11-05"},{"lineNumber":228,"author":{"gitId":"kengjit"},"content":"     * Returns an EntryDatabase with all Entry objects added in the current month.","lastModifiedDate":"2021-11-05"},{"lineNumber":229,"author":{"gitId":"brendanlsz"},"content":"     *","lastModifiedDate":"2021-11-05"},{"lineNumber":230,"author":{"gitId":"kengjit"},"content":"     * @return An EntryDatabase containing Entry objects from the current month.","lastModifiedDate":"2021-11-05"},{"lineNumber":231,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-11-05"},{"lineNumber":232,"author":{"gitId":"kengjit"},"content":"    public EntryDatabase getPastMonthEntryDatabase() {","lastModifiedDate":"2021-10-21"},{"lineNumber":233,"author":{"gitId":"kengjit"},"content":"        sortDatabase();","lastModifiedDate":"2021-10-21"},{"lineNumber":234,"author":{"gitId":"kengjit"},"content":"        ArrayList\u003cEntry\u003e totalEntries \u003d getEntries();","lastModifiedDate":"2021-10-21"},{"lineNumber":235,"author":{"gitId":"kengjit"},"content":"        EntryDatabase pastMonthEntries \u003d new EntryDatabase();","lastModifiedDate":"2021-10-21"},{"lineNumber":236,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":237,"author":{"gitId":"siyuancheng178"},"content":"        Month monthPointer \u003d LocalDate.now().getMonth();","lastModifiedDate":"2021-11-02"},{"lineNumber":238,"author":{"gitId":"kengjit"},"content":"        int count \u003d totalEntries.size() - 1;","lastModifiedDate":"2021-10-21"},{"lineNumber":239,"author":{"gitId":"kengjit"},"content":"        while (count \u003e\u003d 0 \u0026\u0026 totalEntries.get(count).getRawDate().getMonth().equals(monthPointer)) {","lastModifiedDate":"2021-11-05"},{"lineNumber":240,"author":{"gitId":"siyuancheng178"},"content":"            pastMonthEntries.addEntry(totalEntries.get(count));","lastModifiedDate":"2021-11-02"},{"lineNumber":241,"author":{"gitId":"siyuancheng178"},"content":"            count--;","lastModifiedDate":"2021-11-02"},{"lineNumber":242,"author":{"gitId":"kengjit"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":243,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":244,"author":{"gitId":"kengjit"},"content":"        return pastMonthEntries;","lastModifiedDate":"2021-10-21"},{"lineNumber":245,"author":{"gitId":"kengjit"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":246,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":247,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-11-05"},{"lineNumber":248,"author":{"gitId":"brendanlsz"},"content":"     * Modifies a specified Entry by setting its associated Food object","lastModifiedDate":"2021-11-05"},{"lineNumber":249,"author":{"gitId":"brendanlsz"},"content":"     * with a new Food object.","lastModifiedDate":"2021-11-05"},{"lineNumber":250,"author":{"gitId":"brendanlsz"},"content":"     *","lastModifiedDate":"2021-11-05"},{"lineNumber":251,"author":{"gitId":"brendanlsz"},"content":"     * @param index The index of the Entry object to modify.","lastModifiedDate":"2021-11-05"},{"lineNumber":252,"author":{"gitId":"brendanlsz"},"content":"     * @param food  The new Food object to associate with the specified Entry.","lastModifiedDate":"2021-11-05"},{"lineNumber":253,"author":{"gitId":"brendanlsz"},"content":"     * @throws FitNusException If the index provided is invalid.","lastModifiedDate":"2021-11-05"},{"lineNumber":254,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-11-05"},{"lineNumber":255,"author":{"gitId":"kengjit"},"content":"    public void editEntryAtIndex(int index, Food food) throws FitNusException {","lastModifiedDate":"2021-10-24"},{"lineNumber":256,"author":{"gitId":"kengjit"},"content":"        try {","lastModifiedDate":"2021-10-24"},{"lineNumber":257,"author":{"gitId":"kengjit"},"content":"            entries.get(index - 1).setFood(food);","lastModifiedDate":"2021-10-20"},{"lineNumber":258,"author":{"gitId":"kengjit"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2021-10-24"},{"lineNumber":259,"author":{"gitId":"kengjit"},"content":"            throw new FitNusException(\"Invalid index!\");","lastModifiedDate":"2021-10-24"},{"lineNumber":260,"author":{"gitId":"kengjit"},"content":"        }","lastModifiedDate":"2021-10-24"},{"lineNumber":261,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":262,"author":{"gitId":"kengjit"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":263,"author":{"gitId":"siyuancheng178"},"content":"}","lastModifiedDate":"2021-10-05"},{"lineNumber":264,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-10-05"}],"authorContributionMap":{"kengjit":71,"brendanlsz":147,"siyuancheng178":33,"aaapppsss":7,"praj-bellakka":6}},{"path":"src/main/java/fitnus/database/FoodDatabase.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"praj-bellakka"},"content":"package fitnus.database;","lastModifiedDate":"2021-10-12"},{"lineNumber":2,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":3,"author":{"gitId":"brendanlsz"},"content":"import fitnus.parser.Parser;","lastModifiedDate":"2021-10-22"},{"lineNumber":4,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.tracker.Food;","lastModifiedDate":"2021-10-12"},{"lineNumber":5,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.utility.Ui;","lastModifiedDate":"2021-10-12"},{"lineNumber":6,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.exception.FitNusException;","lastModifiedDate":"2021-10-12"},{"lineNumber":7,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":8,"author":{"gitId":"brendanlsz"},"content":"import java.io.BufferedReader;","lastModifiedDate":"2021-10-06"},{"lineNumber":9,"author":{"gitId":"brendanlsz"},"content":"import java.io.IOException;","lastModifiedDate":"2021-10-06"},{"lineNumber":10,"author":{"gitId":"aaapppsss"},"content":"import java.io.Reader;","lastModifiedDate":"2021-11-06"},{"lineNumber":11,"author":{"gitId":"aaapppsss"},"content":"import java.io.StringReader;","lastModifiedDate":"2021-11-06"},{"lineNumber":12,"author":{"gitId":"kengjit"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-03"},{"lineNumber":13,"author":{"gitId":"brendanlsz"},"content":"import java.util.Comparator;","lastModifiedDate":"2021-10-23"},{"lineNumber":14,"author":{"gitId":"brendanlsz"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2021-10-19"},{"lineNumber":15,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":16,"author":{"gitId":"brendanlsz"},"content":"/**","lastModifiedDate":"2021-11-06"},{"lineNumber":17,"author":{"gitId":"brendanlsz"},"content":" * Keeps a record of Food objects and handles functionalities related to Food objects.","lastModifiedDate":"2021-11-06"},{"lineNumber":18,"author":{"gitId":"brendanlsz"},"content":" */","lastModifiedDate":"2021-11-06"},{"lineNumber":19,"author":{"gitId":"siyuancheng178"},"content":"public class FoodDatabase {","lastModifiedDate":"2021-10-06"},{"lineNumber":20,"author":{"gitId":"brendanlsz"},"content":"    private final ArrayList\u003cFood\u003e databaseFoods \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-06"},{"lineNumber":21,"author":{"gitId":"brendanlsz"},"content":"    private static final String DELIMITER \u003d \" | \";","lastModifiedDate":"2021-10-06"},{"lineNumber":22,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":23,"author":{"gitId":"aaapppsss"},"content":"    private static final String UTOWN_FOOD_LIST \u003d \"finefood - bbq beef set | 504 | MEAL\\n\"","lastModifiedDate":"2021-11-06"},{"lineNumber":24,"author":{"gitId":"aaapppsss"},"content":"            + \"finefood - bbq chicken set | 510 | MEAL\\n\"","lastModifiedDate":"2021-11-06"},{"lineNumber":25,"author":{"gitId":"aaapppsss"},"content":"            + \"finefood - bibimbap | 400 | MEAL\\n\"","lastModifiedDate":"2021-11-06"},{"lineNumber":26,"author":{"gitId":"aaapppsss"},"content":"            + \"finefood - black pepper beef bibimbap | 405 | MEAL\\n\"","lastModifiedDate":"2021-11-06"},{"lineNumber":27,"author":{"gitId":"aaapppsss"},"content":"            + \"finefood - kimchi shin ramen | 280 | MEAL\\n\"","lastModifiedDate":"2021-11-06"},{"lineNumber":28,"author":{"gitId":"aaapppsss"},"content":"            + \"finefood - beef veg soup set | 237 | MEAL\\n\"","lastModifiedDate":"2021-11-06"},{"lineNumber":29,"author":{"gitId":"aaapppsss"},"content":"            + \"finefood - chicken cutlet + fried ebi bento | 243 | MEAL\\n\"","lastModifiedDate":"2021-11-06"},{"lineNumber":30,"author":{"gitId":"aaapppsss"},"content":"            + \"finefood - salmon + chicken cutlet bento | 515 | MEAL\\n\"","lastModifiedDate":"2021-11-06"},{"lineNumber":31,"author":{"gitId":"aaapppsss"},"content":"            + \"finefood - lemon tea | 90 | BEVERAGE\\n\"","lastModifiedDate":"2021-11-06"},{"lineNumber":32,"author":{"gitId":"aaapppsss"},"content":"            + \"finefood - green tea | 120 | BEVERAGE\\n\"","lastModifiedDate":"2021-11-06"},{"lineNumber":33,"author":{"gitId":"aaapppsss"},"content":"            + \"finefood - oolong tea | 5 | BEVERAGE\\n\"","lastModifiedDate":"2021-11-06"},{"lineNumber":34,"author":{"gitId":"aaapppsss"},"content":"            + \"finefood - milk foam oolong tea | 200 | BEVERAGE\\n\"","lastModifiedDate":"2021-11-06"},{"lineNumber":35,"author":{"gitId":"aaapppsss"},"content":"            + \"finefood - honey green tea | 70 | BEVERAGE\\n\"","lastModifiedDate":"2021-11-06"},{"lineNumber":36,"author":{"gitId":"aaapppsss"},"content":"            + \"finefood - gold grill combo | 605 | MEAL\\n\"","lastModifiedDate":"2021-11-06"},{"lineNumber":37,"author":{"gitId":"aaapppsss"},"content":"            + \"finefood - honey chicken chop rice | 510 | MEAL\\n\"","lastModifiedDate":"2021-11-06"},{"lineNumber":38,"author":{"gitId":"aaapppsss"},"content":"            + \"finefood - x-large chicken chop rice | 579 | MEAL\\n\"","lastModifiedDate":"2021-11-06"},{"lineNumber":39,"author":{"gitId":"aaapppsss"},"content":"            + \"finefood - salted crispy chicken rice | 550 | MEAL\\n\"","lastModifiedDate":"2021-11-06"},{"lineNumber":40,"author":{"gitId":"aaapppsss"},"content":"            + \"finefood - sesame seed chicken rice | 509 | MEAL\\n\"","lastModifiedDate":"2021-11-06"},{"lineNumber":41,"author":{"gitId":"aaapppsss"},"content":"            + \"finefood - taiwanese sweet \u0026 sour chicken rice | 341 | MEAL\\n\"","lastModifiedDate":"2021-11-06"},{"lineNumber":42,"author":{"gitId":"aaapppsss"},"content":"            + \"finefood - teriyaki chicken rice | 430 | MEAL\\n\"","lastModifiedDate":"2021-11-06"},{"lineNumber":43,"author":{"gitId":"aaapppsss"},"content":"            + \"finefood - taiwanese braised pork rice | 434 | MEAL\\n\"","lastModifiedDate":"2021-11-06"},{"lineNumber":44,"author":{"gitId":"aaapppsss"},"content":"            + \"finefood - charcoal roasted duck rice set meal | 673 | MEAL\\n\"","lastModifiedDate":"2021-11-06"},{"lineNumber":45,"author":{"gitId":"aaapppsss"},"content":"            + \"finefood - crispy roasted chicken rice/noodle | 618 | MEAL\\n\"","lastModifiedDate":"2021-11-06"},{"lineNumber":46,"author":{"gitId":"aaapppsss"},"content":"            + \"finefood - rose soy sauce chicken rice/noodle | 605 | MEAL\\n\"","lastModifiedDate":"2021-11-06"},{"lineNumber":47,"author":{"gitId":"aaapppsss"},"content":"            + \"finefood - char siew rice/noodle | 412 | MEAL\\n\"","lastModifiedDate":"2021-11-06"},{"lineNumber":48,"author":{"gitId":"aaapppsss"},"content":"            + \"finefood - duck drumstick rice/noodle | 420 | MEAL\\n\"","lastModifiedDate":"2021-11-06"},{"lineNumber":49,"author":{"gitId":"aaapppsss"},"content":"            + \"finefood - chicken drumstick rice/noodle | 415 | MEAL\\n\"","lastModifiedDate":"2021-11-06"},{"lineNumber":50,"author":{"gitId":"aaapppsss"},"content":"            + \"finefood - happy combo noodle (dry/soup) | 450 | MEAL\\n\"","lastModifiedDate":"2021-11-06"},{"lineNumber":51,"author":{"gitId":"aaapppsss"},"content":"            + \"finefood - signature minipot noodle (dry/soup) | 460 | MEAL\\n\"","lastModifiedDate":"2021-11-06"},{"lineNumber":52,"author":{"gitId":"aaapppsss"},"content":"            + \"finefood - original bak chor mee (dry/soup) | 412 | MEAL\\n\"","lastModifiedDate":"2021-11-06"},{"lineNumber":53,"author":{"gitId":"aaapppsss"},"content":"            + \"finefood - teochew fish ball noodle (dry/soup) | 390 | MEAL\\n\"","lastModifiedDate":"2021-11-06"},{"lineNumber":54,"author":{"gitId":"aaapppsss"},"content":"            + \"finefood - fried wanton noodle (dry/soup) | 395 | MEAL\\n\"","lastModifiedDate":"2021-11-06"},{"lineNumber":55,"author":{"gitId":"aaapppsss"},"content":"            + \"finefood - handmade shrimp dumpling noodle (dry/sooup) | 414 | MEAL\\n\"","lastModifiedDate":"2021-11-06"},{"lineNumber":56,"author":{"gitId":"aaapppsss"},"content":"            + \"finefood - sweet \u0026 sour chicken cube rice | 462 | MEAL\\n\"","lastModifiedDate":"2021-11-06"},{"lineNumber":57,"author":{"gitId":"aaapppsss"},"content":"            + \"finefood - marmite chicken cube rice | 470 | MEAL\\n\"","lastModifiedDate":"2021-11-06"},{"lineNumber":58,"author":{"gitId":"aaapppsss"},"content":"            + \"finefood - kung pao chicken rice | 469 | MEAL\\n\"","lastModifiedDate":"2021-11-06"},{"lineNumber":59,"author":{"gitId":"aaapppsss"},"content":"            + \"finefood - ginger \u0026 onion sliced chicken cube rice | 490 | MEAL\\n\"","lastModifiedDate":"2021-11-06"},{"lineNumber":60,"author":{"gitId":"aaapppsss"},"content":"            + \"finefood - beef fried rice | 505 | MEAL\\n\"","lastModifiedDate":"2021-11-06"},{"lineNumber":61,"author":{"gitId":"aaapppsss"},"content":"            + \"finefood - seafood fried rice | 495 | MEAL\\n\"","lastModifiedDate":"2021-11-06"},{"lineNumber":62,"author":{"gitId":"aaapppsss"},"content":"            + \"finefood - kampung fried rice | 480 | MEAL\\n\"","lastModifiedDate":"2021-11-06"},{"lineNumber":63,"author":{"gitId":"aaapppsss"},"content":"            + \"finefood - 2 vegetables + 1 meat + rice | 380 | MEAL\\n\"","lastModifiedDate":"2021-11-06"},{"lineNumber":64,"author":{"gitId":"aaapppsss"},"content":"            + \"finefood - signature fish bee hoon | 349 | MEAL\\n\"","lastModifiedDate":"2021-11-06"},{"lineNumber":65,"author":{"gitId":"aaapppsss"},"content":"            + \"finefood - seafood clam five grains bee hoon | 297 | MEAL\\n\"","lastModifiedDate":"2021-11-06"},{"lineNumber":66,"author":{"gitId":"aaapppsss"},"content":"            + \"finefood - original fish bee hoon | 300 | MEAL\\n\"","lastModifiedDate":"2021-11-06"},{"lineNumber":67,"author":{"gitId":"aaapppsss"},"content":"            + \"finefood - sour and spicy fish bee hoon | 349 | MEAL\\n\"","lastModifiedDate":"2021-11-06"},{"lineNumber":68,"author":{"gitId":"aaapppsss"},"content":"            + \"finefood - golden soup fish bee hoon | 349 | MEAL\\n\"","lastModifiedDate":"2021-11-06"},{"lineNumber":69,"author":{"gitId":"aaapppsss"},"content":"            + \"finefood - mushroom with chicken rice | 380 | MEAL\\n\"","lastModifiedDate":"2021-11-06"},{"lineNumber":70,"author":{"gitId":"aaapppsss"},"content":"            + \"finefood - minced pork with salted egg rice | 380 | MEAL\\n\"","lastModifiedDate":"2021-11-06"},{"lineNumber":71,"author":{"gitId":"aaapppsss"},"content":"            + \"finefood - minced pork with pickled mustard rice | 395 | MEAL\\n\"","lastModifiedDate":"2021-11-06"},{"lineNumber":72,"author":{"gitId":"aaapppsss"},"content":"            + \"finefood - minced meat peanut porridge | 349 | MEAL\\n\"","lastModifiedDate":"2021-11-06"},{"lineNumber":73,"author":{"gitId":"aaapppsss"},"content":"            + \"finefood - minced meat century egg porridge | 349 | MEAL\\n\"","lastModifiedDate":"2021-11-06"},{"lineNumber":74,"author":{"gitId":"aaapppsss"},"content":"            + \"food clique - chicken chop rice | 600 | MEAL\\n\"","lastModifiedDate":"2021-11-06"},{"lineNumber":75,"author":{"gitId":"aaapppsss"},"content":"            + \"food clique - pork chop fried rice with fish roe | 450 | MEAL\\n\"","lastModifiedDate":"2021-11-06"},{"lineNumber":76,"author":{"gitId":"aaapppsss"},"content":"            + \"food clique - shrimp fried rice with fish roe | 341 | MEAL\\n\"","lastModifiedDate":"2021-11-06"},{"lineNumber":77,"author":{"gitId":"aaapppsss"},"content":"            + \"food clique - vinegar beef noodle | 406 | MEAL\\n\"","lastModifiedDate":"2021-11-06"},{"lineNumber":78,"author":{"gitId":"aaapppsss"},"content":"            + \"food clique - chilli oil chive dumpling (10 pcs) | 450 | SNACK\\n\"","lastModifiedDate":"2021-11-06"},{"lineNumber":79,"author":{"gitId":"aaapppsss"},"content":"            + \"waa cow - original wagyu beef | 489 | MEAL\\n\"","lastModifiedDate":"2021-11-06"},{"lineNumber":80,"author":{"gitId":"aaapppsss"},"content":"            + \"waa cow - mentaiko wagyu beef | 521 | MEAL\\n\"","lastModifiedDate":"2021-11-06"},{"lineNumber":81,"author":{"gitId":"aaapppsss"},"content":"            + \"waa cow - truffle wagyu beef | 529 | MEAL\\n\"","lastModifiedDate":"2021-11-06"},{"lineNumber":82,"author":{"gitId":"aaapppsss"},"content":"            + \"waa cow - original chirashi | 400 | MEAL\\n\"","lastModifiedDate":"2021-11-06"},{"lineNumber":83,"author":{"gitId":"aaapppsss"},"content":"            + \"waa cow - mentaiko salmon | 432 | MEAL\\n\"","lastModifiedDate":"2021-11-06"},{"lineNumber":84,"author":{"gitId":"aaapppsss"},"content":"            + \"waa cow - truffle fries | 300 | SNACK\\n\"","lastModifiedDate":"2021-11-06"},{"lineNumber":85,"author":{"gitId":"aaapppsss"},"content":"            + \"hwang\u0027s - dak bulgogi | 311 | MEAL\\n\"","lastModifiedDate":"2021-11-06"},{"lineNumber":86,"author":{"gitId":"aaapppsss"},"content":"            + \"hwang\u0027s - bibimbap | 490 | MEAL\\n\"","lastModifiedDate":"2021-11-06"},{"lineNumber":87,"author":{"gitId":"aaapppsss"},"content":"            + \"hwang\u0027s - doeji bulgogi | 330 | MEAL\\n\"","lastModifiedDate":"2021-11-06"},{"lineNumber":88,"author":{"gitId":"aaapppsss"},"content":"            + \"hwang\u0027s - gulgogi | 395 | MEAL\\n\"","lastModifiedDate":"2021-11-06"},{"lineNumber":89,"author":{"gitId":"aaapppsss"},"content":"            + \"hwang\u0027s - kimchi jigae | 316 | MEAL\\n\"","lastModifiedDate":"2021-11-06"},{"lineNumber":90,"author":{"gitId":"aaapppsss"},"content":"            + \"hwang\u0027s - la myun | 470 | MEAL\\n\";","lastModifiedDate":"2021-11-06"},{"lineNumber":91,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":92,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-11-02"},{"lineNumber":93,"author":{"gitId":"brendanlsz"},"content":"     * Adds a Food object to the ArrayList databaseFoods.","lastModifiedDate":"2021-11-02"},{"lineNumber":94,"author":{"gitId":"brendanlsz"},"content":"     *","lastModifiedDate":"2021-11-02"},{"lineNumber":95,"author":{"gitId":"brendanlsz"},"content":"     * @param name     Name of the Food object to be added.","lastModifiedDate":"2021-11-02"},{"lineNumber":96,"author":{"gitId":"brendanlsz"},"content":"     * @param calories Calorie value of the Food object to be added.","lastModifiedDate":"2021-11-02"},{"lineNumber":97,"author":{"gitId":"brendanlsz"},"content":"     * @param type     Food type of the Food object to be added.","lastModifiedDate":"2021-11-02"},{"lineNumber":98,"author":{"gitId":"brendanlsz"},"content":"     * @throws FitNusException If the calorie value provided is \u003c\u003d 0.","lastModifiedDate":"2021-11-02"},{"lineNumber":99,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-11-02"},{"lineNumber":100,"author":{"gitId":"brendanlsz"},"content":"    public void addFood(String name, Integer calories, Food.FoodType type) throws FitNusException {","lastModifiedDate":"2021-10-22"},{"lineNumber":101,"author":{"gitId":"brendanlsz"},"content":"        if (calories \u003c 0) {","lastModifiedDate":"2021-11-06"},{"lineNumber":102,"author":{"gitId":"aaapppsss"},"content":"            throw new FitNusException(\"Food must have more than 0 calories!\");","lastModifiedDate":"2021-10-10"},{"lineNumber":103,"author":{"gitId":"aaapppsss"},"content":"        }","lastModifiedDate":"2021-10-10"},{"lineNumber":104,"author":{"gitId":"brendanlsz"},"content":"        Food food \u003d new Food(name, calories, type);","lastModifiedDate":"2021-10-22"},{"lineNumber":105,"author":{"gitId":"brendanlsz"},"content":"        databaseFoods.add(food);","lastModifiedDate":"2021-10-06"},{"lineNumber":106,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":107,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":108,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-11-02"},{"lineNumber":109,"author":{"gitId":"brendanlsz"},"content":"     * Adds a Food object to the ArrayList databaseFoods.","lastModifiedDate":"2021-11-02"},{"lineNumber":110,"author":{"gitId":"brendanlsz"},"content":"     *","lastModifiedDate":"2021-11-02"},{"lineNumber":111,"author":{"gitId":"brendanlsz"},"content":"     * @param food The Food object to be added.","lastModifiedDate":"2021-11-02"},{"lineNumber":112,"author":{"gitId":"brendanlsz"},"content":"     * @throws FitNusException If the calorie value of the Food object to be added \u003c\u003d 0.","lastModifiedDate":"2021-11-02"},{"lineNumber":113,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-11-02"},{"lineNumber":114,"author":{"gitId":"aaapppsss"},"content":"    public void addFood(Food food) throws FitNusException {","lastModifiedDate":"2021-10-10"},{"lineNumber":115,"author":{"gitId":"brendanlsz"},"content":"        assert food !\u003d null : \"food should not be null\";","lastModifiedDate":"2021-10-10"},{"lineNumber":116,"author":{"gitId":"brendanlsz"},"content":"        if (food.getCalories() \u003c 0) {","lastModifiedDate":"2021-11-06"},{"lineNumber":117,"author":{"gitId":"aaapppsss"},"content":"            throw new FitNusException(\"Food must have more than 0 calories!\");","lastModifiedDate":"2021-10-10"},{"lineNumber":118,"author":{"gitId":"aaapppsss"},"content":"        }","lastModifiedDate":"2021-10-10"},{"lineNumber":119,"author":{"gitId":"siyuancheng178"},"content":"        databaseFoods.add(food);","lastModifiedDate":"2021-10-06"},{"lineNumber":120,"author":{"gitId":"siyuancheng178"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":121,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":122,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-11-02"},{"lineNumber":123,"author":{"gitId":"brendanlsz"},"content":"     * Removes a specified Food object from the ArrayList databaseFoods.","lastModifiedDate":"2021-11-02"},{"lineNumber":124,"author":{"gitId":"brendanlsz"},"content":"     *","lastModifiedDate":"2021-11-02"},{"lineNumber":125,"author":{"gitId":"brendanlsz"},"content":"     * @param index Index of the Food object to be removed.","lastModifiedDate":"2021-11-02"},{"lineNumber":126,"author":{"gitId":"brendanlsz"},"content":"     * @throws FitNusException If the index provided is invalid.","lastModifiedDate":"2021-11-02"},{"lineNumber":127,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-11-02"},{"lineNumber":128,"author":{"gitId":"kengjit"},"content":"    public void deleteFood(int index) throws FitNusException {","lastModifiedDate":"2021-10-24"},{"lineNumber":129,"author":{"gitId":"kengjit"},"content":"        try {","lastModifiedDate":"2021-10-24"},{"lineNumber":130,"author":{"gitId":"kengjit"},"content":"            this.databaseFoods.remove(index - 1);","lastModifiedDate":"2021-10-24"},{"lineNumber":131,"author":{"gitId":"kengjit"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2021-10-24"},{"lineNumber":132,"author":{"gitId":"kengjit"},"content":"            throw new FitNusException(\"Sorry the index chosen is invalid! Please try again!\");","lastModifiedDate":"2021-10-24"},{"lineNumber":133,"author":{"gitId":"kengjit"},"content":"        }","lastModifiedDate":"2021-10-24"},{"lineNumber":134,"author":{"gitId":"kengjit"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":135,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":136,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-11-02"},{"lineNumber":137,"author":{"gitId":"brendanlsz"},"content":"     * Returns the Food object at the specified index.","lastModifiedDate":"2021-11-05"},{"lineNumber":138,"author":{"gitId":"brendanlsz"},"content":"     *","lastModifiedDate":"2021-11-02"},{"lineNumber":139,"author":{"gitId":"brendanlsz"},"content":"     * @param index Index of the Food object.","lastModifiedDate":"2021-11-02"},{"lineNumber":140,"author":{"gitId":"brendanlsz"},"content":"     * @return The Food object at the specified index.","lastModifiedDate":"2021-11-05"},{"lineNumber":141,"author":{"gitId":"brendanlsz"},"content":"     * @throws FitNusException If the index provided is invalid.","lastModifiedDate":"2021-11-02"},{"lineNumber":142,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-11-02"},{"lineNumber":143,"author":{"gitId":"siyuancheng178"},"content":"    public Food getFoodAtIndex(int index) throws FitNusException {","lastModifiedDate":"2021-10-31"},{"lineNumber":144,"author":{"gitId":"siyuancheng178"},"content":"        try {","lastModifiedDate":"2021-10-31"},{"lineNumber":145,"author":{"gitId":"kengjit"},"content":"            return databaseFoods.get(index - 1);","lastModifiedDate":"2021-10-06"},{"lineNumber":146,"author":{"gitId":"siyuancheng178"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2021-10-31"},{"lineNumber":147,"author":{"gitId":"siyuancheng178"},"content":"            throw new FitNusException(\"Sorry the index chosen is invalid! Please try again!\");","lastModifiedDate":"2021-10-31"},{"lineNumber":148,"author":{"gitId":"siyuancheng178"},"content":"        }","lastModifiedDate":"2021-10-31"},{"lineNumber":149,"author":{"gitId":"kengjit"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":150,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":151,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-11-02"},{"lineNumber":152,"author":{"gitId":"brendanlsz"},"content":"     * Returns the whole databaseFoods ArrayList.","lastModifiedDate":"2021-11-05"},{"lineNumber":153,"author":{"gitId":"brendanlsz"},"content":"     *","lastModifiedDate":"2021-11-02"},{"lineNumber":154,"author":{"gitId":"brendanlsz"},"content":"     * @return The databaseFoods ArrayList.","lastModifiedDate":"2021-11-05"},{"lineNumber":155,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-11-02"},{"lineNumber":156,"author":{"gitId":"praj-bellakka"},"content":"    public ArrayList\u003cFood\u003e getFoodDatabase() {","lastModifiedDate":"2021-10-24"},{"lineNumber":157,"author":{"gitId":"praj-bellakka"},"content":"        return databaseFoods;","lastModifiedDate":"2021-10-24"},{"lineNumber":158,"author":{"gitId":"praj-bellakka"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":159,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":160,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-11-02"},{"lineNumber":161,"author":{"gitId":"brendanlsz"},"content":"     * Returns the database content as a formatted String (in list form).","lastModifiedDate":"2021-11-02"},{"lineNumber":162,"author":{"gitId":"brendanlsz"},"content":"     *","lastModifiedDate":"2021-11-02"},{"lineNumber":163,"author":{"gitId":"brendanlsz"},"content":"     * @return String representation of the database content.","lastModifiedDate":"2021-11-02"},{"lineNumber":164,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-11-02"},{"lineNumber":165,"author":{"gitId":"siyuancheng178"},"content":"    public String listFoods() {","lastModifiedDate":"2021-10-07"},{"lineNumber":166,"author":{"gitId":"siyuancheng178"},"content":"        if (databaseFoods.size() \u003c 1) {","lastModifiedDate":"2021-10-31"},{"lineNumber":167,"author":{"gitId":"kengjit"},"content":"            return \"Oops, there are no records found!\";","lastModifiedDate":"2021-11-04"},{"lineNumber":168,"author":{"gitId":"siyuancheng178"},"content":"        }","lastModifiedDate":"2021-10-31"},{"lineNumber":169,"author":{"gitId":"brendanlsz"},"content":"        StringBuilder result \u003d new StringBuilder();","lastModifiedDate":"2021-11-06"},{"lineNumber":170,"author":{"gitId":"brendanlsz"},"content":"        for (int i \u003d 1; i \u003c\u003d databaseFoods.size(); i++) {","lastModifiedDate":"2021-10-06"},{"lineNumber":171,"author":{"gitId":"brendanlsz"},"content":"            result.append(String.format(\" %d.%s\", i, databaseFoods.get(i - 1)","lastModifiedDate":"2021-11-06"},{"lineNumber":172,"author":{"gitId":"brendanlsz"},"content":"                    + System.lineSeparator()));","lastModifiedDate":"2021-11-06"},{"lineNumber":173,"author":{"gitId":"brendanlsz"},"content":"        }","lastModifiedDate":"2021-10-06"},{"lineNumber":174,"author":{"gitId":"brendanlsz"},"content":"        return result.toString();","lastModifiedDate":"2021-11-06"},{"lineNumber":175,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":176,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":177,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-11-02"},{"lineNumber":178,"author":{"gitId":"brendanlsz"},"content":"     * Converts the database content to String form for storage.","lastModifiedDate":"2021-11-02"},{"lineNumber":179,"author":{"gitId":"brendanlsz"},"content":"     *","lastModifiedDate":"2021-11-02"},{"lineNumber":180,"author":{"gitId":"brendanlsz"},"content":"     * @return The database content as String.","lastModifiedDate":"2021-11-05"},{"lineNumber":181,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-11-02"},{"lineNumber":182,"author":{"gitId":"brendanlsz"},"content":"    public String convertDatabaseToString() {","lastModifiedDate":"2021-10-06"},{"lineNumber":183,"author":{"gitId":"brendanlsz"},"content":"        StringBuilder lines \u003d new StringBuilder();","lastModifiedDate":"2021-10-06"},{"lineNumber":184,"author":{"gitId":"brendanlsz"},"content":"        for (Food food : databaseFoods) {","lastModifiedDate":"2021-10-06"},{"lineNumber":185,"author":{"gitId":"brendanlsz"},"content":"            lines.append(food.convertToStringForStorage());","lastModifiedDate":"2021-11-02"},{"lineNumber":186,"author":{"gitId":"brendanlsz"},"content":"        }","lastModifiedDate":"2021-10-06"},{"lineNumber":187,"author":{"gitId":"brendanlsz"},"content":"        return lines.toString();","lastModifiedDate":"2021-10-06"},{"lineNumber":188,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":189,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":190,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-11-02"},{"lineNumber":191,"author":{"gitId":"brendanlsz"},"content":"     * Preloads the database.","lastModifiedDate":"2021-11-02"},{"lineNumber":192,"author":{"gitId":"brendanlsz"},"content":"     *","lastModifiedDate":"2021-11-02"},{"lineNumber":193,"author":{"gitId":"brendanlsz"},"content":"     * @param reader Reads from the file.","lastModifiedDate":"2021-11-02"},{"lineNumber":194,"author":{"gitId":"brendanlsz"},"content":"     * @throws IOException     If an I/O error occurs.","lastModifiedDate":"2021-11-02"},{"lineNumber":195,"author":{"gitId":"brendanlsz"},"content":"     * @throws FitNusException If unable to parse Food type.","lastModifiedDate":"2021-11-02"},{"lineNumber":196,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-11-02"},{"lineNumber":197,"author":{"gitId":"brendanlsz"},"content":"    public void preloadDatabase(BufferedReader reader) throws IOException, FitNusException {","lastModifiedDate":"2021-10-25"},{"lineNumber":198,"author":{"gitId":"brendanlsz"},"content":"        int preloadFoodCount \u003d 0;","lastModifiedDate":"2021-10-06"},{"lineNumber":199,"author":{"gitId":"brendanlsz"},"content":"        String line;","lastModifiedDate":"2021-10-06"},{"lineNumber":200,"author":{"gitId":"brendanlsz"},"content":"        while ((line \u003d reader.readLine()) !\u003d null) {","lastModifiedDate":"2021-10-06"},{"lineNumber":201,"author":{"gitId":"aaapppsss"},"content":"            int loadedFoodSuccessfully \u003d loadFood(line);","lastModifiedDate":"2021-11-06"},{"lineNumber":202,"author":{"gitId":"aaapppsss"},"content":"            if (loadedFoodSuccessfully \u003d\u003d 1) {","lastModifiedDate":"2021-11-06"},{"lineNumber":203,"author":{"gitId":"aaapppsss"},"content":"                preloadFoodCount++;","lastModifiedDate":"2021-11-06"},{"lineNumber":204,"author":{"gitId":"aaapppsss"},"content":"            }","lastModifiedDate":"2021-11-06"},{"lineNumber":205,"author":{"gitId":"aaapppsss"},"content":"        }","lastModifiedDate":"2021-11-06"},{"lineNumber":206,"author":{"gitId":"aaapppsss"},"content":"        if (this.databaseFoods.size() \u003d\u003d 0) {","lastModifiedDate":"2021-11-06"},{"lineNumber":207,"author":{"gitId":"aaapppsss"},"content":"            Reader inputString \u003d new StringReader(UTOWN_FOOD_LIST);","lastModifiedDate":"2021-11-06"},{"lineNumber":208,"author":{"gitId":"aaapppsss"},"content":"            BufferedReader newReader \u003d new BufferedReader(inputString);","lastModifiedDate":"2021-11-06"},{"lineNumber":209,"author":{"gitId":"aaapppsss"},"content":"            while ((line \u003d newReader.readLine()) !\u003d null) {","lastModifiedDate":"2021-11-06"},{"lineNumber":210,"author":{"gitId":"aaapppsss"},"content":"                int loadedFoodSuccessfully \u003d loadFood(line);","lastModifiedDate":"2021-11-06"},{"lineNumber":211,"author":{"gitId":"aaapppsss"},"content":"                if (loadedFoodSuccessfully \u003d\u003d 1) {","lastModifiedDate":"2021-11-06"},{"lineNumber":212,"author":{"gitId":"aaapppsss"},"content":"                    preloadFoodCount++;","lastModifiedDate":"2021-11-06"},{"lineNumber":213,"author":{"gitId":"aaapppsss"},"content":"                }","lastModifiedDate":"2021-11-06"},{"lineNumber":214,"author":{"gitId":"aaapppsss"},"content":"            }","lastModifiedDate":"2021-11-06"},{"lineNumber":215,"author":{"gitId":"aaapppsss"},"content":"        }","lastModifiedDate":"2021-11-06"},{"lineNumber":216,"author":{"gitId":"brendanlsz"},"content":"        Ui.println(\"Preloaded \" + preloadFoodCount + \" foods\");","lastModifiedDate":"2021-11-07"},{"lineNumber":217,"author":{"gitId":"aaapppsss"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":218,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":219,"author":{"gitId":"aaapppsss"},"content":"    /**","lastModifiedDate":"2021-11-06"},{"lineNumber":220,"author":{"gitId":"aaapppsss"},"content":"     * Preloads a food into the database.","lastModifiedDate":"2021-11-06"},{"lineNumber":221,"author":{"gitId":"aaapppsss"},"content":"     *","lastModifiedDate":"2021-11-06"},{"lineNumber":222,"author":{"gitId":"aaapppsss"},"content":"     * @param line A line of food information to be processed and added.","lastModifiedDate":"2021-11-06"},{"lineNumber":223,"author":{"gitId":"aaapppsss"},"content":"     * @return 1 if successful and 0 if unsuccessful.","lastModifiedDate":"2021-11-06"},{"lineNumber":224,"author":{"gitId":"aaapppsss"},"content":"     * @throws FitNusException If unable to parse Food type.","lastModifiedDate":"2021-11-06"},{"lineNumber":225,"author":{"gitId":"aaapppsss"},"content":"     */","lastModifiedDate":"2021-11-06"},{"lineNumber":226,"author":{"gitId":"aaapppsss"},"content":"    public int loadFood(String line) throws FitNusException {","lastModifiedDate":"2021-11-06"},{"lineNumber":227,"author":{"gitId":"brendanlsz"},"content":"        String[] description \u003d line.trim().split(\"\\\\s*[|]\\\\s*\");","lastModifiedDate":"2021-10-06"},{"lineNumber":228,"author":{"gitId":"brendanlsz"},"content":"        try {","lastModifiedDate":"2021-10-10"},{"lineNumber":229,"author":{"gitId":"aaapppsss"},"content":"            String name \u003d description[0].strip();","lastModifiedDate":"2021-10-12"},{"lineNumber":230,"author":{"gitId":"brendanlsz"},"content":"            assert !name.equals(\"\") : \"name field cannot only contain white spaces\";","lastModifiedDate":"2021-11-02"},{"lineNumber":231,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":232,"author":{"gitId":"aaapppsss"},"content":"            String caloriesString \u003d description[1].strip();","lastModifiedDate":"2021-10-12"},{"lineNumber":233,"author":{"gitId":"brendanlsz"},"content":"            assert !caloriesString.equals(\"\") : \"calories field cannot only contain white spaces\";","lastModifiedDate":"2021-11-02"},{"lineNumber":234,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":235,"author":{"gitId":"brendanlsz"},"content":"            Food.FoodType type \u003d Parser.parseFoodType(description[2]);","lastModifiedDate":"2021-10-22"},{"lineNumber":236,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":237,"author":{"gitId":"aaapppsss"},"content":"            Integer calories \u003d Integer.parseInt(caloriesString);","lastModifiedDate":"2021-10-12"},{"lineNumber":238,"author":{"gitId":"brendanlsz"},"content":"            this.addFood(name, calories, type);","lastModifiedDate":"2021-10-22"},{"lineNumber":239,"author":{"gitId":"aaapppsss"},"content":"            return 1; //success","lastModifiedDate":"2021-11-06"},{"lineNumber":240,"author":{"gitId":"brendanlsz"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2021-10-10"},{"lineNumber":241,"author":{"gitId":"brendanlsz"},"content":"            Ui.printPreloadDatabaseError();","lastModifiedDate":"2021-10-10"},{"lineNumber":242,"author":{"gitId":"aaapppsss"},"content":"            return 0; //failure","lastModifiedDate":"2021-11-06"},{"lineNumber":243,"author":{"gitId":"brendanlsz"},"content":"        }","lastModifiedDate":"2021-10-10"},{"lineNumber":244,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":245,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":246,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-11-02"},{"lineNumber":247,"author":{"gitId":"brendanlsz"},"content":"     * Filters Food objects based on the provided keyword and returns","lastModifiedDate":"2021-11-02"},{"lineNumber":248,"author":{"gitId":"brendanlsz"},"content":"     * matching Food objects in an ArrayList.","lastModifiedDate":"2021-11-02"},{"lineNumber":249,"author":{"gitId":"brendanlsz"},"content":"     *","lastModifiedDate":"2021-11-02"},{"lineNumber":250,"author":{"gitId":"brendanlsz"},"content":"     * @param keyword The keyword used to filter Food objects.","lastModifiedDate":"2021-11-02"},{"lineNumber":251,"author":{"gitId":"brendanlsz"},"content":"     * @return An ArrayList containing matching Food objects.","lastModifiedDate":"2021-11-05"},{"lineNumber":252,"author":{"gitId":"brendanlsz"},"content":"     * @throws FitNusException If the keyword provided is an empty String.","lastModifiedDate":"2021-11-02"},{"lineNumber":253,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-11-02"},{"lineNumber":254,"author":{"gitId":"brendanlsz"},"content":"    public ArrayList\u003cFood\u003e findFoods(String keyword) throws FitNusException {","lastModifiedDate":"2021-10-25"},{"lineNumber":255,"author":{"gitId":"brendanlsz"},"content":"        if (keyword.equals(\"\")) {","lastModifiedDate":"2021-10-19"},{"lineNumber":256,"author":{"gitId":"brendanlsz"},"content":"            throw new FitNusException(\"Please provide a valid keyword\");","lastModifiedDate":"2021-10-19"},{"lineNumber":257,"author":{"gitId":"brendanlsz"},"content":"        }","lastModifiedDate":"2021-10-19"},{"lineNumber":258,"author":{"gitId":"brendanlsz"},"content":"        return (ArrayList\u003cFood\u003e) databaseFoods.stream()","lastModifiedDate":"2021-10-19"},{"lineNumber":259,"author":{"gitId":"brendanlsz"},"content":"                .filter(t -\u003e t.getName().contains(keyword))","lastModifiedDate":"2021-10-19"},{"lineNumber":260,"author":{"gitId":"brendanlsz"},"content":"                .collect(Collectors.toList());","lastModifiedDate":"2021-10-19"},{"lineNumber":261,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":262,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":263,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-11-02"},{"lineNumber":264,"author":{"gitId":"brendanlsz"},"content":"     * Finds matching Food objects (suggestions) based on the specified Food type and","lastModifiedDate":"2021-11-02"},{"lineNumber":265,"author":{"gitId":"brendanlsz"},"content":"     * calories. Then returns an ArrayList containing suggestions.","lastModifiedDate":"2021-11-02"},{"lineNumber":266,"author":{"gitId":"brendanlsz"},"content":"     *","lastModifiedDate":"2021-11-02"},{"lineNumber":267,"author":{"gitId":"brendanlsz"},"content":"     * @param type     The Food type specified by the user.","lastModifiedDate":"2021-11-02"},{"lineNumber":268,"author":{"gitId":"brendanlsz"},"content":"     * @param calories The calorie value used to filter Food objects.","lastModifiedDate":"2021-11-02"},{"lineNumber":269,"author":{"gitId":"brendanlsz"},"content":"     * @param isSort   A boolean indicating whether to sort the resultant ArrayList.","lastModifiedDate":"2021-11-02"},{"lineNumber":270,"author":{"gitId":"brendanlsz"},"content":"     * @return An ArrayList containing suggestions.","lastModifiedDate":"2021-11-05"},{"lineNumber":271,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-11-02"},{"lineNumber":272,"author":{"gitId":"brendanlsz"},"content":"    public ArrayList\u003cFood\u003e findSuggestions(Food.FoodType type, int calories, boolean isSort) {","lastModifiedDate":"2021-10-23"},{"lineNumber":273,"author":{"gitId":"brendanlsz"},"content":"        ArrayList\u003cFood\u003e matchingSuggestions \u003d (ArrayList\u003cFood\u003e) databaseFoods.stream()","lastModifiedDate":"2021-10-23"},{"lineNumber":274,"author":{"gitId":"brendanlsz"},"content":"                .filter(t -\u003e t.getType().equals(type))","lastModifiedDate":"2021-10-23"},{"lineNumber":275,"author":{"gitId":"brendanlsz"},"content":"                .filter(c -\u003e c.getCalories() \u003c calories)","lastModifiedDate":"2021-10-23"},{"lineNumber":276,"author":{"gitId":"brendanlsz"},"content":"                .collect(Collectors.toList());","lastModifiedDate":"2021-10-23"},{"lineNumber":277,"author":{"gitId":"brendanlsz"},"content":"        if (isSort) {","lastModifiedDate":"2021-10-23"},{"lineNumber":278,"author":{"gitId":"brendanlsz"},"content":"            matchingSuggestions.sort(Comparator.comparing(Food::getCalories));","lastModifiedDate":"2021-10-23"},{"lineNumber":279,"author":{"gitId":"brendanlsz"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":280,"author":{"gitId":"brendanlsz"},"content":"        return matchingSuggestions;","lastModifiedDate":"2021-10-23"},{"lineNumber":281,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":282,"author":{"gitId":"kengjit"},"content":"}","lastModifiedDate":"2021-10-03"}],"authorContributionMap":{"kengjit":16,"brendanlsz":137,"siyuancheng178":12,"aaapppsss":108,"praj-bellakka":9}},{"path":"src/main/java/fitnus/database/MealPlanDatabase.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"praj-bellakka"},"content":"package fitnus.database;","lastModifiedDate":"2021-10-24"},{"lineNumber":2,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":3,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.exception.FitNusException;","lastModifiedDate":"2021-10-24"},{"lineNumber":4,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.parser.Parser;","lastModifiedDate":"2021-10-26"},{"lineNumber":5,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.tracker.Food;","lastModifiedDate":"2021-10-24"},{"lineNumber":6,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.tracker.MealPlan;","lastModifiedDate":"2021-10-24"},{"lineNumber":7,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.utility.Ui;","lastModifiedDate":"2021-10-26"},{"lineNumber":8,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":9,"author":{"gitId":"praj-bellakka"},"content":"import java.io.BufferedReader;","lastModifiedDate":"2021-10-26"},{"lineNumber":10,"author":{"gitId":"praj-bellakka"},"content":"import java.io.IOException;","lastModifiedDate":"2021-10-26"},{"lineNumber":11,"author":{"gitId":"praj-bellakka"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-24"},{"lineNumber":12,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":13,"author":{"gitId":"praj-bellakka"},"content":"public class MealPlanDatabase {","lastModifiedDate":"2021-10-24"},{"lineNumber":14,"author":{"gitId":"praj-bellakka"},"content":"    private final ArrayList\u003cMealPlan\u003e databaseMealPlans \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-24"},{"lineNumber":15,"author":{"gitId":"praj-bellakka"},"content":"    private static final String MEAL_PLAN_DECODER \u003d \"--------\";","lastModifiedDate":"2021-10-26"},{"lineNumber":16,"author":{"gitId":"praj-bellakka"},"content":"    private static final String DELIMITER \u003d \" | \";","lastModifiedDate":"2021-10-26"},{"lineNumber":17,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":18,"author":{"gitId":"praj-bellakka"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":19,"author":{"gitId":"praj-bellakka"},"content":"     * Returns the MealPlan object at the index specified inside databaseMealPlans.","lastModifiedDate":"2021-11-07"},{"lineNumber":20,"author":{"gitId":"praj-bellakka"},"content":"     * Throws FitNusException if index specified is either below 1 or outside the range of the database.","lastModifiedDate":"2021-11-07"},{"lineNumber":21,"author":{"gitId":"praj-bellakka"},"content":"     *","lastModifiedDate":"2021-11-07"},{"lineNumber":22,"author":{"gitId":"praj-bellakka"},"content":"     * @param index Integer specified.","lastModifiedDate":"2021-11-07"},{"lineNumber":23,"author":{"gitId":"praj-bellakka"},"content":"     * @return MealPlan object at the index specified inside databaseMealPlans.","lastModifiedDate":"2021-11-07"},{"lineNumber":24,"author":{"gitId":"praj-bellakka"},"content":"     * @throws FitNusException Thrown when no MealPlan is found at that index.","lastModifiedDate":"2021-11-07"},{"lineNumber":25,"author":{"gitId":"praj-bellakka"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":26,"author":{"gitId":"praj-bellakka"},"content":"    public MealPlan getMealAtIndex(int index) throws FitNusException {","lastModifiedDate":"2021-10-24"},{"lineNumber":27,"author":{"gitId":"praj-bellakka"},"content":"        if (index \u003e 0 \u0026\u0026 index \u003c\u003d databaseMealPlans.size()) {","lastModifiedDate":"2021-10-24"},{"lineNumber":28,"author":{"gitId":"praj-bellakka"},"content":"            return databaseMealPlans.get(index - 1);","lastModifiedDate":"2021-10-24"},{"lineNumber":29,"author":{"gitId":"praj-bellakka"},"content":"        } else {","lastModifiedDate":"2021-10-24"},{"lineNumber":30,"author":{"gitId":"praj-bellakka"},"content":"            throw new FitNusException(\"Index specified is outside the range of the database! \"","lastModifiedDate":"2021-10-25"},{"lineNumber":31,"author":{"gitId":"praj-bellakka"},"content":"                    + \"Meal plan could not be found...\");","lastModifiedDate":"2021-10-25"},{"lineNumber":32,"author":{"gitId":"praj-bellakka"},"content":"        }","lastModifiedDate":"2021-10-24"},{"lineNumber":33,"author":{"gitId":"praj-bellakka"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":34,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":35,"author":{"gitId":"praj-bellakka"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":36,"author":{"gitId":"praj-bellakka"},"content":"     * Adds MealPlan object into databaseMealPlans.","lastModifiedDate":"2021-11-07"},{"lineNumber":37,"author":{"gitId":"praj-bellakka"},"content":"     *","lastModifiedDate":"2021-11-07"},{"lineNumber":38,"author":{"gitId":"praj-bellakka"},"content":"     * @param plan MealPlan object to be added.","lastModifiedDate":"2021-11-07"},{"lineNumber":39,"author":{"gitId":"praj-bellakka"},"content":"     * @throws FitNusException Thrown when MealPlan does not contain any Food objects.","lastModifiedDate":"2021-11-07"},{"lineNumber":40,"author":{"gitId":"praj-bellakka"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":41,"author":{"gitId":"praj-bellakka"},"content":"    public void addMealPlan(MealPlan plan) throws FitNusException {","lastModifiedDate":"2021-10-24"},{"lineNumber":42,"author":{"gitId":"praj-bellakka"},"content":"        if (plan.getMealFoods().size() \u003e 0) {","lastModifiedDate":"2021-10-24"},{"lineNumber":43,"author":{"gitId":"praj-bellakka"},"content":"            databaseMealPlans.add(plan);","lastModifiedDate":"2021-10-24"},{"lineNumber":44,"author":{"gitId":"praj-bellakka"},"content":"        } else {","lastModifiedDate":"2021-10-24"},{"lineNumber":45,"author":{"gitId":"praj-bellakka"},"content":"            throw new FitNusException(\"Unable to add meal plan as no food detected.\");","lastModifiedDate":"2021-11-01"},{"lineNumber":46,"author":{"gitId":"praj-bellakka"},"content":"        }","lastModifiedDate":"2021-10-24"},{"lineNumber":47,"author":{"gitId":"praj-bellakka"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":48,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":49,"author":{"gitId":"praj-bellakka"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":50,"author":{"gitId":"praj-bellakka"},"content":"     * Returns String representation of all meal plan objects inside databaseMealPlans.","lastModifiedDate":"2021-11-07"},{"lineNumber":51,"author":{"gitId":"praj-bellakka"},"content":"     * Each meal plan is listed by its name, followed by all its Food items associated with it.","lastModifiedDate":"2021-11-07"},{"lineNumber":52,"author":{"gitId":"praj-bellakka"},"content":"     *","lastModifiedDate":"2021-11-07"},{"lineNumber":53,"author":{"gitId":"praj-bellakka"},"content":"     * @return String representation of all MealPlan objects in database.","lastModifiedDate":"2021-11-07"},{"lineNumber":54,"author":{"gitId":"praj-bellakka"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":55,"author":{"gitId":"praj-bellakka"},"content":"    public String listMealPlan() {","lastModifiedDate":"2021-10-26"},{"lineNumber":56,"author":{"gitId":"praj-bellakka"},"content":"        StringBuilder list \u003d new StringBuilder();","lastModifiedDate":"2021-10-26"},{"lineNumber":57,"author":{"gitId":"praj-bellakka"},"content":"        if (databaseMealPlans.size() \u003d\u003d 0) {","lastModifiedDate":"2021-11-01"},{"lineNumber":58,"author":{"gitId":"praj-bellakka"},"content":"            System.out.println(\"There are no meal plans in the database...\");","lastModifiedDate":"2021-11-01"},{"lineNumber":59,"author":{"gitId":"praj-bellakka"},"content":"            return \"\";","lastModifiedDate":"2021-11-01"},{"lineNumber":60,"author":{"gitId":"praj-bellakka"},"content":"        }","lastModifiedDate":"2021-11-01"},{"lineNumber":61,"author":{"gitId":"praj-bellakka"},"content":"        for (int i \u003d 1; i \u003c\u003d databaseMealPlans.size(); i++) {","lastModifiedDate":"2021-10-26"},{"lineNumber":62,"author":{"gitId":"praj-bellakka"},"content":"            MealPlan plan \u003d this.databaseMealPlans.get(i - 1);","lastModifiedDate":"2021-10-26"},{"lineNumber":63,"author":{"gitId":"praj-bellakka"},"content":"            String mealPlanName \u003d plan.getMealPlanName();","lastModifiedDate":"2021-10-26"},{"lineNumber":64,"author":{"gitId":"praj-bellakka"},"content":"            String foodString \u003d plan.getFoodString();","lastModifiedDate":"2021-10-26"},{"lineNumber":65,"author":{"gitId":"praj-bellakka"},"content":"            list.append(i).append(\". Meal plan: \").append(mealPlanName)","lastModifiedDate":"2021-10-26"},{"lineNumber":66,"author":{"gitId":"praj-bellakka"},"content":"                    .append(System.lineSeparator())","lastModifiedDate":"2021-10-26"},{"lineNumber":67,"author":{"gitId":"praj-bellakka"},"content":"                    .append(foodString)","lastModifiedDate":"2021-10-26"},{"lineNumber":68,"author":{"gitId":"praj-bellakka"},"content":"                    .append(System.lineSeparator());","lastModifiedDate":"2021-10-26"},{"lineNumber":69,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":70,"author":{"gitId":"praj-bellakka"},"content":"        }","lastModifiedDate":"2021-10-26"},{"lineNumber":71,"author":{"gitId":"praj-bellakka"},"content":"        return list.toString();","lastModifiedDate":"2021-10-26"},{"lineNumber":72,"author":{"gitId":"praj-bellakka"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":73,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":74,"author":{"gitId":"praj-bellakka"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":75,"author":{"gitId":"praj-bellakka"},"content":"     * Converts the database content to String form.","lastModifiedDate":"2021-11-07"},{"lineNumber":76,"author":{"gitId":"praj-bellakka"},"content":"     *","lastModifiedDate":"2021-11-07"},{"lineNumber":77,"author":{"gitId":"praj-bellakka"},"content":"     * @return The database content as String.","lastModifiedDate":"2021-11-07"},{"lineNumber":78,"author":{"gitId":"praj-bellakka"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":79,"author":{"gitId":"praj-bellakka"},"content":"    public String convertDatabaseToString() {","lastModifiedDate":"2021-10-26"},{"lineNumber":80,"author":{"gitId":"praj-bellakka"},"content":"        StringBuilder lines \u003d new StringBuilder();","lastModifiedDate":"2021-10-26"},{"lineNumber":81,"author":{"gitId":"praj-bellakka"},"content":"        for (MealPlan plan : databaseMealPlans) {","lastModifiedDate":"2021-10-26"},{"lineNumber":82,"author":{"gitId":"praj-bellakka"},"content":"            String mealPlanName \u003d plan.getMealPlanName();","lastModifiedDate":"2021-10-26"},{"lineNumber":83,"author":{"gitId":"praj-bellakka"},"content":"            lines.append(convertFoodToString(plan.getMealFoods()));","lastModifiedDate":"2021-10-26"},{"lineNumber":84,"author":{"gitId":"brendanlsz"},"content":"            lines.append(MEAL_PLAN_DECODER).append(DELIMITER).append(mealPlanName).append(System.lineSeparator());","lastModifiedDate":"2021-11-06"},{"lineNumber":85,"author":{"gitId":"praj-bellakka"},"content":"        }","lastModifiedDate":"2021-10-26"},{"lineNumber":86,"author":{"gitId":"praj-bellakka"},"content":"        return lines.toString();","lastModifiedDate":"2021-10-26"},{"lineNumber":87,"author":{"gitId":"praj-bellakka"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":88,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":89,"author":{"gitId":"praj-bellakka"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":90,"author":{"gitId":"praj-bellakka"},"content":"     * Converts an ArrayList of Food items to String.","lastModifiedDate":"2021-11-07"},{"lineNumber":91,"author":{"gitId":"praj-bellakka"},"content":"     *","lastModifiedDate":"2021-11-07"},{"lineNumber":92,"author":{"gitId":"praj-bellakka"},"content":"     * @return The Food ArrayList as String.","lastModifiedDate":"2021-11-07"},{"lineNumber":93,"author":{"gitId":"praj-bellakka"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":94,"author":{"gitId":"praj-bellakka"},"content":"    private String convertFoodToString(ArrayList\u003cFood\u003e foodList) {","lastModifiedDate":"2021-10-26"},{"lineNumber":95,"author":{"gitId":"praj-bellakka"},"content":"        StringBuilder lines \u003d new StringBuilder();","lastModifiedDate":"2021-10-26"},{"lineNumber":96,"author":{"gitId":"praj-bellakka"},"content":"        for (Food food : foodList) {","lastModifiedDate":"2021-10-26"},{"lineNumber":97,"author":{"gitId":"brendanlsz"},"content":"            lines.append(food.convertToStringForStorage());","lastModifiedDate":"2021-11-02"},{"lineNumber":98,"author":{"gitId":"praj-bellakka"},"content":"        }","lastModifiedDate":"2021-10-26"},{"lineNumber":99,"author":{"gitId":"praj-bellakka"},"content":"        return lines.toString();","lastModifiedDate":"2021-10-26"},{"lineNumber":100,"author":{"gitId":"praj-bellakka"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":101,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":102,"author":{"gitId":"praj-bellakka"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":103,"author":{"gitId":"praj-bellakka"},"content":"     * Preloads meal plans from meal plan database.","lastModifiedDate":"2021-11-07"},{"lineNumber":104,"author":{"gitId":"praj-bellakka"},"content":"     *","lastModifiedDate":"2021-11-07"},{"lineNumber":105,"author":{"gitId":"praj-bellakka"},"content":"     * @param reader Reads from the file.","lastModifiedDate":"2021-11-07"},{"lineNumber":106,"author":{"gitId":"praj-bellakka"},"content":"     * @throws IOException If an I/O error occurs.","lastModifiedDate":"2021-11-07"},{"lineNumber":107,"author":{"gitId":"praj-bellakka"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":108,"author":{"gitId":"praj-bellakka"},"content":"    public void preloadDatabase(BufferedReader reader) throws IOException {","lastModifiedDate":"2021-10-26"},{"lineNumber":109,"author":{"gitId":"praj-bellakka"},"content":"        int preloadMealPlanCount \u003d 0;","lastModifiedDate":"2021-10-26"},{"lineNumber":110,"author":{"gitId":"praj-bellakka"},"content":"        String line;","lastModifiedDate":"2021-10-26"},{"lineNumber":111,"author":{"gitId":"praj-bellakka"},"content":"        String mealPlanName \u003d \"\";","lastModifiedDate":"2021-10-26"},{"lineNumber":112,"author":{"gitId":"praj-bellakka"},"content":"        ArrayList\u003cFood\u003e tempArray \u003d new ArrayList\u003c\u003e(); // holds temporary list of Food items per meal plan","lastModifiedDate":"2021-10-26"},{"lineNumber":113,"author":{"gitId":"praj-bellakka"},"content":"        while ((line \u003d reader.readLine()) !\u003d null) {","lastModifiedDate":"2021-10-26"},{"lineNumber":114,"author":{"gitId":"praj-bellakka"},"content":"            String[] description \u003d line.trim().split(\"\\\\s*[|]\\\\s*\");","lastModifiedDate":"2021-10-26"},{"lineNumber":115,"author":{"gitId":"praj-bellakka"},"content":"            try {","lastModifiedDate":"2021-10-26"},{"lineNumber":116,"author":{"gitId":"brendanlsz"},"content":"                if (description[0].equals(MEAL_PLAN_DECODER)) {","lastModifiedDate":"2021-11-06"},{"lineNumber":117,"author":{"gitId":"praj-bellakka"},"content":"                    mealPlanName \u003d description[1];","lastModifiedDate":"2021-10-26"},{"lineNumber":118,"author":{"gitId":"praj-bellakka"},"content":"                    MealPlan tempMealPlan \u003d new MealPlan(mealPlanName, tempArray);","lastModifiedDate":"2021-10-26"},{"lineNumber":119,"author":{"gitId":"praj-bellakka"},"content":"                    this.addMealPlan(tempMealPlan);","lastModifiedDate":"2021-10-26"},{"lineNumber":120,"author":{"gitId":"praj-bellakka"},"content":"                    preloadMealPlanCount++;","lastModifiedDate":"2021-10-26"},{"lineNumber":121,"author":{"gitId":"praj-bellakka"},"content":"                    tempArray \u003d new ArrayList\u003c\u003e(); //empty the temporary array for the next meal plan to add on","lastModifiedDate":"2021-10-26"},{"lineNumber":122,"author":{"gitId":"praj-bellakka"},"content":"                    continue;","lastModifiedDate":"2021-10-26"},{"lineNumber":123,"author":{"gitId":"praj-bellakka"},"content":"                }","lastModifiedDate":"2021-10-26"},{"lineNumber":124,"author":{"gitId":"praj-bellakka"},"content":"                String name \u003d description[0].strip();","lastModifiedDate":"2021-10-26"},{"lineNumber":125,"author":{"gitId":"praj-bellakka"},"content":"                String caloriesString \u003d description[1].strip();","lastModifiedDate":"2021-10-26"},{"lineNumber":126,"author":{"gitId":"brendanlsz"},"content":"                assert !caloriesString.equals(\"\") : \"calories field cannot only contain white spaces\";","lastModifiedDate":"2021-11-02"},{"lineNumber":127,"author":{"gitId":"praj-bellakka"},"content":"                Food.FoodType type \u003d Parser.parseFoodType(description[2]);","lastModifiedDate":"2021-10-26"},{"lineNumber":128,"author":{"gitId":"praj-bellakka"},"content":"                Integer calories \u003d Integer.parseInt(caloriesString);","lastModifiedDate":"2021-10-26"},{"lineNumber":129,"author":{"gitId":"praj-bellakka"},"content":"                tempArray.add(new Food(name, calories, type));","lastModifiedDate":"2021-10-26"},{"lineNumber":130,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":131,"author":{"gitId":"praj-bellakka"},"content":"            } catch (IndexOutOfBoundsException | FitNusException e) {","lastModifiedDate":"2021-10-26"},{"lineNumber":132,"author":{"gitId":"praj-bellakka"},"content":"                Ui.printPreloadDatabaseError();","lastModifiedDate":"2021-10-26"},{"lineNumber":133,"author":{"gitId":"praj-bellakka"},"content":"            }","lastModifiedDate":"2021-10-26"},{"lineNumber":134,"author":{"gitId":"praj-bellakka"},"content":"        }","lastModifiedDate":"2021-10-26"},{"lineNumber":135,"author":{"gitId":"brendanlsz"},"content":"        System.out.println(\"Preloaded \" + preloadMealPlanCount + \" meal plans\");","lastModifiedDate":"2021-11-07"},{"lineNumber":136,"author":{"gitId":"praj-bellakka"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":137,"author":{"gitId":"praj-bellakka"},"content":"}","lastModifiedDate":"2021-10-24"}],"authorContributionMap":{"brendanlsz":5,"praj-bellakka":132}},{"path":"src/main/java/fitnus/exception/FitNusException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"praj-bellakka"},"content":"package fitnus.exception;","lastModifiedDate":"2021-10-12"},{"lineNumber":2,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":3,"author":{"gitId":"kengjit"},"content":"public class FitNusException extends Exception {","lastModifiedDate":"2021-10-08"},{"lineNumber":4,"author":{"gitId":"kengjit"},"content":"    public FitNusException(String exception) {","lastModifiedDate":"2021-10-08"},{"lineNumber":5,"author":{"gitId":"kengjit"},"content":"        super(exception);","lastModifiedDate":"2021-10-08"},{"lineNumber":6,"author":{"gitId":"kengjit"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":7,"author":{"gitId":"kengjit"},"content":"}","lastModifiedDate":"2021-10-08"}],"authorContributionMap":{"kengjit":6,"praj-bellakka":1}},{"path":"src/main/java/fitnus/parser/Parser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"praj-bellakka"},"content":"package fitnus.parser;","lastModifiedDate":"2021-10-03"},{"lineNumber":2,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":3,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.command.AddFoodEntryCommand;","lastModifiedDate":"2021-10-25"},{"lineNumber":4,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.command.AddMealPlanEntryCommand;","lastModifiedDate":"2021-10-25"},{"lineNumber":5,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.command.Command;","lastModifiedDate":"2021-10-25"},{"lineNumber":6,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.command.CreateMealPlanCommand;","lastModifiedDate":"2021-10-25"},{"lineNumber":7,"author":{"gitId":"aaapppsss"},"content":"import fitnus.command.DeleteEntryCommand;","lastModifiedDate":"2021-10-24"},{"lineNumber":8,"author":{"gitId":"aaapppsss"},"content":"import fitnus.command.DeleteFoodCommand;","lastModifiedDate":"2021-10-24"},{"lineNumber":9,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.command.EditFoodEntryCommand;","lastModifiedDate":"2021-10-25"},{"lineNumber":10,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.command.ExitCommand;","lastModifiedDate":"2021-10-25"},{"lineNumber":11,"author":{"gitId":"brendanlsz"},"content":"import fitnus.command.FindEntriesCommand;","lastModifiedDate":"2021-11-04"},{"lineNumber":12,"author":{"gitId":"brendanlsz"},"content":"import fitnus.command.FindFoodsCommand;","lastModifiedDate":"2021-11-04"},{"lineNumber":13,"author":{"gitId":"aaapppsss"},"content":"import fitnus.command.GenerateCalorieGoalCommand;","lastModifiedDate":"2021-10-24"},{"lineNumber":14,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.command.HelpCommand;","lastModifiedDate":"2021-10-25"},{"lineNumber":15,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.command.ListFoodDatabaseCommand;","lastModifiedDate":"2021-10-25"},{"lineNumber":16,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.command.ListFoodEntryAllCommand;","lastModifiedDate":"2021-10-25"},{"lineNumber":17,"author":{"gitId":"aaapppsss"},"content":"import fitnus.command.ListUserDataCommand;","lastModifiedDate":"2021-10-27"},{"lineNumber":18,"author":{"gitId":"aaapppsss"},"content":"import fitnus.command.ListWeightProgressCommand;","lastModifiedDate":"2021-10-24"},{"lineNumber":19,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.command.ListMealPlanDatabaseCommand;","lastModifiedDate":"2021-10-27"},{"lineNumber":20,"author":{"gitId":"aaapppsss"},"content":"import fitnus.command.SetAgeCommand;","lastModifiedDate":"2021-10-24"},{"lineNumber":21,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.command.SetCalorieGoalCommand;","lastModifiedDate":"2021-10-25"},{"lineNumber":22,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.command.SetGenderCommand;","lastModifiedDate":"2021-10-25"},{"lineNumber":23,"author":{"gitId":"kengjit"},"content":"import fitnus.command.ListFoodEntryCustomCommand;","lastModifiedDate":"2021-10-26"},{"lineNumber":24,"author":{"gitId":"aaapppsss"},"content":"import fitnus.command.SetHeightCommand;","lastModifiedDate":"2021-10-24"},{"lineNumber":25,"author":{"gitId":"aaapppsss"},"content":"import fitnus.command.SetWeightCommand;","lastModifiedDate":"2021-10-24"},{"lineNumber":26,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.command.ViewMonthSummaryCommand;","lastModifiedDate":"2021-10-25"},{"lineNumber":27,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.command.ViewRemainingCalorieCommand;","lastModifiedDate":"2021-10-25"},{"lineNumber":28,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.command.ViewSuggestionsCommand;","lastModifiedDate":"2021-10-25"},{"lineNumber":29,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.command.ViewWeekSummaryCommand;","lastModifiedDate":"2021-10-25"},{"lineNumber":30,"author":{"gitId":"kengjit"},"content":"import fitnus.database.EntryDatabase;","lastModifiedDate":"2021-10-24"},{"lineNumber":31,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.database.FoodDatabase;","lastModifiedDate":"2021-10-20"},{"lineNumber":32,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.database.MealPlanDatabase;","lastModifiedDate":"2021-10-24"},{"lineNumber":33,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.exception.FitNusException;","lastModifiedDate":"2021-10-12"},{"lineNumber":34,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.tracker.Food;","lastModifiedDate":"2021-10-20"},{"lineNumber":35,"author":{"gitId":"kengjit"},"content":"import fitnus.tracker.MealType;","lastModifiedDate":"2021-10-19"},{"lineNumber":36,"author":{"gitId":"brendanlsz"},"content":"import fitnus.utility.Ui;","lastModifiedDate":"2021-10-19"},{"lineNumber":37,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":38,"author":{"gitId":"brendanlsz"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-10-09"},{"lineNumber":39,"author":{"gitId":"brendanlsz"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-10-09"},{"lineNumber":40,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":41,"author":{"gitId":"praj-bellakka"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-20"},{"lineNumber":42,"author":{"gitId":"siyuancheng178"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-10-31"},{"lineNumber":43,"author":{"gitId":"brendanlsz"},"content":"import java.util.Locale;","lastModifiedDate":"2021-10-22"},{"lineNumber":44,"author":{"gitId":"brendanlsz"},"content":"import java.util.logging.Level;","lastModifiedDate":"2021-10-12"},{"lineNumber":45,"author":{"gitId":"brendanlsz"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-10-12"},{"lineNumber":46,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":47,"author":{"gitId":"praj-bellakka"},"content":"/**","lastModifiedDate":"2021-10-06"},{"lineNumber":48,"author":{"gitId":"praj-bellakka"},"content":" * Handles the extraction of user inputs into relevant components.","lastModifiedDate":"2021-10-06"},{"lineNumber":49,"author":{"gitId":"praj-bellakka"},"content":" */","lastModifiedDate":"2021-10-06"},{"lineNumber":50,"author":{"gitId":"aaapppsss"},"content":"public class Parser {","lastModifiedDate":"2021-10-03"},{"lineNumber":51,"author":{"gitId":"brendanlsz"},"content":"    //Logger object","lastModifiedDate":"2021-10-12"},{"lineNumber":52,"author":{"gitId":"brendanlsz"},"content":"    private static final Logger LOGGER \u003d Logger.getLogger(Parser.class.getName());","lastModifiedDate":"2021-10-31"},{"lineNumber":53,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":54,"author":{"gitId":"siyuancheng178"},"content":"    private static final String SPACE_CHARACTER \u003d \" \";","lastModifiedDate":"2021-10-09"},{"lineNumber":55,"author":{"gitId":"siyuancheng178"},"content":"    private static final String BACKSLASH_CHARACTER \u003d \"/\";","lastModifiedDate":"2021-10-09"},{"lineNumber":56,"author":{"gitId":"siyuancheng178"},"content":"    private static final String PIPE_CHARACTER \u003d \"|\";","lastModifiedDate":"2021-10-09"},{"lineNumber":57,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":58,"author":{"gitId":"praj-bellakka"},"content":"    //main command types","lastModifiedDate":"2021-10-10"},{"lineNumber":59,"author":{"gitId":"siyuancheng178"},"content":"    private static final String COMMAND_ADD \u003d \"add\";","lastModifiedDate":"2021-10-09"},{"lineNumber":60,"author":{"gitId":"siyuancheng178"},"content":"    private static final String COMMAND_LIST \u003d \"list\";","lastModifiedDate":"2021-10-09"},{"lineNumber":61,"author":{"gitId":"kengjit"},"content":"    private static final String COMMAND_EDIT \u003d \"edit\";","lastModifiedDate":"2021-10-24"},{"lineNumber":62,"author":{"gitId":"siyuancheng178"},"content":"    private static final String COMMAND_CALORIE \u003d \"calorie\";","lastModifiedDate":"2021-10-09"},{"lineNumber":63,"author":{"gitId":"siyuancheng178"},"content":"    private static final String COMMAND_REMOVE \u003d \"remove\";","lastModifiedDate":"2021-10-09"},{"lineNumber":64,"author":{"gitId":"siyuancheng178"},"content":"    private static final String COMMAND_GENDER \u003d \"gender\";","lastModifiedDate":"2021-10-09"},{"lineNumber":65,"author":{"gitId":"aaapppsss"},"content":"    private static final String COMMAND_AGE \u003d \"age\";","lastModifiedDate":"2021-10-24"},{"lineNumber":66,"author":{"gitId":"aaapppsss"},"content":"    private static final String COMMAND_HEIGHT \u003d \"height\";","lastModifiedDate":"2021-10-24"},{"lineNumber":67,"author":{"gitId":"aaapppsss"},"content":"    private static final String COMMAND_WEIGHT \u003d \"weight\";","lastModifiedDate":"2021-10-24"},{"lineNumber":68,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":69,"author":{"gitId":"brendanlsz"},"content":"    private static final String COMMAND_FIND \u003d \"find\";","lastModifiedDate":"2021-10-19"},{"lineNumber":70,"author":{"gitId":"brendanlsz"},"content":"    private static final String COMMAND_SUGGEST \u003d \"suggest\";","lastModifiedDate":"2021-10-23"},{"lineNumber":71,"author":{"gitId":"kengjit"},"content":"    private static final String COMMAND_SUMMARY \u003d \"summary\";","lastModifiedDate":"2021-10-24"},{"lineNumber":72,"author":{"gitId":"praj-bellakka"},"content":"    private static final String COMMAND_CREATE \u003d \"create\";","lastModifiedDate":"2021-10-24"},{"lineNumber":73,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":74,"author":{"gitId":"praj-bellakka"},"content":"    //specific descriptors of the main command types","lastModifiedDate":"2021-10-10"},{"lineNumber":75,"author":{"gitId":"praj-bellakka"},"content":"    private static final String DESCRIPTOR_CUSTOM \u003d \"/cust\";","lastModifiedDate":"2021-10-10"},{"lineNumber":76,"author":{"gitId":"praj-bellakka"},"content":"    private static final String DESCRIPTOR_FOOD \u003d \"/food\";","lastModifiedDate":"2021-10-10"},{"lineNumber":77,"author":{"gitId":"kengjit"},"content":"    private static final String DESCRIPTOR_INTAKE \u003d \"/entry\";","lastModifiedDate":"2021-10-22"},{"lineNumber":78,"author":{"gitId":"aaapppsss"},"content":"    private static final String DESCRIPTOR_WEIGHT \u003d \"/weight\";","lastModifiedDate":"2021-10-24"},{"lineNumber":79,"author":{"gitId":"aaapppsss"},"content":"    private static final String DESCRIPTOR_USER \u003d \"/user\";","lastModifiedDate":"2021-10-27"},{"lineNumber":80,"author":{"gitId":"praj-bellakka"},"content":"    private static final String DESCRIPTOR_DEFAULT \u003d \"/def\";","lastModifiedDate":"2021-10-10"},{"lineNumber":81,"author":{"gitId":"praj-bellakka"},"content":"    private static final String DESCRIPTOR_REMAIN \u003d \"/remain\";","lastModifiedDate":"2021-10-10"},{"lineNumber":82,"author":{"gitId":"aaapppsss"},"content":"    private static final String DESCRIPTOR_GENERATE \u003d \"/generate\";","lastModifiedDate":"2021-10-24"},{"lineNumber":83,"author":{"gitId":"praj-bellakka"},"content":"    private static final String DESCRIPTOR_SET \u003d \"/set\";","lastModifiedDate":"2021-10-10"},{"lineNumber":84,"author":{"gitId":"praj-bellakka"},"content":"    private static final String DESCRIPTOR_MEALPLAN \u003d \"/mealplan\";","lastModifiedDate":"2021-10-24"},{"lineNumber":85,"author":{"gitId":"praj-bellakka"},"content":"    public static final int INVALID_INPUT \u003d -1;","lastModifiedDate":"2021-10-10"},{"lineNumber":86,"author":{"gitId":"aaapppsss"},"content":"    public static final String INVALID_COMMAND_MESSAGE \u003d \"That was an invalid command! \"","lastModifiedDate":"2021-11-06"},{"lineNumber":87,"author":{"gitId":"aaapppsss"},"content":"            + \"Type \u0027help\u0027 for a list of commands\\n\"","lastModifiedDate":"2021-11-06"},{"lineNumber":88,"author":{"gitId":"aaapppsss"},"content":"            + \"and their command formats.\";","lastModifiedDate":"2021-11-04"},{"lineNumber":89,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":90,"author":{"gitId":"brendanlsz"},"content":"    // FoodType related strings","lastModifiedDate":"2021-10-23"},{"lineNumber":91,"author":{"gitId":"brendanlsz"},"content":"    private static final String MEAL \u003d \"/meal\";","lastModifiedDate":"2021-10-23"},{"lineNumber":92,"author":{"gitId":"brendanlsz"},"content":"    private static final String MEAL_STRING \u003d \"meal\";","lastModifiedDate":"2021-10-31"},{"lineNumber":93,"author":{"gitId":"brendanlsz"},"content":"    private static final String BEVERAGE \u003d \"/beverage\";","lastModifiedDate":"2021-10-23"},{"lineNumber":94,"author":{"gitId":"brendanlsz"},"content":"    private static final String BEVERAGE_STRING \u003d \"beverage\";","lastModifiedDate":"2021-10-31"},{"lineNumber":95,"author":{"gitId":"brendanlsz"},"content":"    private static final String SNACK \u003d \"/snack\";","lastModifiedDate":"2021-10-23"},{"lineNumber":96,"author":{"gitId":"brendanlsz"},"content":"    private static final String SNACK_STRING \u003d \"snack\";","lastModifiedDate":"2021-10-31"},{"lineNumber":97,"author":{"gitId":"brendanlsz"},"content":"    private static final String OTHERS \u003d \"/others\";","lastModifiedDate":"2021-10-23"},{"lineNumber":98,"author":{"gitId":"brendanlsz"},"content":"    private static final String OTHERS_STRING \u003d \"others\";","lastModifiedDate":"2021-10-31"},{"lineNumber":99,"author":{"gitId":"praj-bellakka"},"content":"    private static final String[] possibleFoodTypes \u003d {\"meal\", \"snack\", \"beverage\", \"others\"};","lastModifiedDate":"2021-11-04"},{"lineNumber":100,"author":{"gitId":"praj-bellakka"},"content":"    private static final String[] possibleFoodCategories \u003d {\"/bfast\", \"/lunch\", \"/dinner\", \"/snack\"};","lastModifiedDate":"2021-11-01"},{"lineNumber":101,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":102,"author":{"gitId":"brendanlsz"},"content":"    //Parse suggest command error message","lastModifiedDate":"2021-10-31"},{"lineNumber":103,"author":{"gitId":"brendanlsz"},"content":"    private static final String PARSE_SUGGEST_ERROR \u003d \"Oops! Please double check your command format! Please try:\"","lastModifiedDate":"2021-10-31"},{"lineNumber":104,"author":{"gitId":"brendanlsz"},"content":"            + System.lineSeparator() + \"suggest /FOODTYPE (/meal, /beverage, /snack, /others) /sort (optional)\";","lastModifiedDate":"2021-10-31"},{"lineNumber":105,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":106,"author":{"gitId":"aaapppsss"},"content":"    // time frame related strings","lastModifiedDate":"2021-10-28"},{"lineNumber":107,"author":{"gitId":"kengjit"},"content":"    private static final String WEEK \u003d \"/week\";","lastModifiedDate":"2021-10-24"},{"lineNumber":108,"author":{"gitId":"kengjit"},"content":"    private static final String MONTH \u003d \"/month\";","lastModifiedDate":"2021-10-24"},{"lineNumber":109,"author":{"gitId":"aaapppsss"},"content":"    private static final String ALL_TIME \u003d \"/all\";","lastModifiedDate":"2021-10-28"},{"lineNumber":110,"author":{"gitId":"aaapppsss"},"content":"    private static final int FIRST_MONTH \u003d 1;","lastModifiedDate":"2021-10-28"},{"lineNumber":111,"author":{"gitId":"aaapppsss"},"content":"    private static final int LAST_MONTH \u003d 12;","lastModifiedDate":"2021-10-28"},{"lineNumber":112,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":113,"author":{"gitId":"aaapppsss"},"content":"    //calorie goal generation related strings","lastModifiedDate":"2021-10-24"},{"lineNumber":114,"author":{"gitId":"aaapppsss"},"content":"    private static final String GAIN \u003d \"/gain\";","lastModifiedDate":"2021-10-24"},{"lineNumber":115,"author":{"gitId":"aaapppsss"},"content":"    private static final String LOSE \u003d \"/lose\";","lastModifiedDate":"2021-10-24"},{"lineNumber":116,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":117,"author":{"gitId":"praj-bellakka"},"content":"    public static final int CALORIE_LIMIT \u003d 5000;","lastModifiedDate":"2021-10-21"},{"lineNumber":118,"author":{"gitId":"aaapppsss"},"content":"    private static final int MINIMUM_AGE \u003d 12;","lastModifiedDate":"2021-10-26"},{"lineNumber":119,"author":{"gitId":"aaapppsss"},"content":"    private static final int MAXIMUM_AGE \u003d 100;","lastModifiedDate":"2021-10-27"},{"lineNumber":120,"author":{"gitId":"aaapppsss"},"content":"    private static final int MINIMUM_HEIGHT \u003d 40;","lastModifiedDate":"2021-10-26"},{"lineNumber":121,"author":{"gitId":"aaapppsss"},"content":"    private static final int MAXIMUM_HEIGHT \u003d 300;","lastModifiedDate":"2021-10-27"},{"lineNumber":122,"author":{"gitId":"aaapppsss"},"content":"    private static final float MINIMUM_WEIGHT \u003d 0;","lastModifiedDate":"2021-11-04"},{"lineNumber":123,"author":{"gitId":"aaapppsss"},"content":"    private static final int MAXIMUM_WEIGHT \u003d 500;","lastModifiedDate":"2021-10-27"},{"lineNumber":124,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":125,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":126,"author":{"gitId":"kengjit"},"content":"    // Timeframe","lastModifiedDate":"2021-10-26"},{"lineNumber":127,"author":{"gitId":"kengjit"},"content":"    private static final int DAYS_IN_DAY \u003d 1;","lastModifiedDate":"2021-10-26"},{"lineNumber":128,"author":{"gitId":"kengjit"},"content":"    private static final int DAYS_IN_WEEK \u003d 7;","lastModifiedDate":"2021-10-26"},{"lineNumber":129,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":130,"author":{"gitId":"praj-bellakka"},"content":"    private static boolean isLoopFlagOn \u003d true;","lastModifiedDate":"2021-10-22"},{"lineNumber":131,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":132,"author":{"gitId":"praj-bellakka"},"content":"    /**","lastModifiedDate":"2021-11-06"},{"lineNumber":133,"author":{"gitId":"praj-bellakka"},"content":"     * Takes in an input and returns a Command object corresponding to the input.","lastModifiedDate":"2021-11-06"},{"lineNumber":134,"author":{"gitId":"praj-bellakka"},"content":"     * Throws FitNusException if noo corresponding command is found.","lastModifiedDate":"2021-11-06"},{"lineNumber":135,"author":{"gitId":"praj-bellakka"},"content":"     *","lastModifiedDate":"2021-11-06"},{"lineNumber":136,"author":{"gitId":"praj-bellakka"},"content":"     * @param input String containing a command call.","lastModifiedDate":"2021-11-06"},{"lineNumber":137,"author":{"gitId":"praj-bellakka"},"content":"     * @param fd    Food database object.","lastModifiedDate":"2021-11-06"},{"lineNumber":138,"author":{"gitId":"praj-bellakka"},"content":"     * @param ed    Entry database object.","lastModifiedDate":"2021-11-06"},{"lineNumber":139,"author":{"gitId":"praj-bellakka"},"content":"     * @param md    MealPlan database object.","lastModifiedDate":"2021-11-06"},{"lineNumber":140,"author":{"gitId":"praj-bellakka"},"content":"     * @return Command object correspoonding to the input.","lastModifiedDate":"2021-11-06"},{"lineNumber":141,"author":{"gitId":"praj-bellakka"},"content":"     * @throws FitNusException Thrown when no Command object found.","lastModifiedDate":"2021-11-06"},{"lineNumber":142,"author":{"gitId":"praj-bellakka"},"content":"     */","lastModifiedDate":"2021-11-06"},{"lineNumber":143,"author":{"gitId":"praj-bellakka"},"content":"    public Command parseCommandType(String input, FoodDatabase fd, EntryDatabase ed, MealPlanDatabase md)","lastModifiedDate":"2021-10-25"},{"lineNumber":144,"author":{"gitId":"praj-bellakka"},"content":"            throws FitNusException {","lastModifiedDate":"2021-10-25"},{"lineNumber":145,"author":{"gitId":"praj-bellakka"},"content":"        String[] splitString \u003d input.strip().split(SPACE_CHARACTER);","lastModifiedDate":"2021-10-21"},{"lineNumber":146,"author":{"gitId":"siyuancheng178"},"content":"        try {","lastModifiedDate":"2021-10-09"},{"lineNumber":147,"author":{"gitId":"siyuancheng178"},"content":"            int spaceIndex \u003d input.indexOf(SPACE_CHARACTER);","lastModifiedDate":"2021-10-09"},{"lineNumber":148,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":149,"author":{"gitId":"praj-bellakka"},"content":"            /**","lastModifiedDate":"2021-10-10"},{"lineNumber":150,"author":{"gitId":"praj-bellakka"},"content":"             * If no space is detected, the input does not contain any tracker related actions.","lastModifiedDate":"2021-10-10"},{"lineNumber":151,"author":{"gitId":"praj-bellakka"},"content":"             * Help, Exit or Invalid command will be returned based on the input.","lastModifiedDate":"2021-10-10"},{"lineNumber":152,"author":{"gitId":"praj-bellakka"},"content":"             */","lastModifiedDate":"2021-10-10"},{"lineNumber":153,"author":{"gitId":"praj-bellakka"},"content":"            if (spaceIndex \u003d\u003d INVALID_INPUT) {","lastModifiedDate":"2021-10-10"},{"lineNumber":154,"author":{"gitId":"praj-bellakka"},"content":"                assert spaceIndex \u003c 0 : \"Illegal input\";","lastModifiedDate":"2021-10-12"},{"lineNumber":155,"author":{"gitId":"siyuancheng178"},"content":"                switch (input) {","lastModifiedDate":"2021-10-10"},{"lineNumber":156,"author":{"gitId":"siyuancheng178"},"content":"                case \"help\":","lastModifiedDate":"2021-10-10"},{"lineNumber":157,"author":{"gitId":"siyuancheng178"},"content":"                    return new HelpCommand();","lastModifiedDate":"2021-10-10"},{"lineNumber":158,"author":{"gitId":"siyuancheng178"},"content":"                case \"exit\":","lastModifiedDate":"2021-10-10"},{"lineNumber":159,"author":{"gitId":"siyuancheng178"},"content":"                    return new ExitCommand();","lastModifiedDate":"2021-10-09"},{"lineNumber":160,"author":{"gitId":"siyuancheng178"},"content":"                default:","lastModifiedDate":"2021-10-10"},{"lineNumber":161,"author":{"gitId":"kengjit"},"content":"                    throw new FitNusException(INVALID_COMMAND_MESSAGE);","lastModifiedDate":"2021-10-12"},{"lineNumber":162,"author":{"gitId":"siyuancheng178"},"content":"                }","lastModifiedDate":"2021-10-10"},{"lineNumber":163,"author":{"gitId":"praj-bellakka"},"content":"            }","lastModifiedDate":"2021-10-08"},{"lineNumber":164,"author":{"gitId":"praj-bellakka"},"content":"            String inputCommandType \u003d input.substring(0, spaceIndex);","lastModifiedDate":"2021-10-10"},{"lineNumber":165,"author":{"gitId":"praj-bellakka"},"content":"            String subString \u003d input.substring(spaceIndex).trim();","lastModifiedDate":"2021-10-20"},{"lineNumber":166,"author":{"gitId":"praj-bellakka"},"content":"            if (inputCommandType.equals(COMMAND_ADD)) { //add custom food","lastModifiedDate":"2021-10-10"},{"lineNumber":167,"author":{"gitId":"praj-bellakka"},"content":"                return parseAddTypeCommand(subString, fd, md);","lastModifiedDate":"2021-10-24"},{"lineNumber":168,"author":{"gitId":"praj-bellakka"},"content":"            }","lastModifiedDate":"2021-10-08"},{"lineNumber":169,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":170,"author":{"gitId":"praj-bellakka"},"content":"            if (inputCommandType.equals(COMMAND_LIST)) { //list type command","lastModifiedDate":"2021-10-10"},{"lineNumber":171,"author":{"gitId":"siyuancheng178"},"content":"                return parseListTypeCommand(subString);","lastModifiedDate":"2021-10-12"},{"lineNumber":172,"author":{"gitId":"praj-bellakka"},"content":"            }","lastModifiedDate":"2021-10-06"},{"lineNumber":173,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":174,"author":{"gitId":"kengjit"},"content":"            if (inputCommandType.equals(COMMAND_EDIT)) { //edit type command","lastModifiedDate":"2021-10-24"},{"lineNumber":175,"author":{"gitId":"kengjit"},"content":"                return parseEditTypeCommand(subString, fd, ed);","lastModifiedDate":"2021-10-24"},{"lineNumber":176,"author":{"gitId":"kengjit"},"content":"            }","lastModifiedDate":"2021-10-24"},{"lineNumber":177,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":178,"author":{"gitId":"praj-bellakka"},"content":"            if (inputCommandType.equals(COMMAND_CALORIE)) { //calorie type command","lastModifiedDate":"2021-10-10"},{"lineNumber":179,"author":{"gitId":"siyuancheng178"},"content":"                return parseCalorieTypeCommand(subString);","lastModifiedDate":"2021-10-12"},{"lineNumber":180,"author":{"gitId":"praj-bellakka"},"content":"            }","lastModifiedDate":"2021-10-06"},{"lineNumber":181,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":182,"author":{"gitId":"praj-bellakka"},"content":"            if (inputCommandType.equals(COMMAND_GENDER)) { //gender type command","lastModifiedDate":"2021-10-10"},{"lineNumber":183,"author":{"gitId":"siyuancheng178"},"content":"                return parseGenderTypeCommand(subString);","lastModifiedDate":"2021-10-12"},{"lineNumber":184,"author":{"gitId":"praj-bellakka"},"content":"            }","lastModifiedDate":"2021-10-08"},{"lineNumber":185,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":186,"author":{"gitId":"aaapppsss"},"content":"            if (inputCommandType.equals(COMMAND_AGE)) { //gender type command","lastModifiedDate":"2021-10-24"},{"lineNumber":187,"author":{"gitId":"aaapppsss"},"content":"                return parseAgeTypeCommand(subString);","lastModifiedDate":"2021-10-24"},{"lineNumber":188,"author":{"gitId":"aaapppsss"},"content":"            }","lastModifiedDate":"2021-10-24"},{"lineNumber":189,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":190,"author":{"gitId":"aaapppsss"},"content":"            if (inputCommandType.equals(COMMAND_HEIGHT)) { //gender type command","lastModifiedDate":"2021-10-24"},{"lineNumber":191,"author":{"gitId":"aaapppsss"},"content":"                return parseHeightTypeCommand(subString);","lastModifiedDate":"2021-10-24"},{"lineNumber":192,"author":{"gitId":"aaapppsss"},"content":"            }","lastModifiedDate":"2021-10-24"},{"lineNumber":193,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":194,"author":{"gitId":"aaapppsss"},"content":"            if (inputCommandType.equals(COMMAND_WEIGHT)) { //gender type command","lastModifiedDate":"2021-10-24"},{"lineNumber":195,"author":{"gitId":"aaapppsss"},"content":"                return parseWeightTypeCommand(subString);","lastModifiedDate":"2021-10-24"},{"lineNumber":196,"author":{"gitId":"aaapppsss"},"content":"            }","lastModifiedDate":"2021-10-24"},{"lineNumber":197,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":198,"author":{"gitId":"praj-bellakka"},"content":"            if (inputCommandType.equals(COMMAND_REMOVE)) {","lastModifiedDate":"2021-10-10"},{"lineNumber":199,"author":{"gitId":"siyuancheng178"},"content":"                return parseRemoveTypeCommand(subString);","lastModifiedDate":"2021-10-12"},{"lineNumber":200,"author":{"gitId":"praj-bellakka"},"content":"            }","lastModifiedDate":"2021-10-06"},{"lineNumber":201,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":202,"author":{"gitId":"brendanlsz"},"content":"            if (inputCommandType.equals(COMMAND_FIND)) {","lastModifiedDate":"2021-10-19"},{"lineNumber":203,"author":{"gitId":"aaapppsss"},"content":"                return parseFindTypeCommand(subString);","lastModifiedDate":"2021-10-24"},{"lineNumber":204,"author":{"gitId":"brendanlsz"},"content":"            }","lastModifiedDate":"2021-10-19"},{"lineNumber":205,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":206,"author":{"gitId":"brendanlsz"},"content":"            if (inputCommandType.equals(COMMAND_SUGGEST)) {","lastModifiedDate":"2021-10-23"},{"lineNumber":207,"author":{"gitId":"brendanlsz"},"content":"                return parseSuggestCommand(subString);","lastModifiedDate":"2021-10-31"},{"lineNumber":208,"author":{"gitId":"brendanlsz"},"content":"            }","lastModifiedDate":"2021-10-23"},{"lineNumber":209,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":210,"author":{"gitId":"kengjit"},"content":"            if (inputCommandType.equals(COMMAND_SUMMARY)) { //summary type command","lastModifiedDate":"2021-10-24"},{"lineNumber":211,"author":{"gitId":"aaapppsss"},"content":"                return parseSummaryTypeCommand(subString);","lastModifiedDate":"2021-10-24"},{"lineNumber":212,"author":{"gitId":"kengjit"},"content":"            }","lastModifiedDate":"2021-10-24"},{"lineNumber":213,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":214,"author":{"gitId":"praj-bellakka"},"content":"            if (inputCommandType.equals(COMMAND_CREATE)) { //summary type command","lastModifiedDate":"2021-10-24"},{"lineNumber":215,"author":{"gitId":"praj-bellakka"},"content":"                return parseCreateCommand(subString, fd);","lastModifiedDate":"2021-10-24"},{"lineNumber":216,"author":{"gitId":"praj-bellakka"},"content":"            }","lastModifiedDate":"2021-10-24"},{"lineNumber":217,"author":{"gitId":"praj-bellakka"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2021-10-10"},{"lineNumber":218,"author":{"gitId":"aaapppsss"},"content":"            throw new FitNusException(\"Input format is not correct! Type \u0027help\u0027 for a list of commands\\n\"","lastModifiedDate":"2021-11-04"},{"lineNumber":219,"author":{"gitId":"aaapppsss"},"content":"                    + \"and their command formats.\");","lastModifiedDate":"2021-11-04"},{"lineNumber":220,"author":{"gitId":"praj-bellakka"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2021-10-10"},{"lineNumber":221,"author":{"gitId":"kengjit"},"content":"            throw new FitNusException(\"Input value is not an integer!\");","lastModifiedDate":"2021-10-12"},{"lineNumber":222,"author":{"gitId":"praj-bellakka"},"content":"        } catch (StringIndexOutOfBoundsException e) {","lastModifiedDate":"2021-10-10"},{"lineNumber":223,"author":{"gitId":"aaapppsss"},"content":"            throw new FitNusException(\"Did you forget to write the full command? Type \u0027help\u0027 for a list of commands\\n\"","lastModifiedDate":"2021-11-04"},{"lineNumber":224,"author":{"gitId":"aaapppsss"},"content":"                    + \"and their command formats.\");","lastModifiedDate":"2021-11-04"},{"lineNumber":225,"author":{"gitId":"aaapppsss"},"content":"        }","lastModifiedDate":"2021-10-08"},{"lineNumber":226,"author":{"gitId":"kengjit"},"content":"        throw new FitNusException(INVALID_COMMAND_MESSAGE);","lastModifiedDate":"2021-10-12"},{"lineNumber":227,"author":{"gitId":"aaapppsss"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":228,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":229,"author":{"gitId":"praj-bellakka"},"content":"    /**","lastModifiedDate":"2021-10-21"},{"lineNumber":230,"author":{"gitId":"praj-bellakka"},"content":"     * Function parses type of add method called and returns a Command object representing the type.","lastModifiedDate":"2021-11-04"},{"lineNumber":231,"author":{"gitId":"praj-bellakka"},"content":"     *","lastModifiedDate":"2021-10-21"},{"lineNumber":232,"author":{"gitId":"praj-bellakka"},"content":"     * @param input String containing food name and mealtype (optional).","lastModifiedDate":"2021-10-21"},{"lineNumber":233,"author":{"gitId":"praj-bellakka"},"content":"     * @param fd    FoodDatabase object passed from Main(), containing food in database.","lastModifiedDate":"2021-10-21"},{"lineNumber":234,"author":{"gitId":"praj-bellakka"},"content":"     * @return Command object.","lastModifiedDate":"2021-11-04"},{"lineNumber":235,"author":{"gitId":"praj-bellakka"},"content":"     * @throws FitNusException Thrown when foodname is empty.","lastModifiedDate":"2021-10-21"},{"lineNumber":236,"author":{"gitId":"praj-bellakka"},"content":"     */","lastModifiedDate":"2021-10-21"},{"lineNumber":237,"author":{"gitId":"praj-bellakka"},"content":"    public Command parseAddTypeCommand(String input, FoodDatabase fd, MealPlanDatabase md) throws FitNusException {","lastModifiedDate":"2021-11-06"},{"lineNumber":238,"author":{"gitId":"praj-bellakka"},"content":"        //find meal category and food name","lastModifiedDate":"2021-11-04"},{"lineNumber":239,"author":{"gitId":"praj-bellakka"},"content":"        int spaceCharacterIndex \u003d input.indexOf(SPACE_CHARACTER);","lastModifiedDate":"2021-10-20"},{"lineNumber":240,"author":{"gitId":"praj-bellakka"},"content":"        String mealTypeString \u003d \"\";","lastModifiedDate":"2021-10-20"},{"lineNumber":241,"author":{"gitId":"praj-bellakka"},"content":"        if (spaceCharacterIndex \u003d\u003d -1) {","lastModifiedDate":"2021-10-20"},{"lineNumber":242,"author":{"gitId":"praj-bellakka"},"content":"            mealTypeString \u003d input;","lastModifiedDate":"2021-10-20"},{"lineNumber":243,"author":{"gitId":"praj-bellakka"},"content":"        } else {","lastModifiedDate":"2021-10-20"},{"lineNumber":244,"author":{"gitId":"praj-bellakka"},"content":"            mealTypeString \u003d input.substring(0, input.indexOf(SPACE_CHARACTER));","lastModifiedDate":"2021-10-20"},{"lineNumber":245,"author":{"gitId":"praj-bellakka"},"content":"        }","lastModifiedDate":"2021-10-20"},{"lineNumber":246,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":247,"author":{"gitId":"praj-bellakka"},"content":"        //check if it is adding meal plan","lastModifiedDate":"2021-10-24"},{"lineNumber":248,"author":{"gitId":"praj-bellakka"},"content":"        if (mealTypeString.equals(DESCRIPTOR_MEALPLAN)) {","lastModifiedDate":"2021-10-24"},{"lineNumber":249,"author":{"gitId":"praj-bellakka"},"content":"            return parseAddMealPlanFoodCommand(md, input);","lastModifiedDate":"2021-10-24"},{"lineNumber":250,"author":{"gitId":"praj-bellakka"},"content":"        } else {","lastModifiedDate":"2021-11-04"},{"lineNumber":251,"author":{"gitId":"praj-bellakka"},"content":"            return parseAddFoodCommand(input, fd, mealTypeString);","lastModifiedDate":"2021-11-04"},{"lineNumber":252,"author":{"gitId":"praj-bellakka"},"content":"        }","lastModifiedDate":"2021-11-04"},{"lineNumber":253,"author":{"gitId":"praj-bellakka"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":254,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":255,"author":{"gitId":"praj-bellakka"},"content":"    /**","lastModifiedDate":"2021-11-04"},{"lineNumber":256,"author":{"gitId":"praj-bellakka"},"content":"     * Parses add food command by returning AddFoodEntryCommand object with its parameters.","lastModifiedDate":"2021-11-04"},{"lineNumber":257,"author":{"gitId":"praj-bellakka"},"content":"     * Method returns a prompt to user if food is already present in database or to enter calorie and meal type of food.","lastModifiedDate":"2021-11-04"},{"lineNumber":258,"author":{"gitId":"praj-bellakka"},"content":"     * Calorie of food must be between 1 and 5000, or prompt continues in infinite loop.","lastModifiedDate":"2021-11-04"},{"lineNumber":259,"author":{"gitId":"praj-bellakka"},"content":"     *","lastModifiedDate":"2021-11-06"},{"lineNumber":260,"author":{"gitId":"praj-bellakka"},"content":"     * @param input          String containing user input.","lastModifiedDate":"2021-11-04"},{"lineNumber":261,"author":{"gitId":"praj-bellakka"},"content":"     * @param fd             Food database containing existing food items.","lastModifiedDate":"2021-11-04"},{"lineNumber":262,"author":{"gitId":"praj-bellakka"},"content":"     * @param mealTypeString String describing the type of food.","lastModifiedDate":"2021-11-04"},{"lineNumber":263,"author":{"gitId":"praj-bellakka"},"content":"     * @return AddFoodEntryCommand object.","lastModifiedDate":"2021-11-04"},{"lineNumber":264,"author":{"gitId":"praj-bellakka"},"content":"     * @throws FitNusException Thrown when command format is not fulfilled.","lastModifiedDate":"2021-11-04"},{"lineNumber":265,"author":{"gitId":"praj-bellakka"},"content":"     */","lastModifiedDate":"2021-11-04"},{"lineNumber":266,"author":{"gitId":"praj-bellakka"},"content":"    public AddFoodEntryCommand parseAddFoodCommand(String input, FoodDatabase fd, String mealTypeString)","lastModifiedDate":"2021-11-06"},{"lineNumber":267,"author":{"gitId":"praj-bellakka"},"content":"            throws FitNusException {","lastModifiedDate":"2021-11-04"},{"lineNumber":268,"author":{"gitId":"praj-bellakka"},"content":"        MealType mealType \u003d parseMealType(mealTypeString, false);","lastModifiedDate":"2021-10-21"},{"lineNumber":269,"author":{"gitId":"praj-bellakka"},"content":"        String foodName \u003d \"\";","lastModifiedDate":"2021-10-19"},{"lineNumber":270,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":271,"author":{"gitId":"praj-bellakka"},"content":"        //if mealType is null, user didn\u0027t specify the command; auto tag the meal type","lastModifiedDate":"2021-11-04"},{"lineNumber":272,"author":{"gitId":"praj-bellakka"},"content":"        if (mealType.equals(MealType.UNDEFINED)) {","lastModifiedDate":"2021-10-19"},{"lineNumber":273,"author":{"gitId":"praj-bellakka"},"content":"            foodName \u003d removePipeCharacterFoodName(input, mealType);","lastModifiedDate":"2021-11-04"},{"lineNumber":274,"author":{"gitId":"praj-bellakka"},"content":"            mealType \u003d mealType.findMealTypeTiming();","lastModifiedDate":"2021-10-21"},{"lineNumber":275,"author":{"gitId":"praj-bellakka"},"content":"            Ui.printAutoAddedFoodCategory(mealType.name(), true);","lastModifiedDate":"2021-11-01"},{"lineNumber":276,"author":{"gitId":"praj-bellakka"},"content":"        } else {","lastModifiedDate":"2021-10-19"},{"lineNumber":277,"author":{"gitId":"praj-bellakka"},"content":"            foodName \u003d removePipeCharacterFoodName(input, mealType);","lastModifiedDate":"2021-11-04"},{"lineNumber":278,"author":{"gitId":"praj-bellakka"},"content":"        }","lastModifiedDate":"2021-10-19"},{"lineNumber":279,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":280,"author":{"gitId":"praj-bellakka"},"content":"        //search database if food exists","lastModifiedDate":"2021-11-04"},{"lineNumber":281,"author":{"gitId":"kengjit"},"content":"        Ui.print(Ui.DIVIDER);","lastModifiedDate":"2021-11-04"},{"lineNumber":282,"author":{"gitId":"kengjit"},"content":"        System.out.println(\"Searching for \\\"\" + foodName + \"\\\"...\");","lastModifiedDate":"2021-11-02"},{"lineNumber":283,"author":{"gitId":"praj-bellakka"},"content":"        ArrayList\u003cFood\u003e tempDbFoods \u003d fd.findFoods(foodName);","lastModifiedDate":"2021-11-04"},{"lineNumber":284,"author":{"gitId":"praj-bellakka"},"content":"        Ui newUi \u003d new Ui();","lastModifiedDate":"2021-10-20"},{"lineNumber":285,"author":{"gitId":"brendanlsz"},"content":"        if (tempDbFoods.size() \u003e 0) {","lastModifiedDate":"2021-11-06"},{"lineNumber":286,"author":{"gitId":"brendanlsz"},"content":"            System.out.println(\" [X] Select your desired food from the list below:\");","lastModifiedDate":"2021-11-06"},{"lineNumber":287,"author":{"gitId":"brendanlsz"},"content":"            Ui.printMatchingFoods(tempDbFoods);","lastModifiedDate":"2021-11-06"},{"lineNumber":288,"author":{"gitId":"brendanlsz"},"content":"        }","lastModifiedDate":"2021-11-06"},{"lineNumber":289,"author":{"gitId":"praj-bellakka"},"content":"        int userInputLoop;","lastModifiedDate":"2021-10-20"},{"lineNumber":290,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":291,"author":{"gitId":"praj-bellakka"},"content":"        //prompt the user the suggestions if matches are found","lastModifiedDate":"2021-11-04"},{"lineNumber":292,"author":{"gitId":"praj-bellakka"},"content":"        if (tempDbFoods.size() \u003e 0) {","lastModifiedDate":"2021-11-04"},{"lineNumber":293,"author":{"gitId":"kengjit"},"content":"            Ui.print(Ui.DIVIDER);","lastModifiedDate":"2021-11-04"},{"lineNumber":294,"author":{"gitId":"kengjit"},"content":"            System.out.println(\"Don\u0027t see what you\u0027re looking for? Enter 0 to create your own food!\");","lastModifiedDate":"2021-11-02"},{"lineNumber":295,"author":{"gitId":"kengjit"},"content":"            Ui.print(Ui.USER_INPUT);","lastModifiedDate":"2021-11-04"},{"lineNumber":296,"author":{"gitId":"brendanlsz"},"content":"            return returnUserInput(mealType, foodName, tempDbFoods, newUi, true);","lastModifiedDate":"2021-11-06"},{"lineNumber":297,"author":{"gitId":"praj-bellakka"},"content":"        } else if (tempDbFoods.size() \u003d\u003d 0) {","lastModifiedDate":"2021-11-04"},{"lineNumber":298,"author":{"gitId":"praj-bellakka"},"content":"            //prompt the user to input calorie if not match","lastModifiedDate":"2021-11-04"},{"lineNumber":299,"author":{"gitId":"brendanlsz"},"content":"            Ui.printPromptUserFoodInput(foodName);","lastModifiedDate":"2021-11-06"},{"lineNumber":300,"author":{"gitId":"brendanlsz"},"content":"            return returnUserInput(mealType, foodName, tempDbFoods, newUi, false);","lastModifiedDate":"2021-11-06"},{"lineNumber":301,"author":{"gitId":"praj-bellakka"},"content":"        }","lastModifiedDate":"2021-10-20"},{"lineNumber":302,"author":{"gitId":"praj-bellakka"},"content":"        assert (tempDbFoods.size() \u003e\u003d 0);","lastModifiedDate":"2021-11-04"},{"lineNumber":303,"author":{"gitId":"praj-bellakka"},"content":"        return null;","lastModifiedDate":"2021-10-20"},{"lineNumber":304,"author":{"gitId":"praj-bellakka"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":305,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":306,"author":{"gitId":"praj-bellakka"},"content":"    /**","lastModifiedDate":"2021-11-04"},{"lineNumber":307,"author":{"gitId":"praj-bellakka"},"content":"     * Returns AddMealPlanEntryCommand to add meal plans currently in mealplan database.","lastModifiedDate":"2021-11-04"},{"lineNumber":308,"author":{"gitId":"praj-bellakka"},"content":"     * Meal plan must exist inside database or FitNusException will be thrown.","lastModifiedDate":"2021-11-04"},{"lineNumber":309,"author":{"gitId":"praj-bellakka"},"content":"     *","lastModifiedDate":"2021-11-04"},{"lineNumber":310,"author":{"gitId":"praj-bellakka"},"content":"     * @param md    Meal plan database containing existing meal plans.","lastModifiedDate":"2021-11-04"},{"lineNumber":311,"author":{"gitId":"praj-bellakka"},"content":"     * @param input String input entered by the user.","lastModifiedDate":"2021-11-04"},{"lineNumber":312,"author":{"gitId":"praj-bellakka"},"content":"     * @return AddMealPlanEntryCommand AddMealPlanEntryCommand with set parameters.","lastModifiedDate":"2021-11-04"},{"lineNumber":313,"author":{"gitId":"praj-bellakka"},"content":"     * @throws FitNusException Thrown when mealplan does not exist.","lastModifiedDate":"2021-11-04"},{"lineNumber":314,"author":{"gitId":"praj-bellakka"},"content":"     */","lastModifiedDate":"2021-11-04"},{"lineNumber":315,"author":{"gitId":"praj-bellakka"},"content":"    public AddMealPlanEntryCommand parseAddMealPlanFoodCommand(MealPlanDatabase md, String input)","lastModifiedDate":"2021-11-06"},{"lineNumber":316,"author":{"gitId":"praj-bellakka"},"content":"            throws FitNusException {","lastModifiedDate":"2021-10-25"},{"lineNumber":317,"author":{"gitId":"praj-bellakka"},"content":"        int spaceIndex \u003d input.indexOf(SPACE_CHARACTER);","lastModifiedDate":"2021-10-24"},{"lineNumber":318,"author":{"gitId":"praj-bellakka"},"content":"        if (spaceIndex \u003d\u003d -1) {","lastModifiedDate":"2021-10-24"},{"lineNumber":319,"author":{"gitId":"praj-bellakka"},"content":"            throw new FitNusException(\"Invalid format\");","lastModifiedDate":"2021-10-24"},{"lineNumber":320,"author":{"gitId":"praj-bellakka"},"content":"        }","lastModifiedDate":"2021-10-24"},{"lineNumber":321,"author":{"gitId":"praj-bellakka"},"content":"        String remainingString \u003d input.substring(spaceIndex).strip();","lastModifiedDate":"2021-10-24"},{"lineNumber":322,"author":{"gitId":"praj-bellakka"},"content":"        int spaceRemainingIndex \u003d remainingString.indexOf(SPACE_CHARACTER);","lastModifiedDate":"2021-10-24"},{"lineNumber":323,"author":{"gitId":"praj-bellakka"},"content":"        MealType mealType \u003d MealType.UNDEFINED;","lastModifiedDate":"2021-11-04"},{"lineNumber":324,"author":{"gitId":"praj-bellakka"},"content":"        //mealType has not been specified by the user","lastModifiedDate":"2021-11-04"},{"lineNumber":325,"author":{"gitId":"praj-bellakka"},"content":"        if (spaceRemainingIndex \u003d\u003d -1) {","lastModifiedDate":"2021-10-24"},{"lineNumber":326,"author":{"gitId":"praj-bellakka"},"content":"            mealType \u003d mealType.findMealTypeTiming();","lastModifiedDate":"2021-11-04"},{"lineNumber":327,"author":{"gitId":"praj-bellakka"},"content":"            //throw new FitNusException(\"Invalid format\");","lastModifiedDate":"2021-11-04"},{"lineNumber":328,"author":{"gitId":"praj-bellakka"},"content":"        } else {","lastModifiedDate":"2021-11-04"},{"lineNumber":329,"author":{"gitId":"praj-bellakka"},"content":"            mealType \u003d parseMealType(remainingString.substring(0, spaceRemainingIndex), false);","lastModifiedDate":"2021-11-04"},{"lineNumber":330,"author":{"gitId":"praj-bellakka"},"content":"        }","lastModifiedDate":"2021-10-24"},{"lineNumber":331,"author":{"gitId":"praj-bellakka"},"content":"        try {","lastModifiedDate":"2021-10-24"},{"lineNumber":332,"author":{"gitId":"praj-bellakka"},"content":"            int index;","lastModifiedDate":"2021-11-04"},{"lineNumber":333,"author":{"gitId":"praj-bellakka"},"content":"            if (spaceRemainingIndex \u003d\u003d -1) {","lastModifiedDate":"2021-11-04"},{"lineNumber":334,"author":{"gitId":"praj-bellakka"},"content":"                index \u003d Integer.parseInt(remainingString.strip());","lastModifiedDate":"2021-11-04"},{"lineNumber":335,"author":{"gitId":"praj-bellakka"},"content":"            } else if (!remainingString.substring(0, spaceRemainingIndex).contains(BACKSLASH_CHARACTER)) {","lastModifiedDate":"2021-11-04"},{"lineNumber":336,"author":{"gitId":"praj-bellakka"},"content":"                throw new FitNusException(\"Recheck command format!\");","lastModifiedDate":"2021-11-04"},{"lineNumber":337,"author":{"gitId":"praj-bellakka"},"content":"            } else {","lastModifiedDate":"2021-11-04"},{"lineNumber":338,"author":{"gitId":"praj-bellakka"},"content":"                index \u003d Integer.parseInt(remainingString.substring(spaceRemainingIndex).strip());","lastModifiedDate":"2021-11-04"},{"lineNumber":339,"author":{"gitId":"praj-bellakka"},"content":"            }","lastModifiedDate":"2021-11-04"},{"lineNumber":340,"author":{"gitId":"praj-bellakka"},"content":"            return new AddMealPlanEntryCommand(md.getMealAtIndex(index), mealType);","lastModifiedDate":"2021-10-24"},{"lineNumber":341,"author":{"gitId":"praj-bellakka"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2021-10-24"},{"lineNumber":342,"author":{"gitId":"praj-bellakka"},"content":"            throw new FitNusException(\"Integer index could not be parsed. Check format again!\");","lastModifiedDate":"2021-10-24"},{"lineNumber":343,"author":{"gitId":"praj-bellakka"},"content":"        }","lastModifiedDate":"2021-10-24"},{"lineNumber":344,"author":{"gitId":"praj-bellakka"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":345,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":346,"author":{"gitId":"praj-bellakka"},"content":"    /**","lastModifiedDate":"2021-11-06"},{"lineNumber":347,"author":{"gitId":"praj-bellakka"},"content":"     * Returns CreateMealPlanCommand object when called and creates a custom meal plan.","lastModifiedDate":"2021-11-06"},{"lineNumber":348,"author":{"gitId":"praj-bellakka"},"content":"     *","lastModifiedDate":"2021-11-06"},{"lineNumber":349,"author":{"gitId":"praj-bellakka"},"content":"     * @param input String input containing meal plan name.","lastModifiedDate":"2021-11-06"},{"lineNumber":350,"author":{"gitId":"praj-bellakka"},"content":"     * @param fd    FoodDatabase object.","lastModifiedDate":"2021-11-06"},{"lineNumber":351,"author":{"gitId":"praj-bellakka"},"content":"     * @return CreateMealPlanCommand object.","lastModifiedDate":"2021-11-06"},{"lineNumber":352,"author":{"gitId":"praj-bellakka"},"content":"     * @throws FitNusException Thrown when input format is invalid.","lastModifiedDate":"2021-11-06"},{"lineNumber":353,"author":{"gitId":"praj-bellakka"},"content":"     */","lastModifiedDate":"2021-11-06"},{"lineNumber":354,"author":{"gitId":"praj-bellakka"},"content":"    private CreateMealPlanCommand parseCreateCommand(String input, FoodDatabase fd) throws FitNusException {","lastModifiedDate":"2021-10-24"},{"lineNumber":355,"author":{"gitId":"praj-bellakka"},"content":"        String[] arrayFormInput \u003d input.split(SPACE_CHARACTER);","lastModifiedDate":"2021-10-24"},{"lineNumber":356,"author":{"gitId":"praj-bellakka"},"content":"        if (!arrayFormInput[0].equals(DESCRIPTOR_MEALPLAN)) {","lastModifiedDate":"2021-10-24"},{"lineNumber":357,"author":{"gitId":"praj-bellakka"},"content":"            throw new FitNusException(\"Invalid Command Format!\");","lastModifiedDate":"2021-10-24"},{"lineNumber":358,"author":{"gitId":"praj-bellakka"},"content":"        }","lastModifiedDate":"2021-10-24"},{"lineNumber":359,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":360,"author":{"gitId":"praj-bellakka"},"content":"        int spaceCharacterIndex \u003d input.indexOf(SPACE_CHARACTER);","lastModifiedDate":"2021-10-24"},{"lineNumber":361,"author":{"gitId":"praj-bellakka"},"content":"        String mealNameString \u003d \"\";","lastModifiedDate":"2021-10-24"},{"lineNumber":362,"author":{"gitId":"praj-bellakka"},"content":"        if (spaceCharacterIndex \u003d\u003d -1) {","lastModifiedDate":"2021-10-24"},{"lineNumber":363,"author":{"gitId":"praj-bellakka"},"content":"            throw new FitNusException(\"Meal plan name cannot be empty!\");","lastModifiedDate":"2021-10-24"},{"lineNumber":364,"author":{"gitId":"praj-bellakka"},"content":"        } else {","lastModifiedDate":"2021-10-24"},{"lineNumber":365,"author":{"gitId":"praj-bellakka"},"content":"            mealNameString \u003d input.substring(input.indexOf(SPACE_CHARACTER))","lastModifiedDate":"2021-11-01"},{"lineNumber":366,"author":{"gitId":"praj-bellakka"},"content":"                    .strip().replaceAll(\"\\\\|\", \"\");","lastModifiedDate":"2021-11-01"},{"lineNumber":367,"author":{"gitId":"praj-bellakka"},"content":"        }","lastModifiedDate":"2021-10-24"},{"lineNumber":368,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":369,"author":{"gitId":"praj-bellakka"},"content":"        //display all current foods","lastModifiedDate":"2021-11-01"},{"lineNumber":370,"author":{"gitId":"praj-bellakka"},"content":"        Ui newUi \u003d new Ui();","lastModifiedDate":"2021-10-24"},{"lineNumber":371,"author":{"gitId":"brendanlsz"},"content":"        Ui.printMealPlanCreation(fd);","lastModifiedDate":"2021-11-06"},{"lineNumber":372,"author":{"gitId":"praj-bellakka"},"content":"        ArrayList\u003cFood\u003e tempMealFoods \u003d new ArrayList\u003cFood\u003e();","lastModifiedDate":"2021-10-24"},{"lineNumber":373,"author":{"gitId":"praj-bellakka"},"content":"        String[] userInputIndexes \u003d newUi.readIndexesInput(System.in, System.out);","lastModifiedDate":"2021-11-06"},{"lineNumber":374,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":375,"author":{"gitId":"praj-bellakka"},"content":"        //for each index, check if it is an integer and within range","lastModifiedDate":"2021-11-04"},{"lineNumber":376,"author":{"gitId":"praj-bellakka"},"content":"        for (String i : userInputIndexes) {","lastModifiedDate":"2021-10-24"},{"lineNumber":377,"author":{"gitId":"praj-bellakka"},"content":"            try {","lastModifiedDate":"2021-10-24"},{"lineNumber":378,"author":{"gitId":"praj-bellakka"},"content":"                int inputInt \u003d Integer.parseInt(i);","lastModifiedDate":"2021-10-24"},{"lineNumber":379,"author":{"gitId":"praj-bellakka"},"content":"                if (inputInt \u003e fd.getFoodDatabase().size() || inputInt \u003c\u003d 0) {","lastModifiedDate":"2021-10-24"},{"lineNumber":380,"author":{"gitId":"brendanlsz"},"content":"                    Ui.printOutOfRangeInputInteger(inputInt);","lastModifiedDate":"2021-11-06"},{"lineNumber":381,"author":{"gitId":"praj-bellakka"},"content":"                    continue;","lastModifiedDate":"2021-10-24"},{"lineNumber":382,"author":{"gitId":"praj-bellakka"},"content":"                }","lastModifiedDate":"2021-10-24"},{"lineNumber":383,"author":{"gitId":"praj-bellakka"},"content":"                tempMealFoods.add(fd.getFoodDatabase().get(inputInt - 1));","lastModifiedDate":"2021-10-24"},{"lineNumber":384,"author":{"gitId":"praj-bellakka"},"content":"            } catch (NumberFormatException e) {","lastModifiedDate":"2021-10-24"},{"lineNumber":385,"author":{"gitId":"brendanlsz"},"content":"                Ui.printInvalidInputInteger(i);","lastModifiedDate":"2021-11-06"},{"lineNumber":386,"author":{"gitId":"praj-bellakka"},"content":"            }","lastModifiedDate":"2021-10-24"},{"lineNumber":387,"author":{"gitId":"praj-bellakka"},"content":"        }","lastModifiedDate":"2021-10-24"},{"lineNumber":388,"author":{"gitId":"praj-bellakka"},"content":"        return new CreateMealPlanCommand(tempMealFoods, mealNameString);","lastModifiedDate":"2021-10-24"},{"lineNumber":389,"author":{"gitId":"praj-bellakka"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":390,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":391,"author":{"gitId":"praj-bellakka"},"content":"    /**","lastModifiedDate":"2021-10-20"},{"lineNumber":392,"author":{"gitId":"praj-bellakka"},"content":"     * Function receives input from the user when adding food.","lastModifiedDate":"2021-11-04"},{"lineNumber":393,"author":{"gitId":"praj-bellakka"},"content":"     * If the user inputs an invalid entry for calorie, i.e. negative or non-integers, the function continues looping.","lastModifiedDate":"2021-10-20"},{"lineNumber":394,"author":{"gitId":"praj-bellakka"},"content":"     * If the user inputs an invalid entry for selecting choice, i.e. out of range, negative or non-integer,","lastModifiedDate":"2021-10-20"},{"lineNumber":395,"author":{"gitId":"praj-bellakka"},"content":"     * the function will continue looping.","lastModifiedDate":"2021-11-04"},{"lineNumber":396,"author":{"gitId":"praj-bellakka"},"content":"     * {@link #isLoopFlagOn} breakLoopFlag is set to false when user prompt loop is not needed, else loop continues.","lastModifiedDate":"2021-10-22"},{"lineNumber":397,"author":{"gitId":"praj-bellakka"},"content":"     *","lastModifiedDate":"2021-10-20"},{"lineNumber":398,"author":{"gitId":"praj-bellakka"},"content":"     * @param mealType           Type of meal.","lastModifiedDate":"2021-10-20"},{"lineNumber":399,"author":{"gitId":"praj-bellakka"},"content":"     * @param foodName           String name of food.","lastModifiedDate":"2021-10-20"},{"lineNumber":400,"author":{"gitId":"praj-bellakka"},"content":"     * @param tempDbFoods        An arraylist containing Food items matching user entry.","lastModifiedDate":"2021-11-04"},{"lineNumber":401,"author":{"gitId":"praj-bellakka"},"content":"     * @param newUi              Ui element responsible for receiving user input through CLI.","lastModifiedDate":"2021-10-20"},{"lineNumber":402,"author":{"gitId":"praj-bellakka"},"content":"     * @param hasMultipleEntries Boolean variable to run custom food entry. If true, function uses existing food items.","lastModifiedDate":"2021-11-04"},{"lineNumber":403,"author":{"gitId":"praj-bellakka"},"content":"     * @return AddFoodEntryCommand Command object containing relevant details.","lastModifiedDate":"2021-10-21"},{"lineNumber":404,"author":{"gitId":"praj-bellakka"},"content":"     */","lastModifiedDate":"2021-10-20"},{"lineNumber":405,"author":{"gitId":"praj-bellakka"},"content":"    private AddFoodEntryCommand returnUserInput(MealType mealType, String foodName, ArrayList\u003cFood\u003e tempDbFoods,","lastModifiedDate":"2021-11-04"},{"lineNumber":406,"author":{"gitId":"praj-bellakka"},"content":"                                                Ui newUi, boolean hasMultipleEntries) throws FitNusException {","lastModifiedDate":"2021-11-04"},{"lineNumber":407,"author":{"gitId":"praj-bellakka"},"content":"        int userInput \u003d 0;","lastModifiedDate":"2021-10-20"},{"lineNumber":408,"author":{"gitId":"praj-bellakka"},"content":"        if (hasMultipleEntries) {","lastModifiedDate":"2021-11-04"},{"lineNumber":409,"author":{"gitId":"praj-bellakka"},"content":"            do {","lastModifiedDate":"2021-10-20"},{"lineNumber":410,"author":{"gitId":"praj-bellakka"},"content":"                userInput \u003d parseInteger(newUi.readInput(System.in, System.out), tempDbFoods.size());","lastModifiedDate":"2021-11-06"},{"lineNumber":411,"author":{"gitId":"praj-bellakka"},"content":"            } while (isLoopFlagOn);","lastModifiedDate":"2021-10-22"},{"lineNumber":412,"author":{"gitId":"praj-bellakka"},"content":"        }","lastModifiedDate":"2021-10-20"},{"lineNumber":413,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":414,"author":{"gitId":"praj-bellakka"},"content":"        /**","lastModifiedDate":"2021-10-20"},{"lineNumber":415,"author":{"gitId":"praj-bellakka"},"content":"         * If user input is 0, the user specified his input to a be a custom food.","lastModifiedDate":"2021-10-20"},{"lineNumber":416,"author":{"gitId":"praj-bellakka"},"content":"         * New loop below will prompt the user to input the calories.","lastModifiedDate":"2021-11-04"},{"lineNumber":417,"author":{"gitId":"praj-bellakka"},"content":"         */","lastModifiedDate":"2021-10-20"},{"lineNumber":418,"author":{"gitId":"praj-bellakka"},"content":"        if (userInput \u003d\u003d 0) {","lastModifiedDate":"2021-10-20"},{"lineNumber":419,"author":{"gitId":"praj-bellakka"},"content":"            return (AddFoodEntryCommand) promptUserCalories(0, mealType, foodName, newUi);","lastModifiedDate":"2021-11-06"},{"lineNumber":420,"author":{"gitId":"siyuancheng178"},"content":"        }","lastModifiedDate":"2021-10-31"},{"lineNumber":421,"author":{"gitId":"praj-bellakka"},"content":"        return new AddFoodEntryCommand(mealType, tempDbFoods.get(userInput - 1));","lastModifiedDate":"2021-11-04"},{"lineNumber":422,"author":{"gitId":"praj-bellakka"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":423,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":424,"author":{"gitId":"praj-bellakka"},"content":"    private EditFoodEntryCommand returnUserInput(int index, String foodName, ArrayList\u003cFood\u003e tempDbFoods,","lastModifiedDate":"2021-11-04"},{"lineNumber":425,"author":{"gitId":"praj-bellakka"},"content":"                                                 Ui newUi, boolean hasMultipleEntries) throws FitNusException {","lastModifiedDate":"2021-11-04"},{"lineNumber":426,"author":{"gitId":"kengjit"},"content":"        int userInput \u003d 0;","lastModifiedDate":"2021-10-24"},{"lineNumber":427,"author":{"gitId":"praj-bellakka"},"content":"        if (hasMultipleEntries) {","lastModifiedDate":"2021-11-04"},{"lineNumber":428,"author":{"gitId":"kengjit"},"content":"            do {","lastModifiedDate":"2021-10-24"},{"lineNumber":429,"author":{"gitId":"praj-bellakka"},"content":"                userInput \u003d parseInteger(newUi.readInput(System.in, System.out), tempDbFoods.size());","lastModifiedDate":"2021-11-06"},{"lineNumber":430,"author":{"gitId":"kengjit"},"content":"            } while (isLoopFlagOn);","lastModifiedDate":"2021-10-24"},{"lineNumber":431,"author":{"gitId":"kengjit"},"content":"        }","lastModifiedDate":"2021-10-24"},{"lineNumber":432,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":433,"author":{"gitId":"kengjit"},"content":"        /**","lastModifiedDate":"2021-10-24"},{"lineNumber":434,"author":{"gitId":"praj-bellakka"},"content":"         * If user input is 0, the user specified his input to a be a custom food.","lastModifiedDate":"2021-11-06"},{"lineNumber":435,"author":{"gitId":"praj-bellakka"},"content":"         * New loop below will prompt the user to input the calories.","lastModifiedDate":"2021-11-06"},{"lineNumber":436,"author":{"gitId":"kengjit"},"content":"         */","lastModifiedDate":"2021-10-24"},{"lineNumber":437,"author":{"gitId":"kengjit"},"content":"        if (userInput \u003d\u003d 0) {","lastModifiedDate":"2021-10-24"},{"lineNumber":438,"author":{"gitId":"praj-bellakka"},"content":"            return (EditFoodEntryCommand) promptUserCalories(index, null, foodName, newUi);","lastModifiedDate":"2021-11-06"},{"lineNumber":439,"author":{"gitId":"praj-bellakka"},"content":"        }","lastModifiedDate":"2021-11-06"},{"lineNumber":440,"author":{"gitId":"praj-bellakka"},"content":"        return new EditFoodEntryCommand(index, tempDbFoods.get(userInput - 1));","lastModifiedDate":"2021-11-06"},{"lineNumber":441,"author":{"gitId":"praj-bellakka"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":442,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":443,"author":{"gitId":"praj-bellakka"},"content":"    /**","lastModifiedDate":"2021-11-06"},{"lineNumber":444,"author":{"gitId":"praj-bellakka"},"content":"     * Prompts user to enter calories between 1 and 5000 when called.","lastModifiedDate":"2021-11-06"},{"lineNumber":445,"author":{"gitId":"praj-bellakka"},"content":"     * Prompt continues in infinite loop until a valid calorie is inputted.","lastModifiedDate":"2021-11-06"},{"lineNumber":446,"author":{"gitId":"praj-bellakka"},"content":"     *","lastModifiedDate":"2021-11-06"},{"lineNumber":447,"author":{"gitId":"praj-bellakka"},"content":"     * @param index    Index if EditFoodEntryCommand is called.","lastModifiedDate":"2021-11-06"},{"lineNumber":448,"author":{"gitId":"praj-bellakka"},"content":"     * @param mealType MealType of food item.","lastModifiedDate":"2021-11-06"},{"lineNumber":449,"author":{"gitId":"praj-bellakka"},"content":"     * @param foodName String name of food.","lastModifiedDate":"2021-11-06"},{"lineNumber":450,"author":{"gitId":"praj-bellakka"},"content":"     * @param newUi    Ui element handling reading of CLI.","lastModifiedDate":"2021-11-06"},{"lineNumber":451,"author":{"gitId":"praj-bellakka"},"content":"     * @return Command subobjects.","lastModifiedDate":"2021-11-06"},{"lineNumber":452,"author":{"gitId":"praj-bellakka"},"content":"     * @throws FitNusException Thrown when invalid food type is detected.","lastModifiedDate":"2021-11-06"},{"lineNumber":453,"author":{"gitId":"praj-bellakka"},"content":"     */","lastModifiedDate":"2021-11-06"},{"lineNumber":454,"author":{"gitId":"praj-bellakka"},"content":"    private Command promptUserCalories(int index, MealType mealType, String foodName, Ui newUi) throws FitNusException {","lastModifiedDate":"2021-11-06"},{"lineNumber":455,"author":{"gitId":"praj-bellakka"},"content":"        int userInput;","lastModifiedDate":"2021-11-06"},{"lineNumber":456,"author":{"gitId":"brendanlsz"},"content":"        Ui.printAddCalorieToFood(foodName);","lastModifiedDate":"2021-11-06"},{"lineNumber":457,"author":{"gitId":"kengjit"},"content":"        isLoopFlagOn \u003d false;","lastModifiedDate":"2021-10-24"},{"lineNumber":458,"author":{"gitId":"kengjit"},"content":"        do {","lastModifiedDate":"2021-10-24"},{"lineNumber":459,"author":{"gitId":"praj-bellakka"},"content":"            userInput \u003d parseInteger(newUi.readInput(System.in, System.out)); //getting calories","lastModifiedDate":"2021-11-06"},{"lineNumber":460,"author":{"gitId":"kengjit"},"content":"        } while (isLoopFlagOn);","lastModifiedDate":"2021-10-24"},{"lineNumber":461,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":462,"author":{"gitId":"kengjit"},"content":"        Food.FoodType type \u003d null;","lastModifiedDate":"2021-10-24"},{"lineNumber":463,"author":{"gitId":"kengjit"},"content":"        do {","lastModifiedDate":"2021-10-24"},{"lineNumber":464,"author":{"gitId":"kengjit"},"content":"            System.out.println(\"[X] Enter food type (meal, snack, beverage, others):\");","lastModifiedDate":"2021-11-02"},{"lineNumber":465,"author":{"gitId":"praj-bellakka"},"content":"            String foodType \u003d newUi.readInput(System.in, System.out);","lastModifiedDate":"2021-11-06"},{"lineNumber":466,"author":{"gitId":"praj-bellakka"},"content":"            if (Arrays.asList(possibleFoodTypes).contains(foodType)) {","lastModifiedDate":"2021-11-04"},{"lineNumber":467,"author":{"gitId":"siyuancheng178"},"content":"                type \u003d parseFoodType(foodType);","lastModifiedDate":"2021-10-31"},{"lineNumber":468,"author":{"gitId":"siyuancheng178"},"content":"            } else {","lastModifiedDate":"2021-10-31"},{"lineNumber":469,"author":{"gitId":"siyuancheng178"},"content":"                type \u003d null;","lastModifiedDate":"2021-10-31"},{"lineNumber":470,"author":{"gitId":"kengjit"},"content":"                Ui.println(\"The food type provided is invalid! Please try again\");","lastModifiedDate":"2021-11-02"},{"lineNumber":471,"author":{"gitId":"siyuancheng178"},"content":"            }","lastModifiedDate":"2021-10-31"},{"lineNumber":472,"author":{"gitId":"kengjit"},"content":"        } while (type \u003d\u003d null);","lastModifiedDate":"2021-10-24"},{"lineNumber":473,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":474,"author":{"gitId":"praj-bellakka"},"content":"        //check type of Command object to return","lastModifiedDate":"2021-11-06"},{"lineNumber":475,"author":{"gitId":"praj-bellakka"},"content":"        if (mealType \u003d\u003d null) {","lastModifiedDate":"2021-11-06"},{"lineNumber":476,"author":{"gitId":"kengjit"},"content":"            return new EditFoodEntryCommand(index, foodName, userInput, type);","lastModifiedDate":"2021-10-24"},{"lineNumber":477,"author":{"gitId":"praj-bellakka"},"content":"        } else {","lastModifiedDate":"2021-11-06"},{"lineNumber":478,"author":{"gitId":"praj-bellakka"},"content":"            return new AddFoodEntryCommand(mealType, foodName, userInput, type);","lastModifiedDate":"2021-11-06"},{"lineNumber":479,"author":{"gitId":"kengjit"},"content":"        }","lastModifiedDate":"2021-10-24"},{"lineNumber":480,"author":{"gitId":"praj-bellakka"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":481,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":482,"author":{"gitId":"praj-bellakka"},"content":"    /**","lastModifiedDate":"2021-11-06"},{"lineNumber":483,"author":{"gitId":"praj-bellakka"},"content":"     * Removes pipe character from food name and replaces it with a space chacrater.","lastModifiedDate":"2021-11-06"},{"lineNumber":484,"author":{"gitId":"praj-bellakka"},"content":"     *","lastModifiedDate":"2021-11-06"},{"lineNumber":485,"author":{"gitId":"praj-bellakka"},"content":"     * @param input    String that may contain pipe characters.","lastModifiedDate":"2021-11-06"},{"lineNumber":486,"author":{"gitId":"praj-bellakka"},"content":"     * @param mealType MealType of food.","lastModifiedDate":"2021-11-06"},{"lineNumber":487,"author":{"gitId":"praj-bellakka"},"content":"     * @return foodName String without pipe characters.","lastModifiedDate":"2021-11-06"},{"lineNumber":488,"author":{"gitId":"praj-bellakka"},"content":"     */","lastModifiedDate":"2021-11-06"},{"lineNumber":489,"author":{"gitId":"praj-bellakka"},"content":"    public String removePipeCharacterFoodName(String input, MealType mealType) {","lastModifiedDate":"2021-11-06"},{"lineNumber":490,"author":{"gitId":"praj-bellakka"},"content":"        String foodName;","lastModifiedDate":"2021-11-06"},{"lineNumber":491,"author":{"gitId":"praj-bellakka"},"content":"        if (mealType.equals(MealType.UNDEFINED)) {","lastModifiedDate":"2021-11-06"},{"lineNumber":492,"author":{"gitId":"praj-bellakka"},"content":"            foodName \u003d input.strip().replaceAll(\"\\\\|\", \"\"); //replace pipe charcter with nothing","lastModifiedDate":"2021-11-06"},{"lineNumber":493,"author":{"gitId":"praj-bellakka"},"content":"        } else {","lastModifiedDate":"2021-11-06"},{"lineNumber":494,"author":{"gitId":"praj-bellakka"},"content":"            Ui.printAutoAddedFoodCategory(mealType.name(), false);","lastModifiedDate":"2021-11-06"},{"lineNumber":495,"author":{"gitId":"praj-bellakka"},"content":"            foodName \u003d input.substring(input.indexOf(SPACE_CHARACTER)).strip().replaceAll(\"\\\\|\", \"\");","lastModifiedDate":"2021-11-06"},{"lineNumber":496,"author":{"gitId":"kengjit"},"content":"        }","lastModifiedDate":"2021-10-24"},{"lineNumber":497,"author":{"gitId":"praj-bellakka"},"content":"        return foodName;","lastModifiedDate":"2021-11-06"},{"lineNumber":498,"author":{"gitId":"kengjit"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":499,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":500,"author":{"gitId":"praj-bellakka"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":501,"author":{"gitId":"praj-bellakka"},"content":"     * Returns a FoodType based on input string.","lastModifiedDate":"2021-11-07"},{"lineNumber":502,"author":{"gitId":"praj-bellakka"},"content":"     * Throws FitNusException if input does not match pre-defined FoodTypes.","lastModifiedDate":"2021-11-07"},{"lineNumber":503,"author":{"gitId":"praj-bellakka"},"content":"     *","lastModifiedDate":"2021-11-07"},{"lineNumber":504,"author":{"gitId":"praj-bellakka"},"content":"     * @param type String containing FoodType.","lastModifiedDate":"2021-11-07"},{"lineNumber":505,"author":{"gitId":"praj-bellakka"},"content":"     * @return FoodType object related to input.","lastModifiedDate":"2021-11-07"},{"lineNumber":506,"author":{"gitId":"praj-bellakka"},"content":"     * @throws FitNusException Thrown when specified FoodType input does not exist.","lastModifiedDate":"2021-11-07"},{"lineNumber":507,"author":{"gitId":"praj-bellakka"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":508,"author":{"gitId":"brendanlsz"},"content":"    public static Food.FoodType parseFoodType(String type) throws FitNusException {","lastModifiedDate":"2021-10-25"},{"lineNumber":509,"author":{"gitId":"brendanlsz"},"content":"        String typeString \u003d type.toLowerCase(Locale.ROOT);","lastModifiedDate":"2021-10-22"},{"lineNumber":510,"author":{"gitId":"brendanlsz"},"content":"        switch (typeString) {","lastModifiedDate":"2021-10-22"},{"lineNumber":511,"author":{"gitId":"brendanlsz"},"content":"        case SNACK_STRING:","lastModifiedDate":"2021-10-31"},{"lineNumber":512,"author":{"gitId":"brendanlsz"},"content":"            return Food.FoodType.SNACK;","lastModifiedDate":"2021-10-22"},{"lineNumber":513,"author":{"gitId":"brendanlsz"},"content":"        case BEVERAGE_STRING:","lastModifiedDate":"2021-10-31"},{"lineNumber":514,"author":{"gitId":"brendanlsz"},"content":"            return Food.FoodType.BEVERAGE;","lastModifiedDate":"2021-10-22"},{"lineNumber":515,"author":{"gitId":"brendanlsz"},"content":"        case MEAL_STRING:","lastModifiedDate":"2021-10-31"},{"lineNumber":516,"author":{"gitId":"brendanlsz"},"content":"            return Food.FoodType.MEAL;","lastModifiedDate":"2021-10-22"},{"lineNumber":517,"author":{"gitId":"brendanlsz"},"content":"        case OTHERS_STRING:","lastModifiedDate":"2021-10-31"},{"lineNumber":518,"author":{"gitId":"brendanlsz"},"content":"            return Food.FoodType.OTHERS;","lastModifiedDate":"2021-10-22"},{"lineNumber":519,"author":{"gitId":"brendanlsz"},"content":"        default:","lastModifiedDate":"2021-10-23"},{"lineNumber":520,"author":{"gitId":"siyuancheng178"},"content":"            throw new FitNusException(\"Unable to parse Food type\");","lastModifiedDate":"2021-10-31"},{"lineNumber":521,"author":{"gitId":"praj-bellakka"},"content":"        }","lastModifiedDate":"2021-10-20"},{"lineNumber":522,"author":{"gitId":"praj-bellakka"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":523,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":524,"author":{"gitId":"praj-bellakka"},"content":"    /**","lastModifiedDate":"2021-10-21"},{"lineNumber":525,"author":{"gitId":"praj-bellakka"},"content":"     * Function takes in an input that may contain the meal type and a boolean isDatabaseRequest.","lastModifiedDate":"2021-11-04"},{"lineNumber":526,"author":{"gitId":"praj-bellakka"},"content":"     * If the meal type matches the predefined MealType enum, the matching MealType is returned.","lastModifiedDate":"2021-10-21"},{"lineNumber":527,"author":{"gitId":"praj-bellakka"},"content":"     * Otherwise, UNDEFINED is returned.","lastModifiedDate":"2021-10-21"},{"lineNumber":528,"author":{"gitId":"praj-bellakka"},"content":"     *","lastModifiedDate":"2021-10-21"},{"lineNumber":529,"author":{"gitId":"praj-bellakka"},"content":"     * @param input             Input that may contain the meal type.","lastModifiedDate":"2021-10-21"},{"lineNumber":530,"author":{"gitId":"praj-bellakka"},"content":"     * @param isDatabaseRequest Boolean representing if method is being called for the database.","lastModifiedDate":"2021-11-04"},{"lineNumber":531,"author":{"gitId":"praj-bellakka"},"content":"     * @return MealType if a match is found; UNDEFINED MealType otherwise.","lastModifiedDate":"2021-10-21"},{"lineNumber":532,"author":{"gitId":"praj-bellakka"},"content":"     */","lastModifiedDate":"2021-10-21"},{"lineNumber":533,"author":{"gitId":"praj-bellakka"},"content":"    public static MealType parseMealType(String input, boolean isDatabaseRequest) throws FitNusException {","lastModifiedDate":"2021-11-04"},{"lineNumber":534,"author":{"gitId":"praj-bellakka"},"content":"        if (isDatabaseRequest) {","lastModifiedDate":"2021-11-04"},{"lineNumber":535,"author":{"gitId":"praj-bellakka"},"content":"            switch (input) {","lastModifiedDate":"2021-10-21"},{"lineNumber":536,"author":{"gitId":"praj-bellakka"},"content":"            case \"Breakfast\":","lastModifiedDate":"2021-10-21"},{"lineNumber":537,"author":{"gitId":"praj-bellakka"},"content":"                return MealType.BREAKFAST;","lastModifiedDate":"2021-10-21"},{"lineNumber":538,"author":{"gitId":"praj-bellakka"},"content":"            case \"Lunch\":","lastModifiedDate":"2021-10-21"},{"lineNumber":539,"author":{"gitId":"praj-bellakka"},"content":"                return MealType.LUNCH;","lastModifiedDate":"2021-10-21"},{"lineNumber":540,"author":{"gitId":"praj-bellakka"},"content":"            case \"Dinner\":","lastModifiedDate":"2021-10-21"},{"lineNumber":541,"author":{"gitId":"praj-bellakka"},"content":"                return MealType.DINNER;","lastModifiedDate":"2021-10-21"},{"lineNumber":542,"author":{"gitId":"praj-bellakka"},"content":"            case \"Snack\":","lastModifiedDate":"2021-10-21"},{"lineNumber":543,"author":{"gitId":"praj-bellakka"},"content":"                return MealType.SNACK;","lastModifiedDate":"2021-10-21"},{"lineNumber":544,"author":{"gitId":"praj-bellakka"},"content":"            default:","lastModifiedDate":"2021-10-21"},{"lineNumber":545,"author":{"gitId":"praj-bellakka"},"content":"                return MealType.UNDEFINED;","lastModifiedDate":"2021-10-21"},{"lineNumber":546,"author":{"gitId":"praj-bellakka"},"content":"            }","lastModifiedDate":"2021-10-21"},{"lineNumber":547,"author":{"gitId":"praj-bellakka"},"content":"        } else {","lastModifiedDate":"2021-10-21"},{"lineNumber":548,"author":{"gitId":"praj-bellakka"},"content":"            ArrayList\u003cString\u003e listStrs \u003d new ArrayList\u003cString\u003e(Arrays.asList(possibleFoodCategories));","lastModifiedDate":"2021-11-04"},{"lineNumber":549,"author":{"gitId":"praj-bellakka"},"content":"            if (input.startsWith(BACKSLASH_CHARACTER) \u0026\u0026 !listStrs.contains(input)) {","lastModifiedDate":"2021-11-04"},{"lineNumber":550,"author":{"gitId":"praj-bellakka"},"content":"                throw new FitNusException(input + \" is an invalid food category. \"","lastModifiedDate":"2021-11-04"},{"lineNumber":551,"author":{"gitId":"praj-bellakka"},"content":"                        + \"Avoid using the backslash character if food category is not specified.\");","lastModifiedDate":"2021-11-01"},{"lineNumber":552,"author":{"gitId":"praj-bellakka"},"content":"            }","lastModifiedDate":"2021-11-01"},{"lineNumber":553,"author":{"gitId":"praj-bellakka"},"content":"            switch (input) {","lastModifiedDate":"2021-10-21"},{"lineNumber":554,"author":{"gitId":"praj-bellakka"},"content":"            case \"/bfast\":","lastModifiedDate":"2021-10-21"},{"lineNumber":555,"author":{"gitId":"praj-bellakka"},"content":"                return MealType.BREAKFAST;","lastModifiedDate":"2021-10-21"},{"lineNumber":556,"author":{"gitId":"praj-bellakka"},"content":"            case \"/lunch\":","lastModifiedDate":"2021-10-21"},{"lineNumber":557,"author":{"gitId":"praj-bellakka"},"content":"                return MealType.LUNCH;","lastModifiedDate":"2021-10-21"},{"lineNumber":558,"author":{"gitId":"praj-bellakka"},"content":"            case \"/dinner\":","lastModifiedDate":"2021-10-21"},{"lineNumber":559,"author":{"gitId":"praj-bellakka"},"content":"                return MealType.DINNER;","lastModifiedDate":"2021-10-21"},{"lineNumber":560,"author":{"gitId":"praj-bellakka"},"content":"            case \"/snack\":","lastModifiedDate":"2021-10-21"},{"lineNumber":561,"author":{"gitId":"praj-bellakka"},"content":"                return MealType.SNACK;","lastModifiedDate":"2021-10-21"},{"lineNumber":562,"author":{"gitId":"praj-bellakka"},"content":"            default:","lastModifiedDate":"2021-10-21"},{"lineNumber":563,"author":{"gitId":"praj-bellakka"},"content":"                return MealType.UNDEFINED;","lastModifiedDate":"2021-10-21"},{"lineNumber":564,"author":{"gitId":"praj-bellakka"},"content":"            }","lastModifiedDate":"2021-10-21"},{"lineNumber":565,"author":{"gitId":"praj-bellakka"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":566,"author":{"gitId":"praj-bellakka"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":567,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":568,"author":{"gitId":"praj-bellakka"},"content":"    /**","lastModifiedDate":"2021-10-20"},{"lineNumber":569,"author":{"gitId":"praj-bellakka"},"content":"     * Function parses integers from user input when the while loop inside","lastModifiedDate":"2021-10-20"},{"lineNumber":570,"author":{"gitId":"aaapppsss"},"content":"     * {@link #parseAddTypeCommand(String, FoodDatabase, MealPlanDatabase)} parseAddTypeCommand} is running.","lastModifiedDate":"2021-10-26"},{"lineNumber":571,"author":{"gitId":"praj-bellakka"},"content":"     * Returns integer if found within range, else -1.","lastModifiedDate":"2021-10-20"},{"lineNumber":572,"author":{"gitId":"praj-bellakka"},"content":"     *","lastModifiedDate":"2021-10-20"},{"lineNumber":573,"author":{"gitId":"praj-bellakka"},"content":"     * @param input User input.","lastModifiedDate":"2021-10-20"},{"lineNumber":574,"author":{"gitId":"praj-bellakka"},"content":"     * @param size  Size of temporary database.","lastModifiedDate":"2021-10-20"},{"lineNumber":575,"author":{"gitId":"praj-bellakka"},"content":"     * @return Integer input by the user. If invalid integer or out of range, -1 is returned.","lastModifiedDate":"2021-10-20"},{"lineNumber":576,"author":{"gitId":"praj-bellakka"},"content":"     */","lastModifiedDate":"2021-10-20"},{"lineNumber":577,"author":{"gitId":"praj-bellakka"},"content":"    private int parseInteger(String input, int size) {","lastModifiedDate":"2021-10-20"},{"lineNumber":578,"author":{"gitId":"praj-bellakka"},"content":"        try {","lastModifiedDate":"2021-10-20"},{"lineNumber":579,"author":{"gitId":"praj-bellakka"},"content":"            int val \u003d Integer.parseInt(input.strip());","lastModifiedDate":"2021-10-20"},{"lineNumber":580,"author":{"gitId":"praj-bellakka"},"content":"            if (val \u003e\u003d 0 \u0026\u0026 val \u003c\u003d size) {","lastModifiedDate":"2021-10-20"},{"lineNumber":581,"author":{"gitId":"praj-bellakka"},"content":"                isLoopFlagOn \u003d false;","lastModifiedDate":"2021-10-22"},{"lineNumber":582,"author":{"gitId":"praj-bellakka"},"content":"                return val;","lastModifiedDate":"2021-10-20"},{"lineNumber":583,"author":{"gitId":"praj-bellakka"},"content":"            } else {","lastModifiedDate":"2021-10-20"},{"lineNumber":584,"author":{"gitId":"praj-bellakka"},"content":"                System.out.println(\"The input is outside the range of the database!\");","lastModifiedDate":"2021-10-21"},{"lineNumber":585,"author":{"gitId":"praj-bellakka"},"content":"            }","lastModifiedDate":"2021-10-20"},{"lineNumber":586,"author":{"gitId":"praj-bellakka"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2021-10-20"},{"lineNumber":587,"author":{"gitId":"praj-bellakka"},"content":"            //TODO: add proper Ui print message;","lastModifiedDate":"2021-10-20"},{"lineNumber":588,"author":{"gitId":"praj-bellakka"},"content":"            System.out.println(\"Please enter an integer value!\");","lastModifiedDate":"2021-10-21"},{"lineNumber":589,"author":{"gitId":"praj-bellakka"},"content":"        }","lastModifiedDate":"2021-10-20"},{"lineNumber":590,"author":{"gitId":"praj-bellakka"},"content":"        isLoopFlagOn \u003d true;","lastModifiedDate":"2021-10-22"},{"lineNumber":591,"author":{"gitId":"praj-bellakka"},"content":"        return -1;","lastModifiedDate":"2021-10-20"},{"lineNumber":592,"author":{"gitId":"praj-bellakka"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":593,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":594,"author":{"gitId":"praj-bellakka"},"content":"    /**","lastModifiedDate":"2021-10-20"},{"lineNumber":595,"author":{"gitId":"praj-bellakka"},"content":"     * Function parses integers from user input when the while loop","lastModifiedDate":"2021-10-20"},{"lineNumber":596,"author":{"gitId":"aaapppsss"},"content":"     * inside {@link #parseAddTypeCommand(String, FoodDatabase, MealPlanDatabase)} parseAddTypeCommand} is running.","lastModifiedDate":"2021-10-26"},{"lineNumber":597,"author":{"gitId":"praj-bellakka"},"content":"     * Returns calories of food if input is valid, else returns -1.","lastModifiedDate":"2021-10-21"},{"lineNumber":598,"author":{"gitId":"praj-bellakka"},"content":"     *","lastModifiedDate":"2021-10-20"},{"lineNumber":599,"author":{"gitId":"praj-bellakka"},"content":"     * @param input Input containing the calories.","lastModifiedDate":"2021-10-20"},{"lineNumber":600,"author":{"gitId":"praj-bellakka"},"content":"     * @return Integer value of the calories.","lastModifiedDate":"2021-10-20"},{"lineNumber":601,"author":{"gitId":"praj-bellakka"},"content":"     */","lastModifiedDate":"2021-10-20"},{"lineNumber":602,"author":{"gitId":"praj-bellakka"},"content":"    private int parseInteger(String input) {","lastModifiedDate":"2021-10-20"},{"lineNumber":603,"author":{"gitId":"praj-bellakka"},"content":"        try {","lastModifiedDate":"2021-10-20"},{"lineNumber":604,"author":{"gitId":"praj-bellakka"},"content":"            int val \u003d Integer.parseInt(input.strip());","lastModifiedDate":"2021-10-20"},{"lineNumber":605,"author":{"gitId":"praj-bellakka"},"content":"            if (val \u003e 0 \u0026\u0026 val \u003c\u003d CALORIE_LIMIT) {","lastModifiedDate":"2021-10-21"},{"lineNumber":606,"author":{"gitId":"praj-bellakka"},"content":"                isLoopFlagOn \u003d false;","lastModifiedDate":"2021-10-22"},{"lineNumber":607,"author":{"gitId":"praj-bellakka"},"content":"                return val;","lastModifiedDate":"2021-10-20"},{"lineNumber":608,"author":{"gitId":"praj-bellakka"},"content":"            } else {","lastModifiedDate":"2021-10-20"},{"lineNumber":609,"author":{"gitId":"siyuancheng178"},"content":"                System.out.println(\"Calories can only be between 1 and 5000!\");","lastModifiedDate":"2021-10-31"},{"lineNumber":610,"author":{"gitId":"praj-bellakka"},"content":"            }","lastModifiedDate":"2021-10-20"},{"lineNumber":611,"author":{"gitId":"praj-bellakka"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2021-10-20"},{"lineNumber":612,"author":{"gitId":"praj-bellakka"},"content":"            System.out.println(\"Please enter an integer value!\");","lastModifiedDate":"2021-10-21"},{"lineNumber":613,"author":{"gitId":"praj-bellakka"},"content":"        }","lastModifiedDate":"2021-10-20"},{"lineNumber":614,"author":{"gitId":"praj-bellakka"},"content":"        isLoopFlagOn \u003d true;","lastModifiedDate":"2021-10-22"},{"lineNumber":615,"author":{"gitId":"praj-bellakka"},"content":"        return -1;","lastModifiedDate":"2021-10-20"},{"lineNumber":616,"author":{"gitId":"praj-bellakka"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":617,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":618,"author":{"gitId":"praj-bellakka"},"content":"    private Command parseRemoveTypeCommand(String input) throws FitNusException {","lastModifiedDate":"2021-10-21"},{"lineNumber":619,"author":{"gitId":"praj-bellakka"},"content":"        int typeDescriptorIndex \u003d input.indexOf(\" \");","lastModifiedDate":"2021-10-21"},{"lineNumber":620,"author":{"gitId":"kengjit"},"content":"        String removeType \u003d input.substring(0, typeDescriptorIndex);","lastModifiedDate":"2021-10-24"},{"lineNumber":621,"author":{"gitId":"praj-bellakka"},"content":"        try {","lastModifiedDate":"2021-10-21"},{"lineNumber":622,"author":{"gitId":"brendanlsz"},"content":"            int index \u003d Integer.parseInt(input","lastModifiedDate":"2021-10-31"},{"lineNumber":623,"author":{"gitId":"brendanlsz"},"content":"                    .substring(typeDescriptorIndex).trim());","lastModifiedDate":"2021-10-31"},{"lineNumber":624,"author":{"gitId":"kengjit"},"content":"            if (removeType.equals(DESCRIPTOR_FOOD)) {","lastModifiedDate":"2021-10-24"},{"lineNumber":625,"author":{"gitId":"brendanlsz"},"content":"                return new DeleteFoodCommand(index);","lastModifiedDate":"2021-10-31"},{"lineNumber":626,"author":{"gitId":"kengjit"},"content":"            } else if (removeType.equals(DESCRIPTOR_INTAKE)) {","lastModifiedDate":"2021-10-24"},{"lineNumber":627,"author":{"gitId":"brendanlsz"},"content":"                return new DeleteEntryCommand(index);","lastModifiedDate":"2021-10-31"},{"lineNumber":628,"author":{"gitId":"kengjit"},"content":"            }","lastModifiedDate":"2021-10-24"},{"lineNumber":629,"author":{"gitId":"kengjit"},"content":"            throw new FitNusException(\"Invalid remove command!\");","lastModifiedDate":"2021-10-24"},{"lineNumber":630,"author":{"gitId":"praj-bellakka"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2021-10-21"},{"lineNumber":631,"author":{"gitId":"praj-bellakka"},"content":"            throw new FitNusException(\"Input value is not an integer!\");","lastModifiedDate":"2021-10-21"},{"lineNumber":632,"author":{"gitId":"praj-bellakka"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":633,"author":{"gitId":"praj-bellakka"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":634,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":635,"author":{"gitId":"praj-bellakka"},"content":"    private Command parseListTypeCommand(String input) throws FitNusException {","lastModifiedDate":"2021-10-21"},{"lineNumber":636,"author":{"gitId":"praj-bellakka"},"content":"        int typeDescriptorIndex \u003d input.indexOf(\" \");","lastModifiedDate":"2021-10-21"},{"lineNumber":637,"author":{"gitId":"praj-bellakka"},"content":"        if (typeDescriptorIndex \u003d\u003d -1) {","lastModifiedDate":"2021-10-21"},{"lineNumber":638,"author":{"gitId":"praj-bellakka"},"content":"            if (input.equals(DESCRIPTOR_FOOD)) {","lastModifiedDate":"2021-10-21"},{"lineNumber":639,"author":{"gitId":"praj-bellakka"},"content":"                return new ListFoodDatabaseCommand();","lastModifiedDate":"2021-10-21"},{"lineNumber":640,"author":{"gitId":"kengjit"},"content":"            } else if (input.equals(DESCRIPTOR_INTAKE)) {","lastModifiedDate":"2021-10-22"},{"lineNumber":641,"author":{"gitId":"kengjit"},"content":"                return new ListFoodEntryAllCommand();","lastModifiedDate":"2021-10-24"},{"lineNumber":642,"author":{"gitId":"aaapppsss"},"content":"            } else if (input.equals(DESCRIPTOR_USER)) {","lastModifiedDate":"2021-10-27"},{"lineNumber":643,"author":{"gitId":"aaapppsss"},"content":"                return new ListUserDataCommand();","lastModifiedDate":"2021-10-27"},{"lineNumber":644,"author":{"gitId":"praj-bellakka"},"content":"            } else if (input.equals(DESCRIPTOR_MEALPLAN)) {","lastModifiedDate":"2021-10-26"},{"lineNumber":645,"author":{"gitId":"praj-bellakka"},"content":"                return new ListMealPlanDatabaseCommand();","lastModifiedDate":"2021-10-26"},{"lineNumber":646,"author":{"gitId":"kengjit"},"content":"            }","lastModifiedDate":"2021-10-24"},{"lineNumber":647,"author":{"gitId":"kengjit"},"content":"        }","lastModifiedDate":"2021-10-24"},{"lineNumber":648,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":649,"author":{"gitId":"kengjit"},"content":"        if (input.contains(DESCRIPTOR_INTAKE)) {","lastModifiedDate":"2021-10-24"},{"lineNumber":650,"author":{"gitId":"kengjit"},"content":"            String timeFrame \u003d input.substring(typeDescriptorIndex);","lastModifiedDate":"2021-10-24"},{"lineNumber":651,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":652,"author":{"gitId":"kengjit"},"content":"            switch (timeFrame) {","lastModifiedDate":"2021-10-24"},{"lineNumber":653,"author":{"gitId":"kengjit"},"content":"            case \" /day\":","lastModifiedDate":"2021-10-24"},{"lineNumber":654,"author":{"gitId":"kengjit"},"content":"                return new ListFoodEntryCustomCommand(DAYS_IN_DAY);","lastModifiedDate":"2021-10-26"},{"lineNumber":655,"author":{"gitId":"kengjit"},"content":"            case \" /week\":","lastModifiedDate":"2021-10-24"},{"lineNumber":656,"author":{"gitId":"kengjit"},"content":"                return new ListFoodEntryCustomCommand(DAYS_IN_WEEK);","lastModifiedDate":"2021-10-26"},{"lineNumber":657,"author":{"gitId":"kengjit"},"content":"            default:","lastModifiedDate":"2021-10-24"},{"lineNumber":658,"author":{"gitId":"kengjit"},"content":"                throw new FitNusException(\"Invalid timeframe! (/day, /week)\");","lastModifiedDate":"2021-10-24"},{"lineNumber":659,"author":{"gitId":"praj-bellakka"},"content":"            }","lastModifiedDate":"2021-10-21"},{"lineNumber":660,"author":{"gitId":"aaapppsss"},"content":"        } else if (input.contains(DESCRIPTOR_WEIGHT)) {","lastModifiedDate":"2021-10-28"},{"lineNumber":661,"author":{"gitId":"aaapppsss"},"content":"            int listWeightInputsIndex \u003d input.indexOf(DESCRIPTOR_WEIGHT) + DESCRIPTOR_WEIGHT.length();","lastModifiedDate":"2021-10-28"},{"lineNumber":662,"author":{"gitId":"aaapppsss"},"content":"            String listWeightInputsString \u003d input.substring(listWeightInputsIndex);","lastModifiedDate":"2021-10-28"},{"lineNumber":663,"author":{"gitId":"aaapppsss"},"content":"            String[] listWeightInputs \u003d listWeightInputsString.split(\"\\\\s+\");","lastModifiedDate":"2021-10-28"},{"lineNumber":664,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":665,"author":{"gitId":"aaapppsss"},"content":"            if (listWeightInputs.length \u003e 3) {","lastModifiedDate":"2021-11-04"},{"lineNumber":666,"author":{"gitId":"aaapppsss"},"content":"                throw new FitNusException(\"Additional inputs detected! Please follow the command format:\\n\"","lastModifiedDate":"2021-11-04"},{"lineNumber":667,"author":{"gitId":"aaapppsss"},"content":"                        + \"list /weight /TIMEFRAME (/month MONTH_INTEGER, /all)\\n\"","lastModifiedDate":"2021-11-04"},{"lineNumber":668,"author":{"gitId":"aaapppsss"},"content":"                        + \"(e.g.list /weight /all OR list /weight /month 1)\");","lastModifiedDate":"2021-11-04"},{"lineNumber":669,"author":{"gitId":"aaapppsss"},"content":"            }","lastModifiedDate":"2021-11-04"},{"lineNumber":670,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":671,"author":{"gitId":"siyuancheng178"},"content":"            String timeFrame;","lastModifiedDate":"2021-10-31"},{"lineNumber":672,"author":{"gitId":"siyuancheng178"},"content":"            try {","lastModifiedDate":"2021-10-31"},{"lineNumber":673,"author":{"gitId":"siyuancheng178"},"content":"                timeFrame \u003d listWeightInputs[1].strip();","lastModifiedDate":"2021-10-31"},{"lineNumber":674,"author":{"gitId":"siyuancheng178"},"content":"            } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2021-10-31"},{"lineNumber":675,"author":{"gitId":"aaapppsss"},"content":"                throw new FitNusException(\"Invalid list weight command! Please enter it as \"","lastModifiedDate":"2021-11-04"},{"lineNumber":676,"author":{"gitId":"aaapppsss"},"content":"                        + \"list /weight /all or list /weight /month MONTH_INTEGER\"","lastModifiedDate":"2021-11-04"},{"lineNumber":677,"author":{"gitId":"aaapppsss"},"content":"                        + System.lineSeparator() + \"e.g. list /weight /month 1 for January\");","lastModifiedDate":"2021-11-04"},{"lineNumber":678,"author":{"gitId":"siyuancheng178"},"content":"            }","lastModifiedDate":"2021-10-31"},{"lineNumber":679,"author":{"gitId":"aaapppsss"},"content":"            switch (timeFrame) {","lastModifiedDate":"2021-10-28"},{"lineNumber":680,"author":{"gitId":"aaapppsss"},"content":"            case ALL_TIME:","lastModifiedDate":"2021-10-28"},{"lineNumber":681,"author":{"gitId":"aaapppsss"},"content":"                if (listWeightInputs.length \u003e 2) {","lastModifiedDate":"2021-11-04"},{"lineNumber":682,"author":{"gitId":"aaapppsss"},"content":"                    throw new FitNusException(\"Additional inputs detected! Please follow the command format:\\n\"","lastModifiedDate":"2021-11-04"},{"lineNumber":683,"author":{"gitId":"aaapppsss"},"content":"                            + \"list /weight /TIMEFRAME (/month MONTH_INTEGER, /all)\\n\"","lastModifiedDate":"2021-11-04"},{"lineNumber":684,"author":{"gitId":"aaapppsss"},"content":"                            + \"(e.g.list /weight /all OR list /weight /month 1)\");","lastModifiedDate":"2021-11-04"},{"lineNumber":685,"author":{"gitId":"aaapppsss"},"content":"                }","lastModifiedDate":"2021-11-04"},{"lineNumber":686,"author":{"gitId":"aaapppsss"},"content":"                return new ListWeightProgressCommand(0);","lastModifiedDate":"2021-10-28"},{"lineNumber":687,"author":{"gitId":"aaapppsss"},"content":"            case MONTH:","lastModifiedDate":"2021-10-28"},{"lineNumber":688,"author":{"gitId":"aaapppsss"},"content":"                int month;","lastModifiedDate":"2021-10-28"},{"lineNumber":689,"author":{"gitId":"aaapppsss"},"content":"                try {","lastModifiedDate":"2021-10-28"},{"lineNumber":690,"author":{"gitId":"aaapppsss"},"content":"                    month \u003d Integer.parseInt(listWeightInputs[2].strip());","lastModifiedDate":"2021-10-28"},{"lineNumber":691,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":692,"author":{"gitId":"aaapppsss"},"content":"                    if (month \u003c FIRST_MONTH || month \u003e LAST_MONTH) {","lastModifiedDate":"2021-10-28"},{"lineNumber":693,"author":{"gitId":"aaapppsss"},"content":"                        throw new FitNusException(\"Please enter an integer from 1 to 12 for the month!\");","lastModifiedDate":"2021-10-28"},{"lineNumber":694,"author":{"gitId":"aaapppsss"},"content":"                    }","lastModifiedDate":"2021-10-28"},{"lineNumber":695,"author":{"gitId":"aaapppsss"},"content":"                } catch (NumberFormatException e) {","lastModifiedDate":"2021-10-28"},{"lineNumber":696,"author":{"gitId":"aaapppsss"},"content":"                    throw new FitNusException(\"Please enter the month as an integer! e.g. 1 for January\");","lastModifiedDate":"2021-10-28"},{"lineNumber":697,"author":{"gitId":"aaapppsss"},"content":"                } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2021-11-04"},{"lineNumber":698,"author":{"gitId":"aaapppsss"},"content":"                    throw new FitNusException(\"Please enter the month as an integer after entering /month!\"","lastModifiedDate":"2021-11-04"},{"lineNumber":699,"author":{"gitId":"aaapppsss"},"content":"                            + \" e.g. \u0027list /weight /month 1\u0027 for January\");","lastModifiedDate":"2021-11-04"},{"lineNumber":700,"author":{"gitId":"aaapppsss"},"content":"                }","lastModifiedDate":"2021-10-28"},{"lineNumber":701,"author":{"gitId":"aaapppsss"},"content":"                return new ListWeightProgressCommand(month);","lastModifiedDate":"2021-10-28"},{"lineNumber":702,"author":{"gitId":"aaapppsss"},"content":"            default:","lastModifiedDate":"2021-10-28"},{"lineNumber":703,"author":{"gitId":"aaapppsss"},"content":"                throw new FitNusException(\"Invalid timeframe! Timeframe format is either /all \"","lastModifiedDate":"2021-10-28"},{"lineNumber":704,"author":{"gitId":"aaapppsss"},"content":"                        + \"or /month MONTH_INTEGER (e.g. /month 1)\");","lastModifiedDate":"2021-10-28"},{"lineNumber":705,"author":{"gitId":"aaapppsss"},"content":"            }","lastModifiedDate":"2021-10-28"},{"lineNumber":706,"author":{"gitId":"praj-bellakka"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":707,"author":{"gitId":"praj-bellakka"},"content":"        throw new FitNusException(INVALID_COMMAND_MESSAGE);","lastModifiedDate":"2021-10-21"},{"lineNumber":708,"author":{"gitId":"praj-bellakka"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":709,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":710,"author":{"gitId":"siyuancheng178"},"content":"    private Command parseCalorieTypeCommand(String input) throws FitNusException {","lastModifiedDate":"2021-10-12"},{"lineNumber":711,"author":{"gitId":"siyuancheng178"},"content":"        int typeDescriptorIndex \u003d input.indexOf(\" \");","lastModifiedDate":"2021-10-12"},{"lineNumber":712,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":713,"author":{"gitId":"siyuancheng178"},"content":"        if (typeDescriptorIndex \u003d\u003d -1) {","lastModifiedDate":"2021-10-12"},{"lineNumber":714,"author":{"gitId":"siyuancheng178"},"content":"            if (input.equals(DESCRIPTOR_REMAIN)) {","lastModifiedDate":"2021-10-12"},{"lineNumber":715,"author":{"gitId":"siyuancheng178"},"content":"                return new ViewRemainingCalorieCommand();","lastModifiedDate":"2021-10-09"},{"lineNumber":716,"author":{"gitId":"siyuancheng178"},"content":"            }","lastModifiedDate":"2021-10-12"},{"lineNumber":717,"author":{"gitId":"siyuancheng178"},"content":"        }","lastModifiedDate":"2021-10-12"},{"lineNumber":718,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":719,"author":{"gitId":"siyuancheng178"},"content":"        String typeDescriptor \u003d input.substring(0, typeDescriptorIndex).trim();","lastModifiedDate":"2021-10-12"},{"lineNumber":720,"author":{"gitId":"brendanlsz"},"content":"        if (DESCRIPTOR_SET.equals(typeDescriptor)) {","lastModifiedDate":"2021-10-19"},{"lineNumber":721,"author":{"gitId":"aaapppsss"},"content":"            int calorieGoal;","lastModifiedDate":"2021-11-04"},{"lineNumber":722,"author":{"gitId":"aaapppsss"},"content":"            try {","lastModifiedDate":"2021-11-04"},{"lineNumber":723,"author":{"gitId":"aaapppsss"},"content":"                calorieGoal \u003d Integer.parseInt(input.substring(typeDescriptorIndex).trim());","lastModifiedDate":"2021-11-04"},{"lineNumber":724,"author":{"gitId":"aaapppsss"},"content":"            } catch (NumberFormatException e) {","lastModifiedDate":"2021-11-04"},{"lineNumber":725,"author":{"gitId":"aaapppsss"},"content":"                throw new FitNusException(\"Calorie goal entered must be an integer!\\n\"","lastModifiedDate":"2021-11-04"},{"lineNumber":726,"author":{"gitId":"aaapppsss"},"content":"                        + \"Did you enter an invalid input or any additional inputs by mistake?\");","lastModifiedDate":"2021-11-04"},{"lineNumber":727,"author":{"gitId":"aaapppsss"},"content":"            }","lastModifiedDate":"2021-11-04"},{"lineNumber":728,"author":{"gitId":"siyuancheng178"},"content":"            return new SetCalorieGoalCommand(calorieGoal);","lastModifiedDate":"2021-10-12"},{"lineNumber":729,"author":{"gitId":"siyuancheng178"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":730,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":731,"author":{"gitId":"aaapppsss"},"content":"        if (DESCRIPTOR_GENERATE.equals(typeDescriptor)) {","lastModifiedDate":"2021-10-24"},{"lineNumber":732,"author":{"gitId":"aaapppsss"},"content":"            int goalGenerationInputsIndex \u003d input.indexOf(DESCRIPTOR_GENERATE) + DESCRIPTOR_GENERATE.length();","lastModifiedDate":"2021-10-24"},{"lineNumber":733,"author":{"gitId":"aaapppsss"},"content":"            String goalGenerationInputsString \u003d input.substring(goalGenerationInputsIndex);","lastModifiedDate":"2021-10-24"},{"lineNumber":734,"author":{"gitId":"aaapppsss"},"content":"            String[] goalGenerationInputs \u003d goalGenerationInputsString.split(\"\\\\s+\");","lastModifiedDate":"2021-10-24"},{"lineNumber":735,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":736,"author":{"gitId":"aaapppsss"},"content":"            if (goalGenerationInputs.length \u003e 3) {","lastModifiedDate":"2021-11-04"},{"lineNumber":737,"author":{"gitId":"aaapppsss"},"content":"                throw new FitNusException(\"Additional inputs detected! Please follow the command format:\\n\"","lastModifiedDate":"2021-11-04"},{"lineNumber":738,"author":{"gitId":"aaapppsss"},"content":"                        + \"calorie /generate /CHANGE_TYPE WEEKLY_CHANGE_IN_KG\\n\"","lastModifiedDate":"2021-11-04"},{"lineNumber":739,"author":{"gitId":"aaapppsss"},"content":"                        + \"(e.g. calorie /generate /lose 0.1)\");","lastModifiedDate":"2021-11-04"},{"lineNumber":740,"author":{"gitId":"aaapppsss"},"content":"            }","lastModifiedDate":"2021-11-04"},{"lineNumber":741,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":742,"author":{"gitId":"aaapppsss"},"content":"            String weightChangeInput;","lastModifiedDate":"2021-11-04"},{"lineNumber":743,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":744,"author":{"gitId":"aaapppsss"},"content":"            weightChangeInput \u003d goalGenerationInputs[1].strip();","lastModifiedDate":"2021-11-04"},{"lineNumber":745,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":746,"author":{"gitId":"aaapppsss"},"content":"            String weightChangeType;","lastModifiedDate":"2021-10-24"},{"lineNumber":747,"author":{"gitId":"aaapppsss"},"content":"            if (weightChangeInput.equals(GAIN)) {","lastModifiedDate":"2021-10-24"},{"lineNumber":748,"author":{"gitId":"aaapppsss"},"content":"                weightChangeType \u003d \"gain\";","lastModifiedDate":"2021-10-24"},{"lineNumber":749,"author":{"gitId":"aaapppsss"},"content":"            } else if (weightChangeInput.equals(LOSE)) {","lastModifiedDate":"2021-10-24"},{"lineNumber":750,"author":{"gitId":"aaapppsss"},"content":"                weightChangeType \u003d \"lose\";","lastModifiedDate":"2021-10-24"},{"lineNumber":751,"author":{"gitId":"aaapppsss"},"content":"            } else {","lastModifiedDate":"2021-10-24"},{"lineNumber":752,"author":{"gitId":"aaapppsss"},"content":"                throw new FitNusException(\"Invalid change type! \"","lastModifiedDate":"2021-10-24"},{"lineNumber":753,"author":{"gitId":"aaapppsss"},"content":"                        + \"Please enter /gain or /lose as the change type parameter.\");","lastModifiedDate":"2021-10-24"},{"lineNumber":754,"author":{"gitId":"aaapppsss"},"content":"            }","lastModifiedDate":"2021-10-24"},{"lineNumber":755,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":756,"author":{"gitId":"aaapppsss"},"content":"            float weightChangeAmount;","lastModifiedDate":"2021-11-04"},{"lineNumber":757,"author":{"gitId":"aaapppsss"},"content":"            try {","lastModifiedDate":"2021-11-04"},{"lineNumber":758,"author":{"gitId":"aaapppsss"},"content":"                weightChangeAmount \u003d Float.parseFloat(goalGenerationInputs[2].strip());","lastModifiedDate":"2021-11-04"},{"lineNumber":759,"author":{"gitId":"aaapppsss"},"content":"            } catch (NumberFormatException e) {","lastModifiedDate":"2021-11-04"},{"lineNumber":760,"author":{"gitId":"aaapppsss"},"content":"                throw new FitNusException(\"Please enter a number between 0.01 and 1 for the weekly change!\");","lastModifiedDate":"2021-11-04"},{"lineNumber":761,"author":{"gitId":"aaapppsss"},"content":"            } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2021-11-04"},{"lineNumber":762,"author":{"gitId":"aaapppsss"},"content":"                throw new FitNusException(\"Please enter the weekly change! e.g. calorie /generate /lose 0.1\");","lastModifiedDate":"2021-11-04"},{"lineNumber":763,"author":{"gitId":"aaapppsss"},"content":"            }","lastModifiedDate":"2021-11-04"},{"lineNumber":764,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":765,"author":{"gitId":"aaapppsss"},"content":"            return new GenerateCalorieGoalCommand(weightChangeAmount, weightChangeType);","lastModifiedDate":"2021-10-24"},{"lineNumber":766,"author":{"gitId":"aaapppsss"},"content":"        }","lastModifiedDate":"2021-10-24"},{"lineNumber":767,"author":{"gitId":"aaapppsss"},"content":"        throw new FitNusException(INVALID_COMMAND_MESSAGE);","lastModifiedDate":"2021-10-24"},{"lineNumber":768,"author":{"gitId":"siyuancheng178"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":769,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":770,"author":{"gitId":"siyuancheng178"},"content":"    private Command parseGenderTypeCommand(String input) throws FitNusException {","lastModifiedDate":"2021-10-12"},{"lineNumber":771,"author":{"gitId":"siyuancheng178"},"content":"        int typeDescriptorIndex \u003d input.indexOf(\" \");","lastModifiedDate":"2021-10-12"},{"lineNumber":772,"author":{"gitId":"siyuancheng178"},"content":"        String typeDescriptor \u003d input.substring(0, typeDescriptorIndex).trim();","lastModifiedDate":"2021-10-12"},{"lineNumber":773,"author":{"gitId":"siyuancheng178"},"content":"        if (typeDescriptor.equals(DESCRIPTOR_SET)) {","lastModifiedDate":"2021-10-12"},{"lineNumber":774,"author":{"gitId":"siyuancheng178"},"content":"            String gender \u003d input.substring(typeDescriptorIndex).trim();","lastModifiedDate":"2021-10-23"},{"lineNumber":775,"author":{"gitId":"brendanlsz"},"content":"            if (gender.equalsIgnoreCase(\"m\") || gender.equalsIgnoreCase(\"f\")) {","lastModifiedDate":"2021-11-06"},{"lineNumber":776,"author":{"gitId":"siyuancheng178"},"content":"                return new SetGenderCommand(gender);","lastModifiedDate":"2021-10-23"},{"lineNumber":777,"author":{"gitId":"siyuancheng178"},"content":"            }","lastModifiedDate":"2021-10-12"},{"lineNumber":778,"author":{"gitId":"aaapppsss"},"content":"            throw new FitNusException(\"Please input m for male or \"","lastModifiedDate":"2021-11-04"},{"lineNumber":779,"author":{"gitId":"aaapppsss"},"content":"                    + \"f for female when setting your gender!\\n\"","lastModifiedDate":"2021-11-04"},{"lineNumber":780,"author":{"gitId":"aaapppsss"},"content":"                    + \"Did you enter an invalid character or any additional inputs by mistake?\");","lastModifiedDate":"2021-11-04"},{"lineNumber":781,"author":{"gitId":"siyuancheng178"},"content":"        }","lastModifiedDate":"2021-10-12"},{"lineNumber":782,"author":{"gitId":"kengjit"},"content":"        throw new FitNusException(INVALID_COMMAND_MESSAGE);","lastModifiedDate":"2021-10-12"},{"lineNumber":783,"author":{"gitId":"praj-bellakka"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":784,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":785,"author":{"gitId":"aaapppsss"},"content":"    private Command parseAgeTypeCommand(String input) throws FitNusException {","lastModifiedDate":"2021-10-24"},{"lineNumber":786,"author":{"gitId":"aaapppsss"},"content":"        int typeDescriptorIndex \u003d input.indexOf(\" \");","lastModifiedDate":"2021-10-24"},{"lineNumber":787,"author":{"gitId":"aaapppsss"},"content":"        String typeDescriptor;","lastModifiedDate":"2021-11-04"},{"lineNumber":788,"author":{"gitId":"aaapppsss"},"content":"        typeDescriptor \u003d input.substring(0, typeDescriptorIndex).trim();","lastModifiedDate":"2021-11-04"},{"lineNumber":789,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":790,"author":{"gitId":"aaapppsss"},"content":"        try {","lastModifiedDate":"2021-10-24"},{"lineNumber":791,"author":{"gitId":"aaapppsss"},"content":"            if (typeDescriptor.equals(DESCRIPTOR_SET)) {","lastModifiedDate":"2021-10-24"},{"lineNumber":792,"author":{"gitId":"aaapppsss"},"content":"                int age \u003d Integer.parseInt(input.substring(typeDescriptorIndex).trim());","lastModifiedDate":"2021-10-24"},{"lineNumber":793,"author":{"gitId":"aaapppsss"},"content":"                if (age \u003c MINIMUM_AGE) {","lastModifiedDate":"2021-10-26"},{"lineNumber":794,"author":{"gitId":"aaapppsss"},"content":"                    throw new FitNusException(\"Users of FitNUS must be \" + MINIMUM_AGE","lastModifiedDate":"2021-10-26"},{"lineNumber":795,"author":{"gitId":"aaapppsss"},"content":"                            + \" years old and above!\");","lastModifiedDate":"2021-10-26"},{"lineNumber":796,"author":{"gitId":"aaapppsss"},"content":"                } else if (age \u003e MAXIMUM_AGE) {","lastModifiedDate":"2021-10-27"},{"lineNumber":797,"author":{"gitId":"aaapppsss"},"content":"                    throw new FitNusException(\"Users of FitNUS cannot be older than \" + MAXIMUM_AGE","lastModifiedDate":"2021-10-27"},{"lineNumber":798,"author":{"gitId":"aaapppsss"},"content":"                            + \" years old!\");","lastModifiedDate":"2021-10-27"},{"lineNumber":799,"author":{"gitId":"aaapppsss"},"content":"                }","lastModifiedDate":"2021-10-26"},{"lineNumber":800,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":801,"author":{"gitId":"aaapppsss"},"content":"                return new SetAgeCommand(age);","lastModifiedDate":"2021-10-24"},{"lineNumber":802,"author":{"gitId":"aaapppsss"},"content":"            }","lastModifiedDate":"2021-10-24"},{"lineNumber":803,"author":{"gitId":"aaapppsss"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2021-10-26"},{"lineNumber":804,"author":{"gitId":"aaapppsss"},"content":"            throw new FitNusException(\"Age entered must be an integer!\\n\"","lastModifiedDate":"2021-11-04"},{"lineNumber":805,"author":{"gitId":"aaapppsss"},"content":"                    + \"Did you enter an invalid input or any additional inputs by mistake?\");","lastModifiedDate":"2021-11-04"},{"lineNumber":806,"author":{"gitId":"aaapppsss"},"content":"        }","lastModifiedDate":"2021-10-24"},{"lineNumber":807,"author":{"gitId":"aaapppsss"},"content":"        throw new FitNusException(INVALID_COMMAND_MESSAGE);","lastModifiedDate":"2021-10-24"},{"lineNumber":808,"author":{"gitId":"aaapppsss"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":809,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":810,"author":{"gitId":"aaapppsss"},"content":"    private Command parseHeightTypeCommand(String input) throws FitNusException {","lastModifiedDate":"2021-10-24"},{"lineNumber":811,"author":{"gitId":"aaapppsss"},"content":"        int typeDescriptorIndex \u003d input.indexOf(\" \");","lastModifiedDate":"2021-10-24"},{"lineNumber":812,"author":{"gitId":"aaapppsss"},"content":"        String typeDescriptor \u003d input.substring(0, typeDescriptorIndex).trim();","lastModifiedDate":"2021-10-24"},{"lineNumber":813,"author":{"gitId":"aaapppsss"},"content":"        try {","lastModifiedDate":"2021-10-24"},{"lineNumber":814,"author":{"gitId":"aaapppsss"},"content":"            if (typeDescriptor.equals(DESCRIPTOR_SET)) {","lastModifiedDate":"2021-10-24"},{"lineNumber":815,"author":{"gitId":"aaapppsss"},"content":"                int height \u003d Integer.parseInt(input.substring(typeDescriptorIndex).trim());","lastModifiedDate":"2021-10-24"},{"lineNumber":816,"author":{"gitId":"aaapppsss"},"content":"                if (height \u003c MINIMUM_HEIGHT) {","lastModifiedDate":"2021-10-26"},{"lineNumber":817,"author":{"gitId":"aaapppsss"},"content":"                    throw new FitNusException(\"Please enter a height of \" + MINIMUM_HEIGHT","lastModifiedDate":"2021-10-26"},{"lineNumber":818,"author":{"gitId":"aaapppsss"},"content":"                            + \" cm and above!\");","lastModifiedDate":"2021-10-26"},{"lineNumber":819,"author":{"gitId":"aaapppsss"},"content":"                } else if (height \u003e MAXIMUM_HEIGHT) {","lastModifiedDate":"2021-10-27"},{"lineNumber":820,"author":{"gitId":"aaapppsss"},"content":"                    throw new FitNusException(\"Please enter a height of \" + MAXIMUM_HEIGHT","lastModifiedDate":"2021-10-27"},{"lineNumber":821,"author":{"gitId":"aaapppsss"},"content":"                            + \" cm and below!\");","lastModifiedDate":"2021-10-27"},{"lineNumber":822,"author":{"gitId":"aaapppsss"},"content":"                }","lastModifiedDate":"2021-10-26"},{"lineNumber":823,"author":{"gitId":"aaapppsss"},"content":"                return new SetHeightCommand(height);","lastModifiedDate":"2021-10-24"},{"lineNumber":824,"author":{"gitId":"aaapppsss"},"content":"            }","lastModifiedDate":"2021-10-24"},{"lineNumber":825,"author":{"gitId":"aaapppsss"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2021-10-26"},{"lineNumber":826,"author":{"gitId":"aaapppsss"},"content":"            throw new FitNusException(\"Height entered must be an integer!\\n\"","lastModifiedDate":"2021-11-04"},{"lineNumber":827,"author":{"gitId":"aaapppsss"},"content":"                    + \"Did you enter an invalid input or any additional inputs by mistake?\");","lastModifiedDate":"2021-11-04"},{"lineNumber":828,"author":{"gitId":"aaapppsss"},"content":"        }","lastModifiedDate":"2021-10-24"},{"lineNumber":829,"author":{"gitId":"aaapppsss"},"content":"        throw new FitNusException(INVALID_COMMAND_MESSAGE);","lastModifiedDate":"2021-10-24"},{"lineNumber":830,"author":{"gitId":"aaapppsss"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":831,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":832,"author":{"gitId":"aaapppsss"},"content":"    private Command parseWeightTypeCommand(String input) throws FitNusException {","lastModifiedDate":"2021-10-24"},{"lineNumber":833,"author":{"gitId":"aaapppsss"},"content":"        int typeDescriptorIndex \u003d input.indexOf(\" \");","lastModifiedDate":"2021-10-24"},{"lineNumber":834,"author":{"gitId":"aaapppsss"},"content":"        String typeDescriptor \u003d input.substring(0, typeDescriptorIndex).trim();","lastModifiedDate":"2021-10-24"},{"lineNumber":835,"author":{"gitId":"aaapppsss"},"content":"        try {","lastModifiedDate":"2021-10-24"},{"lineNumber":836,"author":{"gitId":"aaapppsss"},"content":"            if (typeDescriptor.equals(DESCRIPTOR_SET)) {","lastModifiedDate":"2021-10-24"},{"lineNumber":837,"author":{"gitId":"aaapppsss"},"content":"                float weight \u003d Float.parseFloat(input.substring(typeDescriptorIndex).trim());","lastModifiedDate":"2021-10-24"},{"lineNumber":838,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":839,"author":{"gitId":"aaapppsss"},"content":"                if (weight \u003c\u003d MINIMUM_WEIGHT) {","lastModifiedDate":"2021-10-27"},{"lineNumber":840,"author":{"gitId":"aaapppsss"},"content":"                    throw new FitNusException(\"Please enter a positive number for your weight!\");","lastModifiedDate":"2021-10-26"},{"lineNumber":841,"author":{"gitId":"aaapppsss"},"content":"                } else if (weight \u003e MAXIMUM_WEIGHT) {","lastModifiedDate":"2021-10-27"},{"lineNumber":842,"author":{"gitId":"aaapppsss"},"content":"                    throw new FitNusException(\"Please enter a weight of \" + MAXIMUM_WEIGHT + \" kg and below!\");","lastModifiedDate":"2021-10-27"},{"lineNumber":843,"author":{"gitId":"aaapppsss"},"content":"                }","lastModifiedDate":"2021-10-26"},{"lineNumber":844,"author":{"gitId":"aaapppsss"},"content":"                return new SetWeightCommand(weight);","lastModifiedDate":"2021-10-24"},{"lineNumber":845,"author":{"gitId":"aaapppsss"},"content":"            }","lastModifiedDate":"2021-10-24"},{"lineNumber":846,"author":{"gitId":"aaapppsss"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2021-10-26"},{"lineNumber":847,"author":{"gitId":"aaapppsss"},"content":"            throw new FitNusException(\"Weight entered must be a positive number!\\n\"","lastModifiedDate":"2021-11-04"},{"lineNumber":848,"author":{"gitId":"aaapppsss"},"content":"                    + \"Did you enter an invalid input or any additional inputs by mistake?\");","lastModifiedDate":"2021-11-04"},{"lineNumber":849,"author":{"gitId":"aaapppsss"},"content":"        }","lastModifiedDate":"2021-10-24"},{"lineNumber":850,"author":{"gitId":"aaapppsss"},"content":"        throw new FitNusException(INVALID_COMMAND_MESSAGE);","lastModifiedDate":"2021-10-24"},{"lineNumber":851,"author":{"gitId":"aaapppsss"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":852,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":853,"author":{"gitId":"aaapppsss"},"content":"    private Command parseFindTypeCommand(String input) throws FitNusException {","lastModifiedDate":"2021-10-24"},{"lineNumber":854,"author":{"gitId":"brendanlsz"},"content":"        if (input.contains(\"/food\")) {","lastModifiedDate":"2021-10-19"},{"lineNumber":855,"author":{"gitId":"brendanlsz"},"content":"            int typeDescriptorIndex \u003d input.indexOf(\"/food\");","lastModifiedDate":"2021-10-19"},{"lineNumber":856,"author":{"gitId":"brendanlsz"},"content":"            String keyword \u003d input.substring(typeDescriptorIndex + 6);","lastModifiedDate":"2021-10-19"},{"lineNumber":857,"author":{"gitId":"brendanlsz"},"content":"            return new FindFoodsCommand(keyword);","lastModifiedDate":"2021-11-04"},{"lineNumber":858,"author":{"gitId":"brendanlsz"},"content":"        } else if (input.contains(\"/entry\")) {","lastModifiedDate":"2021-10-19"},{"lineNumber":859,"author":{"gitId":"brendanlsz"},"content":"            int typeDescriptorIndex \u003d input.indexOf(\"/entry\");","lastModifiedDate":"2021-10-19"},{"lineNumber":860,"author":{"gitId":"brendanlsz"},"content":"            String keyword \u003d input.substring(typeDescriptorIndex + 7);","lastModifiedDate":"2021-10-19"},{"lineNumber":861,"author":{"gitId":"brendanlsz"},"content":"            return new FindEntriesCommand(keyword);","lastModifiedDate":"2021-11-04"},{"lineNumber":862,"author":{"gitId":"brendanlsz"},"content":"        }","lastModifiedDate":"2021-10-19"},{"lineNumber":863,"author":{"gitId":"siyuancheng178"},"content":"        throw new FitNusException(\"find command format is wrong. It is supposed to be:\\n\"","lastModifiedDate":"2021-10-31"},{"lineNumber":864,"author":{"gitId":"siyuancheng178"},"content":"                + \"find /food KEYWORD or find /entry KEYWORD\");","lastModifiedDate":"2021-10-31"},{"lineNumber":865,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":866,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":867,"author":{"gitId":"brendanlsz"},"content":"    private Command parseSuggestCommand(String input) throws FitNusException {","lastModifiedDate":"2021-10-31"},{"lineNumber":868,"author":{"gitId":"brendanlsz"},"content":"        boolean isSort \u003d false;","lastModifiedDate":"2021-10-23"},{"lineNumber":869,"author":{"gitId":"brendanlsz"},"content":"        if (input.contains(\"/sort\")) {","lastModifiedDate":"2021-10-23"},{"lineNumber":870,"author":{"gitId":"brendanlsz"},"content":"            isSort \u003d true;","lastModifiedDate":"2021-10-23"},{"lineNumber":871,"author":{"gitId":"brendanlsz"},"content":"            int spaceIndex \u003d input.indexOf(\" \");","lastModifiedDate":"2021-10-23"},{"lineNumber":872,"author":{"gitId":"brendanlsz"},"content":"            input \u003d input.substring(0, spaceIndex);","lastModifiedDate":"2021-10-23"},{"lineNumber":873,"author":{"gitId":"brendanlsz"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":874,"author":{"gitId":"brendanlsz"},"content":"        switch (input) {","lastModifiedDate":"2021-10-23"},{"lineNumber":875,"author":{"gitId":"brendanlsz"},"content":"        case MEAL:","lastModifiedDate":"2021-10-23"},{"lineNumber":876,"author":{"gitId":"brendanlsz"},"content":"            return new ViewSuggestionsCommand(Food.FoodType.MEAL, isSort);","lastModifiedDate":"2021-10-23"},{"lineNumber":877,"author":{"gitId":"brendanlsz"},"content":"        case SNACK:","lastModifiedDate":"2021-10-23"},{"lineNumber":878,"author":{"gitId":"brendanlsz"},"content":"            return new ViewSuggestionsCommand(Food.FoodType.SNACK, isSort);","lastModifiedDate":"2021-10-23"},{"lineNumber":879,"author":{"gitId":"brendanlsz"},"content":"        case BEVERAGE:","lastModifiedDate":"2021-10-23"},{"lineNumber":880,"author":{"gitId":"brendanlsz"},"content":"            return new ViewSuggestionsCommand(Food.FoodType.BEVERAGE, isSort);","lastModifiedDate":"2021-10-23"},{"lineNumber":881,"author":{"gitId":"brendanlsz"},"content":"        case OTHERS:","lastModifiedDate":"2021-10-23"},{"lineNumber":882,"author":{"gitId":"brendanlsz"},"content":"            return new ViewSuggestionsCommand(Food.FoodType.OTHERS, isSort);","lastModifiedDate":"2021-10-23"},{"lineNumber":883,"author":{"gitId":"brendanlsz"},"content":"        default:","lastModifiedDate":"2021-10-23"},{"lineNumber":884,"author":{"gitId":"brendanlsz"},"content":"            throw new FitNusException(PARSE_SUGGEST_ERROR);","lastModifiedDate":"2021-10-31"},{"lineNumber":885,"author":{"gitId":"brendanlsz"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":886,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":887,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":888,"author":{"gitId":"aaapppsss"},"content":"    private Command parseSummaryTypeCommand(String input) throws FitNusException {","lastModifiedDate":"2021-10-24"},{"lineNumber":889,"author":{"gitId":"kengjit"},"content":"        if (input.equals(WEEK)) {","lastModifiedDate":"2021-10-24"},{"lineNumber":890,"author":{"gitId":"kengjit"},"content":"            return new ViewWeekSummaryCommand();","lastModifiedDate":"2021-10-24"},{"lineNumber":891,"author":{"gitId":"kengjit"},"content":"        } else if (input.equals(MONTH)) {","lastModifiedDate":"2021-10-24"},{"lineNumber":892,"author":{"gitId":"kengjit"},"content":"            return new ViewMonthSummaryCommand();","lastModifiedDate":"2021-10-24"},{"lineNumber":893,"author":{"gitId":"kengjit"},"content":"        }","lastModifiedDate":"2021-10-24"},{"lineNumber":894,"author":{"gitId":"kengjit"},"content":"        throw new FitNusException(\"That is an invalid summary timeframe (/week or /month)\");","lastModifiedDate":"2021-10-24"},{"lineNumber":895,"author":{"gitId":"kengjit"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":896,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":897,"author":{"gitId":"kengjit"},"content":"    private Command parseEditTypeCommand(String input, FoodDatabase fd, EntryDatabase ed) throws FitNusException {","lastModifiedDate":"2021-10-24"},{"lineNumber":898,"author":{"gitId":"kengjit"},"content":"        int typeDescriptorIndex \u003d input.indexOf(SPACE_CHARACTER);","lastModifiedDate":"2021-10-24"},{"lineNumber":899,"author":{"gitId":"kengjit"},"content":"        int entryIndex \u003d Integer.parseInt(input.substring(0, typeDescriptorIndex));","lastModifiedDate":"2021-10-24"},{"lineNumber":900,"author":{"gitId":"kengjit"},"content":"        int totalNumEntries \u003d ed.getEntries().size();","lastModifiedDate":"2021-10-24"},{"lineNumber":901,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":902,"author":{"gitId":"kengjit"},"content":"        // Test for index validity","lastModifiedDate":"2021-10-24"},{"lineNumber":903,"author":{"gitId":"kengjit"},"content":"        if (entryIndex \u003c\u003d 0 || entryIndex \u003e totalNumEntries) {","lastModifiedDate":"2021-10-24"},{"lineNumber":904,"author":{"gitId":"kengjit"},"content":"            throw new FitNusException(\"Please input a valid index!\");","lastModifiedDate":"2021-10-24"},{"lineNumber":905,"author":{"gitId":"kengjit"},"content":"        }","lastModifiedDate":"2021-10-24"},{"lineNumber":906,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":907,"author":{"gitId":"kengjit"},"content":"        String foodName \u003d input.substring(input.indexOf(SPACE_CHARACTER)).strip();","lastModifiedDate":"2021-10-24"},{"lineNumber":908,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":909,"author":{"gitId":"kengjit"},"content":"        //step 2: search database if food exists","lastModifiedDate":"2021-10-24"},{"lineNumber":910,"author":{"gitId":"kengjit"},"content":"        System.out.println(\"Searching for \\\"\" + foodName + \"\\\"...\");","lastModifiedDate":"2021-11-02"},{"lineNumber":911,"author":{"gitId":"praj-bellakka"},"content":"        ArrayList\u003cFood\u003e tempDbFoods \u003d fd.findFoods(foodName);","lastModifiedDate":"2021-11-04"},{"lineNumber":912,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":913,"author":{"gitId":"kengjit"},"content":"        Ui newUi \u003d new Ui();","lastModifiedDate":"2021-10-24"},{"lineNumber":914,"author":{"gitId":"brendanlsz"},"content":"        if (tempDbFoods.size() \u003e 0) {","lastModifiedDate":"2021-11-06"},{"lineNumber":915,"author":{"gitId":"brendanlsz"},"content":"            System.out.println(\" [X] Select your desired food from the list below:\");","lastModifiedDate":"2021-11-06"},{"lineNumber":916,"author":{"gitId":"brendanlsz"},"content":"            Ui.printMatchingFoods(tempDbFoods);","lastModifiedDate":"2021-11-06"},{"lineNumber":917,"author":{"gitId":"brendanlsz"},"content":"        }","lastModifiedDate":"2021-11-06"},{"lineNumber":918,"author":{"gitId":"kengjit"},"content":"        int userInputLoop;","lastModifiedDate":"2021-10-24"},{"lineNumber":919,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":920,"author":{"gitId":"kengjit"},"content":"        //step 3a: prompt the user the suggestions if matches are found","lastModifiedDate":"2021-10-24"},{"lineNumber":921,"author":{"gitId":"praj-bellakka"},"content":"        if (tempDbFoods.size() \u003e 0) {","lastModifiedDate":"2021-11-04"},{"lineNumber":922,"author":{"gitId":"kengjit"},"content":"            System.out.println(\"Don\u0027t see what you\u0027re looking for? Enter 0 to create your own food!\");","lastModifiedDate":"2021-11-02"},{"lineNumber":923,"author":{"gitId":"kengjit"},"content":"            Ui.print(Ui.USER_INPUT);","lastModifiedDate":"2021-11-06"},{"lineNumber":924,"author":{"gitId":"praj-bellakka"},"content":"            return returnUserInput(entryIndex, foodName, tempDbFoods, newUi, true);","lastModifiedDate":"2021-11-04"},{"lineNumber":925,"author":{"gitId":"praj-bellakka"},"content":"        } else if (tempDbFoods.size() \u003d\u003d 0) {","lastModifiedDate":"2021-11-04"},{"lineNumber":926,"author":{"gitId":"kengjit"},"content":"            //step 3b: prompt the user to input calorie if not match","lastModifiedDate":"2021-10-24"},{"lineNumber":927,"author":{"gitId":"kengjit"},"content":"            System.out.println(\"Oops! \\\"\" + foodName + \"\\\" does not exist in the database!\\n\");","lastModifiedDate":"2021-11-02"},{"lineNumber":928,"author":{"gitId":"praj-bellakka"},"content":"            return returnUserInput(entryIndex, foodName, tempDbFoods, newUi, false);","lastModifiedDate":"2021-11-04"},{"lineNumber":929,"author":{"gitId":"kengjit"},"content":"        }","lastModifiedDate":"2021-10-24"},{"lineNumber":930,"author":{"gitId":"kengjit"},"content":"        throw new FitNusException(\"Edit Parser Error\");","lastModifiedDate":"2021-10-24"},{"lineNumber":931,"author":{"gitId":"kengjit"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":932,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":933,"author":{"gitId":"praj-bellakka"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":934,"author":{"gitId":"praj-bellakka"},"content":"     * Returns LocalDate object based on input description.","lastModifiedDate":"2021-11-07"},{"lineNumber":935,"author":{"gitId":"praj-bellakka"},"content":"     *","lastModifiedDate":"2021-11-07"},{"lineNumber":936,"author":{"gitId":"praj-bellakka"},"content":"     * @param description String containing date.","lastModifiedDate":"2021-11-07"},{"lineNumber":937,"author":{"gitId":"praj-bellakka"},"content":"     * @return LocalDate representing description.","lastModifiedDate":"2021-11-07"},{"lineNumber":938,"author":{"gitId":"praj-bellakka"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":939,"author":{"gitId":"brendanlsz"},"content":"    private static LocalDate parseDate(String description) {","lastModifiedDate":"2021-10-09"},{"lineNumber":940,"author":{"gitId":"brendanlsz"},"content":"        LocalDate date;","lastModifiedDate":"2021-10-09"},{"lineNumber":941,"author":{"gitId":"brendanlsz"},"content":"        try {","lastModifiedDate":"2021-10-09"},{"lineNumber":942,"author":{"gitId":"brendanlsz"},"content":"            date \u003d LocalDate.parse(description);","lastModifiedDate":"2021-10-09"},{"lineNumber":943,"author":{"gitId":"brendanlsz"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2021-10-09"},{"lineNumber":944,"author":{"gitId":"brendanlsz"},"content":"            return null;","lastModifiedDate":"2021-10-09"},{"lineNumber":945,"author":{"gitId":"brendanlsz"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":946,"author":{"gitId":"brendanlsz"},"content":"        return date;","lastModifiedDate":"2021-10-09"},{"lineNumber":947,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":948,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":949,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":950,"author":{"gitId":"brendanlsz"},"content":"     * Attempts to parse a given String and returns a","lastModifiedDate":"2021-10-09"},{"lineNumber":951,"author":{"gitId":"brendanlsz"},"content":"     * LocalDate object if successful.","lastModifiedDate":"2021-10-09"},{"lineNumber":952,"author":{"gitId":"brendanlsz"},"content":"     *","lastModifiedDate":"2021-10-09"},{"lineNumber":953,"author":{"gitId":"brendanlsz"},"content":"     * @param line Description String to be parsed.","lastModifiedDate":"2021-10-09"},{"lineNumber":954,"author":{"gitId":"brendanlsz"},"content":"     * @return A LocalDate object if successful, returns null otherwise.","lastModifiedDate":"2021-10-09"},{"lineNumber":955,"author":{"gitId":"brendanlsz"},"content":"     * @throws FitNusException If unable to parse the input String.","lastModifiedDate":"2021-10-10"},{"lineNumber":956,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":957,"author":{"gitId":"brendanlsz"},"content":"    public static LocalDate getDate(String line) throws FitNusException {","lastModifiedDate":"2021-10-10"},{"lineNumber":958,"author":{"gitId":"brendanlsz"},"content":"        assert !line.equals(\"\") : \"String line should not be empty\";","lastModifiedDate":"2021-10-10"},{"lineNumber":959,"author":{"gitId":"brendanlsz"},"content":"        String[] description \u003d line.split(\" \");","lastModifiedDate":"2021-10-09"},{"lineNumber":960,"author":{"gitId":"brendanlsz"},"content":"        LocalDate date;","lastModifiedDate":"2021-10-09"},{"lineNumber":961,"author":{"gitId":"brendanlsz"},"content":"        for (String s : description) {","lastModifiedDate":"2021-10-09"},{"lineNumber":962,"author":{"gitId":"brendanlsz"},"content":"            date \u003d parseDate(s);","lastModifiedDate":"2021-10-09"},{"lineNumber":963,"author":{"gitId":"brendanlsz"},"content":"            if (date !\u003d null) {","lastModifiedDate":"2021-10-09"},{"lineNumber":964,"author":{"gitId":"brendanlsz"},"content":"                return date;","lastModifiedDate":"2021-10-09"},{"lineNumber":965,"author":{"gitId":"brendanlsz"},"content":"            }","lastModifiedDate":"2021-10-09"},{"lineNumber":966,"author":{"gitId":"brendanlsz"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":967,"author":{"gitId":"brendanlsz"},"content":"        LOGGER.log(Level.INFO, \"Could not parse date\");","lastModifiedDate":"2021-10-31"},{"lineNumber":968,"author":{"gitId":"brendanlsz"},"content":"        throw new FitNusException(\"Error parsing date!!\");","lastModifiedDate":"2021-10-10"},{"lineNumber":969,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":970,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":971,"author":{"gitId":"aaapppsss"},"content":"}","lastModifiedDate":"2021-10-03"}],"authorContributionMap":{"kengjit":106,"brendanlsz":131,"siyuancheng178":67,"aaapppsss":219,"praj-bellakka":448}},{"path":"src/main/java/fitnus/storage/Storage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"brendanlsz"},"content":"package fitnus.storage;","lastModifiedDate":"2021-10-20"},{"lineNumber":2,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":3,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.database.EntryDatabase;","lastModifiedDate":"2021-10-12"},{"lineNumber":4,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.database.FoodDatabase;","lastModifiedDate":"2021-10-12"},{"lineNumber":5,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.database.MealPlanDatabase;","lastModifiedDate":"2021-10-26"},{"lineNumber":6,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.exception.FitNusException;","lastModifiedDate":"2021-10-12"},{"lineNumber":7,"author":{"gitId":"brendanlsz"},"content":"import fitnus.utility.User;","lastModifiedDate":"2021-10-20"},{"lineNumber":8,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":9,"author":{"gitId":"brendanlsz"},"content":"import java.io.BufferedReader;","lastModifiedDate":"2021-10-06"},{"lineNumber":10,"author":{"gitId":"brendanlsz"},"content":"import java.io.FileInputStream;","lastModifiedDate":"2021-10-06"},{"lineNumber":11,"author":{"gitId":"brendanlsz"},"content":"import java.io.IOException;","lastModifiedDate":"2021-10-06"},{"lineNumber":12,"author":{"gitId":"brendanlsz"},"content":"import java.io.InputStreamReader;","lastModifiedDate":"2021-10-06"},{"lineNumber":13,"author":{"gitId":"brendanlsz"},"content":"import java.io.File;","lastModifiedDate":"2021-10-06"},{"lineNumber":14,"author":{"gitId":"brendanlsz"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-10-06"},{"lineNumber":15,"author":{"gitId":"brendanlsz"},"content":"import java.nio.file.Files;","lastModifiedDate":"2021-10-12"},{"lineNumber":16,"author":{"gitId":"brendanlsz"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-10-06"},{"lineNumber":17,"author":{"gitId":"brendanlsz"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2021-10-06"},{"lineNumber":18,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":19,"author":{"gitId":"brendanlsz"},"content":"/**","lastModifiedDate":"2021-11-06"},{"lineNumber":20,"author":{"gitId":"brendanlsz"},"content":" * Handles dealing with the files and directory used to save data.","lastModifiedDate":"2021-11-06"},{"lineNumber":21,"author":{"gitId":"brendanlsz"},"content":" */","lastModifiedDate":"2021-11-06"},{"lineNumber":22,"author":{"gitId":"aaapppsss"},"content":"public class Storage {","lastModifiedDate":"2021-10-03"},{"lineNumber":23,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":24,"author":{"gitId":"brendanlsz"},"content":"    private static final String ROOT \u003d System.getProperty(\"user.dir\");","lastModifiedDate":"2021-10-06"},{"lineNumber":25,"author":{"gitId":"brendanlsz"},"content":"    private static final Path DIRECTORY_PATH \u003d Paths.get(ROOT, \"data\");","lastModifiedDate":"2021-10-06"},{"lineNumber":26,"author":{"gitId":"brendanlsz"},"content":"    private static final Path FILE_PATH_FOOD_DATA \u003d Paths.get(ROOT, \"data\", \"food.txt\");","lastModifiedDate":"2021-10-06"},{"lineNumber":27,"author":{"gitId":"brendanlsz"},"content":"    private static final Path FILE_PATH_USER_DATA \u003d Paths.get(ROOT, \"data\", \"user.txt\");","lastModifiedDate":"2021-10-06"},{"lineNumber":28,"author":{"gitId":"brendanlsz"},"content":"    private static final Path FILE_PATH_ENTRY_DATA \u003d Paths.get(ROOT, \"data\", \"entry.txt\");","lastModifiedDate":"2021-10-06"},{"lineNumber":29,"author":{"gitId":"aaapppsss"},"content":"    private static final Path FILE_PATH_WEIGHT_DATA \u003d Paths.get(ROOT, \"data\", \"weight.txt\");","lastModifiedDate":"2021-10-20"},{"lineNumber":30,"author":{"gitId":"praj-bellakka"},"content":"    private static final Path FILE_PATH_MEALPLAN_DATA \u003d Paths.get(ROOT, \"data\", \"mealplan.txt\");","lastModifiedDate":"2021-10-26"},{"lineNumber":31,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":32,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":33,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-10-31"},{"lineNumber":34,"author":{"gitId":"brendanlsz"},"content":"     * Creates the required directory and files if they do not exist.","lastModifiedDate":"2021-10-31"},{"lineNumber":35,"author":{"gitId":"brendanlsz"},"content":"     *","lastModifiedDate":"2021-10-31"},{"lineNumber":36,"author":{"gitId":"brendanlsz"},"content":"     * @throws IOException If an I/O error occurs.","lastModifiedDate":"2021-10-31"},{"lineNumber":37,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-10-31"},{"lineNumber":38,"author":{"gitId":"brendanlsz"},"content":"    public static void createDirectoryAndFiles() throws IOException {","lastModifiedDate":"2021-10-06"},{"lineNumber":39,"author":{"gitId":"brendanlsz"},"content":"        createDirectory(DIRECTORY_PATH.toString());","lastModifiedDate":"2021-10-06"},{"lineNumber":40,"author":{"gitId":"brendanlsz"},"content":"        createFile(FILE_PATH_FOOD_DATA.toString());","lastModifiedDate":"2021-10-06"},{"lineNumber":41,"author":{"gitId":"brendanlsz"},"content":"        createFile(FILE_PATH_USER_DATA.toString());","lastModifiedDate":"2021-10-06"},{"lineNumber":42,"author":{"gitId":"brendanlsz"},"content":"        createFile(FILE_PATH_ENTRY_DATA.toString());","lastModifiedDate":"2021-10-06"},{"lineNumber":43,"author":{"gitId":"aaapppsss"},"content":"        createFile(FILE_PATH_WEIGHT_DATA.toString());","lastModifiedDate":"2021-11-01"},{"lineNumber":44,"author":{"gitId":"praj-bellakka"},"content":"        createFile(FILE_PATH_MEALPLAN_DATA.toString());","lastModifiedDate":"2021-10-26"},{"lineNumber":45,"author":{"gitId":"brendanlsz"},"content":"        assert Files.exists(DIRECTORY_PATH);","lastModifiedDate":"2021-10-12"},{"lineNumber":46,"author":{"gitId":"brendanlsz"},"content":"        assert Files.exists(FILE_PATH_FOOD_DATA);","lastModifiedDate":"2021-10-12"},{"lineNumber":47,"author":{"gitId":"brendanlsz"},"content":"        assert Files.exists(FILE_PATH_USER_DATA);","lastModifiedDate":"2021-10-12"},{"lineNumber":48,"author":{"gitId":"brendanlsz"},"content":"        assert Files.exists(FILE_PATH_ENTRY_DATA);","lastModifiedDate":"2021-10-12"},{"lineNumber":49,"author":{"gitId":"aaapppsss"},"content":"        assert Files.exists(FILE_PATH_WEIGHT_DATA);","lastModifiedDate":"2021-11-01"},{"lineNumber":50,"author":{"gitId":"praj-bellakka"},"content":"        assert Files.exists(FILE_PATH_MEALPLAN_DATA);","lastModifiedDate":"2021-10-26"},{"lineNumber":51,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":52,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":53,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-10-31"},{"lineNumber":54,"author":{"gitId":"brendanlsz"},"content":"     * Reads the file content and calls preloadDatabase to preload the","lastModifiedDate":"2021-10-31"},{"lineNumber":55,"author":{"gitId":"brendanlsz"},"content":"     * FoodDatabase with data from the file.","lastModifiedDate":"2021-10-31"},{"lineNumber":56,"author":{"gitId":"brendanlsz"},"content":"     *","lastModifiedDate":"2021-10-31"},{"lineNumber":57,"author":{"gitId":"brendanlsz"},"content":"     * @param database FoodDatabase object to preload.","lastModifiedDate":"2021-10-31"},{"lineNumber":58,"author":{"gitId":"brendanlsz"},"content":"     * @throws IOException     If an I/O error occurs.","lastModifiedDate":"2021-10-31"},{"lineNumber":59,"author":{"gitId":"brendanlsz"},"content":"     * @throws FitNusException If an error occurs while preloading.","lastModifiedDate":"2021-10-31"},{"lineNumber":60,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-10-31"},{"lineNumber":61,"author":{"gitId":"aaapppsss"},"content":"    public static void initialiseFoodDatabase(FoodDatabase database) throws IOException, FitNusException {","lastModifiedDate":"2021-10-10"},{"lineNumber":62,"author":{"gitId":"brendanlsz"},"content":"        assert Files.exists(FILE_PATH_FOOD_DATA);","lastModifiedDate":"2021-10-12"},{"lineNumber":63,"author":{"gitId":"brendanlsz"},"content":"        FileInputStream stream;","lastModifiedDate":"2021-10-06"},{"lineNumber":64,"author":{"gitId":"brendanlsz"},"content":"        stream \u003d new FileInputStream(FILE_PATH_FOOD_DATA.toString());","lastModifiedDate":"2021-10-06"},{"lineNumber":65,"author":{"gitId":"brendanlsz"},"content":"        BufferedReader reader \u003d new BufferedReader(new InputStreamReader(stream));","lastModifiedDate":"2021-10-06"},{"lineNumber":66,"author":{"gitId":"brendanlsz"},"content":"        database.preloadDatabase(reader);","lastModifiedDate":"2021-10-25"},{"lineNumber":67,"author":{"gitId":"brendanlsz"},"content":"        reader.close();","lastModifiedDate":"2021-10-06"},{"lineNumber":68,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":69,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":70,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-10-31"},{"lineNumber":71,"author":{"gitId":"brendanlsz"},"content":"     * Reads the file content and calls preloadDatabase to preload the","lastModifiedDate":"2021-10-31"},{"lineNumber":72,"author":{"gitId":"brendanlsz"},"content":"     * EntryDatabase with data from the file.","lastModifiedDate":"2021-10-31"},{"lineNumber":73,"author":{"gitId":"brendanlsz"},"content":"     *","lastModifiedDate":"2021-10-31"},{"lineNumber":74,"author":{"gitId":"brendanlsz"},"content":"     * @param database EntryDatabase object to preload.","lastModifiedDate":"2021-10-31"},{"lineNumber":75,"author":{"gitId":"brendanlsz"},"content":"     * @throws IOException If an I/O error occurs.","lastModifiedDate":"2021-10-31"},{"lineNumber":76,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-10-31"},{"lineNumber":77,"author":{"gitId":"brendanlsz"},"content":"    public static void initialiseEntryDatabase(EntryDatabase database) throws IOException {","lastModifiedDate":"2021-10-09"},{"lineNumber":78,"author":{"gitId":"brendanlsz"},"content":"        assert Files.exists(FILE_PATH_ENTRY_DATA);","lastModifiedDate":"2021-10-12"},{"lineNumber":79,"author":{"gitId":"brendanlsz"},"content":"        FileInputStream stream;","lastModifiedDate":"2021-10-09"},{"lineNumber":80,"author":{"gitId":"brendanlsz"},"content":"        stream \u003d new FileInputStream(FILE_PATH_ENTRY_DATA.toString());","lastModifiedDate":"2021-10-09"},{"lineNumber":81,"author":{"gitId":"brendanlsz"},"content":"        BufferedReader reader \u003d new BufferedReader(new InputStreamReader(stream));","lastModifiedDate":"2021-10-09"},{"lineNumber":82,"author":{"gitId":"brendanlsz"},"content":"        database.preloadDatabase(reader);","lastModifiedDate":"2021-10-25"},{"lineNumber":83,"author":{"gitId":"praj-bellakka"},"content":"        reader.close();","lastModifiedDate":"2021-10-26"},{"lineNumber":84,"author":{"gitId":"praj-bellakka"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":85,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":86,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-10-31"},{"lineNumber":87,"author":{"gitId":"brendanlsz"},"content":"     * Reads the file content and calls preloadDatabase to preload the","lastModifiedDate":"2021-10-31"},{"lineNumber":88,"author":{"gitId":"brendanlsz"},"content":"     * MealPlanDatabase with data from the file.","lastModifiedDate":"2021-10-31"},{"lineNumber":89,"author":{"gitId":"brendanlsz"},"content":"     *","lastModifiedDate":"2021-10-31"},{"lineNumber":90,"author":{"gitId":"brendanlsz"},"content":"     * @param database MealPlanDatabase object to preload.","lastModifiedDate":"2021-10-31"},{"lineNumber":91,"author":{"gitId":"brendanlsz"},"content":"     * @throws IOException If an I/O error occurs.","lastModifiedDate":"2021-10-31"},{"lineNumber":92,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-10-31"},{"lineNumber":93,"author":{"gitId":"praj-bellakka"},"content":"    public static void initialiseMealPlanDatabase(MealPlanDatabase database) throws IOException {","lastModifiedDate":"2021-10-26"},{"lineNumber":94,"author":{"gitId":"praj-bellakka"},"content":"        assert Files.exists(FILE_PATH_MEALPLAN_DATA);","lastModifiedDate":"2021-10-26"},{"lineNumber":95,"author":{"gitId":"praj-bellakka"},"content":"        FileInputStream stream;","lastModifiedDate":"2021-10-26"},{"lineNumber":96,"author":{"gitId":"praj-bellakka"},"content":"        stream \u003d new FileInputStream(FILE_PATH_MEALPLAN_DATA.toString());","lastModifiedDate":"2021-10-26"},{"lineNumber":97,"author":{"gitId":"praj-bellakka"},"content":"        BufferedReader reader \u003d new BufferedReader(new InputStreamReader(stream));","lastModifiedDate":"2021-10-26"},{"lineNumber":98,"author":{"gitId":"praj-bellakka"},"content":"        database.preloadDatabase(reader);","lastModifiedDate":"2021-10-26"},{"lineNumber":99,"author":{"gitId":"brendanlsz"},"content":"        reader.close();","lastModifiedDate":"2021-10-09"},{"lineNumber":100,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":101,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":102,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-10-31"},{"lineNumber":103,"author":{"gitId":"brendanlsz"},"content":"     * Reads the file content and calls preloadUserData to preload","lastModifiedDate":"2021-10-31"},{"lineNumber":104,"author":{"gitId":"brendanlsz"},"content":"     * the User data with data from the file.","lastModifiedDate":"2021-10-31"},{"lineNumber":105,"author":{"gitId":"brendanlsz"},"content":"     *","lastModifiedDate":"2021-10-31"},{"lineNumber":106,"author":{"gitId":"brendanlsz"},"content":"     * @param user User object to preload.","lastModifiedDate":"2021-10-31"},{"lineNumber":107,"author":{"gitId":"brendanlsz"},"content":"     * @return 1 if data is valid, 0 otherwise.","lastModifiedDate":"2021-11-05"},{"lineNumber":108,"author":{"gitId":"brendanlsz"},"content":"     * @throws IOException If an I/O error occurs.","lastModifiedDate":"2021-10-31"},{"lineNumber":109,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-10-31"},{"lineNumber":110,"author":{"gitId":"aaapppsss"},"content":"    public static int initialiseUser(User user) throws IOException {","lastModifiedDate":"2021-10-23"},{"lineNumber":111,"author":{"gitId":"brendanlsz"},"content":"        assert Files.exists(FILE_PATH_USER_DATA);","lastModifiedDate":"2021-10-12"},{"lineNumber":112,"author":{"gitId":"brendanlsz"},"content":"        FileInputStream stream;","lastModifiedDate":"2021-10-10"},{"lineNumber":113,"author":{"gitId":"brendanlsz"},"content":"        stream \u003d new FileInputStream(FILE_PATH_USER_DATA.toString());","lastModifiedDate":"2021-10-10"},{"lineNumber":114,"author":{"gitId":"brendanlsz"},"content":"        BufferedReader reader \u003d new BufferedReader(new InputStreamReader(stream));","lastModifiedDate":"2021-10-10"},{"lineNumber":115,"author":{"gitId":"aaapppsss"},"content":"        int userDataIsValid \u003d user.preloadUserData(reader);","lastModifiedDate":"2021-10-23"},{"lineNumber":116,"author":{"gitId":"brendanlsz"},"content":"        reader.close();","lastModifiedDate":"2021-10-10"},{"lineNumber":117,"author":{"gitId":"aaapppsss"},"content":"        if (userDataIsValid \u003d\u003d 1) {","lastModifiedDate":"2021-10-23"},{"lineNumber":118,"author":{"gitId":"aaapppsss"},"content":"            return 1; //success","lastModifiedDate":"2021-10-23"},{"lineNumber":119,"author":{"gitId":"aaapppsss"},"content":"        } else {","lastModifiedDate":"2021-10-23"},{"lineNumber":120,"author":{"gitId":"aaapppsss"},"content":"            return 0; //failure","lastModifiedDate":"2021-10-23"},{"lineNumber":121,"author":{"gitId":"aaapppsss"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":122,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":123,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":124,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-10-31"},{"lineNumber":125,"author":{"gitId":"brendanlsz"},"content":"     * Reads the file content and calls preloadWeightData to preload","lastModifiedDate":"2021-10-31"},{"lineNumber":126,"author":{"gitId":"brendanlsz"},"content":"     * the user\u0027s weight data with data from the file.","lastModifiedDate":"2021-10-31"},{"lineNumber":127,"author":{"gitId":"brendanlsz"},"content":"     *","lastModifiedDate":"2021-10-31"},{"lineNumber":128,"author":{"gitId":"brendanlsz"},"content":"     * @param user User object to preload.","lastModifiedDate":"2021-10-31"},{"lineNumber":129,"author":{"gitId":"brendanlsz"},"content":"     * @throws IOException If an I/O error occurs.","lastModifiedDate":"2021-10-31"},{"lineNumber":130,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-10-31"},{"lineNumber":131,"author":{"gitId":"aaapppsss"},"content":"    public static void initialiseWeightProgress(User user) throws IOException {","lastModifiedDate":"2021-10-20"},{"lineNumber":132,"author":{"gitId":"aaapppsss"},"content":"        assert Files.exists(FILE_PATH_WEIGHT_DATA);","lastModifiedDate":"2021-10-20"},{"lineNumber":133,"author":{"gitId":"aaapppsss"},"content":"        FileInputStream stream;","lastModifiedDate":"2021-10-20"},{"lineNumber":134,"author":{"gitId":"aaapppsss"},"content":"        stream \u003d new FileInputStream(FILE_PATH_WEIGHT_DATA.toString());","lastModifiedDate":"2021-10-20"},{"lineNumber":135,"author":{"gitId":"aaapppsss"},"content":"        BufferedReader reader \u003d new BufferedReader(new InputStreamReader(stream));","lastModifiedDate":"2021-10-20"},{"lineNumber":136,"author":{"gitId":"aaapppsss"},"content":"        user.preloadWeightData(reader);","lastModifiedDate":"2021-10-20"},{"lineNumber":137,"author":{"gitId":"aaapppsss"},"content":"        reader.close();","lastModifiedDate":"2021-10-20"},{"lineNumber":138,"author":{"gitId":"aaapppsss"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":139,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":140,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-10-31"},{"lineNumber":141,"author":{"gitId":"brendanlsz"},"content":"     * Saves all the FoodDatabase data to file.","lastModifiedDate":"2021-10-31"},{"lineNumber":142,"author":{"gitId":"brendanlsz"},"content":"     *","lastModifiedDate":"2021-10-31"},{"lineNumber":143,"author":{"gitId":"brendanlsz"},"content":"     * @param database FoodDatabase object to save.","lastModifiedDate":"2021-10-31"},{"lineNumber":144,"author":{"gitId":"brendanlsz"},"content":"     * @throws IOException If an I/O error occurs.","lastModifiedDate":"2021-10-31"},{"lineNumber":145,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-10-31"},{"lineNumber":146,"author":{"gitId":"brendanlsz"},"content":"    public static void saveFoodDatabase(FoodDatabase database) throws IOException {","lastModifiedDate":"2021-10-09"},{"lineNumber":147,"author":{"gitId":"brendanlsz"},"content":"        assert Files.exists(FILE_PATH_FOOD_DATA);","lastModifiedDate":"2021-10-12"},{"lineNumber":148,"author":{"gitId":"brendanlsz"},"content":"        String data \u003d database.convertDatabaseToString();","lastModifiedDate":"2021-10-12"},{"lineNumber":149,"author":{"gitId":"brendanlsz"},"content":"        saveData(FILE_PATH_FOOD_DATA.toString(), data);","lastModifiedDate":"2021-10-12"},{"lineNumber":150,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":151,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":152,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-10-31"},{"lineNumber":153,"author":{"gitId":"brendanlsz"},"content":"     * Saves all the EntryDatabase data to file.","lastModifiedDate":"2021-10-31"},{"lineNumber":154,"author":{"gitId":"brendanlsz"},"content":"     *","lastModifiedDate":"2021-10-31"},{"lineNumber":155,"author":{"gitId":"brendanlsz"},"content":"     * @param database EntryDatabase object to save.","lastModifiedDate":"2021-10-31"},{"lineNumber":156,"author":{"gitId":"brendanlsz"},"content":"     * @throws IOException If an I/O error occurs.","lastModifiedDate":"2021-10-31"},{"lineNumber":157,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-10-31"},{"lineNumber":158,"author":{"gitId":"brendanlsz"},"content":"    public static void saveEntryDatabase(EntryDatabase database) throws IOException {","lastModifiedDate":"2021-10-09"},{"lineNumber":159,"author":{"gitId":"brendanlsz"},"content":"        assert Files.exists(FILE_PATH_ENTRY_DATA);","lastModifiedDate":"2021-10-12"},{"lineNumber":160,"author":{"gitId":"brendanlsz"},"content":"        String data \u003d database.convertDatabaseToString();","lastModifiedDate":"2021-10-12"},{"lineNumber":161,"author":{"gitId":"brendanlsz"},"content":"        saveData(FILE_PATH_ENTRY_DATA.toString(), data);","lastModifiedDate":"2021-10-12"},{"lineNumber":162,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":163,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":164,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-10-31"},{"lineNumber":165,"author":{"gitId":"brendanlsz"},"content":"     * Saves all the MealPlanDatabase data to file.","lastModifiedDate":"2021-10-31"},{"lineNumber":166,"author":{"gitId":"brendanlsz"},"content":"     *","lastModifiedDate":"2021-10-31"},{"lineNumber":167,"author":{"gitId":"brendanlsz"},"content":"     * @param database MealPlanDatabase object to save.","lastModifiedDate":"2021-10-31"},{"lineNumber":168,"author":{"gitId":"brendanlsz"},"content":"     * @throws IOException If an I/O error occurs.","lastModifiedDate":"2021-10-31"},{"lineNumber":169,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-10-31"},{"lineNumber":170,"author":{"gitId":"praj-bellakka"},"content":"    public static void saveMealPlanDatabase(MealPlanDatabase database) throws IOException {","lastModifiedDate":"2021-10-26"},{"lineNumber":171,"author":{"gitId":"praj-bellakka"},"content":"        assert Files.exists(FILE_PATH_MEALPLAN_DATA);","lastModifiedDate":"2021-10-26"},{"lineNumber":172,"author":{"gitId":"praj-bellakka"},"content":"        String data \u003d database.convertDatabaseToString();","lastModifiedDate":"2021-10-26"},{"lineNumber":173,"author":{"gitId":"praj-bellakka"},"content":"        saveData(FILE_PATH_MEALPLAN_DATA.toString(), data);","lastModifiedDate":"2021-10-26"},{"lineNumber":174,"author":{"gitId":"praj-bellakka"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":175,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":176,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-10-31"},{"lineNumber":177,"author":{"gitId":"brendanlsz"},"content":"     * Saves all the User data to file.","lastModifiedDate":"2021-10-31"},{"lineNumber":178,"author":{"gitId":"brendanlsz"},"content":"     *","lastModifiedDate":"2021-10-31"},{"lineNumber":179,"author":{"gitId":"brendanlsz"},"content":"     * @param user User object to save.","lastModifiedDate":"2021-10-31"},{"lineNumber":180,"author":{"gitId":"brendanlsz"},"content":"     * @throws IOException If an I/O error occurs.","lastModifiedDate":"2021-10-31"},{"lineNumber":181,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-10-31"},{"lineNumber":182,"author":{"gitId":"brendanlsz"},"content":"    public static void saveUserData(User user) throws IOException {","lastModifiedDate":"2021-10-10"},{"lineNumber":183,"author":{"gitId":"brendanlsz"},"content":"        assert Files.exists(FILE_PATH_USER_DATA);","lastModifiedDate":"2021-10-12"},{"lineNumber":184,"author":{"gitId":"brendanlsz"},"content":"        String userData \u003d user.convertUserDataToString();","lastModifiedDate":"2021-10-12"},{"lineNumber":185,"author":{"gitId":"brendanlsz"},"content":"        saveData(FILE_PATH_USER_DATA.toString(), userData);","lastModifiedDate":"2021-10-12"},{"lineNumber":186,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":187,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":188,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-10-31"},{"lineNumber":189,"author":{"gitId":"brendanlsz"},"content":"     * Saves all weight data to file.","lastModifiedDate":"2021-10-31"},{"lineNumber":190,"author":{"gitId":"brendanlsz"},"content":"     *","lastModifiedDate":"2021-10-31"},{"lineNumber":191,"author":{"gitId":"brendanlsz"},"content":"     * @param user User object to save.","lastModifiedDate":"2021-10-31"},{"lineNumber":192,"author":{"gitId":"brendanlsz"},"content":"     * @throws IOException If an I/O error occurs.","lastModifiedDate":"2021-10-31"},{"lineNumber":193,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-10-31"},{"lineNumber":194,"author":{"gitId":"aaapppsss"},"content":"    public static void saveWeightData(User user) throws IOException {","lastModifiedDate":"2021-10-21"},{"lineNumber":195,"author":{"gitId":"aaapppsss"},"content":"        assert Files.exists(FILE_PATH_WEIGHT_DATA);","lastModifiedDate":"2021-10-21"},{"lineNumber":196,"author":{"gitId":"aaapppsss"},"content":"        String weightData \u003d user.convertWeightDataToString();","lastModifiedDate":"2021-10-21"},{"lineNumber":197,"author":{"gitId":"aaapppsss"},"content":"        saveData(FILE_PATH_WEIGHT_DATA.toString(), weightData);","lastModifiedDate":"2021-10-21"},{"lineNumber":198,"author":{"gitId":"aaapppsss"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":199,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":200,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-10-31"},{"lineNumber":201,"author":{"gitId":"brendanlsz"},"content":"     * Writes the String content provided to the file at the specified filePath.","lastModifiedDate":"2021-10-31"},{"lineNumber":202,"author":{"gitId":"brendanlsz"},"content":"     *","lastModifiedDate":"2021-10-31"},{"lineNumber":203,"author":{"gitId":"brendanlsz"},"content":"     * @param filePath The filePath of the file to be written to.","lastModifiedDate":"2021-10-31"},{"lineNumber":204,"author":{"gitId":"brendanlsz"},"content":"     * @param content  String content to be written to the file.","lastModifiedDate":"2021-10-31"},{"lineNumber":205,"author":{"gitId":"brendanlsz"},"content":"     * @throws IOException If an I/O error occurs.","lastModifiedDate":"2021-10-31"},{"lineNumber":206,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-10-31"},{"lineNumber":207,"author":{"gitId":"brendanlsz"},"content":"    private static void saveData(String filePath, String content) throws IOException {","lastModifiedDate":"2021-10-20"},{"lineNumber":208,"author":{"gitId":"brendanlsz"},"content":"        File file \u003d new File(filePath);","lastModifiedDate":"2021-10-06"},{"lineNumber":209,"author":{"gitId":"brendanlsz"},"content":"        FileWriter fw;","lastModifiedDate":"2021-10-06"},{"lineNumber":210,"author":{"gitId":"brendanlsz"},"content":"        fw \u003d new FileWriter(file);","lastModifiedDate":"2021-10-06"},{"lineNumber":211,"author":{"gitId":"brendanlsz"},"content":"        fw.write(content);","lastModifiedDate":"2021-10-06"},{"lineNumber":212,"author":{"gitId":"brendanlsz"},"content":"        fw.close();","lastModifiedDate":"2021-10-06"},{"lineNumber":213,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":214,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":215,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":216,"author":{"gitId":"brendanlsz"},"content":"     * Creates a new file at the filePath if it does not exist.","lastModifiedDate":"2021-11-07"},{"lineNumber":217,"author":{"gitId":"brendanlsz"},"content":"     *","lastModifiedDate":"2021-11-07"},{"lineNumber":218,"author":{"gitId":"brendanlsz"},"content":"     * @param filePath The filePath of the File to be created.","lastModifiedDate":"2021-11-07"},{"lineNumber":219,"author":{"gitId":"brendanlsz"},"content":"     * @throws IOException If an I/O error occurs.","lastModifiedDate":"2021-11-07"},{"lineNumber":220,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":221,"author":{"gitId":"-"},"content":"    // @@author brendanlsz-reused","lastModifiedDate":"2021-10-06"},{"lineNumber":222,"author":{"gitId":"-"},"content":"    // Reused from https://www.tutorialspoint.com/java/io/file_createnewfile.htm","lastModifiedDate":"2021-10-06"},{"lineNumber":223,"author":{"gitId":"-"},"content":"    // with modifications","lastModifiedDate":"2021-10-06"},{"lineNumber":224,"author":{"gitId":"-"},"content":"    private static void createFile(String filePath) throws IOException {","lastModifiedDate":"2021-10-06"},{"lineNumber":225,"author":{"gitId":"-"},"content":"        File file \u003d new File(filePath);","lastModifiedDate":"2021-10-06"},{"lineNumber":226,"author":{"gitId":"-"},"content":"        boolean hasCreatedFile \u003d file.createNewFile();","lastModifiedDate":"2021-10-06"},{"lineNumber":227,"author":{"gitId":"-"},"content":"        if (hasCreatedFile) {","lastModifiedDate":"2021-10-06"},{"lineNumber":228,"author":{"gitId":"-"},"content":"            System.out.println(\"File created at \" + file.getCanonicalPath());","lastModifiedDate":"2021-10-06"},{"lineNumber":229,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2021-10-06"},{"lineNumber":230,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":231,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":232,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":233,"author":{"gitId":"-"},"content":"     * Creates a directory at directoryPath if it does not exist.","lastModifiedDate":"2021-11-07"},{"lineNumber":234,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2021-11-07"},{"lineNumber":235,"author":{"gitId":"-"},"content":"     * @param directoryPath The directoryPath of the directory to be created.","lastModifiedDate":"2021-11-07"},{"lineNumber":236,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":237,"author":{"gitId":"-"},"content":"    // @@author brendanlsz-reused","lastModifiedDate":"2021-10-06"},{"lineNumber":238,"author":{"gitId":"-"},"content":"    // Reused from https://www.tutorialspoint.com/java/io/file_mkdir.htm","lastModifiedDate":"2021-10-06"},{"lineNumber":239,"author":{"gitId":"-"},"content":"    // with modifications","lastModifiedDate":"2021-10-06"},{"lineNumber":240,"author":{"gitId":"-"},"content":"    private static void createDirectory(String directoryPath) {","lastModifiedDate":"2021-10-06"},{"lineNumber":241,"author":{"gitId":"-"},"content":"        File directory \u003d new File(directoryPath);","lastModifiedDate":"2021-10-06"},{"lineNumber":242,"author":{"gitId":"-"},"content":"        boolean hasCreatedDirectory \u003d directory.mkdir();","lastModifiedDate":"2021-10-06"},{"lineNumber":243,"author":{"gitId":"-"},"content":"        if (hasCreatedDirectory) {","lastModifiedDate":"2021-10-06"},{"lineNumber":244,"author":{"gitId":"-"},"content":"            System.out.println(\"New directory created at \" + directoryPath);","lastModifiedDate":"2021-10-06"},{"lineNumber":245,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2021-10-06"},{"lineNumber":246,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":247,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":248,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":249,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-10-03"}],"authorContributionMap":{"brendanlsz":167,"-":29,"aaapppsss":30,"praj-bellakka":23}},{"path":"src/main/java/fitnus/tracker/Entry.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"praj-bellakka"},"content":"package fitnus.tracker;","lastModifiedDate":"2021-10-12"},{"lineNumber":2,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":3,"author":{"gitId":"siyuancheng178"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-10-06"},{"lineNumber":4,"author":{"gitId":"kengjit"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-10-06"},{"lineNumber":5,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":6,"author":{"gitId":"brendanlsz"},"content":"/**","lastModifiedDate":"2021-11-06"},{"lineNumber":7,"author":{"gitId":"brendanlsz"},"content":" * Represents a Food Tracker Entry.","lastModifiedDate":"2021-11-06"},{"lineNumber":8,"author":{"gitId":"brendanlsz"},"content":" */","lastModifiedDate":"2021-11-06"},{"lineNumber":9,"author":{"gitId":"siyuancheng178"},"content":"public class Entry {","lastModifiedDate":"2021-10-06"},{"lineNumber":10,"author":{"gitId":"kengjit"},"content":"    private final MealType mealType;","lastModifiedDate":"2021-10-19"},{"lineNumber":11,"author":{"gitId":"kengjit"},"content":"    private Food food;","lastModifiedDate":"2021-10-20"},{"lineNumber":12,"author":{"gitId":"kengjit"},"content":"    private final LocalDate date;","lastModifiedDate":"2021-10-19"},{"lineNumber":13,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":14,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-11-05"},{"lineNumber":15,"author":{"gitId":"brendanlsz"},"content":"     * Constructor.","lastModifiedDate":"2021-11-05"},{"lineNumber":16,"author":{"gitId":"brendanlsz"},"content":"     *","lastModifiedDate":"2021-11-05"},{"lineNumber":17,"author":{"gitId":"brendanlsz"},"content":"     * @param mealType MealType of this Entry (e.g. dinner / lunch).","lastModifiedDate":"2021-11-05"},{"lineNumber":18,"author":{"gitId":"brendanlsz"},"content":"     * @param food     Food object of this Entry.","lastModifiedDate":"2021-11-05"},{"lineNumber":19,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-11-05"},{"lineNumber":20,"author":{"gitId":"kengjit"},"content":"    public Entry(MealType mealType, Food food) {","lastModifiedDate":"2021-10-19"},{"lineNumber":21,"author":{"gitId":"kengjit"},"content":"        this.mealType \u003d mealType;","lastModifiedDate":"2021-10-19"},{"lineNumber":22,"author":{"gitId":"siyuancheng178"},"content":"        this.food \u003d food;","lastModifiedDate":"2021-10-06"},{"lineNumber":23,"author":{"gitId":"brendanlsz"},"content":"        this.date \u003d LocalDate.now();","lastModifiedDate":"2021-10-09"},{"lineNumber":24,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":25,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":26,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-11-05"},{"lineNumber":27,"author":{"gitId":"brendanlsz"},"content":"     * Constructor.","lastModifiedDate":"2021-11-05"},{"lineNumber":28,"author":{"gitId":"brendanlsz"},"content":"     *","lastModifiedDate":"2021-11-05"},{"lineNumber":29,"author":{"gitId":"brendanlsz"},"content":"     * @param mealType MealType of this Entry (e.g. dinner / lunch).","lastModifiedDate":"2021-11-05"},{"lineNumber":30,"author":{"gitId":"brendanlsz"},"content":"     * @param food     Food object of this Entry.","lastModifiedDate":"2021-11-05"},{"lineNumber":31,"author":{"gitId":"brendanlsz"},"content":"     * @param date     Date of this Entry.","lastModifiedDate":"2021-11-05"},{"lineNumber":32,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-11-05"},{"lineNumber":33,"author":{"gitId":"kengjit"},"content":"    public Entry(MealType mealType, Food food, LocalDate date) {","lastModifiedDate":"2021-10-19"},{"lineNumber":34,"author":{"gitId":"kengjit"},"content":"        this.mealType \u003d mealType;","lastModifiedDate":"2021-10-19"},{"lineNumber":35,"author":{"gitId":"brendanlsz"},"content":"        this.food \u003d food;","lastModifiedDate":"2021-10-09"},{"lineNumber":36,"author":{"gitId":"brendanlsz"},"content":"        this.date \u003d date;","lastModifiedDate":"2021-10-09"},{"lineNumber":37,"author":{"gitId":"siyuancheng178"},"content":"        assert !date.isAfter(LocalDate.now()) : \"date should not be later than today\";","lastModifiedDate":"2021-10-12"},{"lineNumber":38,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":39,"author":{"gitId":"siyuancheng178"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":40,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":41,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-11-05"},{"lineNumber":42,"author":{"gitId":"brendanlsz"},"content":"     * Returns the Food object associated with this Entry.","lastModifiedDate":"2021-11-05"},{"lineNumber":43,"author":{"gitId":"brendanlsz"},"content":"     *","lastModifiedDate":"2021-11-05"},{"lineNumber":44,"author":{"gitId":"brendanlsz"},"content":"     * @return The Food object associated with this Entry.","lastModifiedDate":"2021-11-05"},{"lineNumber":45,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-11-05"},{"lineNumber":46,"author":{"gitId":"siyuancheng178"},"content":"    public Food getFood() {","lastModifiedDate":"2021-10-06"},{"lineNumber":47,"author":{"gitId":"siyuancheng178"},"content":"        return this.food;","lastModifiedDate":"2021-10-06"},{"lineNumber":48,"author":{"gitId":"siyuancheng178"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":49,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":50,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-11-05"},{"lineNumber":51,"author":{"gitId":"brendanlsz"},"content":"     * Sets the Food object of this Entry.","lastModifiedDate":"2021-11-05"},{"lineNumber":52,"author":{"gitId":"brendanlsz"},"content":"     *","lastModifiedDate":"2021-11-05"},{"lineNumber":53,"author":{"gitId":"brendanlsz"},"content":"     * @param food The Food object to set.","lastModifiedDate":"2021-11-05"},{"lineNumber":54,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-11-05"},{"lineNumber":55,"author":{"gitId":"kengjit"},"content":"    public void setFood(Food food) {","lastModifiedDate":"2021-10-20"},{"lineNumber":56,"author":{"gitId":"kengjit"},"content":"        this.food \u003d food;","lastModifiedDate":"2021-10-20"},{"lineNumber":57,"author":{"gitId":"kengjit"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":58,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":59,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":60,"author":{"gitId":"brendanlsz"},"content":"     * Gets the date and converts it to the specified format. Then,","lastModifiedDate":"2021-10-09"},{"lineNumber":61,"author":{"gitId":"brendanlsz"},"content":"     * returns the formatted date as a String.","lastModifiedDate":"2021-10-09"},{"lineNumber":62,"author":{"gitId":"brendanlsz"},"content":"     *","lastModifiedDate":"2021-10-09"},{"lineNumber":63,"author":{"gitId":"brendanlsz"},"content":"     * @return Formatted date as a String.","lastModifiedDate":"2021-10-09"},{"lineNumber":64,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":65,"author":{"gitId":"brendanlsz"},"content":"    public String getDate() {","lastModifiedDate":"2021-10-12"},{"lineNumber":66,"author":{"gitId":"brendanlsz"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");","lastModifiedDate":"2021-10-09"},{"lineNumber":67,"author":{"gitId":"brendanlsz"},"content":"        return date.format(formatter);","lastModifiedDate":"2021-10-09"},{"lineNumber":68,"author":{"gitId":"siyuancheng178"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":69,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":70,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-11-05"},{"lineNumber":71,"author":{"gitId":"brendanlsz"},"content":"     * Returns the LocalDate of this Entry.","lastModifiedDate":"2021-11-05"},{"lineNumber":72,"author":{"gitId":"brendanlsz"},"content":"     *","lastModifiedDate":"2021-11-05"},{"lineNumber":73,"author":{"gitId":"brendanlsz"},"content":"     * @return The LocalDate of this Entry.","lastModifiedDate":"2021-11-05"},{"lineNumber":74,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-11-05"},{"lineNumber":75,"author":{"gitId":"siyuancheng178"},"content":"    public LocalDate getRawDate() {","lastModifiedDate":"2021-10-20"},{"lineNumber":76,"author":{"gitId":"siyuancheng178"},"content":"        return this.date;","lastModifiedDate":"2021-10-20"},{"lineNumber":77,"author":{"gitId":"siyuancheng178"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":78,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":79,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-11-05"},{"lineNumber":80,"author":{"gitId":"brendanlsz"},"content":"     * Returns the MealType of this Entry.","lastModifiedDate":"2021-11-05"},{"lineNumber":81,"author":{"gitId":"brendanlsz"},"content":"     *","lastModifiedDate":"2021-11-05"},{"lineNumber":82,"author":{"gitId":"brendanlsz"},"content":"     * @return The MealType of this Entry.","lastModifiedDate":"2021-11-05"},{"lineNumber":83,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-11-05"},{"lineNumber":84,"author":{"gitId":"kengjit"},"content":"    public MealType getMealType() {","lastModifiedDate":"2021-10-19"},{"lineNumber":85,"author":{"gitId":"kengjit"},"content":"        return this.mealType;","lastModifiedDate":"2021-10-19"},{"lineNumber":86,"author":{"gitId":"kengjit"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":87,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":88,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-11-05"},{"lineNumber":89,"author":{"gitId":"brendanlsz"},"content":"     * Returns a String representation of the Entry object.","lastModifiedDate":"2021-11-05"},{"lineNumber":90,"author":{"gitId":"brendanlsz"},"content":"     *","lastModifiedDate":"2021-11-05"},{"lineNumber":91,"author":{"gitId":"brendanlsz"},"content":"     * @return String representation of the Entry object.","lastModifiedDate":"2021-11-05"},{"lineNumber":92,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-11-05"},{"lineNumber":93,"author":{"gitId":"kengjit"},"content":"    @Override","lastModifiedDate":"2021-10-06"},{"lineNumber":94,"author":{"gitId":"kengjit"},"content":"    public String toString() {","lastModifiedDate":"2021-10-06"},{"lineNumber":95,"author":{"gitId":"brendanlsz"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");","lastModifiedDate":"2021-10-09"},{"lineNumber":96,"author":{"gitId":"brendanlsz"},"content":"        String date \u003d this.date.format(formatter);","lastModifiedDate":"2021-10-09"},{"lineNumber":97,"author":{"gitId":"kengjit"},"content":"        return \"[\" + date + \"] \" + mealType + \": \" + food.toString();","lastModifiedDate":"2021-10-19"},{"lineNumber":98,"author":{"gitId":"kengjit"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":99,"author":{"gitId":"siyuancheng178"},"content":"}","lastModifiedDate":"2021-10-06"}],"authorContributionMap":{"kengjit":20,"brendanlsz":57,"siyuancheng178":20,"praj-bellakka":2}},{"path":"src/main/java/fitnus/tracker/Food.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"praj-bellakka"},"content":"package fitnus.tracker;","lastModifiedDate":"2021-10-12"},{"lineNumber":2,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":3,"author":{"gitId":"brendanlsz"},"content":"/**","lastModifiedDate":"2021-11-06"},{"lineNumber":4,"author":{"gitId":"brendanlsz"},"content":" * Represents a Food record.","lastModifiedDate":"2021-11-06"},{"lineNumber":5,"author":{"gitId":"brendanlsz"},"content":" */","lastModifiedDate":"2021-11-06"},{"lineNumber":6,"author":{"gitId":"aaapppsss"},"content":"public class Food {","lastModifiedDate":"2021-10-03"},{"lineNumber":7,"author":{"gitId":"brendanlsz"},"content":"    private final String name;","lastModifiedDate":"2021-10-03"},{"lineNumber":8,"author":{"gitId":"brendanlsz"},"content":"    private final Integer calories;","lastModifiedDate":"2021-10-03"},{"lineNumber":9,"author":{"gitId":"brendanlsz"},"content":"    private final FoodType type;","lastModifiedDate":"2021-10-22"},{"lineNumber":10,"author":{"gitId":"brendanlsz"},"content":"    private static final String DELIMITER \u003d \" | \";","lastModifiedDate":"2021-11-02"},{"lineNumber":11,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":12,"author":{"gitId":"brendanlsz"},"content":"    public enum FoodType {","lastModifiedDate":"2021-10-22"},{"lineNumber":13,"author":{"gitId":"brendanlsz"},"content":"        SNACK,","lastModifiedDate":"2021-10-22"},{"lineNumber":14,"author":{"gitId":"brendanlsz"},"content":"        MEAL,","lastModifiedDate":"2021-10-22"},{"lineNumber":15,"author":{"gitId":"brendanlsz"},"content":"        BEVERAGE,","lastModifiedDate":"2021-10-22"},{"lineNumber":16,"author":{"gitId":"brendanlsz"},"content":"        OTHERS","lastModifiedDate":"2021-10-22"},{"lineNumber":17,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":18,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":19,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-10-03"},{"lineNumber":20,"author":{"gitId":"brendanlsz"},"content":"     * Constructor.","lastModifiedDate":"2021-10-03"},{"lineNumber":21,"author":{"gitId":"brendanlsz"},"content":"     *","lastModifiedDate":"2021-10-03"},{"lineNumber":22,"author":{"gitId":"brendanlsz"},"content":"     * @param name     Name of the Food object.","lastModifiedDate":"2021-11-05"},{"lineNumber":23,"author":{"gitId":"brendanlsz"},"content":"     * @param calories Calorie value of the Food object.","lastModifiedDate":"2021-11-05"},{"lineNumber":24,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-10-03"},{"lineNumber":25,"author":{"gitId":"brendanlsz"},"content":"    public Food(String name, Integer calories, FoodType type) {","lastModifiedDate":"2021-10-22"},{"lineNumber":26,"author":{"gitId":"siyuancheng178"},"content":"        this.name \u003d name;","lastModifiedDate":"2021-10-04"},{"lineNumber":27,"author":{"gitId":"siyuancheng178"},"content":"        this.calories \u003d calories;","lastModifiedDate":"2021-10-04"},{"lineNumber":28,"author":{"gitId":"brendanlsz"},"content":"        this.type \u003d type;","lastModifiedDate":"2021-10-22"},{"lineNumber":29,"author":{"gitId":"siyuancheng178"},"content":"    }","lastModifiedDate":"2021-10-04"},{"lineNumber":30,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":31,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-11-05"},{"lineNumber":32,"author":{"gitId":"brendanlsz"},"content":"     * Returns the name of the Food object.","lastModifiedDate":"2021-11-05"},{"lineNumber":33,"author":{"gitId":"brendanlsz"},"content":"     *","lastModifiedDate":"2021-11-05"},{"lineNumber":34,"author":{"gitId":"brendanlsz"},"content":"     * @return The name of the Food object.","lastModifiedDate":"2021-11-05"},{"lineNumber":35,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-11-05"},{"lineNumber":36,"author":{"gitId":"brendanlsz"},"content":"    public String getName() {","lastModifiedDate":"2021-10-06"},{"lineNumber":37,"author":{"gitId":"brendanlsz"},"content":"        return this.name;","lastModifiedDate":"2021-10-06"},{"lineNumber":38,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":39,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":40,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-11-05"},{"lineNumber":41,"author":{"gitId":"brendanlsz"},"content":"     * Returns the calorie value of the Food object.","lastModifiedDate":"2021-11-05"},{"lineNumber":42,"author":{"gitId":"brendanlsz"},"content":"     *","lastModifiedDate":"2021-11-05"},{"lineNumber":43,"author":{"gitId":"brendanlsz"},"content":"     * @return The calorie value of the Food object.","lastModifiedDate":"2021-11-05"},{"lineNumber":44,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-11-05"},{"lineNumber":45,"author":{"gitId":"brendanlsz"},"content":"    public Integer getCalories() {","lastModifiedDate":"2021-10-06"},{"lineNumber":46,"author":{"gitId":"brendanlsz"},"content":"        return this.calories;","lastModifiedDate":"2021-10-06"},{"lineNumber":47,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":48,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":49,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-10-03"},{"lineNumber":50,"author":{"gitId":"brendanlsz"},"content":"     * Returns a String representation of the Food object.","lastModifiedDate":"2021-11-05"},{"lineNumber":51,"author":{"gitId":"brendanlsz"},"content":"     *","lastModifiedDate":"2021-10-03"},{"lineNumber":52,"author":{"gitId":"brendanlsz"},"content":"     * @return String representation of the Food object.","lastModifiedDate":"2021-11-05"},{"lineNumber":53,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-10-03"},{"lineNumber":54,"author":{"gitId":"brendanlsz"},"content":"    @Override","lastModifiedDate":"2021-10-03"},{"lineNumber":55,"author":{"gitId":"brendanlsz"},"content":"    public String toString() {","lastModifiedDate":"2021-10-03"},{"lineNumber":56,"author":{"gitId":"brendanlsz"},"content":"        assert calories \u003e\u003d 0 : \"calorie of food should not be less than or equal to 0\";","lastModifiedDate":"2021-11-06"},{"lineNumber":57,"author":{"gitId":"brendanlsz"},"content":"        return this.name + \" (\" + this.calories + \" Kcal)\" + \" Type: \" + type.toString();","lastModifiedDate":"2021-10-25"},{"lineNumber":58,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":59,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":60,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-11-05"},{"lineNumber":61,"author":{"gitId":"brendanlsz"},"content":"     * Returns the FoodType of this Food object.","lastModifiedDate":"2021-11-05"},{"lineNumber":62,"author":{"gitId":"brendanlsz"},"content":"     *","lastModifiedDate":"2021-11-05"},{"lineNumber":63,"author":{"gitId":"brendanlsz"},"content":"     * @return The FoodType of this Food object.","lastModifiedDate":"2021-11-05"},{"lineNumber":64,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-11-05"},{"lineNumber":65,"author":{"gitId":"brendanlsz"},"content":"    public FoodType getType() {","lastModifiedDate":"2021-10-22"},{"lineNumber":66,"author":{"gitId":"brendanlsz"},"content":"        return this.type;","lastModifiedDate":"2021-10-22"},{"lineNumber":67,"author":{"gitId":"siyuancheng178"},"content":"    }","lastModifiedDate":"2021-10-04"},{"lineNumber":68,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":69,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-11-05"},{"lineNumber":70,"author":{"gitId":"brendanlsz"},"content":"     * Converts the Food object to String form for Storage.","lastModifiedDate":"2021-11-05"},{"lineNumber":71,"author":{"gitId":"brendanlsz"},"content":"     *","lastModifiedDate":"2021-11-05"},{"lineNumber":72,"author":{"gitId":"brendanlsz"},"content":"     * @return String form of the Food object for Storage.","lastModifiedDate":"2021-11-05"},{"lineNumber":73,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-11-05"},{"lineNumber":74,"author":{"gitId":"siyuancheng178"},"content":"    public String convertToStringForStorage() {","lastModifiedDate":"2021-10-06"},{"lineNumber":75,"author":{"gitId":"brendanlsz"},"content":"        StringBuilder lines \u003d new StringBuilder();","lastModifiedDate":"2021-11-02"},{"lineNumber":76,"author":{"gitId":"brendanlsz"},"content":"        assert calories \u003e\u003d 0 : \"calorie of food should not be less than or equal to 0\";","lastModifiedDate":"2021-11-06"},{"lineNumber":77,"author":{"gitId":"brendanlsz"},"content":"        String name \u003d this.getName();","lastModifiedDate":"2021-11-02"},{"lineNumber":78,"author":{"gitId":"brendanlsz"},"content":"        Integer calories \u003d this.getCalories();","lastModifiedDate":"2021-11-02"},{"lineNumber":79,"author":{"gitId":"brendanlsz"},"content":"        String type \u003d this.getType().toString();","lastModifiedDate":"2021-11-02"},{"lineNumber":80,"author":{"gitId":"brendanlsz"},"content":"        lines.append(name).append(DELIMITER).append(calories)","lastModifiedDate":"2021-11-02"},{"lineNumber":81,"author":{"gitId":"brendanlsz"},"content":"                .append(DELIMITER).append(type).append(System.lineSeparator());","lastModifiedDate":"2021-11-02"},{"lineNumber":82,"author":{"gitId":"brendanlsz"},"content":"        return lines.toString();","lastModifiedDate":"2021-11-02"},{"lineNumber":83,"author":{"gitId":"siyuancheng178"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":84,"author":{"gitId":"aaapppsss"},"content":"}","lastModifiedDate":"2021-10-03"}],"authorContributionMap":{"brendanlsz":72,"siyuancheng178":8,"aaapppsss":3,"praj-bellakka":1}},{"path":"src/main/java/fitnus/tracker/Gender.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"siyuancheng178"},"content":"//@@author: siyuancheng178","lastModifiedDate":"2021-11-06"},{"lineNumber":2,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":3,"author":{"gitId":"siyuancheng178"},"content":"package fitnus.tracker;","lastModifiedDate":"2021-10-23"},{"lineNumber":4,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":5,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":6,"author":{"gitId":"siyuancheng178"},"content":"public enum Gender {","lastModifiedDate":"2021-10-23"},{"lineNumber":7,"author":{"gitId":"siyuancheng178"},"content":"    MALE {","lastModifiedDate":"2021-10-23"},{"lineNumber":8,"author":{"gitId":"siyuancheng178"},"content":"        @Override","lastModifiedDate":"2021-10-23"},{"lineNumber":9,"author":{"gitId":"siyuancheng178"},"content":"        public String toString() {","lastModifiedDate":"2021-10-23"},{"lineNumber":10,"author":{"gitId":"siyuancheng178"},"content":"            return \"m\";","lastModifiedDate":"2021-10-23"},{"lineNumber":11,"author":{"gitId":"siyuancheng178"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":12,"author":{"gitId":"siyuancheng178"},"content":"    },","lastModifiedDate":"2021-10-23"},{"lineNumber":13,"author":{"gitId":"siyuancheng178"},"content":"    FEMALE {","lastModifiedDate":"2021-10-23"},{"lineNumber":14,"author":{"gitId":"siyuancheng178"},"content":"        @Override","lastModifiedDate":"2021-10-23"},{"lineNumber":15,"author":{"gitId":"siyuancheng178"},"content":"        public String toString() {","lastModifiedDate":"2021-10-23"},{"lineNumber":16,"author":{"gitId":"siyuancheng178"},"content":"            return \"f\";","lastModifiedDate":"2021-10-23"},{"lineNumber":17,"author":{"gitId":"siyuancheng178"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":18,"author":{"gitId":"siyuancheng178"},"content":"    };","lastModifiedDate":"2021-10-23"},{"lineNumber":19,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":20,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":21,"author":{"gitId":"siyuancheng178"},"content":"    public static Gender findGender(String gender) {","lastModifiedDate":"2021-10-23"},{"lineNumber":22,"author":{"gitId":"brendanlsz"},"content":"        if (gender.equalsIgnoreCase(\"m\")) {","lastModifiedDate":"2021-11-06"},{"lineNumber":23,"author":{"gitId":"siyuancheng178"},"content":"            return Gender.MALE;","lastModifiedDate":"2021-10-23"},{"lineNumber":24,"author":{"gitId":"brendanlsz"},"content":"        } else if (gender.equalsIgnoreCase(\"f\")) {","lastModifiedDate":"2021-11-06"},{"lineNumber":25,"author":{"gitId":"siyuancheng178"},"content":"            return Gender.FEMALE;","lastModifiedDate":"2021-10-23"},{"lineNumber":26,"author":{"gitId":"siyuancheng178"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":27,"author":{"gitId":"siyuancheng178"},"content":"        return null;","lastModifiedDate":"2021-10-23"},{"lineNumber":28,"author":{"gitId":"siyuancheng178"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":29,"author":{"gitId":"siyuancheng178"},"content":"}","lastModifiedDate":"2021-10-23"},{"lineNumber":30,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":31,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-10-23"}],"authorContributionMap":{"brendanlsz":2,"siyuancheng178":29}},{"path":"src/main/java/fitnus/tracker/MealPlan.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"praj-bellakka"},"content":"package fitnus.tracker;","lastModifiedDate":"2021-10-24"},{"lineNumber":2,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":3,"author":{"gitId":"praj-bellakka"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-24"},{"lineNumber":4,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":5,"author":{"gitId":"praj-bellakka"},"content":"public class MealPlan {","lastModifiedDate":"2021-10-24"},{"lineNumber":6,"author":{"gitId":"brendanlsz"},"content":"    private final String mealPlanName;","lastModifiedDate":"2021-11-06"},{"lineNumber":7,"author":{"gitId":"brendanlsz"},"content":"    private final ArrayList\u003cFood\u003e mealFoods;","lastModifiedDate":"2021-11-06"},{"lineNumber":8,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":9,"author":{"gitId":"praj-bellakka"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":10,"author":{"gitId":"praj-bellakka"},"content":"     * Constructor.","lastModifiedDate":"2021-11-07"},{"lineNumber":11,"author":{"gitId":"praj-bellakka"},"content":"     *","lastModifiedDate":"2021-11-07"},{"lineNumber":12,"author":{"gitId":"praj-bellakka"},"content":"     * @param mealPlanName     Name of the meal plan object.","lastModifiedDate":"2021-11-07"},{"lineNumber":13,"author":{"gitId":"praj-bellakka"},"content":"     * @param mealFoods ArrayList of Food objects.","lastModifiedDate":"2021-11-07"},{"lineNumber":14,"author":{"gitId":"praj-bellakka"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":15,"author":{"gitId":"praj-bellakka"},"content":"    public MealPlan(String mealPlanName, ArrayList\u003cFood\u003e mealFoods) {","lastModifiedDate":"2021-10-24"},{"lineNumber":16,"author":{"gitId":"praj-bellakka"},"content":"        this.mealPlanName \u003d mealPlanName;","lastModifiedDate":"2021-10-24"},{"lineNumber":17,"author":{"gitId":"praj-bellakka"},"content":"        this.mealFoods \u003d mealFoods;","lastModifiedDate":"2021-10-24"},{"lineNumber":18,"author":{"gitId":"praj-bellakka"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":19,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":20,"author":{"gitId":"praj-bellakka"},"content":"    public String getMealPlanName() {","lastModifiedDate":"2021-10-24"},{"lineNumber":21,"author":{"gitId":"praj-bellakka"},"content":"        return this.mealPlanName;","lastModifiedDate":"2021-10-26"},{"lineNumber":22,"author":{"gitId":"praj-bellakka"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":23,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":24,"author":{"gitId":"praj-bellakka"},"content":"    public ArrayList\u003cFood\u003e getMealFoods() {","lastModifiedDate":"2021-10-24"},{"lineNumber":25,"author":{"gitId":"praj-bellakka"},"content":"        return this.mealFoods;","lastModifiedDate":"2021-10-26"},{"lineNumber":26,"author":{"gitId":"praj-bellakka"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":27,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":28,"author":{"gitId":"praj-bellakka"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":29,"author":{"gitId":"praj-bellakka"},"content":"     * Returns a string representation of all Food objects inside mealFoods.","lastModifiedDate":"2021-11-07"},{"lineNumber":30,"author":{"gitId":"praj-bellakka"},"content":"     * Returns empty string if mealFoods is empty.","lastModifiedDate":"2021-11-07"},{"lineNumber":31,"author":{"gitId":"praj-bellakka"},"content":"     *","lastModifiedDate":"2021-11-07"},{"lineNumber":32,"author":{"gitId":"praj-bellakka"},"content":"     * @return String representation of all Food objects inside mealFoods.","lastModifiedDate":"2021-11-07"},{"lineNumber":33,"author":{"gitId":"praj-bellakka"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":34,"author":{"gitId":"praj-bellakka"},"content":"    public String getFoodString() {","lastModifiedDate":"2021-10-26"},{"lineNumber":35,"author":{"gitId":"praj-bellakka"},"content":"        String str \u003d \"\";","lastModifiedDate":"2021-10-26"},{"lineNumber":36,"author":{"gitId":"praj-bellakka"},"content":"        for (Food item : mealFoods) {","lastModifiedDate":"2021-10-26"},{"lineNumber":37,"author":{"gitId":"praj-bellakka"},"content":"            str +\u003d item.toString() + System.lineSeparator();","lastModifiedDate":"2021-10-26"},{"lineNumber":38,"author":{"gitId":"praj-bellakka"},"content":"        }","lastModifiedDate":"2021-10-26"},{"lineNumber":39,"author":{"gitId":"praj-bellakka"},"content":"        return str;","lastModifiedDate":"2021-10-26"},{"lineNumber":40,"author":{"gitId":"praj-bellakka"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":41,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":42,"author":{"gitId":"praj-bellakka"},"content":"    /**","lastModifiedDate":"2021-10-25"},{"lineNumber":43,"author":{"gitId":"praj-bellakka"},"content":"     * Returns String representation of MealPlan object, including all its food under it.","lastModifiedDate":"2021-10-25"},{"lineNumber":44,"author":{"gitId":"brendanlsz"},"content":"     *","lastModifiedDate":"2021-11-06"},{"lineNumber":45,"author":{"gitId":"praj-bellakka"},"content":"     * @return String representation of MealPlan object","lastModifiedDate":"2021-10-25"},{"lineNumber":46,"author":{"gitId":"praj-bellakka"},"content":"     */","lastModifiedDate":"2021-10-25"},{"lineNumber":47,"author":{"gitId":"praj-bellakka"},"content":"    @Override","lastModifiedDate":"2021-10-25"},{"lineNumber":48,"author":{"gitId":"praj-bellakka"},"content":"    public String toString() {","lastModifiedDate":"2021-10-25"},{"lineNumber":49,"author":{"gitId":"praj-bellakka"},"content":"        for (Food item : mealFoods) {","lastModifiedDate":"2021-10-25"},{"lineNumber":50,"author":{"gitId":"praj-bellakka"},"content":"            System.out.println(item.toString());","lastModifiedDate":"2021-10-25"},{"lineNumber":51,"author":{"gitId":"praj-bellakka"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":52,"author":{"gitId":"praj-bellakka"},"content":"        return this.mealPlanName;","lastModifiedDate":"2021-10-26"},{"lineNumber":53,"author":{"gitId":"praj-bellakka"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":54,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":55,"author":{"gitId":"praj-bellakka"},"content":"}","lastModifiedDate":"2021-10-24"}],"authorContributionMap":{"brendanlsz":3,"praj-bellakka":52}},{"path":"src/main/java/fitnus/tracker/MealType.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"kengjit"},"content":"package fitnus.tracker;","lastModifiedDate":"2021-10-19"},{"lineNumber":2,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":3,"author":{"gitId":"praj-bellakka"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-10-21"},{"lineNumber":4,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":5,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":6,"author":{"gitId":"kengjit"},"content":"public enum MealType {","lastModifiedDate":"2021-10-19"},{"lineNumber":7,"author":{"gitId":"kengjit"},"content":"    BREAKFAST {","lastModifiedDate":"2021-10-19"},{"lineNumber":8,"author":{"gitId":"kengjit"},"content":"        @Override","lastModifiedDate":"2021-10-19"},{"lineNumber":9,"author":{"gitId":"kengjit"},"content":"        public String toString() {","lastModifiedDate":"2021-10-19"},{"lineNumber":10,"author":{"gitId":"kengjit"},"content":"            return \"Breakfast\";","lastModifiedDate":"2021-10-19"},{"lineNumber":11,"author":{"gitId":"kengjit"},"content":"        }","lastModifiedDate":"2021-10-19"},{"lineNumber":12,"author":{"gitId":"kengjit"},"content":"    },","lastModifiedDate":"2021-10-19"},{"lineNumber":13,"author":{"gitId":"kengjit"},"content":"    LUNCH {","lastModifiedDate":"2021-10-19"},{"lineNumber":14,"author":{"gitId":"kengjit"},"content":"        @Override","lastModifiedDate":"2021-10-19"},{"lineNumber":15,"author":{"gitId":"kengjit"},"content":"        public String toString() {","lastModifiedDate":"2021-10-19"},{"lineNumber":16,"author":{"gitId":"kengjit"},"content":"            return \"Lunch\";","lastModifiedDate":"2021-10-19"},{"lineNumber":17,"author":{"gitId":"kengjit"},"content":"        }","lastModifiedDate":"2021-10-19"},{"lineNumber":18,"author":{"gitId":"kengjit"},"content":"    },","lastModifiedDate":"2021-10-19"},{"lineNumber":19,"author":{"gitId":"kengjit"},"content":"    DINNER {","lastModifiedDate":"2021-10-19"},{"lineNumber":20,"author":{"gitId":"kengjit"},"content":"        @Override","lastModifiedDate":"2021-10-19"},{"lineNumber":21,"author":{"gitId":"kengjit"},"content":"        public String toString() {","lastModifiedDate":"2021-10-19"},{"lineNumber":22,"author":{"gitId":"kengjit"},"content":"            return \"Dinner\";","lastModifiedDate":"2021-10-19"},{"lineNumber":23,"author":{"gitId":"kengjit"},"content":"        }","lastModifiedDate":"2021-10-19"},{"lineNumber":24,"author":{"gitId":"kengjit"},"content":"    },","lastModifiedDate":"2021-10-19"},{"lineNumber":25,"author":{"gitId":"kengjit"},"content":"    SNACK {","lastModifiedDate":"2021-10-19"},{"lineNumber":26,"author":{"gitId":"kengjit"},"content":"        @Override","lastModifiedDate":"2021-10-19"},{"lineNumber":27,"author":{"gitId":"kengjit"},"content":"        public String toString() {","lastModifiedDate":"2021-10-19"},{"lineNumber":28,"author":{"gitId":"kengjit"},"content":"            return \"Snack\";","lastModifiedDate":"2021-10-19"},{"lineNumber":29,"author":{"gitId":"kengjit"},"content":"        }","lastModifiedDate":"2021-10-19"},{"lineNumber":30,"author":{"gitId":"praj-bellakka"},"content":"    },","lastModifiedDate":"2021-10-19"},{"lineNumber":31,"author":{"gitId":"praj-bellakka"},"content":"    UNDEFINED {","lastModifiedDate":"2021-10-19"},{"lineNumber":32,"author":{"gitId":"praj-bellakka"},"content":"        @Override","lastModifiedDate":"2021-10-19"},{"lineNumber":33,"author":{"gitId":"praj-bellakka"},"content":"        public String toString() {","lastModifiedDate":"2021-10-19"},{"lineNumber":34,"author":{"gitId":"praj-bellakka"},"content":"            return \"Undefined\";","lastModifiedDate":"2021-10-19"},{"lineNumber":35,"author":{"gitId":"praj-bellakka"},"content":"        }","lastModifiedDate":"2021-10-19"},{"lineNumber":36,"author":{"gitId":"praj-bellakka"},"content":"    };","lastModifiedDate":"2021-10-21"},{"lineNumber":37,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":38,"author":{"gitId":"praj-bellakka"},"content":"    //predefined breakfast, lunch and dinner timings (in 24hrs)","lastModifiedDate":"2021-10-21"},{"lineNumber":39,"author":{"gitId":"praj-bellakka"},"content":"    private static final int BREAKFAST_HOUR_LOWER \u003d 6; //6am","lastModifiedDate":"2021-10-21"},{"lineNumber":40,"author":{"gitId":"praj-bellakka"},"content":"    private static final int BREAKFAST_HOUR_UPPER \u003d 10; //10am","lastModifiedDate":"2021-10-21"},{"lineNumber":41,"author":{"gitId":"praj-bellakka"},"content":"    private static final int LUNCH_HOUR_LOWER \u003d 11; //11am","lastModifiedDate":"2021-10-21"},{"lineNumber":42,"author":{"gitId":"praj-bellakka"},"content":"    private static final int LUNCH_HOUR_UPPER \u003d 14; //2pm","lastModifiedDate":"2021-10-21"},{"lineNumber":43,"author":{"gitId":"praj-bellakka"},"content":"    private static final int DINNER_HOUR_LOWER \u003d 18; //6pm","lastModifiedDate":"2021-10-21"},{"lineNumber":44,"author":{"gitId":"praj-bellakka"},"content":"    private static final int DINNER_HOUR_UPPER \u003d 21; //9pm","lastModifiedDate":"2021-10-21"},{"lineNumber":45,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":46,"author":{"gitId":"praj-bellakka"},"content":"    /**","lastModifiedDate":"2021-10-21"},{"lineNumber":47,"author":{"gitId":"praj-bellakka"},"content":"     * Finds the current hour (in 24hrs) using system LocalDateTime object.","lastModifiedDate":"2021-10-21"},{"lineNumber":48,"author":{"gitId":"praj-bellakka"},"content":"     * The relevant MealType is returned based on the hourOfDay.","lastModifiedDate":"2021-10-21"},{"lineNumber":49,"author":{"gitId":"praj-bellakka"},"content":"     * 6am to 10am: Breakfast.","lastModifiedDate":"2021-10-21"},{"lineNumber":50,"author":{"gitId":"praj-bellakka"},"content":"     * 11am to 2pm: Lunch.","lastModifiedDate":"2021-10-21"},{"lineNumber":51,"author":{"gitId":"praj-bellakka"},"content":"     * 6pm to 9pm: Dinner.","lastModifiedDate":"2021-10-21"},{"lineNumber":52,"author":{"gitId":"praj-bellakka"},"content":"     * Otherwise: Snack.","lastModifiedDate":"2021-10-21"},{"lineNumber":53,"author":{"gitId":"praj-bellakka"},"content":"     *","lastModifiedDate":"2021-10-21"},{"lineNumber":54,"author":{"gitId":"praj-bellakka"},"content":"     * @return MealType based on hourOfDay.","lastModifiedDate":"2021-10-21"},{"lineNumber":55,"author":{"gitId":"praj-bellakka"},"content":"     */","lastModifiedDate":"2021-10-21"},{"lineNumber":56,"author":{"gitId":"praj-bellakka"},"content":"    public MealType findMealTypeTiming() {","lastModifiedDate":"2021-10-21"},{"lineNumber":57,"author":{"gitId":"praj-bellakka"},"content":"        LocalDateTime currentTime \u003d LocalDateTime.now();","lastModifiedDate":"2021-10-21"},{"lineNumber":58,"author":{"gitId":"praj-bellakka"},"content":"        int hourOfDay \u003d currentTime.getHour();","lastModifiedDate":"2021-10-21"},{"lineNumber":59,"author":{"gitId":"praj-bellakka"},"content":"        if (hourOfDay \u003e\u003d BREAKFAST_HOUR_LOWER \u0026\u0026 hourOfDay \u003c BREAKFAST_HOUR_UPPER) {","lastModifiedDate":"2021-10-21"},{"lineNumber":60,"author":{"gitId":"praj-bellakka"},"content":"            return MealType.BREAKFAST;","lastModifiedDate":"2021-10-21"},{"lineNumber":61,"author":{"gitId":"praj-bellakka"},"content":"        } else if (hourOfDay \u003e\u003d LUNCH_HOUR_LOWER \u0026\u0026 hourOfDay \u003c LUNCH_HOUR_UPPER) {","lastModifiedDate":"2021-10-21"},{"lineNumber":62,"author":{"gitId":"praj-bellakka"},"content":"            return MealType.LUNCH;","lastModifiedDate":"2021-10-21"},{"lineNumber":63,"author":{"gitId":"praj-bellakka"},"content":"        } else if (hourOfDay \u003e\u003d DINNER_HOUR_LOWER \u0026\u0026 hourOfDay \u003c DINNER_HOUR_UPPER) {","lastModifiedDate":"2021-10-21"},{"lineNumber":64,"author":{"gitId":"praj-bellakka"},"content":"            return MealType.DINNER;","lastModifiedDate":"2021-10-21"},{"lineNumber":65,"author":{"gitId":"praj-bellakka"},"content":"        } else {","lastModifiedDate":"2021-10-21"},{"lineNumber":66,"author":{"gitId":"praj-bellakka"},"content":"            return MealType.SNACK; //if current time is outside of these hours, the person is assumed to eat snack.","lastModifiedDate":"2021-10-21"},{"lineNumber":67,"author":{"gitId":"praj-bellakka"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":68,"author":{"gitId":"kengjit"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":69,"author":{"gitId":"kengjit"},"content":"}","lastModifiedDate":"2021-10-19"}],"authorContributionMap":{"kengjit":28,"praj-bellakka":41}},{"path":"src/main/java/fitnus/tracker/Summary.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"siyuancheng178"},"content":"// @@author siyuancheng178","lastModifiedDate":"2021-11-04"},{"lineNumber":2,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":3,"author":{"gitId":"siyuancheng178"},"content":"package fitnus.tracker;","lastModifiedDate":"2021-10-20"},{"lineNumber":4,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":5,"author":{"gitId":"siyuancheng178"},"content":"import fitnus.database.EntryDatabase;","lastModifiedDate":"2021-10-21"},{"lineNumber":6,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":7,"author":{"gitId":"siyuancheng178"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-10-21"},{"lineNumber":8,"author":{"gitId":"siyuancheng178"},"content":"import java.time.temporal.ChronoUnit;","lastModifiedDate":"2021-11-05"},{"lineNumber":9,"author":{"gitId":"siyuancheng178"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-21"},{"lineNumber":10,"author":{"gitId":"siyuancheng178"},"content":"import java.util.HashMap;","lastModifiedDate":"2021-10-21"},{"lineNumber":11,"author":{"gitId":"siyuancheng178"},"content":"import java.util.Map;","lastModifiedDate":"2021-10-21"},{"lineNumber":12,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":13,"author":{"gitId":"siyuancheng178"},"content":"/**","lastModifiedDate":"2021-11-06"},{"lineNumber":14,"author":{"gitId":"siyuancheng178"},"content":" * Summary class is responsible for generating a diet summary for users based on day ranges.","lastModifiedDate":"2021-11-06"},{"lineNumber":15,"author":{"gitId":"siyuancheng178"},"content":" */","lastModifiedDate":"2021-11-06"},{"lineNumber":16,"author":{"gitId":"siyuancheng178"},"content":"public class Summary {","lastModifiedDate":"2021-10-20"},{"lineNumber":17,"author":{"gitId":"siyuancheng178"},"content":"    private static final int UNIT_PER_SQUARE \u003d 100;","lastModifiedDate":"2021-10-21"},{"lineNumber":18,"author":{"gitId":"siyuancheng178"},"content":"    private static final String SQUARE \u003d \"#\";","lastModifiedDate":"2021-11-04"},{"lineNumber":19,"author":{"gitId":"siyuancheng178"},"content":"    private final ArrayList\u003cEntry\u003e entries;","lastModifiedDate":"2021-10-23"},{"lineNumber":20,"author":{"gitId":"siyuancheng178"},"content":"    private int days;","lastModifiedDate":"2021-10-31"},{"lineNumber":21,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":22,"author":{"gitId":"siyuancheng178"},"content":"    /**","lastModifiedDate":"2021-11-06"},{"lineNumber":23,"author":{"gitId":"siyuancheng178"},"content":"     * Constructs a Summary object.","lastModifiedDate":"2021-11-06"},{"lineNumber":24,"author":{"gitId":"siyuancheng178"},"content":"     *","lastModifiedDate":"2021-11-06"},{"lineNumber":25,"author":{"gitId":"siyuancheng178"},"content":"     * @param ed   EntryDatabase used to give summary","lastModifiedDate":"2021-11-06"},{"lineNumber":26,"author":{"gitId":"siyuancheng178"},"content":"     * @param days range of days to covered in summary","lastModifiedDate":"2021-11-06"},{"lineNumber":27,"author":{"gitId":"siyuancheng178"},"content":"     */","lastModifiedDate":"2021-11-06"},{"lineNumber":28,"author":{"gitId":"siyuancheng178"},"content":"    public Summary(EntryDatabase ed, int days) {","lastModifiedDate":"2021-10-21"},{"lineNumber":29,"author":{"gitId":"siyuancheng178"},"content":"        ed.sortDatabase();","lastModifiedDate":"2021-10-21"},{"lineNumber":30,"author":{"gitId":"siyuancheng178"},"content":"        this.entries \u003d ed.getEntries();","lastModifiedDate":"2021-10-21"},{"lineNumber":31,"author":{"gitId":"siyuancheng178"},"content":"        if (entries.size() \u003d\u003d 0) {","lastModifiedDate":"2021-10-31"},{"lineNumber":32,"author":{"gitId":"siyuancheng178"},"content":"            days \u003d 1;","lastModifiedDate":"2021-10-31"},{"lineNumber":33,"author":{"gitId":"siyuancheng178"},"content":"        } else {","lastModifiedDate":"2021-10-31"},{"lineNumber":34,"author":{"gitId":"siyuancheng178"},"content":"            LocalDate firstUseDate \u003d entries.get(0).getRawDate();","lastModifiedDate":"2021-11-01"},{"lineNumber":35,"author":{"gitId":"siyuancheng178"},"content":"            int period \u003d (int) firstUseDate.until(LocalDate.now(), ChronoUnit.DAYS) + 1;","lastModifiedDate":"2021-11-05"},{"lineNumber":36,"author":{"gitId":"siyuancheng178"},"content":"            if (period \u003e\u003d days) {","lastModifiedDate":"2021-10-31"},{"lineNumber":37,"author":{"gitId":"siyuancheng178"},"content":"                this.days \u003d days;","lastModifiedDate":"2021-10-31"},{"lineNumber":38,"author":{"gitId":"siyuancheng178"},"content":"            } else {","lastModifiedDate":"2021-10-31"},{"lineNumber":39,"author":{"gitId":"siyuancheng178"},"content":"                this.days \u003d period;","lastModifiedDate":"2021-10-31"},{"lineNumber":40,"author":{"gitId":"siyuancheng178"},"content":"            }","lastModifiedDate":"2021-10-31"},{"lineNumber":41,"author":{"gitId":"siyuancheng178"},"content":"        }","lastModifiedDate":"2021-10-31"},{"lineNumber":42,"author":{"gitId":"siyuancheng178"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":43,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":44,"author":{"gitId":"siyuancheng178"},"content":"    /**","lastModifiedDate":"2021-11-06"},{"lineNumber":45,"author":{"gitId":"siyuancheng178"},"content":"     * Gets the most and least frequently eaten food by the user over some days.","lastModifiedDate":"2021-11-06"},{"lineNumber":46,"author":{"gitId":"siyuancheng178"},"content":"     *","lastModifiedDate":"2021-11-06"},{"lineNumber":47,"author":{"gitId":"siyuancheng178"},"content":"     * @return Returns the most and least frequently eaten foods and the corresponding times.","lastModifiedDate":"2021-11-06"},{"lineNumber":48,"author":{"gitId":"siyuancheng178"},"content":"     */","lastModifiedDate":"2021-11-06"},{"lineNumber":49,"author":{"gitId":"siyuancheng178"},"content":"    private String getMostAndLeastEatenFood() {","lastModifiedDate":"2021-10-21"},{"lineNumber":50,"author":{"gitId":"siyuancheng178"},"content":"        HashMap\u003cString, Integer\u003e occurrence \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2021-10-21"},{"lineNumber":51,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":52,"author":{"gitId":"siyuancheng178"},"content":"        for (Entry i : entries) {","lastModifiedDate":"2021-10-21"},{"lineNumber":53,"author":{"gitId":"siyuancheng178"},"content":"            String foodName \u003d i.getFood().getName();","lastModifiedDate":"2021-10-21"},{"lineNumber":54,"author":{"gitId":"siyuancheng178"},"content":"            occurrence.compute(foodName, (key, val) -\u003e {","lastModifiedDate":"2021-10-21"},{"lineNumber":55,"author":{"gitId":"siyuancheng178"},"content":"                if (val \u003d\u003d null) {","lastModifiedDate":"2021-10-21"},{"lineNumber":56,"author":{"gitId":"siyuancheng178"},"content":"                    return 1;","lastModifiedDate":"2021-10-21"},{"lineNumber":57,"author":{"gitId":"siyuancheng178"},"content":"                }","lastModifiedDate":"2021-10-21"},{"lineNumber":58,"author":{"gitId":"siyuancheng178"},"content":"                return val + 1;","lastModifiedDate":"2021-10-21"},{"lineNumber":59,"author":{"gitId":"siyuancheng178"},"content":"            });","lastModifiedDate":"2021-10-21"},{"lineNumber":60,"author":{"gitId":"siyuancheng178"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":61,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":62,"author":{"gitId":"siyuancheng178"},"content":"        ArrayList\u003cString\u003e mostFrequentFoods \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-21"},{"lineNumber":63,"author":{"gitId":"siyuancheng178"},"content":"        ArrayList\u003cString\u003e leastFrequentFoods \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-21"},{"lineNumber":64,"author":{"gitId":"siyuancheng178"},"content":"        int maxOccurrence \u003d 0;","lastModifiedDate":"2021-10-21"},{"lineNumber":65,"author":{"gitId":"siyuancheng178"},"content":"        int minOccurrence \u003d entries.size();","lastModifiedDate":"2021-10-21"},{"lineNumber":66,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":67,"author":{"gitId":"siyuancheng178"},"content":"        // Iterates through hashmap entries to find most frequent food","lastModifiedDate":"2021-10-21"},{"lineNumber":68,"author":{"gitId":"siyuancheng178"},"content":"        for (Map.Entry\u003cString, Integer\u003e e : occurrence.entrySet()) {","lastModifiedDate":"2021-10-21"},{"lineNumber":69,"author":{"gitId":"siyuancheng178"},"content":"            if (e.getValue() \u003e maxOccurrence) {","lastModifiedDate":"2021-10-21"},{"lineNumber":70,"author":{"gitId":"siyuancheng178"},"content":"                // Update max val and most freq foods","lastModifiedDate":"2021-10-21"},{"lineNumber":71,"author":{"gitId":"siyuancheng178"},"content":"                maxOccurrence \u003d e.getValue();","lastModifiedDate":"2021-10-21"},{"lineNumber":72,"author":{"gitId":"siyuancheng178"},"content":"                mostFrequentFoods.clear();","lastModifiedDate":"2021-10-21"},{"lineNumber":73,"author":{"gitId":"siyuancheng178"},"content":"                mostFrequentFoods.add(e.getKey());","lastModifiedDate":"2021-10-21"},{"lineNumber":74,"author":{"gitId":"siyuancheng178"},"content":"            } else if (e.getValue() \u003d\u003d maxOccurrence) {","lastModifiedDate":"2021-10-21"},{"lineNumber":75,"author":{"gitId":"siyuancheng178"},"content":"                // Add food to most freq foods","lastModifiedDate":"2021-10-21"},{"lineNumber":76,"author":{"gitId":"siyuancheng178"},"content":"                mostFrequentFoods.add(e.getKey());","lastModifiedDate":"2021-10-21"},{"lineNumber":77,"author":{"gitId":"siyuancheng178"},"content":"            }","lastModifiedDate":"2021-10-21"},{"lineNumber":78,"author":{"gitId":"siyuancheng178"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":79,"author":{"gitId":"siyuancheng178"},"content":"        // Iterates through hashmap entries to find least frequent food","lastModifiedDate":"2021-10-21"},{"lineNumber":80,"author":{"gitId":"siyuancheng178"},"content":"        for (Map.Entry\u003cString, Integer\u003e e : occurrence.entrySet()) {","lastModifiedDate":"2021-10-21"},{"lineNumber":81,"author":{"gitId":"siyuancheng178"},"content":"            if (e.getValue() \u003c minOccurrence) {","lastModifiedDate":"2021-10-21"},{"lineNumber":82,"author":{"gitId":"siyuancheng178"},"content":"                // Update min val and least freq foods","lastModifiedDate":"2021-10-21"},{"lineNumber":83,"author":{"gitId":"siyuancheng178"},"content":"                minOccurrence \u003d e.getValue();","lastModifiedDate":"2021-10-21"},{"lineNumber":84,"author":{"gitId":"siyuancheng178"},"content":"                leastFrequentFoods.clear();","lastModifiedDate":"2021-10-21"},{"lineNumber":85,"author":{"gitId":"siyuancheng178"},"content":"                leastFrequentFoods.add(e.getKey());","lastModifiedDate":"2021-10-21"},{"lineNumber":86,"author":{"gitId":"siyuancheng178"},"content":"            } else if (e.getValue() \u003d\u003d minOccurrence) {","lastModifiedDate":"2021-10-21"},{"lineNumber":87,"author":{"gitId":"siyuancheng178"},"content":"                // Add food to least freq foods","lastModifiedDate":"2021-10-21"},{"lineNumber":88,"author":{"gitId":"siyuancheng178"},"content":"                leastFrequentFoods.add(e.getKey());","lastModifiedDate":"2021-10-21"},{"lineNumber":89,"author":{"gitId":"siyuancheng178"},"content":"            }","lastModifiedDate":"2021-10-21"},{"lineNumber":90,"author":{"gitId":"siyuancheng178"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":91,"author":{"gitId":"siyuancheng178"},"content":"        mostFrequentFoods.sort(String::compareTo);","lastModifiedDate":"2021-11-04"},{"lineNumber":92,"author":{"gitId":"siyuancheng178"},"content":"        leastFrequentFoods.sort(String::compareTo);","lastModifiedDate":"2021-11-04"},{"lineNumber":93,"author":{"gitId":"siyuancheng178"},"content":"        return String.format(\"Food eaten most: %s [%d time(s)]\\n\"","lastModifiedDate":"2021-10-21"},{"lineNumber":94,"author":{"gitId":"siyuancheng178"},"content":"                        + \"Food eaten least: %s [%d time(s)]\",","lastModifiedDate":"2021-10-21"},{"lineNumber":95,"author":{"gitId":"siyuancheng178"},"content":"                mostFrequentFoods, maxOccurrence,","lastModifiedDate":"2021-10-21"},{"lineNumber":96,"author":{"gitId":"siyuancheng178"},"content":"                leastFrequentFoods, minOccurrence);","lastModifiedDate":"2021-10-21"},{"lineNumber":97,"author":{"gitId":"siyuancheng178"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":98,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":99,"author":{"gitId":"siyuancheng178"},"content":"    /**","lastModifiedDate":"2021-11-06"},{"lineNumber":100,"author":{"gitId":"siyuancheng178"},"content":"     * Calculates the user\u0027s average calorie intake.","lastModifiedDate":"2021-11-06"},{"lineNumber":101,"author":{"gitId":"siyuancheng178"},"content":"     *","lastModifiedDate":"2021-11-06"},{"lineNumber":102,"author":{"gitId":"siyuancheng178"},"content":"     * @return the average calorie intake","lastModifiedDate":"2021-11-06"},{"lineNumber":103,"author":{"gitId":"siyuancheng178"},"content":"     */","lastModifiedDate":"2021-11-06"},{"lineNumber":104,"author":{"gitId":"siyuancheng178"},"content":"    private int getAverageCalories() {","lastModifiedDate":"2021-10-21"},{"lineNumber":105,"author":{"gitId":"siyuancheng178"},"content":"        int totalCalories \u003d 0;","lastModifiedDate":"2021-10-21"},{"lineNumber":106,"author":{"gitId":"siyuancheng178"},"content":"        int totalNumEntries \u003d entries.size();","lastModifiedDate":"2021-10-21"},{"lineNumber":107,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":108,"author":{"gitId":"siyuancheng178"},"content":"        for (Entry e : entries) {","lastModifiedDate":"2021-10-21"},{"lineNumber":109,"author":{"gitId":"siyuancheng178"},"content":"            totalCalories +\u003d e.getFood().getCalories();","lastModifiedDate":"2021-10-21"},{"lineNumber":110,"author":{"gitId":"siyuancheng178"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":111,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":112,"author":{"gitId":"siyuancheng178"},"content":"        return totalCalories / days;","lastModifiedDate":"2021-10-21"},{"lineNumber":113,"author":{"gitId":"siyuancheng178"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":114,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":115,"author":{"gitId":"siyuancheng178"},"content":"    /**","lastModifiedDate":"2021-11-06"},{"lineNumber":116,"author":{"gitId":"siyuancheng178"},"content":"     * Draws a horizontal calorie graph based on the calorie intake.","lastModifiedDate":"2021-11-06"},{"lineNumber":117,"author":{"gitId":"siyuancheng178"},"content":"     *","lastModifiedDate":"2021-11-06"},{"lineNumber":118,"author":{"gitId":"siyuancheng178"},"content":"     * @param calorie Total calorie intake on someday","lastModifiedDate":"2021-11-06"},{"lineNumber":119,"author":{"gitId":"siyuancheng178"},"content":"     * @param unit    the unit for each #","lastModifiedDate":"2021-11-06"},{"lineNumber":120,"author":{"gitId":"siyuancheng178"},"content":"     * @return convert the calorie integer to a graph drawing","lastModifiedDate":"2021-11-06"},{"lineNumber":121,"author":{"gitId":"siyuancheng178"},"content":"     */","lastModifiedDate":"2021-11-06"},{"lineNumber":122,"author":{"gitId":"siyuancheng178"},"content":"    private static String drawGraphSquares(int calorie, int unit) {","lastModifiedDate":"2021-10-23"},{"lineNumber":123,"author":{"gitId":"siyuancheng178"},"content":"        StringBuilder builder \u003d new StringBuilder();","lastModifiedDate":"2021-10-23"},{"lineNumber":124,"author":{"gitId":"siyuancheng178"},"content":"        for (int i \u003d 0; i \u003c calorie / unit; i++) {","lastModifiedDate":"2021-10-21"},{"lineNumber":125,"author":{"gitId":"siyuancheng178"},"content":"            builder.append(SQUARE);","lastModifiedDate":"2021-10-21"},{"lineNumber":126,"author":{"gitId":"siyuancheng178"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":127,"author":{"gitId":"siyuancheng178"},"content":"        return builder.toString();","lastModifiedDate":"2021-10-21"},{"lineNumber":128,"author":{"gitId":"siyuancheng178"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":129,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":130,"author":{"gitId":"siyuancheng178"},"content":"    /**","lastModifiedDate":"2021-11-06"},{"lineNumber":131,"author":{"gitId":"siyuancheng178"},"content":"     * Draw a horizontal calorie intake trend graph over the past week.","lastModifiedDate":"2021-11-06"},{"lineNumber":132,"author":{"gitId":"siyuancheng178"},"content":"     *","lastModifiedDate":"2021-11-06"},{"lineNumber":133,"author":{"gitId":"siyuancheng178"},"content":"     * @return convert the calorie intake over the past week to a graph.","lastModifiedDate":"2021-11-06"},{"lineNumber":134,"author":{"gitId":"siyuancheng178"},"content":"     */","lastModifiedDate":"2021-11-06"},{"lineNumber":135,"author":{"gitId":"siyuancheng178"},"content":"    private String getWeekCalorieTrendGraph() {","lastModifiedDate":"2021-10-23"},{"lineNumber":136,"author":{"gitId":"siyuancheng178"},"content":"        StringBuilder output \u003d new StringBuilder();","lastModifiedDate":"2021-10-23"},{"lineNumber":137,"author":{"gitId":"siyuancheng178"},"content":"        LocalDate date;","lastModifiedDate":"2021-10-31"},{"lineNumber":138,"author":{"gitId":"siyuancheng178"},"content":"        if (this.days \u003c 6) {","lastModifiedDate":"2021-10-31"},{"lineNumber":139,"author":{"gitId":"siyuancheng178"},"content":"            date \u003d LocalDate.now().minusDays(this.days - 1);","lastModifiedDate":"2021-10-31"},{"lineNumber":140,"author":{"gitId":"siyuancheng178"},"content":"        } else {","lastModifiedDate":"2021-10-31"},{"lineNumber":141,"author":{"gitId":"siyuancheng178"},"content":"            date \u003d LocalDate.now().minusDays(6);","lastModifiedDate":"2021-10-31"},{"lineNumber":142,"author":{"gitId":"siyuancheng178"},"content":"        }","lastModifiedDate":"2021-10-31"},{"lineNumber":143,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":144,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":145,"author":{"gitId":"siyuancheng178"},"content":"        int calories \u003d 0;","lastModifiedDate":"2021-10-21"},{"lineNumber":146,"author":{"gitId":"siyuancheng178"},"content":"        int j \u003d 0;","lastModifiedDate":"2021-10-21"},{"lineNumber":147,"author":{"gitId":"siyuancheng178"},"content":"        for (int i \u003d 0; i \u003c entries.size(); i++) {","lastModifiedDate":"2021-10-21"},{"lineNumber":148,"author":{"gitId":"siyuancheng178"},"content":"            if (!entries.get(i).getRawDate().isBefore(date)) {","lastModifiedDate":"2021-10-21"},{"lineNumber":149,"author":{"gitId":"siyuancheng178"},"content":"                j \u003d i;","lastModifiedDate":"2021-10-21"},{"lineNumber":150,"author":{"gitId":"siyuancheng178"},"content":"                break;","lastModifiedDate":"2021-10-21"},{"lineNumber":151,"author":{"gitId":"siyuancheng178"},"content":"            }","lastModifiedDate":"2021-10-21"},{"lineNumber":152,"author":{"gitId":"siyuancheng178"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":153,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":154,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":155,"author":{"gitId":"siyuancheng178"},"content":"        do {","lastModifiedDate":"2021-10-21"},{"lineNumber":156,"author":{"gitId":"siyuancheng178"},"content":"            if (j \u003c entries.size() \u0026\u0026 entries.get(j).getRawDate().equals(date)) {","lastModifiedDate":"2021-10-21"},{"lineNumber":157,"author":{"gitId":"siyuancheng178"},"content":"                calories +\u003d entries.get(j).getFood().getCalories();","lastModifiedDate":"2021-10-21"},{"lineNumber":158,"author":{"gitId":"siyuancheng178"},"content":"                j++;","lastModifiedDate":"2021-10-21"},{"lineNumber":159,"author":{"gitId":"siyuancheng178"},"content":"            } else {","lastModifiedDate":"2021-10-21"},{"lineNumber":160,"author":{"gitId":"siyuancheng178"},"content":"                output.append(String.format(\"%s: %s %d\\n\", date,","lastModifiedDate":"2021-10-21"},{"lineNumber":161,"author":{"gitId":"siyuancheng178"},"content":"                        drawGraphSquares(calories, UNIT_PER_SQUARE), calories));","lastModifiedDate":"2021-10-23"},{"lineNumber":162,"author":{"gitId":"siyuancheng178"},"content":"                date \u003d date.plusDays(1);","lastModifiedDate":"2021-10-21"},{"lineNumber":163,"author":{"gitId":"siyuancheng178"},"content":"                calories \u003d 0;","lastModifiedDate":"2021-10-21"},{"lineNumber":164,"author":{"gitId":"siyuancheng178"},"content":"            }","lastModifiedDate":"2021-10-21"},{"lineNumber":165,"author":{"gitId":"siyuancheng178"},"content":"        } while (!date.isAfter(LocalDate.now()));","lastModifiedDate":"2021-10-21"},{"lineNumber":166,"author":{"gitId":"siyuancheng178"},"content":"        return output.toString();","lastModifiedDate":"2021-10-21"},{"lineNumber":167,"author":{"gitId":"siyuancheng178"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":168,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":169,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":170,"author":{"gitId":"siyuancheng178"},"content":"    /**","lastModifiedDate":"2021-10-27"},{"lineNumber":171,"author":{"gitId":"siyuancheng178"},"content":"     * Generates a report based on the calorie intake over the past seven days.","lastModifiedDate":"2021-11-06"},{"lineNumber":172,"author":{"gitId":"siyuancheng178"},"content":"     * Report includes the calorie intake trend graph, weekly average calorie intake and the","lastModifiedDate":"2021-10-27"},{"lineNumber":173,"author":{"gitId":"siyuancheng178"},"content":"     * most/least frequently eaten food.","lastModifiedDate":"2021-10-27"},{"lineNumber":174,"author":{"gitId":"siyuancheng178"},"content":"     *","lastModifiedDate":"2021-10-27"},{"lineNumber":175,"author":{"gitId":"siyuancheng178"},"content":"     * @return String a report of weekly calorie intake","lastModifiedDate":"2021-10-27"},{"lineNumber":176,"author":{"gitId":"siyuancheng178"},"content":"     */","lastModifiedDate":"2021-10-27"},{"lineNumber":177,"author":{"gitId":"siyuancheng178"},"content":"    public String generateWeekSummaryReport() {","lastModifiedDate":"2021-10-21"},{"lineNumber":178,"author":{"gitId":"siyuancheng178"},"content":"        if (entries.size() \u003c 1) {","lastModifiedDate":"2021-10-21"},{"lineNumber":179,"author":{"gitId":"siyuancheng178"},"content":"            return \"No entries found!\";","lastModifiedDate":"2021-10-21"},{"lineNumber":180,"author":{"gitId":"siyuancheng178"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":181,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":182,"author":{"gitId":"siyuancheng178"},"content":"        int averageCalories \u003d getAverageCalories();","lastModifiedDate":"2021-10-21"},{"lineNumber":183,"author":{"gitId":"siyuancheng178"},"content":"        String output \u003d String.format(getWeekCalorieTrendGraph()","lastModifiedDate":"2021-10-23"},{"lineNumber":184,"author":{"gitId":"siyuancheng178"},"content":"                + \"Average Daily Calorie Intake: %s %d\\n\"","lastModifiedDate":"2021-10-21"},{"lineNumber":185,"author":{"gitId":"siyuancheng178"},"content":"                + getMostAndLeastEatenFood(), drawGraphSquares(averageCalories, UNIT_PER_SQUARE), averageCalories","lastModifiedDate":"2021-10-23"},{"lineNumber":186,"author":{"gitId":"siyuancheng178"},"content":"        );","lastModifiedDate":"2021-10-21"},{"lineNumber":187,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":188,"author":{"gitId":"siyuancheng178"},"content":"        return output;","lastModifiedDate":"2021-11-04"},{"lineNumber":189,"author":{"gitId":"siyuancheng178"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":190,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":191,"author":{"gitId":"siyuancheng178"},"content":"    /**","lastModifiedDate":"2021-10-27"},{"lineNumber":192,"author":{"gitId":"siyuancheng178"},"content":"     * Generates a report based on the calorie intake over current month.","lastModifiedDate":"2021-11-06"},{"lineNumber":193,"author":{"gitId":"siyuancheng178"},"content":"     * Report includes monthly average calorie intake and the most/least frequently eaten food.","lastModifiedDate":"2021-10-27"},{"lineNumber":194,"author":{"gitId":"siyuancheng178"},"content":"     *","lastModifiedDate":"2021-10-27"},{"lineNumber":195,"author":{"gitId":"siyuancheng178"},"content":"     * @return String a report of monthly calorie intake","lastModifiedDate":"2021-10-27"},{"lineNumber":196,"author":{"gitId":"siyuancheng178"},"content":"     */","lastModifiedDate":"2021-10-27"},{"lineNumber":197,"author":{"gitId":"siyuancheng178"},"content":"    public String generateMonthSummaryReport() {","lastModifiedDate":"2021-10-21"},{"lineNumber":198,"author":{"gitId":"siyuancheng178"},"content":"        if (entries.size() \u003c 1) {","lastModifiedDate":"2021-10-21"},{"lineNumber":199,"author":{"gitId":"siyuancheng178"},"content":"            return \"No entries found!\";","lastModifiedDate":"2021-10-21"},{"lineNumber":200,"author":{"gitId":"siyuancheng178"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":201,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":202,"author":{"gitId":"siyuancheng178"},"content":"        String output \u003d String.format(\"Average Daily Calorie Intake: %d\\n\"","lastModifiedDate":"2021-10-21"},{"lineNumber":203,"author":{"gitId":"siyuancheng178"},"content":"                        + getMostAndLeastEatenFood(),","lastModifiedDate":"2021-10-21"},{"lineNumber":204,"author":{"gitId":"siyuancheng178"},"content":"                getAverageCalories());","lastModifiedDate":"2021-10-21"},{"lineNumber":205,"author":{"gitId":"siyuancheng178"},"content":"        return output;","lastModifiedDate":"2021-10-21"},{"lineNumber":206,"author":{"gitId":"siyuancheng178"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":207,"author":{"gitId":"siyuancheng178"},"content":"}","lastModifiedDate":"2021-10-20"}],"authorContributionMap":{"siyuancheng178":207}},{"path":"src/main/java/fitnus/tracker/WeightRecord.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"aaapppsss"},"content":"package fitnus.tracker;","lastModifiedDate":"2021-10-20"},{"lineNumber":2,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":3,"author":{"gitId":"aaapppsss"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-10-20"},{"lineNumber":4,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":5,"author":{"gitId":"aaapppsss"},"content":"public class WeightRecord {","lastModifiedDate":"2021-11-06"},{"lineNumber":6,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":7,"author":{"gitId":"aaapppsss"},"content":"    private float weight;","lastModifiedDate":"2021-10-20"},{"lineNumber":8,"author":{"gitId":"aaapppsss"},"content":"    private LocalDate date;","lastModifiedDate":"2021-10-20"},{"lineNumber":9,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":10,"author":{"gitId":"aaapppsss"},"content":"    public WeightRecord(float weight, LocalDate date) {","lastModifiedDate":"2021-11-06"},{"lineNumber":11,"author":{"gitId":"aaapppsss"},"content":"        this.weight \u003d weight;","lastModifiedDate":"2021-10-20"},{"lineNumber":12,"author":{"gitId":"aaapppsss"},"content":"        this.date \u003d date;","lastModifiedDate":"2021-10-20"},{"lineNumber":13,"author":{"gitId":"aaapppsss"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":14,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":15,"author":{"gitId":"aaapppsss"},"content":"    public void setWeight(float weight) {","lastModifiedDate":"2021-10-20"},{"lineNumber":16,"author":{"gitId":"aaapppsss"},"content":"        this.weight \u003d weight;","lastModifiedDate":"2021-10-20"},{"lineNumber":17,"author":{"gitId":"aaapppsss"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":18,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":19,"author":{"gitId":"aaapppsss"},"content":"    public float getWeight() {","lastModifiedDate":"2021-10-20"},{"lineNumber":20,"author":{"gitId":"aaapppsss"},"content":"        return weight;","lastModifiedDate":"2021-10-20"},{"lineNumber":21,"author":{"gitId":"aaapppsss"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":22,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":23,"author":{"gitId":"aaapppsss"},"content":"    public void setDate(LocalDate date) {","lastModifiedDate":"2021-10-20"},{"lineNumber":24,"author":{"gitId":"aaapppsss"},"content":"        this.date \u003d date;","lastModifiedDate":"2021-10-20"},{"lineNumber":25,"author":{"gitId":"aaapppsss"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":26,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":27,"author":{"gitId":"aaapppsss"},"content":"    public LocalDate getDate() {","lastModifiedDate":"2021-10-20"},{"lineNumber":28,"author":{"gitId":"aaapppsss"},"content":"        return date;","lastModifiedDate":"2021-10-20"},{"lineNumber":29,"author":{"gitId":"aaapppsss"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":30,"author":{"gitId":"aaapppsss"},"content":"}","lastModifiedDate":"2021-10-20"}],"authorContributionMap":{"aaapppsss":30}},{"path":"src/main/java/fitnus/utility/Ui.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"praj-bellakka"},"content":"package fitnus.utility;","lastModifiedDate":"2021-10-12"},{"lineNumber":2,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":3,"author":{"gitId":"kengjit"},"content":"import fitnus.database.EntryDatabase;","lastModifiedDate":"2021-11-06"},{"lineNumber":4,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.database.FoodDatabase;","lastModifiedDate":"2021-11-01"},{"lineNumber":5,"author":{"gitId":"kengjit"},"content":"import fitnus.database.MealPlanDatabase;","lastModifiedDate":"2021-11-06"},{"lineNumber":6,"author":{"gitId":"brendanlsz"},"content":"import fitnus.tracker.Entry;","lastModifiedDate":"2021-10-19"},{"lineNumber":7,"author":{"gitId":"brendanlsz"},"content":"import fitnus.tracker.Food;","lastModifiedDate":"2021-10-19"},{"lineNumber":8,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":9,"author":{"gitId":"praj-bellakka"},"content":"import java.io.InputStream;","lastModifiedDate":"2021-11-06"},{"lineNumber":10,"author":{"gitId":"praj-bellakka"},"content":"import java.io.PrintStream;","lastModifiedDate":"2021-11-06"},{"lineNumber":11,"author":{"gitId":"brendanlsz"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-19"},{"lineNumber":12,"author":{"gitId":"siyuancheng178"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-10-09"},{"lineNumber":13,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":14,"author":{"gitId":"brendanlsz"},"content":"/**","lastModifiedDate":"2021-11-06"},{"lineNumber":15,"author":{"gitId":"brendanlsz"},"content":" * Handles interactions with the user.","lastModifiedDate":"2021-11-06"},{"lineNumber":16,"author":{"gitId":"brendanlsz"},"content":" */","lastModifiedDate":"2021-11-06"},{"lineNumber":17,"author":{"gitId":"aaapppsss"},"content":"public class Ui {","lastModifiedDate":"2021-10-03"},{"lineNumber":18,"author":{"gitId":"praj-bellakka"},"content":"    //private final Scanner sc \u003d new Scanner(System.in);","lastModifiedDate":"2021-11-06"},{"lineNumber":19,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":20,"author":{"gitId":"kengjit"},"content":"    public static final String DIVIDER \u003d \"------------------\\n\";","lastModifiedDate":"2021-11-04"},{"lineNumber":21,"author":{"gitId":"kengjit"},"content":"    public static final String INIT_GENDER \u003d \"[X] Please enter your gender (m/f):\";","lastModifiedDate":"2021-11-06"},{"lineNumber":22,"author":{"gitId":"kengjit"},"content":"    public static final String INIT_AGE \u003d \"[X] Please enter your age in years:\";","lastModifiedDate":"2021-11-06"},{"lineNumber":23,"author":{"gitId":"kengjit"},"content":"    public static final String INIT_HEIGHT \u003d \"[X] Please enter your height in cm:\";","lastModifiedDate":"2021-11-06"},{"lineNumber":24,"author":{"gitId":"kengjit"},"content":"    public static final String INIT_WEIGHT \u003d \"[X] Please enter your weight in kg:\";","lastModifiedDate":"2021-11-06"},{"lineNumber":25,"author":{"gitId":"kengjit"},"content":"    public static final String INIT_SUCCESS \u003d \"Generated your daily calorie needs accordingly.\";","lastModifiedDate":"2021-11-06"},{"lineNumber":26,"author":{"gitId":"kengjit"},"content":"    public static final String USER_INPUT \u003d \"You: \";","lastModifiedDate":"2021-11-04"},{"lineNumber":27,"author":{"gitId":"kengjit"},"content":"    public static final String WELCOME_MESSAGE \u003d DIVIDER","lastModifiedDate":"2021-11-04"},{"lineNumber":28,"author":{"gitId":"kengjit"},"content":"            + \"Welcome to FitNUS Tracker!\";","lastModifiedDate":"2021-10-06"},{"lineNumber":29,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":30,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-11-06"},{"lineNumber":31,"author":{"gitId":"brendanlsz"},"content":"     * Prints a welcome message.","lastModifiedDate":"2021-11-06"},{"lineNumber":32,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-11-06"},{"lineNumber":33,"author":{"gitId":"brendanlsz"},"content":"    public static void printWelcomeMessage() {","lastModifiedDate":"2021-10-10"},{"lineNumber":34,"author":{"gitId":"kengjit"},"content":"        println(WELCOME_MESSAGE);","lastModifiedDate":"2021-10-06"},{"lineNumber":35,"author":{"gitId":"aaapppsss"},"content":"    }","lastModifiedDate":"2021-10-03"},{"lineNumber":36,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":37,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-11-06"},{"lineNumber":38,"author":{"gitId":"brendanlsz"},"content":"     * Prints a message to the user with a new line.","lastModifiedDate":"2021-11-06"},{"lineNumber":39,"author":{"gitId":"brendanlsz"},"content":"     *","lastModifiedDate":"2021-11-06"},{"lineNumber":40,"author":{"gitId":"brendanlsz"},"content":"     * @param message The message to be printed.","lastModifiedDate":"2021-11-06"},{"lineNumber":41,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-11-06"},{"lineNumber":42,"author":{"gitId":"brendanlsz"},"content":"    public static void println(String message) {","lastModifiedDate":"2021-10-10"},{"lineNumber":43,"author":{"gitId":"aaapppsss"},"content":"        System.out.println(message);","lastModifiedDate":"2021-10-03"},{"lineNumber":44,"author":{"gitId":"aaapppsss"},"content":"    }","lastModifiedDate":"2021-10-03"},{"lineNumber":45,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":46,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-11-06"},{"lineNumber":47,"author":{"gitId":"brendanlsz"},"content":"     * Prints a message to the user.","lastModifiedDate":"2021-11-06"},{"lineNumber":48,"author":{"gitId":"brendanlsz"},"content":"     *","lastModifiedDate":"2021-11-06"},{"lineNumber":49,"author":{"gitId":"brendanlsz"},"content":"     * @param message The message to be printed.","lastModifiedDate":"2021-11-06"},{"lineNumber":50,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-11-06"},{"lineNumber":51,"author":{"gitId":"brendanlsz"},"content":"    public static void print(String message) {","lastModifiedDate":"2021-10-10"},{"lineNumber":52,"author":{"gitId":"aaapppsss"},"content":"        System.out.print(message);","lastModifiedDate":"2021-10-03"},{"lineNumber":53,"author":{"gitId":"aaapppsss"},"content":"    }","lastModifiedDate":"2021-10-03"},{"lineNumber":54,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":55,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-11-06"},{"lineNumber":56,"author":{"gitId":"brendanlsz"},"content":"     * Prints a message informing the user that there were some problems","lastModifiedDate":"2021-11-06"},{"lineNumber":57,"author":{"gitId":"brendanlsz"},"content":"     * when preloading the database data.","lastModifiedDate":"2021-11-06"},{"lineNumber":58,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-11-06"},{"lineNumber":59,"author":{"gitId":"brendanlsz"},"content":"    public static void printPreloadDatabaseError() {","lastModifiedDate":"2021-10-10"},{"lineNumber":60,"author":{"gitId":"brendanlsz"},"content":"        System.out.println(\"Error encountered while preloading database :(\"","lastModifiedDate":"2021-10-10"},{"lineNumber":61,"author":{"gitId":"brendanlsz"},"content":"                + \" some data may have been lost\");","lastModifiedDate":"2021-10-10"},{"lineNumber":62,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":63,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":64,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-11-06"},{"lineNumber":65,"author":{"gitId":"brendanlsz"},"content":"     * Prints a message informing the user that there were some problems","lastModifiedDate":"2021-11-06"},{"lineNumber":66,"author":{"gitId":"brendanlsz"},"content":"     * when preloading the user data.","lastModifiedDate":"2021-11-06"},{"lineNumber":67,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-11-06"},{"lineNumber":68,"author":{"gitId":"brendanlsz"},"content":"    public static void printPreloadUserError() {","lastModifiedDate":"2021-10-10"},{"lineNumber":69,"author":{"gitId":"brendanlsz"},"content":"        System.out.println(\"Error encountered while preloading user data :(\");","lastModifiedDate":"2021-10-10"},{"lineNumber":70,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":71,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":72,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":73,"author":{"gitId":"brendanlsz"},"content":"     * Prints a message informing the user that there were some problems","lastModifiedDate":"2021-11-07"},{"lineNumber":74,"author":{"gitId":"brendanlsz"},"content":"     * when preloading the weight data.","lastModifiedDate":"2021-11-07"},{"lineNumber":75,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":76,"author":{"gitId":"brendanlsz"},"content":"    public static void printPreloadWeightError() {","lastModifiedDate":"2021-11-07"},{"lineNumber":77,"author":{"gitId":"brendanlsz"},"content":"        System.out.println(\"Error encountered while preloading weight data :(\");","lastModifiedDate":"2021-11-07"},{"lineNumber":78,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-11-07"},{"lineNumber":79,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":80,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-11-06"},{"lineNumber":81,"author":{"gitId":"brendanlsz"},"content":"     * Reads the user\u0027s inputs.","lastModifiedDate":"2021-11-06"},{"lineNumber":82,"author":{"gitId":"brendanlsz"},"content":"     *","lastModifiedDate":"2021-11-06"},{"lineNumber":83,"author":{"gitId":"brendanlsz"},"content":"     * @return The user\u0027s inputs as a String.","lastModifiedDate":"2021-11-06"},{"lineNumber":84,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-11-06"},{"lineNumber":85,"author":{"gitId":"praj-bellakka"},"content":"    public String readInput(InputStream in, PrintStream out) {","lastModifiedDate":"2021-11-06"},{"lineNumber":86,"author":{"gitId":"praj-bellakka"},"content":"        Scanner sc \u003d new Scanner(in);","lastModifiedDate":"2021-11-06"},{"lineNumber":87,"author":{"gitId":"siyuancheng178"},"content":"        String userInput \u003d \"\";","lastModifiedDate":"2021-10-09"},{"lineNumber":88,"author":{"gitId":"siyuancheng178"},"content":"        do {","lastModifiedDate":"2021-10-09"},{"lineNumber":89,"author":{"gitId":"siyuancheng178"},"content":"            userInput \u003d sc.nextLine().toLowerCase().trim();","lastModifiedDate":"2021-10-31"},{"lineNumber":90,"author":{"gitId":"siyuancheng178"},"content":"            if (userInput.equals(\"\")) {","lastModifiedDate":"2021-10-09"},{"lineNumber":91,"author":{"gitId":"praj-bellakka"},"content":"                out.println(\"Input cannot be empty! Please try again\");","lastModifiedDate":"2021-11-06"},{"lineNumber":92,"author":{"gitId":"siyuancheng178"},"content":"            }","lastModifiedDate":"2021-10-09"},{"lineNumber":93,"author":{"gitId":"siyuancheng178"},"content":"        } while (userInput.equals(\"\"));","lastModifiedDate":"2021-10-09"},{"lineNumber":94,"author":{"gitId":"siyuancheng178"},"content":"        assert !userInput.trim().equals(\"\") : \"input cannot be empty\";","lastModifiedDate":"2021-10-12"},{"lineNumber":95,"author":{"gitId":"siyuancheng178"},"content":"        return userInput;","lastModifiedDate":"2021-10-09"},{"lineNumber":96,"author":{"gitId":"kengjit"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":97,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":98,"author":{"gitId":"praj-bellakka"},"content":"    public String[] readIndexesInput(InputStream in, PrintStream out) {","lastModifiedDate":"2021-11-06"},{"lineNumber":99,"author":{"gitId":"praj-bellakka"},"content":"        Scanner sc \u003d new Scanner(in);","lastModifiedDate":"2021-11-06"},{"lineNumber":100,"author":{"gitId":"praj-bellakka"},"content":"        String userInput \u003d \"\";","lastModifiedDate":"2021-10-24"},{"lineNumber":101,"author":{"gitId":"praj-bellakka"},"content":"        do {","lastModifiedDate":"2021-10-24"},{"lineNumber":102,"author":{"gitId":"praj-bellakka"},"content":"            userInput \u003d sc.nextLine().toLowerCase().trim();","lastModifiedDate":"2021-10-24"},{"lineNumber":103,"author":{"gitId":"praj-bellakka"},"content":"            if (userInput.equals(\"\")) {","lastModifiedDate":"2021-10-24"},{"lineNumber":104,"author":{"gitId":"praj-bellakka"},"content":"                out.println(\"Input cannot be empty! Please try again\");","lastModifiedDate":"2021-11-06"},{"lineNumber":105,"author":{"gitId":"praj-bellakka"},"content":"            }","lastModifiedDate":"2021-10-24"},{"lineNumber":106,"author":{"gitId":"praj-bellakka"},"content":"        } while (userInput.equals(\"\"));","lastModifiedDate":"2021-10-24"},{"lineNumber":107,"author":{"gitId":"praj-bellakka"},"content":"        assert !userInput.trim().equals(\"\") : \"input cannot be empty\";","lastModifiedDate":"2021-10-24"},{"lineNumber":108,"author":{"gitId":"praj-bellakka"},"content":"        return userInput.split(\" \");","lastModifiedDate":"2021-10-24"},{"lineNumber":109,"author":{"gitId":"praj-bellakka"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":110,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":111,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-11-06"},{"lineNumber":112,"author":{"gitId":"brendanlsz"},"content":"     * Prints information regarding MealPlan creation.","lastModifiedDate":"2021-11-06"},{"lineNumber":113,"author":{"gitId":"brendanlsz"},"content":"     *","lastModifiedDate":"2021-11-06"},{"lineNumber":114,"author":{"gitId":"brendanlsz"},"content":"     * @param fd FoodDatabase object.","lastModifiedDate":"2021-11-06"},{"lineNumber":115,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-11-06"},{"lineNumber":116,"author":{"gitId":"praj-bellakka"},"content":"    public static void printMealPlanCreation(FoodDatabase fd) {","lastModifiedDate":"2021-11-01"},{"lineNumber":117,"author":{"gitId":"praj-bellakka"},"content":"        System.out.println(\"We will now create a mealplan! To create a Meal plan, \"","lastModifiedDate":"2021-11-01"},{"lineNumber":118,"author":{"gitId":"praj-bellakka"},"content":"                + \"enter the indexes of the foods below with spaces in between each index.\");","lastModifiedDate":"2021-11-01"},{"lineNumber":119,"author":{"gitId":"praj-bellakka"},"content":"        System.out.println(\"For example: 1 2 8 4\");","lastModifiedDate":"2021-11-01"},{"lineNumber":120,"author":{"gitId":"praj-bellakka"},"content":"        System.out.println(\"Indexes that are not present/invalid will be ignored. \"","lastModifiedDate":"2021-11-01"},{"lineNumber":121,"author":{"gitId":"praj-bellakka"},"content":"                + \"Duplicates are allowed, but try to not eat so much food :)\");","lastModifiedDate":"2021-11-01"},{"lineNumber":122,"author":{"gitId":"praj-bellakka"},"content":"        System.out.println(\"Here is a list of all foods present in the database:\");","lastModifiedDate":"2021-11-01"},{"lineNumber":123,"author":{"gitId":"praj-bellakka"},"content":"        System.out.println(fd.listFoods());","lastModifiedDate":"2021-11-01"},{"lineNumber":124,"author":{"gitId":"praj-bellakka"},"content":"    }","lastModifiedDate":"2021-11-01"},{"lineNumber":125,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":126,"author":{"gitId":"praj-bellakka"},"content":"    public static void printAutoAddedFoodCategory(String mealType, boolean isAutoGenerated) {","lastModifiedDate":"2021-11-01"},{"lineNumber":127,"author":{"gitId":"praj-bellakka"},"content":"        if (isAutoGenerated) {","lastModifiedDate":"2021-11-01"},{"lineNumber":128,"author":{"gitId":"praj-bellakka"},"content":"            System.out.println(\"Food category not detected. Based on current timing, \"","lastModifiedDate":"2021-11-01"},{"lineNumber":129,"author":{"gitId":"praj-bellakka"},"content":"                    + \"the following category has been added: \" + mealType);","lastModifiedDate":"2021-11-01"},{"lineNumber":130,"author":{"gitId":"praj-bellakka"},"content":"        } else if (!isAutoGenerated) {","lastModifiedDate":"2021-11-01"},{"lineNumber":131,"author":{"gitId":"praj-bellakka"},"content":"            System.out.println(\"The following food category has been tagged: \" + mealType);","lastModifiedDate":"2021-11-01"},{"lineNumber":132,"author":{"gitId":"praj-bellakka"},"content":"        }","lastModifiedDate":"2021-11-01"},{"lineNumber":133,"author":{"gitId":"praj-bellakka"},"content":"    }","lastModifiedDate":"2021-11-01"},{"lineNumber":134,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":135,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-11-06"},{"lineNumber":136,"author":{"gitId":"brendanlsz"},"content":"     * Prints to the user the content of the matchingFoods ArrayList.","lastModifiedDate":"2021-11-06"},{"lineNumber":137,"author":{"gitId":"brendanlsz"},"content":"     *","lastModifiedDate":"2021-11-06"},{"lineNumber":138,"author":{"gitId":"brendanlsz"},"content":"     * @param matchingFoods The ArrayList containing matching Food objects.","lastModifiedDate":"2021-11-06"},{"lineNumber":139,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-11-06"},{"lineNumber":140,"author":{"gitId":"brendanlsz"},"content":"    public static void printMatchingFoods(ArrayList\u003cFood\u003e matchingFoods) {","lastModifiedDate":"2021-10-19"},{"lineNumber":141,"author":{"gitId":"brendanlsz"},"content":"        for (int i \u003d 1; i \u003c\u003d matchingFoods.size(); i++) {","lastModifiedDate":"2021-10-31"},{"lineNumber":142,"author":{"gitId":"brendanlsz"},"content":"            System.out.println(\" \" + i + \".\"","lastModifiedDate":"2021-10-19"},{"lineNumber":143,"author":{"gitId":"brendanlsz"},"content":"                    + matchingFoods.get(i - 1).toString());","lastModifiedDate":"2021-10-19"},{"lineNumber":144,"author":{"gitId":"brendanlsz"},"content":"        }","lastModifiedDate":"2021-10-19"},{"lineNumber":145,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":146,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":147,"author":{"gitId":"praj-bellakka"},"content":"    public static void printPromptUserFoodInput(String foodName) {","lastModifiedDate":"2021-11-04"},{"lineNumber":148,"author":{"gitId":"kengjit"},"content":"        System.out.println(\"Oops! \\\"\" + foodName + \"\\\" does not exist in the database!\");","lastModifiedDate":"2021-11-05"},{"lineNumber":149,"author":{"gitId":"kengjit"},"content":"        Ui.print(Ui.DIVIDER);","lastModifiedDate":"2021-11-05"},{"lineNumber":150,"author":{"gitId":"praj-bellakka"},"content":"    }","lastModifiedDate":"2021-11-04"},{"lineNumber":151,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":152,"author":{"gitId":"praj-bellakka"},"content":"    public static void printOutOfRangeInputInteger(int num) {","lastModifiedDate":"2021-11-04"},{"lineNumber":153,"author":{"gitId":"praj-bellakka"},"content":"        System.out.println(\"Input \" + num + \" was out of range. Ignoring Input\");","lastModifiedDate":"2021-11-04"},{"lineNumber":154,"author":{"gitId":"praj-bellakka"},"content":"    }","lastModifiedDate":"2021-11-04"},{"lineNumber":155,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":156,"author":{"gitId":"praj-bellakka"},"content":"    public static void printInvalidInputInteger(String input) {","lastModifiedDate":"2021-11-04"},{"lineNumber":157,"author":{"gitId":"praj-bellakka"},"content":"        System.out.println(\"Input \" + input + \" was not an integer. Ignoring input.\");","lastModifiedDate":"2021-11-04"},{"lineNumber":158,"author":{"gitId":"praj-bellakka"},"content":"    }","lastModifiedDate":"2021-11-04"},{"lineNumber":159,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":160,"author":{"gitId":"praj-bellakka"},"content":"    public static void printAddCalorieToFood(String foodName) {","lastModifiedDate":"2021-11-04"},{"lineNumber":161,"author":{"gitId":"praj-bellakka"},"content":"        System.out.println(\"Adding \\\"\" + foodName + \"\\\"...\");","lastModifiedDate":"2021-11-04"},{"lineNumber":162,"author":{"gitId":"praj-bellakka"},"content":"        System.out.println(\"[X] Enter calories of \\\"\" + foodName + \"\\\":\");","lastModifiedDate":"2021-11-04"},{"lineNumber":163,"author":{"gitId":"kengjit"},"content":"        Ui.print(Ui.USER_INPUT);","lastModifiedDate":"2021-11-05"},{"lineNumber":164,"author":{"gitId":"praj-bellakka"},"content":"    }","lastModifiedDate":"2021-11-04"},{"lineNumber":165,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":166,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-11-06"},{"lineNumber":167,"author":{"gitId":"brendanlsz"},"content":"     * Prints to the user the content of the matchingEntries ArrayList.","lastModifiedDate":"2021-11-06"},{"lineNumber":168,"author":{"gitId":"brendanlsz"},"content":"     *","lastModifiedDate":"2021-11-06"},{"lineNumber":169,"author":{"gitId":"brendanlsz"},"content":"     * @param matchingEntries ArrayList containing matching Entry objects.","lastModifiedDate":"2021-11-06"},{"lineNumber":170,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-11-06"},{"lineNumber":171,"author":{"gitId":"brendanlsz"},"content":"    public static void printMatchingEntries(ArrayList\u003cEntry\u003e matchingEntries) {","lastModifiedDate":"2021-10-19"},{"lineNumber":172,"author":{"gitId":"brendanlsz"},"content":"        if (matchingEntries.size() \u003d\u003d 0) {","lastModifiedDate":"2021-10-19"},{"lineNumber":173,"author":{"gitId":"brendanlsz"},"content":"            return;","lastModifiedDate":"2021-10-19"},{"lineNumber":174,"author":{"gitId":"brendanlsz"},"content":"        }","lastModifiedDate":"2021-10-19"},{"lineNumber":175,"author":{"gitId":"brendanlsz"},"content":"        System.out.println(\"Here are the matching entries in your database:\");","lastModifiedDate":"2021-10-19"},{"lineNumber":176,"author":{"gitId":"brendanlsz"},"content":"        for (int i \u003d 1; i \u003c\u003d matchingEntries.size(); i++) {","lastModifiedDate":"2021-10-19"},{"lineNumber":177,"author":{"gitId":"brendanlsz"},"content":"            System.out.println(\" \" + i + \".\"","lastModifiedDate":"2021-10-19"},{"lineNumber":178,"author":{"gitId":"brendanlsz"},"content":"                    + matchingEntries.get(i - 1).toString());","lastModifiedDate":"2021-10-19"},{"lineNumber":179,"author":{"gitId":"brendanlsz"},"content":"        }","lastModifiedDate":"2021-10-19"},{"lineNumber":180,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":181,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":182,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-11-06"},{"lineNumber":183,"author":{"gitId":"brendanlsz"},"content":"     * Prints the calorie goal.","lastModifiedDate":"2021-11-06"},{"lineNumber":184,"author":{"gitId":"brendanlsz"},"content":"     *","lastModifiedDate":"2021-11-06"},{"lineNumber":185,"author":{"gitId":"brendanlsz"},"content":"     * @param calorieGoal The calorie goal value.","lastModifiedDate":"2021-11-06"},{"lineNumber":186,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-11-06"},{"lineNumber":187,"author":{"gitId":"kengjit"},"content":"    public static void printCalorieGoal(int calorieGoal) {","lastModifiedDate":"2021-11-06"},{"lineNumber":188,"author":{"gitId":"kengjit"},"content":"        println(\"Your daily calorie goal is \" + calorieGoal + \"kcal.\");","lastModifiedDate":"2021-11-06"},{"lineNumber":189,"author":{"gitId":"kengjit"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":190,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":191,"author":{"gitId":"brendanlsz"},"content":"    /**","lastModifiedDate":"2021-11-06"},{"lineNumber":192,"author":{"gitId":"brendanlsz"},"content":"     * Prints to the user the information about the preloaded data.","lastModifiedDate":"2021-11-06"},{"lineNumber":193,"author":{"gitId":"brendanlsz"},"content":"     *","lastModifiedDate":"2021-11-06"},{"lineNumber":194,"author":{"gitId":"brendanlsz"},"content":"     * @param fd   FoodDatabase object.","lastModifiedDate":"2021-11-06"},{"lineNumber":195,"author":{"gitId":"brendanlsz"},"content":"     * @param ed   EntryDatabase object.","lastModifiedDate":"2021-11-06"},{"lineNumber":196,"author":{"gitId":"brendanlsz"},"content":"     * @param md   MealPlanDatabase object.","lastModifiedDate":"2021-11-06"},{"lineNumber":197,"author":{"gitId":"brendanlsz"},"content":"     * @param user User object.","lastModifiedDate":"2021-11-06"},{"lineNumber":198,"author":{"gitId":"brendanlsz"},"content":"     */","lastModifiedDate":"2021-11-06"},{"lineNumber":199,"author":{"gitId":"kengjit"},"content":"    public static void printPreloadedData(FoodDatabase fd, EntryDatabase ed, MealPlanDatabase md, User user) {","lastModifiedDate":"2021-11-06"},{"lineNumber":200,"author":{"gitId":"kengjit"},"content":"        Ui.println(\"Food database:\" + System.lineSeparator()","lastModifiedDate":"2021-11-06"},{"lineNumber":201,"author":{"gitId":"kengjit"},"content":"                + fd.listFoods());","lastModifiedDate":"2021-11-06"},{"lineNumber":202,"author":{"gitId":"kengjit"},"content":"        Ui.println(\"Entry database:\" + System.lineSeparator()","lastModifiedDate":"2021-11-06"},{"lineNumber":203,"author":{"gitId":"kengjit"},"content":"                + ed.listEntries());","lastModifiedDate":"2021-11-06"},{"lineNumber":204,"author":{"gitId":"brendanlsz"},"content":"        Ui.println(\"MealPlan database:\" + System.lineSeparator()","lastModifiedDate":"2021-11-06"},{"lineNumber":205,"author":{"gitId":"brendanlsz"},"content":"                + md.listMealPlan());","lastModifiedDate":"2021-11-06"},{"lineNumber":206,"author":{"gitId":"kengjit"},"content":"        Ui.println(\"User data:\" + System.lineSeparator()","lastModifiedDate":"2021-11-06"},{"lineNumber":207,"author":{"gitId":"kengjit"},"content":"                + user.getUserDataDisplay());","lastModifiedDate":"2021-11-06"},{"lineNumber":208,"author":{"gitId":"kengjit"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":209,"author":{"gitId":"aaapppsss"},"content":"}","lastModifiedDate":"2021-10-03"}],"authorContributionMap":{"kengjit":30,"brendanlsz":102,"siyuancheng178":10,"aaapppsss":11,"praj-bellakka":56}},{"path":"src/main/java/fitnus/utility/User.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"praj-bellakka"},"content":"package fitnus.utility;","lastModifiedDate":"2021-10-12"},{"lineNumber":2,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":3,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.database.EntryDatabase;","lastModifiedDate":"2021-10-12"},{"lineNumber":4,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.exception.FitNusException;","lastModifiedDate":"2021-10-12"},{"lineNumber":5,"author":{"gitId":"siyuancheng178"},"content":"import fitnus.tracker.Gender;","lastModifiedDate":"2021-10-23"},{"lineNumber":6,"author":{"gitId":"aaapppsss"},"content":"import fitnus.tracker.WeightRecord;","lastModifiedDate":"2021-11-06"},{"lineNumber":7,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":8,"author":{"gitId":"brendanlsz"},"content":"import java.io.BufferedReader;","lastModifiedDate":"2021-10-10"},{"lineNumber":9,"author":{"gitId":"brendanlsz"},"content":"import java.io.IOException;","lastModifiedDate":"2021-10-10"},{"lineNumber":10,"author":{"gitId":"aaapppsss"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-10-20"},{"lineNumber":11,"author":{"gitId":"aaapppsss"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-20"},{"lineNumber":12,"author":{"gitId":"aaapppsss"},"content":"import java.util.logging.Level;","lastModifiedDate":"2021-10-27"},{"lineNumber":13,"author":{"gitId":"aaapppsss"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-10-27"},{"lineNumber":14,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":15,"author":{"gitId":"aaapppsss"},"content":"public class User {","lastModifiedDate":"2021-10-03"},{"lineNumber":16,"author":{"gitId":"aaapppsss"},"content":"    private static final Logger logger \u003d Logger.getLogger(User.class.getName());","lastModifiedDate":"2021-10-27"},{"lineNumber":17,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":18,"author":{"gitId":"siyuancheng178"},"content":"    private int calorieGoal;","lastModifiedDate":"2021-10-06"},{"lineNumber":19,"author":{"gitId":"siyuancheng178"},"content":"    private Gender gender;","lastModifiedDate":"2021-10-23"},{"lineNumber":20,"author":{"gitId":"aaapppsss"},"content":"    private int age;","lastModifiedDate":"2021-10-20"},{"lineNumber":21,"author":{"gitId":"aaapppsss"},"content":"    private int height;","lastModifiedDate":"2021-10-20"},{"lineNumber":22,"author":{"gitId":"aaapppsss"},"content":"    private float weight;","lastModifiedDate":"2021-10-20"},{"lineNumber":23,"author":{"gitId":"aaapppsss"},"content":"    private final ArrayList\u003cWeightRecord\u003e weightRecords \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-11-06"},{"lineNumber":24,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":25,"author":{"gitId":"aaapppsss"},"content":"    //constants","lastModifiedDate":"2021-11-01"},{"lineNumber":26,"author":{"gitId":"aaapppsss"},"content":"    private static final String DELIMITER \u003d \" | \";","lastModifiedDate":"2021-10-23"},{"lineNumber":27,"author":{"gitId":"aaapppsss"},"content":"    private static final String GAIN_STRING \u003d \"gain\";","lastModifiedDate":"2021-10-23"},{"lineNumber":28,"author":{"gitId":"aaapppsss"},"content":"    private static final String LOSE_STRING \u003d \"lose\";","lastModifiedDate":"2021-10-23"},{"lineNumber":29,"author":{"gitId":"aaapppsss"},"content":"    private static final float MINIMUM_WEEKLY_CHANGE \u003d (float) 0.01;","lastModifiedDate":"2021-11-04"},{"lineNumber":30,"author":{"gitId":"aaapppsss"},"content":"    private static final float MAXIMUM_WEEKLY_CHANGE \u003d (float) 1.0;","lastModifiedDate":"2021-10-27"},{"lineNumber":31,"author":{"gitId":"aaapppsss"},"content":"    private static final int ALL_MONTHS \u003d 0;","lastModifiedDate":"2021-10-28"},{"lineNumber":32,"author":{"gitId":"aaapppsss"},"content":"    private static final String[] monthStrings \u003d {\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",","lastModifiedDate":"2021-10-28"},{"lineNumber":33,"author":{"gitId":"siyuancheng178"},"content":"        \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"};","lastModifiedDate":"2021-10-31"},{"lineNumber":34,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":35,"author":{"gitId":"aaapppsss"},"content":"    public User(int calorieGoal, Gender gender, int age, int height, float weight) {","lastModifiedDate":"2021-10-25"},{"lineNumber":36,"author":{"gitId":"siyuancheng178"},"content":"        this.calorieGoal \u003d calorieGoal;","lastModifiedDate":"2021-10-06"},{"lineNumber":37,"author":{"gitId":"siyuancheng178"},"content":"        this.gender \u003d gender;","lastModifiedDate":"2021-10-23"},{"lineNumber":38,"author":{"gitId":"aaapppsss"},"content":"        this.age \u003d age;","lastModifiedDate":"2021-10-25"},{"lineNumber":39,"author":{"gitId":"aaapppsss"},"content":"        this.height \u003d height;","lastModifiedDate":"2021-10-25"},{"lineNumber":40,"author":{"gitId":"aaapppsss"},"content":"        this.weight \u003d weight;","lastModifiedDate":"2021-10-25"},{"lineNumber":41,"author":{"gitId":"siyuancheng178"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":42,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":43,"author":{"gitId":"aaapppsss"},"content":"    public int getCalorieGoal() {","lastModifiedDate":"2021-10-09"},{"lineNumber":44,"author":{"gitId":"aaapppsss"},"content":"        return calorieGoal;","lastModifiedDate":"2021-10-09"},{"lineNumber":45,"author":{"gitId":"aaapppsss"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":46,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":47,"author":{"gitId":"aaapppsss"},"content":"    /**","lastModifiedDate":"2021-11-01"},{"lineNumber":48,"author":{"gitId":"aaapppsss"},"content":"     * Sets the user\u0027s calorie goal.","lastModifiedDate":"2021-11-01"},{"lineNumber":49,"author":{"gitId":"aaapppsss"},"content":"     *","lastModifiedDate":"2021-11-01"},{"lineNumber":50,"author":{"gitId":"aaapppsss"},"content":"     * @param newGoal New calorie goal to be set.","lastModifiedDate":"2021-11-01"},{"lineNumber":51,"author":{"gitId":"aaapppsss"},"content":"     * @throws FitNusException when the calorie goal is out of the healthy range for the user.","lastModifiedDate":"2021-11-04"},{"lineNumber":52,"author":{"gitId":"aaapppsss"},"content":"     */","lastModifiedDate":"2021-11-01"},{"lineNumber":53,"author":{"gitId":"kengjit"},"content":"    public void setCalorieGoal(int newGoal) throws FitNusException {","lastModifiedDate":"2021-10-08"},{"lineNumber":54,"author":{"gitId":"aaapppsss"},"content":"        int minimumCalorieGoal \u003d calculateCalorieGoal(1, \"lose\");","lastModifiedDate":"2021-11-04"},{"lineNumber":55,"author":{"gitId":"aaapppsss"},"content":"        int maximumCalorieGoal \u003d calculateCalorieGoal(1, \"gain\");","lastModifiedDate":"2021-11-04"},{"lineNumber":56,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":57,"author":{"gitId":"aaapppsss"},"content":"        if (newGoal \u003c minimumCalorieGoal) {","lastModifiedDate":"2021-11-04"},{"lineNumber":58,"author":{"gitId":"aaapppsss"},"content":"            throw new FitNusException(\"Your calorie goal cannot be lower than \" + minimumCalorieGoal","lastModifiedDate":"2021-11-04"},{"lineNumber":59,"author":{"gitId":"aaapppsss"},"content":"                    + \" kcal as this would exceed the recommended healthy amount\\n\"","lastModifiedDate":"2021-11-04"},{"lineNumber":60,"author":{"gitId":"aaapppsss"},"content":"                    + \"of weight loss for your body type!\\n\"","lastModifiedDate":"2021-11-04"},{"lineNumber":61,"author":{"gitId":"aaapppsss"},"content":"                    + \"Please try again.\");","lastModifiedDate":"2021-11-04"},{"lineNumber":62,"author":{"gitId":"aaapppsss"},"content":"        } else if (newGoal \u003e maximumCalorieGoal) {","lastModifiedDate":"2021-11-04"},{"lineNumber":63,"author":{"gitId":"aaapppsss"},"content":"            throw new FitNusException(\"Your calorie goal cannot be higher than \" + maximumCalorieGoal","lastModifiedDate":"2021-11-04"},{"lineNumber":64,"author":{"gitId":"aaapppsss"},"content":"                    + \" kcal as this would exceed the recommended healthy amount\\n\"","lastModifiedDate":"2021-11-04"},{"lineNumber":65,"author":{"gitId":"aaapppsss"},"content":"                    + \"of weight gain for your body type!\\n\"","lastModifiedDate":"2021-11-04"},{"lineNumber":66,"author":{"gitId":"aaapppsss"},"content":"                    + \"Please try again.\");","lastModifiedDate":"2021-11-04"},{"lineNumber":67,"author":{"gitId":"kengjit"},"content":"        }","lastModifiedDate":"2021-10-08"},{"lineNumber":68,"author":{"gitId":"siyuancheng178"},"content":"        assert newGoal \u003e\u003d 0 : \"calorie goal cannot be negative\";","lastModifiedDate":"2021-10-12"},{"lineNumber":69,"author":{"gitId":"aaapppsss"},"content":"        this.calorieGoal \u003d newGoal;","lastModifiedDate":"2021-10-06"},{"lineNumber":70,"author":{"gitId":"aaapppsss"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":71,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":72,"author":{"gitId":"siyuancheng178"},"content":"    public Gender getGender() {","lastModifiedDate":"2021-10-23"},{"lineNumber":73,"author":{"gitId":"siyuancheng178"},"content":"        assert gender.equals(Gender.FEMALE) || gender.equals(Gender.MALE) : \"invalid gender setting\";","lastModifiedDate":"2021-10-23"},{"lineNumber":74,"author":{"gitId":"aaapppsss"},"content":"        return gender;","lastModifiedDate":"2021-10-09"},{"lineNumber":75,"author":{"gitId":"aaapppsss"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":76,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":77,"author":{"gitId":"siyuancheng178"},"content":"    public void setGender(Gender gender) {","lastModifiedDate":"2021-10-23"},{"lineNumber":78,"author":{"gitId":"aaapppsss"},"content":"        this.gender \u003d gender;","lastModifiedDate":"2021-10-08"},{"lineNumber":79,"author":{"gitId":"aaapppsss"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":80,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":81,"author":{"gitId":"aaapppsss"},"content":"    public float getWeight() {","lastModifiedDate":"2021-10-20"},{"lineNumber":82,"author":{"gitId":"aaapppsss"},"content":"        return weight;","lastModifiedDate":"2021-10-20"},{"lineNumber":83,"author":{"gitId":"aaapppsss"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":84,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":85,"author":{"gitId":"aaapppsss"},"content":"    public void setWeight(float weight) {","lastModifiedDate":"2021-10-20"},{"lineNumber":86,"author":{"gitId":"aaapppsss"},"content":"        this.weight \u003d weight;","lastModifiedDate":"2021-10-20"},{"lineNumber":87,"author":{"gitId":"aaapppsss"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":88,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":89,"author":{"gitId":"aaapppsss"},"content":"    public int getHeight() {","lastModifiedDate":"2021-10-21"},{"lineNumber":90,"author":{"gitId":"aaapppsss"},"content":"        return height;","lastModifiedDate":"2021-10-21"},{"lineNumber":91,"author":{"gitId":"aaapppsss"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":92,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":93,"author":{"gitId":"aaapppsss"},"content":"    public void setHeight(int height) {","lastModifiedDate":"2021-10-21"},{"lineNumber":94,"author":{"gitId":"aaapppsss"},"content":"        this.height \u003d height;","lastModifiedDate":"2021-10-21"},{"lineNumber":95,"author":{"gitId":"aaapppsss"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":96,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":97,"author":{"gitId":"aaapppsss"},"content":"    public int getAge() {","lastModifiedDate":"2021-10-21"},{"lineNumber":98,"author":{"gitId":"aaapppsss"},"content":"        return age;","lastModifiedDate":"2021-10-21"},{"lineNumber":99,"author":{"gitId":"aaapppsss"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":100,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":101,"author":{"gitId":"aaapppsss"},"content":"    public void setAge(int age) {","lastModifiedDate":"2021-10-21"},{"lineNumber":102,"author":{"gitId":"aaapppsss"},"content":"        this.age \u003d age;","lastModifiedDate":"2021-10-21"},{"lineNumber":103,"author":{"gitId":"aaapppsss"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":104,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":105,"author":{"gitId":"aaapppsss"},"content":"    public ArrayList\u003cWeightRecord\u003e getWeightRecords() {","lastModifiedDate":"2021-11-06"},{"lineNumber":106,"author":{"gitId":"aaapppsss"},"content":"        return weightRecords;","lastModifiedDate":"2021-11-06"},{"lineNumber":107,"author":{"gitId":"aaapppsss"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":108,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":109,"author":{"gitId":"aaapppsss"},"content":"    public void addToWeightRecords(WeightRecord weightRecord) {","lastModifiedDate":"2021-11-06"},{"lineNumber":110,"author":{"gitId":"aaapppsss"},"content":"        weightRecords.add(weightRecord);","lastModifiedDate":"2021-11-06"},{"lineNumber":111,"author":{"gitId":"aaapppsss"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":112,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":113,"author":{"gitId":"aaapppsss"},"content":"    /**","lastModifiedDate":"2021-10-27"},{"lineNumber":114,"author":{"gitId":"aaapppsss"},"content":"     * Sets the user\u0027s weight to the new weight and updates the daily weight tracker accordingly.","lastModifiedDate":"2021-10-27"},{"lineNumber":115,"author":{"gitId":"aaapppsss"},"content":"     *","lastModifiedDate":"2021-10-27"},{"lineNumber":116,"author":{"gitId":"aaapppsss"},"content":"     * @param newWeight New weight to be set.","lastModifiedDate":"2021-10-27"},{"lineNumber":117,"author":{"gitId":"aaapppsss"},"content":"     * @return The outcome message.","lastModifiedDate":"2021-10-27"},{"lineNumber":118,"author":{"gitId":"aaapppsss"},"content":"     */","lastModifiedDate":"2021-10-27"},{"lineNumber":119,"author":{"gitId":"aaapppsss"},"content":"    public String updateWeightAndWeightTracker(float newWeight) {","lastModifiedDate":"2021-10-27"},{"lineNumber":120,"author":{"gitId":"aaapppsss"},"content":"        assert newWeight \u003e 0 : \"newWeight should be greater than 0\";","lastModifiedDate":"2021-11-01"},{"lineNumber":121,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":122,"author":{"gitId":"aaapppsss"},"content":"        this.setWeight(newWeight);","lastModifiedDate":"2021-10-20"},{"lineNumber":123,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":124,"author":{"gitId":"aaapppsss"},"content":"        LocalDate currDate \u003d LocalDate.now();","lastModifiedDate":"2021-10-20"},{"lineNumber":125,"author":{"gitId":"aaapppsss"},"content":"        if (weightRecords.size() \u003d\u003d 0) {","lastModifiedDate":"2021-11-06"},{"lineNumber":126,"author":{"gitId":"aaapppsss"},"content":"            weightRecords.add(new WeightRecord(newWeight, currDate));","lastModifiedDate":"2021-11-06"},{"lineNumber":127,"author":{"gitId":"aaapppsss"},"content":"            return \"You have updated your weight for today to \" + newWeight + \" kg!\";","lastModifiedDate":"2021-11-01"},{"lineNumber":128,"author":{"gitId":"aaapppsss"},"content":"        }","lastModifiedDate":"2021-11-01"},{"lineNumber":129,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":130,"author":{"gitId":"aaapppsss"},"content":"        updateWeightTrackerIfHavePreviousRecords(newWeight, currDate);","lastModifiedDate":"2021-11-06"},{"lineNumber":131,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":132,"author":{"gitId":"aaapppsss"},"content":"        if (weightRecords.size() \u003e\u003d 2) { //If weight tracker has more than 2 records after updating","lastModifiedDate":"2021-11-06"},{"lineNumber":133,"author":{"gitId":"aaapppsss"},"content":"            WeightRecord previousRecord \u003d weightRecords.get(weightRecords.size() - 2);","lastModifiedDate":"2021-11-06"},{"lineNumber":134,"author":{"gitId":"aaapppsss"},"content":"            float weightDifference \u003d getWeightDifference(newWeight, previousRecord);","lastModifiedDate":"2021-11-06"},{"lineNumber":135,"author":{"gitId":"aaapppsss"},"content":"            String changeType \u003d getChangeType(weightDifference);","lastModifiedDate":"2021-11-01"},{"lineNumber":136,"author":{"gitId":"aaapppsss"},"content":"            weightDifference \u003d Math.abs(weightDifference);","lastModifiedDate":"2021-11-01"},{"lineNumber":137,"author":{"gitId":"aaapppsss"},"content":"            assert weightDifference \u003e\u003d 0 : \"weightDifference should not be negative\";","lastModifiedDate":"2021-11-01"},{"lineNumber":138,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":139,"author":{"gitId":"aaapppsss"},"content":"            return \"You have updated your weight for today to \" + newWeight","lastModifiedDate":"2021-11-01"},{"lineNumber":140,"author":{"gitId":"aaapppsss"},"content":"                    + \" kg!\\nYou have \" + changeType + \" \" + weightDifference","lastModifiedDate":"2021-11-04"},{"lineNumber":141,"author":{"gitId":"aaapppsss"},"content":"                    + \" kg from the previous weight entry of \"","lastModifiedDate":"2021-11-01"},{"lineNumber":142,"author":{"gitId":"aaapppsss"},"content":"                    + previousRecord.getWeight() + \" kg on \" + previousRecord.getDate().toString();","lastModifiedDate":"2021-11-06"},{"lineNumber":143,"author":{"gitId":"aaapppsss"},"content":"        } else {","lastModifiedDate":"2021-11-01"},{"lineNumber":144,"author":{"gitId":"aaapppsss"},"content":"            return \"You have updated your weight for today to \" + newWeight + \" kg!\";","lastModifiedDate":"2021-10-20"},{"lineNumber":145,"author":{"gitId":"aaapppsss"},"content":"        }","lastModifiedDate":"2021-10-20"},{"lineNumber":146,"author":{"gitId":"aaapppsss"},"content":"    }","lastModifiedDate":"2021-11-01"},{"lineNumber":147,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":148,"author":{"gitId":"aaapppsss"},"content":"    /**","lastModifiedDate":"2021-11-01"},{"lineNumber":149,"author":{"gitId":"aaapppsss"},"content":"     * Updates the daily weight tracker for the case where the weight tracker","lastModifiedDate":"2021-11-01"},{"lineNumber":150,"author":{"gitId":"aaapppsss"},"content":"     * has existing records.","lastModifiedDate":"2021-11-06"},{"lineNumber":151,"author":{"gitId":"aaapppsss"},"content":"     *","lastModifiedDate":"2021-11-01"},{"lineNumber":152,"author":{"gitId":"aaapppsss"},"content":"     * @param newWeight New weight to be set.","lastModifiedDate":"2021-11-01"},{"lineNumber":153,"author":{"gitId":"aaapppsss"},"content":"     * @param currDate  The current date.","lastModifiedDate":"2021-11-01"},{"lineNumber":154,"author":{"gitId":"aaapppsss"},"content":"     */","lastModifiedDate":"2021-11-01"},{"lineNumber":155,"author":{"gitId":"aaapppsss"},"content":"    private void updateWeightTrackerIfHavePreviousRecords(float newWeight, LocalDate currDate) {","lastModifiedDate":"2021-11-06"},{"lineNumber":156,"author":{"gitId":"aaapppsss"},"content":"        WeightRecord latestRecord \u003d weightRecords.get(weightRecords.size() - 1);","lastModifiedDate":"2021-11-06"},{"lineNumber":157,"author":{"gitId":"aaapppsss"},"content":"        if (latestRecord.getDate().toString().equals(currDate.toString())) { //Update today\u0027s weight record","lastModifiedDate":"2021-11-06"},{"lineNumber":158,"author":{"gitId":"aaapppsss"},"content":"            latestRecord.setWeight(newWeight);","lastModifiedDate":"2021-11-06"},{"lineNumber":159,"author":{"gitId":"aaapppsss"},"content":"            weightRecords.set(weightRecords.size() - 1, latestRecord);","lastModifiedDate":"2021-11-06"},{"lineNumber":160,"author":{"gitId":"aaapppsss"},"content":"        } else {","lastModifiedDate":"2021-10-20"},{"lineNumber":161,"author":{"gitId":"aaapppsss"},"content":"            weightRecords.add(new WeightRecord(newWeight, currDate));","lastModifiedDate":"2021-11-06"},{"lineNumber":162,"author":{"gitId":"aaapppsss"},"content":"        }","lastModifiedDate":"2021-11-01"},{"lineNumber":163,"author":{"gitId":"aaapppsss"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":164,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":165,"author":{"gitId":"aaapppsss"},"content":"    /**","lastModifiedDate":"2021-11-01"},{"lineNumber":166,"author":{"gitId":"aaapppsss"},"content":"     * Gets the difference in weight between the new weight and the previous record in the weight tracker.","lastModifiedDate":"2021-11-06"},{"lineNumber":167,"author":{"gitId":"aaapppsss"},"content":"     * The difference is positive if the user lost weight and negative if the user gained weight.","lastModifiedDate":"2021-11-01"},{"lineNumber":168,"author":{"gitId":"aaapppsss"},"content":"     *","lastModifiedDate":"2021-11-01"},{"lineNumber":169,"author":{"gitId":"aaapppsss"},"content":"     * @param newWeight New weight to be set.","lastModifiedDate":"2021-11-01"},{"lineNumber":170,"author":{"gitId":"aaapppsss"},"content":"     * @return The weight difference.","lastModifiedDate":"2021-11-01"},{"lineNumber":171,"author":{"gitId":"aaapppsss"},"content":"     */","lastModifiedDate":"2021-11-01"},{"lineNumber":172,"author":{"gitId":"aaapppsss"},"content":"    private float getWeightDifference(float newWeight, WeightRecord previousRecord) {","lastModifiedDate":"2021-11-06"},{"lineNumber":173,"author":{"gitId":"aaapppsss"},"content":"        float weightDifference \u003d previousRecord.getWeight() - newWeight;","lastModifiedDate":"2021-11-06"},{"lineNumber":174,"author":{"gitId":"aaapppsss"},"content":"        weightDifference \u003d (float) (Math.round(weightDifference * 10.0) / 10.0);","lastModifiedDate":"2021-10-23"},{"lineNumber":175,"author":{"gitId":"aaapppsss"},"content":"        return weightDifference;","lastModifiedDate":"2021-11-01"},{"lineNumber":176,"author":{"gitId":"aaapppsss"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":177,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":178,"author":{"gitId":"aaapppsss"},"content":"    /**","lastModifiedDate":"2021-11-01"},{"lineNumber":179,"author":{"gitId":"aaapppsss"},"content":"     * Gets the correct weight change type string depending on whether weight was gained or lost.","lastModifiedDate":"2021-11-01"},{"lineNumber":180,"author":{"gitId":"aaapppsss"},"content":"     *","lastModifiedDate":"2021-11-01"},{"lineNumber":181,"author":{"gitId":"aaapppsss"},"content":"     * @param weightDifference The difference in weight.","lastModifiedDate":"2021-11-01"},{"lineNumber":182,"author":{"gitId":"aaapppsss"},"content":"     * @return The change type string.","lastModifiedDate":"2021-11-01"},{"lineNumber":183,"author":{"gitId":"aaapppsss"},"content":"     */","lastModifiedDate":"2021-11-01"},{"lineNumber":184,"author":{"gitId":"aaapppsss"},"content":"    private String getChangeType(float weightDifference) {","lastModifiedDate":"2021-11-06"},{"lineNumber":185,"author":{"gitId":"aaapppsss"},"content":"        return weightDifference \u003c 0 ? \"gained\" : \"lost\";","lastModifiedDate":"2021-11-01"},{"lineNumber":186,"author":{"gitId":"aaapppsss"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":187,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":188,"author":{"gitId":"aaapppsss"},"content":"    /**","lastModifiedDate":"2021-10-27"},{"lineNumber":189,"author":{"gitId":"aaapppsss"},"content":"     * Converts the weightRecords ArrayList into a String of the list of weight records.","lastModifiedDate":"2021-11-06"},{"lineNumber":190,"author":{"gitId":"aaapppsss"},"content":"     *","lastModifiedDate":"2021-10-27"},{"lineNumber":191,"author":{"gitId":"aaapppsss"},"content":"     * @return The list of weight records.","lastModifiedDate":"2021-10-27"},{"lineNumber":192,"author":{"gitId":"aaapppsss"},"content":"     * @throws FitNusException if weightRecords is empty.","lastModifiedDate":"2021-11-06"},{"lineNumber":193,"author":{"gitId":"aaapppsss"},"content":"     */","lastModifiedDate":"2021-10-27"},{"lineNumber":194,"author":{"gitId":"aaapppsss"},"content":"    public String convertWeightRecordsToStringForUi(ArrayList\u003cWeightRecord\u003e relevantRecords)","lastModifiedDate":"2021-11-06"},{"lineNumber":195,"author":{"gitId":"aaapppsss"},"content":"            throws FitNusException {","lastModifiedDate":"2021-10-28"},{"lineNumber":196,"author":{"gitId":"aaapppsss"},"content":"        StringBuilder lines \u003d new StringBuilder();","lastModifiedDate":"2021-10-23"},{"lineNumber":197,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":198,"author":{"gitId":"aaapppsss"},"content":"        if (relevantRecords.size() \u003d\u003d 0) {","lastModifiedDate":"2021-11-06"},{"lineNumber":199,"author":{"gitId":"aaapppsss"},"content":"            throw new FitNusException(\"An error has occurred! No weight records found.\");","lastModifiedDate":"2021-10-26"},{"lineNumber":200,"author":{"gitId":"aaapppsss"},"content":"        }","lastModifiedDate":"2021-10-26"},{"lineNumber":201,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":202,"author":{"gitId":"aaapppsss"},"content":"        boolean isFirstRecord \u003d true;","lastModifiedDate":"2021-11-06"},{"lineNumber":203,"author":{"gitId":"aaapppsss"},"content":"        for (WeightRecord e : relevantRecords) {","lastModifiedDate":"2021-11-06"},{"lineNumber":204,"author":{"gitId":"aaapppsss"},"content":"            assert e !\u003d null : \"e should not be null\";","lastModifiedDate":"2021-10-23"},{"lineNumber":205,"author":{"gitId":"aaapppsss"},"content":"            float weight \u003d e.getWeight();","lastModifiedDate":"2021-10-23"},{"lineNumber":206,"author":{"gitId":"aaapppsss"},"content":"            String date \u003d e.getDate().toString();","lastModifiedDate":"2021-10-23"},{"lineNumber":207,"author":{"gitId":"aaapppsss"},"content":"            if (isFirstRecord) {","lastModifiedDate":"2021-11-06"},{"lineNumber":208,"author":{"gitId":"aaapppsss"},"content":"                lines.append(date).append(\": \").append(weight).append(\"kg\");","lastModifiedDate":"2021-11-06"},{"lineNumber":209,"author":{"gitId":"aaapppsss"},"content":"                isFirstRecord \u003d false;","lastModifiedDate":"2021-11-06"},{"lineNumber":210,"author":{"gitId":"aaapppsss"},"content":"            } else {","lastModifiedDate":"2021-11-06"},{"lineNumber":211,"author":{"gitId":"aaapppsss"},"content":"                lines.append(System.lineSeparator()).append(date).append(\": \").append(weight).append(\"kg\");","lastModifiedDate":"2021-11-06"},{"lineNumber":212,"author":{"gitId":"aaapppsss"},"content":"            }","lastModifiedDate":"2021-11-06"},{"lineNumber":213,"author":{"gitId":"aaapppsss"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":214,"author":{"gitId":"aaapppsss"},"content":"        return lines.toString();","lastModifiedDate":"2021-10-23"},{"lineNumber":215,"author":{"gitId":"aaapppsss"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":216,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":217,"author":{"gitId":"aaapppsss"},"content":"    /**","lastModifiedDate":"2021-10-27"},{"lineNumber":218,"author":{"gitId":"aaapppsss"},"content":"     * Creates a String that displays the weight tracker for the UI.","lastModifiedDate":"2021-10-27"},{"lineNumber":219,"author":{"gitId":"aaapppsss"},"content":"     *","lastModifiedDate":"2021-10-27"},{"lineNumber":220,"author":{"gitId":"aaapppsss"},"content":"     * @return The weight tracker display.","lastModifiedDate":"2021-10-27"},{"lineNumber":221,"author":{"gitId":"aaapppsss"},"content":"     * @throws FitNusException if weightRecords is empty.","lastModifiedDate":"2021-11-06"},{"lineNumber":222,"author":{"gitId":"aaapppsss"},"content":"     */","lastModifiedDate":"2021-10-27"},{"lineNumber":223,"author":{"gitId":"aaapppsss"},"content":"    public String getWeightTrackerDisplay(int month) throws FitNusException {","lastModifiedDate":"2021-11-06"},{"lineNumber":224,"author":{"gitId":"aaapppsss"},"content":"        ArrayList\u003cWeightRecord\u003e relevantRecords \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-11-06"},{"lineNumber":225,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":226,"author":{"gitId":"aaapppsss"},"content":"        relevantRecords \u003d getRelevantWeightRecords(month);","lastModifiedDate":"2021-11-06"},{"lineNumber":227,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":228,"author":{"gitId":"aaapppsss"},"content":"        if (relevantRecords.size() \u003d\u003d 0) {","lastModifiedDate":"2021-11-06"},{"lineNumber":229,"author":{"gitId":"aaapppsss"},"content":"            if (month \u003d\u003d ALL_MONTHS) {","lastModifiedDate":"2021-10-28"},{"lineNumber":230,"author":{"gitId":"aaapppsss"},"content":"                return \"You have not recorded your weight before! \"","lastModifiedDate":"2021-10-26"},{"lineNumber":231,"author":{"gitId":"aaapppsss"},"content":"                        + \"Try recording your weight today using the weight /set command.\";","lastModifiedDate":"2021-10-26"},{"lineNumber":232,"author":{"gitId":"aaapppsss"},"content":"            } else {","lastModifiedDate":"2021-10-26"},{"lineNumber":233,"author":{"gitId":"aaapppsss"},"content":"                return \"You did not record your weight in the month of \" + monthStrings[month - 1] + \"!\";","lastModifiedDate":"2021-10-28"},{"lineNumber":234,"author":{"gitId":"aaapppsss"},"content":"            }","lastModifiedDate":"2021-10-28"},{"lineNumber":235,"author":{"gitId":"aaapppsss"},"content":"        } else if (relevantRecords.size() \u003d\u003d 1) {","lastModifiedDate":"2021-11-06"},{"lineNumber":236,"author":{"gitId":"aaapppsss"},"content":"            if (month \u003d\u003d ALL_MONTHS) {","lastModifiedDate":"2021-10-28"},{"lineNumber":237,"author":{"gitId":"aaapppsss"},"content":"                return \"Your weight progress since the start of your FitNUS journey: \\n\"","lastModifiedDate":"2021-10-28"},{"lineNumber":238,"author":{"gitId":"aaapppsss"},"content":"                        + convertWeightRecordsToStringForUi(relevantRecords);","lastModifiedDate":"2021-11-06"},{"lineNumber":239,"author":{"gitId":"aaapppsss"},"content":"            } else {","lastModifiedDate":"2021-10-28"},{"lineNumber":240,"author":{"gitId":"aaapppsss"},"content":"                return \"Your weight progress in \" + monthStrings[month - 1] + \": \\n\"","lastModifiedDate":"2021-10-28"},{"lineNumber":241,"author":{"gitId":"aaapppsss"},"content":"                        + convertWeightRecordsToStringForUi(relevantRecords);","lastModifiedDate":"2021-11-06"},{"lineNumber":242,"author":{"gitId":"aaapppsss"},"content":"            }","lastModifiedDate":"2021-10-28"},{"lineNumber":243,"author":{"gitId":"aaapppsss"},"content":"        } else {","lastModifiedDate":"2021-10-28"},{"lineNumber":244,"author":{"gitId":"aaapppsss"},"content":"            WeightRecord previousRecord \u003d relevantRecords.get(0);","lastModifiedDate":"2021-11-06"},{"lineNumber":245,"author":{"gitId":"aaapppsss"},"content":"            float currentWeight \u003d relevantRecords.get(relevantRecords.size() - 1).getWeight();","lastModifiedDate":"2021-11-06"},{"lineNumber":246,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":247,"author":{"gitId":"aaapppsss"},"content":"            float weightDifference \u003d getWeightDifference(currentWeight, previousRecord);","lastModifiedDate":"2021-11-06"},{"lineNumber":248,"author":{"gitId":"aaapppsss"},"content":"            String changeType \u003d getChangeType(weightDifference);","lastModifiedDate":"2021-11-01"},{"lineNumber":249,"author":{"gitId":"aaapppsss"},"content":"            weightDifference \u003d Math.abs(weightDifference);","lastModifiedDate":"2021-11-01"},{"lineNumber":250,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":251,"author":{"gitId":"aaapppsss"},"content":"            if (month \u003d\u003d ALL_MONTHS) {","lastModifiedDate":"2021-10-28"},{"lineNumber":252,"author":{"gitId":"aaapppsss"},"content":"                return \"Your weight progress since the start of your FitNUS journey: \\n\"","lastModifiedDate":"2021-10-28"},{"lineNumber":253,"author":{"gitId":"aaapppsss"},"content":"                        + convertWeightRecordsToStringForUi(relevantRecords)","lastModifiedDate":"2021-11-06"},{"lineNumber":254,"author":{"gitId":"aaapppsss"},"content":"                        + \"\\n\"","lastModifiedDate":"2021-10-26"},{"lineNumber":255,"author":{"gitId":"aaapppsss"},"content":"                        + \"You have \" + changeType + \" \" + weightDifference","lastModifiedDate":"2021-11-01"},{"lineNumber":256,"author":{"gitId":"aaapppsss"},"content":"                        + \" kg since the start of your FitNUS Journey!\";","lastModifiedDate":"2021-10-28"},{"lineNumber":257,"author":{"gitId":"aaapppsss"},"content":"            } else {","lastModifiedDate":"2021-10-28"},{"lineNumber":258,"author":{"gitId":"aaapppsss"},"content":"                return \"Your weight progress in \" + monthStrings[month - 1] + \": \\n\"","lastModifiedDate":"2021-10-28"},{"lineNumber":259,"author":{"gitId":"aaapppsss"},"content":"                        + convertWeightRecordsToStringForUi(relevantRecords)","lastModifiedDate":"2021-11-06"},{"lineNumber":260,"author":{"gitId":"aaapppsss"},"content":"                        + \"\\n\"","lastModifiedDate":"2021-10-26"},{"lineNumber":261,"author":{"gitId":"aaapppsss"},"content":"                        + \"You have \" + changeType + \" \" + weightDifference + \" kg during the month of \"","lastModifiedDate":"2021-11-01"},{"lineNumber":262,"author":{"gitId":"aaapppsss"},"content":"                        + monthStrings[month - 1] + \"!\";","lastModifiedDate":"2021-10-28"},{"lineNumber":263,"author":{"gitId":"aaapppsss"},"content":"            }","lastModifiedDate":"2021-10-28"},{"lineNumber":264,"author":{"gitId":"aaapppsss"},"content":"        }","lastModifiedDate":"2021-10-26"},{"lineNumber":265,"author":{"gitId":"aaapppsss"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":266,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":267,"author":{"gitId":"aaapppsss"},"content":"    /**","lastModifiedDate":"2021-11-01"},{"lineNumber":268,"author":{"gitId":"aaapppsss"},"content":"     * Gets the relevant weight records according to timeframe.","lastModifiedDate":"2021-11-06"},{"lineNumber":269,"author":{"gitId":"aaapppsss"},"content":"     *","lastModifiedDate":"2021-11-01"},{"lineNumber":270,"author":{"gitId":"aaapppsss"},"content":"     * @param month The integer representation of the month or 0 to represent \"all time\".","lastModifiedDate":"2021-11-01"},{"lineNumber":271,"author":{"gitId":"aaapppsss"},"content":"     * @return The relevant weight records.","lastModifiedDate":"2021-11-06"},{"lineNumber":272,"author":{"gitId":"aaapppsss"},"content":"     */","lastModifiedDate":"2021-11-01"},{"lineNumber":273,"author":{"gitId":"aaapppsss"},"content":"    private ArrayList\u003cWeightRecord\u003e getRelevantWeightRecords(int month) {","lastModifiedDate":"2021-11-06"},{"lineNumber":274,"author":{"gitId":"aaapppsss"},"content":"        ArrayList\u003cWeightRecord\u003e relevantRecords \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-11-06"},{"lineNumber":275,"author":{"gitId":"aaapppsss"},"content":"        if (month \u003d\u003d ALL_MONTHS) {","lastModifiedDate":"2021-11-01"},{"lineNumber":276,"author":{"gitId":"aaapppsss"},"content":"            relevantRecords \u003d weightRecords;","lastModifiedDate":"2021-11-06"},{"lineNumber":277,"author":{"gitId":"aaapppsss"},"content":"        } else {","lastModifiedDate":"2021-11-01"},{"lineNumber":278,"author":{"gitId":"aaapppsss"},"content":"            int currYear \u003d LocalDate.now().getYear();","lastModifiedDate":"2021-11-06"},{"lineNumber":279,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":280,"author":{"gitId":"aaapppsss"},"content":"            for (WeightRecord e : weightRecords) {","lastModifiedDate":"2021-11-06"},{"lineNumber":281,"author":{"gitId":"aaapppsss"},"content":"                LocalDate date \u003d e.getDate();","lastModifiedDate":"2021-11-06"},{"lineNumber":282,"author":{"gitId":"aaapppsss"},"content":"                if (date.getMonthValue() \u003d\u003d month \u0026\u0026 date.getYear() \u003d\u003d currYear) {","lastModifiedDate":"2021-11-06"},{"lineNumber":283,"author":{"gitId":"aaapppsss"},"content":"                    relevantRecords.add(e);","lastModifiedDate":"2021-11-06"},{"lineNumber":284,"author":{"gitId":"aaapppsss"},"content":"                }","lastModifiedDate":"2021-11-01"},{"lineNumber":285,"author":{"gitId":"aaapppsss"},"content":"            }","lastModifiedDate":"2021-11-01"},{"lineNumber":286,"author":{"gitId":"aaapppsss"},"content":"        }","lastModifiedDate":"2021-11-01"},{"lineNumber":287,"author":{"gitId":"aaapppsss"},"content":"        return relevantRecords;","lastModifiedDate":"2021-11-06"},{"lineNumber":288,"author":{"gitId":"aaapppsss"},"content":"    }","lastModifiedDate":"2021-11-01"},{"lineNumber":289,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":290,"author":{"gitId":"aaapppsss"},"content":"    /**","lastModifiedDate":"2021-10-27"},{"lineNumber":291,"author":{"gitId":"aaapppsss"},"content":"     * Gets the number of calories remaining for the day according to the calorie goal.","lastModifiedDate":"2021-10-27"},{"lineNumber":292,"author":{"gitId":"aaapppsss"},"content":"     *","lastModifiedDate":"2021-10-27"},{"lineNumber":293,"author":{"gitId":"aaapppsss"},"content":"     * @param entryDB The entry database linked to this user.","lastModifiedDate":"2021-10-27"},{"lineNumber":294,"author":{"gitId":"aaapppsss"},"content":"     * @return Number of calories remaining for the day.","lastModifiedDate":"2021-10-27"},{"lineNumber":295,"author":{"gitId":"aaapppsss"},"content":"     */","lastModifiedDate":"2021-10-27"},{"lineNumber":296,"author":{"gitId":"aaapppsss"},"content":"    public int getCaloriesRemaining(EntryDatabase entryDB) {","lastModifiedDate":"2021-10-26"},{"lineNumber":297,"author":{"gitId":"aaapppsss"},"content":"        int caloriesConsumed \u003d entryDB.getTotalDailyCalorie();","lastModifiedDate":"2021-10-21"},{"lineNumber":298,"author":{"gitId":"siyuancheng178"},"content":"        return this.calorieGoal - caloriesConsumed;","lastModifiedDate":"2021-10-07"},{"lineNumber":299,"author":{"gitId":"aaapppsss"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":300,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":301,"author":{"gitId":"aaapppsss"},"content":"    /**","lastModifiedDate":"2021-10-27"},{"lineNumber":302,"author":{"gitId":"aaapppsss"},"content":"     * Handles the generate calorie goal command.","lastModifiedDate":"2021-11-04"},{"lineNumber":303,"author":{"gitId":"aaapppsss"},"content":"     * It generates a calorie goal according to the user\u0027s height,","lastModifiedDate":"2021-11-04"},{"lineNumber":304,"author":{"gitId":"aaapppsss"},"content":"     * weight, gender and age, as well as the desired weekly change","lastModifiedDate":"2021-10-27"},{"lineNumber":305,"author":{"gitId":"aaapppsss"},"content":"     * in weight and type of change (gain or lose).","lastModifiedDate":"2021-10-27"},{"lineNumber":306,"author":{"gitId":"aaapppsss"},"content":"     *","lastModifiedDate":"2021-10-27"},{"lineNumber":307,"author":{"gitId":"aaapppsss"},"content":"     * @param weeklyChange The desired weekly change in weight in kg.","lastModifiedDate":"2021-10-27"},{"lineNumber":308,"author":{"gitId":"aaapppsss"},"content":"     * @param changeType   The desired change type (gain or lose)","lastModifiedDate":"2021-10-27"},{"lineNumber":309,"author":{"gitId":"aaapppsss"},"content":"     * @return Generated calorie goal","lastModifiedDate":"2021-10-27"},{"lineNumber":310,"author":{"gitId":"aaapppsss"},"content":"     * @throws FitNusException if the provided changeType does not match","lastModifiedDate":"2021-10-27"},{"lineNumber":311,"author":{"gitId":"aaapppsss"},"content":"     *                         GAIN_STRING or LOSE_STRING or if the weekly change is greater than","lastModifiedDate":"2021-10-27"},{"lineNumber":312,"author":{"gitId":"aaapppsss"},"content":"     *                         MAXIMUM_WEEKLY_CHANGE or is a negative value","lastModifiedDate":"2021-10-27"},{"lineNumber":313,"author":{"gitId":"aaapppsss"},"content":"     */","lastModifiedDate":"2021-10-27"},{"lineNumber":314,"author":{"gitId":"aaapppsss"},"content":"    public int handleGenerateCalorieGoalCommand(float weeklyChange, String changeType) throws FitNusException {","lastModifiedDate":"2021-11-04"},{"lineNumber":315,"author":{"gitId":"aaapppsss"},"content":"        if (!(changeType \u003d\u003d GAIN_STRING || changeType \u003d\u003d LOSE_STRING)) {","lastModifiedDate":"2021-10-26"},{"lineNumber":316,"author":{"gitId":"aaapppsss"},"content":"            throw new FitNusException(\"An error has occurred! The change type is invalid.\");","lastModifiedDate":"2021-10-26"},{"lineNumber":317,"author":{"gitId":"aaapppsss"},"content":"        }","lastModifiedDate":"2021-10-26"},{"lineNumber":318,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":319,"author":{"gitId":"aaapppsss"},"content":"        if (weeklyChange \u003c 0) {","lastModifiedDate":"2021-10-26"},{"lineNumber":320,"author":{"gitId":"aaapppsss"},"content":"            throw new FitNusException(\"Please enter a positive value for the weekly change!\");","lastModifiedDate":"2021-10-26"},{"lineNumber":321,"author":{"gitId":"aaapppsss"},"content":"        } else if (weeklyChange \u003e MAXIMUM_WEEKLY_CHANGE) {","lastModifiedDate":"2021-11-04"},{"lineNumber":322,"author":{"gitId":"aaapppsss"},"content":"            throw new FitNusException(\"In order to lose or gain weight in a safe and healthy way,\\n\"","lastModifiedDate":"2021-10-26"},{"lineNumber":323,"author":{"gitId":"aaapppsss"},"content":"                    + \"FitNUS recommends a weekly change in weight of not more than\\n\"","lastModifiedDate":"2021-10-26"},{"lineNumber":324,"author":{"gitId":"aaapppsss"},"content":"                    + MAXIMUM_WEEKLY_CHANGE + \" kg. Please try again with a lower weekly goal!\");","lastModifiedDate":"2021-11-04"},{"lineNumber":325,"author":{"gitId":"aaapppsss"},"content":"        } else if (weeklyChange \u003c MINIMUM_WEEKLY_CHANGE) {","lastModifiedDate":"2021-11-04"},{"lineNumber":326,"author":{"gitId":"aaapppsss"},"content":"            System.out.println(\"ALERT: If you would like to lose or gain weight,\\n\"","lastModifiedDate":"2021-11-04"},{"lineNumber":327,"author":{"gitId":"aaapppsss"},"content":"                    + \"please enter a weekly change of \"","lastModifiedDate":"2021-11-04"},{"lineNumber":328,"author":{"gitId":"aaapppsss"},"content":"                    + MINIMUM_WEEKLY_CHANGE + \" kg or more!\\n\"","lastModifiedDate":"2021-11-04"},{"lineNumber":329,"author":{"gitId":"aaapppsss"},"content":"                    + \"The new goal that has been generated will allow you to maintain your current weight.\");","lastModifiedDate":"2021-11-04"},{"lineNumber":330,"author":{"gitId":"aaapppsss"},"content":"        }","lastModifiedDate":"2021-10-26"},{"lineNumber":331,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":332,"author":{"gitId":"aaapppsss"},"content":"        int newGoal \u003d calculateCalorieGoal(weeklyChange, changeType);","lastModifiedDate":"2021-11-04"},{"lineNumber":333,"author":{"gitId":"aaapppsss"},"content":"        return newGoal;","lastModifiedDate":"2021-11-04"},{"lineNumber":334,"author":{"gitId":"aaapppsss"},"content":"    }","lastModifiedDate":"2021-11-04"},{"lineNumber":335,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":336,"author":{"gitId":"aaapppsss"},"content":"    /**","lastModifiedDate":"2021-11-04"},{"lineNumber":337,"author":{"gitId":"aaapppsss"},"content":"     * Calculate a calorie goal according to the user\u0027s height,","lastModifiedDate":"2021-11-04"},{"lineNumber":338,"author":{"gitId":"aaapppsss"},"content":"     * weight, gender and age, as well as the desired weekly change","lastModifiedDate":"2021-11-04"},{"lineNumber":339,"author":{"gitId":"aaapppsss"},"content":"     * in weight and type of change (gain or lose).","lastModifiedDate":"2021-11-04"},{"lineNumber":340,"author":{"gitId":"aaapppsss"},"content":"     *","lastModifiedDate":"2021-11-04"},{"lineNumber":341,"author":{"gitId":"aaapppsss"},"content":"     * @param weeklyChange The desired weekly change in weight in kg.","lastModifiedDate":"2021-11-04"},{"lineNumber":342,"author":{"gitId":"aaapppsss"},"content":"     * @param changeType   The desired change type (gain or lose)","lastModifiedDate":"2021-11-04"},{"lineNumber":343,"author":{"gitId":"aaapppsss"},"content":"     * @return The calculated calorie goal.","lastModifiedDate":"2021-11-04"},{"lineNumber":344,"author":{"gitId":"aaapppsss"},"content":"     */","lastModifiedDate":"2021-11-04"},{"lineNumber":345,"author":{"gitId":"aaapppsss"},"content":"    public int calculateCalorieGoal(float weeklyChange, String changeType) {","lastModifiedDate":"2021-11-04"},{"lineNumber":346,"author":{"gitId":"aaapppsss"},"content":"        int calDeficitFor1KgWeekly \u003d 1000;","lastModifiedDate":"2021-10-23"},{"lineNumber":347,"author":{"gitId":"aaapppsss"},"content":"        int bmr \u003d calculateBasalMetabolicRate(); //basal metabolic rate i.e. calories needed to maintain weight","lastModifiedDate":"2021-11-01"},{"lineNumber":348,"author":{"gitId":"aaapppsss"},"content":"        int calDiff \u003d Math.round(weeklyChange * calDeficitFor1KgWeekly);","lastModifiedDate":"2021-10-23"},{"lineNumber":349,"author":{"gitId":"aaapppsss"},"content":"        int newGoal \u003d 0;","lastModifiedDate":"2021-10-23"},{"lineNumber":350,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":351,"author":{"gitId":"aaapppsss"},"content":"        if (changeType \u003d\u003d GAIN_STRING) {","lastModifiedDate":"2021-11-01"},{"lineNumber":352,"author":{"gitId":"aaapppsss"},"content":"            newGoal \u003d bmr + calDiff;","lastModifiedDate":"2021-11-01"},{"lineNumber":353,"author":{"gitId":"aaapppsss"},"content":"        } else if (changeType \u003d\u003d LOSE_STRING) {","lastModifiedDate":"2021-11-01"},{"lineNumber":354,"author":{"gitId":"aaapppsss"},"content":"            newGoal \u003d bmr - calDiff;","lastModifiedDate":"2021-11-01"},{"lineNumber":355,"author":{"gitId":"aaapppsss"},"content":"        }","lastModifiedDate":"2021-11-01"},{"lineNumber":356,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":357,"author":{"gitId":"aaapppsss"},"content":"        return newGoal;","lastModifiedDate":"2021-11-01"},{"lineNumber":358,"author":{"gitId":"aaapppsss"},"content":"    }","lastModifiedDate":"2021-11-01"},{"lineNumber":359,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":360,"author":{"gitId":"aaapppsss"},"content":"    /**","lastModifiedDate":"2021-11-01"},{"lineNumber":361,"author":{"gitId":"aaapppsss"},"content":"     * Calculate the basal metabolic rate (BMR)","lastModifiedDate":"2021-11-01"},{"lineNumber":362,"author":{"gitId":"aaapppsss"},"content":"     * according to the Harris-Benedict Equation.","lastModifiedDate":"2021-11-01"},{"lineNumber":363,"author":{"gitId":"aaapppsss"},"content":"     *","lastModifiedDate":"2021-11-01"},{"lineNumber":364,"author":{"gitId":"aaapppsss"},"content":"     * @return The calculated BMR.","lastModifiedDate":"2021-11-01"},{"lineNumber":365,"author":{"gitId":"aaapppsss"},"content":"     */","lastModifiedDate":"2021-11-01"},{"lineNumber":366,"author":{"gitId":"aaapppsss"},"content":"    private int calculateBasalMetabolicRate() {","lastModifiedDate":"2021-11-06"},{"lineNumber":367,"author":{"gitId":"aaapppsss"},"content":"        int bmr;","lastModifiedDate":"2021-11-01"},{"lineNumber":368,"author":{"gitId":"aaapppsss"},"content":"        if (this.gender \u003d\u003d Gender.MALE) {","lastModifiedDate":"2021-10-23"},{"lineNumber":369,"author":{"gitId":"aaapppsss"},"content":"            bmr \u003d (int) Math.round(((655.1 + (9.563 * this.weight)","lastModifiedDate":"2021-10-23"},{"lineNumber":370,"author":{"gitId":"aaapppsss"},"content":"                    + (1.850 * this.height)","lastModifiedDate":"2021-10-23"},{"lineNumber":371,"author":{"gitId":"aaapppsss"},"content":"                    - (4.676 * this.age)) * 1.55));","lastModifiedDate":"2021-10-23"},{"lineNumber":372,"author":{"gitId":"aaapppsss"},"content":"        } else {","lastModifiedDate":"2021-10-23"},{"lineNumber":373,"author":{"gitId":"aaapppsss"},"content":"            bmr \u003d (int) Math.round(((66.47 + (13.75 * this.weight)","lastModifiedDate":"2021-10-23"},{"lineNumber":374,"author":{"gitId":"aaapppsss"},"content":"                    + (5.003 * this.height)","lastModifiedDate":"2021-10-23"},{"lineNumber":375,"author":{"gitId":"aaapppsss"},"content":"                    - (6.755 * this.age)) * 1.55));","lastModifiedDate":"2021-10-26"},{"lineNumber":376,"author":{"gitId":"aaapppsss"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":377,"author":{"gitId":"aaapppsss"},"content":"        return bmr;","lastModifiedDate":"2021-11-01"},{"lineNumber":378,"author":{"gitId":"aaapppsss"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":379,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":380,"author":{"gitId":"aaapppsss"},"content":"    /**","lastModifiedDate":"2021-10-27"},{"lineNumber":381,"author":{"gitId":"aaapppsss"},"content":"     * Loads the user data from the storage file to the User object.","lastModifiedDate":"2021-10-27"},{"lineNumber":382,"author":{"gitId":"aaapppsss"},"content":"     *","lastModifiedDate":"2021-10-27"},{"lineNumber":383,"author":{"gitId":"aaapppsss"},"content":"     * @param reader BufferedReader reading the user data storage file.","lastModifiedDate":"2021-10-27"},{"lineNumber":384,"author":{"gitId":"aaapppsss"},"content":"     * @return Integer representing if the user data was preloaded successfully","lastModifiedDate":"2021-10-27"},{"lineNumber":385,"author":{"gitId":"aaapppsss"},"content":"     * @throws IOException if any I/O operations failed or were interrupted.","lastModifiedDate":"2021-10-27"},{"lineNumber":386,"author":{"gitId":"aaapppsss"},"content":"     */","lastModifiedDate":"2021-10-27"},{"lineNumber":387,"author":{"gitId":"aaapppsss"},"content":"    public int preloadUserData(BufferedReader reader) throws IOException {","lastModifiedDate":"2021-10-23"},{"lineNumber":388,"author":{"gitId":"brendanlsz"},"content":"        String line;","lastModifiedDate":"2021-10-10"},{"lineNumber":389,"author":{"gitId":"aaapppsss"},"content":"        boolean successfullyPreloadedData \u003d false;","lastModifiedDate":"2021-10-23"},{"lineNumber":390,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":391,"author":{"gitId":"aaapppsss"},"content":"        if ((line \u003d reader.readLine()) !\u003d null) { //user data file not empty","lastModifiedDate":"2021-10-23"},{"lineNumber":392,"author":{"gitId":"brendanlsz"},"content":"            String[] description \u003d line.trim().split(\"\\\\s*[|]\\\\s*\");","lastModifiedDate":"2021-10-10"},{"lineNumber":393,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":394,"author":{"gitId":"brendanlsz"},"content":"            try {","lastModifiedDate":"2021-10-10"},{"lineNumber":395,"author":{"gitId":"brendanlsz"},"content":"                this.calorieGoal \u003d Integer.parseInt(description[0]);","lastModifiedDate":"2021-10-10"},{"lineNumber":396,"author":{"gitId":"aaapppsss"},"content":"                this.gender \u003d Gender.findGender(description[1]);","lastModifiedDate":"2021-10-23"},{"lineNumber":397,"author":{"gitId":"aaapppsss"},"content":"                this.age \u003d Integer.parseInt(description[2]);","lastModifiedDate":"2021-10-23"},{"lineNumber":398,"author":{"gitId":"aaapppsss"},"content":"                this.height \u003d Integer.parseInt(description[3]);","lastModifiedDate":"2021-10-23"},{"lineNumber":399,"author":{"gitId":"aaapppsss"},"content":"                this.weight \u003d Float.parseFloat(description[4]);","lastModifiedDate":"2021-10-23"},{"lineNumber":400,"author":{"gitId":"brendanlsz"},"content":"                System.out.println(\"Preloaded user data successfully\");","lastModifiedDate":"2021-11-07"},{"lineNumber":401,"author":{"gitId":"aaapppsss"},"content":"                successfullyPreloadedData \u003d true;","lastModifiedDate":"2021-10-23"},{"lineNumber":402,"author":{"gitId":"brendanlsz"},"content":"            } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2021-10-10"},{"lineNumber":403,"author":{"gitId":"aaapppsss"},"content":"                successfullyPreloadedData \u003d false;","lastModifiedDate":"2021-10-23"},{"lineNumber":404,"author":{"gitId":"aaapppsss"},"content":"                logger.log(Level.WARNING, \"Error processing user data (missing inputs)\");","lastModifiedDate":"2021-10-27"},{"lineNumber":405,"author":{"gitId":"brendanlsz"},"content":"                Ui.printPreloadUserError();","lastModifiedDate":"2021-11-07"},{"lineNumber":406,"author":{"gitId":"brendanlsz"},"content":"            } catch (NumberFormatException e) {","lastModifiedDate":"2021-10-10"},{"lineNumber":407,"author":{"gitId":"aaapppsss"},"content":"                successfullyPreloadedData \u003d false;","lastModifiedDate":"2021-10-23"},{"lineNumber":408,"author":{"gitId":"aaapppsss"},"content":"                logger.log(Level.WARNING, \"Error processing user data (invalid inputs for numerical fields)\");","lastModifiedDate":"2021-10-27"},{"lineNumber":409,"author":{"gitId":"brendanlsz"},"content":"                Ui.printPreloadUserError();","lastModifiedDate":"2021-10-10"},{"lineNumber":410,"author":{"gitId":"brendanlsz"},"content":"            }","lastModifiedDate":"2021-10-10"},{"lineNumber":411,"author":{"gitId":"brendanlsz"},"content":"        }","lastModifiedDate":"2021-10-10"},{"lineNumber":412,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":413,"author":{"gitId":"aaapppsss"},"content":"        if (successfullyPreloadedData \u003d\u003d false) {","lastModifiedDate":"2021-10-23"},{"lineNumber":414,"author":{"gitId":"aaapppsss"},"content":"            return 0; //failure","lastModifiedDate":"2021-10-23"},{"lineNumber":415,"author":{"gitId":"aaapppsss"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":416,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":417,"author":{"gitId":"aaapppsss"},"content":"        return 1; //success","lastModifiedDate":"2021-10-23"},{"lineNumber":418,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":419,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":420,"author":{"gitId":"aaapppsss"},"content":"    /**","lastModifiedDate":"2021-10-27"},{"lineNumber":421,"author":{"gitId":"aaapppsss"},"content":"     * Loads the weight tracker data from the storage file to the User object.","lastModifiedDate":"2021-10-27"},{"lineNumber":422,"author":{"gitId":"aaapppsss"},"content":"     *","lastModifiedDate":"2021-10-27"},{"lineNumber":423,"author":{"gitId":"aaapppsss"},"content":"     * @param reader BufferedReader reading the user data storage file.","lastModifiedDate":"2021-10-27"},{"lineNumber":424,"author":{"gitId":"aaapppsss"},"content":"     * @throws IOException if any I/O operations failed or were interrupted.","lastModifiedDate":"2021-10-27"},{"lineNumber":425,"author":{"gitId":"aaapppsss"},"content":"     */","lastModifiedDate":"2021-10-27"},{"lineNumber":426,"author":{"gitId":"aaapppsss"},"content":"    public void preloadWeightData(BufferedReader reader) throws IOException {","lastModifiedDate":"2021-10-20"},{"lineNumber":427,"author":{"gitId":"aaapppsss"},"content":"        String line;","lastModifiedDate":"2021-10-20"},{"lineNumber":428,"author":{"gitId":"aaapppsss"},"content":"        while ((line \u003d reader.readLine()) !\u003d null) {","lastModifiedDate":"2021-10-20"},{"lineNumber":429,"author":{"gitId":"aaapppsss"},"content":"            String[] description \u003d line.trim().split(\"\\\\s*[|]\\\\s*\");","lastModifiedDate":"2021-10-20"},{"lineNumber":430,"author":{"gitId":"aaapppsss"},"content":"            try {","lastModifiedDate":"2021-10-20"},{"lineNumber":431,"author":{"gitId":"aaapppsss"},"content":"                float weight \u003d Float.parseFloat(description[0]);","lastModifiedDate":"2021-10-20"},{"lineNumber":432,"author":{"gitId":"aaapppsss"},"content":"                LocalDate date \u003d LocalDate.parse(description[1]);","lastModifiedDate":"2021-10-20"},{"lineNumber":433,"author":{"gitId":"aaapppsss"},"content":"                weightRecords.add(new WeightRecord(weight, date));","lastModifiedDate":"2021-11-06"},{"lineNumber":434,"author":{"gitId":"aaapppsss"},"content":"            } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2021-10-20"},{"lineNumber":435,"author":{"gitId":"aaapppsss"},"content":"                logger.log(Level.WARNING, \"Error processing weight data (missing inputs)\");","lastModifiedDate":"2021-10-27"},{"lineNumber":436,"author":{"gitId":"brendanlsz"},"content":"                Ui.printPreloadWeightError();","lastModifiedDate":"2021-11-07"},{"lineNumber":437,"author":{"gitId":"aaapppsss"},"content":"            } catch (NumberFormatException e) {","lastModifiedDate":"2021-10-20"},{"lineNumber":438,"author":{"gitId":"aaapppsss"},"content":"                logger.log(Level.WARNING, \"Error processing weight data (invalid inputs for numerical fields)\");","lastModifiedDate":"2021-10-27"},{"lineNumber":439,"author":{"gitId":"brendanlsz"},"content":"                Ui.printPreloadWeightError();","lastModifiedDate":"2021-11-07"},{"lineNumber":440,"author":{"gitId":"brendanlsz"},"content":"            }","lastModifiedDate":"2021-11-07"},{"lineNumber":441,"author":{"gitId":"aaapppsss"},"content":"        }","lastModifiedDate":"2021-10-20"},{"lineNumber":442,"author":{"gitId":"brendanlsz"},"content":"        if (weightRecords.size() \u003e 0) {","lastModifiedDate":"2021-11-07"},{"lineNumber":443,"author":{"gitId":"brendanlsz"},"content":"            System.out.println(\"Preloaded weight data successfully\");","lastModifiedDate":"2021-11-07"},{"lineNumber":444,"author":{"gitId":"aaapppsss"},"content":"        }","lastModifiedDate":"2021-10-20"},{"lineNumber":445,"author":{"gitId":"aaapppsss"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":446,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":447,"author":{"gitId":"aaapppsss"},"content":"    /**","lastModifiedDate":"2021-10-27"},{"lineNumber":448,"author":{"gitId":"aaapppsss"},"content":"     * Creates a String that displays the user data for the UI.","lastModifiedDate":"2021-10-27"},{"lineNumber":449,"author":{"gitId":"aaapppsss"},"content":"     *","lastModifiedDate":"2021-10-27"},{"lineNumber":450,"author":{"gitId":"aaapppsss"},"content":"     * @return The user data display.","lastModifiedDate":"2021-10-27"},{"lineNumber":451,"author":{"gitId":"aaapppsss"},"content":"     */","lastModifiedDate":"2021-10-27"},{"lineNumber":452,"author":{"gitId":"aaapppsss"},"content":"    public String getUserDataDisplay() {","lastModifiedDate":"2021-10-26"},{"lineNumber":453,"author":{"gitId":"aaapppsss"},"content":"        return \"Calorie Goal: \" + this.calorieGoal + \" \" + System.lineSeparator()","lastModifiedDate":"2021-10-26"},{"lineNumber":454,"author":{"gitId":"aaapppsss"},"content":"                + \"Gender: \" + this.gender.toString() + System.lineSeparator()","lastModifiedDate":"2021-10-26"},{"lineNumber":455,"author":{"gitId":"aaapppsss"},"content":"                + \"Age: \" + this.age + System.lineSeparator()","lastModifiedDate":"2021-10-26"},{"lineNumber":456,"author":{"gitId":"aaapppsss"},"content":"                + \"Weight: \" + this.weight + System.lineSeparator()","lastModifiedDate":"2021-10-26"},{"lineNumber":457,"author":{"gitId":"aaapppsss"},"content":"                + \"Height: \" + this.height;","lastModifiedDate":"2021-11-06"},{"lineNumber":458,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":459,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":460,"author":{"gitId":"aaapppsss"},"content":"    /**","lastModifiedDate":"2021-10-27"},{"lineNumber":461,"author":{"gitId":"aaapppsss"},"content":"     * Converts user data to the correct format for storage.","lastModifiedDate":"2021-10-27"},{"lineNumber":462,"author":{"gitId":"aaapppsss"},"content":"     *","lastModifiedDate":"2021-10-27"},{"lineNumber":463,"author":{"gitId":"aaapppsss"},"content":"     * @return The user data in storage appropriate format.","lastModifiedDate":"2021-10-27"},{"lineNumber":464,"author":{"gitId":"aaapppsss"},"content":"     */","lastModifiedDate":"2021-10-27"},{"lineNumber":465,"author":{"gitId":"brendanlsz"},"content":"    public String convertUserDataToString() {","lastModifiedDate":"2021-10-10"},{"lineNumber":466,"author":{"gitId":"aaapppsss"},"content":"        return this.calorieGoal + DELIMITER","lastModifiedDate":"2021-10-23"},{"lineNumber":467,"author":{"gitId":"aaapppsss"},"content":"                + this.gender + DELIMITER","lastModifiedDate":"2021-10-23"},{"lineNumber":468,"author":{"gitId":"aaapppsss"},"content":"                + this.age + DELIMITER","lastModifiedDate":"2021-10-23"},{"lineNumber":469,"author":{"gitId":"aaapppsss"},"content":"                + this.height + DELIMITER","lastModifiedDate":"2021-10-23"},{"lineNumber":470,"author":{"gitId":"aaapppsss"},"content":"                + this.weight;","lastModifiedDate":"2021-10-23"},{"lineNumber":471,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":472,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":473,"author":{"gitId":"aaapppsss"},"content":"    /**","lastModifiedDate":"2021-10-27"},{"lineNumber":474,"author":{"gitId":"aaapppsss"},"content":"     * Converts weight data to the correct format for storage.","lastModifiedDate":"2021-10-27"},{"lineNumber":475,"author":{"gitId":"aaapppsss"},"content":"     *","lastModifiedDate":"2021-10-27"},{"lineNumber":476,"author":{"gitId":"aaapppsss"},"content":"     * @return The weight data in storage appropriate format.","lastModifiedDate":"2021-10-27"},{"lineNumber":477,"author":{"gitId":"aaapppsss"},"content":"     */","lastModifiedDate":"2021-10-27"},{"lineNumber":478,"author":{"gitId":"aaapppsss"},"content":"    public String convertWeightDataToString() {","lastModifiedDate":"2021-10-21"},{"lineNumber":479,"author":{"gitId":"aaapppsss"},"content":"        StringBuilder lines \u003d new StringBuilder();","lastModifiedDate":"2021-10-21"},{"lineNumber":480,"author":{"gitId":"aaapppsss"},"content":"        for (WeightRecord e : weightRecords) {","lastModifiedDate":"2021-11-06"},{"lineNumber":481,"author":{"gitId":"aaapppsss"},"content":"            assert e !\u003d null : \"e should not be null\";","lastModifiedDate":"2021-10-21"},{"lineNumber":482,"author":{"gitId":"aaapppsss"},"content":"            float weight \u003d e.getWeight();","lastModifiedDate":"2021-10-21"},{"lineNumber":483,"author":{"gitId":"aaapppsss"},"content":"            String date \u003d e.getDate().toString();","lastModifiedDate":"2021-10-21"},{"lineNumber":484,"author":{"gitId":"aaapppsss"},"content":"            lines.append(weight).append(DELIMITER).append(date).append(System.lineSeparator());","lastModifiedDate":"2021-10-21"},{"lineNumber":485,"author":{"gitId":"aaapppsss"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":486,"author":{"gitId":"aaapppsss"},"content":"        return lines.toString();","lastModifiedDate":"2021-10-21"},{"lineNumber":487,"author":{"gitId":"aaapppsss"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":488,"author":{"gitId":"aaapppsss"},"content":"}","lastModifiedDate":"2021-10-03"}],"authorContributionMap":{"kengjit":3,"brendanlsz":26,"siyuancheng178":13,"aaapppsss":443,"praj-bellakka":3}},{"path":"src/main/java/seedu/duke/Duke.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.duke;","lastModifiedDate":"2020-05-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":3,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.parser.Parser;","lastModifiedDate":"2021-10-06"},{"lineNumber":4,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Scanner;","lastModifiedDate":"2020-05-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"     * Main entry-point for the java.duke.Duke application.","lastModifiedDate":"2020-05-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2019-07-29"},{"lineNumber":12,"author":{"gitId":"-"},"content":"        String logo \u003d \" ____        _        \\n\"","lastModifiedDate":"2019-07-29"},{"lineNumber":13,"author":{"gitId":"-"},"content":"                + \"|  _ \\\\ _   _| | _____ \\n\"","lastModifiedDate":"2019-07-29"},{"lineNumber":14,"author":{"gitId":"-"},"content":"                + \"| | | | | | | |/ / _ \\\\\\n\"","lastModifiedDate":"2019-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"                + \"| |_| | |_| |   \u003c  __/\\n\"","lastModifiedDate":"2019-07-29"},{"lineNumber":16,"author":{"gitId":"-"},"content":"                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";","lastModifiedDate":"2019-07-29"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        System.out.println(\"Hello from\\n\" + logo);","lastModifiedDate":"2019-07-29"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        System.out.println(\"What is your name?\");","lastModifiedDate":"2020-05-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        Scanner in \u003d new Scanner(System.in);","lastModifiedDate":"2020-05-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        System.out.println(\"Hello \" + in.nextLine());","lastModifiedDate":"2020-05-24"},{"lineNumber":22,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":24,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"-":21,"praj-bellakka":3}},{"path":"src/test/java/fitnus/EntryTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"aaapppsss"},"content":"package fitnus;","lastModifiedDate":"2021-10-12"},{"lineNumber":2,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":3,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.tracker.Entry;","lastModifiedDate":"2021-10-12"},{"lineNumber":4,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.tracker.Food;","lastModifiedDate":"2021-10-12"},{"lineNumber":5,"author":{"gitId":"kengjit"},"content":"import fitnus.tracker.MealType;","lastModifiedDate":"2021-10-19"},{"lineNumber":6,"author":{"gitId":"aaapppsss"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-12"},{"lineNumber":7,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":8,"author":{"gitId":"aaapppsss"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-10-12"},{"lineNumber":9,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":10,"author":{"gitId":"aaapppsss"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-12"},{"lineNumber":11,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":12,"author":{"gitId":"aaapppsss"},"content":"class EntryTest {","lastModifiedDate":"2021-10-12"},{"lineNumber":13,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":14,"author":{"gitId":"aaapppsss"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":15,"author":{"gitId":"aaapppsss"},"content":"    void convertToStringForStorage_() {","lastModifiedDate":"2021-10-12"},{"lineNumber":16,"author":{"gitId":"aaapppsss"},"content":"        //todo","lastModifiedDate":"2021-10-12"},{"lineNumber":17,"author":{"gitId":"aaapppsss"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":18,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":19,"author":{"gitId":"aaapppsss"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":20,"author":{"gitId":"aaapppsss"},"content":"    void testToString() {","lastModifiedDate":"2021-10-12"},{"lineNumber":21,"author":{"gitId":"kengjit"},"content":"        MealType mealType \u003d MealType.BREAKFAST;","lastModifiedDate":"2021-10-19"},{"lineNumber":22,"author":{"gitId":"brendanlsz"},"content":"        Food food \u003d new Food(\"Bread\", 50, Food.FoodType.SNACK);","lastModifiedDate":"2021-10-22"},{"lineNumber":23,"author":{"gitId":"kengjit"},"content":"        Entry entry \u003d new Entry(mealType, food, LocalDate.parse(\"2021-01-01\"));","lastModifiedDate":"2021-10-19"},{"lineNumber":24,"author":{"gitId":"brendanlsz"},"content":"        assertEquals(\"[2021-01-01] Breakfast: Bread (50 Kcal) Type: SNACK\", entry.toString());","lastModifiedDate":"2021-10-25"},{"lineNumber":25,"author":{"gitId":"aaapppsss"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":26,"author":{"gitId":"aaapppsss"},"content":"}","lastModifiedDate":"2021-10-12"}],"authorContributionMap":{"kengjit":3,"brendanlsz":2,"aaapppsss":19,"praj-bellakka":2}},{"path":"src/test/java/fitnus/FoodTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"aaapppsss"},"content":"package fitnus;","lastModifiedDate":"2021-10-12"},{"lineNumber":2,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":3,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.tracker.Food;","lastModifiedDate":"2021-10-12"},{"lineNumber":4,"author":{"gitId":"aaapppsss"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-12"},{"lineNumber":5,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":6,"author":{"gitId":"aaapppsss"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-12"},{"lineNumber":7,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":8,"author":{"gitId":"aaapppsss"},"content":"class FoodTest {","lastModifiedDate":"2021-10-12"},{"lineNumber":9,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":10,"author":{"gitId":"aaapppsss"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":11,"author":{"gitId":"aaapppsss"},"content":"    void testToString() {","lastModifiedDate":"2021-10-12"},{"lineNumber":12,"author":{"gitId":"brendanlsz"},"content":"        Food food \u003d new Food(\"Bread\", 50, Food.FoodType.MEAL);","lastModifiedDate":"2021-10-22"},{"lineNumber":13,"author":{"gitId":"brendanlsz"},"content":"        assertEquals(\"Bread (50 Kcal) Type: MEAL\", food.toString());","lastModifiedDate":"2021-10-25"},{"lineNumber":14,"author":{"gitId":"aaapppsss"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":15,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":16,"author":{"gitId":"aaapppsss"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":17,"author":{"gitId":"aaapppsss"},"content":"    void convertToStringForStorage() {","lastModifiedDate":"2021-10-12"},{"lineNumber":18,"author":{"gitId":"aaapppsss"},"content":"        //todo","lastModifiedDate":"2021-10-12"},{"lineNumber":19,"author":{"gitId":"aaapppsss"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":20,"author":{"gitId":"aaapppsss"},"content":"}","lastModifiedDate":"2021-10-12"}],"authorContributionMap":{"brendanlsz":2,"aaapppsss":17,"praj-bellakka":1}},{"path":"src/test/java/fitnus/ParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"praj-bellakka"},"content":"package fitnus;","lastModifiedDate":"2021-10-08"},{"lineNumber":2,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":3,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.command.AddFoodEntryCommand;","lastModifiedDate":"2021-11-06"},{"lineNumber":4,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.command.ExitCommand;","lastModifiedDate":"2021-10-31"},{"lineNumber":5,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.command.HelpCommand;","lastModifiedDate":"2021-10-31"},{"lineNumber":6,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.command.ListFoodDatabaseCommand;","lastModifiedDate":"2021-10-31"},{"lineNumber":7,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.command.SetWeightCommand;","lastModifiedDate":"2021-10-31"},{"lineNumber":8,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.database.EntryDatabase;","lastModifiedDate":"2021-10-26"},{"lineNumber":9,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.database.FoodDatabase;","lastModifiedDate":"2021-10-26"},{"lineNumber":10,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.database.MealPlanDatabase;","lastModifiedDate":"2021-10-31"},{"lineNumber":11,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.exception.FitNusException;","lastModifiedDate":"2021-10-12"},{"lineNumber":12,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.parser.Parser;","lastModifiedDate":"2021-10-08"},{"lineNumber":13,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.tracker.Food;","lastModifiedDate":"2021-11-06"},{"lineNumber":14,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.tracker.MealType;","lastModifiedDate":"2021-10-26"},{"lineNumber":15,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.tracker.Summary;","lastModifiedDate":"2021-10-26"},{"lineNumber":16,"author":{"gitId":"praj-bellakka"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-08"},{"lineNumber":17,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":18,"author":{"gitId":"praj-bellakka"},"content":"import java.io.ByteArrayInputStream;","lastModifiedDate":"2021-11-06"},{"lineNumber":19,"author":{"gitId":"praj-bellakka"},"content":"import java.io.InputStream;","lastModifiedDate":"2021-11-06"},{"lineNumber":20,"author":{"gitId":"praj-bellakka"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-10-12"},{"lineNumber":21,"author":{"gitId":"praj-bellakka"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-11-06"},{"lineNumber":22,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":23,"author":{"gitId":"praj-bellakka"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-12"},{"lineNumber":24,"author":{"gitId":"praj-bellakka"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2021-10-12"},{"lineNumber":25,"author":{"gitId":"praj-bellakka"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-12"},{"lineNumber":26,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":27,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":28,"author":{"gitId":"praj-bellakka"},"content":"public class ParserTest {","lastModifiedDate":"2021-10-08"},{"lineNumber":29,"author":{"gitId":"praj-bellakka"},"content":"    Parser parser \u003d new Parser();","lastModifiedDate":"2021-10-08"},{"lineNumber":30,"author":{"gitId":"aaapppsss"},"content":"    public static final String INVALID_COMMAND_MESSAGE \u003d \"That was an invalid command! \"","lastModifiedDate":"2021-11-06"},{"lineNumber":31,"author":{"gitId":"aaapppsss"},"content":"            + \"Type \u0027help\u0027 for a list of commands\\n\"","lastModifiedDate":"2021-11-06"},{"lineNumber":32,"author":{"gitId":"aaapppsss"},"content":"            + \"and their command formats.\";","lastModifiedDate":"2021-11-06"},{"lineNumber":33,"author":{"gitId":"praj-bellakka"},"content":"    EntryDatabase ed \u003d new EntryDatabase();","lastModifiedDate":"2021-10-26"},{"lineNumber":34,"author":{"gitId":"praj-bellakka"},"content":"    FoodDatabase fd \u003d new FoodDatabase();","lastModifiedDate":"2021-10-26"},{"lineNumber":35,"author":{"gitId":"praj-bellakka"},"content":"    MealPlanDatabase md \u003d new MealPlanDatabase();","lastModifiedDate":"2021-10-31"},{"lineNumber":36,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":37,"author":{"gitId":"praj-bellakka"},"content":"    @Test","lastModifiedDate":"2021-10-09"},{"lineNumber":38,"author":{"gitId":"kengjit"},"content":"    void parseCommandType_correctInput_parsedCorrectly() throws FitNusException {","lastModifiedDate":"2021-10-12"},{"lineNumber":39,"author":{"gitId":"praj-bellakka"},"content":"        assertTrue(parser.parseCommandType(\"help\", null, null, null) instanceof HelpCommand);","lastModifiedDate":"2021-10-26"},{"lineNumber":40,"author":{"gitId":"praj-bellakka"},"content":"        assertTrue(parser.parseCommandType(\"exit\", null, null, null) instanceof ExitCommand);","lastModifiedDate":"2021-10-26"},{"lineNumber":41,"author":{"gitId":"praj-bellakka"},"content":"        assertTrue(parser.parseCommandType(\"list /food\", null, null, null) instanceof ListFoodDatabaseCommand);","lastModifiedDate":"2021-10-26"},{"lineNumber":42,"author":{"gitId":"praj-bellakka"},"content":"        assertTrue(parser.parseCommandType(\"weight /set 120\", null, null, null) instanceof SetWeightCommand);","lastModifiedDate":"2021-10-26"},{"lineNumber":43,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":44,"author":{"gitId":"praj-bellakka"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":45,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":46,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":47,"author":{"gitId":"praj-bellakka"},"content":"    @Test","lastModifiedDate":"2021-10-09"},{"lineNumber":48,"author":{"gitId":"praj-bellakka"},"content":"    void parseCommandType_wrongInput_invalidCommand() {","lastModifiedDate":"2021-10-12"},{"lineNumber":49,"author":{"gitId":"praj-bellakka"},"content":"        Exception exception1 \u003d assertThrows(FitNusException.class, () -\u003e parser.parseCommandType(","lastModifiedDate":"2021-10-31"},{"lineNumber":50,"author":{"gitId":"praj-bellakka"},"content":"                \"add\", fd, ed, md)); //test for invalid input","lastModifiedDate":"2021-10-31"},{"lineNumber":51,"author":{"gitId":"praj-bellakka"},"content":"        assertEquals(INVALID_COMMAND_MESSAGE, exception1.getMessage());","lastModifiedDate":"2021-10-31"},{"lineNumber":52,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":53,"author":{"gitId":"praj-bellakka"},"content":"        Exception exception2 \u003d assertThrows(FitNusException.class, () -\u003e parser.parseCommandType(","lastModifiedDate":"2021-10-31"},{"lineNumber":54,"author":{"gitId":"praj-bellakka"},"content":"                \"invalid command 123\", fd, ed, md));","lastModifiedDate":"2021-10-31"},{"lineNumber":55,"author":{"gitId":"praj-bellakka"},"content":"        assertEquals(INVALID_COMMAND_MESSAGE, exception2.getMessage());","lastModifiedDate":"2021-10-31"},{"lineNumber":56,"author":{"gitId":"praj-bellakka"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":57,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":58,"author":{"gitId":"praj-bellakka"},"content":"    @Test","lastModifiedDate":"2021-11-06"},{"lineNumber":59,"author":{"gitId":"praj-bellakka"},"content":"    void parseAddFoodCommand_addExistingFood_validEntry() throws FitNusException {","lastModifiedDate":"2021-11-06"},{"lineNumber":60,"author":{"gitId":"praj-bellakka"},"content":"        Food testFood \u003d new Food(\"food\", 200, Food.FoodType.MEAL);","lastModifiedDate":"2021-11-06"},{"lineNumber":61,"author":{"gitId":"praj-bellakka"},"content":"        fd.addFood(testFood);","lastModifiedDate":"2021-11-06"},{"lineNumber":62,"author":{"gitId":"praj-bellakka"},"content":"        String data \u003d \"1\" + System.lineSeparator();","lastModifiedDate":"2021-11-06"},{"lineNumber":63,"author":{"gitId":"praj-bellakka"},"content":"        InputStream stdin \u003d System.in;","lastModifiedDate":"2021-11-06"},{"lineNumber":64,"author":{"gitId":"praj-bellakka"},"content":"        AddFoodEntryCommand testCmd;","lastModifiedDate":"2021-11-06"},{"lineNumber":65,"author":{"gitId":"praj-bellakka"},"content":"        try {","lastModifiedDate":"2021-11-06"},{"lineNumber":66,"author":{"gitId":"praj-bellakka"},"content":"            System.setIn(new ByteArrayInputStream(data.getBytes()));","lastModifiedDate":"2021-11-06"},{"lineNumber":67,"author":{"gitId":"praj-bellakka"},"content":"            testCmd \u003d parser.parseAddFoodCommand(\"food\", fd, \"unspecified\");","lastModifiedDate":"2021-11-06"},{"lineNumber":68,"author":{"gitId":"praj-bellakka"},"content":"        } finally {","lastModifiedDate":"2021-11-06"},{"lineNumber":69,"author":{"gitId":"praj-bellakka"},"content":"            System.setIn(stdin);","lastModifiedDate":"2021-11-06"},{"lineNumber":70,"author":{"gitId":"praj-bellakka"},"content":"        }","lastModifiedDate":"2021-11-06"},{"lineNumber":71,"author":{"gitId":"praj-bellakka"},"content":"        assertEquals(AddFoodEntryCommand.class, testCmd.getClass());","lastModifiedDate":"2021-11-06"},{"lineNumber":72,"author":{"gitId":"praj-bellakka"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":73,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":74,"author":{"gitId":"praj-bellakka"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":75,"author":{"gitId":"praj-bellakka"},"content":"    void getDate_invalidInput_getException() {","lastModifiedDate":"2021-10-12"},{"lineNumber":76,"author":{"gitId":"praj-bellakka"},"content":"        String localDateInput1 \u003d \"2021-10\"; //no day specified","lastModifiedDate":"2021-10-12"},{"lineNumber":77,"author":{"gitId":"praj-bellakka"},"content":"        Exception exception1 \u003d assertThrows(FitNusException.class, () -\u003e Parser.getDate(localDateInput1));","lastModifiedDate":"2021-10-12"},{"lineNumber":78,"author":{"gitId":"praj-bellakka"},"content":"        assertEquals(\"Error parsing date!!\", exception1.getMessage());","lastModifiedDate":"2021-10-12"},{"lineNumber":79,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":80,"author":{"gitId":"praj-bellakka"},"content":"        String localDateInput2 \u003d \"2021-101-20\"; //invalid month","lastModifiedDate":"2021-10-12"},{"lineNumber":81,"author":{"gitId":"praj-bellakka"},"content":"        Exception exception2 \u003d assertThrows(FitNusException.class, () -\u003e Parser.getDate(localDateInput2));","lastModifiedDate":"2021-10-12"},{"lineNumber":82,"author":{"gitId":"praj-bellakka"},"content":"        assertEquals(\"Error parsing date!!\", exception2.getMessage());","lastModifiedDate":"2021-10-12"},{"lineNumber":83,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":84,"author":{"gitId":"praj-bellakka"},"content":"        String localDateInput3 \u003d \"2021-03-50\"; //invalid day","lastModifiedDate":"2021-10-12"},{"lineNumber":85,"author":{"gitId":"praj-bellakka"},"content":"        Exception exception3 \u003d assertThrows(FitNusException.class, () -\u003e Parser.getDate(localDateInput3));","lastModifiedDate":"2021-10-12"},{"lineNumber":86,"author":{"gitId":"praj-bellakka"},"content":"        assertEquals(\"Error parsing date!!\", exception3.getMessage());","lastModifiedDate":"2021-10-12"},{"lineNumber":87,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":88,"author":{"gitId":"praj-bellakka"},"content":"        String localDateInput4 \u003d \"123-10-10\"; //invalid year","lastModifiedDate":"2021-10-12"},{"lineNumber":89,"author":{"gitId":"praj-bellakka"},"content":"        Exception exception4 \u003d assertThrows(FitNusException.class, () -\u003e Parser.getDate(localDateInput4));","lastModifiedDate":"2021-10-12"},{"lineNumber":90,"author":{"gitId":"praj-bellakka"},"content":"        assertEquals(\"Error parsing date!!\", exception4.getMessage());","lastModifiedDate":"2021-10-12"},{"lineNumber":91,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":92,"author":{"gitId":"praj-bellakka"},"content":"        String localDateInput5 \u003d \"nonsensevalues\"; //nonsense values","lastModifiedDate":"2021-10-31"},{"lineNumber":93,"author":{"gitId":"praj-bellakka"},"content":"        Exception exception5 \u003d assertThrows(FitNusException.class, () -\u003e Parser.getDate(localDateInput5));","lastModifiedDate":"2021-10-12"},{"lineNumber":94,"author":{"gitId":"praj-bellakka"},"content":"        assertEquals(\"Error parsing date!!\", exception5.getMessage());","lastModifiedDate":"2021-10-12"},{"lineNumber":95,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":96,"author":{"gitId":"praj-bellakka"},"content":"        String localDateInput6 \u003d \"\"; //empty string","lastModifiedDate":"2021-10-12"},{"lineNumber":97,"author":{"gitId":"praj-bellakka"},"content":"        AssertionError exception6 \u003d assertThrows(AssertionError.class, () -\u003e Parser.getDate(localDateInput6));","lastModifiedDate":"2021-10-12"},{"lineNumber":98,"author":{"gitId":"praj-bellakka"},"content":"        assertEquals(\"String line should not be empty\", exception6.getMessage());","lastModifiedDate":"2021-10-12"},{"lineNumber":99,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":100,"author":{"gitId":"praj-bellakka"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":101,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":102,"author":{"gitId":"praj-bellakka"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":103,"author":{"gitId":"praj-bellakka"},"content":"    void parseMealType_validInput_returnMealType() throws FitNusException {","lastModifiedDate":"2021-11-01"},{"lineNumber":104,"author":{"gitId":"praj-bellakka"},"content":"        String input1 \u003d \"Breakfast\";","lastModifiedDate":"2021-10-26"},{"lineNumber":105,"author":{"gitId":"praj-bellakka"},"content":"        String input2 \u003d \"/bfast\";","lastModifiedDate":"2021-10-26"},{"lineNumber":106,"author":{"gitId":"praj-bellakka"},"content":"        assertEquals(MealType.BREAKFAST, Parser.parseMealType(input1, true));","lastModifiedDate":"2021-10-26"},{"lineNumber":107,"author":{"gitId":"praj-bellakka"},"content":"        assertEquals(MealType.BREAKFAST, Parser.parseMealType(input2, false));","lastModifiedDate":"2021-10-26"},{"lineNumber":108,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":109,"author":{"gitId":"praj-bellakka"},"content":"        String input3 \u003d \"Lunch\";","lastModifiedDate":"2021-10-26"},{"lineNumber":110,"author":{"gitId":"praj-bellakka"},"content":"        String input4 \u003d \"/lunch\";","lastModifiedDate":"2021-10-26"},{"lineNumber":111,"author":{"gitId":"praj-bellakka"},"content":"        assertEquals(MealType.LUNCH, Parser.parseMealType(input3, true));","lastModifiedDate":"2021-10-26"},{"lineNumber":112,"author":{"gitId":"praj-bellakka"},"content":"        assertEquals(MealType.LUNCH, Parser.parseMealType(input4, false));","lastModifiedDate":"2021-10-26"},{"lineNumber":113,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":114,"author":{"gitId":"praj-bellakka"},"content":"        String input5 \u003d \"Dinner\";","lastModifiedDate":"2021-10-26"},{"lineNumber":115,"author":{"gitId":"praj-bellakka"},"content":"        String input6 \u003d \"/dinner\";","lastModifiedDate":"2021-10-26"},{"lineNumber":116,"author":{"gitId":"praj-bellakka"},"content":"        assertEquals(MealType.DINNER, Parser.parseMealType(input5, true));","lastModifiedDate":"2021-10-26"},{"lineNumber":117,"author":{"gitId":"praj-bellakka"},"content":"        assertEquals(MealType.DINNER, Parser.parseMealType(input6, false));","lastModifiedDate":"2021-10-26"},{"lineNumber":118,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":119,"author":{"gitId":"praj-bellakka"},"content":"        String input7 \u003d \"Snack\";","lastModifiedDate":"2021-10-26"},{"lineNumber":120,"author":{"gitId":"praj-bellakka"},"content":"        String input8 \u003d \"/snack\";","lastModifiedDate":"2021-10-26"},{"lineNumber":121,"author":{"gitId":"praj-bellakka"},"content":"        assertEquals(MealType.SNACK, Parser.parseMealType(input7, true));","lastModifiedDate":"2021-10-26"},{"lineNumber":122,"author":{"gitId":"praj-bellakka"},"content":"        assertEquals(MealType.SNACK, Parser.parseMealType(input8, false));","lastModifiedDate":"2021-10-26"},{"lineNumber":123,"author":{"gitId":"praj-bellakka"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":124,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":125,"author":{"gitId":"praj-bellakka"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":126,"author":{"gitId":"praj-bellakka"},"content":"    void parseMealType_invalidInput_returnUndefinedMealType() throws FitNusException {","lastModifiedDate":"2021-11-01"},{"lineNumber":127,"author":{"gitId":"praj-bellakka"},"content":"        String input1 \u003d \"breakfast\";","lastModifiedDate":"2021-10-26"},{"lineNumber":128,"author":{"gitId":"praj-bellakka"},"content":"        String input2 \u003d \"bfas\";","lastModifiedDate":"2021-11-01"},{"lineNumber":129,"author":{"gitId":"praj-bellakka"},"content":"        assertEquals(MealType.UNDEFINED, Parser.parseMealType(input1, true));","lastModifiedDate":"2021-10-26"},{"lineNumber":130,"author":{"gitId":"praj-bellakka"},"content":"        assertEquals(MealType.UNDEFINED, Parser.parseMealType(input2, false));","lastModifiedDate":"2021-10-26"},{"lineNumber":131,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":132,"author":{"gitId":"praj-bellakka"},"content":"        String input3 \u003d \"random words\";","lastModifiedDate":"2021-10-26"},{"lineNumber":133,"author":{"gitId":"praj-bellakka"},"content":"        assertEquals(MealType.UNDEFINED, Parser.parseMealType(input3, true));","lastModifiedDate":"2021-10-26"},{"lineNumber":134,"author":{"gitId":"praj-bellakka"},"content":"        assertEquals(MealType.UNDEFINED, Parser.parseMealType(input3, false));","lastModifiedDate":"2021-11-01"},{"lineNumber":135,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":136,"author":{"gitId":"praj-bellakka"},"content":"        String input5 \u003d \"\";","lastModifiedDate":"2021-10-26"},{"lineNumber":137,"author":{"gitId":"praj-bellakka"},"content":"        assertEquals(MealType.UNDEFINED, Parser.parseMealType(input5, true));","lastModifiedDate":"2021-10-26"},{"lineNumber":138,"author":{"gitId":"praj-bellakka"},"content":"        assertEquals(MealType.UNDEFINED, Parser.parseMealType(input5, false));","lastModifiedDate":"2021-11-01"},{"lineNumber":139,"author":{"gitId":"praj-bellakka"},"content":"    }","lastModifiedDate":"2021-11-01"},{"lineNumber":140,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":141,"author":{"gitId":"praj-bellakka"},"content":"    @Test","lastModifiedDate":"2021-11-01"},{"lineNumber":142,"author":{"gitId":"praj-bellakka"},"content":"    void parseMealType_invalidInput_throwFitNusException() throws FitNusException {","lastModifiedDate":"2021-11-01"},{"lineNumber":143,"author":{"gitId":"praj-bellakka"},"content":"        String input1 \u003d \"/bfastt\";","lastModifiedDate":"2021-11-01"},{"lineNumber":144,"author":{"gitId":"praj-bellakka"},"content":"        Exception exception1 \u003d assertThrows(FitNusException.class, () -\u003e Parser.parseMealType(input1, false));","lastModifiedDate":"2021-11-01"},{"lineNumber":145,"author":{"gitId":"praj-bellakka"},"content":"        assertEquals(input1 + \" is an invalid food category. \"","lastModifiedDate":"2021-11-04"},{"lineNumber":146,"author":{"gitId":"praj-bellakka"},"content":"                + \"Avoid using the backslash character if food category is not specified.\", exception1.getMessage());","lastModifiedDate":"2021-11-01"},{"lineNumber":147,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":148,"author":{"gitId":"praj-bellakka"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":149,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":150,"author":{"gitId":"praj-bellakka"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":151,"author":{"gitId":"praj-bellakka"},"content":"    void getDate_validInput_returnDate() throws FitNusException {","lastModifiedDate":"2021-10-12"},{"lineNumber":152,"author":{"gitId":"praj-bellakka"},"content":"        String input1 \u003d \"2020-03-03\"; //correct format","lastModifiedDate":"2021-10-12"},{"lineNumber":153,"author":{"gitId":"praj-bellakka"},"content":"        assertEquals(LocalDate.class, parser.getDate(input1).getClass());","lastModifiedDate":"2021-10-12"},{"lineNumber":154,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":155,"author":{"gitId":"praj-bellakka"},"content":"        String line \u003d \"2021-12-23\";","lastModifiedDate":"2021-10-12"},{"lineNumber":156,"author":{"gitId":"praj-bellakka"},"content":"        LocalDate date \u003d Parser.getDate(line);","lastModifiedDate":"2021-10-12"},{"lineNumber":157,"author":{"gitId":"praj-bellakka"},"content":"        assertEquals(LocalDate.of(2021, 12, 23), date);","lastModifiedDate":"2021-10-12"},{"lineNumber":158,"author":{"gitId":"praj-bellakka"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":159,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":160,"author":{"gitId":"praj-bellakka"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":161,"author":{"gitId":"kengjit"},"content":"    void parseCommandType_validGenderInput_returnCommand() throws FitNusException {","lastModifiedDate":"2021-10-12"},{"lineNumber":162,"author":{"gitId":"praj-bellakka"},"content":"    //        String input \u003d \"gender /set M\";","lastModifiedDate":"2021-10-20"},{"lineNumber":163,"author":{"gitId":"praj-bellakka"},"content":"    //        Command returnCommand \u003d parser.parseCommandType(input);","lastModifiedDate":"2021-10-20"},{"lineNumber":164,"author":{"gitId":"praj-bellakka"},"content":"    //","lastModifiedDate":"2021-10-20"},{"lineNumber":165,"author":{"gitId":"praj-bellakka"},"content":"    //        assertEquals(SetGenderCommand.class, returnCommand.getClass());","lastModifiedDate":"2021-10-20"},{"lineNumber":166,"author":{"gitId":"praj-bellakka"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":167,"author":{"gitId":"praj-bellakka"},"content":"}","lastModifiedDate":"2021-10-08"}],"authorContributionMap":{"kengjit":3,"aaapppsss":3,"praj-bellakka":161}},{"path":"src/test/java/fitnus/UserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"aaapppsss"},"content":"package fitnus;","lastModifiedDate":"2021-10-09"},{"lineNumber":2,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":3,"author":{"gitId":"aaapppsss"},"content":"import fitnus.database.EntryDatabase;","lastModifiedDate":"2021-10-26"},{"lineNumber":4,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.exception.FitNusException;","lastModifiedDate":"2021-10-12"},{"lineNumber":5,"author":{"gitId":"aaapppsss"},"content":"import fitnus.tracker.Entry;","lastModifiedDate":"2021-10-26"},{"lineNumber":6,"author":{"gitId":"aaapppsss"},"content":"import fitnus.tracker.Food;","lastModifiedDate":"2021-10-26"},{"lineNumber":7,"author":{"gitId":"siyuancheng178"},"content":"import fitnus.tracker.Gender;","lastModifiedDate":"2021-10-23"},{"lineNumber":8,"author":{"gitId":"aaapppsss"},"content":"import fitnus.tracker.MealType;","lastModifiedDate":"2021-10-26"},{"lineNumber":9,"author":{"gitId":"aaapppsss"},"content":"import fitnus.tracker.WeightRecord;","lastModifiedDate":"2021-11-06"},{"lineNumber":10,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.utility.User;","lastModifiedDate":"2021-10-12"},{"lineNumber":11,"author":{"gitId":"aaapppsss"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-09"},{"lineNumber":12,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":13,"author":{"gitId":"aaapppsss"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-10-26"},{"lineNumber":14,"author":{"gitId":"aaapppsss"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-26"},{"lineNumber":15,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":16,"author":{"gitId":"aaapppsss"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-09"},{"lineNumber":17,"author":{"gitId":"aaapppsss"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2021-10-09"},{"lineNumber":18,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":19,"author":{"gitId":"aaapppsss"},"content":"class UserTest {","lastModifiedDate":"2021-10-09"},{"lineNumber":20,"author":{"gitId":"aaapppsss"},"content":"    User initialiseUser() {","lastModifiedDate":"2021-11-06"},{"lineNumber":21,"author":{"gitId":"aaapppsss"},"content":"        return new User(2000, Gender.MALE, 18, 180, 65);","lastModifiedDate":"2021-11-06"},{"lineNumber":22,"author":{"gitId":"aaapppsss"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":23,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":24,"author":{"gitId":"aaapppsss"},"content":"    void testIfUpdatedWeightAndWeightTrackerCorrectly(User user, float correctWeight) {","lastModifiedDate":"2021-11-06"},{"lineNumber":25,"author":{"gitId":"aaapppsss"},"content":"        assertEquals((float) 55.5, user.getWeight());","lastModifiedDate":"2021-11-06"},{"lineNumber":26,"author":{"gitId":"aaapppsss"},"content":"        LocalDate currDate \u003d LocalDate.now();","lastModifiedDate":"2021-11-06"},{"lineNumber":27,"author":{"gitId":"aaapppsss"},"content":"        ArrayList\u003cWeightRecord\u003e weightRecords \u003d user.getWeightRecords();","lastModifiedDate":"2021-11-06"},{"lineNumber":28,"author":{"gitId":"aaapppsss"},"content":"        int weightTrackerSize \u003d weightRecords.size();","lastModifiedDate":"2021-11-06"},{"lineNumber":29,"author":{"gitId":"aaapppsss"},"content":"        assertEquals(currDate.toString(), weightRecords.get(weightTrackerSize - 1).getDate().toString());","lastModifiedDate":"2021-11-06"},{"lineNumber":30,"author":{"gitId":"aaapppsss"},"content":"        assertEquals(correctWeight, weightRecords.get(weightTrackerSize - 1).getWeight());","lastModifiedDate":"2021-11-06"},{"lineNumber":31,"author":{"gitId":"aaapppsss"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":32,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":33,"author":{"gitId":"aaapppsss"},"content":"    @Test","lastModifiedDate":"2021-10-09"},{"lineNumber":34,"author":{"gitId":"aaapppsss"},"content":"    void setCalorieGoal_validGoal_success() throws FitNusException {","lastModifiedDate":"2021-10-25"},{"lineNumber":35,"author":{"gitId":"aaapppsss"},"content":"        User user \u003d initialiseUser();","lastModifiedDate":"2021-11-06"},{"lineNumber":36,"author":{"gitId":"aaapppsss"},"content":"        user.setCalorieGoal(3000);","lastModifiedDate":"2021-10-25"},{"lineNumber":37,"author":{"gitId":"aaapppsss"},"content":"        assertEquals(3000, user.getCalorieGoal());","lastModifiedDate":"2021-10-25"},{"lineNumber":38,"author":{"gitId":"aaapppsss"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":39,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":40,"author":{"gitId":"aaapppsss"},"content":"    @Test","lastModifiedDate":"2021-10-09"},{"lineNumber":41,"author":{"gitId":"aaapppsss"},"content":"    void setCalorieGoal_calorieGoalTooLow_exceptionThrown() {","lastModifiedDate":"2021-11-06"},{"lineNumber":42,"author":{"gitId":"aaapppsss"},"content":"        User user \u003d initialiseUser();","lastModifiedDate":"2021-11-06"},{"lineNumber":43,"author":{"gitId":"aaapppsss"},"content":"        Exception exception \u003d assertThrows(FitNusException.class, () -\u003e user.setCalorieGoal(-1000));","lastModifiedDate":"2021-10-09"},{"lineNumber":44,"author":{"gitId":"aaapppsss"},"content":"        assertEquals(\"Your calorie goal cannot be lower than 1365 kcal as \"","lastModifiedDate":"2021-11-06"},{"lineNumber":45,"author":{"gitId":"aaapppsss"},"content":"                + \"this would exceed the recommended healthy amount\\n\"","lastModifiedDate":"2021-11-06"},{"lineNumber":46,"author":{"gitId":"aaapppsss"},"content":"                + \"of weight loss for your body type!\\n\"","lastModifiedDate":"2021-11-06"},{"lineNumber":47,"author":{"gitId":"aaapppsss"},"content":"                + \"Please try again.\", exception.getMessage());","lastModifiedDate":"2021-11-06"},{"lineNumber":48,"author":{"gitId":"aaapppsss"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":49,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":50,"author":{"gitId":"aaapppsss"},"content":"    @Test","lastModifiedDate":"2021-10-09"},{"lineNumber":51,"author":{"gitId":"aaapppsss"},"content":"    void updateWeightAndWeightTracker_noPreviousEntries_success() throws FitNusException {","lastModifiedDate":"2021-10-26"},{"lineNumber":52,"author":{"gitId":"aaapppsss"},"content":"        User user \u003d initialiseUser();","lastModifiedDate":"2021-11-06"},{"lineNumber":53,"author":{"gitId":"aaapppsss"},"content":"        String message \u003d user.updateWeightAndWeightTracker((float) 55.5);","lastModifiedDate":"2021-10-26"},{"lineNumber":54,"author":{"gitId":"aaapppsss"},"content":"        assertEquals(\"You have updated your weight for today to 55.5 kg!\", message);","lastModifiedDate":"2021-10-26"},{"lineNumber":55,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":56,"author":{"gitId":"aaapppsss"},"content":"        testIfUpdatedWeightAndWeightTrackerCorrectly(user, (float) 55.5);","lastModifiedDate":"2021-11-06"},{"lineNumber":57,"author":{"gitId":"aaapppsss"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":58,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":59,"author":{"gitId":"aaapppsss"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":60,"author":{"gitId":"aaapppsss"},"content":"    void updateWeightAndWeightTracker_onlyCurrentDayEntryExists_success() throws FitNusException {","lastModifiedDate":"2021-10-26"},{"lineNumber":61,"author":{"gitId":"aaapppsss"},"content":"        User user \u003d initialiseUser();","lastModifiedDate":"2021-11-06"},{"lineNumber":62,"author":{"gitId":"aaapppsss"},"content":"        user.updateWeightAndWeightTracker((float) 65.5);","lastModifiedDate":"2021-10-26"},{"lineNumber":63,"author":{"gitId":"aaapppsss"},"content":"        String message \u003d user.updateWeightAndWeightTracker((float) 55.5);","lastModifiedDate":"2021-10-26"},{"lineNumber":64,"author":{"gitId":"aaapppsss"},"content":"        assertEquals(\"You have updated your weight for today to 55.5 kg!\", message);","lastModifiedDate":"2021-10-26"},{"lineNumber":65,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":66,"author":{"gitId":"aaapppsss"},"content":"        testIfUpdatedWeightAndWeightTrackerCorrectly(user, (float) 55.5);","lastModifiedDate":"2021-11-06"},{"lineNumber":67,"author":{"gitId":"aaapppsss"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":68,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":69,"author":{"gitId":"aaapppsss"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":70,"author":{"gitId":"aaapppsss"},"content":"    void updateWeightAndWeightTracker_multipleEntriesExistIncludingCurrentDay_success() throws FitNusException {","lastModifiedDate":"2021-10-26"},{"lineNumber":71,"author":{"gitId":"aaapppsss"},"content":"        User user \u003d initialiseUser();","lastModifiedDate":"2021-11-06"},{"lineNumber":72,"author":{"gitId":"aaapppsss"},"content":"        user.addToWeightRecords(new WeightRecord(70, LocalDate.parse(\"2001-10-03\")));","lastModifiedDate":"2021-11-06"},{"lineNumber":73,"author":{"gitId":"aaapppsss"},"content":"        user.updateWeightAndWeightTracker((float) 65.5);","lastModifiedDate":"2021-10-26"},{"lineNumber":74,"author":{"gitId":"aaapppsss"},"content":"        String message \u003d user.updateWeightAndWeightTracker((float) 55.5);","lastModifiedDate":"2021-10-26"},{"lineNumber":75,"author":{"gitId":"aaapppsss"},"content":"        assertEquals(\"You have updated your weight for today to 55.5 kg!\\nYou have lost 14.5 kg \"","lastModifiedDate":"2021-11-06"},{"lineNumber":76,"author":{"gitId":"aaapppsss"},"content":"                + \"from the previous weight entry of 70.0 kg on 2001-10-03\", message);","lastModifiedDate":"2021-10-26"},{"lineNumber":77,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":78,"author":{"gitId":"aaapppsss"},"content":"        testIfUpdatedWeightAndWeightTrackerCorrectly(user, (float) 55.5);","lastModifiedDate":"2021-11-06"},{"lineNumber":79,"author":{"gitId":"aaapppsss"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":80,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":81,"author":{"gitId":"aaapppsss"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":82,"author":{"gitId":"aaapppsss"},"content":"    void updateWeightAndWeightTracker_multipleEntriesExistExcludingCurrentDay_success() throws FitNusException {","lastModifiedDate":"2021-10-26"},{"lineNumber":83,"author":{"gitId":"aaapppsss"},"content":"        User user \u003d initialiseUser();","lastModifiedDate":"2021-11-06"},{"lineNumber":84,"author":{"gitId":"aaapppsss"},"content":"        user.addToWeightRecords(new WeightRecord(70, LocalDate.parse(\"2001-10-03\")));","lastModifiedDate":"2021-11-06"},{"lineNumber":85,"author":{"gitId":"aaapppsss"},"content":"        String message \u003d user.updateWeightAndWeightTracker((float) 55.5);","lastModifiedDate":"2021-10-26"},{"lineNumber":86,"author":{"gitId":"aaapppsss"},"content":"        assertEquals(\"You have updated your weight for today to 55.5 kg!\\nYou have lost 14.5 kg \"","lastModifiedDate":"2021-11-06"},{"lineNumber":87,"author":{"gitId":"aaapppsss"},"content":"                + \"from the previous weight entry of 70.0 kg on 2001-10-03\", message);","lastModifiedDate":"2021-10-26"},{"lineNumber":88,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":89,"author":{"gitId":"aaapppsss"},"content":"        testIfUpdatedWeightAndWeightTrackerCorrectly(user, (float) 55.5);","lastModifiedDate":"2021-11-06"},{"lineNumber":90,"author":{"gitId":"aaapppsss"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":91,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":92,"author":{"gitId":"aaapppsss"},"content":"    @Test","lastModifiedDate":"2021-11-01"},{"lineNumber":93,"author":{"gitId":"aaapppsss"},"content":"    void updateWeightAndWeightTracker_negativeNewWeight_exceptionThrown() {","lastModifiedDate":"2021-10-26"},{"lineNumber":94,"author":{"gitId":"aaapppsss"},"content":"        User user \u003d initialiseUser();","lastModifiedDate":"2021-11-06"},{"lineNumber":95,"author":{"gitId":"aaapppsss"},"content":"        AssertionError exception \u003d assertThrows(AssertionError.class, () -\u003e user.updateWeightAndWeightTracker(-10));","lastModifiedDate":"2021-11-04"},{"lineNumber":96,"author":{"gitId":"aaapppsss"},"content":"        assertEquals(\"newWeight should be greater than 0\", exception.getMessage());","lastModifiedDate":"2021-11-04"},{"lineNumber":97,"author":{"gitId":"aaapppsss"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":98,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":99,"author":{"gitId":"aaapppsss"},"content":"    @Test","lastModifiedDate":"2021-11-01"},{"lineNumber":100,"author":{"gitId":"aaapppsss"},"content":"    void convertWeightRecordsToStringForUi_oneOrMoreWeightEntries_success() throws FitNusException {","lastModifiedDate":"2021-11-01"},{"lineNumber":101,"author":{"gitId":"aaapppsss"},"content":"        User user \u003d initialiseUser();","lastModifiedDate":"2021-11-06"},{"lineNumber":102,"author":{"gitId":"aaapppsss"},"content":"        user.addToWeightRecords(new WeightRecord(70, LocalDate.parse(\"2001-10-03\")));","lastModifiedDate":"2021-11-06"},{"lineNumber":103,"author":{"gitId":"aaapppsss"},"content":"        user.updateWeightAndWeightTracker((float) 55.5);","lastModifiedDate":"2021-11-01"},{"lineNumber":104,"author":{"gitId":"aaapppsss"},"content":"        assertEquals(\"2001-10-03: 70.0kg\" + System.lineSeparator()","lastModifiedDate":"2021-11-01"},{"lineNumber":105,"author":{"gitId":"aaapppsss"},"content":"                        + LocalDate.now().toString() + \": 55.5kg\",","lastModifiedDate":"2021-11-06"},{"lineNumber":106,"author":{"gitId":"aaapppsss"},"content":"                user.convertWeightRecordsToStringForUi(user.getWeightRecords()));","lastModifiedDate":"2021-11-06"},{"lineNumber":107,"author":{"gitId":"aaapppsss"},"content":"    }","lastModifiedDate":"2021-11-01"},{"lineNumber":108,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":109,"author":{"gitId":"aaapppsss"},"content":"    @Test","lastModifiedDate":"2021-11-01"},{"lineNumber":110,"author":{"gitId":"aaapppsss"},"content":"    void convertWeightRecordsToStringForUi_noWeightEntries_exceptionThrown() {","lastModifiedDate":"2021-11-01"},{"lineNumber":111,"author":{"gitId":"aaapppsss"},"content":"        User user \u003d initialiseUser();","lastModifiedDate":"2021-11-06"},{"lineNumber":112,"author":{"gitId":"aaapppsss"},"content":"        Exception exception \u003d assertThrows(FitNusException.class,","lastModifiedDate":"2021-11-01"},{"lineNumber":113,"author":{"gitId":"aaapppsss"},"content":"            () -\u003e user.convertWeightRecordsToStringForUi(user.getWeightRecords()));","lastModifiedDate":"2021-11-06"},{"lineNumber":114,"author":{"gitId":"aaapppsss"},"content":"        assertEquals(\"An error has occurred! No weight records found.\", exception.getMessage());","lastModifiedDate":"2021-11-01"},{"lineNumber":115,"author":{"gitId":"aaapppsss"},"content":"    }","lastModifiedDate":"2021-11-01"},{"lineNumber":116,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":117,"author":{"gitId":"aaapppsss"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":118,"author":{"gitId":"aaapppsss"},"content":"    void getCaloriesRemaining_foodTrackerEntriesExist_success() {","lastModifiedDate":"2021-10-26"},{"lineNumber":119,"author":{"gitId":"aaapppsss"},"content":"        final User user \u003d initialiseUser();","lastModifiedDate":"2021-11-06"},{"lineNumber":120,"author":{"gitId":"aaapppsss"},"content":"        EntryDatabase ed \u003d new EntryDatabase();","lastModifiedDate":"2021-10-26"},{"lineNumber":121,"author":{"gitId":"aaapppsss"},"content":"        ed.addEntry(new Entry(MealType.BREAKFAST, new Food(\"Bread\", 55, Food.FoodType.MEAL),","lastModifiedDate":"2021-10-26"},{"lineNumber":122,"author":{"gitId":"aaapppsss"},"content":"                LocalDate.parse(\"2001-10-03\")));","lastModifiedDate":"2021-10-26"},{"lineNumber":123,"author":{"gitId":"aaapppsss"},"content":"        ed.addEntry(new Entry(MealType.BREAKFAST, new Food(\"Pizza\", 100, Food.FoodType.MEAL)));","lastModifiedDate":"2021-10-26"},{"lineNumber":124,"author":{"gitId":"aaapppsss"},"content":"        ed.addEntry(new Entry(MealType.BREAKFAST, new Food(\"Rice\", 100, Food.FoodType.MEAL)));","lastModifiedDate":"2021-10-26"},{"lineNumber":125,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":126,"author":{"gitId":"aaapppsss"},"content":"        assertEquals(1800, user.getCaloriesRemaining(ed));","lastModifiedDate":"2021-10-26"},{"lineNumber":127,"author":{"gitId":"aaapppsss"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":128,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":129,"author":{"gitId":"aaapppsss"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":130,"author":{"gitId":"aaapppsss"},"content":"    void handleGenerateCalorieGoalCommand_validInputs_success() throws FitNusException {","lastModifiedDate":"2021-11-06"},{"lineNumber":131,"author":{"gitId":"aaapppsss"},"content":"        User user \u003d initialiseUser();","lastModifiedDate":"2021-11-06"},{"lineNumber":132,"author":{"gitId":"aaapppsss"},"content":"        int calorieGoal \u003d user.handleGenerateCalorieGoalCommand((float) 0.1, \"lose\");","lastModifiedDate":"2021-11-04"},{"lineNumber":133,"author":{"gitId":"aaapppsss"},"content":"        assertEquals(2265, calorieGoal);","lastModifiedDate":"2021-10-26"},{"lineNumber":134,"author":{"gitId":"aaapppsss"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":135,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":136,"author":{"gitId":"aaapppsss"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":137,"author":{"gitId":"aaapppsss"},"content":"    void handleGenerateCalorieGoalCommand_invalidChangeType_exceptionThrown() throws FitNusException {","lastModifiedDate":"2021-11-06"},{"lineNumber":138,"author":{"gitId":"aaapppsss"},"content":"        User user \u003d initialiseUser();","lastModifiedDate":"2021-11-06"},{"lineNumber":139,"author":{"gitId":"aaapppsss"},"content":"        Exception exception \u003d assertThrows(FitNusException.class,","lastModifiedDate":"2021-11-06"},{"lineNumber":140,"author":{"gitId":"aaapppsss"},"content":"            () -\u003e user.handleGenerateCalorieGoalCommand((float) 0.1, \"invalid\"));","lastModifiedDate":"2021-11-06"},{"lineNumber":141,"author":{"gitId":"aaapppsss"},"content":"        assertEquals(\"An error has occurred! The change type is invalid.\", exception.getMessage());","lastModifiedDate":"2021-10-26"},{"lineNumber":142,"author":{"gitId":"aaapppsss"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":143,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":144,"author":{"gitId":"aaapppsss"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":145,"author":{"gitId":"aaapppsss"},"content":"    void handleGenerateCalorieGoalCommand_negativeWeeklyChangeValue_exceptionThrown() {","lastModifiedDate":"2021-11-06"},{"lineNumber":146,"author":{"gitId":"aaapppsss"},"content":"        User user \u003d initialiseUser();","lastModifiedDate":"2021-11-06"},{"lineNumber":147,"author":{"gitId":"aaapppsss"},"content":"        Exception exception \u003d assertThrows(FitNusException.class,","lastModifiedDate":"2021-11-06"},{"lineNumber":148,"author":{"gitId":"aaapppsss"},"content":"            () -\u003e user.handleGenerateCalorieGoalCommand((float) -0.1, \"lose\"));","lastModifiedDate":"2021-11-06"},{"lineNumber":149,"author":{"gitId":"aaapppsss"},"content":"        assertEquals(\"Please enter a positive value for the weekly change!\", exception.getMessage());","lastModifiedDate":"2021-10-26"},{"lineNumber":150,"author":{"gitId":"aaapppsss"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":151,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":152,"author":{"gitId":"aaapppsss"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":153,"author":{"gitId":"aaapppsss"},"content":"    void handleGenerateCalorieGoalCommand_weeklyChangeValueTooHigh_exceptionThrown() {","lastModifiedDate":"2021-11-06"},{"lineNumber":154,"author":{"gitId":"aaapppsss"},"content":"        User user \u003d initialiseUser();","lastModifiedDate":"2021-11-06"},{"lineNumber":155,"author":{"gitId":"aaapppsss"},"content":"        Exception exception \u003d assertThrows(FitNusException.class,","lastModifiedDate":"2021-11-06"},{"lineNumber":156,"author":{"gitId":"aaapppsss"},"content":"            () -\u003e user.handleGenerateCalorieGoalCommand((float) 1.2, \"lose\"));","lastModifiedDate":"2021-11-06"},{"lineNumber":157,"author":{"gitId":"aaapppsss"},"content":"        assertEquals(\"In order to lose or gain weight in a safe and healthy way,\\n\"","lastModifiedDate":"2021-10-26"},{"lineNumber":158,"author":{"gitId":"aaapppsss"},"content":"                + \"FitNUS recommends a weekly change in weight of not more than\\n\"","lastModifiedDate":"2021-10-26"},{"lineNumber":159,"author":{"gitId":"aaapppsss"},"content":"                + \"1.0 kg. Please try again with a lower weekly goal!\", exception.getMessage());","lastModifiedDate":"2021-11-06"},{"lineNumber":160,"author":{"gitId":"aaapppsss"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":161,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":162,"author":{"gitId":"aaapppsss"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":163,"author":{"gitId":"aaapppsss"},"content":"    void getUserDataDisplay_validUserData_success() {","lastModifiedDate":"2021-10-26"},{"lineNumber":164,"author":{"gitId":"aaapppsss"},"content":"        User user \u003d initialiseUser();","lastModifiedDate":"2021-11-06"},{"lineNumber":165,"author":{"gitId":"aaapppsss"},"content":"        assertEquals(\"Calorie Goal: 2000 \" + System.lineSeparator()","lastModifiedDate":"2021-10-26"},{"lineNumber":166,"author":{"gitId":"aaapppsss"},"content":"                + \"Gender: m\" + System.lineSeparator()","lastModifiedDate":"2021-10-26"},{"lineNumber":167,"author":{"gitId":"aaapppsss"},"content":"                + \"Age: 18\" + System.lineSeparator()","lastModifiedDate":"2021-10-26"},{"lineNumber":168,"author":{"gitId":"aaapppsss"},"content":"                + \"Weight: 65.0\" + System.lineSeparator()","lastModifiedDate":"2021-10-26"},{"lineNumber":169,"author":{"gitId":"aaapppsss"},"content":"                + \"Height: 180\", user.getUserDataDisplay());","lastModifiedDate":"2021-11-06"},{"lineNumber":170,"author":{"gitId":"aaapppsss"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":171,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":172,"author":{"gitId":"aaapppsss"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":173,"author":{"gitId":"aaapppsss"},"content":"    void convertUserDataToString_validUserData_success() {","lastModifiedDate":"2021-10-26"},{"lineNumber":174,"author":{"gitId":"aaapppsss"},"content":"        User user \u003d initialiseUser();","lastModifiedDate":"2021-11-06"},{"lineNumber":175,"author":{"gitId":"aaapppsss"},"content":"        assertEquals(\"2000 | m | 18 | 180 | 65.0\", user.convertUserDataToString());","lastModifiedDate":"2021-10-26"},{"lineNumber":176,"author":{"gitId":"aaapppsss"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":177,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":178,"author":{"gitId":"aaapppsss"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":179,"author":{"gitId":"aaapppsss"},"content":"    void convertWeightDataToString_weightEntriesExist_success() {","lastModifiedDate":"2021-10-26"},{"lineNumber":180,"author":{"gitId":"aaapppsss"},"content":"        User user \u003d initialiseUser();","lastModifiedDate":"2021-11-06"},{"lineNumber":181,"author":{"gitId":"aaapppsss"},"content":"        user.addToWeightRecords(new WeightRecord(70, LocalDate.parse(\"2001-10-03\")));","lastModifiedDate":"2021-11-06"},{"lineNumber":182,"author":{"gitId":"aaapppsss"},"content":"        user.addToWeightRecords(new WeightRecord(65, LocalDate.parse(\"2001-10-04\")));","lastModifiedDate":"2021-11-06"},{"lineNumber":183,"author":{"gitId":"aaapppsss"},"content":"        assertEquals(\"70.0 | 2001-10-03\" + System.lineSeparator()","lastModifiedDate":"2021-10-26"},{"lineNumber":184,"author":{"gitId":"aaapppsss"},"content":"                + \"65.0 | 2001-10-04\" + System.lineSeparator(), user.convertWeightDataToString());","lastModifiedDate":"2021-10-26"},{"lineNumber":185,"author":{"gitId":"aaapppsss"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":186,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":187,"author":{"gitId":"aaapppsss"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":188,"author":{"gitId":"aaapppsss"},"content":"    void convertWeightDataToString_noWeightEntries_success() {","lastModifiedDate":"2021-10-26"},{"lineNumber":189,"author":{"gitId":"aaapppsss"},"content":"        User user \u003d initialiseUser();","lastModifiedDate":"2021-11-06"},{"lineNumber":190,"author":{"gitId":"aaapppsss"},"content":"        assertEquals(\"\", user.convertWeightDataToString());","lastModifiedDate":"2021-10-26"},{"lineNumber":191,"author":{"gitId":"aaapppsss"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":192,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":193,"author":{"gitId":"aaapppsss"},"content":"}","lastModifiedDate":"2021-10-09"}],"authorContributionMap":{"siyuancheng178":1,"aaapppsss":190,"praj-bellakka":2}},{"path":"src/test/java/fitnus/command/ViewMonthSummaryCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"siyuancheng178"},"content":"package fitnus.command;","lastModifiedDate":"2021-11-04"},{"lineNumber":2,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":3,"author":{"gitId":"siyuancheng178"},"content":"import fitnus.database.EntryDatabase;","lastModifiedDate":"2021-11-04"},{"lineNumber":4,"author":{"gitId":"siyuancheng178"},"content":"import fitnus.database.FoodDatabase;","lastModifiedDate":"2021-11-04"},{"lineNumber":5,"author":{"gitId":"siyuancheng178"},"content":"import fitnus.database.MealPlanDatabase;","lastModifiedDate":"2021-11-04"},{"lineNumber":6,"author":{"gitId":"siyuancheng178"},"content":"import fitnus.exception.FitNusException;","lastModifiedDate":"2021-11-04"},{"lineNumber":7,"author":{"gitId":"siyuancheng178"},"content":"import fitnus.tracker.Gender;","lastModifiedDate":"2021-11-04"},{"lineNumber":8,"author":{"gitId":"siyuancheng178"},"content":"import fitnus.utility.User;","lastModifiedDate":"2021-11-04"},{"lineNumber":9,"author":{"gitId":"siyuancheng178"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-11-04"},{"lineNumber":10,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":11,"author":{"gitId":"siyuancheng178"},"content":"import java.io.BufferedReader;","lastModifiedDate":"2021-11-04"},{"lineNumber":12,"author":{"gitId":"siyuancheng178"},"content":"import java.io.FileInputStream;","lastModifiedDate":"2021-11-04"},{"lineNumber":13,"author":{"gitId":"siyuancheng178"},"content":"import java.io.InputStreamReader;","lastModifiedDate":"2021-11-04"},{"lineNumber":14,"author":{"gitId":"siyuancheng178"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-11-04"},{"lineNumber":15,"author":{"gitId":"siyuancheng178"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2021-11-04"},{"lineNumber":16,"author":{"gitId":"siyuancheng178"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-11-05"},{"lineNumber":17,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":18,"author":{"gitId":"siyuancheng178"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-11-04"},{"lineNumber":19,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":20,"author":{"gitId":"siyuancheng178"},"content":"class ViewMonthSummaryCommandTest {","lastModifiedDate":"2021-11-04"},{"lineNumber":21,"author":{"gitId":"siyuancheng178"},"content":"    private static final String ROOT \u003d System.getProperty(\"user.dir\");","lastModifiedDate":"2021-11-04"},{"lineNumber":22,"author":{"gitId":"siyuancheng178"},"content":"    private static final Path FILE_PATH_ENTRY_DATA \u003d Paths.get(ROOT, \"testing-data\", \"month_entry_month_data.txt\");","lastModifiedDate":"2021-11-04"},{"lineNumber":23,"author":{"gitId":"siyuancheng178"},"content":"    private static final Path EMPTY_DATA \u003d Paths.get(ROOT, \"testing-data\", \"empty_data.txt\");","lastModifiedDate":"2021-11-04"},{"lineNumber":24,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":25,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":26,"author":{"gitId":"siyuancheng178"},"content":"    @Test","lastModifiedDate":"2021-11-04"},{"lineNumber":27,"author":{"gitId":"siyuancheng178"},"content":"    public void testMothReport_currentMonthData_validMonthSummary() throws FitNusException {","lastModifiedDate":"2021-11-04"},{"lineNumber":28,"author":{"gitId":"siyuancheng178"},"content":"        EntryDatabase database \u003d new EntryDatabase();","lastModifiedDate":"2021-11-04"},{"lineNumber":29,"author":{"gitId":"siyuancheng178"},"content":"        try {","lastModifiedDate":"2021-11-04"},{"lineNumber":30,"author":{"gitId":"siyuancheng178"},"content":"            FileInputStream stream;","lastModifiedDate":"2021-11-04"},{"lineNumber":31,"author":{"gitId":"siyuancheng178"},"content":"            stream \u003d new FileInputStream(FILE_PATH_ENTRY_DATA.toString());","lastModifiedDate":"2021-11-04"},{"lineNumber":32,"author":{"gitId":"siyuancheng178"},"content":"            BufferedReader reader \u003d new BufferedReader(new InputStreamReader(stream));","lastModifiedDate":"2021-11-04"},{"lineNumber":33,"author":{"gitId":"siyuancheng178"},"content":"            database.preloadDatabase(reader);","lastModifiedDate":"2021-11-04"},{"lineNumber":34,"author":{"gitId":"siyuancheng178"},"content":"            reader.close();","lastModifiedDate":"2021-11-04"},{"lineNumber":35,"author":{"gitId":"siyuancheng178"},"content":"        } catch (Exception e) {","lastModifiedDate":"2021-11-04"},{"lineNumber":36,"author":{"gitId":"siyuancheng178"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-11-04"},{"lineNumber":37,"author":{"gitId":"siyuancheng178"},"content":"        } ","lastModifiedDate":"2021-11-04"},{"lineNumber":38,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":39,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":40,"author":{"gitId":"siyuancheng178"},"content":"        String output \u003d String.format(\"Average Daily Calorie Intake: %d\\n\", 6144 / LocalDate.now().getDayOfMonth());","lastModifiedDate":"2021-11-05"},{"lineNumber":41,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":42,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":43,"author":{"gitId":"siyuancheng178"},"content":"        output +\u003d String.format(\"Food eaten most: [cantaloupe, chick] [2 time(s)]\\n\");","lastModifiedDate":"2021-11-04"},{"lineNumber":44,"author":{"gitId":"siyuancheng178"},"content":"        output +\u003d String.format(\"Food eaten least: [bananas, beef, best choice sugar, broccoli, butter, \"","lastModifiedDate":"2021-11-04"},{"lineNumber":45,"author":{"gitId":"siyuancheng178"},"content":"                + \"ham, lunchmeat, milk, peanut butter, pickles, protein, sausage, spinach, turkey] [1 time(s)]\");","lastModifiedDate":"2021-11-04"},{"lineNumber":46,"author":{"gitId":"siyuancheng178"},"content":"        assertEquals(output, new ViewMonthSummaryCommand().execute(database, new FoodDatabase(),","lastModifiedDate":"2021-11-04"},{"lineNumber":47,"author":{"gitId":"brendanlsz"},"content":"                new MealPlanDatabase(), new User(2500, Gender.MALE, 25, 185, 80)));","lastModifiedDate":"2021-11-05"},{"lineNumber":48,"author":{"gitId":"siyuancheng178"},"content":"    }","lastModifiedDate":"2021-11-04"},{"lineNumber":49,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":50,"author":{"gitId":"siyuancheng178"},"content":"    @Test","lastModifiedDate":"2021-11-04"},{"lineNumber":51,"author":{"gitId":"siyuancheng178"},"content":"    public void testMonthSummary_emptyData_warning() throws FitNusException {","lastModifiedDate":"2021-11-04"},{"lineNumber":52,"author":{"gitId":"siyuancheng178"},"content":"        EntryDatabase database \u003d new EntryDatabase();","lastModifiedDate":"2021-11-04"},{"lineNumber":53,"author":{"gitId":"siyuancheng178"},"content":"        try {","lastModifiedDate":"2021-11-04"},{"lineNumber":54,"author":{"gitId":"siyuancheng178"},"content":"            FileInputStream stream;","lastModifiedDate":"2021-11-04"},{"lineNumber":55,"author":{"gitId":"siyuancheng178"},"content":"            stream \u003d new FileInputStream(EMPTY_DATA.toString());","lastModifiedDate":"2021-11-04"},{"lineNumber":56,"author":{"gitId":"siyuancheng178"},"content":"            BufferedReader reader \u003d new BufferedReader(new InputStreamReader(stream));","lastModifiedDate":"2021-11-04"},{"lineNumber":57,"author":{"gitId":"siyuancheng178"},"content":"            database.preloadDatabase(reader);","lastModifiedDate":"2021-11-04"},{"lineNumber":58,"author":{"gitId":"siyuancheng178"},"content":"            reader.close();","lastModifiedDate":"2021-11-04"},{"lineNumber":59,"author":{"gitId":"siyuancheng178"},"content":"        } catch (Exception e) {","lastModifiedDate":"2021-11-04"},{"lineNumber":60,"author":{"gitId":"siyuancheng178"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-11-04"},{"lineNumber":61,"author":{"gitId":"siyuancheng178"},"content":"        }","lastModifiedDate":"2021-11-04"},{"lineNumber":62,"author":{"gitId":"siyuancheng178"},"content":"        assertEquals(\"No entries found!\", new ViewMonthSummaryCommand().execute(database, new FoodDatabase(),","lastModifiedDate":"2021-11-04"},{"lineNumber":63,"author":{"gitId":"siyuancheng178"},"content":"                new MealPlanDatabase(), new User(2500, Gender.MALE, 25, 185, 80)));","lastModifiedDate":"2021-11-04"},{"lineNumber":64,"author":{"gitId":"siyuancheng178"},"content":"    }","lastModifiedDate":"2021-11-04"},{"lineNumber":65,"author":{"gitId":"siyuancheng178"},"content":"}","lastModifiedDate":"2021-11-04"}],"authorContributionMap":{"brendanlsz":1,"siyuancheng178":64}},{"path":"src/test/java/fitnus/command/ViewSuggestionsCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"brendanlsz"},"content":"package fitnus.command;","lastModifiedDate":"2021-11-06"},{"lineNumber":2,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":3,"author":{"gitId":"brendanlsz"},"content":"import fitnus.database.EntryDatabase;","lastModifiedDate":"2021-11-06"},{"lineNumber":4,"author":{"gitId":"brendanlsz"},"content":"import fitnus.database.FoodDatabase;","lastModifiedDate":"2021-11-06"},{"lineNumber":5,"author":{"gitId":"brendanlsz"},"content":"import fitnus.database.MealPlanDatabase;","lastModifiedDate":"2021-11-06"},{"lineNumber":6,"author":{"gitId":"brendanlsz"},"content":"import fitnus.exception.FitNusException;","lastModifiedDate":"2021-11-06"},{"lineNumber":7,"author":{"gitId":"brendanlsz"},"content":"import fitnus.tracker.Food;","lastModifiedDate":"2021-11-06"},{"lineNumber":8,"author":{"gitId":"brendanlsz"},"content":"import fitnus.tracker.Gender;","lastModifiedDate":"2021-11-06"},{"lineNumber":9,"author":{"gitId":"brendanlsz"},"content":"import fitnus.utility.User;","lastModifiedDate":"2021-11-06"},{"lineNumber":10,"author":{"gitId":"brendanlsz"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-11-06"},{"lineNumber":11,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":12,"author":{"gitId":"brendanlsz"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-11-06"},{"lineNumber":13,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":14,"author":{"gitId":"brendanlsz"},"content":"class ViewSuggestionsCommandTest {","lastModifiedDate":"2021-11-06"},{"lineNumber":15,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":16,"author":{"gitId":"brendanlsz"},"content":"    @Test","lastModifiedDate":"2021-11-06"},{"lineNumber":17,"author":{"gitId":"brendanlsz"},"content":"    void testViewSuggestionsCommand_hasMatchingSuggestions_viewSuggestionsSuccess()","lastModifiedDate":"2021-11-06"},{"lineNumber":18,"author":{"gitId":"brendanlsz"},"content":"            throws FitNusException {","lastModifiedDate":"2021-11-06"},{"lineNumber":19,"author":{"gitId":"brendanlsz"},"content":"        final User user \u003d new User(2000, Gender.MALE, 18, 180, 65);","lastModifiedDate":"2021-11-06"},{"lineNumber":20,"author":{"gitId":"brendanlsz"},"content":"        final FoodDatabase fd \u003d new FoodDatabase();","lastModifiedDate":"2021-11-06"},{"lineNumber":21,"author":{"gitId":"brendanlsz"},"content":"        final EntryDatabase ed \u003d new EntryDatabase();","lastModifiedDate":"2021-11-06"},{"lineNumber":22,"author":{"gitId":"brendanlsz"},"content":"        final MealPlanDatabase md \u003d new MealPlanDatabase();","lastModifiedDate":"2021-11-06"},{"lineNumber":23,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":24,"author":{"gitId":"brendanlsz"},"content":"        fd.addFood(new Food(\"food1\", 100, Food.FoodType.OTHERS));","lastModifiedDate":"2021-11-06"},{"lineNumber":25,"author":{"gitId":"brendanlsz"},"content":"        assertEquals(100, fd.getFoodAtIndex(1).getCalories());","lastModifiedDate":"2021-11-06"},{"lineNumber":26,"author":{"gitId":"brendanlsz"},"content":"        assertEquals(\"food1\", fd.getFoodAtIndex(1).getName());","lastModifiedDate":"2021-11-06"},{"lineNumber":27,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":28,"author":{"gitId":"brendanlsz"},"content":"        fd.addFood(\"food2\", 100, Food.FoodType.MEAL);","lastModifiedDate":"2021-11-06"},{"lineNumber":29,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":30,"author":{"gitId":"brendanlsz"},"content":"        fd.addFood(\"food3\", 200, Food.FoodType.MEAL);","lastModifiedDate":"2021-11-06"},{"lineNumber":31,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":32,"author":{"gitId":"brendanlsz"},"content":"        ViewSuggestionsCommand command \u003d new ViewSuggestionsCommand(Food.FoodType.MEAL, true);","lastModifiedDate":"2021-11-06"},{"lineNumber":33,"author":{"gitId":"brendanlsz"},"content":"        assertEquals(\"Found \" + 2 + \" suggestions\", command.execute(ed, fd, md, user));","lastModifiedDate":"2021-11-06"},{"lineNumber":34,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":35,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":36,"author":{"gitId":"brendanlsz"},"content":"    @Test","lastModifiedDate":"2021-11-06"},{"lineNumber":37,"author":{"gitId":"brendanlsz"},"content":"    void testViewSuggestionsCommand_hasNoMatchingSuggestions_viewSuggestionsSuccess()","lastModifiedDate":"2021-11-06"},{"lineNumber":38,"author":{"gitId":"brendanlsz"},"content":"            throws FitNusException {","lastModifiedDate":"2021-11-06"},{"lineNumber":39,"author":{"gitId":"brendanlsz"},"content":"        final User user \u003d new User(2000, Gender.MALE, 18, 180, 65);","lastModifiedDate":"2021-11-06"},{"lineNumber":40,"author":{"gitId":"brendanlsz"},"content":"        final FoodDatabase fd \u003d new FoodDatabase();","lastModifiedDate":"2021-11-06"},{"lineNumber":41,"author":{"gitId":"brendanlsz"},"content":"        final EntryDatabase ed \u003d new EntryDatabase();","lastModifiedDate":"2021-11-06"},{"lineNumber":42,"author":{"gitId":"brendanlsz"},"content":"        final MealPlanDatabase md \u003d new MealPlanDatabase();","lastModifiedDate":"2021-11-06"},{"lineNumber":43,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":44,"author":{"gitId":"brendanlsz"},"content":"        fd.addFood(new Food(\"food1\", 100, Food.FoodType.OTHERS));","lastModifiedDate":"2021-11-06"},{"lineNumber":45,"author":{"gitId":"brendanlsz"},"content":"        assertEquals(100, fd.getFoodAtIndex(1).getCalories());","lastModifiedDate":"2021-11-06"},{"lineNumber":46,"author":{"gitId":"brendanlsz"},"content":"        assertEquals(\"food1\", fd.getFoodAtIndex(1).getName());","lastModifiedDate":"2021-11-06"},{"lineNumber":47,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":48,"author":{"gitId":"brendanlsz"},"content":"        fd.addFood(\"food2\", 100, Food.FoodType.MEAL);","lastModifiedDate":"2021-11-06"},{"lineNumber":49,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":50,"author":{"gitId":"brendanlsz"},"content":"        fd.addFood(\"food3\", 200, Food.FoodType.MEAL);","lastModifiedDate":"2021-11-06"},{"lineNumber":51,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":52,"author":{"gitId":"brendanlsz"},"content":"        ViewSuggestionsCommand command \u003d new ViewSuggestionsCommand(Food.FoodType.SNACK, true);","lastModifiedDate":"2021-11-06"},{"lineNumber":53,"author":{"gitId":"brendanlsz"},"content":"        assertEquals(\"Found \" + 0 + \" suggestions\", command.execute(ed, fd, md, user));","lastModifiedDate":"2021-11-06"},{"lineNumber":54,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":55,"author":{"gitId":"brendanlsz"},"content":"}","lastModifiedDate":"2021-11-06"}],"authorContributionMap":{"brendanlsz":55}},{"path":"src/test/java/fitnus/command/ViewWeekSummaryCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"siyuancheng178"},"content":"package fitnus.command;","lastModifiedDate":"2021-11-04"},{"lineNumber":2,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":3,"author":{"gitId":"siyuancheng178"},"content":"import fitnus.database.EntryDatabase;","lastModifiedDate":"2021-11-04"},{"lineNumber":4,"author":{"gitId":"siyuancheng178"},"content":"import fitnus.database.FoodDatabase;","lastModifiedDate":"2021-11-04"},{"lineNumber":5,"author":{"gitId":"siyuancheng178"},"content":"import fitnus.database.MealPlanDatabase;","lastModifiedDate":"2021-11-04"},{"lineNumber":6,"author":{"gitId":"siyuancheng178"},"content":"import fitnus.exception.FitNusException;","lastModifiedDate":"2021-11-04"},{"lineNumber":7,"author":{"gitId":"siyuancheng178"},"content":"import fitnus.tracker.Entry;","lastModifiedDate":"2021-11-04"},{"lineNumber":8,"author":{"gitId":"siyuancheng178"},"content":"import fitnus.tracker.Food;","lastModifiedDate":"2021-11-04"},{"lineNumber":9,"author":{"gitId":"siyuancheng178"},"content":"import fitnus.tracker.Gender;","lastModifiedDate":"2021-11-04"},{"lineNumber":10,"author":{"gitId":"siyuancheng178"},"content":"import fitnus.tracker.MealType;","lastModifiedDate":"2021-11-04"},{"lineNumber":11,"author":{"gitId":"siyuancheng178"},"content":"import fitnus.utility.User;","lastModifiedDate":"2021-11-04"},{"lineNumber":12,"author":{"gitId":"siyuancheng178"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-11-04"},{"lineNumber":13,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":14,"author":{"gitId":"siyuancheng178"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-11-04"},{"lineNumber":15,"author":{"gitId":"siyuancheng178"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2021-11-04"},{"lineNumber":16,"author":{"gitId":"siyuancheng178"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-11-04"},{"lineNumber":17,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":18,"author":{"gitId":"siyuancheng178"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-11-04"},{"lineNumber":19,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":20,"author":{"gitId":"siyuancheng178"},"content":"class ViewWeekSummaryCommandTest {","lastModifiedDate":"2021-11-04"},{"lineNumber":21,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":22,"author":{"gitId":"siyuancheng178"},"content":"    private static final String ROOT \u003d System.getProperty(\"user.dir\");","lastModifiedDate":"2021-11-04"},{"lineNumber":23,"author":{"gitId":"siyuancheng178"},"content":"    private static final Path FILE_PATH_ENTRY_DATA \u003d Paths.get(ROOT, \"data\", \"entry.txt\");","lastModifiedDate":"2021-11-04"},{"lineNumber":24,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":25,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":26,"author":{"gitId":"siyuancheng178"},"content":"    @Test","lastModifiedDate":"2021-11-04"},{"lineNumber":27,"author":{"gitId":"siyuancheng178"},"content":"    public void testWeekSummaryCommand_validInput_weeklyReport() throws FitNusException {","lastModifiedDate":"2021-11-04"},{"lineNumber":28,"author":{"gitId":"siyuancheng178"},"content":"        EntryDatabase database \u003d new EntryDatabase();","lastModifiedDate":"2021-11-04"},{"lineNumber":29,"author":{"gitId":"siyuancheng178"},"content":"        LocalDate today \u003d LocalDate.now();","lastModifiedDate":"2021-11-04"},{"lineNumber":30,"author":{"gitId":"siyuancheng178"},"content":"        database.addEntry(new Entry(MealType.BREAKFAST, new Food(\"butter\", 143, Food.FoodType.OTHERS), today));","lastModifiedDate":"2021-11-04"},{"lineNumber":31,"author":{"gitId":"siyuancheng178"},"content":"        database.addEntry(new Entry(MealType.LUNCH, new Food(\"beans\", 454, Food.FoodType.MEAL), today));","lastModifiedDate":"2021-11-04"},{"lineNumber":32,"author":{"gitId":"siyuancheng178"},"content":"        database.addEntry(new Entry(MealType.DINNER, new Food(\"bacon\", 608, Food.FoodType.MEAL), today));","lastModifiedDate":"2021-11-04"},{"lineNumber":33,"author":{"gitId":"siyuancheng178"},"content":"        database.addEntry(new Entry(MealType.SNACK, new Food(\"milk\", 198, Food.FoodType.BEVERAGE), today));","lastModifiedDate":"2021-11-04"},{"lineNumber":34,"author":{"gitId":"siyuancheng178"},"content":"        database.addEntry(new Entry(MealType.SNACK, new Food(\"milk\", 198, Food.FoodType.BEVERAGE), today));","lastModifiedDate":"2021-11-04"},{"lineNumber":35,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":36,"author":{"gitId":"siyuancheng178"},"content":"        database.addEntry(new Entry(MealType.BREAKFAST, new Food(\"pears\", 153, Food.FoodType.OTHERS),","lastModifiedDate":"2021-11-04"},{"lineNumber":37,"author":{"gitId":"siyuancheng178"},"content":"                today.minusDays(1)));","lastModifiedDate":"2021-11-04"},{"lineNumber":38,"author":{"gitId":"siyuancheng178"},"content":"        database.addEntry(new Entry(MealType.LUNCH, new Food(\"chicken rice\", 649, Food.FoodType.MEAL),","lastModifiedDate":"2021-11-04"},{"lineNumber":39,"author":{"gitId":"siyuancheng178"},"content":"                today.minusDays(1)));","lastModifiedDate":"2021-11-04"},{"lineNumber":40,"author":{"gitId":"siyuancheng178"},"content":"        database.addEntry(new Entry(MealType.DINNER, new Food(\"broccoli\", 674, Food.FoodType.MEAL),","lastModifiedDate":"2021-11-04"},{"lineNumber":41,"author":{"gitId":"siyuancheng178"},"content":"                today.minusDays(1)));","lastModifiedDate":"2021-11-04"},{"lineNumber":42,"author":{"gitId":"siyuancheng178"},"content":"        database.addEntry(new Entry(MealType.SNACK, new Food(\"best choice sugar\", 165, Food.FoodType.BEVERAGE),","lastModifiedDate":"2021-11-04"},{"lineNumber":43,"author":{"gitId":"siyuancheng178"},"content":"                today.minusDays(1)));","lastModifiedDate":"2021-11-04"},{"lineNumber":44,"author":{"gitId":"siyuancheng178"},"content":"        database.addEntry(new Entry(MealType.SNACK, new Food(\"bread\", 265, Food.FoodType.SNACK),","lastModifiedDate":"2021-11-04"},{"lineNumber":45,"author":{"gitId":"siyuancheng178"},"content":"                today.minusDays(1)));","lastModifiedDate":"2021-11-04"},{"lineNumber":46,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":47,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":48,"author":{"gitId":"siyuancheng178"},"content":"        database.addEntry(new Entry(MealType.BREAKFAST, new Food(\"soy mild\", 112, Food.FoodType.BEVERAGE),","lastModifiedDate":"2021-11-04"},{"lineNumber":49,"author":{"gitId":"siyuancheng178"},"content":"                today.minusDays(2)));","lastModifiedDate":"2021-11-04"},{"lineNumber":50,"author":{"gitId":"siyuancheng178"},"content":"        database.addEntry(new Entry(MealType.LUNCH, new Food(\"beef\", 680, Food.FoodType.MEAL),","lastModifiedDate":"2021-11-04"},{"lineNumber":51,"author":{"gitId":"siyuancheng178"},"content":"                today.minusDays(2)));","lastModifiedDate":"2021-11-04"},{"lineNumber":52,"author":{"gitId":"siyuancheng178"},"content":"        database.addEntry(new Entry(MealType.DINNER, new Food(\"tamale\", 689, Food.FoodType.MEAL),","lastModifiedDate":"2021-11-04"},{"lineNumber":53,"author":{"gitId":"siyuancheng178"},"content":"                today.minusDays(2)));","lastModifiedDate":"2021-11-04"},{"lineNumber":54,"author":{"gitId":"siyuancheng178"},"content":"        database.addEntry(new Entry(MealType.SNACK, new Food(\"pickles\", 160, Food.FoodType.OTHERS),","lastModifiedDate":"2021-11-04"},{"lineNumber":55,"author":{"gitId":"siyuancheng178"},"content":"                today.minusDays(2)));","lastModifiedDate":"2021-11-04"},{"lineNumber":56,"author":{"gitId":"siyuancheng178"},"content":"        database.addEntry(new Entry(MealType.SNACK, new Food(\"cheese\", 109, Food.FoodType.OTHERS),","lastModifiedDate":"2021-11-04"},{"lineNumber":57,"author":{"gitId":"siyuancheng178"},"content":"                today.minusDays(2)));","lastModifiedDate":"2021-11-04"},{"lineNumber":58,"author":{"gitId":"siyuancheng178"},"content":"        database.addEntry(new Entry(MealType.SNACK, new Food(\"sausage\", 221, Food.FoodType.SNACK),","lastModifiedDate":"2021-11-04"},{"lineNumber":59,"author":{"gitId":"siyuancheng178"},"content":"                today.minusDays(2)));","lastModifiedDate":"2021-11-04"},{"lineNumber":60,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":61,"author":{"gitId":"siyuancheng178"},"content":"        database.addEntry(new Entry(MealType.BREAKFAST, new Food(\"milk\", 198, Food.FoodType.BEVERAGE),","lastModifiedDate":"2021-11-04"},{"lineNumber":62,"author":{"gitId":"siyuancheng178"},"content":"                today.minusDays(3)));","lastModifiedDate":"2021-11-04"},{"lineNumber":63,"author":{"gitId":"siyuancheng178"},"content":"        database.addEntry(new Entry(MealType.LUNCH, new Food(\"beef\", 680, Food.FoodType.MEAL),","lastModifiedDate":"2021-11-04"},{"lineNumber":64,"author":{"gitId":"siyuancheng178"},"content":"                today.minusDays(3)));","lastModifiedDate":"2021-11-04"},{"lineNumber":65,"author":{"gitId":"siyuancheng178"},"content":"        database.addEntry(new Entry(MealType.DINNER, new Food(\"tuna\", 538, Food.FoodType.MEAL),","lastModifiedDate":"2021-11-04"},{"lineNumber":66,"author":{"gitId":"siyuancheng178"},"content":"                today.minusDays(3)));","lastModifiedDate":"2021-11-04"},{"lineNumber":67,"author":{"gitId":"siyuancheng178"},"content":"        database.addEntry(new Entry(MealType.SNACK, new Food(\"hot dogs\", 185, Food.FoodType.SNACK),","lastModifiedDate":"2021-11-04"},{"lineNumber":68,"author":{"gitId":"siyuancheng178"},"content":"                today.minusDays(3)));","lastModifiedDate":"2021-11-04"},{"lineNumber":69,"author":{"gitId":"siyuancheng178"},"content":"        database.addEntry(new Entry(MealType.SNACK, new Food(\"orange juice\", 27, Food.FoodType.BEVERAGE),","lastModifiedDate":"2021-11-04"},{"lineNumber":70,"author":{"gitId":"siyuancheng178"},"content":"                today.minusDays(3)));","lastModifiedDate":"2021-11-04"},{"lineNumber":71,"author":{"gitId":"siyuancheng178"},"content":"        database.addEntry(new Entry(MealType.SNACK, new Food(\"apples\", 66, Food.FoodType.OTHERS),","lastModifiedDate":"2021-11-04"},{"lineNumber":72,"author":{"gitId":"siyuancheng178"},"content":"                today.minusDays(3)));","lastModifiedDate":"2021-11-04"},{"lineNumber":73,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":74,"author":{"gitId":"siyuancheng178"},"content":"        database.addEntry(new Entry(MealType.BREAKFAST, new Food(\"peaches\", 64, Food.FoodType.OTHERS),","lastModifiedDate":"2021-11-04"},{"lineNumber":75,"author":{"gitId":"siyuancheng178"},"content":"                today.minusDays(4)));","lastModifiedDate":"2021-11-04"},{"lineNumber":76,"author":{"gitId":"siyuancheng178"},"content":"        database.addEntry(new Entry(MealType.LUNCH, new Food(\"carrots\", 430, Food.FoodType.MEAL),","lastModifiedDate":"2021-11-04"},{"lineNumber":77,"author":{"gitId":"siyuancheng178"},"content":"                today.minusDays(4)));","lastModifiedDate":"2021-11-04"},{"lineNumber":78,"author":{"gitId":"siyuancheng178"},"content":"        database.addEntry(new Entry(MealType.DINNER, new Food(\"pollock\", 465, Food.FoodType.MEAL),","lastModifiedDate":"2021-11-04"},{"lineNumber":79,"author":{"gitId":"siyuancheng178"},"content":"                today.minusDays(4)));","lastModifiedDate":"2021-11-04"},{"lineNumber":80,"author":{"gitId":"siyuancheng178"},"content":"        database.addEntry(new Entry(MealType.SNACK, new Food(\"cheese\", 109, Food.FoodType.OTHERS),","lastModifiedDate":"2021-11-04"},{"lineNumber":81,"author":{"gitId":"siyuancheng178"},"content":"                today.minusDays(4)));","lastModifiedDate":"2021-11-04"},{"lineNumber":82,"author":{"gitId":"siyuancheng178"},"content":"        database.addEntry(new Entry(MealType.SNACK, new Food(\"orange juice\", 27, Food.FoodType.BEVERAGE),","lastModifiedDate":"2021-11-04"},{"lineNumber":83,"author":{"gitId":"siyuancheng178"},"content":"                today.minusDays(4)));","lastModifiedDate":"2021-11-04"},{"lineNumber":84,"author":{"gitId":"siyuancheng178"},"content":"        database.addEntry(new Entry(MealType.SNACK, new Food(\"pickles\", 160, Food.FoodType.OTHERS),","lastModifiedDate":"2021-11-04"},{"lineNumber":85,"author":{"gitId":"siyuancheng178"},"content":"                today.minusDays(4)));","lastModifiedDate":"2021-11-04"},{"lineNumber":86,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":87,"author":{"gitId":"siyuancheng178"},"content":"        database.addEntry(new Entry(MealType.BREAKFAST, new Food(\"protein\", 141, Food.FoodType.OTHERS),","lastModifiedDate":"2021-11-04"},{"lineNumber":88,"author":{"gitId":"siyuancheng178"},"content":"                today.minusDays(5)));","lastModifiedDate":"2021-11-04"},{"lineNumber":89,"author":{"gitId":"siyuancheng178"},"content":"        database.addEntry(new Entry(MealType.LUNCH, new Food(\"bacon\", 608, Food.FoodType.MEAL),","lastModifiedDate":"2021-11-04"},{"lineNumber":90,"author":{"gitId":"siyuancheng178"},"content":"                today.minusDays(5)));","lastModifiedDate":"2021-11-04"},{"lineNumber":91,"author":{"gitId":"siyuancheng178"},"content":"        database.addEntry(new Entry(MealType.DINNER, new Food(\"beef\", 680, Food.FoodType.MEAL),","lastModifiedDate":"2021-11-04"},{"lineNumber":92,"author":{"gitId":"siyuancheng178"},"content":"                today.minusDays(5)));","lastModifiedDate":"2021-11-04"},{"lineNumber":93,"author":{"gitId":"siyuancheng178"},"content":"        database.addEntry(new Entry(MealType.SNACK, new Food(\"bananas\", 188, Food.FoodType.OTHERS),","lastModifiedDate":"2021-11-04"},{"lineNumber":94,"author":{"gitId":"siyuancheng178"},"content":"                today.minusDays(5)));","lastModifiedDate":"2021-11-04"},{"lineNumber":95,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":96,"author":{"gitId":"siyuancheng178"},"content":"        database.addEntry(new Entry(MealType.BREAKFAST, new Food(\"butter\", 143, Food.FoodType.OTHERS),","lastModifiedDate":"2021-11-04"},{"lineNumber":97,"author":{"gitId":"siyuancheng178"},"content":"                today.minusDays(6)));","lastModifiedDate":"2021-11-04"},{"lineNumber":98,"author":{"gitId":"siyuancheng178"},"content":"        database.addEntry(new Entry(MealType.LUNCH, new Food(\"carrots\", 430, Food.FoodType.MEAL),","lastModifiedDate":"2021-11-04"},{"lineNumber":99,"author":{"gitId":"siyuancheng178"},"content":"                today.minusDays(6)));","lastModifiedDate":"2021-11-04"},{"lineNumber":100,"author":{"gitId":"siyuancheng178"},"content":"        database.addEntry(new Entry(MealType.DINNER, new Food(\"ham\", 487, Food.FoodType.MEAL),","lastModifiedDate":"2021-11-04"},{"lineNumber":101,"author":{"gitId":"siyuancheng178"},"content":"                today.minusDays(6)));","lastModifiedDate":"2021-11-04"},{"lineNumber":102,"author":{"gitId":"siyuancheng178"},"content":"        database.addEntry(new Entry(MealType.SNACK, new Food(\"bread\", 265, Food.FoodType.SNACK),","lastModifiedDate":"2021-11-04"},{"lineNumber":103,"author":{"gitId":"siyuancheng178"},"content":"                today.minusDays(6)));","lastModifiedDate":"2021-11-04"},{"lineNumber":104,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":105,"author":{"gitId":"siyuancheng178"},"content":"        String output \u003d String.format(\"%s: ############# 1325\\n%s: ################ 1617\\n\"","lastModifiedDate":"2021-11-04"},{"lineNumber":106,"author":{"gitId":"siyuancheng178"},"content":"                        + \"%s: ############ 1255\\n%s: ################ 1694\\n\"","lastModifiedDate":"2021-11-04"},{"lineNumber":107,"author":{"gitId":"siyuancheng178"},"content":"                        + \"%s: ################### 1971\\n%s: ################### 1906\\n\"","lastModifiedDate":"2021-11-04"},{"lineNumber":108,"author":{"gitId":"siyuancheng178"},"content":"                        + \"%s: ################ 1601\\n\",today.minusDays(6),","lastModifiedDate":"2021-11-04"},{"lineNumber":109,"author":{"gitId":"siyuancheng178"},"content":"                        today.minusDays(5), today.minusDays(4), today.minusDays(3), today.minusDays(2),","lastModifiedDate":"2021-11-04"},{"lineNumber":110,"author":{"gitId":"siyuancheng178"},"content":"                today.minusDays(1), today);","lastModifiedDate":"2021-11-04"},{"lineNumber":111,"author":{"gitId":"siyuancheng178"},"content":"        output +\u003d String.format(\"Average Daily Calorie Intake: ################ 1624\\n\");","lastModifiedDate":"2021-11-04"},{"lineNumber":112,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":113,"author":{"gitId":"siyuancheng178"},"content":"        output +\u003d String.format(\"Food eaten most: [beef, milk] [3 time(s)]\\n\");","lastModifiedDate":"2021-11-04"},{"lineNumber":114,"author":{"gitId":"siyuancheng178"},"content":"        output +\u003d String.format(\"Food eaten least: [apples, bananas, beans, best choice sugar, \"","lastModifiedDate":"2021-11-04"},{"lineNumber":115,"author":{"gitId":"siyuancheng178"},"content":"                + \"broccoli, chicken rice, ham, hot dogs, peaches, pears, pollock, protein, sausage, \"","lastModifiedDate":"2021-11-04"},{"lineNumber":116,"author":{"gitId":"siyuancheng178"},"content":"                + \"soy mild, tamale, tuna] [1 time(s)]\");","lastModifiedDate":"2021-11-04"},{"lineNumber":117,"author":{"gitId":"siyuancheng178"},"content":"        assertEquals(output, new ViewWeekSummaryCommand().execute(database, new FoodDatabase(), new MealPlanDatabase(),","lastModifiedDate":"2021-11-04"},{"lineNumber":118,"author":{"gitId":"siyuancheng178"},"content":"                new User(2500, Gender.MALE, 25, 185, 80)));","lastModifiedDate":"2021-11-04"},{"lineNumber":119,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":120,"author":{"gitId":"siyuancheng178"},"content":"        database.addEntry(new Entry(MealType.BREAKFAST, new Food(\"butter\", 143, Food.FoodType.OTHERS),","lastModifiedDate":"2021-11-04"},{"lineNumber":121,"author":{"gitId":"siyuancheng178"},"content":"                today.minusDays(7)));","lastModifiedDate":"2021-11-04"},{"lineNumber":122,"author":{"gitId":"siyuancheng178"},"content":"        database.addEntry(new Entry(MealType.LUNCH, new Food(\"carrots\", 430, Food.FoodType.MEAL),","lastModifiedDate":"2021-11-04"},{"lineNumber":123,"author":{"gitId":"siyuancheng178"},"content":"                today.minusDays(7)));","lastModifiedDate":"2021-11-04"},{"lineNumber":124,"author":{"gitId":"siyuancheng178"},"content":"        database.addEntry(new Entry(MealType.DINNER, new Food(\"ham\", 487, Food.FoodType.MEAL),","lastModifiedDate":"2021-11-04"},{"lineNumber":125,"author":{"gitId":"siyuancheng178"},"content":"                today.minusDays(7)));","lastModifiedDate":"2021-11-04"},{"lineNumber":126,"author":{"gitId":"siyuancheng178"},"content":"        database.addEntry(new Entry(MealType.SNACK, new Food(\"bread\", 265, Food.FoodType.SNACK),","lastModifiedDate":"2021-11-04"},{"lineNumber":127,"author":{"gitId":"siyuancheng178"},"content":"                today.minusDays(7)));","lastModifiedDate":"2021-11-04"},{"lineNumber":128,"author":{"gitId":"siyuancheng178"},"content":"        assertEquals(output, new ViewWeekSummaryCommand().execute(database, new FoodDatabase(),","lastModifiedDate":"2021-11-04"},{"lineNumber":129,"author":{"gitId":"siyuancheng178"},"content":"                new MealPlanDatabase(),new User(2500, Gender.MALE, 25, 185, 80)));","lastModifiedDate":"2021-11-04"},{"lineNumber":130,"author":{"gitId":"siyuancheng178"},"content":"    }","lastModifiedDate":"2021-11-04"},{"lineNumber":131,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":132,"author":{"gitId":"siyuancheng178"},"content":"    @Test","lastModifiedDate":"2021-11-04"},{"lineNumber":133,"author":{"gitId":"siyuancheng178"},"content":"    public void testWeeklyReport_LessThanSevenDays_LessThanSevenDaysReport() throws FitNusException {","lastModifiedDate":"2021-11-04"},{"lineNumber":134,"author":{"gitId":"siyuancheng178"},"content":"        EntryDatabase database \u003d new EntryDatabase();","lastModifiedDate":"2021-11-04"},{"lineNumber":135,"author":{"gitId":"siyuancheng178"},"content":"        LocalDate today \u003d LocalDate.now();","lastModifiedDate":"2021-11-04"},{"lineNumber":136,"author":{"gitId":"siyuancheng178"},"content":"        database.addEntry(new Entry(MealType.BREAKFAST, new Food(\"butter\", 143, Food.FoodType.OTHERS),","lastModifiedDate":"2021-11-04"},{"lineNumber":137,"author":{"gitId":"siyuancheng178"},"content":"                today));","lastModifiedDate":"2021-11-04"},{"lineNumber":138,"author":{"gitId":"siyuancheng178"},"content":"        database.addEntry(new Entry(MealType.LUNCH, new Food(\"beans\", 454, Food.FoodType.MEAL),","lastModifiedDate":"2021-11-04"},{"lineNumber":139,"author":{"gitId":"siyuancheng178"},"content":"                today));","lastModifiedDate":"2021-11-04"},{"lineNumber":140,"author":{"gitId":"siyuancheng178"},"content":"        database.addEntry(new Entry(MealType.DINNER, new Food(\"bacon\", 608, Food.FoodType.MEAL),","lastModifiedDate":"2021-11-04"},{"lineNumber":141,"author":{"gitId":"siyuancheng178"},"content":"                today));","lastModifiedDate":"2021-11-04"},{"lineNumber":142,"author":{"gitId":"siyuancheng178"},"content":"        database.addEntry(new Entry(MealType.SNACK, new Food(\"milk\", 198, Food.FoodType.BEVERAGE),","lastModifiedDate":"2021-11-04"},{"lineNumber":143,"author":{"gitId":"siyuancheng178"},"content":"                today));","lastModifiedDate":"2021-11-04"},{"lineNumber":144,"author":{"gitId":"siyuancheng178"},"content":"        database.addEntry(new Entry(MealType.SNACK, new Food(\"milk\", 198, Food.FoodType.BEVERAGE),","lastModifiedDate":"2021-11-04"},{"lineNumber":145,"author":{"gitId":"siyuancheng178"},"content":"                today));","lastModifiedDate":"2021-11-04"},{"lineNumber":146,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":147,"author":{"gitId":"siyuancheng178"},"content":"        database.addEntry(new Entry(MealType.BREAKFAST, new Food(\"pears\", 153, Food.FoodType.OTHERS),","lastModifiedDate":"2021-11-04"},{"lineNumber":148,"author":{"gitId":"siyuancheng178"},"content":"                today.minusDays(1)));","lastModifiedDate":"2021-11-04"},{"lineNumber":149,"author":{"gitId":"siyuancheng178"},"content":"        database.addEntry(new Entry(MealType.LUNCH, new Food(\"chicken rice\", 649, Food.FoodType.MEAL),","lastModifiedDate":"2021-11-04"},{"lineNumber":150,"author":{"gitId":"siyuancheng178"},"content":"                today.minusDays(1)));","lastModifiedDate":"2021-11-04"},{"lineNumber":151,"author":{"gitId":"siyuancheng178"},"content":"        database.addEntry(new Entry(MealType.DINNER, new Food(\"broccoli\", 674, Food.FoodType.MEAL),","lastModifiedDate":"2021-11-04"},{"lineNumber":152,"author":{"gitId":"siyuancheng178"},"content":"                today.minusDays(1)));","lastModifiedDate":"2021-11-04"},{"lineNumber":153,"author":{"gitId":"siyuancheng178"},"content":"        database.addEntry(new Entry(MealType.SNACK, new Food(\"best choice sugar\", 165,","lastModifiedDate":"2021-11-04"},{"lineNumber":154,"author":{"gitId":"siyuancheng178"},"content":"                Food.FoodType.BEVERAGE), today.minusDays(1)));","lastModifiedDate":"2021-11-04"},{"lineNumber":155,"author":{"gitId":"siyuancheng178"},"content":"        database.addEntry(new Entry(MealType.SNACK, new Food(\"bread\", 265, Food.FoodType.SNACK),","lastModifiedDate":"2021-11-04"},{"lineNumber":156,"author":{"gitId":"siyuancheng178"},"content":"                today.minusDays(1)));","lastModifiedDate":"2021-11-04"},{"lineNumber":157,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":158,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":159,"author":{"gitId":"siyuancheng178"},"content":"        database.addEntry(new Entry(MealType.BREAKFAST, new Food(\"soy mild\", 112, Food.FoodType.BEVERAGE),","lastModifiedDate":"2021-11-04"},{"lineNumber":160,"author":{"gitId":"siyuancheng178"},"content":"                today.minusDays(2)));","lastModifiedDate":"2021-11-04"},{"lineNumber":161,"author":{"gitId":"siyuancheng178"},"content":"        database.addEntry(new Entry(MealType.LUNCH, new Food(\"beef\", 680, Food.FoodType.MEAL),","lastModifiedDate":"2021-11-04"},{"lineNumber":162,"author":{"gitId":"siyuancheng178"},"content":"                today.minusDays(2)));","lastModifiedDate":"2021-11-04"},{"lineNumber":163,"author":{"gitId":"siyuancheng178"},"content":"        database.addEntry(new Entry(MealType.DINNER, new Food(\"tamale\", 689, Food.FoodType.MEAL),","lastModifiedDate":"2021-11-04"},{"lineNumber":164,"author":{"gitId":"siyuancheng178"},"content":"                today.minusDays(2)));","lastModifiedDate":"2021-11-04"},{"lineNumber":165,"author":{"gitId":"siyuancheng178"},"content":"        database.addEntry(new Entry(MealType.SNACK, new Food(\"pickles\", 160, Food.FoodType.OTHERS),","lastModifiedDate":"2021-11-04"},{"lineNumber":166,"author":{"gitId":"siyuancheng178"},"content":"                today.minusDays(2)));","lastModifiedDate":"2021-11-04"},{"lineNumber":167,"author":{"gitId":"siyuancheng178"},"content":"        database.addEntry(new Entry(MealType.SNACK, new Food(\"cheese\", 109, Food.FoodType.OTHERS),","lastModifiedDate":"2021-11-04"},{"lineNumber":168,"author":{"gitId":"siyuancheng178"},"content":"                today.minusDays(2)));","lastModifiedDate":"2021-11-04"},{"lineNumber":169,"author":{"gitId":"siyuancheng178"},"content":"        database.addEntry(new Entry(MealType.SNACK, new Food(\"sausage\", 221, Food.FoodType.SNACK),","lastModifiedDate":"2021-11-04"},{"lineNumber":170,"author":{"gitId":"siyuancheng178"},"content":"                today.minusDays(2)));","lastModifiedDate":"2021-11-04"},{"lineNumber":171,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":172,"author":{"gitId":"siyuancheng178"},"content":"        String output \u003d String.format(\"%s: ################### 1971\\n%s: ################### 1906\\n\"","lastModifiedDate":"2021-11-04"},{"lineNumber":173,"author":{"gitId":"siyuancheng178"},"content":"                + \"%s: ################ 1601\\n\", today.minusDays(2), today.minusDays(1), today);","lastModifiedDate":"2021-11-04"},{"lineNumber":174,"author":{"gitId":"siyuancheng178"},"content":"        output +\u003d String.format(\"Average Daily Calorie Intake: ################## 1826\\n\");","lastModifiedDate":"2021-11-04"},{"lineNumber":175,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":176,"author":{"gitId":"siyuancheng178"},"content":"        output +\u003d String.format(\"Food eaten most: [milk] [2 time(s)]\\n\");","lastModifiedDate":"2021-11-04"},{"lineNumber":177,"author":{"gitId":"siyuancheng178"},"content":"        output +\u003d String.format(\"Food eaten least: [bacon, beans, beef, best choice sugar, bread, \"","lastModifiedDate":"2021-11-04"},{"lineNumber":178,"author":{"gitId":"siyuancheng178"},"content":"                + \"broccoli, butter, cheese, chicken rice, pears, pickles, sausage, soy mild, tamale] [1 time(s)]\");","lastModifiedDate":"2021-11-04"},{"lineNumber":179,"author":{"gitId":"siyuancheng178"},"content":"        assertEquals(output, new ViewWeekSummaryCommand().execute(database, new FoodDatabase(), new MealPlanDatabase(),","lastModifiedDate":"2021-11-04"},{"lineNumber":180,"author":{"gitId":"siyuancheng178"},"content":"                new User(2500, Gender.MALE, 25, 185, 80)));","lastModifiedDate":"2021-11-04"},{"lineNumber":181,"author":{"gitId":"siyuancheng178"},"content":"    }","lastModifiedDate":"2021-11-04"},{"lineNumber":182,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":183,"author":{"gitId":"siyuancheng178"},"content":"    @Test","lastModifiedDate":"2021-11-04"},{"lineNumber":184,"author":{"gitId":"siyuancheng178"},"content":"    public void testWeekReport_noRecord_noRecordWarning() throws FitNusException {","lastModifiedDate":"2021-11-04"},{"lineNumber":185,"author":{"gitId":"siyuancheng178"},"content":"        EntryDatabase database \u003d new EntryDatabase();","lastModifiedDate":"2021-11-04"},{"lineNumber":186,"author":{"gitId":"siyuancheng178"},"content":"        assertEquals(\"No entries found!\", new ViewWeekSummaryCommand().execute(database, new FoodDatabase(),","lastModifiedDate":"2021-11-04"},{"lineNumber":187,"author":{"gitId":"siyuancheng178"},"content":"                new MealPlanDatabase(),new User(2500, Gender.MALE, 25, 185, 80)));","lastModifiedDate":"2021-11-04"},{"lineNumber":188,"author":{"gitId":"siyuancheng178"},"content":"    }","lastModifiedDate":"2021-11-04"},{"lineNumber":189,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":190,"author":{"gitId":"siyuancheng178"},"content":"    @Test","lastModifiedDate":"2021-11-04"},{"lineNumber":191,"author":{"gitId":"siyuancheng178"},"content":"    public void testWeekReport_oneDayRecord_oneDayReport() throws FitNusException {","lastModifiedDate":"2021-11-04"},{"lineNumber":192,"author":{"gitId":"siyuancheng178"},"content":"        EntryDatabase database \u003d new EntryDatabase();","lastModifiedDate":"2021-11-04"},{"lineNumber":193,"author":{"gitId":"siyuancheng178"},"content":"        LocalDate today \u003d LocalDate.now();","lastModifiedDate":"2021-11-04"},{"lineNumber":194,"author":{"gitId":"siyuancheng178"},"content":"        database.addEntry(new Entry(MealType.BREAKFAST, new Food(\"butter\", 143, Food.FoodType.OTHERS),","lastModifiedDate":"2021-11-04"},{"lineNumber":195,"author":{"gitId":"siyuancheng178"},"content":"                today));","lastModifiedDate":"2021-11-04"},{"lineNumber":196,"author":{"gitId":"siyuancheng178"},"content":"        database.addEntry(new Entry(MealType.LUNCH, new Food(\"beans\", 454, Food.FoodType.MEAL),","lastModifiedDate":"2021-11-04"},{"lineNumber":197,"author":{"gitId":"siyuancheng178"},"content":"                today));","lastModifiedDate":"2021-11-04"},{"lineNumber":198,"author":{"gitId":"siyuancheng178"},"content":"        database.addEntry(new Entry(MealType.DINNER, new Food(\"bacon\", 608, Food.FoodType.MEAL),","lastModifiedDate":"2021-11-04"},{"lineNumber":199,"author":{"gitId":"siyuancheng178"},"content":"                today));","lastModifiedDate":"2021-11-04"},{"lineNumber":200,"author":{"gitId":"siyuancheng178"},"content":"        database.addEntry(new Entry(MealType.SNACK, new Food(\"milk\", 198, Food.FoodType.BEVERAGE),","lastModifiedDate":"2021-11-04"},{"lineNumber":201,"author":{"gitId":"siyuancheng178"},"content":"                today));","lastModifiedDate":"2021-11-04"},{"lineNumber":202,"author":{"gitId":"siyuancheng178"},"content":"        database.addEntry(new Entry(MealType.SNACK, new Food(\"milk\", 198, Food.FoodType.BEVERAGE),","lastModifiedDate":"2021-11-04"},{"lineNumber":203,"author":{"gitId":"siyuancheng178"},"content":"                today));","lastModifiedDate":"2021-11-04"},{"lineNumber":204,"author":{"gitId":"siyuancheng178"},"content":"        String output \u003d String.format(\"%s: ################ 1601\\n\", today);","lastModifiedDate":"2021-11-04"},{"lineNumber":205,"author":{"gitId":"siyuancheng178"},"content":"        output +\u003d String.format(\"Average Daily Calorie Intake: ################ 1601\\n\");","lastModifiedDate":"2021-11-04"},{"lineNumber":206,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":207,"author":{"gitId":"siyuancheng178"},"content":"        output +\u003d String.format(\"Food eaten most: [milk] [2 time(s)]\\n\");","lastModifiedDate":"2021-11-04"},{"lineNumber":208,"author":{"gitId":"siyuancheng178"},"content":"        output +\u003d String.format(\"Food eaten least: [bacon, beans, butter] [1 time(s)]\");","lastModifiedDate":"2021-11-04"},{"lineNumber":209,"author":{"gitId":"siyuancheng178"},"content":"        assertEquals(output, new ViewWeekSummaryCommand().execute(database, new FoodDatabase(),","lastModifiedDate":"2021-11-04"},{"lineNumber":210,"author":{"gitId":"siyuancheng178"},"content":"                new MealPlanDatabase(),new User(2500, Gender.MALE, 25, 185, 80)));","lastModifiedDate":"2021-11-04"},{"lineNumber":211,"author":{"gitId":"siyuancheng178"},"content":"    }","lastModifiedDate":"2021-11-04"},{"lineNumber":212,"author":{"gitId":"siyuancheng178"},"content":"}","lastModifiedDate":"2021-11-04"}],"authorContributionMap":{"siyuancheng178":212}},{"path":"src/test/java/fitnus/database/EntryDatabaseTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"brendanlsz"},"content":"package fitnus.database;","lastModifiedDate":"2021-10-12"},{"lineNumber":2,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":3,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.exception.FitNusException;","lastModifiedDate":"2021-10-12"},{"lineNumber":4,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.tracker.Entry;","lastModifiedDate":"2021-10-12"},{"lineNumber":5,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.tracker.Food;","lastModifiedDate":"2021-10-12"},{"lineNumber":6,"author":{"gitId":"brendanlsz"},"content":"import fitnus.parser.Parser;","lastModifiedDate":"2021-10-09"},{"lineNumber":7,"author":{"gitId":"kengjit"},"content":"import fitnus.tracker.MealType;","lastModifiedDate":"2021-10-19"},{"lineNumber":8,"author":{"gitId":"siyuancheng178"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-06"},{"lineNumber":9,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":10,"author":{"gitId":"brendanlsz"},"content":"import java.io.BufferedReader;","lastModifiedDate":"2021-10-12"},{"lineNumber":11,"author":{"gitId":"brendanlsz"},"content":"import java.io.ByteArrayInputStream;","lastModifiedDate":"2021-10-12"},{"lineNumber":12,"author":{"gitId":"brendanlsz"},"content":"import java.io.FileInputStream;","lastModifiedDate":"2021-10-31"},{"lineNumber":13,"author":{"gitId":"brendanlsz"},"content":"import java.io.IOException;","lastModifiedDate":"2021-10-12"},{"lineNumber":14,"author":{"gitId":"brendanlsz"},"content":"import java.io.InputStream;","lastModifiedDate":"2021-10-12"},{"lineNumber":15,"author":{"gitId":"brendanlsz"},"content":"import java.io.InputStreamReader;","lastModifiedDate":"2021-10-12"},{"lineNumber":16,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":17,"author":{"gitId":"brendanlsz"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-10-31"},{"lineNumber":18,"author":{"gitId":"brendanlsz"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2021-10-31"},{"lineNumber":19,"author":{"gitId":"siyuancheng178"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-10-06"},{"lineNumber":20,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":21,"author":{"gitId":"siyuancheng178"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-06"},{"lineNumber":22,"author":{"gitId":"brendanlsz"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2021-10-10"},{"lineNumber":23,"author":{"gitId":"kengjit"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2021-10-10"},{"lineNumber":24,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":25,"author":{"gitId":"siyuancheng178"},"content":"class EntryDatabaseTest {","lastModifiedDate":"2021-10-06"},{"lineNumber":26,"author":{"gitId":"siyuancheng178"},"content":"    @Test","lastModifiedDate":"2021-10-06"},{"lineNumber":27,"author":{"gitId":"siyuancheng178"},"content":"    public void convertDatabaseToStringTest_emptyList_emptyString() {","lastModifiedDate":"2021-10-06"},{"lineNumber":28,"author":{"gitId":"siyuancheng178"},"content":"        EntryDatabase edb \u003d new EntryDatabase();","lastModifiedDate":"2021-10-06"},{"lineNumber":29,"author":{"gitId":"siyuancheng178"},"content":"        assertEquals(\"\", edb.convertDatabaseToString());","lastModifiedDate":"2021-10-06"},{"lineNumber":30,"author":{"gitId":"siyuancheng178"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":31,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":32,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":33,"author":{"gitId":"siyuancheng178"},"content":"    @Test","lastModifiedDate":"2021-10-06"},{"lineNumber":34,"author":{"gitId":"kengjit"},"content":"    public void convertDatabaseToStringTest_validList_stringRepresentation() {","lastModifiedDate":"2021-11-04"},{"lineNumber":35,"author":{"gitId":"siyuancheng178"},"content":"        EntryDatabase edb \u003d new EntryDatabase();","lastModifiedDate":"2021-10-06"},{"lineNumber":36,"author":{"gitId":"brendanlsz"},"content":"        LocalDate date \u003d null;","lastModifiedDate":"2021-10-10"},{"lineNumber":37,"author":{"gitId":"brendanlsz"},"content":"        try {","lastModifiedDate":"2021-10-10"},{"lineNumber":38,"author":{"gitId":"brendanlsz"},"content":"            date \u003d Parser.getDate(\"2021-10-11\");","lastModifiedDate":"2021-10-10"},{"lineNumber":39,"author":{"gitId":"brendanlsz"},"content":"        } catch (FitNusException e) {","lastModifiedDate":"2021-10-10"},{"lineNumber":40,"author":{"gitId":"brendanlsz"},"content":"            fail(\"Parser getDate error\");","lastModifiedDate":"2021-10-10"},{"lineNumber":41,"author":{"gitId":"brendanlsz"},"content":"        }","lastModifiedDate":"2021-10-10"},{"lineNumber":42,"author":{"gitId":"brendanlsz"},"content":"        Entry entry1 \u003d new Entry(MealType.DINNER,","lastModifiedDate":"2021-10-22"},{"lineNumber":43,"author":{"gitId":"brendanlsz"},"content":"                new Food(\"chicken rice\", 200, Food.FoodType.MEAL), date);","lastModifiedDate":"2021-10-22"},{"lineNumber":44,"author":{"gitId":"brendanlsz"},"content":"        Entry entry2 \u003d new Entry(MealType.LUNCH,","lastModifiedDate":"2021-10-22"},{"lineNumber":45,"author":{"gitId":"brendanlsz"},"content":"                new Food(\"steak\", 900, Food.FoodType.MEAL), date);","lastModifiedDate":"2021-10-22"},{"lineNumber":46,"author":{"gitId":"brendanlsz"},"content":"        Entry entry3 \u003d new Entry(MealType.BREAKFAST,","lastModifiedDate":"2021-10-22"},{"lineNumber":47,"author":{"gitId":"brendanlsz"},"content":"                new Food(\"laksa\", 400, Food.FoodType.MEAL), date);","lastModifiedDate":"2021-10-22"},{"lineNumber":48,"author":{"gitId":"brendanlsz"},"content":"        Entry entry4 \u003d new Entry(MealType.SNACK,","lastModifiedDate":"2021-10-22"},{"lineNumber":49,"author":{"gitId":"brendanlsz"},"content":"                new Food(\"hotpot\", 1100, Food.FoodType.MEAL), date);","lastModifiedDate":"2021-10-22"},{"lineNumber":50,"author":{"gitId":"brendanlsz"},"content":"        edb.addEntry(entry1);","lastModifiedDate":"2021-10-09"},{"lineNumber":51,"author":{"gitId":"brendanlsz"},"content":"        edb.addEntry(entry2);","lastModifiedDate":"2021-10-09"},{"lineNumber":52,"author":{"gitId":"brendanlsz"},"content":"        edb.addEntry(entry3);","lastModifiedDate":"2021-10-09"},{"lineNumber":53,"author":{"gitId":"brendanlsz"},"content":"        edb.addEntry(entry4);","lastModifiedDate":"2021-10-09"},{"lineNumber":54,"author":{"gitId":"brendanlsz"},"content":"        String expectedOutput \u003d String.format(\"Dinner | chicken rice | 200 | %s | MEAL\" + System.lineSeparator()","lastModifiedDate":"2021-10-22"},{"lineNumber":55,"author":{"gitId":"brendanlsz"},"content":"                + \"Lunch | steak | 900 | %s | MEAL\" + System.lineSeparator()","lastModifiedDate":"2021-10-22"},{"lineNumber":56,"author":{"gitId":"brendanlsz"},"content":"                + \"Breakfast | laksa | 400 | %s | MEAL\" + System.lineSeparator()","lastModifiedDate":"2021-10-22"},{"lineNumber":57,"author":{"gitId":"brendanlsz"},"content":"                + \"Snack | hotpot | 1100 | %s | MEAL\" + System.lineSeparator(), date, date, date, date);","lastModifiedDate":"2021-10-22"},{"lineNumber":58,"author":{"gitId":"siyuancheng178"},"content":"        assertEquals(expectedOutput, edb.convertDatabaseToString());","lastModifiedDate":"2021-10-06"},{"lineNumber":59,"author":{"gitId":"siyuancheng178"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":60,"author":{"gitId":"siyuancheng178"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":61,"author":{"gitId":"kengjit"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":62,"author":{"gitId":"kengjit"},"content":"    void addEntry_validEntry_entryAddedSuccessfully() throws FitNusException {","lastModifiedDate":"2021-10-12"},{"lineNumber":63,"author":{"gitId":"kengjit"},"content":"        // Instantiate objects","lastModifiedDate":"2021-10-10"},{"lineNumber":64,"author":{"gitId":"kengjit"},"content":"        EntryDatabase edb \u003d new EntryDatabase();","lastModifiedDate":"2021-10-10"},{"lineNumber":65,"author":{"gitId":"brendanlsz"},"content":"        Food prata \u003d new Food(\"Prata\", 100, Food.FoodType.MEAL);","lastModifiedDate":"2021-10-22"},{"lineNumber":66,"author":{"gitId":"brendanlsz"},"content":"        Food chickenRice \u003d new Food(\"Chicken Rice\", 325, Food.FoodType.MEAL);","lastModifiedDate":"2021-10-22"},{"lineNumber":67,"author":{"gitId":"kengjit"},"content":"        Entry chickenRiceEntry \u003d new Entry(MealType.DINNER, chickenRice);","lastModifiedDate":"2021-10-19"},{"lineNumber":68,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":69,"author":{"gitId":"kengjit"},"content":"        // Add Entries","lastModifiedDate":"2021-10-10"},{"lineNumber":70,"author":{"gitId":"kengjit"},"content":"        edb.addEntry(MealType.DINNER, prata);","lastModifiedDate":"2021-10-19"},{"lineNumber":71,"author":{"gitId":"kengjit"},"content":"        edb.addEntry(chickenRiceEntry);","lastModifiedDate":"2021-10-10"},{"lineNumber":72,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":73,"author":{"gitId":"kengjit"},"content":"        // Test","lastModifiedDate":"2021-10-10"},{"lineNumber":74,"author":{"gitId":"praj-bellakka"},"content":"        assertEquals(prata, edb.getEntryAtIndex(1).getFood());","lastModifiedDate":"2021-10-12"},{"lineNumber":75,"author":{"gitId":"praj-bellakka"},"content":"        assertEquals(chickenRice, edb.getEntryAtIndex(2).getFood());","lastModifiedDate":"2021-10-12"},{"lineNumber":76,"author":{"gitId":"kengjit"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":77,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":78,"author":{"gitId":"kengjit"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":79,"author":{"gitId":"kengjit"},"content":"    void getTotalCalorie_nonZeroEntries_getTotalCaloriesSuccessfully() {","lastModifiedDate":"2021-10-10"},{"lineNumber":80,"author":{"gitId":"kengjit"},"content":"        // Instantiate objects","lastModifiedDate":"2021-10-10"},{"lineNumber":81,"author":{"gitId":"kengjit"},"content":"        EntryDatabase edb \u003d new EntryDatabase();","lastModifiedDate":"2021-10-10"},{"lineNumber":82,"author":{"gitId":"brendanlsz"},"content":"        Food prata \u003d new Food(\"Prata\", 100, Food.FoodType.MEAL);","lastModifiedDate":"2021-10-22"},{"lineNumber":83,"author":{"gitId":"brendanlsz"},"content":"        Food chickenRice \u003d new Food(\"Chicken Rice\", 325, Food.FoodType.MEAL);","lastModifiedDate":"2021-10-22"},{"lineNumber":84,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":85,"author":{"gitId":"kengjit"},"content":"        // Add Entries","lastModifiedDate":"2021-10-10"},{"lineNumber":86,"author":{"gitId":"kengjit"},"content":"        edb.addEntry(MealType.DINNER, prata);","lastModifiedDate":"2021-10-19"},{"lineNumber":87,"author":{"gitId":"kengjit"},"content":"        edb.addEntry(MealType.DINNER, chickenRice);","lastModifiedDate":"2021-10-19"},{"lineNumber":88,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":89,"author":{"gitId":"kengjit"},"content":"        // Test","lastModifiedDate":"2021-10-10"},{"lineNumber":90,"author":{"gitId":"aaapppsss"},"content":"        assertEquals(425, edb.getTotalDailyCalorie());","lastModifiedDate":"2021-10-21"},{"lineNumber":91,"author":{"gitId":"kengjit"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":92,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":93,"author":{"gitId":"kengjit"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":94,"author":{"gitId":"kengjit"},"content":"    void getTotalCalorie_zeroEntries_getTotalCaloriesSuccessfully() {","lastModifiedDate":"2021-10-10"},{"lineNumber":95,"author":{"gitId":"kengjit"},"content":"        // Instantiate objects","lastModifiedDate":"2021-10-10"},{"lineNumber":96,"author":{"gitId":"kengjit"},"content":"        EntryDatabase edb \u003d new EntryDatabase();","lastModifiedDate":"2021-10-10"},{"lineNumber":97,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":98,"author":{"gitId":"kengjit"},"content":"        // Test","lastModifiedDate":"2021-10-10"},{"lineNumber":99,"author":{"gitId":"aaapppsss"},"content":"        assertEquals(0, edb.getTotalDailyCalorie());","lastModifiedDate":"2021-10-21"},{"lineNumber":100,"author":{"gitId":"kengjit"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":101,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":102,"author":{"gitId":"kengjit"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":103,"author":{"gitId":"kengjit"},"content":"    void deleteEntry_validIndex_entryDeletedSuccessfully() throws FitNusException {","lastModifiedDate":"2021-10-10"},{"lineNumber":104,"author":{"gitId":"kengjit"},"content":"        // Instantiate objects","lastModifiedDate":"2021-10-10"},{"lineNumber":105,"author":{"gitId":"kengjit"},"content":"        EntryDatabase edb \u003d new EntryDatabase();","lastModifiedDate":"2021-10-10"},{"lineNumber":106,"author":{"gitId":"brendanlsz"},"content":"        Food prata \u003d new Food(\"Prata\", 100, Food.FoodType.MEAL);","lastModifiedDate":"2021-10-22"},{"lineNumber":107,"author":{"gitId":"brendanlsz"},"content":"        Food chickenRice \u003d new Food(\"Chicken Rice\", 325, Food.FoodType.MEAL);","lastModifiedDate":"2021-10-22"},{"lineNumber":108,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":109,"author":{"gitId":"kengjit"},"content":"        // Add Entries","lastModifiedDate":"2021-10-10"},{"lineNumber":110,"author":{"gitId":"kengjit"},"content":"        edb.addEntry(MealType.DINNER, prata);","lastModifiedDate":"2021-10-19"},{"lineNumber":111,"author":{"gitId":"kengjit"},"content":"        edb.addEntry(MealType.DINNER, chickenRice);","lastModifiedDate":"2021-10-19"},{"lineNumber":112,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":113,"author":{"gitId":"kengjit"},"content":"        // Delete Entry","lastModifiedDate":"2021-10-10"},{"lineNumber":114,"author":{"gitId":"kengjit"},"content":"        edb.deleteEntry(2);","lastModifiedDate":"2021-10-10"},{"lineNumber":115,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":116,"author":{"gitId":"kengjit"},"content":"        // Test","lastModifiedDate":"2021-10-10"},{"lineNumber":117,"author":{"gitId":"kengjit"},"content":"        Exception exception \u003d assertThrows(FitNusException.class, () -\u003e edb.getEntryAtIndex(2));","lastModifiedDate":"2021-10-12"},{"lineNumber":118,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":119,"author":{"gitId":"kengjit"},"content":"        assertEquals(\"Sorry the index chosen is invalid! Please try again!\", exception.getMessage());","lastModifiedDate":"2021-10-12"},{"lineNumber":120,"author":{"gitId":"kengjit"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":121,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":122,"author":{"gitId":"kengjit"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":123,"author":{"gitId":"kengjit"},"content":"    void deleteEntry_invalidIndex_exceptionThrown() {","lastModifiedDate":"2021-10-10"},{"lineNumber":124,"author":{"gitId":"kengjit"},"content":"        // Instantiate objects","lastModifiedDate":"2021-10-10"},{"lineNumber":125,"author":{"gitId":"kengjit"},"content":"        EntryDatabase edb \u003d new EntryDatabase();","lastModifiedDate":"2021-10-10"},{"lineNumber":126,"author":{"gitId":"brendanlsz"},"content":"        Food prata \u003d new Food(\"Prata\", 100, Food.FoodType.MEAL);","lastModifiedDate":"2021-10-22"},{"lineNumber":127,"author":{"gitId":"brendanlsz"},"content":"        Food chickenRice \u003d new Food(\"Chicken Rice\", 325, Food.FoodType.BEVERAGE);","lastModifiedDate":"2021-10-22"},{"lineNumber":128,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":129,"author":{"gitId":"kengjit"},"content":"        // Add Entries","lastModifiedDate":"2021-10-10"},{"lineNumber":130,"author":{"gitId":"kengjit"},"content":"        edb.addEntry(MealType.DINNER, prata);","lastModifiedDate":"2021-10-19"},{"lineNumber":131,"author":{"gitId":"kengjit"},"content":"        edb.addEntry(MealType.DINNER, chickenRice);","lastModifiedDate":"2021-10-19"},{"lineNumber":132,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":133,"author":{"gitId":"kengjit"},"content":"        // Test","lastModifiedDate":"2021-10-10"},{"lineNumber":134,"author":{"gitId":"kengjit"},"content":"        Exception exception1 \u003d assertThrows(FitNusException.class, () -\u003e edb.deleteEntry(0));","lastModifiedDate":"2021-10-10"},{"lineNumber":135,"author":{"gitId":"kengjit"},"content":"        Exception exception2 \u003d assertThrows(FitNusException.class, () -\u003e edb.deleteEntry(-1));","lastModifiedDate":"2021-10-10"},{"lineNumber":136,"author":{"gitId":"kengjit"},"content":"        Exception exception3 \u003d assertThrows(FitNusException.class, () -\u003e edb.deleteEntry(100));","lastModifiedDate":"2021-10-10"},{"lineNumber":137,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":138,"author":{"gitId":"kengjit"},"content":"        assertEquals(\"Sorry the index chosen is invalid! Please try again!\", exception1.getMessage());","lastModifiedDate":"2021-10-10"},{"lineNumber":139,"author":{"gitId":"kengjit"},"content":"        assertEquals(\"Sorry the index chosen is invalid! Please try again!\", exception2.getMessage());","lastModifiedDate":"2021-10-10"},{"lineNumber":140,"author":{"gitId":"kengjit"},"content":"        assertEquals(\"Sorry the index chosen is invalid! Please try again!\", exception3.getMessage());","lastModifiedDate":"2021-10-10"},{"lineNumber":141,"author":{"gitId":"kengjit"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":142,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":143,"author":{"gitId":"kengjit"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":144,"author":{"gitId":"kengjit"},"content":"    void getEntryAtIndex_validIndex_getEntrySuccessfully() throws FitNusException {","lastModifiedDate":"2021-10-12"},{"lineNumber":145,"author":{"gitId":"kengjit"},"content":"        // Instantiate objects","lastModifiedDate":"2021-10-10"},{"lineNumber":146,"author":{"gitId":"kengjit"},"content":"        EntryDatabase edb \u003d new EntryDatabase();","lastModifiedDate":"2021-10-10"},{"lineNumber":147,"author":{"gitId":"brendanlsz"},"content":"        Food prata \u003d new Food(\"Prata\", 100, Food.FoodType.MEAL);","lastModifiedDate":"2021-10-22"},{"lineNumber":148,"author":{"gitId":"brendanlsz"},"content":"        Food chickenRice \u003d new Food(\"Chicken Rice\", 325, Food.FoodType.MEAL);","lastModifiedDate":"2021-10-22"},{"lineNumber":149,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":150,"author":{"gitId":"kengjit"},"content":"        // Add Entries","lastModifiedDate":"2021-10-10"},{"lineNumber":151,"author":{"gitId":"kengjit"},"content":"        edb.addEntry(MealType.DINNER, prata);","lastModifiedDate":"2021-10-19"},{"lineNumber":152,"author":{"gitId":"kengjit"},"content":"        edb.addEntry(MealType.DINNER, chickenRice);","lastModifiedDate":"2021-10-19"},{"lineNumber":153,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":154,"author":{"gitId":"kengjit"},"content":"        // Test","lastModifiedDate":"2021-10-10"},{"lineNumber":155,"author":{"gitId":"praj-bellakka"},"content":"        assertEquals(prata, edb.getEntryAtIndex(1).getFood());","lastModifiedDate":"2021-10-12"},{"lineNumber":156,"author":{"gitId":"praj-bellakka"},"content":"        assertEquals(chickenRice, edb.getEntryAtIndex(2).getFood());","lastModifiedDate":"2021-10-12"},{"lineNumber":157,"author":{"gitId":"kengjit"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":158,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":159,"author":{"gitId":"kengjit"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":160,"author":{"gitId":"kengjit"},"content":"    void getEntryAtIndex_invalidIndex_getEntrySuccessfully() {","lastModifiedDate":"2021-10-10"},{"lineNumber":161,"author":{"gitId":"kengjit"},"content":"        // Instantiate objects","lastModifiedDate":"2021-10-10"},{"lineNumber":162,"author":{"gitId":"kengjit"},"content":"        EntryDatabase edb \u003d new EntryDatabase();","lastModifiedDate":"2021-10-10"},{"lineNumber":163,"author":{"gitId":"brendanlsz"},"content":"        Food prata \u003d new Food(\"Prata\", 100, Food.FoodType.MEAL);","lastModifiedDate":"2021-10-22"},{"lineNumber":164,"author":{"gitId":"brendanlsz"},"content":"        Food chickenRice \u003d new Food(\"Chicken Rice\", 325, Food.FoodType.SNACK);","lastModifiedDate":"2021-10-22"},{"lineNumber":165,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":166,"author":{"gitId":"kengjit"},"content":"        // Add Entries","lastModifiedDate":"2021-10-10"},{"lineNumber":167,"author":{"gitId":"kengjit"},"content":"        edb.addEntry(MealType.DINNER, prata);","lastModifiedDate":"2021-10-19"},{"lineNumber":168,"author":{"gitId":"kengjit"},"content":"        edb.addEntry(MealType.DINNER, chickenRice);","lastModifiedDate":"2021-10-19"},{"lineNumber":169,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":170,"author":{"gitId":"kengjit"},"content":"        // Test","lastModifiedDate":"2021-10-10"},{"lineNumber":171,"author":{"gitId":"kengjit"},"content":"        Exception exception1 \u003d assertThrows(FitNusException.class, () -\u003e edb.getEntryAtIndex(0));","lastModifiedDate":"2021-10-12"},{"lineNumber":172,"author":{"gitId":"kengjit"},"content":"        Exception exception2 \u003d assertThrows(FitNusException.class, () -\u003e edb.getEntryAtIndex(-1));","lastModifiedDate":"2021-10-12"},{"lineNumber":173,"author":{"gitId":"kengjit"},"content":"        Exception exception3 \u003d assertThrows(FitNusException.class, () -\u003e edb.getEntryAtIndex(100));","lastModifiedDate":"2021-10-12"},{"lineNumber":174,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":175,"author":{"gitId":"kengjit"},"content":"        assertEquals(\"Sorry the index chosen is invalid! Please try again!\", exception1.getMessage());","lastModifiedDate":"2021-10-12"},{"lineNumber":176,"author":{"gitId":"kengjit"},"content":"        assertEquals(\"Sorry the index chosen is invalid! Please try again!\", exception2.getMessage());","lastModifiedDate":"2021-10-12"},{"lineNumber":177,"author":{"gitId":"kengjit"},"content":"        assertEquals(\"Sorry the index chosen is invalid! Please try again!\", exception3.getMessage());","lastModifiedDate":"2021-10-12"},{"lineNumber":178,"author":{"gitId":"kengjit"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":179,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":180,"author":{"gitId":"brendanlsz"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":181,"author":{"gitId":"kengjit"},"content":"    void preLoadDatabase_validInput_SuccessfullyPreloadDatabase() throws IOException {","lastModifiedDate":"2021-10-25"},{"lineNumber":182,"author":{"gitId":"brendanlsz"},"content":"        EntryDatabase database \u003d new EntryDatabase();","lastModifiedDate":"2021-10-31"},{"lineNumber":183,"author":{"gitId":"brendanlsz"},"content":"        String initialString \u003d \"Breakfast | food1 | 100 | 2021-10-12 | MEAL\" + System.lineSeparator()","lastModifiedDate":"2021-10-22"},{"lineNumber":184,"author":{"gitId":"brendanlsz"},"content":"                + \"Lunch | food2 | 200 | 2021-10-12 | MEAL\";","lastModifiedDate":"2021-10-22"},{"lineNumber":185,"author":{"gitId":"brendanlsz"},"content":"        InputStream stream \u003d new ByteArrayInputStream(initialString.getBytes());","lastModifiedDate":"2021-10-12"},{"lineNumber":186,"author":{"gitId":"brendanlsz"},"content":"        BufferedReader reader \u003d new BufferedReader(new InputStreamReader(stream));","lastModifiedDate":"2021-10-12"},{"lineNumber":187,"author":{"gitId":"brendanlsz"},"content":"        database.preloadDatabase(reader);","lastModifiedDate":"2021-10-31"},{"lineNumber":188,"author":{"gitId":"brendanlsz"},"content":"        assertEquals(\" 1.[2021-10-12] Breakfast: food1 (100 Kcal) Type: MEAL\"","lastModifiedDate":"2021-10-25"},{"lineNumber":189,"author":{"gitId":"brendanlsz"},"content":"                + System.lineSeparator() + \" 2.[2021-10-12] Lunch: food2 (200 Kcal) Type: MEAL\"","lastModifiedDate":"2021-10-25"},{"lineNumber":190,"author":{"gitId":"brendanlsz"},"content":"                + System.lineSeparator(), database.listEntries());","lastModifiedDate":"2021-10-31"},{"lineNumber":191,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-10-31"},{"lineNumber":192,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":193,"author":{"gitId":"brendanlsz"},"content":"    @Test","lastModifiedDate":"2021-10-31"},{"lineNumber":194,"author":{"gitId":"brendanlsz"},"content":"    void preLoadDatabase_invalidInput_nothingPreloaded()","lastModifiedDate":"2021-10-31"},{"lineNumber":195,"author":{"gitId":"brendanlsz"},"content":"            throws IOException {","lastModifiedDate":"2021-10-31"},{"lineNumber":196,"author":{"gitId":"brendanlsz"},"content":"        EntryDatabase database \u003d new EntryDatabase();","lastModifiedDate":"2021-10-31"},{"lineNumber":197,"author":{"gitId":"brendanlsz"},"content":"        String initialString \u003d \"Breakfast | food1  | 2021-10-12 | MEAL\" + System.lineSeparator()","lastModifiedDate":"2021-10-31"},{"lineNumber":198,"author":{"gitId":"brendanlsz"},"content":"                + \"Lunch | food2 | 200 | 2021-10-12 | \";","lastModifiedDate":"2021-10-31"},{"lineNumber":199,"author":{"gitId":"brendanlsz"},"content":"        InputStream stream \u003d new ByteArrayInputStream(initialString.getBytes());","lastModifiedDate":"2021-10-31"},{"lineNumber":200,"author":{"gitId":"brendanlsz"},"content":"        BufferedReader reader \u003d new BufferedReader(new InputStreamReader(stream));","lastModifiedDate":"2021-10-31"},{"lineNumber":201,"author":{"gitId":"brendanlsz"},"content":"        database.preloadDatabase(reader);","lastModifiedDate":"2021-10-31"},{"lineNumber":202,"author":{"gitId":"kengjit"},"content":"        assertEquals(\"Oops, there are no records found!\", database.listEntries());","lastModifiedDate":"2021-11-05"},{"lineNumber":203,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":204,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":205,"author":{"gitId":"kengjit"},"content":"    @Test","lastModifiedDate":"2021-10-25"},{"lineNumber":206,"author":{"gitId":"kengjit"},"content":"    void getPastDaysEntryDatabase_existingEntries_SuccessfullyReturnsPastDaysEntries() {","lastModifiedDate":"2021-10-25"},{"lineNumber":207,"author":{"gitId":"kengjit"},"content":"        // Instantiate objects","lastModifiedDate":"2021-10-25"},{"lineNumber":208,"author":{"gitId":"kengjit"},"content":"        EntryDatabase edb \u003d new EntryDatabase();","lastModifiedDate":"2021-10-25"},{"lineNumber":209,"author":{"gitId":"kengjit"},"content":"        Food prata \u003d new Food(\"Prata\", 100, Food.FoodType.MEAL);","lastModifiedDate":"2021-10-25"},{"lineNumber":210,"author":{"gitId":"kengjit"},"content":"        Food chickenRice \u003d new Food(\"Chicken Rice\", 325, Food.FoodType.MEAL);","lastModifiedDate":"2021-10-25"},{"lineNumber":211,"author":{"gitId":"kengjit"},"content":"        Food nasiLemak \u003d new Food(\"Nasi Lemak\", 400, Food.FoodType.MEAL);","lastModifiedDate":"2021-10-25"},{"lineNumber":212,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":213,"author":{"gitId":"kengjit"},"content":"        // Add Entries","lastModifiedDate":"2021-10-25"},{"lineNumber":214,"author":{"gitId":"kengjit"},"content":"        edb.addEntry(new Entry(MealType.DINNER, nasiLemak, LocalDate.now().minusDays(2)));","lastModifiedDate":"2021-10-25"},{"lineNumber":215,"author":{"gitId":"kengjit"},"content":"        edb.addEntry(new Entry(MealType.DINNER, prata, LocalDate.now().minusDays(1)));","lastModifiedDate":"2021-10-25"},{"lineNumber":216,"author":{"gitId":"kengjit"},"content":"        edb.addEntry(new Entry(MealType.DINNER, chickenRice));","lastModifiedDate":"2021-10-25"},{"lineNumber":217,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":218,"author":{"gitId":"kengjit"},"content":"        // Test","lastModifiedDate":"2021-10-25"},{"lineNumber":219,"author":{"gitId":"kengjit"},"content":"        EntryDatabase edbOne \u003d edb.getPastDaysEntryDatabase(1);","lastModifiedDate":"2021-10-25"},{"lineNumber":220,"author":{"gitId":"kengjit"},"content":"        EntryDatabase edbTwo \u003d edb.getPastDaysEntryDatabase(2);","lastModifiedDate":"2021-10-25"},{"lineNumber":221,"author":{"gitId":"kengjit"},"content":"        EntryDatabase edbThree \u003d edb.getPastDaysEntryDatabase(3);","lastModifiedDate":"2021-10-25"},{"lineNumber":222,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":223,"author":{"gitId":"kengjit"},"content":"        assertEquals(\" 1.[\" + LocalDate.now() + \"] Dinner: Chicken Rice (325 Kcal) Type: MEAL\"","lastModifiedDate":"2021-10-25"},{"lineNumber":224,"author":{"gitId":"kengjit"},"content":"                + System.lineSeparator(), edbOne.listEntries());","lastModifiedDate":"2021-10-25"},{"lineNumber":225,"author":{"gitId":"kengjit"},"content":"        assertEquals(\" 1.[\" + LocalDate.now().minusDays(1) + \"] Dinner: Prata (100 Kcal) Type: MEAL\"","lastModifiedDate":"2021-10-25"},{"lineNumber":226,"author":{"gitId":"kengjit"},"content":"                + System.lineSeparator() + \" 2.[\" + LocalDate.now() + \"] Dinner: Chicken Rice (325 Kcal) Type: MEAL\"","lastModifiedDate":"2021-10-25"},{"lineNumber":227,"author":{"gitId":"kengjit"},"content":"                + System.lineSeparator(), edbTwo.listEntries());","lastModifiedDate":"2021-10-25"},{"lineNumber":228,"author":{"gitId":"kengjit"},"content":"        assertEquals(\" 1.[\" + LocalDate.now().minusDays(2) + \"] Dinner: Nasi Lemak (400 Kcal) Type: MEAL\"","lastModifiedDate":"2021-10-25"},{"lineNumber":229,"author":{"gitId":"kengjit"},"content":"                        + System.lineSeparator() + \" 2.[\" + LocalDate.now().minusDays(1)","lastModifiedDate":"2021-10-25"},{"lineNumber":230,"author":{"gitId":"kengjit"},"content":"                        + \"] Dinner: Prata (100 Kcal) Type: MEAL\" + System.lineSeparator()","lastModifiedDate":"2021-10-25"},{"lineNumber":231,"author":{"gitId":"brendanlsz"},"content":"                        + \" 3.[\" + LocalDate.now() + \"] Dinner: Chicken Rice (325 Kcal) Type: MEAL\"","lastModifiedDate":"2021-10-26"},{"lineNumber":232,"author":{"gitId":"brendanlsz"},"content":"                        + System.lineSeparator(),","lastModifiedDate":"2021-10-26"},{"lineNumber":233,"author":{"gitId":"kengjit"},"content":"                edbThree.listEntries());","lastModifiedDate":"2021-10-25"},{"lineNumber":234,"author":{"gitId":"kengjit"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":235,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":236,"author":{"gitId":"kengjit"},"content":"    @Test","lastModifiedDate":"2021-10-25"},{"lineNumber":237,"author":{"gitId":"kengjit"},"content":"    void getPastDaysEntryDatabase_noEntries_SuccessfullyReturnsNoEntries() {","lastModifiedDate":"2021-10-25"},{"lineNumber":238,"author":{"gitId":"kengjit"},"content":"        // Instantiate objects","lastModifiedDate":"2021-10-25"},{"lineNumber":239,"author":{"gitId":"kengjit"},"content":"        EntryDatabase edb \u003d new EntryDatabase();","lastModifiedDate":"2021-10-25"},{"lineNumber":240,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":241,"author":{"gitId":"kengjit"},"content":"        // Test","lastModifiedDate":"2021-10-25"},{"lineNumber":242,"author":{"gitId":"kengjit"},"content":"        EntryDatabase edbPastDay \u003d edb.getPastDaysEntryDatabase(1);","lastModifiedDate":"2021-10-25"},{"lineNumber":243,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":244,"author":{"gitId":"kengjit"},"content":"        assertEquals(\"Oops, there are no records found!\", edbPastDay.listEntries());","lastModifiedDate":"2021-11-05"},{"lineNumber":245,"author":{"gitId":"kengjit"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":246,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":247,"author":{"gitId":"kengjit"},"content":"    @Test","lastModifiedDate":"2021-10-25"},{"lineNumber":248,"author":{"gitId":"kengjit"},"content":"    void getPastMonthEntryDatabase_existingEntries_SuccessfullyReturnsPastMonthEntries() {","lastModifiedDate":"2021-10-25"},{"lineNumber":249,"author":{"gitId":"kengjit"},"content":"        // Instantiate objects","lastModifiedDate":"2021-10-25"},{"lineNumber":250,"author":{"gitId":"kengjit"},"content":"        EntryDatabase edb \u003d new EntryDatabase();","lastModifiedDate":"2021-10-25"},{"lineNumber":251,"author":{"gitId":"kengjit"},"content":"        Food prata \u003d new Food(\"Prata\", 100, Food.FoodType.MEAL);","lastModifiedDate":"2021-10-25"},{"lineNumber":252,"author":{"gitId":"kengjit"},"content":"        Food chickenRice \u003d new Food(\"Chicken Rice\", 325, Food.FoodType.MEAL);","lastModifiedDate":"2021-10-25"},{"lineNumber":253,"author":{"gitId":"kengjit"},"content":"        Food nasiLemak \u003d new Food(\"Nasi Lemak\", 400, Food.FoodType.MEAL);","lastModifiedDate":"2021-10-25"},{"lineNumber":254,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":255,"author":{"gitId":"kengjit"},"content":"        // Add Entries","lastModifiedDate":"2021-10-25"},{"lineNumber":256,"author":{"gitId":"kengjit"},"content":"        edb.addEntry(new Entry(MealType.DINNER, nasiLemak, LocalDate.now().minusMonths(2)));","lastModifiedDate":"2021-10-25"},{"lineNumber":257,"author":{"gitId":"kengjit"},"content":"        edb.addEntry(new Entry(MealType.DINNER, prata, LocalDate.now().minusMonths(1)));","lastModifiedDate":"2021-10-25"},{"lineNumber":258,"author":{"gitId":"kengjit"},"content":"        edb.addEntry(new Entry(MealType.DINNER, chickenRice));","lastModifiedDate":"2021-10-25"},{"lineNumber":259,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":260,"author":{"gitId":"kengjit"},"content":"        // Test","lastModifiedDate":"2021-10-25"},{"lineNumber":261,"author":{"gitId":"kengjit"},"content":"        EntryDatabase edbMonth \u003d edb.getPastMonthEntryDatabase();","lastModifiedDate":"2021-10-25"},{"lineNumber":262,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":263,"author":{"gitId":"kengjit"},"content":"        assertEquals(\" 1.[\" + LocalDate.now() + \"] Dinner: Chicken Rice (325 Kcal) Type: MEAL\"","lastModifiedDate":"2021-10-25"},{"lineNumber":264,"author":{"gitId":"kengjit"},"content":"                + System.lineSeparator(), edbMonth.listEntries());","lastModifiedDate":"2021-10-25"},{"lineNumber":265,"author":{"gitId":"kengjit"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":266,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":267,"author":{"gitId":"kengjit"},"content":"    @Test","lastModifiedDate":"2021-10-25"},{"lineNumber":268,"author":{"gitId":"kengjit"},"content":"    void getPastMonthEntryDatabase_noEntries_SuccessfullyReturnsNoEntries() {","lastModifiedDate":"2021-10-25"},{"lineNumber":269,"author":{"gitId":"kengjit"},"content":"        // Instantiate objects","lastModifiedDate":"2021-10-25"},{"lineNumber":270,"author":{"gitId":"kengjit"},"content":"        EntryDatabase edb \u003d new EntryDatabase();","lastModifiedDate":"2021-10-25"},{"lineNumber":271,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":272,"author":{"gitId":"kengjit"},"content":"        // Test","lastModifiedDate":"2021-10-25"},{"lineNumber":273,"author":{"gitId":"kengjit"},"content":"        EntryDatabase edbPastMonth \u003d edb.getPastMonthEntryDatabase();","lastModifiedDate":"2021-10-25"},{"lineNumber":274,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":275,"author":{"gitId":"kengjit"},"content":"        assertEquals(\"Oops, there are no records found!\", edbPastMonth.listEntries());","lastModifiedDate":"2021-11-05"},{"lineNumber":276,"author":{"gitId":"kengjit"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":277,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":278,"author":{"gitId":"kengjit"},"content":"    @Test","lastModifiedDate":"2021-10-25"},{"lineNumber":279,"author":{"gitId":"kengjit"},"content":"    void editEntryAtIndex_validIndex_SuccessfullyEditEntry() throws FitNusException {","lastModifiedDate":"2021-10-25"},{"lineNumber":280,"author":{"gitId":"kengjit"},"content":"        // Instantiate objects","lastModifiedDate":"2021-10-25"},{"lineNumber":281,"author":{"gitId":"kengjit"},"content":"        EntryDatabase edb \u003d new EntryDatabase();","lastModifiedDate":"2021-10-25"},{"lineNumber":282,"author":{"gitId":"kengjit"},"content":"        Food prata \u003d new Food(\"Prata\", 100, Food.FoodType.MEAL);","lastModifiedDate":"2021-10-25"},{"lineNumber":283,"author":{"gitId":"kengjit"},"content":"        Food chickenRice \u003d new Food(\"Chicken Rice\", 325, Food.FoodType.MEAL);","lastModifiedDate":"2021-10-25"},{"lineNumber":284,"author":{"gitId":"kengjit"},"content":"        Food nasiLemak \u003d new Food(\"Nasi Lemak\", 400, Food.FoodType.MEAL);","lastModifiedDate":"2021-10-25"},{"lineNumber":285,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":286,"author":{"gitId":"kengjit"},"content":"        // Add Entries","lastModifiedDate":"2021-10-25"},{"lineNumber":287,"author":{"gitId":"kengjit"},"content":"        edb.addEntry(MealType.DINNER, prata);","lastModifiedDate":"2021-10-25"},{"lineNumber":288,"author":{"gitId":"kengjit"},"content":"        edb.addEntry(MealType.DINNER, chickenRice);","lastModifiedDate":"2021-10-25"},{"lineNumber":289,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":290,"author":{"gitId":"kengjit"},"content":"        // Edit Entry","lastModifiedDate":"2021-10-25"},{"lineNumber":291,"author":{"gitId":"kengjit"},"content":"        edb.editEntryAtIndex(1, nasiLemak);","lastModifiedDate":"2021-10-25"},{"lineNumber":292,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":293,"author":{"gitId":"kengjit"},"content":"        // Test","lastModifiedDate":"2021-10-25"},{"lineNumber":294,"author":{"gitId":"kengjit"},"content":"        assertEquals(\" 1.[\" + LocalDate.now() + \"] Dinner: Nasi Lemak (400 Kcal) Type: MEAL\"","lastModifiedDate":"2021-10-25"},{"lineNumber":295,"author":{"gitId":"kengjit"},"content":"                + System.lineSeparator() + \" 2.[\" + LocalDate.now()","lastModifiedDate":"2021-10-25"},{"lineNumber":296,"author":{"gitId":"kengjit"},"content":"                + \"] Dinner: Chicken Rice (325 Kcal) Type: MEAL\"","lastModifiedDate":"2021-10-25"},{"lineNumber":297,"author":{"gitId":"kengjit"},"content":"                + System.lineSeparator(), edb.listEntries());","lastModifiedDate":"2021-10-25"},{"lineNumber":298,"author":{"gitId":"kengjit"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":299,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":300,"author":{"gitId":"kengjit"},"content":"    @Test","lastModifiedDate":"2021-10-25"},{"lineNumber":301,"author":{"gitId":"kengjit"},"content":"    void editEntryAtIndex_invalidIndex_exceptionThrown() {","lastModifiedDate":"2021-10-25"},{"lineNumber":302,"author":{"gitId":"kengjit"},"content":"        // Instantiate objects","lastModifiedDate":"2021-10-25"},{"lineNumber":303,"author":{"gitId":"kengjit"},"content":"        EntryDatabase edb \u003d new EntryDatabase();","lastModifiedDate":"2021-10-25"},{"lineNumber":304,"author":{"gitId":"kengjit"},"content":"        Food prata \u003d new Food(\"Prata\", 100, Food.FoodType.MEAL);","lastModifiedDate":"2021-10-25"},{"lineNumber":305,"author":{"gitId":"kengjit"},"content":"        Food chickenRice \u003d new Food(\"Chicken Rice\", 325, Food.FoodType.MEAL);","lastModifiedDate":"2021-10-25"},{"lineNumber":306,"author":{"gitId":"kengjit"},"content":"        Food nasiLemak \u003d new Food(\"Nasi Lemak\", 400, Food.FoodType.MEAL);","lastModifiedDate":"2021-10-25"},{"lineNumber":307,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":308,"author":{"gitId":"kengjit"},"content":"        // Add Entries","lastModifiedDate":"2021-10-25"},{"lineNumber":309,"author":{"gitId":"kengjit"},"content":"        edb.addEntry(MealType.DINNER, prata);","lastModifiedDate":"2021-10-25"},{"lineNumber":310,"author":{"gitId":"kengjit"},"content":"        edb.addEntry(MealType.DINNER, chickenRice);","lastModifiedDate":"2021-10-25"},{"lineNumber":311,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":312,"author":{"gitId":"kengjit"},"content":"        // Edit Entry","lastModifiedDate":"2021-10-25"},{"lineNumber":313,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":314,"author":{"gitId":"kengjit"},"content":"        Exception exception1 \u003d assertThrows(FitNusException.class, () -\u003e edb.editEntryAtIndex(0, nasiLemak));","lastModifiedDate":"2021-10-25"},{"lineNumber":315,"author":{"gitId":"kengjit"},"content":"        Exception exception2 \u003d assertThrows(FitNusException.class, () -\u003e edb.editEntryAtIndex(-1, nasiLemak));","lastModifiedDate":"2021-10-25"},{"lineNumber":316,"author":{"gitId":"kengjit"},"content":"        Exception exception3 \u003d assertThrows(FitNusException.class, () -\u003e edb.editEntryAtIndex(3, nasiLemak));","lastModifiedDate":"2021-10-25"},{"lineNumber":317,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":318,"author":{"gitId":"kengjit"},"content":"        assertEquals(\"Invalid index!\", exception1.getMessage());","lastModifiedDate":"2021-10-25"},{"lineNumber":319,"author":{"gitId":"kengjit"},"content":"        assertEquals(\"Invalid index!\", exception2.getMessage());","lastModifiedDate":"2021-10-25"},{"lineNumber":320,"author":{"gitId":"kengjit"},"content":"        assertEquals(\"Invalid index!\", exception3.getMessage());","lastModifiedDate":"2021-10-25"},{"lineNumber":321,"author":{"gitId":"kengjit"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":322,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":323,"author":{"gitId":"kengjit"},"content":"    @Test","lastModifiedDate":"2021-10-25"},{"lineNumber":324,"author":{"gitId":"kengjit"},"content":"    void listEntries_existingEntries_SuccessfullyReturnsEntries() {","lastModifiedDate":"2021-10-25"},{"lineNumber":325,"author":{"gitId":"kengjit"},"content":"        // Instantiate objects","lastModifiedDate":"2021-10-25"},{"lineNumber":326,"author":{"gitId":"kengjit"},"content":"        EntryDatabase edb \u003d new EntryDatabase();","lastModifiedDate":"2021-10-25"},{"lineNumber":327,"author":{"gitId":"kengjit"},"content":"        Food prata \u003d new Food(\"Prata\", 100, Food.FoodType.MEAL);","lastModifiedDate":"2021-10-25"},{"lineNumber":328,"author":{"gitId":"kengjit"},"content":"        Food chickenRice \u003d new Food(\"Chicken Rice\", 325, Food.FoodType.MEAL);","lastModifiedDate":"2021-10-25"},{"lineNumber":329,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":330,"author":{"gitId":"kengjit"},"content":"        // Add Entries","lastModifiedDate":"2021-10-25"},{"lineNumber":331,"author":{"gitId":"kengjit"},"content":"        edb.addEntry(MealType.DINNER, prata);","lastModifiedDate":"2021-10-25"},{"lineNumber":332,"author":{"gitId":"kengjit"},"content":"        edb.addEntry(MealType.DINNER, chickenRice);","lastModifiedDate":"2021-10-25"},{"lineNumber":333,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":334,"author":{"gitId":"kengjit"},"content":"        // Test","lastModifiedDate":"2021-10-25"},{"lineNumber":335,"author":{"gitId":"kengjit"},"content":"        assertEquals(\" 1.[\" + LocalDate.now() + \"] Dinner: Prata (100 Kcal) Type: MEAL\"","lastModifiedDate":"2021-10-25"},{"lineNumber":336,"author":{"gitId":"kengjit"},"content":"                + System.lineSeparator()","lastModifiedDate":"2021-10-25"},{"lineNumber":337,"author":{"gitId":"kengjit"},"content":"                + \" 2.[\" + LocalDate.now() + \"] Dinner: Chicken Rice (325 Kcal) Type: MEAL\"","lastModifiedDate":"2021-10-25"},{"lineNumber":338,"author":{"gitId":"kengjit"},"content":"                + System.lineSeparator(), edb.listEntries());","lastModifiedDate":"2021-10-25"},{"lineNumber":339,"author":{"gitId":"kengjit"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":340,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":341,"author":{"gitId":"kengjit"},"content":"    @Test","lastModifiedDate":"2021-10-25"},{"lineNumber":342,"author":{"gitId":"kengjit"},"content":"    void listEntries_noEntries_SuccessfullyReturnsNoEntries() {","lastModifiedDate":"2021-10-25"},{"lineNumber":343,"author":{"gitId":"kengjit"},"content":"        // Instantiate objects","lastModifiedDate":"2021-10-25"},{"lineNumber":344,"author":{"gitId":"kengjit"},"content":"        EntryDatabase edb \u003d new EntryDatabase();","lastModifiedDate":"2021-10-25"},{"lineNumber":345,"author":{"gitId":"kengjit"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":346,"author":{"gitId":"kengjit"},"content":"        // Test","lastModifiedDate":"2021-10-25"},{"lineNumber":347,"author":{"gitId":"kengjit"},"content":"        assertEquals(\"Oops, there are no records found!\", edb.listEntries());","lastModifiedDate":"2021-11-05"},{"lineNumber":348,"author":{"gitId":"kengjit"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":349,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":350,"author":{"gitId":"brendanlsz"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":351,"author":{"gitId":"brendanlsz"},"content":"    void findEntries_validKeyword_getMatchingEntries() throws FitNusException {","lastModifiedDate":"2021-10-26"},{"lineNumber":352,"author":{"gitId":"brendanlsz"},"content":"        String keyword \u003d \"Rice\";","lastModifiedDate":"2021-10-26"},{"lineNumber":353,"author":{"gitId":"brendanlsz"},"content":"        EntryDatabase database \u003d new EntryDatabase();","lastModifiedDate":"2021-10-26"},{"lineNumber":354,"author":{"gitId":"brendanlsz"},"content":"        Food prata \u003d new Food(\"Prata\", 100, Food.FoodType.MEAL);","lastModifiedDate":"2021-10-26"},{"lineNumber":355,"author":{"gitId":"brendanlsz"},"content":"        Food chickenRice \u003d new Food(\"Chicken Rice\", 325, Food.FoodType.SNACK);","lastModifiedDate":"2021-10-26"},{"lineNumber":356,"author":{"gitId":"brendanlsz"},"content":"        database.addEntry(MealType.DINNER, prata);","lastModifiedDate":"2021-10-26"},{"lineNumber":357,"author":{"gitId":"brendanlsz"},"content":"        database.addEntry(MealType.DINNER, chickenRice);","lastModifiedDate":"2021-10-26"},{"lineNumber":358,"author":{"gitId":"brendanlsz"},"content":"        assertEquals(\"[[\" + LocalDate.now() + \"] Dinner: Chicken Rice (325 Kcal) Type: SNACK]\",","lastModifiedDate":"2021-10-26"},{"lineNumber":359,"author":{"gitId":"brendanlsz"},"content":"                database.findEntries(keyword).toString());","lastModifiedDate":"2021-10-26"},{"lineNumber":360,"author":{"gitId":"brendanlsz"},"content":"        System.out.println(database.findEntries(keyword).toString());","lastModifiedDate":"2021-10-26"},{"lineNumber":361,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":362,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":363,"author":{"gitId":"brendanlsz"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":364,"author":{"gitId":"brendanlsz"},"content":"    void findEntries_emptyStringKeyword_throwsFitNusException() throws FitNusException {","lastModifiedDate":"2021-10-26"},{"lineNumber":365,"author":{"gitId":"brendanlsz"},"content":"        String keyword \u003d \"\";","lastModifiedDate":"2021-10-26"},{"lineNumber":366,"author":{"gitId":"brendanlsz"},"content":"        EntryDatabase database \u003d new EntryDatabase();","lastModifiedDate":"2021-10-26"},{"lineNumber":367,"author":{"gitId":"brendanlsz"},"content":"        Food prata \u003d new Food(\"Prata\", 100, Food.FoodType.MEAL);","lastModifiedDate":"2021-10-26"},{"lineNumber":368,"author":{"gitId":"brendanlsz"},"content":"        Food chickenRice \u003d new Food(\"Chicken Rice\", 325, Food.FoodType.SNACK);","lastModifiedDate":"2021-10-26"},{"lineNumber":369,"author":{"gitId":"brendanlsz"},"content":"        database.addEntry(MealType.DINNER, prata);","lastModifiedDate":"2021-10-26"},{"lineNumber":370,"author":{"gitId":"brendanlsz"},"content":"        database.addEntry(MealType.DINNER, chickenRice);","lastModifiedDate":"2021-10-26"},{"lineNumber":371,"author":{"gitId":"brendanlsz"},"content":"        assertThrows(FitNusException.class, () -\u003e database.findEntries(keyword));","lastModifiedDate":"2021-10-26"},{"lineNumber":372,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":373,"author":{"gitId":"siyuancheng178"},"content":"}","lastModifiedDate":"2021-10-06"}],"authorContributionMap":{"kengjit":248,"brendanlsz":95,"siyuancheng178":21,"aaapppsss":2,"praj-bellakka":7}},{"path":"src/test/java/fitnus/database/FoodDatabaseTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"brendanlsz"},"content":"package fitnus.database;","lastModifiedDate":"2021-10-12"},{"lineNumber":2,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":3,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.exception.FitNusException;","lastModifiedDate":"2021-10-12"},{"lineNumber":4,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.tracker.Food;","lastModifiedDate":"2021-10-12"},{"lineNumber":5,"author":{"gitId":"brendanlsz"},"content":"import fitnus.tracker.MealType;","lastModifiedDate":"2021-10-26"},{"lineNumber":6,"author":{"gitId":"aaapppsss"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-10"},{"lineNumber":7,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":8,"author":{"gitId":"brendanlsz"},"content":"import java.io.BufferedReader;","lastModifiedDate":"2021-10-12"},{"lineNumber":9,"author":{"gitId":"brendanlsz"},"content":"import java.io.ByteArrayInputStream;","lastModifiedDate":"2021-10-12"},{"lineNumber":10,"author":{"gitId":"brendanlsz"},"content":"import java.io.FileInputStream;","lastModifiedDate":"2021-10-31"},{"lineNumber":11,"author":{"gitId":"brendanlsz"},"content":"import java.io.IOException;","lastModifiedDate":"2021-10-12"},{"lineNumber":12,"author":{"gitId":"brendanlsz"},"content":"import java.io.InputStream;","lastModifiedDate":"2021-10-12"},{"lineNumber":13,"author":{"gitId":"brendanlsz"},"content":"import java.io.InputStreamReader;","lastModifiedDate":"2021-10-12"},{"lineNumber":14,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":15,"author":{"gitId":"brendanlsz"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-10-31"},{"lineNumber":16,"author":{"gitId":"brendanlsz"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2021-10-31"},{"lineNumber":17,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":18,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":19,"author":{"gitId":"aaapppsss"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-11"},{"lineNumber":20,"author":{"gitId":"aaapppsss"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2021-10-11"},{"lineNumber":21,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":22,"author":{"gitId":"aaapppsss"},"content":"class FoodDatabaseTest {","lastModifiedDate":"2021-10-10"},{"lineNumber":23,"author":{"gitId":"aaapppsss"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":24,"author":{"gitId":"aaapppsss"},"content":"    void addFood_validCalorieInt_success() throws FitNusException {","lastModifiedDate":"2021-10-11"},{"lineNumber":25,"author":{"gitId":"aaapppsss"},"content":"        FoodDatabase fd \u003d new FoodDatabase();","lastModifiedDate":"2021-10-11"},{"lineNumber":26,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":27,"author":{"gitId":"brendanlsz"},"content":"        fd.addFood(new Food(\"food1\", 100, Food.FoodType.OTHERS));","lastModifiedDate":"2021-10-22"},{"lineNumber":28,"author":{"gitId":"aaapppsss"},"content":"        assertEquals(100, fd.getFoodAtIndex(1).getCalories());","lastModifiedDate":"2021-10-11"},{"lineNumber":29,"author":{"gitId":"aaapppsss"},"content":"        assertEquals(\"food1\", fd.getFoodAtIndex(1).getName());","lastModifiedDate":"2021-10-11"},{"lineNumber":30,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":31,"author":{"gitId":"brendanlsz"},"content":"        fd.addFood(\"food2\", 100, Food.FoodType.MEAL);","lastModifiedDate":"2021-10-22"},{"lineNumber":32,"author":{"gitId":"aaapppsss"},"content":"        assertEquals(100, fd.getFoodAtIndex(2).getCalories());","lastModifiedDate":"2021-10-11"},{"lineNumber":33,"author":{"gitId":"aaapppsss"},"content":"        assertEquals(\"food2\", fd.getFoodAtIndex(2).getName());","lastModifiedDate":"2021-10-11"},{"lineNumber":34,"author":{"gitId":"aaapppsss"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":35,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":36,"author":{"gitId":"aaapppsss"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":37,"author":{"gitId":"aaapppsss"},"content":"    void addFood_lessThanZeroCalorieInt_exceptionThrown() {","lastModifiedDate":"2021-10-11"},{"lineNumber":38,"author":{"gitId":"aaapppsss"},"content":"        FoodDatabase fd \u003d new FoodDatabase();","lastModifiedDate":"2021-10-11"},{"lineNumber":39,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":40,"author":{"gitId":"brendanlsz"},"content":"        Exception exception1 \u003d assertThrows(FitNusException.class, () -\u003e fd.addFood(","lastModifiedDate":"2021-10-22"},{"lineNumber":41,"author":{"gitId":"brendanlsz"},"content":"                new Food(\"food1\", -100, Food.FoodType.SNACK)));","lastModifiedDate":"2021-10-22"},{"lineNumber":42,"author":{"gitId":"aaapppsss"},"content":"        assertEquals(\"Food must have more than 0 calories!\", exception1.getMessage());","lastModifiedDate":"2021-10-11"},{"lineNumber":43,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":44,"author":{"gitId":"brendanlsz"},"content":"        Exception exception2 \u003d assertThrows(FitNusException.class, () -\u003e fd.addFood(","lastModifiedDate":"2021-10-22"},{"lineNumber":45,"author":{"gitId":"brendanlsz"},"content":"                \"food2\", -100, Food.FoodType.OTHERS));","lastModifiedDate":"2021-10-22"},{"lineNumber":46,"author":{"gitId":"aaapppsss"},"content":"        assertEquals(\"Food must have more than 0 calories!\", exception2.getMessage());","lastModifiedDate":"2021-10-11"},{"lineNumber":47,"author":{"gitId":"aaapppsss"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":48,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":49,"author":{"gitId":"aaapppsss"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":50,"author":{"gitId":"aaapppsss"},"content":"    void getFoodAtIndex_validIndex_success() throws FitNusException {","lastModifiedDate":"2021-10-11"},{"lineNumber":51,"author":{"gitId":"aaapppsss"},"content":"        FoodDatabase fd \u003d new FoodDatabase();","lastModifiedDate":"2021-10-11"},{"lineNumber":52,"author":{"gitId":"brendanlsz"},"content":"        fd.addFood(\"food1\", 100, Food.FoodType.MEAL);","lastModifiedDate":"2021-10-22"},{"lineNumber":53,"author":{"gitId":"aaapppsss"},"content":"        assertEquals(\"food1\", fd.getFoodAtIndex(1).getName());","lastModifiedDate":"2021-10-11"},{"lineNumber":54,"author":{"gitId":"aaapppsss"},"content":"        assertEquals(100, fd.getFoodAtIndex(1).getCalories());","lastModifiedDate":"2021-10-11"},{"lineNumber":55,"author":{"gitId":"aaapppsss"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":56,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":57,"author":{"gitId":"aaapppsss"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":58,"author":{"gitId":"aaapppsss"},"content":"    void getFoodAtIndex_outOfBoundsIndex_exceptionThrown() throws FitNusException {","lastModifiedDate":"2021-10-11"},{"lineNumber":59,"author":{"gitId":"aaapppsss"},"content":"        FoodDatabase fd \u003d new FoodDatabase();","lastModifiedDate":"2021-10-11"},{"lineNumber":60,"author":{"gitId":"brendanlsz"},"content":"        fd.addFood(\"food1\", 100, Food.FoodType.MEAL);","lastModifiedDate":"2021-10-22"},{"lineNumber":61,"author":{"gitId":"siyuancheng178"},"content":"        assertThrows(FitNusException.class, () -\u003e fd.getFoodAtIndex(2));","lastModifiedDate":"2021-10-31"},{"lineNumber":62,"author":{"gitId":"aaapppsss"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":63,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":64,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":65,"author":{"gitId":"aaapppsss"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":66,"author":{"gitId":"aaapppsss"},"content":"    void listFoods_databaseWithFoods_listsFoodsSuccessfully() throws FitNusException {","lastModifiedDate":"2021-10-11"},{"lineNumber":67,"author":{"gitId":"aaapppsss"},"content":"        FoodDatabase fd \u003d new FoodDatabase();","lastModifiedDate":"2021-10-11"},{"lineNumber":68,"author":{"gitId":"brendanlsz"},"content":"        fd.addFood(\"food1\", 100, Food.FoodType.BEVERAGE);","lastModifiedDate":"2021-10-22"},{"lineNumber":69,"author":{"gitId":"brendanlsz"},"content":"        fd.addFood(\"food2\", 200, Food.FoodType.MEAL);","lastModifiedDate":"2021-10-22"},{"lineNumber":70,"author":{"gitId":"brendanlsz"},"content":"        assertEquals(\" 1.food1 (100 Kcal) Type: BEVERAGE\" + System.lineSeparator()","lastModifiedDate":"2021-10-25"},{"lineNumber":71,"author":{"gitId":"brendanlsz"},"content":"                + \" 2.food2 (200 Kcal) Type: MEAL\" + System.lineSeparator(), fd.listFoods());","lastModifiedDate":"2021-10-25"},{"lineNumber":72,"author":{"gitId":"aaapppsss"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":73,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":74,"author":{"gitId":"brendanlsz"},"content":"    @Test","lastModifiedDate":"2021-11-06"},{"lineNumber":75,"author":{"gitId":"brendanlsz"},"content":"    void listFoods_databaseWithoutFoods_noRecordsFound() throws FitNusException {","lastModifiedDate":"2021-11-06"},{"lineNumber":76,"author":{"gitId":"brendanlsz"},"content":"        FoodDatabase fd \u003d new FoodDatabase();","lastModifiedDate":"2021-11-06"},{"lineNumber":77,"author":{"gitId":"brendanlsz"},"content":"        assertEquals(\"Oops, there are no records found!\", fd.listFoods());","lastModifiedDate":"2021-11-06"},{"lineNumber":78,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":79,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":80,"author":{"gitId":"aaapppsss"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":81,"author":{"gitId":"brendanlsz"},"content":"    void convertDatabaseToString_databaseWithFoods_foodsAsString() throws FitNusException {","lastModifiedDate":"2021-10-12"},{"lineNumber":82,"author":{"gitId":"brendanlsz"},"content":"        FoodDatabase fd \u003d new FoodDatabase();","lastModifiedDate":"2021-10-12"},{"lineNumber":83,"author":{"gitId":"brendanlsz"},"content":"        fd.addFood(\"food1\", 100, Food.FoodType.MEAL);","lastModifiedDate":"2021-10-22"},{"lineNumber":84,"author":{"gitId":"brendanlsz"},"content":"        fd.addFood(\"food2\", 200, Food.FoodType.SNACK);","lastModifiedDate":"2021-10-22"},{"lineNumber":85,"author":{"gitId":"brendanlsz"},"content":"        assertEquals(\"food1 | 100 | MEAL\" + System.lineSeparator()","lastModifiedDate":"2021-10-22"},{"lineNumber":86,"author":{"gitId":"brendanlsz"},"content":"                + \"food2 | 200 | SNACK\" + System.lineSeparator(), fd.convertDatabaseToString());","lastModifiedDate":"2021-10-22"},{"lineNumber":87,"author":{"gitId":"aaapppsss"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":88,"author":{"gitId":"aaapppsss"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":89,"author":{"gitId":"aaapppsss"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":90,"author":{"gitId":"brendanlsz"},"content":"    void preLoadDatabase_validInput_SuccessfullyPreloadDatabase()","lastModifiedDate":"2021-10-12"},{"lineNumber":91,"author":{"gitId":"brendanlsz"},"content":"            throws FitNusException, IOException {","lastModifiedDate":"2021-10-12"},{"lineNumber":92,"author":{"gitId":"brendanlsz"},"content":"        FoodDatabase database \u003d new FoodDatabase();","lastModifiedDate":"2021-10-31"},{"lineNumber":93,"author":{"gitId":"brendanlsz"},"content":"        String initialString \u003d \"food1 | 100 | MEAL\" + System.lineSeparator() + \"food2 | 200 | MEAL\";","lastModifiedDate":"2021-10-22"},{"lineNumber":94,"author":{"gitId":"brendanlsz"},"content":"        InputStream stream \u003d new ByteArrayInputStream(initialString.getBytes());","lastModifiedDate":"2021-10-12"},{"lineNumber":95,"author":{"gitId":"brendanlsz"},"content":"        BufferedReader reader \u003d new BufferedReader(new InputStreamReader(stream));","lastModifiedDate":"2021-10-12"},{"lineNumber":96,"author":{"gitId":"brendanlsz"},"content":"        database.preloadDatabase(reader);","lastModifiedDate":"2021-10-31"},{"lineNumber":97,"author":{"gitId":"brendanlsz"},"content":"        assertEquals(\" 1.food1 (100 Kcal) Type: MEAL\" + System.lineSeparator()","lastModifiedDate":"2021-10-25"},{"lineNumber":98,"author":{"gitId":"brendanlsz"},"content":"                + \" 2.food2 (200 Kcal) Type: MEAL\" + System.lineSeparator(), database.listFoods());","lastModifiedDate":"2021-10-31"},{"lineNumber":99,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-10-31"},{"lineNumber":100,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":101,"author":{"gitId":"brendanlsz"},"content":"    @Test","lastModifiedDate":"2021-10-31"},{"lineNumber":102,"author":{"gitId":"brendanlsz"},"content":"    void preLoadDatabase_invalidInput_throwsFitNusException()","lastModifiedDate":"2021-10-31"},{"lineNumber":103,"author":{"gitId":"brendanlsz"},"content":"            throws IOException {","lastModifiedDate":"2021-10-31"},{"lineNumber":104,"author":{"gitId":"brendanlsz"},"content":"        FoodDatabase database \u003d new FoodDatabase();","lastModifiedDate":"2021-10-31"},{"lineNumber":105,"author":{"gitId":"brendanlsz"},"content":"        String initialString \u003d \"food1 | 100 | MAL\" + System.lineSeparator() + \"food2 | | MEAL\";","lastModifiedDate":"2021-10-31"},{"lineNumber":106,"author":{"gitId":"brendanlsz"},"content":"        InputStream stream \u003d new ByteArrayInputStream(initialString.getBytes());","lastModifiedDate":"2021-10-31"},{"lineNumber":107,"author":{"gitId":"brendanlsz"},"content":"        BufferedReader reader \u003d new BufferedReader(new InputStreamReader(stream));","lastModifiedDate":"2021-10-31"},{"lineNumber":108,"author":{"gitId":"brendanlsz"},"content":"        assertThrows(FitNusException.class, () -\u003e database.preloadDatabase(reader));","lastModifiedDate":"2021-10-31"},{"lineNumber":109,"author":{"gitId":"brendanlsz"},"content":"        reader.close();","lastModifiedDate":"2021-10-31"},{"lineNumber":110,"author":{"gitId":"aaapppsss"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":111,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":112,"author":{"gitId":"brendanlsz"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":113,"author":{"gitId":"brendanlsz"},"content":"    void findFoods_validKeyword_getMatchingFoods() throws FitNusException {","lastModifiedDate":"2021-10-26"},{"lineNumber":114,"author":{"gitId":"brendanlsz"},"content":"        String keyword \u003d \"Rice\";","lastModifiedDate":"2021-10-26"},{"lineNumber":115,"author":{"gitId":"brendanlsz"},"content":"        FoodDatabase database \u003d new FoodDatabase();","lastModifiedDate":"2021-10-26"},{"lineNumber":116,"author":{"gitId":"brendanlsz"},"content":"        Food prata \u003d new Food(\"Prata\", 100, Food.FoodType.MEAL);","lastModifiedDate":"2021-10-26"},{"lineNumber":117,"author":{"gitId":"brendanlsz"},"content":"        Food chickenRice \u003d new Food(\"Chicken Rice\", 325, Food.FoodType.SNACK);","lastModifiedDate":"2021-10-26"},{"lineNumber":118,"author":{"gitId":"brendanlsz"},"content":"        database.addFood(prata);","lastModifiedDate":"2021-10-26"},{"lineNumber":119,"author":{"gitId":"brendanlsz"},"content":"        database.addFood(chickenRice);","lastModifiedDate":"2021-10-26"},{"lineNumber":120,"author":{"gitId":"brendanlsz"},"content":"        assertEquals(\"[Chicken Rice (325 Kcal) Type: SNACK]\",","lastModifiedDate":"2021-10-26"},{"lineNumber":121,"author":{"gitId":"brendanlsz"},"content":"                database.findFoods(keyword).toString());","lastModifiedDate":"2021-10-26"},{"lineNumber":122,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":123,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":124,"author":{"gitId":"brendanlsz"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":125,"author":{"gitId":"brendanlsz"},"content":"    void findFoods_emptyStringKeyword_throwsFitNusException() throws FitNusException {","lastModifiedDate":"2021-10-26"},{"lineNumber":126,"author":{"gitId":"brendanlsz"},"content":"        String keyword \u003d \"\";","lastModifiedDate":"2021-10-26"},{"lineNumber":127,"author":{"gitId":"brendanlsz"},"content":"        FoodDatabase database \u003d new FoodDatabase();","lastModifiedDate":"2021-10-26"},{"lineNumber":128,"author":{"gitId":"brendanlsz"},"content":"        Food prata \u003d new Food(\"Prata\", 100, Food.FoodType.MEAL);","lastModifiedDate":"2021-10-26"},{"lineNumber":129,"author":{"gitId":"brendanlsz"},"content":"        Food chickenRice \u003d new Food(\"Chicken Rice\", 325, Food.FoodType.SNACK);","lastModifiedDate":"2021-10-26"},{"lineNumber":130,"author":{"gitId":"brendanlsz"},"content":"        database.addFood(prata);","lastModifiedDate":"2021-10-26"},{"lineNumber":131,"author":{"gitId":"brendanlsz"},"content":"        database.addFood(chickenRice);","lastModifiedDate":"2021-10-26"},{"lineNumber":132,"author":{"gitId":"brendanlsz"},"content":"        assertThrows(FitNusException.class, () -\u003e database.findFoods(keyword));","lastModifiedDate":"2021-10-26"},{"lineNumber":133,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":134,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":135,"author":{"gitId":"brendanlsz"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":136,"author":{"gitId":"brendanlsz"},"content":"    void findSuggestions_validInput_correctSuggestions() throws FitNusException {","lastModifiedDate":"2021-10-26"},{"lineNumber":137,"author":{"gitId":"brendanlsz"},"content":"        FoodDatabase database \u003d new FoodDatabase();","lastModifiedDate":"2021-10-26"},{"lineNumber":138,"author":{"gitId":"brendanlsz"},"content":"        Food prata \u003d new Food(\"Prata\", 100, Food.FoodType.MEAL);","lastModifiedDate":"2021-10-26"},{"lineNumber":139,"author":{"gitId":"brendanlsz"},"content":"        Food chickenRice \u003d new Food(\"Chicken Rice\", 325, Food.FoodType.SNACK);","lastModifiedDate":"2021-10-26"},{"lineNumber":140,"author":{"gitId":"brendanlsz"},"content":"        database.addFood(prata);","lastModifiedDate":"2021-10-26"},{"lineNumber":141,"author":{"gitId":"brendanlsz"},"content":"        database.addFood(chickenRice);","lastModifiedDate":"2021-10-26"},{"lineNumber":142,"author":{"gitId":"brendanlsz"},"content":"        assertEquals(\"[Prata (100 Kcal) Type: MEAL]\",","lastModifiedDate":"2021-10-26"},{"lineNumber":143,"author":{"gitId":"brendanlsz"},"content":"                database.findSuggestions(Food.FoodType.MEAL, 1000, true).toString());","lastModifiedDate":"2021-10-26"},{"lineNumber":144,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":145,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":146,"author":{"gitId":"brendanlsz"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":147,"author":{"gitId":"brendanlsz"},"content":"    void findSuggestions_invalidInput_noMatchingSuggestions() throws FitNusException {","lastModifiedDate":"2021-10-26"},{"lineNumber":148,"author":{"gitId":"brendanlsz"},"content":"        FoodDatabase database \u003d new FoodDatabase();","lastModifiedDate":"2021-10-26"},{"lineNumber":149,"author":{"gitId":"brendanlsz"},"content":"        Food prata \u003d new Food(\"Prata\", 100, Food.FoodType.MEAL);","lastModifiedDate":"2021-10-26"},{"lineNumber":150,"author":{"gitId":"brendanlsz"},"content":"        Food chickenRice \u003d new Food(\"Chicken Rice\", 325, Food.FoodType.SNACK);","lastModifiedDate":"2021-10-26"},{"lineNumber":151,"author":{"gitId":"brendanlsz"},"content":"        database.addFood(prata);","lastModifiedDate":"2021-10-26"},{"lineNumber":152,"author":{"gitId":"brendanlsz"},"content":"        database.addFood(chickenRice);","lastModifiedDate":"2021-10-26"},{"lineNumber":153,"author":{"gitId":"brendanlsz"},"content":"        assertEquals(\"[]\", database.findSuggestions(null, -1000, true).toString());","lastModifiedDate":"2021-10-26"},{"lineNumber":154,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":155,"author":{"gitId":"aaapppsss"},"content":"}","lastModifiedDate":"2021-10-10"}],"authorContributionMap":{"brendanlsz":101,"siyuancheng178":1,"aaapppsss":51,"praj-bellakka":2}},{"path":"src/test/java/fitnus/database/MealPlanDatabaseTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"praj-bellakka"},"content":"package fitnus.database;","lastModifiedDate":"2021-10-26"},{"lineNumber":2,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":3,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.exception.FitNusException;","lastModifiedDate":"2021-10-26"},{"lineNumber":4,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.tracker.Food;","lastModifiedDate":"2021-10-26"},{"lineNumber":5,"author":{"gitId":"praj-bellakka"},"content":"import fitnus.tracker.MealPlan;","lastModifiedDate":"2021-10-26"},{"lineNumber":6,"author":{"gitId":"praj-bellakka"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-26"},{"lineNumber":7,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":8,"author":{"gitId":"praj-bellakka"},"content":"import java.io.BufferedReader;","lastModifiedDate":"2021-11-06"},{"lineNumber":9,"author":{"gitId":"praj-bellakka"},"content":"import java.io.ByteArrayInputStream;","lastModifiedDate":"2021-11-06"},{"lineNumber":10,"author":{"gitId":"praj-bellakka"},"content":"import java.io.IOException;","lastModifiedDate":"2021-11-06"},{"lineNumber":11,"author":{"gitId":"praj-bellakka"},"content":"import java.io.InputStream;","lastModifiedDate":"2021-11-06"},{"lineNumber":12,"author":{"gitId":"praj-bellakka"},"content":"import java.io.InputStreamReader;","lastModifiedDate":"2021-11-06"},{"lineNumber":13,"author":{"gitId":"praj-bellakka"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-26"},{"lineNumber":14,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":15,"author":{"gitId":"praj-bellakka"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-26"},{"lineNumber":16,"author":{"gitId":"praj-bellakka"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2021-10-26"},{"lineNumber":17,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":18,"author":{"gitId":"praj-bellakka"},"content":"public class MealPlanDatabaseTest {","lastModifiedDate":"2021-10-26"},{"lineNumber":19,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":20,"author":{"gitId":"praj-bellakka"},"content":"    //initialising","lastModifiedDate":"2021-10-26"},{"lineNumber":21,"author":{"gitId":"praj-bellakka"},"content":"    MealPlanDatabase md \u003d new MealPlanDatabase();","lastModifiedDate":"2021-10-26"},{"lineNumber":22,"author":{"gitId":"praj-bellakka"},"content":"    ArrayList\u003cFood\u003e foodArray \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-26"},{"lineNumber":23,"author":{"gitId":"praj-bellakka"},"content":"    MealPlan plan \u003d new MealPlan(\"test\", foodArray);","lastModifiedDate":"2021-10-31"},{"lineNumber":24,"author":{"gitId":"praj-bellakka"},"content":"    MealPlan emptyPlan \u003d new MealPlan(\"test\", new ArrayList\u003c\u003e());","lastModifiedDate":"2021-10-31"},{"lineNumber":25,"author":{"gitId":"praj-bellakka"},"content":"    String initialString \u003d \"chicken rice | 213 | SNACK\" + System.lineSeparator()","lastModifiedDate":"2021-11-06"},{"lineNumber":26,"author":{"gitId":"praj-bellakka"},"content":"            + \"duck rice | 20 | SNACK\" + System.lineSeparator()","lastModifiedDate":"2021-11-06"},{"lineNumber":27,"author":{"gitId":"praj-bellakka"},"content":"            + \"rice | 1234 | MEAL\" + System.lineSeparator() + \"-------- | testing\";","lastModifiedDate":"2021-11-06"},{"lineNumber":28,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":29,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":30,"author":{"gitId":"praj-bellakka"},"content":"    MealPlanDatabaseTest() throws FitNusException {","lastModifiedDate":"2021-10-31"},{"lineNumber":31,"author":{"gitId":"praj-bellakka"},"content":"        foodArray.add(new Food(\"food1\", 100, Food.FoodType.BEVERAGE));","lastModifiedDate":"2021-10-26"},{"lineNumber":32,"author":{"gitId":"praj-bellakka"},"content":"        md.addMealPlan(new MealPlan(\"test\", foodArray));","lastModifiedDate":"2021-10-26"},{"lineNumber":33,"author":{"gitId":"praj-bellakka"},"content":"    }","lastModifiedDate":"2021-10-31"},{"lineNumber":34,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":35,"author":{"gitId":"praj-bellakka"},"content":"    @Test","lastModifiedDate":"2021-10-31"},{"lineNumber":36,"author":{"gitId":"praj-bellakka"},"content":"    void getMealAtIndex_validIndex_success() throws FitNusException {","lastModifiedDate":"2021-10-31"},{"lineNumber":37,"author":{"gitId":"praj-bellakka"},"content":"        assertEquals(plan.getMealFoods(), md.getMealAtIndex(1).getMealFoods());","lastModifiedDate":"2021-10-26"},{"lineNumber":38,"author":{"gitId":"praj-bellakka"},"content":"        assertEquals(plan.getMealPlanName(), md.getMealAtIndex(1).getMealPlanName());","lastModifiedDate":"2021-10-26"},{"lineNumber":39,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":40,"author":{"gitId":"praj-bellakka"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":41,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":42,"author":{"gitId":"praj-bellakka"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":43,"author":{"gitId":"praj-bellakka"},"content":"    void getMealAtIndex_invalidIndex_failure() throws FitNusException {","lastModifiedDate":"2021-10-26"},{"lineNumber":44,"author":{"gitId":"praj-bellakka"},"content":"        Exception exception1 \u003d assertThrows(FitNusException.class, () -\u003e md.getMealAtIndex(2).getMealFoods());","lastModifiedDate":"2021-10-26"},{"lineNumber":45,"author":{"gitId":"praj-bellakka"},"content":"        assertEquals(\"Index specified is outside the range of the database! \"","lastModifiedDate":"2021-10-26"},{"lineNumber":46,"author":{"gitId":"praj-bellakka"},"content":"                + \"Meal plan could not be found...\", exception1.getMessage());","lastModifiedDate":"2021-10-26"},{"lineNumber":47,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":48,"author":{"gitId":"praj-bellakka"},"content":"        Exception exception2 \u003d assertThrows(FitNusException.class, () -\u003e md.getMealAtIndex(0).getMealPlanName());","lastModifiedDate":"2021-10-26"},{"lineNumber":49,"author":{"gitId":"praj-bellakka"},"content":"        assertEquals(\"Index specified is outside the range of the database! \"","lastModifiedDate":"2021-10-26"},{"lineNumber":50,"author":{"gitId":"praj-bellakka"},"content":"                + \"Meal plan could not be found...\", exception2.getMessage());","lastModifiedDate":"2021-10-26"},{"lineNumber":51,"author":{"gitId":"praj-bellakka"},"content":"    }","lastModifiedDate":"2021-10-31"},{"lineNumber":52,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":53,"author":{"gitId":"praj-bellakka"},"content":"    @Test","lastModifiedDate":"2021-10-31"},{"lineNumber":54,"author":{"gitId":"praj-bellakka"},"content":"    void addMealPlan_validMealPlan_planAddedSuccessfully() throws FitNusException {","lastModifiedDate":"2021-10-31"},{"lineNumber":55,"author":{"gitId":"praj-bellakka"},"content":"        assertEquals(plan.toString(), md.getMealAtIndex(1).getMealPlanName());","lastModifiedDate":"2021-10-31"},{"lineNumber":56,"author":{"gitId":"praj-bellakka"},"content":"        assertEquals(plan.getMealFoods().get(0), md.getMealAtIndex(1).getMealFoods().get(0));","lastModifiedDate":"2021-10-31"},{"lineNumber":57,"author":{"gitId":"praj-bellakka"},"content":"    }","lastModifiedDate":"2021-10-31"},{"lineNumber":58,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":59,"author":{"gitId":"praj-bellakka"},"content":"    @Test","lastModifiedDate":"2021-10-31"},{"lineNumber":60,"author":{"gitId":"praj-bellakka"},"content":"    void addMealPlan_emptyMealPlan_planAddedUnsuccessfully() throws FitNusException {","lastModifiedDate":"2021-10-31"},{"lineNumber":61,"author":{"gitId":"praj-bellakka"},"content":"        Exception exception1 \u003d assertThrows(FitNusException.class, () -\u003e md.addMealPlan(emptyPlan));","lastModifiedDate":"2021-10-31"},{"lineNumber":62,"author":{"gitId":"praj-bellakka"},"content":"        assertEquals(\"Unable to add meal plan as no food detected.\", exception1.getMessage());","lastModifiedDate":"2021-11-01"},{"lineNumber":63,"author":{"gitId":"praj-bellakka"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":64,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":65,"author":{"gitId":"praj-bellakka"},"content":"    @Test","lastModifiedDate":"2021-11-06"},{"lineNumber":66,"author":{"gitId":"praj-bellakka"},"content":"    void preLoadDatabase_validInput_SuccessfullyPreloadDatabase() throws IOException {","lastModifiedDate":"2021-11-06"},{"lineNumber":67,"author":{"gitId":"praj-bellakka"},"content":"        InputStream stream \u003d new ByteArrayInputStream(initialString.getBytes());","lastModifiedDate":"2021-11-06"},{"lineNumber":68,"author":{"gitId":"praj-bellakka"},"content":"        BufferedReader reader \u003d new BufferedReader(new InputStreamReader(stream));","lastModifiedDate":"2021-11-06"},{"lineNumber":69,"author":{"gitId":"praj-bellakka"},"content":"        MealPlanDatabase newMd \u003d new MealPlanDatabase();","lastModifiedDate":"2021-11-06"},{"lineNumber":70,"author":{"gitId":"praj-bellakka"},"content":"        newMd.preloadDatabase(reader);","lastModifiedDate":"2021-11-06"},{"lineNumber":71,"author":{"gitId":"praj-bellakka"},"content":"        assertEquals(\"1. Meal plan: testing\" + System.lineSeparator()","lastModifiedDate":"2021-11-06"},{"lineNumber":72,"author":{"gitId":"praj-bellakka"},"content":"                + \"chicken rice (213 Kcal) Type: SNACK\" + System.lineSeparator()","lastModifiedDate":"2021-11-06"},{"lineNumber":73,"author":{"gitId":"praj-bellakka"},"content":"                + \"duck rice (20 Kcal) Type: SNACK\" + System.lineSeparator()","lastModifiedDate":"2021-11-06"},{"lineNumber":74,"author":{"gitId":"praj-bellakka"},"content":"                + \"rice (1234 Kcal) Type: MEAL\" + System.lineSeparator()","lastModifiedDate":"2021-11-06"},{"lineNumber":75,"author":{"gitId":"praj-bellakka"},"content":"                + System.lineSeparator(), newMd.listMealPlan());","lastModifiedDate":"2021-11-06"},{"lineNumber":76,"author":{"gitId":"praj-bellakka"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":77,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":78,"author":{"gitId":"praj-bellakka"},"content":"}","lastModifiedDate":"2021-10-26"}],"authorContributionMap":{"praj-bellakka":78}},{"path":"src/test/java/fitnus/storage/StorageTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"brendanlsz"},"content":"package fitnus.storage;","lastModifiedDate":"2021-10-25"},{"lineNumber":2,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":3,"author":{"gitId":"brendanlsz"},"content":"import fitnus.database.EntryDatabase;","lastModifiedDate":"2021-10-25"},{"lineNumber":4,"author":{"gitId":"brendanlsz"},"content":"import fitnus.database.FoodDatabase;","lastModifiedDate":"2021-10-25"},{"lineNumber":5,"author":{"gitId":"brendanlsz"},"content":"import fitnus.exception.FitNusException;","lastModifiedDate":"2021-10-25"},{"lineNumber":6,"author":{"gitId":"brendanlsz"},"content":"import fitnus.tracker.Food;","lastModifiedDate":"2021-10-25"},{"lineNumber":7,"author":{"gitId":"brendanlsz"},"content":"import fitnus.tracker.MealType;","lastModifiedDate":"2021-10-25"},{"lineNumber":8,"author":{"gitId":"brendanlsz"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-25"},{"lineNumber":9,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":10,"author":{"gitId":"brendanlsz"},"content":"import java.io.File;","lastModifiedDate":"2021-10-25"},{"lineNumber":11,"author":{"gitId":"brendanlsz"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-10-25"},{"lineNumber":12,"author":{"gitId":"brendanlsz"},"content":"import java.io.IOException;","lastModifiedDate":"2021-10-25"},{"lineNumber":13,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":14,"author":{"gitId":"brendanlsz"},"content":"import java.nio.file.Files;","lastModifiedDate":"2021-10-25"},{"lineNumber":15,"author":{"gitId":"brendanlsz"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-10-25"},{"lineNumber":16,"author":{"gitId":"brendanlsz"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2021-10-25"},{"lineNumber":17,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":18,"author":{"gitId":"brendanlsz"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2021-10-25"},{"lineNumber":19,"author":{"gitId":"brendanlsz"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-25"},{"lineNumber":20,"author":{"gitId":"brendanlsz"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2021-10-31"},{"lineNumber":21,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":22,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":23,"author":{"gitId":"brendanlsz"},"content":"class StorageTest {","lastModifiedDate":"2021-10-25"},{"lineNumber":24,"author":{"gitId":"brendanlsz"},"content":"    private static final String ROOT \u003d System.getProperty(\"user.dir\");","lastModifiedDate":"2021-10-25"},{"lineNumber":25,"author":{"gitId":"brendanlsz"},"content":"    private static final Path FILE_PATH_FOOD_DATA \u003d Paths.get(ROOT, \"data\", \"food.txt\");","lastModifiedDate":"2021-10-31"},{"lineNumber":26,"author":{"gitId":"brendanlsz"},"content":"    private static final Path FILE_PATH_ENTRY_DATA \u003d Paths.get(ROOT, \"data\", \"entry.txt\");","lastModifiedDate":"2021-10-31"},{"lineNumber":27,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":28,"author":{"gitId":"brendanlsz"},"content":"    private static final String FOOD_DATA \u003d \"ramen | 600 | MEAL\\n\"","lastModifiedDate":"2021-10-31"},{"lineNumber":29,"author":{"gitId":"brendanlsz"},"content":"            + \"rice | 800 | MEAL\\n\";","lastModifiedDate":"2021-10-31"},{"lineNumber":30,"author":{"gitId":"brendanlsz"},"content":"    private static final String ENTRY_DATA \u003d \"Lunch | ramen | 600 | 2021-10-25 | MEAL\\n\"","lastModifiedDate":"2021-10-31"},{"lineNumber":31,"author":{"gitId":"brendanlsz"},"content":"            + \"Lunch | rice | 800 | 2021-10-25 | MEAL\\n\";","lastModifiedDate":"2021-10-31"},{"lineNumber":32,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":33,"author":{"gitId":"brendanlsz"},"content":"    //Utility method","lastModifiedDate":"2021-10-25"},{"lineNumber":34,"author":{"gitId":"brendanlsz"},"content":"    private static void saveData(String filePath, String content) throws IOException {","lastModifiedDate":"2021-10-25"},{"lineNumber":35,"author":{"gitId":"brendanlsz"},"content":"        File file \u003d new File(filePath);","lastModifiedDate":"2021-10-25"},{"lineNumber":36,"author":{"gitId":"brendanlsz"},"content":"        FileWriter fw;","lastModifiedDate":"2021-10-25"},{"lineNumber":37,"author":{"gitId":"brendanlsz"},"content":"        fw \u003d new FileWriter(file);","lastModifiedDate":"2021-10-25"},{"lineNumber":38,"author":{"gitId":"brendanlsz"},"content":"        fw.write(content);","lastModifiedDate":"2021-10-25"},{"lineNumber":39,"author":{"gitId":"brendanlsz"},"content":"        fw.close();","lastModifiedDate":"2021-10-25"},{"lineNumber":40,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":41,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":42,"author":{"gitId":"brendanlsz"},"content":"    //Utility method","lastModifiedDate":"2021-10-31"},{"lineNumber":43,"author":{"gitId":"brendanlsz"},"content":"    private void initialiseFileTestContents() throws IOException {","lastModifiedDate":"2021-10-31"},{"lineNumber":44,"author":{"gitId":"brendanlsz"},"content":"        saveData(FILE_PATH_FOOD_DATA.toString(), FOOD_DATA);","lastModifiedDate":"2021-10-31"},{"lineNumber":45,"author":{"gitId":"brendanlsz"},"content":"        saveData(FILE_PATH_ENTRY_DATA.toString(), ENTRY_DATA);","lastModifiedDate":"2021-10-31"},{"lineNumber":46,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-10-31"},{"lineNumber":47,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":48,"author":{"gitId":"brendanlsz"},"content":"    @Test","lastModifiedDate":"2021-10-25"},{"lineNumber":49,"author":{"gitId":"brendanlsz"},"content":"    void initialiseFoodDatabase_validStorageFile_preloadSuccess()","lastModifiedDate":"2021-10-25"},{"lineNumber":50,"author":{"gitId":"brendanlsz"},"content":"            throws IOException, FitNusException {","lastModifiedDate":"2021-10-25"},{"lineNumber":51,"author":{"gitId":"brendanlsz"},"content":"        Storage.createDirectoryAndFiles();","lastModifiedDate":"2021-10-31"},{"lineNumber":52,"author":{"gitId":"brendanlsz"},"content":"        initialiseFileTestContents();","lastModifiedDate":"2021-10-31"},{"lineNumber":53,"author":{"gitId":"brendanlsz"},"content":"        FoodDatabase database \u003d new FoodDatabase();","lastModifiedDate":"2021-10-25"},{"lineNumber":54,"author":{"gitId":"brendanlsz"},"content":"        Storage.initialiseFoodDatabase(database);","lastModifiedDate":"2021-10-31"},{"lineNumber":55,"author":{"gitId":"brendanlsz"},"content":"        String fileContent \u003d Files.readString(FILE_PATH_FOOD_DATA);","lastModifiedDate":"2021-10-31"},{"lineNumber":56,"author":{"gitId":"brendanlsz"},"content":"        String expected \u003d fileContent.replaceAll(\"\\n\", System.lineSeparator());","lastModifiedDate":"2021-10-31"},{"lineNumber":57,"author":{"gitId":"brendanlsz"},"content":"        assertEquals(expected, database.convertDatabaseToString());","lastModifiedDate":"2021-10-31"},{"lineNumber":58,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":59,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":60,"author":{"gitId":"brendanlsz"},"content":"    @Test","lastModifiedDate":"2021-10-25"},{"lineNumber":61,"author":{"gitId":"brendanlsz"},"content":"    void initialiseFoodDatabase_fileNotExists_throwsAssertionError() throws IOException {","lastModifiedDate":"2021-10-31"},{"lineNumber":62,"author":{"gitId":"brendanlsz"},"content":"        Storage.createDirectoryAndFiles();","lastModifiedDate":"2021-10-31"},{"lineNumber":63,"author":{"gitId":"brendanlsz"},"content":"        initialiseFileTestContents();","lastModifiedDate":"2021-10-31"},{"lineNumber":64,"author":{"gitId":"brendanlsz"},"content":"        FoodDatabase database \u003d new FoodDatabase();","lastModifiedDate":"2021-10-25"},{"lineNumber":65,"author":{"gitId":"brendanlsz"},"content":"        File file \u003d new File(FILE_PATH_FOOD_DATA.toString());","lastModifiedDate":"2021-10-31"},{"lineNumber":66,"author":{"gitId":"brendanlsz"},"content":"        boolean isDeleted \u003d file.delete();","lastModifiedDate":"2021-10-31"},{"lineNumber":67,"author":{"gitId":"brendanlsz"},"content":"        if (!isDeleted) {","lastModifiedDate":"2021-10-31"},{"lineNumber":68,"author":{"gitId":"brendanlsz"},"content":"            fail();","lastModifiedDate":"2021-10-31"},{"lineNumber":69,"author":{"gitId":"brendanlsz"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":70,"author":{"gitId":"brendanlsz"},"content":"        assertThrows(AssertionError.class, () -\u003e","lastModifiedDate":"2021-10-31"},{"lineNumber":71,"author":{"gitId":"brendanlsz"},"content":"                Storage.initialiseFoodDatabase(database));","lastModifiedDate":"2021-10-31"},{"lineNumber":72,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":73,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":74,"author":{"gitId":"brendanlsz"},"content":"    @Test","lastModifiedDate":"2021-10-25"},{"lineNumber":75,"author":{"gitId":"brendanlsz"},"content":"    void initialiseEntryDatabase_validStorageFile_preloadSuccess()","lastModifiedDate":"2021-10-25"},{"lineNumber":76,"author":{"gitId":"brendanlsz"},"content":"            throws IOException {","lastModifiedDate":"2021-10-25"},{"lineNumber":77,"author":{"gitId":"brendanlsz"},"content":"        Storage.createDirectoryAndFiles();","lastModifiedDate":"2021-10-31"},{"lineNumber":78,"author":{"gitId":"brendanlsz"},"content":"        initialiseFileTestContents();","lastModifiedDate":"2021-10-31"},{"lineNumber":79,"author":{"gitId":"brendanlsz"},"content":"        EntryDatabase database \u003d new EntryDatabase();","lastModifiedDate":"2021-10-25"},{"lineNumber":80,"author":{"gitId":"brendanlsz"},"content":"        Storage.initialiseEntryDatabase(database);","lastModifiedDate":"2021-10-31"},{"lineNumber":81,"author":{"gitId":"brendanlsz"},"content":"        String fileContent \u003d Files.readString(FILE_PATH_ENTRY_DATA);","lastModifiedDate":"2021-10-31"},{"lineNumber":82,"author":{"gitId":"brendanlsz"},"content":"        String expected \u003d fileContent.replaceAll(\"\\n\", System.lineSeparator());","lastModifiedDate":"2021-10-31"},{"lineNumber":83,"author":{"gitId":"brendanlsz"},"content":"        assertEquals(expected, database.convertDatabaseToString());","lastModifiedDate":"2021-10-31"},{"lineNumber":84,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":85,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":86,"author":{"gitId":"brendanlsz"},"content":"    @Test","lastModifiedDate":"2021-10-25"},{"lineNumber":87,"author":{"gitId":"brendanlsz"},"content":"    void initialiseEntryDatabase_invalidFilePath_throwsAssertionError() throws IOException {","lastModifiedDate":"2021-10-31"},{"lineNumber":88,"author":{"gitId":"brendanlsz"},"content":"        Storage.createDirectoryAndFiles();","lastModifiedDate":"2021-10-31"},{"lineNumber":89,"author":{"gitId":"brendanlsz"},"content":"        initialiseFileTestContents();","lastModifiedDate":"2021-10-31"},{"lineNumber":90,"author":{"gitId":"brendanlsz"},"content":"        EntryDatabase database \u003d new EntryDatabase();","lastModifiedDate":"2021-10-25"},{"lineNumber":91,"author":{"gitId":"brendanlsz"},"content":"        File file \u003d new File(FILE_PATH_ENTRY_DATA.toString());","lastModifiedDate":"2021-10-31"},{"lineNumber":92,"author":{"gitId":"brendanlsz"},"content":"        boolean isDeleted \u003d file.delete();","lastModifiedDate":"2021-10-31"},{"lineNumber":93,"author":{"gitId":"brendanlsz"},"content":"        if (!isDeleted) {","lastModifiedDate":"2021-10-31"},{"lineNumber":94,"author":{"gitId":"brendanlsz"},"content":"            fail();","lastModifiedDate":"2021-10-31"},{"lineNumber":95,"author":{"gitId":"brendanlsz"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":96,"author":{"gitId":"brendanlsz"},"content":"        assertThrows(AssertionError.class, () -\u003e","lastModifiedDate":"2021-10-31"},{"lineNumber":97,"author":{"gitId":"brendanlsz"},"content":"                Storage.initialiseEntryDatabase(database));","lastModifiedDate":"2021-10-31"},{"lineNumber":98,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":99,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":100,"author":{"gitId":"brendanlsz"},"content":"    @Test","lastModifiedDate":"2021-10-25"},{"lineNumber":101,"author":{"gitId":"brendanlsz"},"content":"    void initialiseUser() {","lastModifiedDate":"2021-10-25"},{"lineNumber":102,"author":{"gitId":"brendanlsz"},"content":"        // Adeline can do this?","lastModifiedDate":"2021-10-25"},{"lineNumber":103,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":104,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":105,"author":{"gitId":"brendanlsz"},"content":"    @Test","lastModifiedDate":"2021-10-25"},{"lineNumber":106,"author":{"gitId":"brendanlsz"},"content":"    void initialiseWeightProgress() {","lastModifiedDate":"2021-10-25"},{"lineNumber":107,"author":{"gitId":"brendanlsz"},"content":"        // Adeline can do this?","lastModifiedDate":"2021-10-25"},{"lineNumber":108,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":109,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":110,"author":{"gitId":"brendanlsz"},"content":"    @Test","lastModifiedDate":"2021-10-25"},{"lineNumber":111,"author":{"gitId":"brendanlsz"},"content":"    void saveFoodDatabase_validFilePath_saveSuccessfully() throws FitNusException, IOException {","lastModifiedDate":"2021-10-26"},{"lineNumber":112,"author":{"gitId":"brendanlsz"},"content":"        Storage.createDirectoryAndFiles();","lastModifiedDate":"2021-10-31"},{"lineNumber":113,"author":{"gitId":"brendanlsz"},"content":"        initialiseFileTestContents();","lastModifiedDate":"2021-10-31"},{"lineNumber":114,"author":{"gitId":"brendanlsz"},"content":"        FoodDatabase database \u003d new FoodDatabase();","lastModifiedDate":"2021-10-25"},{"lineNumber":115,"author":{"gitId":"brendanlsz"},"content":"        database.addFood(\"ramen\", 400, Food.FoodType.MEAL);","lastModifiedDate":"2021-10-25"},{"lineNumber":116,"author":{"gitId":"brendanlsz"},"content":"        database.addFood(\"rice\", 900, Food.FoodType.SNACK);","lastModifiedDate":"2021-10-25"},{"lineNumber":117,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":118,"author":{"gitId":"brendanlsz"},"content":"        String expected \u003d database.convertDatabaseToString();","lastModifiedDate":"2021-10-31"},{"lineNumber":119,"author":{"gitId":"brendanlsz"},"content":"        Storage.saveFoodDatabase(database);","lastModifiedDate":"2021-10-31"},{"lineNumber":120,"author":{"gitId":"brendanlsz"},"content":"        String fileContent \u003d Files.readString(FILE_PATH_FOOD_DATA);","lastModifiedDate":"2021-10-31"},{"lineNumber":121,"author":{"gitId":"brendanlsz"},"content":"        assertEquals(expected, fileContent);","lastModifiedDate":"2021-10-31"},{"lineNumber":122,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":123,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":124,"author":{"gitId":"brendanlsz"},"content":"    @Test","lastModifiedDate":"2021-10-25"},{"lineNumber":125,"author":{"gitId":"brendanlsz"},"content":"    void saveFoodDatabase_invalidFilePath_throwsAssertionError()","lastModifiedDate":"2021-10-31"},{"lineNumber":126,"author":{"gitId":"brendanlsz"},"content":"            throws FitNusException, IOException {","lastModifiedDate":"2021-10-31"},{"lineNumber":127,"author":{"gitId":"brendanlsz"},"content":"        Storage.createDirectoryAndFiles();","lastModifiedDate":"2021-10-31"},{"lineNumber":128,"author":{"gitId":"brendanlsz"},"content":"        initialiseFileTestContents();","lastModifiedDate":"2021-10-31"},{"lineNumber":129,"author":{"gitId":"brendanlsz"},"content":"        FoodDatabase database \u003d new FoodDatabase();","lastModifiedDate":"2021-10-26"},{"lineNumber":130,"author":{"gitId":"brendanlsz"},"content":"        database.addFood(\"ramen\", 400, Food.FoodType.MEAL);","lastModifiedDate":"2021-10-26"},{"lineNumber":131,"author":{"gitId":"brendanlsz"},"content":"        database.addFood(\"rice\", 900, Food.FoodType.SNACK);","lastModifiedDate":"2021-10-26"},{"lineNumber":132,"author":{"gitId":"brendanlsz"},"content":"        File file \u003d new File(FILE_PATH_FOOD_DATA.toString());","lastModifiedDate":"2021-10-31"},{"lineNumber":133,"author":{"gitId":"brendanlsz"},"content":"        boolean isDeleted \u003d file.delete();","lastModifiedDate":"2021-10-31"},{"lineNumber":134,"author":{"gitId":"brendanlsz"},"content":"        if (!isDeleted) {","lastModifiedDate":"2021-10-31"},{"lineNumber":135,"author":{"gitId":"brendanlsz"},"content":"            fail();","lastModifiedDate":"2021-10-31"},{"lineNumber":136,"author":{"gitId":"brendanlsz"},"content":"        }","lastModifiedDate":"2021-10-31"},{"lineNumber":137,"author":{"gitId":"brendanlsz"},"content":"        assertThrows(AssertionError.class, () -\u003e Storage.saveFoodDatabase(database));","lastModifiedDate":"2021-10-31"},{"lineNumber":138,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":139,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":140,"author":{"gitId":"brendanlsz"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":141,"author":{"gitId":"brendanlsz"},"content":"    void saveEntryDatabase_validFilePath_saveSuccessfully() throws IOException {","lastModifiedDate":"2021-10-26"},{"lineNumber":142,"author":{"gitId":"brendanlsz"},"content":"        Storage.createDirectoryAndFiles();","lastModifiedDate":"2021-10-31"},{"lineNumber":143,"author":{"gitId":"brendanlsz"},"content":"        initialiseFileTestContents();","lastModifiedDate":"2021-10-31"},{"lineNumber":144,"author":{"gitId":"brendanlsz"},"content":"        EntryDatabase database \u003d new EntryDatabase();","lastModifiedDate":"2021-10-25"},{"lineNumber":145,"author":{"gitId":"brendanlsz"},"content":"        Food prata \u003d new Food(\"Prata\", 100, Food.FoodType.MEAL);","lastModifiedDate":"2021-10-25"},{"lineNumber":146,"author":{"gitId":"brendanlsz"},"content":"        Food chickenRice \u003d new Food(\"Chicken Rice\", 325, Food.FoodType.SNACK);","lastModifiedDate":"2021-10-25"},{"lineNumber":147,"author":{"gitId":"brendanlsz"},"content":"        database.addEntry(MealType.DINNER, prata);","lastModifiedDate":"2021-10-25"},{"lineNumber":148,"author":{"gitId":"brendanlsz"},"content":"        database.addEntry(MealType.DINNER, chickenRice);","lastModifiedDate":"2021-10-25"},{"lineNumber":149,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":150,"author":{"gitId":"brendanlsz"},"content":"        String expected \u003d database.convertDatabaseToString();","lastModifiedDate":"2021-10-31"},{"lineNumber":151,"author":{"gitId":"brendanlsz"},"content":"        Storage.saveEntryDatabase(database);","lastModifiedDate":"2021-10-31"},{"lineNumber":152,"author":{"gitId":"brendanlsz"},"content":"        String fileContent \u003d Files.readString(FILE_PATH_ENTRY_DATA);","lastModifiedDate":"2021-10-31"},{"lineNumber":153,"author":{"gitId":"brendanlsz"},"content":"        assertEquals(expected, fileContent);","lastModifiedDate":"2021-10-31"},{"lineNumber":154,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":155,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":156,"author":{"gitId":"brendanlsz"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":157,"author":{"gitId":"brendanlsz"},"content":"    void saveEntryDatabase_invalidFilePath_throwsAssertionError() throws IOException {","lastModifiedDate":"2021-10-31"},{"lineNumber":158,"author":{"gitId":"brendanlsz"},"content":"        Storage.createDirectoryAndFiles();","lastModifiedDate":"2021-10-31"},{"lineNumber":159,"author":{"gitId":"brendanlsz"},"content":"        initialiseFileTestContents();","lastModifiedDate":"2021-10-31"},{"lineNumber":160,"author":{"gitId":"brendanlsz"},"content":"        EntryDatabase database \u003d new EntryDatabase();","lastModifiedDate":"2021-10-26"},{"lineNumber":161,"author":{"gitId":"brendanlsz"},"content":"        Food prata \u003d new Food(\"Prata\", 100, Food.FoodType.MEAL);","lastModifiedDate":"2021-10-26"},{"lineNumber":162,"author":{"gitId":"brendanlsz"},"content":"        Food chickenRice \u003d new Food(\"Chicken Rice\", 325, Food.FoodType.SNACK);","lastModifiedDate":"2021-10-26"},{"lineNumber":163,"author":{"gitId":"brendanlsz"},"content":"        database.addEntry(MealType.DINNER, prata);","lastModifiedDate":"2021-10-26"},{"lineNumber":164,"author":{"gitId":"brendanlsz"},"content":"        database.addEntry(MealType.DINNER, chickenRice);","lastModifiedDate":"2021-10-26"},{"lineNumber":165,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":166,"author":{"gitId":"brendanlsz"},"content":"        File file \u003d new File(FILE_PATH_ENTRY_DATA.toString());","lastModifiedDate":"2021-10-31"},{"lineNumber":167,"author":{"gitId":"brendanlsz"},"content":"        boolean isDeleted \u003d file.delete();","lastModifiedDate":"2021-10-31"},{"lineNumber":168,"author":{"gitId":"brendanlsz"},"content":"        if (!isDeleted) {","lastModifiedDate":"2021-10-31"},{"lineNumber":169,"author":{"gitId":"brendanlsz"},"content":"            fail();","lastModifiedDate":"2021-10-31"},{"lineNumber":170,"author":{"gitId":"brendanlsz"},"content":"        }","lastModifiedDate":"2021-10-31"},{"lineNumber":171,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":172,"author":{"gitId":"brendanlsz"},"content":"        assertThrows(AssertionError.class, () -\u003e Storage.saveEntryDatabase(database));","lastModifiedDate":"2021-10-31"},{"lineNumber":173,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":174,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":175,"author":{"gitId":"brendanlsz"},"content":"    @Test","lastModifiedDate":"2021-10-25"},{"lineNumber":176,"author":{"gitId":"brendanlsz"},"content":"    void saveUserData() {","lastModifiedDate":"2021-10-25"},{"lineNumber":177,"author":{"gitId":"brendanlsz"},"content":"        //Adeline","lastModifiedDate":"2021-10-25"},{"lineNumber":178,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":179,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":180,"author":{"gitId":"brendanlsz"},"content":"    @Test","lastModifiedDate":"2021-10-25"},{"lineNumber":181,"author":{"gitId":"brendanlsz"},"content":"    void saveWeightData() {","lastModifiedDate":"2021-10-25"},{"lineNumber":182,"author":{"gitId":"brendanlsz"},"content":"        //Adeline","lastModifiedDate":"2021-10-25"},{"lineNumber":183,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":184,"author":{"gitId":"brendanlsz"},"content":"}","lastModifiedDate":"2021-10-25"}],"authorContributionMap":{"brendanlsz":184}},{"path":"src/test/java/fitnus/tracker/EntryTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"brendanlsz"},"content":"package fitnus.tracker;","lastModifiedDate":"2021-11-04"},{"lineNumber":2,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":3,"author":{"gitId":"brendanlsz"},"content":"import fitnus.exception.FitNusException;","lastModifiedDate":"2021-11-04"},{"lineNumber":4,"author":{"gitId":"brendanlsz"},"content":"import fitnus.parser.Parser;","lastModifiedDate":"2021-11-04"},{"lineNumber":5,"author":{"gitId":"brendanlsz"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-11-04"},{"lineNumber":6,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":7,"author":{"gitId":"brendanlsz"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-11-04"},{"lineNumber":8,"author":{"gitId":"brendanlsz"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-11-04"},{"lineNumber":9,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":10,"author":{"gitId":"brendanlsz"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-11-04"},{"lineNumber":11,"author":{"gitId":"brendanlsz"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2021-11-04"},{"lineNumber":12,"author":{"gitId":"brendanlsz"},"content":"import static org.junit.jupiter.api.Assertions.assertNull;","lastModifiedDate":"2021-11-04"},{"lineNumber":13,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":14,"author":{"gitId":"brendanlsz"},"content":"class EntryTest {","lastModifiedDate":"2021-11-04"},{"lineNumber":15,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":16,"author":{"gitId":"brendanlsz"},"content":"    @Test","lastModifiedDate":"2021-11-04"},{"lineNumber":17,"author":{"gitId":"brendanlsz"},"content":"    void getFood_validEntry_getFoodSuccess() {","lastModifiedDate":"2021-11-04"},{"lineNumber":18,"author":{"gitId":"brendanlsz"},"content":"        LocalDate date \u003d null;","lastModifiedDate":"2021-11-04"},{"lineNumber":19,"author":{"gitId":"brendanlsz"},"content":"        Food chickenRice \u003d new Food(\"chicken rice\", 200, Food.FoodType.MEAL);","lastModifiedDate":"2021-11-04"},{"lineNumber":20,"author":{"gitId":"brendanlsz"},"content":"        try {","lastModifiedDate":"2021-11-04"},{"lineNumber":21,"author":{"gitId":"brendanlsz"},"content":"            date \u003d Parser.getDate(\"2021-10-11\");","lastModifiedDate":"2021-11-04"},{"lineNumber":22,"author":{"gitId":"brendanlsz"},"content":"        } catch (FitNusException e) {","lastModifiedDate":"2021-11-04"},{"lineNumber":23,"author":{"gitId":"brendanlsz"},"content":"            fail(\"Parser getDate error\");","lastModifiedDate":"2021-11-04"},{"lineNumber":24,"author":{"gitId":"brendanlsz"},"content":"        }","lastModifiedDate":"2021-11-04"},{"lineNumber":25,"author":{"gitId":"brendanlsz"},"content":"        Entry entry1 \u003d new Entry(MealType.DINNER, chickenRice, date);","lastModifiedDate":"2021-11-04"},{"lineNumber":26,"author":{"gitId":"brendanlsz"},"content":"        assertEquals(chickenRice, entry1.getFood());","lastModifiedDate":"2021-11-04"},{"lineNumber":27,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-11-04"},{"lineNumber":28,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":29,"author":{"gitId":"brendanlsz"},"content":"    @Test","lastModifiedDate":"2021-11-04"},{"lineNumber":30,"author":{"gitId":"brendanlsz"},"content":"    void getFood_foodIsNull_returnNull() {","lastModifiedDate":"2021-11-04"},{"lineNumber":31,"author":{"gitId":"brendanlsz"},"content":"        LocalDate date \u003d null;","lastModifiedDate":"2021-11-04"},{"lineNumber":32,"author":{"gitId":"brendanlsz"},"content":"        try {","lastModifiedDate":"2021-11-04"},{"lineNumber":33,"author":{"gitId":"brendanlsz"},"content":"            date \u003d Parser.getDate(\"2021-10-11\");","lastModifiedDate":"2021-11-04"},{"lineNumber":34,"author":{"gitId":"brendanlsz"},"content":"        } catch (FitNusException e) {","lastModifiedDate":"2021-11-04"},{"lineNumber":35,"author":{"gitId":"brendanlsz"},"content":"            fail(\"Parser getDate error\");","lastModifiedDate":"2021-11-04"},{"lineNumber":36,"author":{"gitId":"brendanlsz"},"content":"        }","lastModifiedDate":"2021-11-04"},{"lineNumber":37,"author":{"gitId":"brendanlsz"},"content":"        Entry entry1 \u003d new Entry(MealType.DINNER, null, date);","lastModifiedDate":"2021-11-04"},{"lineNumber":38,"author":{"gitId":"brendanlsz"},"content":"        assertNull(entry1.getFood());","lastModifiedDate":"2021-11-04"},{"lineNumber":39,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-11-04"},{"lineNumber":40,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":41,"author":{"gitId":"brendanlsz"},"content":"    @Test","lastModifiedDate":"2021-11-04"},{"lineNumber":42,"author":{"gitId":"brendanlsz"},"content":"    void setFood_validFood_setFoodSuccess() {","lastModifiedDate":"2021-11-04"},{"lineNumber":43,"author":{"gitId":"brendanlsz"},"content":"        LocalDate date \u003d null;","lastModifiedDate":"2021-11-04"},{"lineNumber":44,"author":{"gitId":"brendanlsz"},"content":"        Food ramen1 \u003d new Food(\"ramen\", 400, Food.FoodType.MEAL);","lastModifiedDate":"2021-11-04"},{"lineNumber":45,"author":{"gitId":"brendanlsz"},"content":"        Food ramen2 \u003d new Food(\"ramen\", 800, Food.FoodType.MEAL);","lastModifiedDate":"2021-11-04"},{"lineNumber":46,"author":{"gitId":"brendanlsz"},"content":"        try {","lastModifiedDate":"2021-11-04"},{"lineNumber":47,"author":{"gitId":"brendanlsz"},"content":"            date \u003d Parser.getDate(\"2021-08-31\");","lastModifiedDate":"2021-11-04"},{"lineNumber":48,"author":{"gitId":"brendanlsz"},"content":"        } catch (FitNusException e) {","lastModifiedDate":"2021-11-04"},{"lineNumber":49,"author":{"gitId":"brendanlsz"},"content":"            fail(\"Parser getDate error\");","lastModifiedDate":"2021-11-04"},{"lineNumber":50,"author":{"gitId":"brendanlsz"},"content":"        }","lastModifiedDate":"2021-11-04"},{"lineNumber":51,"author":{"gitId":"brendanlsz"},"content":"        Entry entry1 \u003d new Entry(MealType.DINNER, ramen1, date);","lastModifiedDate":"2021-11-04"},{"lineNumber":52,"author":{"gitId":"brendanlsz"},"content":"        entry1.setFood(ramen2);","lastModifiedDate":"2021-11-04"},{"lineNumber":53,"author":{"gitId":"brendanlsz"},"content":"        assertEquals(ramen2, entry1.getFood());","lastModifiedDate":"2021-11-04"},{"lineNumber":54,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-11-04"},{"lineNumber":55,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":56,"author":{"gitId":"brendanlsz"},"content":"    @Test","lastModifiedDate":"2021-11-04"},{"lineNumber":57,"author":{"gitId":"brendanlsz"},"content":"    void setFood_setNullFood_setFoodAsNull() {","lastModifiedDate":"2021-11-04"},{"lineNumber":58,"author":{"gitId":"brendanlsz"},"content":"        LocalDate date \u003d null;","lastModifiedDate":"2021-11-04"},{"lineNumber":59,"author":{"gitId":"brendanlsz"},"content":"        Food ramen1 \u003d new Food(\"ramen\", 400, Food.FoodType.MEAL);","lastModifiedDate":"2021-11-04"},{"lineNumber":60,"author":{"gitId":"brendanlsz"},"content":"        try {","lastModifiedDate":"2021-11-04"},{"lineNumber":61,"author":{"gitId":"brendanlsz"},"content":"            date \u003d Parser.getDate(\"2021-08-31\");","lastModifiedDate":"2021-11-04"},{"lineNumber":62,"author":{"gitId":"brendanlsz"},"content":"        } catch (FitNusException e) {","lastModifiedDate":"2021-11-04"},{"lineNumber":63,"author":{"gitId":"brendanlsz"},"content":"            fail(\"Parser getDate error\");","lastModifiedDate":"2021-11-04"},{"lineNumber":64,"author":{"gitId":"brendanlsz"},"content":"        }","lastModifiedDate":"2021-11-04"},{"lineNumber":65,"author":{"gitId":"brendanlsz"},"content":"        Entry entry1 \u003d new Entry(MealType.DINNER, ramen1, date);","lastModifiedDate":"2021-11-04"},{"lineNumber":66,"author":{"gitId":"brendanlsz"},"content":"        entry1.setFood(null);","lastModifiedDate":"2021-11-04"},{"lineNumber":67,"author":{"gitId":"brendanlsz"},"content":"        assertNull(entry1.getFood());","lastModifiedDate":"2021-11-04"},{"lineNumber":68,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-11-04"},{"lineNumber":69,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":70,"author":{"gitId":"brendanlsz"},"content":"    @Test","lastModifiedDate":"2021-11-04"},{"lineNumber":71,"author":{"gitId":"brendanlsz"},"content":"    void getDate_validEntry_getDateSuccess() {","lastModifiedDate":"2021-11-04"},{"lineNumber":72,"author":{"gitId":"brendanlsz"},"content":"        LocalDate date \u003d null;","lastModifiedDate":"2021-11-04"},{"lineNumber":73,"author":{"gitId":"brendanlsz"},"content":"        Food cake \u003d new Food(\"cake\", 500, Food.FoodType.SNACK);","lastModifiedDate":"2021-11-04"},{"lineNumber":74,"author":{"gitId":"brendanlsz"},"content":"        try {","lastModifiedDate":"2021-11-04"},{"lineNumber":75,"author":{"gitId":"brendanlsz"},"content":"            date \u003d Parser.getDate(\"2021-10-20\");","lastModifiedDate":"2021-11-04"},{"lineNumber":76,"author":{"gitId":"brendanlsz"},"content":"        } catch (FitNusException e) {","lastModifiedDate":"2021-11-04"},{"lineNumber":77,"author":{"gitId":"brendanlsz"},"content":"            fail(\"Parser getDate error\");","lastModifiedDate":"2021-11-04"},{"lineNumber":78,"author":{"gitId":"brendanlsz"},"content":"        }","lastModifiedDate":"2021-11-04"},{"lineNumber":79,"author":{"gitId":"brendanlsz"},"content":"        Entry entry1 \u003d new Entry(MealType.DINNER, cake, date);","lastModifiedDate":"2021-11-04"},{"lineNumber":80,"author":{"gitId":"brendanlsz"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");","lastModifiedDate":"2021-11-04"},{"lineNumber":81,"author":{"gitId":"brendanlsz"},"content":"        assertEquals(date.format(formatter), entry1.getDate());","lastModifiedDate":"2021-11-04"},{"lineNumber":82,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-11-04"},{"lineNumber":83,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":84,"author":{"gitId":"brendanlsz"},"content":"    @Test","lastModifiedDate":"2021-11-04"},{"lineNumber":85,"author":{"gitId":"brendanlsz"},"content":"    void getRawDate_validEntry_getRawDateSuccess() {","lastModifiedDate":"2021-11-04"},{"lineNumber":86,"author":{"gitId":"brendanlsz"},"content":"        LocalDate date \u003d null;","lastModifiedDate":"2021-11-04"},{"lineNumber":87,"author":{"gitId":"brendanlsz"},"content":"        Food chickenRice \u003d new Food(\"chicken rice\", 200, Food.FoodType.MEAL);","lastModifiedDate":"2021-11-04"},{"lineNumber":88,"author":{"gitId":"brendanlsz"},"content":"        try {","lastModifiedDate":"2021-11-04"},{"lineNumber":89,"author":{"gitId":"brendanlsz"},"content":"            date \u003d Parser.getDate(\"2021-08-11\");","lastModifiedDate":"2021-11-04"},{"lineNumber":90,"author":{"gitId":"brendanlsz"},"content":"        } catch (FitNusException e) {","lastModifiedDate":"2021-11-04"},{"lineNumber":91,"author":{"gitId":"brendanlsz"},"content":"            fail(\"Parser getDate error\");","lastModifiedDate":"2021-11-04"},{"lineNumber":92,"author":{"gitId":"brendanlsz"},"content":"        }","lastModifiedDate":"2021-11-04"},{"lineNumber":93,"author":{"gitId":"brendanlsz"},"content":"        Entry entry1 \u003d new Entry(MealType.DINNER, chickenRice, date);","lastModifiedDate":"2021-11-04"},{"lineNumber":94,"author":{"gitId":"brendanlsz"},"content":"        assertEquals(date, entry1.getRawDate());","lastModifiedDate":"2021-11-04"},{"lineNumber":95,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-11-04"},{"lineNumber":96,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":97,"author":{"gitId":"brendanlsz"},"content":"    @Test","lastModifiedDate":"2021-11-04"},{"lineNumber":98,"author":{"gitId":"brendanlsz"},"content":"    void getMealType_validEntry_getMealTypeSuccess() {","lastModifiedDate":"2021-11-04"},{"lineNumber":99,"author":{"gitId":"brendanlsz"},"content":"        LocalDate date \u003d null;","lastModifiedDate":"2021-11-04"},{"lineNumber":100,"author":{"gitId":"brendanlsz"},"content":"        Food salmon \u003d new Food(\"salmon\", 500, Food.FoodType.MEAL);","lastModifiedDate":"2021-11-04"},{"lineNumber":101,"author":{"gitId":"brendanlsz"},"content":"        try {","lastModifiedDate":"2021-11-04"},{"lineNumber":102,"author":{"gitId":"brendanlsz"},"content":"            date \u003d Parser.getDate(\"2021-09-11\");","lastModifiedDate":"2021-11-04"},{"lineNumber":103,"author":{"gitId":"brendanlsz"},"content":"        } catch (FitNusException e) {","lastModifiedDate":"2021-11-04"},{"lineNumber":104,"author":{"gitId":"brendanlsz"},"content":"            fail(\"Parser getDate error\");","lastModifiedDate":"2021-11-04"},{"lineNumber":105,"author":{"gitId":"brendanlsz"},"content":"        }","lastModifiedDate":"2021-11-04"},{"lineNumber":106,"author":{"gitId":"brendanlsz"},"content":"        Entry entry1 \u003d new Entry(MealType.DINNER, salmon, date);","lastModifiedDate":"2021-11-04"},{"lineNumber":107,"author":{"gitId":"brendanlsz"},"content":"        assertEquals(MealType.DINNER, entry1.getMealType());","lastModifiedDate":"2021-11-04"},{"lineNumber":108,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-11-04"},{"lineNumber":109,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":110,"author":{"gitId":"brendanlsz"},"content":"    @Test","lastModifiedDate":"2021-11-04"},{"lineNumber":111,"author":{"gitId":"brendanlsz"},"content":"    void getMealType_mealTypeIsNull_returnsNull() {","lastModifiedDate":"2021-11-04"},{"lineNumber":112,"author":{"gitId":"brendanlsz"},"content":"        LocalDate date \u003d null;","lastModifiedDate":"2021-11-04"},{"lineNumber":113,"author":{"gitId":"brendanlsz"},"content":"        Food salmon \u003d new Food(\"salmon\", 500, Food.FoodType.MEAL);","lastModifiedDate":"2021-11-04"},{"lineNumber":114,"author":{"gitId":"brendanlsz"},"content":"        try {","lastModifiedDate":"2021-11-04"},{"lineNumber":115,"author":{"gitId":"brendanlsz"},"content":"            date \u003d Parser.getDate(\"2021-09-11\");","lastModifiedDate":"2021-11-04"},{"lineNumber":116,"author":{"gitId":"brendanlsz"},"content":"        } catch (FitNusException e) {","lastModifiedDate":"2021-11-04"},{"lineNumber":117,"author":{"gitId":"brendanlsz"},"content":"            fail(\"Parser getDate error\");","lastModifiedDate":"2021-11-04"},{"lineNumber":118,"author":{"gitId":"brendanlsz"},"content":"        }","lastModifiedDate":"2021-11-04"},{"lineNumber":119,"author":{"gitId":"brendanlsz"},"content":"        Entry entry1 \u003d new Entry(null, salmon, date);","lastModifiedDate":"2021-11-04"},{"lineNumber":120,"author":{"gitId":"brendanlsz"},"content":"        assertNull(entry1.getMealType());","lastModifiedDate":"2021-11-04"},{"lineNumber":121,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-11-04"},{"lineNumber":122,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":123,"author":{"gitId":"brendanlsz"},"content":"    @Test","lastModifiedDate":"2021-11-04"},{"lineNumber":124,"author":{"gitId":"brendanlsz"},"content":"    void testToString_validEntry_toStringSuccess() {","lastModifiedDate":"2021-11-04"},{"lineNumber":125,"author":{"gitId":"brendanlsz"},"content":"        LocalDate date \u003d null;","lastModifiedDate":"2021-11-04"},{"lineNumber":126,"author":{"gitId":"brendanlsz"},"content":"        Food curryRice \u003d new Food(\"curry rice\", 500, Food.FoodType.MEAL);","lastModifiedDate":"2021-11-04"},{"lineNumber":127,"author":{"gitId":"brendanlsz"},"content":"        try {","lastModifiedDate":"2021-11-04"},{"lineNumber":128,"author":{"gitId":"brendanlsz"},"content":"            date \u003d Parser.getDate(\"2021-10-11\");","lastModifiedDate":"2021-11-04"},{"lineNumber":129,"author":{"gitId":"brendanlsz"},"content":"        } catch (FitNusException e) {","lastModifiedDate":"2021-11-04"},{"lineNumber":130,"author":{"gitId":"brendanlsz"},"content":"            fail(\"Parser getDate error\");","lastModifiedDate":"2021-11-04"},{"lineNumber":131,"author":{"gitId":"brendanlsz"},"content":"        }","lastModifiedDate":"2021-11-04"},{"lineNumber":132,"author":{"gitId":"brendanlsz"},"content":"        Entry entry1 \u003d new Entry(MealType.LUNCH, curryRice, date);","lastModifiedDate":"2021-11-04"},{"lineNumber":133,"author":{"gitId":"brendanlsz"},"content":"        assertEquals(\"[2021-10-11] Lunch: curry rice (500 Kcal) Type: MEAL\",","lastModifiedDate":"2021-11-04"},{"lineNumber":134,"author":{"gitId":"brendanlsz"},"content":"                entry1.toString());","lastModifiedDate":"2021-11-04"},{"lineNumber":135,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-11-04"},{"lineNumber":136,"author":{"gitId":"brendanlsz"},"content":"}","lastModifiedDate":"2021-11-04"}],"authorContributionMap":{"brendanlsz":136}},{"path":"src/test/java/fitnus/tracker/FoodTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"brendanlsz"},"content":"package fitnus.tracker;","lastModifiedDate":"2021-11-04"},{"lineNumber":2,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":3,"author":{"gitId":"brendanlsz"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-11-04"},{"lineNumber":4,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":5,"author":{"gitId":"brendanlsz"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-11-04"},{"lineNumber":6,"author":{"gitId":"brendanlsz"},"content":"import static org.junit.jupiter.api.Assertions.assertNull;","lastModifiedDate":"2021-11-04"},{"lineNumber":7,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":8,"author":{"gitId":"brendanlsz"},"content":"class FoodTest {","lastModifiedDate":"2021-11-04"},{"lineNumber":9,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":10,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":11,"author":{"gitId":"brendanlsz"},"content":"    @Test","lastModifiedDate":"2021-11-04"},{"lineNumber":12,"author":{"gitId":"brendanlsz"},"content":"    void getName_validFood_getNameSuccess() {","lastModifiedDate":"2021-11-04"},{"lineNumber":13,"author":{"gitId":"brendanlsz"},"content":"        Food ramen \u003d new Food(\"ramen\", 700, Food.FoodType.MEAL);","lastModifiedDate":"2021-11-04"},{"lineNumber":14,"author":{"gitId":"brendanlsz"},"content":"        assertEquals(\"ramen\", ramen.getName());","lastModifiedDate":"2021-11-04"},{"lineNumber":15,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-11-04"},{"lineNumber":16,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":17,"author":{"gitId":"brendanlsz"},"content":"    @Test","lastModifiedDate":"2021-11-04"},{"lineNumber":18,"author":{"gitId":"brendanlsz"},"content":"    void getName_nameIsNull_returnNull() {","lastModifiedDate":"2021-11-04"},{"lineNumber":19,"author":{"gitId":"brendanlsz"},"content":"        Food ramen \u003d new Food(null, 700, Food.FoodType.MEAL);","lastModifiedDate":"2021-11-04"},{"lineNumber":20,"author":{"gitId":"brendanlsz"},"content":"        assertNull(ramen.getName());","lastModifiedDate":"2021-11-04"},{"lineNumber":21,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-11-04"},{"lineNumber":22,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":23,"author":{"gitId":"brendanlsz"},"content":"    @Test","lastModifiedDate":"2021-11-04"},{"lineNumber":24,"author":{"gitId":"brendanlsz"},"content":"    void getCalories_validFood_getCaloriesSuccess() {","lastModifiedDate":"2021-11-04"},{"lineNumber":25,"author":{"gitId":"brendanlsz"},"content":"        Food fries \u003d new Food(\"fries\", 600, Food.FoodType.SNACK);","lastModifiedDate":"2021-11-04"},{"lineNumber":26,"author":{"gitId":"brendanlsz"},"content":"        assertEquals(600, fries.getCalories());","lastModifiedDate":"2021-11-04"},{"lineNumber":27,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-11-04"},{"lineNumber":28,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":29,"author":{"gitId":"brendanlsz"},"content":"    @Test","lastModifiedDate":"2021-11-04"},{"lineNumber":30,"author":{"gitId":"brendanlsz"},"content":"    void getCalories_calorieIsNull_returnNull() {","lastModifiedDate":"2021-11-04"},{"lineNumber":31,"author":{"gitId":"brendanlsz"},"content":"        Food fries \u003d new Food(\"fries\", null, Food.FoodType.SNACK);","lastModifiedDate":"2021-11-04"},{"lineNumber":32,"author":{"gitId":"brendanlsz"},"content":"        assertNull(fries.getCalories());","lastModifiedDate":"2021-11-04"},{"lineNumber":33,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-11-04"},{"lineNumber":34,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":35,"author":{"gitId":"brendanlsz"},"content":"    @Test","lastModifiedDate":"2021-11-04"},{"lineNumber":36,"author":{"gitId":"brendanlsz"},"content":"    void testToString_validFood_toStringSuccess() {","lastModifiedDate":"2021-11-04"},{"lineNumber":37,"author":{"gitId":"brendanlsz"},"content":"        Food ramen \u003d new Food(\"ramen\", 400, Food.FoodType.MEAL);","lastModifiedDate":"2021-11-04"},{"lineNumber":38,"author":{"gitId":"brendanlsz"},"content":"        assertEquals(\"ramen (400 Kcal) Type: MEAL\", ramen.toString());","lastModifiedDate":"2021-11-04"},{"lineNumber":39,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-11-04"},{"lineNumber":40,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":41,"author":{"gitId":"brendanlsz"},"content":"    @Test","lastModifiedDate":"2021-11-04"},{"lineNumber":42,"author":{"gitId":"brendanlsz"},"content":"    void getType_validFood_getTypeSuccess() {","lastModifiedDate":"2021-11-04"},{"lineNumber":43,"author":{"gitId":"brendanlsz"},"content":"        Food fries \u003d new Food(\"fries\", 300, Food.FoodType.SNACK);","lastModifiedDate":"2021-11-04"},{"lineNumber":44,"author":{"gitId":"brendanlsz"},"content":"        assertEquals(Food.FoodType.SNACK, fries.getType());","lastModifiedDate":"2021-11-04"},{"lineNumber":45,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-11-04"},{"lineNumber":46,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":47,"author":{"gitId":"brendanlsz"},"content":"    @Test","lastModifiedDate":"2021-11-04"},{"lineNumber":48,"author":{"gitId":"brendanlsz"},"content":"    void getType_typeIsNull_returnNull() {","lastModifiedDate":"2021-11-04"},{"lineNumber":49,"author":{"gitId":"brendanlsz"},"content":"        Food fries \u003d new Food(\"fries\", 300, null);","lastModifiedDate":"2021-11-04"},{"lineNumber":50,"author":{"gitId":"brendanlsz"},"content":"        assertNull(fries.getType());","lastModifiedDate":"2021-11-04"},{"lineNumber":51,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-11-04"},{"lineNumber":52,"author":{"gitId":"brendanlsz"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":53,"author":{"gitId":"brendanlsz"},"content":"    @Test","lastModifiedDate":"2021-11-04"},{"lineNumber":54,"author":{"gitId":"brendanlsz"},"content":"    void convertToStringForStorage_validFood_convertSuccess() {","lastModifiedDate":"2021-11-04"},{"lineNumber":55,"author":{"gitId":"brendanlsz"},"content":"        Food chickenRice \u003d new Food(\"chicken rice\", 400, Food.FoodType.MEAL);","lastModifiedDate":"2021-11-04"},{"lineNumber":56,"author":{"gitId":"brendanlsz"},"content":"        assertEquals(\"chicken rice | 400 | MEAL\" + System.lineSeparator(),","lastModifiedDate":"2021-11-04"},{"lineNumber":57,"author":{"gitId":"brendanlsz"},"content":"                chickenRice.convertToStringForStorage());","lastModifiedDate":"2021-11-04"},{"lineNumber":58,"author":{"gitId":"brendanlsz"},"content":"    }","lastModifiedDate":"2021-11-04"},{"lineNumber":59,"author":{"gitId":"brendanlsz"},"content":"}","lastModifiedDate":"2021-11-04"}],"authorContributionMap":{"brendanlsz":59}},{"path":"src/test/java/fitnus/tracker/MealPlanTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"praj-bellakka"},"content":"package fitnus.tracker;","lastModifiedDate":"2021-11-06"},{"lineNumber":2,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":3,"author":{"gitId":"praj-bellakka"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-11-06"},{"lineNumber":4,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":5,"author":{"gitId":"praj-bellakka"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-11-06"},{"lineNumber":6,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":7,"author":{"gitId":"praj-bellakka"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-11-06"},{"lineNumber":8,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":9,"author":{"gitId":"praj-bellakka"},"content":"public class MealPlanTest {","lastModifiedDate":"2021-11-06"},{"lineNumber":10,"author":{"gitId":"praj-bellakka"},"content":"    Food food1 \u003d new Food(\"food 1\", 250, Food.FoodType.BEVERAGE);","lastModifiedDate":"2021-11-06"},{"lineNumber":11,"author":{"gitId":"praj-bellakka"},"content":"    Food food2 \u003d new Food(\"food 2\", 350, Food.FoodType.SNACK);","lastModifiedDate":"2021-11-06"},{"lineNumber":12,"author":{"gitId":"praj-bellakka"},"content":"    Food food3 \u003d new Food(\"food 3\", 450, Food.FoodType.MEAL);","lastModifiedDate":"2021-11-06"},{"lineNumber":13,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":14,"author":{"gitId":"praj-bellakka"},"content":"    @Test","lastModifiedDate":"2021-11-06"},{"lineNumber":15,"author":{"gitId":"praj-bellakka"},"content":"    void getFoodString_multipleFoods_getStringSuccess() {","lastModifiedDate":"2021-11-06"},{"lineNumber":16,"author":{"gitId":"praj-bellakka"},"content":"        ArrayList\u003cFood\u003e testFoods \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-11-06"},{"lineNumber":17,"author":{"gitId":"praj-bellakka"},"content":"        testFoods.add(food1);","lastModifiedDate":"2021-11-06"},{"lineNumber":18,"author":{"gitId":"praj-bellakka"},"content":"        testFoods.add(food2);","lastModifiedDate":"2021-11-06"},{"lineNumber":19,"author":{"gitId":"praj-bellakka"},"content":"        testFoods.add(food3);","lastModifiedDate":"2021-11-06"},{"lineNumber":20,"author":{"gitId":"praj-bellakka"},"content":"        MealPlan testMp \u003d new MealPlan(\"testPlan\", testFoods);","lastModifiedDate":"2021-11-06"},{"lineNumber":21,"author":{"gitId":"praj-bellakka"},"content":"        String expectedOutput \u003d \"food 1 (250 Kcal) Type: BEVERAGE\" + System.lineSeparator()","lastModifiedDate":"2021-11-06"},{"lineNumber":22,"author":{"gitId":"praj-bellakka"},"content":"                + \"food 2 (350 Kcal) Type: SNACK\" + System.lineSeparator()","lastModifiedDate":"2021-11-06"},{"lineNumber":23,"author":{"gitId":"praj-bellakka"},"content":"                + \"food 3 (450 Kcal) Type: MEAL\" + System.lineSeparator();","lastModifiedDate":"2021-11-06"},{"lineNumber":24,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":25,"author":{"gitId":"praj-bellakka"},"content":"        assertEquals(expectedOutput, testMp.getFoodString());","lastModifiedDate":"2021-11-06"},{"lineNumber":26,"author":{"gitId":"praj-bellakka"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":27,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":28,"author":{"gitId":"praj-bellakka"},"content":"    @Test","lastModifiedDate":"2021-11-06"},{"lineNumber":29,"author":{"gitId":"praj-bellakka"},"content":"    void getFoodString_singleFood_getStringSuccess() {","lastModifiedDate":"2021-11-06"},{"lineNumber":30,"author":{"gitId":"praj-bellakka"},"content":"        ArrayList\u003cFood\u003e testFoods \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-11-06"},{"lineNumber":31,"author":{"gitId":"praj-bellakka"},"content":"        MealPlan testMp \u003d new MealPlan(\"testPlan\", testFoods);","lastModifiedDate":"2021-11-06"},{"lineNumber":32,"author":{"gitId":"praj-bellakka"},"content":"        String expectedOutput \u003d \"\";","lastModifiedDate":"2021-11-06"},{"lineNumber":33,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":34,"author":{"gitId":"praj-bellakka"},"content":"        assertEquals(expectedOutput, testMp.getFoodString());","lastModifiedDate":"2021-11-06"},{"lineNumber":35,"author":{"gitId":"praj-bellakka"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":36,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":37,"author":{"gitId":"praj-bellakka"},"content":"}","lastModifiedDate":"2021-11-06"}],"authorContributionMap":{"praj-bellakka":37}},{"path":"src/test/java/fitnus/tracker/MealTypeTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"praj-bellakka"},"content":"package fitnus.tracker;","lastModifiedDate":"2021-11-06"},{"lineNumber":2,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":3,"author":{"gitId":"praj-bellakka"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-11-06"},{"lineNumber":4,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":5,"author":{"gitId":"praj-bellakka"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-11-06"},{"lineNumber":6,"author":{"gitId":"praj-bellakka"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-11-06"},{"lineNumber":7,"author":{"gitId":"praj-bellakka"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-11-06"},{"lineNumber":8,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":9,"author":{"gitId":"praj-bellakka"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-11-06"},{"lineNumber":10,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":11,"author":{"gitId":"praj-bellakka"},"content":"public class MealTypeTest {","lastModifiedDate":"2021-11-06"},{"lineNumber":12,"author":{"gitId":"praj-bellakka"},"content":"    private static final int BREAKFAST_HOUR_LOWER \u003d 6; //6am","lastModifiedDate":"2021-11-06"},{"lineNumber":13,"author":{"gitId":"praj-bellakka"},"content":"    private static final int BREAKFAST_HOUR_UPPER \u003d 10; //10am","lastModifiedDate":"2021-11-06"},{"lineNumber":14,"author":{"gitId":"praj-bellakka"},"content":"    private static final int LUNCH_HOUR_LOWER \u003d 11; //11am","lastModifiedDate":"2021-11-06"},{"lineNumber":15,"author":{"gitId":"praj-bellakka"},"content":"    private static final int LUNCH_HOUR_UPPER \u003d 14; //2pm","lastModifiedDate":"2021-11-06"},{"lineNumber":16,"author":{"gitId":"praj-bellakka"},"content":"    private static final int DINNER_HOUR_LOWER \u003d 18; //6pm","lastModifiedDate":"2021-11-06"},{"lineNumber":17,"author":{"gitId":"praj-bellakka"},"content":"    private static final int DINNER_HOUR_UPPER \u003d 21; //9pm","lastModifiedDate":"2021-11-06"},{"lineNumber":18,"author":{"gitId":"praj-bellakka"},"content":"    MealType mealType \u003d MealType.UNDEFINED;","lastModifiedDate":"2021-11-06"},{"lineNumber":19,"author":{"gitId":"praj-bellakka"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":20,"author":{"gitId":"praj-bellakka"},"content":"    @Test","lastModifiedDate":"2021-11-06"},{"lineNumber":21,"author":{"gitId":"praj-bellakka"},"content":"    void findMealTypeTiming_currentTiming_returnCorrectType() {","lastModifiedDate":"2021-11-06"},{"lineNumber":22,"author":{"gitId":"praj-bellakka"},"content":"        int hourOfDay \u003d LocalDateTime.now().getHour();","lastModifiedDate":"2021-11-06"},{"lineNumber":23,"author":{"gitId":"praj-bellakka"},"content":"        if (hourOfDay \u003e\u003d BREAKFAST_HOUR_LOWER \u0026\u0026 hourOfDay \u003c BREAKFAST_HOUR_UPPER) {","lastModifiedDate":"2021-11-06"},{"lineNumber":24,"author":{"gitId":"praj-bellakka"},"content":"            assertEquals(MealType.BREAKFAST, mealType.findMealTypeTiming());","lastModifiedDate":"2021-11-06"},{"lineNumber":25,"author":{"gitId":"praj-bellakka"},"content":"        } else if (hourOfDay \u003e\u003d LUNCH_HOUR_LOWER \u0026\u0026 hourOfDay \u003c LUNCH_HOUR_UPPER) {","lastModifiedDate":"2021-11-06"},{"lineNumber":26,"author":{"gitId":"praj-bellakka"},"content":"            assertEquals(MealType.LUNCH, mealType.findMealTypeTiming());","lastModifiedDate":"2021-11-06"},{"lineNumber":27,"author":{"gitId":"praj-bellakka"},"content":"        } else if (hourOfDay \u003e\u003d DINNER_HOUR_LOWER \u0026\u0026 hourOfDay \u003c DINNER_HOUR_UPPER) {","lastModifiedDate":"2021-11-06"},{"lineNumber":28,"author":{"gitId":"praj-bellakka"},"content":"            assertEquals(MealType.DINNER, mealType.findMealTypeTiming());","lastModifiedDate":"2021-11-06"},{"lineNumber":29,"author":{"gitId":"praj-bellakka"},"content":"        } else {","lastModifiedDate":"2021-11-06"},{"lineNumber":30,"author":{"gitId":"praj-bellakka"},"content":"            assertEquals(MealType.SNACK, mealType.findMealTypeTiming());","lastModifiedDate":"2021-11-06"},{"lineNumber":31,"author":{"gitId":"praj-bellakka"},"content":"        }","lastModifiedDate":"2021-11-06"},{"lineNumber":32,"author":{"gitId":"praj-bellakka"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":33,"author":{"gitId":"praj-bellakka"},"content":"}","lastModifiedDate":"2021-11-06"}],"authorContributionMap":{"praj-bellakka":33}}]
