[{"path":"build.gradle","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"EricBryann"},"content":"    mainClassName \u003d \"medbot.MedBot\"","lastModifiedDate":"2021-10-04"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"EricBryann"},"content":"    archiveBaseName \u003d \"medBot\"","lastModifiedDate":"2021-10-04"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"checkstyle {","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.23\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"Kureans"},"content":"    enableAssertions \u003d true","lastModifiedDate":"2021-10-19"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":44,"EricBryann":2,"Kureans":1}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# About us","lastModifiedDate":"2020-05-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"Display | Name | Github Profile | Portfolio ","lastModifiedDate":"2020-05-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"--------|:----:|:--------------:|:---------:","lastModifiedDate":"2020-05-24"},{"lineNumber":5,"author":{"gitId":"jushg"},"content":"![](https://via.placeholder.com/100.png?text\u003dPhoto) | Yi Shiong | [Github](https://github.com/Kureans) | [Portfolio](team/kureans.md)","lastModifiedDate":"2021-11-06"},{"lineNumber":6,"author":{"gitId":"jushg"},"content":"![](https://via.placeholder.com/100.png?text\u003dPhoto) | Atticus | [Github](https://github.com/CrimsonTitan79) | [Portfolio](team/crimsontitan79.md)","lastModifiedDate":"2021-11-06"},{"lineNumber":7,"author":{"gitId":"jushg"},"content":"![](https://via.placeholder.com/100.png?text\u003dPhoto) | Hoang Trong Tan | [Github](https://github.com/jushg) | [Portfolio](team/jushg.md)","lastModifiedDate":"2021-11-06"},{"lineNumber":8,"author":{"gitId":"jushg"},"content":"![](https://via.placeholder.com/100.png?text\u003dPhoto) | Eric Bryan | [Github](https://github.com/EricBryann) | [Portfolio](team/ericbryann.md)","lastModifiedDate":"2021-11-06"},{"lineNumber":9,"author":{"gitId":"jushg"},"content":"![](https://via.placeholder.com/100.png?text\u003dPhoto) | Justin Wong | [Github](https://github.com/justinfidelis) | [Portfolio](team/justinfidelis.md)","lastModifiedDate":"2021-11-06"}],"authorContributionMap":{"jushg":5,"-":4}},{"path":"docs/DeveloperGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# Developer Guide","lastModifiedDate":"2020-05-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":3,"author":{"gitId":"CrimsonTitan79"},"content":"## Table of Contents","lastModifiedDate":"2021-11-07"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":5,"author":{"gitId":"justinfidelis"},"content":"- [1. Acknowledgements](#1-acknowledgements)","lastModifiedDate":"2021-10-27"},{"lineNumber":6,"author":{"gitId":"justinfidelis"},"content":"- [2. Introduction](#2-introduction)","lastModifiedDate":"2021-10-27"},{"lineNumber":7,"author":{"gitId":"justinfidelis"},"content":"- [3. Design](#3-design)","lastModifiedDate":"2021-10-27"},{"lineNumber":8,"author":{"gitId":"justinfidelis"},"content":"    - [3.1 Architecture](#31-architecture)","lastModifiedDate":"2021-10-27"},{"lineNumber":9,"author":{"gitId":"justinfidelis"},"content":"        - [3.1.1 Main Components](#311-main-components)","lastModifiedDate":"2021-10-27"},{"lineNumber":10,"author":{"gitId":"justinfidelis"},"content":"        - [3.1.2 Component Interaction](#312-component-interaction)","lastModifiedDate":"2021-10-27"},{"lineNumber":11,"author":{"gitId":"justinfidelis"},"content":"    - [3.2 Ui Component](#32-ui-component)","lastModifiedDate":"2021-10-27"},{"lineNumber":12,"author":{"gitId":"justinfidelis"},"content":"    - [3.3 Parser Component](#33-parser-component)","lastModifiedDate":"2021-10-27"},{"lineNumber":13,"author":{"gitId":"justinfidelis"},"content":"    - [3.4 Scheduler Component](#34-scheduler-component)","lastModifiedDate":"2021-10-27"},{"lineNumber":14,"author":{"gitId":"justinfidelis"},"content":"    - [3.5 Storage Component](#35-storage-component)","lastModifiedDate":"2021-10-27"},{"lineNumber":15,"author":{"gitId":"justinfidelis"},"content":"    - [3.6 Command Class](#36-command-class)","lastModifiedDate":"2021-10-27"},{"lineNumber":16,"author":{"gitId":"justinfidelis"},"content":"- [4. Implementation](#4-implementation)","lastModifiedDate":"2021-10-27"},{"lineNumber":17,"author":{"gitId":"justinfidelis"},"content":"    - [4.1 Switch View Feature](#41-switch-view-feature)","lastModifiedDate":"2021-10-27"},{"lineNumber":18,"author":{"gitId":"justinfidelis"},"content":"    - [4.2 Find Feature](#42-find-feature)","lastModifiedDate":"2021-10-27"},{"lineNumber":19,"author":{"gitId":"justinfidelis"},"content":"    - [4.3 Edit Feature](#43-edit-feature)","lastModifiedDate":"2021-10-27"},{"lineNumber":20,"author":{"gitId":"justinfidelis"},"content":"    - [4.4 Appointment Management](#44-appointment-management)","lastModifiedDate":"2021-10-27"},{"lineNumber":21,"author":{"gitId":"justinfidelis"},"content":"- [Appendix A: Product Scope](#appendix-a-product-scope)","lastModifiedDate":"2021-10-27"},{"lineNumber":22,"author":{"gitId":"CrimsonTitan79"},"content":"- [Appendix B: User Stories](#appendix-b-user-stories)","lastModifiedDate":"2021-11-07"},{"lineNumber":23,"author":{"gitId":"CrimsonTitan79"},"content":"- [Appendix C: Non-Functional Requirements](#appendix-c-non-functional-requirements)","lastModifiedDate":"2021-11-07"},{"lineNumber":24,"author":{"gitId":"CrimsonTitan79"},"content":"- [Appendix D: Glossary](#appendix-d-glossary)","lastModifiedDate":"2021-11-07"},{"lineNumber":25,"author":{"gitId":"CrimsonTitan79"},"content":"- [Appendix E: Instructions for Manual Testing](#appendix-e-instructions-for-manual-testing)","lastModifiedDate":"2021-11-07"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":27,"author":{"gitId":"justinfidelis"},"content":"## 1. Acknowledgements","lastModifiedDate":"2021-10-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":29,"author":{"gitId":"jushg"},"content":"* [SE-EDU AB3 Developer Guide Format](https://se-education.org/addressbook-level3/DeveloperGuide.html)","lastModifiedDate":"2021-11-03"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":31,"author":{"gitId":"justinfidelis"},"content":"## 2. Introduction","lastModifiedDate":"2021-10-27"},{"lineNumber":32,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":33,"author":{"gitId":"justinfidelis"},"content":"MedBot is a Command Line Interface (CLI) application for head nurses to manage patients’ personal information, and","lastModifiedDate":"2021-10-27"},{"lineNumber":34,"author":{"gitId":"justinfidelis"},"content":"scheduler appointments between them and medical staff.","lastModifiedDate":"2021-10-27"},{"lineNumber":35,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":36,"author":{"gitId":"justinfidelis"},"content":"## 3. Design","lastModifiedDate":"2021-10-27"},{"lineNumber":37,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":38,"author":{"gitId":"justinfidelis"},"content":"### 3.1 Architecture","lastModifiedDate":"2021-10-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":40,"author":{"gitId":"justinfidelis"},"content":"Given below is a quick overview of the main components of MedBot and how they interact with one another.","lastModifiedDate":"2021-10-22"},{"lineNumber":41,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":42,"author":{"gitId":"justinfidelis"},"content":"#### 3.1.1 Main Components","lastModifiedDate":"2021-10-27"},{"lineNumber":43,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":44,"author":{"gitId":"jushg"},"content":"![MedBot Architecture Diagram](diagrams/ArchitectureDiagram.png)","lastModifiedDate":"2021-11-03"},{"lineNumber":45,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":46,"author":{"gitId":"jushg"},"content":"The main class of MedBot is the `MedBot` class. It is responsible for initialising the other core components of MedBot","lastModifiedDate":"2021-10-26"},{"lineNumber":47,"author":{"gitId":"jushg"},"content":"at application startup and for handling the interactions between these components.","lastModifiedDate":"2021-10-26"},{"lineNumber":48,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":49,"author":{"gitId":"justinfidelis"},"content":"The 4 core components of MedBot are:","lastModifiedDate":"2021-10-22"},{"lineNumber":50,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":51,"author":{"gitId":"justinfidelis"},"content":"* `Ui`: Handles the UI of MedBot.","lastModifiedDate":"2021-10-22"},{"lineNumber":52,"author":{"gitId":"justinfidelis"},"content":"* `Parser`: Parses user inputs and creates `Command` objects.","lastModifiedDate":"2021-10-22"},{"lineNumber":53,"author":{"gitId":"justinfidelis"},"content":"* `Scheduler`: Holds data in memory and contains the methods to read and write to it.","lastModifiedDate":"2021-10-22"},{"lineNumber":54,"author":{"gitId":"justinfidelis"},"content":"* `Storage`: Loads data from, and stores data to the hard disk.","lastModifiedDate":"2021-10-22"},{"lineNumber":55,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":56,"author":{"gitId":"justinfidelis"},"content":"In addition, the `Command` class facilitates the execution of user instructions.","lastModifiedDate":"2021-10-22"},{"lineNumber":57,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":58,"author":{"gitId":"justinfidelis"},"content":"#### 3.1.2 Component Interaction","lastModifiedDate":"2021-10-27"},{"lineNumber":59,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":60,"author":{"gitId":"CrimsonTitan79"},"content":"Given below is a simplified sequence diagram of how the core components of MedBot interact with each other when the user","lastModifiedDate":"2021-10-28"},{"lineNumber":61,"author":{"gitId":"CrimsonTitan79"},"content":"inputs the command `delete 1`.","lastModifiedDate":"2021-10-28"},{"lineNumber":62,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":63,"author":{"gitId":"justinfidelis"},"content":"![MedBot Architecture](diagrams/overallSequenceDiagram.png)","lastModifiedDate":"2021-11-05"},{"lineNumber":64,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":65,"author":{"gitId":"justinfidelis"},"content":"### 3.2 Ui Component","lastModifiedDate":"2021-10-27"},{"lineNumber":66,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":67,"author":{"gitId":"jushg"},"content":"The Ui Component is handled by the `Ui` class. It is the main class that a user directly interacts with. This class is","lastModifiedDate":"2021-10-26"},{"lineNumber":68,"author":{"gitId":"jushg"},"content":"responsible for reading user inputs and printing outputs to users.","lastModifiedDate":"2021-10-26"},{"lineNumber":69,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":70,"author":{"gitId":"EricBryann"},"content":"The `Ui` class serves as an abstraction over these smaller classes:","lastModifiedDate":"2021-10-26"},{"lineNumber":71,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":72,"author":{"gitId":"EricBryann"},"content":"* `PersonUi`: Handles the Ui for persons","lastModifiedDate":"2021-10-26"},{"lineNumber":73,"author":{"gitId":"EricBryann"},"content":"    * `PatientUi`: Inherits `PersonUi` to handle patient-related Ui","lastModifiedDate":"2021-10-26"},{"lineNumber":74,"author":{"gitId":"EricBryann"},"content":"    * `StaffUi`: Inherits `PersonUi` to handle staff-related Ui","lastModifiedDate":"2021-10-26"},{"lineNumber":75,"author":{"gitId":"EricBryann"},"content":"* `SchedulerUi`: Handles the Ui for schedulers.","lastModifiedDate":"2021-10-26"},{"lineNumber":76,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":77,"author":{"gitId":"EricBryann"},"content":"How `Ui` works:","lastModifiedDate":"2021-11-03"},{"lineNumber":78,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":79,"author":{"gitId":"CrimsonTitan79"},"content":"* After user input is parsed by `Parser`, depending on the current `viewType`, the `Ui` will call methods from","lastModifiedDate":"2021-11-06"},{"lineNumber":80,"author":{"gitId":"CrimsonTitan79"},"content":"  different `Ui` subclasses","lastModifiedDate":"2021-11-06"},{"lineNumber":81,"author":{"gitId":"EricBryann"},"content":"    * When `viewType` is `PATIENT_INFO`, `PatientUi` methods are called.","lastModifiedDate":"2021-11-03"},{"lineNumber":82,"author":{"gitId":"EricBryann"},"content":"    * When `viewType` is `MEDICAL_STAFF_INFO`, `StaffUi` methods are called.","lastModifiedDate":"2021-11-03"},{"lineNumber":83,"author":{"gitId":"EricBryann"},"content":"    * When `viewType` is `SCHEDULER`, `SchedulerUi` methods are called.","lastModifiedDate":"2021-11-03"},{"lineNumber":84,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":85,"author":{"gitId":"EricBryann"},"content":"Given below is a sequence diagram of how the `Ui` component works after the `Parser`","lastModifiedDate":"2021-10-26"},{"lineNumber":86,"author":{"gitId":"EricBryann"},"content":"parses `help delete` input given by a user.","lastModifiedDate":"2021-10-26"},{"lineNumber":87,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":88,"author":{"gitId":"jushg"},"content":"![Ui Sequence Diagram](diagrams/Ui_sequence_diagram.png)","lastModifiedDate":"2021-10-26"},{"lineNumber":89,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":90,"author":{"gitId":"justinfidelis"},"content":"### 3.3 Parser Component","lastModifiedDate":"2021-10-27"},{"lineNumber":91,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":92,"author":{"gitId":"jushg"},"content":"The Parser Component is responsible for parsing the user input and returning the corresponding command class to be","lastModifiedDate":"2021-10-26"},{"lineNumber":93,"author":{"gitId":"jushg"},"content":"executed.","lastModifiedDate":"2021-10-26"},{"lineNumber":94,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":95,"author":{"gitId":"Kureans"},"content":"Here\u0027s a partial class diagram to better illustrate the Parser Component:","lastModifiedDate":"2021-10-26"},{"lineNumber":96,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":97,"author":{"gitId":"Kureans"},"content":"![ParserClassDiagram](diagrams/ParserClassDiagram.png)","lastModifiedDate":"2021-10-26"},{"lineNumber":98,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":99,"author":{"gitId":"Kureans"},"content":"How the `Parser` component works:","lastModifiedDate":"2021-10-26"},{"lineNumber":100,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":101,"author":{"gitId":"jushg"},"content":"* When `Parser` is called by MedBot to parse the user input, it will call the view specific parser `XYZCommandParser`","lastModifiedDate":"2021-10-26"},{"lineNumber":102,"author":{"gitId":"jushg"},"content":"  depending on the current view type (`XYZ` is a placeholder for the specific command name eg. `PatientCommandParser`).","lastModifiedDate":"2021-10-26"},{"lineNumber":103,"author":{"gitId":"Kureans"},"content":"* The `XYZCommandParser` will then create and return the corresponding","lastModifiedDate":"2021-10-26"},{"lineNumber":104,"author":{"gitId":"Kureans"},"content":"  `XYZcommand` object by utilising the `ParserUtils` to help it process the user input.","lastModifiedDate":"2021-10-26"},{"lineNumber":105,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":106,"author":{"gitId":"Kureans"},"content":"The sequence diagram below better illustrates the working process described above:","lastModifiedDate":"2021-10-26"},{"lineNumber":107,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":108,"author":{"gitId":"Kureans"},"content":"![ParserSequenceDiagram](diagrams/ParserSequenceDiagram.png)","lastModifiedDate":"2021-10-26"},{"lineNumber":109,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":110,"author":{"gitId":"Kureans"},"content":"\u003cem\u003e(User is trying to add a patient\u0027s information in the PatientInfoView)\u003c/em\u003e","lastModifiedDate":"2021-10-26"},{"lineNumber":111,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":112,"author":{"gitId":"justinfidelis"},"content":"### 3.4 Scheduler Component","lastModifiedDate":"2021-10-27"},{"lineNumber":113,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":114,"author":{"gitId":"justinfidelis"},"content":"The Scheduler Component is responsible for the storage and modification of patient, staff and appointment information.","lastModifiedDate":"2021-10-27"},{"lineNumber":115,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":116,"author":{"gitId":"justinfidelis"},"content":"Here is a partial class diagram to better illustrate the Scheduler Component.","lastModifiedDate":"2021-10-27"},{"lineNumber":117,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":118,"author":{"gitId":"justinfidelis"},"content":"![SchedulerClassDiagram](diagrams/SchedulerClassDiagram.png)","lastModifiedDate":"2021-10-27"},{"lineNumber":119,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":120,"author":{"gitId":"justinfidelis"},"content":"#### Scheduler Class","lastModifiedDate":"2021-10-27"},{"lineNumber":121,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":122,"author":{"gitId":"justinfidelis"},"content":"The `Scheduler` class consists of 3 internal lists, `patientList`, `medicalStaffList` and `schedulerAppointmentList`,","lastModifiedDate":"2021-10-27"},{"lineNumber":123,"author":{"gitId":"justinfidelis"},"content":"that store patient, staff and appointment information respectively. It has various public methods for the viewing and","lastModifiedDate":"2021-10-27"},{"lineNumber":124,"author":{"gitId":"justinfidelis"},"content":"modification of the information stored in the lists, and for the interfacing between the Scheduler and Storage","lastModifiedDate":"2021-10-27"},{"lineNumber":125,"author":{"gitId":"justinfidelis"},"content":"components. A `Scheduler` class object is instantiated upon MedBot startup.","lastModifiedDate":"2021-10-27"},{"lineNumber":126,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":127,"author":{"gitId":"justinfidelis"},"content":"#### How the Scheduler component works:","lastModifiedDate":"2021-10-27"},{"lineNumber":128,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":129,"author":{"gitId":"justinfidelis"},"content":"* When MedBot calls the `.execute(Scheduler, Ui)` method of a `Command` object, a corresponding method of the","lastModifiedDate":"2021-10-27"},{"lineNumber":130,"author":{"gitId":"justinfidelis"},"content":"  `Scheduler` object will be called.","lastModifiedDate":"2021-10-27"},{"lineNumber":131,"author":{"gitId":"justinfidelis"},"content":"* This method will then view or modify the patient, staff or appointment information as specified.","lastModifiedDate":"2021-10-27"},{"lineNumber":132,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":133,"author":{"gitId":"justinfidelis"},"content":"For example:","lastModifiedDate":"2021-10-27"},{"lineNumber":134,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":135,"author":{"gitId":"justinfidelis"},"content":"* When the `.execute(Scheduler, Ui)` method of an `AddStaffCommand` object is called, the `addStaff(Person)` method of","lastModifiedDate":"2021-10-27"},{"lineNumber":136,"author":{"gitId":"justinfidelis"},"content":"  the `Scheduler` object will be called.","lastModifiedDate":"2021-10-27"},{"lineNumber":137,"author":{"gitId":"justinfidelis"},"content":"* The `addStaff(Person)` method will then add the `Person` to the `medicalStaffList`","lastModifiedDate":"2021-10-27"},{"lineNumber":138,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":139,"author":{"gitId":"justinfidelis"},"content":"### 3.5 Storage Component","lastModifiedDate":"2021-10-27"},{"lineNumber":140,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":141,"author":{"gitId":"CrimsonTitan79"},"content":"The Storage component is responsible for the storage of all patient and staff personal information, and appointment","lastModifiedDate":"2021-10-28"},{"lineNumber":142,"author":{"gitId":"CrimsonTitan79"},"content":"details. It creates a directory MedBotData (if it doesn\u0027t already exist), and the text files MedBotData/patient.txt,","lastModifiedDate":"2021-10-28"},{"lineNumber":143,"author":{"gitId":"CrimsonTitan79"},"content":"MedBotData/staff.txt and MedBotData/appointment.txt.","lastModifiedDate":"2021-10-28"},{"lineNumber":144,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":145,"author":{"gitId":"CrimsonTitan79"},"content":"Here\u0027s a partial class diagram to better illustrate the Storage component:","lastModifiedDate":"2021-10-28"},{"lineNumber":146,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":147,"author":{"gitId":"CrimsonTitan79"},"content":"![SchedulerClassDiagram](diagrams/StorageClassDiagram.png)","lastModifiedDate":"2021-10-28"},{"lineNumber":148,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":149,"author":{"gitId":"CrimsonTitan79"},"content":"#### How the Storage component works:","lastModifiedDate":"2021-10-28"},{"lineNumber":150,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":151,"author":{"gitId":"CrimsonTitan79"},"content":"* When MedBot calls its `interactWithUser()` method, it initializes the `StorageManager` class","lastModifiedDate":"2021-10-28"},{"lineNumber":152,"author":{"gitId":"CrimsonTitan79"},"content":"    * this initializes the `PatientStorage`, `StaffStorage` and `AppointmentStorage` classes.","lastModifiedDate":"2021-10-28"},{"lineNumber":153,"author":{"gitId":"CrimsonTitan79"},"content":"* These three classes inherit from the `Storage` class.","lastModifiedDate":"2021-10-28"},{"lineNumber":154,"author":{"gitId":"CrimsonTitan79"},"content":"* The `PatientStorage`, `StaffStorage` and `AppointmentStorage` objects will call the inherited `loadStorage()` method","lastModifiedDate":"2021-10-28"},{"lineNumber":155,"author":{"gitId":"CrimsonTitan79"},"content":"  and read their respective text data files and read them back into the corresponding objects.","lastModifiedDate":"2021-10-28"},{"lineNumber":156,"author":{"gitId":"CrimsonTitan79"},"content":"* After a command is executed, the object of `StorageManager` will call its `saveToStorage` method and thus call","lastModifiedDate":"2021-10-28"},{"lineNumber":157,"author":{"gitId":"CrimsonTitan79"},"content":"  the `saveData()` method for all three inherited `Storage` objects, thus writing the storage data into the respective","lastModifiedDate":"2021-10-28"},{"lineNumber":158,"author":{"gitId":"CrimsonTitan79"},"content":"  data text files.","lastModifiedDate":"2021-10-28"},{"lineNumber":159,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":160,"author":{"gitId":"CrimsonTitan79"},"content":"### 3.6 Command Class","lastModifiedDate":"2021-10-28"},{"lineNumber":161,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":162,"author":{"gitId":"jushg"},"content":"The Command class and its subclasses are responsible for handling the execution of user input.","lastModifiedDate":"2021-10-26"},{"lineNumber":163,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":164,"author":{"gitId":"jushg"},"content":"Each individual Command object includes:","lastModifiedDate":"2021-10-26"},{"lineNumber":165,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":166,"author":{"gitId":"jushg"},"content":"* `isExit()`: Return true only if it is an `Exit Command` .","lastModifiedDate":"2021-10-26"},{"lineNumber":167,"author":{"gitId":"jushg"},"content":"* `execute(Scheduler, Ui)`: Using the `Ui` class and data from the `Scheduler` to execute and print out the result to","lastModifiedDate":"2021-10-26"},{"lineNumber":168,"author":{"gitId":"jushg"},"content":"  the user.","lastModifiedDate":"2021-10-26"},{"lineNumber":169,"author":{"gitId":"jushg"},"content":"* Various attributes specific to the command, some common ones:","lastModifiedDate":"2021-10-26"},{"lineNumber":170,"author":{"gitId":"jushg"},"content":"    * `id`: The id of `Person`/`Appointment` object to execute the command on.","lastModifiedDate":"2021-10-26"},{"lineNumber":171,"author":{"gitId":"jushg"},"content":"    * `viewType`: The current `ViewType` of the program.","lastModifiedDate":"2021-10-26"},{"lineNumber":172,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":173,"author":{"gitId":"jushg"},"content":"Three major types of Commands:","lastModifiedDate":"2021-10-26"},{"lineNumber":174,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":175,"author":{"gitId":"jushg"},"content":"1. `Person` commands: to interact with person objects.","lastModifiedDate":"2021-10-26"},{"lineNumber":176,"author":{"gitId":"jushg"},"content":"2. `Appointment` commands: to interact with the appointment between doctors/nurses and patients.","lastModifiedDate":"2021-10-26"},{"lineNumber":177,"author":{"gitId":"jushg"},"content":"3. General commands: included are `help`, `exit`, `switch`, `getCurrentView`.","lastModifiedDate":"2021-10-26"},{"lineNumber":178,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":179,"author":{"gitId":"jushg"},"content":"Given below are the complete list of implemented commands and their types:","lastModifiedDate":"2021-11-07"},{"lineNumber":180,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":181,"author":{"gitId":"jushg"},"content":"|Command name| Type |","lastModifiedDate":"2021-11-07"},{"lineNumber":182,"author":{"gitId":"jushg"},"content":"|--------|---|","lastModifiedDate":"2021-11-07"},{"lineNumber":183,"author":{"gitId":"jushg"},"content":"|Exit Command|General|","lastModifiedDate":"2021-11-07"},{"lineNumber":184,"author":{"gitId":"jushg"},"content":"|Get View Command|General|","lastModifiedDate":"2021-11-07"},{"lineNumber":185,"author":{"gitId":"jushg"},"content":"|Help Command|General|","lastModifiedDate":"2021-11-07"},{"lineNumber":186,"author":{"gitId":"jushg"},"content":"|Switch Command|General|","lastModifiedDate":"2021-11-07"},{"lineNumber":187,"author":{"gitId":"jushg"},"content":"|Add Person/Appointment Command|Person/Appointment|","lastModifiedDate":"2021-11-07"},{"lineNumber":188,"author":{"gitId":"jushg"},"content":"|Edit Person/Appointment Command|Person/Appointment|","lastModifiedDate":"2021-11-07"},{"lineNumber":189,"author":{"gitId":"jushg"},"content":"|Delete Person/Appointment Command|Person/Appointment|","lastModifiedDate":"2021-11-07"},{"lineNumber":190,"author":{"gitId":"jushg"},"content":"|Find Person/Appointment Command|Person/Appointment|","lastModifiedDate":"2021-11-07"},{"lineNumber":191,"author":{"gitId":"jushg"},"content":"|List Person/Appointment Command|Person/Appointment|","lastModifiedDate":"2021-11-07"},{"lineNumber":192,"author":{"gitId":"jushg"},"content":"|View Person/Appointment Command|Person/Appointment|","lastModifiedDate":"2021-11-07"},{"lineNumber":193,"author":{"gitId":"jushg"},"content":"|Hide Person Command|Person|","lastModifiedDate":"2021-11-07"},{"lineNumber":194,"author":{"gitId":"jushg"},"content":"|Show Person Command|Person|","lastModifiedDate":"2021-11-07"},{"lineNumber":195,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":196,"author":{"gitId":"justinfidelis"},"content":"## 4. Implementation","lastModifiedDate":"2021-10-27"},{"lineNumber":197,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":198,"author":{"gitId":"jushg"},"content":"This section describes some noteworthy details on how certain features are implemented.","lastModifiedDate":"2021-10-26"},{"lineNumber":199,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":200,"author":{"gitId":"justinfidelis"},"content":"### 4.1 Switch view feature","lastModifiedDate":"2021-10-27"},{"lineNumber":201,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":202,"author":{"gitId":"jushg"},"content":"#### Implementation","lastModifiedDate":"2021-10-26"},{"lineNumber":203,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":204,"author":{"gitId":"jushg"},"content":"The switch view mechanism is heavily linked to the `Parser` class. By having a","lastModifiedDate":"2021-10-26"},{"lineNumber":205,"author":{"gitId":"jushg"},"content":"`ViewType` enumeration property in `Parser`, the view of the console can be switched by executing the","lastModifiedDate":"2021-10-26"},{"lineNumber":206,"author":{"gitId":"jushg"},"content":"appropriate `SwitchCommand` class, which modifies the corresponding `ViewType`","lastModifiedDate":"2021-10-26"},{"lineNumber":207,"author":{"gitId":"jushg"},"content":"of the `Parser`. The 3 possible views and the corresponding user input commands are as follows:","lastModifiedDate":"2021-10-26"},{"lineNumber":208,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":209,"author":{"gitId":"jushg"},"content":"* `switch p` or `switch 1` - switches to the `PATIENT_INFO` view.","lastModifiedDate":"2021-11-07"},{"lineNumber":210,"author":{"gitId":"jushg"},"content":"* `switch m` or `switch 2` - switches to the `MEDICAL_STAFF_INFO` view.","lastModifiedDate":"2021-11-07"},{"lineNumber":211,"author":{"gitId":"jushg"},"content":"* `switch s` or `switch 3` - switches to the `SCHEDULER` view.","lastModifiedDate":"2021-11-07"},{"lineNumber":212,"author":{"gitId":"jushg"},"content":"* `switch` - will switch to another view depending on the current view in the order shown below:","lastModifiedDate":"2021-11-07"},{"lineNumber":213,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":214,"author":{"gitId":"jushg"},"content":"  `PATIENT_INFO` --\u003e `MEDICAL_STAFF_INFO` --\u003e `SCHEDULER` --\u003e `PATIENT_INFO`","lastModifiedDate":"2021-11-07"},{"lineNumber":215,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":216,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":217,"author":{"gitId":"Kureans"},"content":"Each command evokes the `Parser#setViewType(ViewType)` method, which will set the corresponding","lastModifiedDate":"2021-10-27"},{"lineNumber":218,"author":{"gitId":"CrimsonTitan79"},"content":"`ViewType` property in the `Parser` class. Additionally, the `Ui#clearConsoleFromIde` method will be evoked, which","lastModifiedDate":"2021-11-07"},{"lineNumber":219,"author":{"gitId":"CrimsonTitan79"},"content":"performs a pseudo clear of the console before printing a message that indicates the user has switched view.","lastModifiedDate":"2021-11-07"},{"lineNumber":220,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":221,"author":{"gitId":"Kureans"},"content":"#### Design Considerations:","lastModifiedDate":"2021-11-07"},{"lineNumber":222,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":223,"author":{"gitId":"Kureans"},"content":"**Aspect: How console is cleared:**","lastModifiedDate":"2021-11-07"},{"lineNumber":224,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":225,"author":{"gitId":"Kureans"},"content":"* Alternative 1(Current Choice)","lastModifiedDate":"2021-11-07"},{"lineNumber":226,"author":{"gitId":"CrimsonTitan79"},"content":"    * Perform a pseudo-clear using multiple `System.lineSeparator()` to move the current console outputs upwards.","lastModifiedDate":"2021-11-07"},{"lineNumber":227,"author":{"gitId":"Kureans"},"content":"        * Pros: Easy to implement, system independent","lastModifiedDate":"2021-11-07"},{"lineNumber":228,"author":{"gitId":"Kureans"},"content":"        * Cons: Only works for terminals up to a certain size (bigger terminals can still see previous console outputs)","lastModifiedDate":"2021-11-07"},{"lineNumber":229,"author":{"gitId":"Kureans"},"content":"    * Perform an actual clear using the `ProcessBuilder` / `Runtime` class in java.","lastModifiedDate":"2021-11-07"},{"lineNumber":230,"author":{"gitId":"Kureans"},"content":"        * Pros: Size of terminal doesn\u0027t matter since it actually clears the console.","lastModifiedDate":"2021-11-07"},{"lineNumber":231,"author":{"gitId":"CrimsonTitan79"},"content":"        * Cons: More complex implementation, need to consider different sets of implementation for different OSes, does","lastModifiedDate":"2021-11-07"},{"lineNumber":232,"author":{"gitId":"CrimsonTitan79"},"content":"          not work on IDE.","lastModifiedDate":"2021-11-07"},{"lineNumber":233,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":234,"author":{"gitId":"justinfidelis"},"content":"### 4.2 Find feature","lastModifiedDate":"2021-10-27"},{"lineNumber":235,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":236,"author":{"gitId":"EricBryann"},"content":"#### Functionality","lastModifiedDate":"2021-10-20"},{"lineNumber":237,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":238,"author":{"gitId":"EricBryann"},"content":"This command will find a list of `Person` that match the given attributes in a table format.","lastModifiedDate":"2021-10-20"},{"lineNumber":239,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":240,"author":{"gitId":"EricBryann"},"content":"#### Implementation","lastModifiedDate":"2021-10-20"},{"lineNumber":241,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":242,"author":{"gitId":"jushg"},"content":"The `find` feature is facilitated by the `FindPersonCommand` class. It extends from `Command` class and overrides","lastModifiedDate":"2021-10-21"},{"lineNumber":243,"author":{"gitId":"EricBryann"},"content":"the `execute()` method to achieve the desired functionality.","lastModifiedDate":"2021-10-20"},{"lineNumber":244,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":245,"author":{"gitId":"EricBryann"},"content":"The example below gives a direction on how this command behaves.","lastModifiedDate":"2021-10-20"},{"lineNumber":246,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":247,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":248,"author":{"gitId":"jushg"},"content":"1. User executes the `find n/John` command. The `Parser#parseCommand()` method will parse this command and eventually","lastModifiedDate":"2021-11-07"},{"lineNumber":249,"author":{"gitId":"jushg"},"content":"returns a `new FindPatientCommand()` object.","lastModifiedDate":"2021-10-26"},{"lineNumber":250,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":251,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":252,"author":{"gitId":"jushg"},"content":"2. The `MedBot#interactWithUser()` method will run the `execute()` method in the `new FindPatientCommand()` object.","lastModifiedDate":"2021-11-07"},{"lineNumber":253,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":254,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":255,"author":{"gitId":"jushg"},"content":"3. The `execute()` method will call `PersonList#findPersons()` method with the parameter `n/John` passed in.","lastModifiedDate":"2021-11-07"},{"lineNumber":256,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":257,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":258,"author":{"gitId":"jushg"},"content":"4. `PersonList#findPersons()` will check all the `persons` list and returns all `Person` in the list whose name contains","lastModifiedDate":"2021-11-07"},{"lineNumber":259,"author":{"gitId":"EricBryann"},"content":"the string `john`. The attribute match is case-insensitive.","lastModifiedDate":"2021-10-20"},{"lineNumber":260,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":261,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":262,"author":{"gitId":"jushg"},"content":"5. The filtered `Person` list is then passed into the `Ui` class to be displayed into a table format through","lastModifiedDate":"2021-11-07"},{"lineNumber":263,"author":{"gitId":"EricBryann"},"content":"`Ui#getFindPatientsMessage()`.","lastModifiedDate":"2021-10-20"},{"lineNumber":264,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":265,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":266,"author":{"gitId":"justinfidelis"},"content":"### 4.3 Edit feature","lastModifiedDate":"2021-10-27"},{"lineNumber":267,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":268,"author":{"gitId":"jushg"},"content":"#### Functionality","lastModifiedDate":"2021-10-21"},{"lineNumber":269,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":270,"author":{"gitId":"jushg"},"content":"This command will edit a specified `Person` object with the attributes given in the command.","lastModifiedDate":"2021-10-21"},{"lineNumber":271,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":272,"author":{"gitId":"jushg"},"content":"#### Implementation","lastModifiedDate":"2021-10-21"},{"lineNumber":273,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":274,"author":{"gitId":"jushg"},"content":"The `edit` feature is facilitated by the `EditPersonCommand` class. It extends from `Command` class and overrides","lastModifiedDate":"2021-10-21"},{"lineNumber":275,"author":{"gitId":"jushg"},"content":"the `execute()` method to achieve the desired functionality.","lastModifiedDate":"2021-10-21"},{"lineNumber":276,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":277,"author":{"gitId":"jushg"},"content":"The example below gives a direction on how this command behaves.","lastModifiedDate":"2021-10-21"},{"lineNumber":278,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":279,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":280,"author":{"gitId":"jushg"},"content":"1. User executes the `edit n/John` command when the attribute `Parser#viewType` is `PATIENT_INFO`.","lastModifiedDate":"2021-11-07"},{"lineNumber":281,"author":{"gitId":"jushg"},"content":"The `Parser#parseCommand()` method will parse this command and eventually returns a `new EditPatientCommand()` object.","lastModifiedDate":"2021-10-21"},{"lineNumber":282,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":283,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":284,"author":{"gitId":"jushg"},"content":"2. The `MedBot#interactWithUser()` method will run the `execute()` method in the `new EditPatientCommand()` object.","lastModifiedDate":"2021-11-07"},{"lineNumber":285,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":286,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":287,"author":{"gitId":"jushg"},"content":"3. The `execute()` method will call `PersonList#editPerson()` method with the new `Person` object having the parameter","lastModifiedDate":"2021-11-07"},{"lineNumber":288,"author":{"gitId":"jushg"},"content":"`n/John` passed in. (All other attributes of the object are set to `null`)","lastModifiedDate":"2021-10-21"},{"lineNumber":289,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":290,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":291,"author":{"gitId":"jushg"},"content":"4. `PersonList#editPerson()` will attempt to replace all attributes of the old `Person`","lastModifiedDate":"2021-11-07"},{"lineNumber":292,"author":{"gitId":"jushg"},"content":"object with the non-null attributes given in the new `Person`.","lastModifiedDate":"2021-10-21"},{"lineNumber":293,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":294,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":295,"author":{"gitId":"jushg"},"content":"5. The edited `Person` is then passed into the `Ui` class to be displayed through`Ui#getEditPatientMessage()`.","lastModifiedDate":"2021-11-07"},{"lineNumber":296,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":297,"author":{"gitId":"justinfidelis"},"content":"### 4.4 Appointment management","lastModifiedDate":"2021-10-27"},{"lineNumber":298,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":299,"author":{"gitId":"justinfidelis"},"content":"#### Functionality","lastModifiedDate":"2021-10-27"},{"lineNumber":300,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":301,"author":{"gitId":"CrimsonTitan79"},"content":"The appointment management feature is designed to allow head nurses to schedule appointments between medical staff and","lastModifiedDate":"2021-10-28"},{"lineNumber":302,"author":{"gitId":"CrimsonTitan79"},"content":"patients while ensuring that there are no appointment clashes for both staff and patients.","lastModifiedDate":"2021-10-28"},{"lineNumber":303,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":304,"author":{"gitId":"justinfidelis"},"content":"Below is a list of key design considerations for this feature:","lastModifiedDate":"2021-10-27"},{"lineNumber":305,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":306,"author":{"gitId":"jushg"},"content":"* Upon adding/editing an appointment, MedBot will check if the new appointment clashes with an existing appointment and","lastModifiedDate":"2021-11-07"},{"lineNumber":307,"author":{"gitId":"CrimsonTitan79"},"content":"  prevent such additions/edits.","lastModifiedDate":"2021-10-28"},{"lineNumber":308,"author":{"gitId":"justinfidelis"},"content":"* Users should be able to edit the date/time of appointments to reschedule appointments, or to fix mistakes.","lastModifiedDate":"2021-10-27"},{"lineNumber":309,"author":{"gitId":"CrimsonTitan79"},"content":"    * Users should also be able to change the staff involved in that appointment for cases where the original staff is","lastModifiedDate":"2021-10-28"},{"lineNumber":310,"author":{"gitId":"CrimsonTitan79"},"content":"      not available, or to fix mistakes.","lastModifiedDate":"2021-10-28"},{"lineNumber":311,"author":{"gitId":"justinfidelis"},"content":"    * Users should also be able to change the patient involved in that appointment to allow for the rearranging of","lastModifiedDate":"2021-10-27"},{"lineNumber":312,"author":{"gitId":"justinfidelis"},"content":"      appointments, or to fix mistakes.","lastModifiedDate":"2021-10-27"},{"lineNumber":313,"author":{"gitId":"justinfidelis"},"content":"* Users should be able to view a list of all appointments in the system.","lastModifiedDate":"2021-10-27"},{"lineNumber":314,"author":{"gitId":"justinfidelis"},"content":"* Users should be able to view a list of all appointments for a particular patient/staff.","lastModifiedDate":"2021-10-27"},{"lineNumber":315,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":316,"author":{"gitId":"justinfidelis"},"content":"#### Implementation","lastModifiedDate":"2021-10-27"},{"lineNumber":317,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":318,"author":{"gitId":"justinfidelis"},"content":"Appointment management is performed by the `Scheduler` class and involves the storage and modification of `Appointment`","lastModifiedDate":"2021-10-27"},{"lineNumber":319,"author":{"gitId":"justinfidelis"},"content":"class objects. Appointments are managed on an hourly basis.","lastModifiedDate":"2021-10-27"},{"lineNumber":320,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":321,"author":{"gitId":"justinfidelis"},"content":"The `Appointment` class is an association class between `Patient` and `Staff`, with additional `appointmentId` and","lastModifiedDate":"2021-10-27"},{"lineNumber":322,"author":{"gitId":"justinfidelis"},"content":"`dateTimeCode` attributes. It is stored in the `SchedulerAppointmentList` class object in the `Scheduler` class and in","lastModifiedDate":"2021-10-27"},{"lineNumber":323,"author":{"gitId":"justinfidelis"},"content":"`PersonalAppointmentList` class objects in each `Person` class object.","lastModifiedDate":"2021-10-27"},{"lineNumber":324,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":325,"author":{"gitId":"justinfidelis"},"content":"The `SchedulerAppointmentList` object keeps track of all appointments in the system. This allows for the viewing of all","lastModifiedDate":"2021-10-27"},{"lineNumber":326,"author":{"gitId":"justinfidelis"},"content":"appointments in the system. The object consists of a `HashMap` that stores `Appointment` objects with their","lastModifiedDate":"2021-10-27"},{"lineNumber":327,"author":{"gitId":"justinfidelis"},"content":"`appointmentId` as their key, this prevents the system having multiple `Appointment` objects of the same","lastModifiedDate":"2021-10-27"},{"lineNumber":328,"author":{"gitId":"justinfidelis"},"content":"`appointmentId`.","lastModifiedDate":"2021-10-27"},{"lineNumber":329,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":330,"author":{"gitId":"justinfidelis"},"content":"The `PersonalAppointmentList` object in each `Person` class object keeps track of the appointments of that person. This","lastModifiedDate":"2021-10-27"},{"lineNumber":331,"author":{"gitId":"justinfidelis"},"content":"allows for the viewing of all appointments of that person. The object consists of a `TreeSet` that stores `Appointment`","lastModifiedDate":"2021-10-27"},{"lineNumber":332,"author":{"gitId":"CrimsonTitan79"},"content":"objects with their `dateTimeCode` as the comparable value. This prevents the system from adding clashing appointments to","lastModifiedDate":"2021-10-28"},{"lineNumber":333,"author":{"gitId":"CrimsonTitan79"},"content":"a patient/staff and allows their appointments to be listed by their date.","lastModifiedDate":"2021-10-28"},{"lineNumber":334,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":335,"author":{"gitId":"justinfidelis"},"content":"Below is a simplified sequence diagram of the `addAppointment(Appointment)` method in the `Scheduler` class:","lastModifiedDate":"2021-10-27"},{"lineNumber":336,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":337,"author":{"gitId":"justinfidelis"},"content":"![Add Appointment Sequence Diagram](diagrams/AddAppointmentSequenceDiagram.png)","lastModifiedDate":"2021-10-27"},{"lineNumber":338,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":339,"author":{"gitId":"justinfidelis"},"content":"## Appendix A: Product scope","lastModifiedDate":"2021-10-27"},{"lineNumber":340,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":341,"author":{"gitId":"-"},"content":"### Target user profile","lastModifiedDate":"2020-05-24"},{"lineNumber":342,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":343,"author":{"gitId":"jushg"},"content":"Head nurses who prefer using Command Line Interface(CLI) instead of traditional Graphical User Interface (GUI)","lastModifiedDate":"2021-10-26"},{"lineNumber":344,"author":{"gitId":"jushg"},"content":"for their daily jobs","lastModifiedDate":"2021-10-26"},{"lineNumber":345,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":346,"author":{"gitId":"-"},"content":"### Value proposition","lastModifiedDate":"2020-05-24"},{"lineNumber":347,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":348,"author":{"gitId":"jushg"},"content":"1. Easily manage patient info, consultation requirements","lastModifiedDate":"2021-10-21"},{"lineNumber":349,"author":{"gitId":"jushg"},"content":"2. Easily manage nurse/doctor schedules","lastModifiedDate":"2021-10-21"},{"lineNumber":350,"author":{"gitId":"jushg"},"content":"3. Assign nurses/doctors to visit patients at specific times","lastModifiedDate":"2021-10-21"},{"lineNumber":351,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":352,"author":{"gitId":"Kureans"},"content":"## Appendix B: User Stories","lastModifiedDate":"2021-11-07"},{"lineNumber":353,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":354,"author":{"gitId":"-"},"content":"|Version| As a ... | I want to ... | So that I can ...|","lastModifiedDate":"2020-05-24"},{"lineNumber":355,"author":{"gitId":"-"},"content":"|--------|----------|---------------|------------------|","lastModifiedDate":"2020-05-24"},{"lineNumber":356,"author":{"gitId":"-"},"content":"|v1.0|new user|see usage instructions|refer to them when I forget how to use the application|","lastModifiedDate":"2020-05-24"},{"lineNumber":357,"author":{"gitId":"Kureans"},"content":"|v1.0|user|add a new patient\u0027s information|track new patients admitted to the hospital|","lastModifiedDate":"2021-11-07"},{"lineNumber":358,"author":{"gitId":"Kureans"},"content":"|v1.0|user|remove a patient\u0027s information|discharged patients will no longer be tracked by the system|","lastModifiedDate":"2021-11-07"},{"lineNumber":359,"author":{"gitId":"Kureans"},"content":"|v1.0|user|edit a patient\u0027s information|rectify data entry errors or reflect changes in personal details|","lastModifiedDate":"2021-11-07"},{"lineNumber":360,"author":{"gitId":"Kureans"},"content":"|v2.0|user|add appointment timeslots for medical staff|easily administer their visiting hours|","lastModifiedDate":"2021-11-07"},{"lineNumber":361,"author":{"gitId":"Kureans"},"content":"|v2.0|user|be informed if there are any conflicting visiting timings for medical staff|reschedule to more appropriate timings.","lastModifiedDate":"2021-11-07"},{"lineNumber":362,"author":{"gitId":"Kureans"},"content":"|v2.0|user|edit appointment timeslots for medical staff|account for changes in schedule of the medical staff|","lastModifiedDate":"2021-11-07"},{"lineNumber":363,"author":{"gitId":"jushg"},"content":"|v2.0|user|see all available appointment timeslots for medical staff|know to not assign any conflicting timings|","lastModifiedDate":"2021-11-07"},{"lineNumber":364,"author":{"gitId":"jushg"},"content":"|v2.0|user|filter appointments by date/time|decide how to assign new appointments more quickly|","lastModifiedDate":"2021-11-07"},{"lineNumber":365,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":366,"author":{"gitId":"Kureans"},"content":"## Appendix C: Non-Functional Requirements","lastModifiedDate":"2021-11-07"},{"lineNumber":367,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":368,"author":{"gitId":"jushg"},"content":"1. Should work on any *mainstream OS* as long as it has `Java 11` or above installed.","lastModifiedDate":"2021-11-07"},{"lineNumber":369,"author":{"gitId":"Kureans"},"content":"2. A user with above average typing speed for regular English text (i.e. not code, not system admin commands)","lastModifiedDate":"2021-11-07"},{"lineNumber":370,"author":{"gitId":"Kureans"},"content":"   should be able to accomplish most of the tasks faster using commands than using the mouse.","lastModifiedDate":"2021-11-07"},{"lineNumber":371,"author":{"gitId":"Kureans"},"content":"3. Should be able to hold up to a thousand appointments and patient/staff records without any noticeable decrease in","lastModifiedDate":"2021-11-07"},{"lineNumber":372,"author":{"gitId":"Kureans"},"content":"   performance.","lastModifiedDate":"2021-11-07"},{"lineNumber":373,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":374,"author":{"gitId":"Kureans"},"content":"## Appendix D: Glossary","lastModifiedDate":"2021-11-07"},{"lineNumber":375,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":376,"author":{"gitId":"CrimsonTitan79"},"content":"* *Mainstream OS* - Windows, GNU/Linux, Unix, OS-X","lastModifiedDate":"2021-11-08"},{"lineNumber":377,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":378,"author":{"gitId":"Kureans"},"content":"## Appendix E: Instructions for manual testing","lastModifiedDate":"2021-11-07"},{"lineNumber":379,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":380,"author":{"gitId":"CrimsonTitan79"},"content":"Below are instructions to perform manual testing of the application. Please refer to the","lastModifiedDate":"2021-11-07"},{"lineNumber":381,"author":{"gitId":"CrimsonTitan79"},"content":"[User Guide](https://ay2122s1-cs2113-t13-1.github.io/tp/UserGuide.html) for more details on the usage of the various","lastModifiedDate":"2021-11-07"},{"lineNumber":382,"author":{"gitId":"CrimsonTitan79"},"content":"commands.","lastModifiedDate":"2021-11-07"},{"lineNumber":383,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":384,"author":{"gitId":"CrimsonTitan79"},"content":"### Launch and exit","lastModifiedDate":"2021-11-07"},{"lineNumber":385,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":386,"author":{"gitId":"CrimsonTitan79"},"content":"1. Launch","lastModifiedDate":"2021-11-07"},{"lineNumber":387,"author":{"gitId":"CrimsonTitan79"},"content":"    1. Please follow the instructions in","lastModifiedDate":"2021-11-07"},{"lineNumber":388,"author":{"gitId":"CrimsonTitan79"},"content":"       the [Quick Start Guide](https://ay2122s1-cs2113-t13-1.github.io/tp/UserGuide.html#quick-start-guide)","lastModifiedDate":"2021-11-07"},{"lineNumber":389,"author":{"gitId":"CrimsonTitan79"},"content":"       to launch the application.","lastModifiedDate":"2021-11-07"},{"lineNumber":390,"author":{"gitId":"CrimsonTitan79"},"content":"2. Exit","lastModifiedDate":"2021-11-07"},{"lineNumber":391,"author":{"gitId":"CrimsonTitan79"},"content":"    1. Enter `exit` to quit MedBot.","lastModifiedDate":"2021-11-07"},{"lineNumber":392,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":393,"author":{"gitId":"CrimsonTitan79"},"content":"### Switching Views","lastModifiedDate":"2021-11-07"},{"lineNumber":394,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":395,"author":{"gitId":"CrimsonTitan79"},"content":"1. Switching between the different views of MedBot, in any view","lastModifiedDate":"2021-11-07"},{"lineNumber":396,"author":{"gitId":"CrimsonTitan79"},"content":"    1. Test case: `switch` \u003cbr\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":397,"author":{"gitId":"CrimsonTitan79"},"content":"       Expected: MedBot will switch to the next view. The views switch in this order, and loop back: \u003cbr\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":398,"author":{"gitId":"CrimsonTitan79"},"content":"       (PATIENT_INFO --\u003e MEDICAL_STAFF_INFO --\u003e SCHEDULER --\u003e PATIENT_INFO)","lastModifiedDate":"2021-11-07"},{"lineNumber":399,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":400,"author":{"gitId":"CrimsonTitan79"},"content":"2. Switching from other views to MEDICAL_STAFF_INFO view specifically","lastModifiedDate":"2021-11-07"},{"lineNumber":401,"author":{"gitId":"CrimsonTitan79"},"content":"    1. Test case: `switch m` when in PATIENT_INFO view or SCHEDULER view \u003cbr\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":402,"author":{"gitId":"CrimsonTitan79"},"content":"       Expected: MedBot will switch to MEDICAL_STAFF_INFO view, and print: \u003cbr\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":403,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":404,"author":{"gitId":"CrimsonTitan79"},"content":"        ``` ","lastModifiedDate":"2021-11-07"},{"lineNumber":405,"author":{"gitId":"CrimsonTitan79"},"content":"          ___ _____ _   ___ ___  ","lastModifiedDate":"2021-11-07"},{"lineNumber":406,"author":{"gitId":"CrimsonTitan79"},"content":"         / __|_   _/_\\ | __| __| ","lastModifiedDate":"2021-11-07"},{"lineNumber":407,"author":{"gitId":"CrimsonTitan79"},"content":"         \\__ \\ | |/ _ \\| _|| _|  ","lastModifiedDate":"2021-11-07"},{"lineNumber":408,"author":{"gitId":"CrimsonTitan79"},"content":"         |___/_|_/_/_\\_\\_| |_|   ","lastModifiedDate":"2021-11-07"},{"lineNumber":409,"author":{"gitId":"CrimsonTitan79"},"content":"         |_ _| \\| | __/ _ \\      ","lastModifiedDate":"2021-11-07"},{"lineNumber":410,"author":{"gitId":"CrimsonTitan79"},"content":"          | || .` | _| (_) |     ","lastModifiedDate":"2021-11-07"},{"lineNumber":411,"author":{"gitId":"CrimsonTitan79"},"content":"         |___|_|\\_|_|_\\___/    __","lastModifiedDate":"2021-11-07"},{"lineNumber":412,"author":{"gitId":"CrimsonTitan79"},"content":"         \\ \\ / /_ _| __\\ \\    / /","lastModifiedDate":"2021-11-07"},{"lineNumber":413,"author":{"gitId":"CrimsonTitan79"},"content":"          \\ V / | || _| \\ \\/\\/ / ","lastModifiedDate":"2021-11-07"},{"lineNumber":414,"author":{"gitId":"CrimsonTitan79"},"content":"           \\_/ |___|___| \\_/\\_/  ","lastModifiedDate":"2021-11-07"},{"lineNumber":415,"author":{"gitId":"CrimsonTitan79"},"content":"        View has been switched to MEDICAL_STAFF_INFO","lastModifiedDate":"2021-11-07"},{"lineNumber":416,"author":{"gitId":"CrimsonTitan79"},"content":"        ```","lastModifiedDate":"2021-11-07"},{"lineNumber":417,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":418,"author":{"gitId":"CrimsonTitan79"},"content":"3. Switching view to the current view","lastModifiedDate":"2021-11-07"},{"lineNumber":419,"author":{"gitId":"CrimsonTitan79"},"content":"    1. Test case: `switch 3` when in the `SCHEDULER` view \u003cbr\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":420,"author":{"gitId":"CrimsonTitan79"},"content":"       Expected: View remains the same, prints: `You are already in the Scheduler view.`","lastModifiedDate":"2021-11-07"},{"lineNumber":421,"author":{"gitId":"CrimsonTitan79"},"content":"4. Invalid switch commands","lastModifiedDate":"2021-11-07"},{"lineNumber":422,"author":{"gitId":"CrimsonTitan79"},"content":"    1. Test case: `switch 100`, `switch abc`, ... \u003cbr\u003e Expected: View remains the same,","lastModifiedDate":"2021-11-07"},{"lineNumber":423,"author":{"gitId":"CrimsonTitan79"},"content":"       prints: `Invalid view type code.`","lastModifiedDate":"2021-11-07"},{"lineNumber":424,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":425,"author":{"gitId":"CrimsonTitan79"},"content":"### Get current view","lastModifiedDate":"2021-11-07"},{"lineNumber":426,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":427,"author":{"gitId":"CrimsonTitan79"},"content":"1. Get the current view type of MedBot","lastModifiedDate":"2021-11-07"},{"lineNumber":428,"author":{"gitId":"CrimsonTitan79"},"content":"    1. Test case: `get view` when in the `SCHEDULER` view \u003cbr\u003eExpected: `You are currently in the Scheduler\u0027s View.`","lastModifiedDate":"2021-11-07"},{"lineNumber":429,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":430,"author":{"gitId":"CrimsonTitan79"},"content":"### Accessing user guide","lastModifiedDate":"2021-11-07"},{"lineNumber":431,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":432,"author":{"gitId":"CrimsonTitan79"},"content":"1. Using `help` in the SCHEDULER view","lastModifiedDate":"2021-11-07"},{"lineNumber":433,"author":{"gitId":"CrimsonTitan79"},"content":"    1. Test case: `help` in SCHEDULER view. \u003cbr\u003eExpected:","lastModifiedDate":"2021-11-07"},{"lineNumber":434,"author":{"gitId":"CrimsonTitan79"},"content":"        ```","lastModifiedDate":"2021-11-07"},{"lineNumber":435,"author":{"gitId":"CrimsonTitan79"},"content":"        Here are the list of commands:","lastModifiedDate":"2021-11-07"},{"lineNumber":436,"author":{"gitId":"CrimsonTitan79"},"content":"    ","lastModifiedDate":"2021-11-07"},{"lineNumber":437,"author":{"gitId":"CrimsonTitan79"},"content":"        help","lastModifiedDate":"2021-11-07"},{"lineNumber":438,"author":{"gitId":"CrimsonTitan79"},"content":"        add","lastModifiedDate":"2021-11-07"},{"lineNumber":439,"author":{"gitId":"CrimsonTitan79"},"content":"        list","lastModifiedDate":"2021-11-07"},{"lineNumber":440,"author":{"gitId":"CrimsonTitan79"},"content":"        view","lastModifiedDate":"2021-11-07"},{"lineNumber":441,"author":{"gitId":"CrimsonTitan79"},"content":"        edit","lastModifiedDate":"2021-11-07"},{"lineNumber":442,"author":{"gitId":"CrimsonTitan79"},"content":"        find","lastModifiedDate":"2021-11-07"},{"lineNumber":443,"author":{"gitId":"CrimsonTitan79"},"content":"        delete","lastModifiedDate":"2021-11-07"},{"lineNumber":444,"author":{"gitId":"CrimsonTitan79"},"content":"        get view","lastModifiedDate":"2021-11-07"},{"lineNumber":445,"author":{"gitId":"CrimsonTitan79"},"content":"        switch","lastModifiedDate":"2021-11-07"},{"lineNumber":446,"author":{"gitId":"CrimsonTitan79"},"content":"        exit","lastModifiedDate":"2021-11-07"},{"lineNumber":447,"author":{"gitId":"CrimsonTitan79"},"content":"    ","lastModifiedDate":"2021-11-07"},{"lineNumber":448,"author":{"gitId":"CrimsonTitan79"},"content":"        To obtain more information on each command and their respective required inputs, type:","lastModifiedDate":"2021-11-07"},{"lineNumber":449,"author":{"gitId":"CrimsonTitan79"},"content":"        help [COMMAND]","lastModifiedDate":"2021-11-07"},{"lineNumber":450,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":451,"author":{"gitId":"CrimsonTitan79"},"content":"        *Note that all commands will remove any \u0027|\u0027 inputs for format parsing purposes. For ","lastModifiedDate":"2021-11-07"},{"lineNumber":452,"author":{"gitId":"CrimsonTitan79"},"content":"        examples of the expected output, please refer to the actual user guide.","lastModifiedDate":"2021-11-07"},{"lineNumber":453,"author":{"gitId":"CrimsonTitan79"},"content":"        ```","lastModifiedDate":"2021-11-07"},{"lineNumber":454,"author":{"gitId":"CrimsonTitan79"},"content":"2. Getting view specific help for a specific command","lastModifiedDate":"2021-11-07"},{"lineNumber":455,"author":{"gitId":"CrimsonTitan79"},"content":"    1. Test case: `help add` in PATIENT_INFO view \u003cbr\u003eExpected:","lastModifiedDate":"2021-11-07"},{"lineNumber":456,"author":{"gitId":"CrimsonTitan79"},"content":"        ```","lastModifiedDate":"2021-11-07"},{"lineNumber":457,"author":{"gitId":"CrimsonTitan79"},"content":"        Adds a patient to the patient list.","lastModifiedDate":"2021-11-07"},{"lineNumber":458,"author":{"gitId":"CrimsonTitan79"},"content":"        Format:","lastModifiedDate":"2021-11-07"},{"lineNumber":459,"author":{"gitId":"CrimsonTitan79"},"content":"        add i/PATIENT_IC [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS]","lastModifiedDate":"2021-11-07"},{"lineNumber":460,"author":{"gitId":"CrimsonTitan79"},"content":"        ```","lastModifiedDate":"2021-11-07"},{"lineNumber":461,"author":{"gitId":"CrimsonTitan79"},"content":"3. Invalid `help` usage","lastModifiedDate":"2021-11-07"},{"lineNumber":462,"author":{"gitId":"CrimsonTitan79"},"content":"    1. Test case: `help abc` in any view \u003cbr\u003eExpected: `Unable to parse command.`","lastModifiedDate":"2021-11-07"},{"lineNumber":463,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":464,"author":{"gitId":"CrimsonTitan79"},"content":"### Patient/Medical Staff Information Commands","lastModifiedDate":"2021-11-07"},{"lineNumber":465,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":466,"author":{"gitId":"CrimsonTitan79"},"content":"* The commands for `PATIENT_INFO_VIEW` and `STAFF_INFO_VIEW` are the same, but apply to patients and staff respectively.","lastModifiedDate":"2021-11-07"},{"lineNumber":467,"author":{"gitId":"CrimsonTitan79"},"content":"  `PATIENT_INFO_VIEW` examples will be used here, but feel free to test the same commands for `STAFF_INFO_VIEW`.","lastModifiedDate":"2021-11-07"},{"lineNumber":468,"author":{"gitId":"CrimsonTitan79"},"content":"* Note that the Patient ID/STAFF ID generated is dependent on the existing patients/staff information in MedBot.","lastModifiedDate":"2021-11-07"},{"lineNumber":469,"author":{"gitId":"CrimsonTitan79"},"content":"* The expected output of the test cases below assumes that the commands are executed in the order that they are","lastModifiedDate":"2021-11-07"},{"lineNumber":470,"author":{"gitId":"CrimsonTitan79"},"content":"  presented in this guide.","lastModifiedDate":"2021-11-07"},{"lineNumber":471,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":472,"author":{"gitId":"CrimsonTitan79"},"content":"#### Adding a patient","lastModifiedDate":"2021-11-07"},{"lineNumber":473,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":474,"author":{"gitId":"CrimsonTitan79"},"content":"1. Add a patient to the patient list with all details filled.","lastModifiedDate":"2021-11-07"},{"lineNumber":475,"author":{"gitId":"CrimsonTitan79"},"content":"    1. Test case: `add i/S7812345X n/John Doe p/87654321 e/john.doe@gmail.com a/John Street, block 1234, #01-01` \u003cbr\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":476,"author":{"gitId":"CrimsonTitan79"},"content":"       Expected:","lastModifiedDate":"2021-11-07"},{"lineNumber":477,"author":{"gitId":"CrimsonTitan79"},"content":"        ```","lastModifiedDate":"2021-11-07"},{"lineNumber":478,"author":{"gitId":"CrimsonTitan79"},"content":"        Added patient with Patient ID: 1","lastModifiedDate":"2021-11-07"},{"lineNumber":479,"author":{"gitId":"CrimsonTitan79"},"content":"        IC: S7812345X","lastModifiedDate":"2021-11-07"},{"lineNumber":480,"author":{"gitId":"CrimsonTitan79"},"content":"        Name: John Doe","lastModifiedDate":"2021-11-07"},{"lineNumber":481,"author":{"gitId":"CrimsonTitan79"},"content":"        H/P: 87654321","lastModifiedDate":"2021-11-07"},{"lineNumber":482,"author":{"gitId":"CrimsonTitan79"},"content":"        Email: john.doe@gmail.com","lastModifiedDate":"2021-11-07"},{"lineNumber":483,"author":{"gitId":"CrimsonTitan79"},"content":"        Address: John Street, Block 1234, #01-01","lastModifiedDate":"2021-11-07"},{"lineNumber":484,"author":{"gitId":"CrimsonTitan79"},"content":"        ```","lastModifiedDate":"2021-11-07"},{"lineNumber":485,"author":{"gitId":"CrimsonTitan79"},"content":"2. Add a patient to the patient list with some details filled.","lastModifiedDate":"2021-11-07"},{"lineNumber":486,"author":{"gitId":"CrimsonTitan79"},"content":"    1. Test case: `add e/jimbob@hotmail.com n/jIm boB` \u003cbr\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":487,"author":{"gitId":"CrimsonTitan79"},"content":"       Expected:","lastModifiedDate":"2021-11-07"},{"lineNumber":488,"author":{"gitId":"CrimsonTitan79"},"content":"        ```","lastModifiedDate":"2021-11-07"},{"lineNumber":489,"author":{"gitId":"CrimsonTitan79"},"content":"        Added patient with Patient ID: 2","lastModifiedDate":"2021-11-07"},{"lineNumber":490,"author":{"gitId":"CrimsonTitan79"},"content":"        IC: ","lastModifiedDate":"2021-11-07"},{"lineNumber":491,"author":{"gitId":"CrimsonTitan79"},"content":"        Name: Jim Bob","lastModifiedDate":"2021-11-07"},{"lineNumber":492,"author":{"gitId":"CrimsonTitan79"},"content":"        H/P: ","lastModifiedDate":"2021-11-07"},{"lineNumber":493,"author":{"gitId":"CrimsonTitan79"},"content":"        Email: jimbob@hotmail.com","lastModifiedDate":"2021-11-07"},{"lineNumber":494,"author":{"gitId":"CrimsonTitan79"},"content":"        Address: ","lastModifiedDate":"2021-11-07"},{"lineNumber":495,"author":{"gitId":"CrimsonTitan79"},"content":"        ```","lastModifiedDate":"2021-11-07"},{"lineNumber":496,"author":{"gitId":"CrimsonTitan79"},"content":"    2. Test case `add n/Raven Darkholme i/S8912345A` \u003cbr\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":497,"author":{"gitId":"CrimsonTitan79"},"content":"       Expected:","lastModifiedDate":"2021-11-07"},{"lineNumber":498,"author":{"gitId":"CrimsonTitan79"},"content":"        ```","lastModifiedDate":"2021-11-07"},{"lineNumber":499,"author":{"gitId":"CrimsonTitan79"},"content":"        Added patient with Patient ID: 3","lastModifiedDate":"2021-11-07"},{"lineNumber":500,"author":{"gitId":"CrimsonTitan79"},"content":"        IC: S8912345A","lastModifiedDate":"2021-11-07"},{"lineNumber":501,"author":{"gitId":"CrimsonTitan79"},"content":"        Name: Raven Darkholme","lastModifiedDate":"2021-11-07"},{"lineNumber":502,"author":{"gitId":"CrimsonTitan79"},"content":"        H/P: ","lastModifiedDate":"2021-11-07"},{"lineNumber":503,"author":{"gitId":"CrimsonTitan79"},"content":"        Email: ","lastModifiedDate":"2021-11-07"},{"lineNumber":504,"author":{"gitId":"CrimsonTitan79"},"content":"        Address: ","lastModifiedDate":"2021-11-07"},{"lineNumber":505,"author":{"gitId":"CrimsonTitan79"},"content":"        ```","lastModifiedDate":"2021-11-07"},{"lineNumber":506,"author":{"gitId":"CrimsonTitan79"},"content":"3. Add a patient using an invalid attribute specifier","lastModifiedDate":"2021-11-07"},{"lineNumber":507,"author":{"gitId":"CrimsonTitan79"},"content":"    1. Test case (Invalid command): `add h/` \u003cbr\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":508,"author":{"gitId":"CrimsonTitan79"},"content":"       Expected: `\"h/\" is not a valid attribute specifier`","lastModifiedDate":"2021-11-07"},{"lineNumber":509,"author":{"gitId":"CrimsonTitan79"},"content":"4. Add a patient with an NRIC that already exists in MedBot","lastModifiedDate":"2021-11-07"},{"lineNumber":510,"author":{"gitId":"CrimsonTitan79"},"content":"    1. Test case (Invalid command): `add i/S7812345X` \u003cbr\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":511,"author":{"gitId":"CrimsonTitan79"},"content":"       Expected: `The patient with IC S7812345X is already in the record.`","lastModifiedDate":"2021-11-07"},{"lineNumber":512,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":513,"author":{"gitId":"CrimsonTitan79"},"content":"#### Delete a patient","lastModifiedDate":"2021-11-07"},{"lineNumber":514,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":515,"author":{"gitId":"CrimsonTitan79"},"content":"1. Delete an existing patient from the list.","lastModifiedDate":"2021-11-07"},{"lineNumber":516,"author":{"gitId":"CrimsonTitan79"},"content":"    1. Test case: `delete 3`\u003cbr\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":517,"author":{"gitId":"CrimsonTitan79"},"content":"       Expected: `Patient with id 3 deleted from system.`","lastModifiedDate":"2021-11-07"},{"lineNumber":518,"author":{"gitId":"CrimsonTitan79"},"content":"2. Delete a non-existent patient from the list.","lastModifiedDate":"2021-11-07"},{"lineNumber":519,"author":{"gitId":"CrimsonTitan79"},"content":"    1. Test case: `delete 4`\u003cbr\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":520,"author":{"gitId":"CrimsonTitan79"},"content":"       Expected: `No Patient with ID 4 found.`","lastModifiedDate":"2021-11-07"},{"lineNumber":521,"author":{"gitId":"CrimsonTitan79"},"content":"3. Invalid usage of `delete`","lastModifiedDate":"2021-11-07"},{"lineNumber":522,"author":{"gitId":"CrimsonTitan79"},"content":"    1. Test case (Invalid command): `delete asd`\u003cbr\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":523,"author":{"gitId":"CrimsonTitan79"},"content":"       Expected: `ID not specified or not a number.`","lastModifiedDate":"2021-11-07"},{"lineNumber":524,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":525,"author":{"gitId":"CrimsonTitan79"},"content":"#### View a patient\u0027s information","lastModifiedDate":"2021-11-07"},{"lineNumber":526,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":527,"author":{"gitId":"CrimsonTitan79"},"content":"1. View an existing patient\u0027s information.","lastModifiedDate":"2021-11-07"},{"lineNumber":528,"author":{"gitId":"CrimsonTitan79"},"content":"    1. Test case: `view 2` \u003cbr\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":529,"author":{"gitId":"CrimsonTitan79"},"content":"       Expected:","lastModifiedDate":"2021-11-07"},{"lineNumber":530,"author":{"gitId":"CrimsonTitan79"},"content":"        ```","lastModifiedDate":"2021-11-07"},{"lineNumber":531,"author":{"gitId":"CrimsonTitan79"},"content":"        Here\u0027s the requested patient:","lastModifiedDate":"2021-11-07"},{"lineNumber":532,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":533,"author":{"gitId":"CrimsonTitan79"},"content":"        Patient ID: 2","lastModifiedDate":"2021-11-07"},{"lineNumber":534,"author":{"gitId":"CrimsonTitan79"},"content":"        IC: ","lastModifiedDate":"2021-11-07"},{"lineNumber":535,"author":{"gitId":"CrimsonTitan79"},"content":"        Name: Jim Bob","lastModifiedDate":"2021-11-07"},{"lineNumber":536,"author":{"gitId":"CrimsonTitan79"},"content":"        H/P: ","lastModifiedDate":"2021-11-07"},{"lineNumber":537,"author":{"gitId":"CrimsonTitan79"},"content":"        Email: jimbob@hotmail.com","lastModifiedDate":"2021-11-07"},{"lineNumber":538,"author":{"gitId":"CrimsonTitan79"},"content":"        Address: ","lastModifiedDate":"2021-11-07"},{"lineNumber":539,"author":{"gitId":"CrimsonTitan79"},"content":"        ```","lastModifiedDate":"2021-11-07"},{"lineNumber":540,"author":{"gitId":"CrimsonTitan79"},"content":"2. View a non-existent patient\u0027s information.","lastModifiedDate":"2021-11-07"},{"lineNumber":541,"author":{"gitId":"CrimsonTitan79"},"content":"    1. Test case: `view 89` \u003cbr\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":542,"author":{"gitId":"CrimsonTitan79"},"content":"       Expected: `No Patient with ID 89 found.`","lastModifiedDate":"2021-11-07"},{"lineNumber":543,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":544,"author":{"gitId":"CrimsonTitan79"},"content":"#### Hide a patient","lastModifiedDate":"2021-11-07"},{"lineNumber":545,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":546,"author":{"gitId":"CrimsonTitan79"},"content":"* Refer to [this](#list-information-of-all-current-patients) to understand how `hide` affects `list`.","lastModifiedDate":"2021-11-07"},{"lineNumber":547,"author":{"gitId":"CrimsonTitan79"},"content":"* Feel free to test `hide`, `show` and `list` together.","lastModifiedDate":"2021-11-07"},{"lineNumber":548,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":549,"author":{"gitId":"CrimsonTitan79"},"content":"1. Hide a patient in the list.","lastModifiedDate":"2021-11-07"},{"lineNumber":550,"author":{"gitId":"CrimsonTitan79"},"content":"    1. Test case: `hide 2`\u003cbr\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":551,"author":{"gitId":"CrimsonTitan79"},"content":"       Expected: `The patient with ID: 2 is now hidden.`","lastModifiedDate":"2021-11-07"},{"lineNumber":552,"author":{"gitId":"CrimsonTitan79"},"content":"    2. Test case: `hide 1`\u003cbr\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":553,"author":{"gitId":"CrimsonTitan79"},"content":"       Expected: `The patient with ID: 1 is now hidden.`","lastModifiedDate":"2021-11-07"},{"lineNumber":554,"author":{"gitId":"CrimsonTitan79"},"content":"2. Invalid usage of `hide`","lastModifiedDate":"2021-11-07"},{"lineNumber":555,"author":{"gitId":"CrimsonTitan79"},"content":"    1. Test case (Invalid command): `hide ab`\u003cbr\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":556,"author":{"gitId":"CrimsonTitan79"},"content":"       Expected: `ID not specified or not a number.`","lastModifiedDate":"2021-11-07"},{"lineNumber":557,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":558,"author":{"gitId":"CrimsonTitan79"},"content":"#### Show a patient","lastModifiedDate":"2021-11-07"},{"lineNumber":559,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":560,"author":{"gitId":"CrimsonTitan79"},"content":"* Refer to [this](#list-information-of-all-current-patients) to understand how `show` affects `list`","lastModifiedDate":"2021-11-07"},{"lineNumber":561,"author":{"gitId":"CrimsonTitan79"},"content":"* Feel free to test `hide`, `show` and `list` together.","lastModifiedDate":"2021-11-07"},{"lineNumber":562,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":563,"author":{"gitId":"CrimsonTitan79"},"content":"1. Show a previously hidden patient in the list.","lastModifiedDate":"2021-11-07"},{"lineNumber":564,"author":{"gitId":"CrimsonTitan79"},"content":"    1. Test case: `show 1`\u003cbr\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":565,"author":{"gitId":"CrimsonTitan79"},"content":"       Expected: `The patient with ID: 1 is now not hidden.`","lastModifiedDate":"2021-11-07"},{"lineNumber":566,"author":{"gitId":"CrimsonTitan79"},"content":"2. Invalid usage of `show`","lastModifiedDate":"2021-11-07"},{"lineNumber":567,"author":{"gitId":"CrimsonTitan79"},"content":"    1. Test case: `show ab`\u003cbr\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":568,"author":{"gitId":"CrimsonTitan79"},"content":"       Expected: `ID not specified or not a number.`","lastModifiedDate":"2021-11-07"},{"lineNumber":569,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":570,"author":{"gitId":"CrimsonTitan79"},"content":"#### List information of all current patients","lastModifiedDate":"2021-11-07"},{"lineNumber":571,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":572,"author":{"gitId":"CrimsonTitan79"},"content":"* `list` shows all non-hidden patients.","lastModifiedDate":"2021-11-07"},{"lineNumber":573,"author":{"gitId":"CrimsonTitan79"},"content":"* `list -h` shows all hidden patients.","lastModifiedDate":"2021-11-07"},{"lineNumber":574,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":575,"author":{"gitId":"CrimsonTitan79"},"content":"1. List all non-hidden patients","lastModifiedDate":"2021-11-07"},{"lineNumber":576,"author":{"gitId":"CrimsonTitan79"},"content":"    1. Test case: `list`","lastModifiedDate":"2021-11-08"},{"lineNumber":577,"author":{"gitId":"CrimsonTitan79"},"content":"    \u003cbr\u003eExpected:","lastModifiedDate":"2021-11-08"},{"lineNumber":578,"author":{"gitId":"CrimsonTitan79"},"content":"    ","lastModifiedDate":"2021-11-08"},{"lineNumber":579,"author":{"gitId":"CrimsonTitan79"},"content":"        ```","lastModifiedDate":"2021-11-07"},{"lineNumber":580,"author":{"gitId":"CrimsonTitan79"},"content":"        Here is a list of all patients:","lastModifiedDate":"2021-11-07"},{"lineNumber":581,"author":{"gitId":"CrimsonTitan79"},"content":"        For full details of each patient, please use the command \"view PATIENT_ID\"","lastModifiedDate":"2021-11-07"},{"lineNumber":582,"author":{"gitId":"CrimsonTitan79"},"content":"        ----------------------------------------------------------------------------------------------------- ","lastModifiedDate":"2021-11-07"},{"lineNumber":583,"author":{"gitId":"CrimsonTitan79"},"content":"        |  ID  | IC Number |         Name         | Phone No. |        Email         |       Address        | ","lastModifiedDate":"2021-11-07"},{"lineNumber":584,"author":{"gitId":"CrimsonTitan79"},"content":"        ----------------------------------------------------------------------------------------------------- ","lastModifiedDate":"2021-11-07"},{"lineNumber":585,"author":{"gitId":"CrimsonTitan79"},"content":"        | 1    | S7812345X | John Doe             | 87654321  | john.doe@gmail.com   | John Street, Bloc... | ","lastModifiedDate":"2021-11-07"},{"lineNumber":586,"author":{"gitId":"CrimsonTitan79"},"content":"        ----------------------------------------------------------------------------------------------------- ","lastModifiedDate":"2021-11-07"},{"lineNumber":587,"author":{"gitId":"CrimsonTitan79"},"content":"        ```","lastModifiedDate":"2021-11-07"},{"lineNumber":588,"author":{"gitId":"CrimsonTitan79"},"content":"2. List all hidden patients","lastModifiedDate":"2021-11-07"},{"lineNumber":589,"author":{"gitId":"CrimsonTitan79"},"content":"    1. Test case: `list -h`","lastModifiedDate":"2021-11-08"},{"lineNumber":590,"author":{"gitId":"CrimsonTitan79"},"content":"    \u003cbr\u003eExpected:","lastModifiedDate":"2021-11-08"},{"lineNumber":591,"author":{"gitId":"CrimsonTitan79"},"content":"     ","lastModifiedDate":"2021-11-08"},{"lineNumber":592,"author":{"gitId":"CrimsonTitan79"},"content":"        ```","lastModifiedDate":"2021-11-07"},{"lineNumber":593,"author":{"gitId":"CrimsonTitan79"},"content":"        Here is a list of all patients:","lastModifiedDate":"2021-11-07"},{"lineNumber":594,"author":{"gitId":"CrimsonTitan79"},"content":"        For full details of each patient, please use the command \"view PATIENT_ID\"","lastModifiedDate":"2021-11-07"},{"lineNumber":595,"author":{"gitId":"CrimsonTitan79"},"content":"        ----------------------------------------------------------------------------------------------------- ","lastModifiedDate":"2021-11-07"},{"lineNumber":596,"author":{"gitId":"CrimsonTitan79"},"content":"        |  ID  | IC Number |         Name         | Phone No. |        Email         |       Address        | ","lastModifiedDate":"2021-11-07"},{"lineNumber":597,"author":{"gitId":"CrimsonTitan79"},"content":"        ----------------------------------------------------------------------------------------------------- ","lastModifiedDate":"2021-11-07"},{"lineNumber":598,"author":{"gitId":"CrimsonTitan79"},"content":"        | 2    |           | Jim Bob              |           | jimbob@hotmail.com   |                      | ","lastModifiedDate":"2021-11-07"},{"lineNumber":599,"author":{"gitId":"CrimsonTitan79"},"content":"        ----------------------------------------------------------------------------------------------------- ","lastModifiedDate":"2021-11-07"},{"lineNumber":600,"author":{"gitId":"CrimsonTitan79"},"content":"        ```","lastModifiedDate":"2021-11-07"},{"lineNumber":601,"author":{"gitId":"CrimsonTitan79"},"content":"3. Invalid usage of `list`","lastModifiedDate":"2021-11-07"},{"lineNumber":602,"author":{"gitId":"CrimsonTitan79"},"content":"    1. Test case: `list -l`\u003cbr\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":603,"author":{"gitId":"CrimsonTitan79"},"content":"       Expected: `Parameter type specified is not valid.`","lastModifiedDate":"2021-11-07"},{"lineNumber":604,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":605,"author":{"gitId":"CrimsonTitan79"},"content":"#### Edit information of a patient","lastModifiedDate":"2021-11-07"},{"lineNumber":606,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":607,"author":{"gitId":"CrimsonTitan79"},"content":"1. Edit an existing patient\u0027s personal information, selected by ID.","lastModifiedDate":"2021-11-07"},{"lineNumber":608,"author":{"gitId":"CrimsonTitan79"},"content":"    1. Test case: `edit 1 p/99999999 n/John Xavier Doe`\u003cbr\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":609,"author":{"gitId":"CrimsonTitan79"},"content":"       Expected:","lastModifiedDate":"2021-11-07"},{"lineNumber":610,"author":{"gitId":"CrimsonTitan79"},"content":"        ```","lastModifiedDate":"2021-11-07"},{"lineNumber":611,"author":{"gitId":"CrimsonTitan79"},"content":"        The information of patient with ID 1 has been edited to:","lastModifiedDate":"2021-11-07"},{"lineNumber":612,"author":{"gitId":"CrimsonTitan79"},"content":"       ","lastModifiedDate":"2021-11-07"},{"lineNumber":613,"author":{"gitId":"CrimsonTitan79"},"content":"        Patient ID: 1","lastModifiedDate":"2021-11-07"},{"lineNumber":614,"author":{"gitId":"CrimsonTitan79"},"content":"        IC: S7812345X","lastModifiedDate":"2021-11-07"},{"lineNumber":615,"author":{"gitId":"CrimsonTitan79"},"content":"        Name: John Xavier Doe","lastModifiedDate":"2021-11-07"},{"lineNumber":616,"author":{"gitId":"CrimsonTitan79"},"content":"        H/P: 99999999","lastModifiedDate":"2021-11-07"},{"lineNumber":617,"author":{"gitId":"CrimsonTitan79"},"content":"        Email: john.doe@gmail.com","lastModifiedDate":"2021-11-07"},{"lineNumber":618,"author":{"gitId":"CrimsonTitan79"},"content":"        Address: John Street, Block 1234, #01-01","lastModifiedDate":"2021-11-07"},{"lineNumber":619,"author":{"gitId":"CrimsonTitan79"},"content":"        ```","lastModifiedDate":"2021-11-07"},{"lineNumber":620,"author":{"gitId":"CrimsonTitan79"},"content":"2. Edit a non-existent patient\u0027s personal information","lastModifiedDate":"2021-11-07"},{"lineNumber":621,"author":{"gitId":"CrimsonTitan79"},"content":"    1. Test case: `edit 898 n/BOb`\u003cbr\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":622,"author":{"gitId":"CrimsonTitan79"},"content":"       Expected: `No Patient with ID 898 found.`","lastModifiedDate":"2021-11-07"},{"lineNumber":623,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":624,"author":{"gitId":"CrimsonTitan79"},"content":"#### Find patients based on attributes","lastModifiedDate":"2021-11-07"},{"lineNumber":625,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":626,"author":{"gitId":"CrimsonTitan79"},"content":"1. Search for non-hidden patients with NRIC containing \"12345\"","lastModifiedDate":"2021-11-07"},{"lineNumber":627,"author":{"gitId":"CrimsonTitan79"},"content":"    1. Test case: `find i/12345`\u003cbr\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":628,"author":{"gitId":"CrimsonTitan79"},"content":"       Expected:","lastModifiedDate":"2021-11-07"},{"lineNumber":629,"author":{"gitId":"CrimsonTitan79"},"content":"        ```","lastModifiedDate":"2021-11-07"},{"lineNumber":630,"author":{"gitId":"CrimsonTitan79"},"content":"        Here is a list of all patients:","lastModifiedDate":"2021-11-07"},{"lineNumber":631,"author":{"gitId":"CrimsonTitan79"},"content":"        For full details of each patient, please use the command \"view PATIENT_ID\"","lastModifiedDate":"2021-11-07"},{"lineNumber":632,"author":{"gitId":"CrimsonTitan79"},"content":"        ----------------------------------------------------------------------------------------------------- ","lastModifiedDate":"2021-11-07"},{"lineNumber":633,"author":{"gitId":"CrimsonTitan79"},"content":"        |  ID  | IC Number |         Name         | Phone No. |        Email         |       Address        |","lastModifiedDate":"2021-11-07"},{"lineNumber":634,"author":{"gitId":"CrimsonTitan79"},"content":"        ----------------------------------------------------------------------------------------------------- ","lastModifiedDate":"2021-11-07"},{"lineNumber":635,"author":{"gitId":"CrimsonTitan79"},"content":"        | 1    | S7812345X | John Xavier Doe      | 99999999  | john.doe@gmail.com   | John Street, Bloc... |","lastModifiedDate":"2021-11-07"},{"lineNumber":636,"author":{"gitId":"CrimsonTitan79"},"content":"        ----------------------------------------------------------------------------------------------------- ","lastModifiedDate":"2021-11-07"},{"lineNumber":637,"author":{"gitId":"CrimsonTitan79"},"content":"        ```","lastModifiedDate":"2021-11-07"},{"lineNumber":638,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":639,"author":{"gitId":"CrimsonTitan79"},"content":"2. Invalid usage of `find`","lastModifiedDate":"2021-11-07"},{"lineNumber":640,"author":{"gitId":"CrimsonTitan79"},"content":"    2. Test case: `find g/`\u003cbr\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":641,"author":{"gitId":"CrimsonTitan79"},"content":"       Expected: `The specifier g/ is invalid.`","lastModifiedDate":"2021-11-07"},{"lineNumber":642,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":643,"author":{"gitId":"CrimsonTitan79"},"content":"### Scheduler Commands","lastModifiedDate":"2021-11-07"},{"lineNumber":644,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":645,"author":{"gitId":"CrimsonTitan79"},"content":"#### Prerequisites","lastModifiedDate":"2021-11-07"},{"lineNumber":646,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":647,"author":{"gitId":"CrimsonTitan79"},"content":"* Run the following commands before running the `Scheduler` commands to populate the patient and medical staff lists","lastModifiedDate":"2021-11-07"},{"lineNumber":648,"author":{"gitId":"CrimsonTitan79"},"content":"  with more data:","lastModifiedDate":"2021-11-07"},{"lineNumber":649,"author":{"gitId":"CrimsonTitan79"},"content":"    1. `switch 1`","lastModifiedDate":"2021-11-07"},{"lineNumber":650,"author":{"gitId":"CrimsonTitan79"},"content":"    2. `add n/Sasha Alexander i/S8367812K p/91238765 a/Mauville City 2nd Street`","lastModifiedDate":"2021-11-07"},{"lineNumber":651,"author":{"gitId":"CrimsonTitan79"},"content":"    3. `switch 2`","lastModifiedDate":"2021-11-07"},{"lineNumber":652,"author":{"gitId":"CrimsonTitan79"},"content":"    4. `add n/Doctor One i/S8754321B p/81819191 a/American Gardens Building West 81st Street e/doctorone@hospital.net`","lastModifiedDate":"2021-11-07"},{"lineNumber":653,"author":{"gitId":"CrimsonTitan79"},"content":"    5. `add n/Nurse One i/S9171234D p/91234566 a/Petalburg City Route 103 e/nurseone@hospital.net`","lastModifiedDate":"2021-11-07"},{"lineNumber":654,"author":{"gitId":"CrimsonTitan79"},"content":"    6. `switch 3`","lastModifiedDate":"2021-11-07"},{"lineNumber":655,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":656,"author":{"gitId":"CrimsonTitan79"},"content":"#### Adding an appointment","lastModifiedDate":"2021-11-07"},{"lineNumber":657,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":658,"author":{"gitId":"CrimsonTitan79"},"content":"* Adds an appointment to the scheduler list. MedBot will check if there are any clashes in the appointments and display","lastModifiedDate":"2021-11-07"},{"lineNumber":659,"author":{"gitId":"CrimsonTitan79"},"content":"  and error message if there are any.","lastModifiedDate":"2021-11-07"},{"lineNumber":660,"author":{"gitId":"CrimsonTitan79"},"content":"* The format for DATE_TIME is DDMMYY hhmm. I.e. 9 February 2021, 0800HRS should be written as 090221 0800","lastModifiedDate":"2021-11-07"},{"lineNumber":661,"author":{"gitId":"CrimsonTitan79"},"content":"* Do note that the appointments are managed at an hourly basis. For example, any appointments set to any time between","lastModifiedDate":"2021-11-07"},{"lineNumber":662,"author":{"gitId":"CrimsonTitan79"},"content":"  0800HRS and 0859HRS will be treated as an appointment from 0800HRS to 0859HRS. No subsequent appointment can then be","lastModifiedDate":"2021-11-07"},{"lineNumber":663,"author":{"gitId":"CrimsonTitan79"},"content":"  scheduled for either the patient and the medical staff during that window.","lastModifiedDate":"2021-11-07"},{"lineNumber":664,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":665,"author":{"gitId":"CrimsonTitan79"},"content":"1. Add a valid appointment with no clashes","lastModifiedDate":"2021-11-07"},{"lineNumber":666,"author":{"gitId":"CrimsonTitan79"},"content":"    1. Test case: `add p/1 s/1 d/011221 0900`\u003cbr\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":667,"author":{"gitId":"CrimsonTitan79"},"content":"       Expected:","lastModifiedDate":"2021-11-07"},{"lineNumber":668,"author":{"gitId":"CrimsonTitan79"},"content":"        ```","lastModifiedDate":"2021-11-07"},{"lineNumber":669,"author":{"gitId":"CrimsonTitan79"},"content":"        Added appointment with Appointment Id: 1","lastModifiedDate":"2021-11-07"},{"lineNumber":670,"author":{"gitId":"CrimsonTitan79"},"content":"        Patient ID: 1","lastModifiedDate":"2021-11-07"},{"lineNumber":671,"author":{"gitId":"CrimsonTitan79"},"content":"        Staff ID: 1","lastModifiedDate":"2021-11-07"},{"lineNumber":672,"author":{"gitId":"CrimsonTitan79"},"content":"        Date/Time: 01 Dec 21 0900HRS","lastModifiedDate":"2021-11-07"},{"lineNumber":673,"author":{"gitId":"CrimsonTitan79"},"content":"        ```","lastModifiedDate":"2021-11-07"},{"lineNumber":674,"author":{"gitId":"CrimsonTitan79"},"content":"    2. Test case: `add p/1 s/2 d/011221 1000`\u003cbr\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":675,"author":{"gitId":"CrimsonTitan79"},"content":"       Expected:","lastModifiedDate":"2021-11-07"},{"lineNumber":676,"author":{"gitId":"CrimsonTitan79"},"content":"        ```","lastModifiedDate":"2021-11-07"},{"lineNumber":677,"author":{"gitId":"CrimsonTitan79"},"content":"        Added appointment with Appointment Id: 2","lastModifiedDate":"2021-11-07"},{"lineNumber":678,"author":{"gitId":"CrimsonTitan79"},"content":"        Patient ID: 1","lastModifiedDate":"2021-11-07"},{"lineNumber":679,"author":{"gitId":"CrimsonTitan79"},"content":"        Staff ID: 2","lastModifiedDate":"2021-11-07"},{"lineNumber":680,"author":{"gitId":"CrimsonTitan79"},"content":"        Date/Time: 01 Dec 21 1000HRS","lastModifiedDate":"2021-11-07"},{"lineNumber":681,"author":{"gitId":"CrimsonTitan79"},"content":"        ```","lastModifiedDate":"2021-11-07"},{"lineNumber":682,"author":{"gitId":"CrimsonTitan79"},"content":"2. Valid appointment, but the time is corrected to the hour","lastModifiedDate":"2021-11-07"},{"lineNumber":683,"author":{"gitId":"CrimsonTitan79"},"content":"    1. Test case: `add p/1 s/2 d/011221 1105`\u003cbr\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":684,"author":{"gitId":"CrimsonTitan79"},"content":"       Expected:","lastModifiedDate":"2021-11-07"},{"lineNumber":685,"author":{"gitId":"CrimsonTitan79"},"content":"       ```","lastModifiedDate":"2021-11-07"},{"lineNumber":686,"author":{"gitId":"CrimsonTitan79"},"content":"       Added appointment with Appointment Id: 3","lastModifiedDate":"2021-11-07"},{"lineNumber":687,"author":{"gitId":"CrimsonTitan79"},"content":"       Patient ID: 2","lastModifiedDate":"2021-11-07"},{"lineNumber":688,"author":{"gitId":"CrimsonTitan79"},"content":"       Staff ID: 2","lastModifiedDate":"2021-11-07"},{"lineNumber":689,"author":{"gitId":"CrimsonTitan79"},"content":"       Date/Time: 01 Dec 21 1100HRS","lastModifiedDate":"2021-11-07"},{"lineNumber":690,"author":{"gitId":"CrimsonTitan79"},"content":"       ```","lastModifiedDate":"2021-11-07"},{"lineNumber":691,"author":{"gitId":"CrimsonTitan79"},"content":"3. Adding a clashing appointment","lastModifiedDate":"2021-11-07"},{"lineNumber":692,"author":{"gitId":"CrimsonTitan79"},"content":"    1. Test case (Invalid): `add p/2 s/1 d/011221 0900`\u003cbr\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":693,"author":{"gitId":"CrimsonTitan79"},"content":"       Expected: `Staff unavailable, appointment 1 at that time. `","lastModifiedDate":"2021-11-07"},{"lineNumber":694,"author":{"gitId":"CrimsonTitan79"},"content":"4. Adding an appointment with invalid date/time format","lastModifiedDate":"2021-11-07"},{"lineNumber":695,"author":{"gitId":"CrimsonTitan79"},"content":"    1. Test case (Invalid): `add p/1 s/2 d/01122123`\u003cbr\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":696,"author":{"gitId":"CrimsonTitan79"},"content":"       Expected: `Incorrect Date/Time format.`","lastModifiedDate":"2021-11-07"},{"lineNumber":697,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":698,"author":{"gitId":"CrimsonTitan79"},"content":"#### Delete an appointment","lastModifiedDate":"2021-11-07"},{"lineNumber":699,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":700,"author":{"gitId":"CrimsonTitan79"},"content":"1. Delete an existing appointment from the scheduler.","lastModifiedDate":"2021-11-07"},{"lineNumber":701,"author":{"gitId":"CrimsonTitan79"},"content":"    1. Test case: `delete 2`\u003cbr\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":702,"author":{"gitId":"CrimsonTitan79"},"content":"       Expected: `deleted appointment with Id: 2`","lastModifiedDate":"2021-11-07"},{"lineNumber":703,"author":{"gitId":"CrimsonTitan79"},"content":"2. Delete a non-existent appointment from the scheduler.","lastModifiedDate":"2021-11-07"},{"lineNumber":704,"author":{"gitId":"CrimsonTitan79"},"content":"    1. Test case: `delete 89`\u003cbr\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":705,"author":{"gitId":"CrimsonTitan79"},"content":"       Expected: `No appointment with ID 89 found.`","lastModifiedDate":"2021-11-07"},{"lineNumber":706,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":707,"author":{"gitId":"CrimsonTitan79"},"content":"#### Editing an appointment\u0027s information","lastModifiedDate":"2021-11-07"},{"lineNumber":708,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":709,"author":{"gitId":"CrimsonTitan79"},"content":"1. Edit an existing appointment\u0027s information","lastModifiedDate":"2021-11-07"},{"lineNumber":710,"author":{"gitId":"CrimsonTitan79"},"content":"    1. Test case: `edit 3 s/1`\u003cbr\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":711,"author":{"gitId":"CrimsonTitan79"},"content":"       Expected:","lastModifiedDate":"2021-11-07"},{"lineNumber":712,"author":{"gitId":"CrimsonTitan79"},"content":"        ```","lastModifiedDate":"2021-11-07"},{"lineNumber":713,"author":{"gitId":"CrimsonTitan79"},"content":"        Appointment 3 now has the following details:","lastModifiedDate":"2021-11-07"},{"lineNumber":714,"author":{"gitId":"CrimsonTitan79"},"content":"       ","lastModifiedDate":"2021-11-07"},{"lineNumber":715,"author":{"gitId":"CrimsonTitan79"},"content":"        Patient ID: 2","lastModifiedDate":"2021-11-07"},{"lineNumber":716,"author":{"gitId":"CrimsonTitan79"},"content":"        Staff ID: 1","lastModifiedDate":"2021-11-07"},{"lineNumber":717,"author":{"gitId":"CrimsonTitan79"},"content":"        Date/Time: 01 Dec 21 1100HRS","lastModifiedDate":"2021-11-07"},{"lineNumber":718,"author":{"gitId":"CrimsonTitan79"},"content":"        ```","lastModifiedDate":"2021-11-07"},{"lineNumber":719,"author":{"gitId":"CrimsonTitan79"},"content":"2. Edit an appointment to clash with another appointment","lastModifiedDate":"2021-11-07"},{"lineNumber":720,"author":{"gitId":"CrimsonTitan79"},"content":"    1. Test case (Invalid): `edit 3 d/011221 0900`\u003cbr\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":721,"author":{"gitId":"CrimsonTitan79"},"content":"       Expected: `Staff unavailable, appointment 1 at that time.`","lastModifiedDate":"2021-11-07"},{"lineNumber":722,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":723,"author":{"gitId":"CrimsonTitan79"},"content":"#### Viewing an appointment\u0027s information","lastModifiedDate":"2021-11-07"},{"lineNumber":724,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":725,"author":{"gitId":"CrimsonTitan79"},"content":"1. View an existing appointment\u0027s information","lastModifiedDate":"2021-11-07"},{"lineNumber":726,"author":{"gitId":"CrimsonTitan79"},"content":"    1. Test case: `view 1`\u003cbr\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":727,"author":{"gitId":"CrimsonTitan79"},"content":"       Expected:","lastModifiedDate":"2021-11-07"},{"lineNumber":728,"author":{"gitId":"CrimsonTitan79"},"content":"        ```","lastModifiedDate":"2021-11-07"},{"lineNumber":729,"author":{"gitId":"CrimsonTitan79"},"content":"        Appointment Id: 1","lastModifiedDate":"2021-11-07"},{"lineNumber":730,"author":{"gitId":"CrimsonTitan79"},"content":"        Patient ID: 1","lastModifiedDate":"2021-11-07"},{"lineNumber":731,"author":{"gitId":"CrimsonTitan79"},"content":"        Staff ID: 1","lastModifiedDate":"2021-11-07"},{"lineNumber":732,"author":{"gitId":"CrimsonTitan79"},"content":"        Date/Time: 01 Dec 21 0900HRS","lastModifiedDate":"2021-11-07"},{"lineNumber":733,"author":{"gitId":"CrimsonTitan79"},"content":"        ```","lastModifiedDate":"2021-11-07"},{"lineNumber":734,"author":{"gitId":"CrimsonTitan79"},"content":"2. View a non-existing appointment\u0027s information","lastModifiedDate":"2021-11-07"},{"lineNumber":735,"author":{"gitId":"CrimsonTitan79"},"content":"    1. Test case (Invalid): `view 9`\u003cbr\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":736,"author":{"gitId":"CrimsonTitan79"},"content":"       Expected: `No appointment with ID 9 found.`","lastModifiedDate":"2021-11-07"},{"lineNumber":737,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":738,"author":{"gitId":"CrimsonTitan79"},"content":"#### Listing information of all appointments","lastModifiedDate":"2021-11-07"},{"lineNumber":739,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":740,"author":{"gitId":"CrimsonTitan79"},"content":"1. List the information of all appointments, including those of hidden patients and medical staff.","lastModifiedDate":"2021-11-07"},{"lineNumber":741,"author":{"gitId":"CrimsonTitan79"},"content":"    1. Test case: `list`","lastModifiedDate":"2021-11-07"},{"lineNumber":742,"author":{"gitId":"CrimsonTitan79"},"content":"       \u003cbr\u003eExpected:","lastModifiedDate":"2021-11-08"},{"lineNumber":743,"author":{"gitId":"CrimsonTitan79"},"content":"        ```","lastModifiedDate":"2021-11-07"},{"lineNumber":744,"author":{"gitId":"CrimsonTitan79"},"content":"       Here is a list of all appointments:","lastModifiedDate":"2021-11-07"},{"lineNumber":745,"author":{"gitId":"CrimsonTitan79"},"content":"       -------------------------------------------------------------------------------------------------- ","lastModifiedDate":"2021-11-07"},{"lineNumber":746,"author":{"gitId":"CrimsonTitan79"},"content":"       |  ID  |     Date/Time     | Patient ID |     Patient Name     | Staff ID  |      Staff Name       |","lastModifiedDate":"2021-11-07"},{"lineNumber":747,"author":{"gitId":"CrimsonTitan79"},"content":"       -------------------------------------------------------------------------------------------------- ","lastModifiedDate":"2021-11-07"},{"lineNumber":748,"author":{"gitId":"CrimsonTitan79"},"content":"       | 1    | 01 Dec 21 0900HRS | 1          | John Xavier Doe      | 1        | Doctor One           |","lastModifiedDate":"2021-11-07"},{"lineNumber":749,"author":{"gitId":"CrimsonTitan79"},"content":"       | 3    | 01 Dec 21 1100HRS | 2          | Jim Bob              | 1        | Doctor One           |","lastModifiedDate":"2021-11-07"},{"lineNumber":750,"author":{"gitId":"CrimsonTitan79"},"content":"       -------------------------------------------------------------------------------------------------- ","lastModifiedDate":"2021-11-07"},{"lineNumber":751,"author":{"gitId":"CrimsonTitan79"},"content":"        ```","lastModifiedDate":"2021-11-07"},{"lineNumber":752,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":753,"author":{"gitId":"CrimsonTitan79"},"content":"#### Find appointments","lastModifiedDate":"2021-11-08"},{"lineNumber":754,"author":{"gitId":"CrimsonTitan79"},"content":"* Prerequisites:","lastModifiedDate":"2021-11-08"},{"lineNumber":755,"author":{"gitId":"CrimsonTitan79"},"content":"   * Execute the following commands first to populate the `Scheduler` with more data:","lastModifiedDate":"2021-11-08"},{"lineNumber":756,"author":{"gitId":"CrimsonTitan79"},"content":"      1. `switch 3`","lastModifiedDate":"2021-11-08"},{"lineNumber":757,"author":{"gitId":"CrimsonTitan79"},"content":"      2. `switch 1`","lastModifiedDate":"2021-11-08"},{"lineNumber":758,"author":{"gitId":"CrimsonTitan79"},"content":"      3. `show 2`","lastModifiedDate":"2021-11-08"},{"lineNumber":759,"author":{"gitId":"CrimsonTitan79"},"content":"      4. `switch 2`","lastModifiedDate":"2021-11-08"},{"lineNumber":760,"author":{"gitId":"CrimsonTitan79"},"content":"      5. `show 2`","lastModifiedDate":"2021-11-08"},{"lineNumber":761,"author":{"gitId":"CrimsonTitan79"},"content":"      6. `switch 3`","lastModifiedDate":"2021-11-08"},{"lineNumber":762,"author":{"gitId":"CrimsonTitan79"},"content":"      7. `add p/1 s/2 d/021221 0900`","lastModifiedDate":"2021-11-08"},{"lineNumber":763,"author":{"gitId":"CrimsonTitan79"},"content":"      8. `add p/2 s/2 d/031221 0900`","lastModifiedDate":"2021-11-08"},{"lineNumber":764,"author":{"gitId":"CrimsonTitan79"},"content":"      9. `add p/3 s/2 d/041221 0900`","lastModifiedDate":"2021-11-08"},{"lineNumber":765,"author":{"gitId":"CrimsonTitan79"},"content":"      10. `add p/2 s/2 d/051221 0900`","lastModifiedDate":"2021-11-08"},{"lineNumber":766,"author":{"gitId":"CrimsonTitan79"},"content":"      11. `add p/3 s/2 d/061221 0900`","lastModifiedDate":"2021-11-08"},{"lineNumber":767,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":768,"author":{"gitId":"CrimsonTitan79"},"content":"1. Find all appointments that involve a particular medical staff","lastModifiedDate":"2021-11-08"},{"lineNumber":769,"author":{"gitId":"CrimsonTitan79"},"content":"   1. Test case: `find s/2`","lastModifiedDate":"2021-11-08"},{"lineNumber":770,"author":{"gitId":"CrimsonTitan79"},"content":"   \u003cbr\u003eExpected:","lastModifiedDate":"2021-11-08"},{"lineNumber":771,"author":{"gitId":"CrimsonTitan79"},"content":"    ```","lastModifiedDate":"2021-11-08"},{"lineNumber":772,"author":{"gitId":"CrimsonTitan79"},"content":"   Here is a list of matched appointments:","lastModifiedDate":"2021-11-08"},{"lineNumber":773,"author":{"gitId":"CrimsonTitan79"},"content":"    -------------------------------------------------------------------------------------------------- ","lastModifiedDate":"2021-11-08"},{"lineNumber":774,"author":{"gitId":"CrimsonTitan79"},"content":"    |  ID  |     Date/Time     | Patient ID |     Patient Name     | Staff ID  |      Staff Name       | ","lastModifiedDate":"2021-11-08"},{"lineNumber":775,"author":{"gitId":"CrimsonTitan79"},"content":"    -------------------------------------------------------------------------------------------------- ","lastModifiedDate":"2021-11-08"},{"lineNumber":776,"author":{"gitId":"CrimsonTitan79"},"content":"    | 4    | 02 Dec 21 0900HRS | 1          | John Xavier Doe      | 2        | Nurse One            | ","lastModifiedDate":"2021-11-08"},{"lineNumber":777,"author":{"gitId":"CrimsonTitan79"},"content":"    | 5    | 03 Dec 21 0900HRS | 2          | Jim Bob              | 2        | Nurse One            | ","lastModifiedDate":"2021-11-08"},{"lineNumber":778,"author":{"gitId":"CrimsonTitan79"},"content":"    | 6    | 04 Dec 21 0900HRS | 3          | Sasha Alexander      | 2        | Nurse One            | ","lastModifiedDate":"2021-11-08"},{"lineNumber":779,"author":{"gitId":"CrimsonTitan79"},"content":"    | 7    | 05 Dec 21 0900HRS | 2          | Jim Bob              | 2        | Nurse One            | ","lastModifiedDate":"2021-11-08"},{"lineNumber":780,"author":{"gitId":"CrimsonTitan79"},"content":"    | 8    | 06 Dec 21 0900HRS | 3          | Sasha Alexander      | 2        | Nurse One            | ","lastModifiedDate":"2021-11-08"},{"lineNumber":781,"author":{"gitId":"CrimsonTitan79"},"content":"    -------------------------------------------------------------------------------------------------- ","lastModifiedDate":"2021-11-08"},{"lineNumber":782,"author":{"gitId":"CrimsonTitan79"},"content":"    ```","lastModifiedDate":"2021-11-08"},{"lineNumber":783,"author":{"gitId":"CrimsonTitan79"},"content":"2. Find all appointments that involve a particular medical staff, after a certain date/time","lastModifiedDate":"2021-11-08"},{"lineNumber":784,"author":{"gitId":"CrimsonTitan79"},"content":"   1. Test case: `find s/2 a/051221 0000`","lastModifiedDate":"2021-11-08"},{"lineNumber":785,"author":{"gitId":"CrimsonTitan79"},"content":"   \u003cbr\u003eExpected: ","lastModifiedDate":"2021-11-08"},{"lineNumber":786,"author":{"gitId":"CrimsonTitan79"},"content":"   ```","lastModifiedDate":"2021-11-08"},{"lineNumber":787,"author":{"gitId":"CrimsonTitan79"},"content":"    Here is a list of matched appointments:","lastModifiedDate":"2021-11-08"},{"lineNumber":788,"author":{"gitId":"CrimsonTitan79"},"content":"     -------------------------------------------------------------------------------------------------- ","lastModifiedDate":"2021-11-08"},{"lineNumber":789,"author":{"gitId":"CrimsonTitan79"},"content":"     |  ID  |     Date/Time     | Patient ID |     Patient Name     | Staff ID  |      Staff Name       | ","lastModifiedDate":"2021-11-08"},{"lineNumber":790,"author":{"gitId":"CrimsonTitan79"},"content":"     -------------------------------------------------------------------------------------------------- ","lastModifiedDate":"2021-11-08"},{"lineNumber":791,"author":{"gitId":"CrimsonTitan79"},"content":"     | 7    | 05 Dec 21 0900HRS | 2          | Jim Bob              | 2        | Nurse One            | ","lastModifiedDate":"2021-11-08"},{"lineNumber":792,"author":{"gitId":"CrimsonTitan79"},"content":"     | 8    | 06 Dec 21 0900HRS | 3          | Sasha Alexander      | 2        | Nurse One            | ","lastModifiedDate":"2021-11-08"},{"lineNumber":793,"author":{"gitId":"CrimsonTitan79"},"content":"     -------------------------------------------------------------------------------------------------- ","lastModifiedDate":"2021-11-08"},{"lineNumber":794,"author":{"gitId":"CrimsonTitan79"},"content":"   ```","lastModifiedDate":"2021-11-08"},{"lineNumber":795,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":796,"author":{"gitId":"CrimsonTitan79"},"content":"### Saving data","lastModifiedDate":"2021-11-07"},{"lineNumber":797,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":798,"author":{"gitId":"CrimsonTitan79"},"content":"* Persistent storage can be found in the `MedBotData` directory, in the same directory as the JAR file.","lastModifiedDate":"2021-11-07"},{"lineNumber":799,"author":{"gitId":"CrimsonTitan79"},"content":"* Inside MedBotData, there is `appointment.txt`, `patient.txt` and `staff.txt`.","lastModifiedDate":"2021-11-07"},{"lineNumber":800,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":801,"author":{"gitId":"CrimsonTitan79"},"content":"1. Dealing with corrupted data files","lastModifiedDate":"2021-11-07"},{"lineNumber":802,"author":{"gitId":"CrimsonTitan79"},"content":"    1. Loading from storage, an appointment with non-existent staff ID (staff ID 10)","lastModifiedDate":"2021-11-07"},{"lineNumber":803,"author":{"gitId":"CrimsonTitan79"},"content":"        1. Test case: Replace the current contents in the text file `appointment.txt` to this:","lastModifiedDate":"2021-11-07"},{"lineNumber":804,"author":{"gitId":"CrimsonTitan79"},"content":"            ```","lastModifiedDate":"2021-11-07"},{"lineNumber":805,"author":{"gitId":"CrimsonTitan79"},"content":"            1 | 011221 0900 | 1 | 10","lastModifiedDate":"2021-11-07"},{"lineNumber":806,"author":{"gitId":"CrimsonTitan79"},"content":"            3 | 011221 1100 | 2 | 1","lastModifiedDate":"2021-11-07"},{"lineNumber":807,"author":{"gitId":"CrimsonTitan79"},"content":"            ```","lastModifiedDate":"2021-11-07"},{"lineNumber":808,"author":{"gitId":"CrimsonTitan79"},"content":"           and then launch MedBot using the terminal.\u003cbr\u003e\u003cbr\u003e Expected:","lastModifiedDate":"2021-11-07"},{"lineNumber":809,"author":{"gitId":"CrimsonTitan79"},"content":"            ```","lastModifiedDate":"2021-11-07"},{"lineNumber":810,"author":{"gitId":"CrimsonTitan79"},"content":"            Hello, I\u0027m MedBot!","lastModifiedDate":"2021-11-07"},{"lineNumber":811,"author":{"gitId":"CrimsonTitan79"},"content":"     ","lastModifiedDate":"2021-11-07"},{"lineNumber":812,"author":{"gitId":"CrimsonTitan79"},"content":"            Error: Line 1 of MedBotData/appointment.txt is invalid!","lastModifiedDate":"2021-11-07"},{"lineNumber":813,"author":{"gitId":"CrimsonTitan79"},"content":"     ","lastModifiedDate":"2021-11-07"},{"lineNumber":814,"author":{"gitId":"CrimsonTitan79"},"content":"            Please decide if you wish to:","lastModifiedDate":"2021-11-07"},{"lineNumber":815,"author":{"gitId":"CrimsonTitan79"},"content":"     ","lastModifiedDate":"2021-11-07"},{"lineNumber":816,"author":{"gitId":"CrimsonTitan79"},"content":"            1. Enter \u0027exit\u0027 to exit MedBot to correct the storage files","lastModifiedDate":"2021-11-07"},{"lineNumber":817,"author":{"gitId":"CrimsonTitan79"},"content":"            2. Enter other valid commands to OVERWRITE all invalid data!","lastModifiedDate":"2021-11-07"},{"lineNumber":818,"author":{"gitId":"CrimsonTitan79"},"content":"         ","lastModifiedDate":"2021-11-07"},{"lineNumber":819,"author":{"gitId":"CrimsonTitan79"},"content":"            How can I help you today?","lastModifiedDate":"2021-11-07"},{"lineNumber":820,"author":{"gitId":"CrimsonTitan79"},"content":"            ```","lastModifiedDate":"2021-11-07"},{"lineNumber":821,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":822,"author":{"gitId":"CrimsonTitan79"},"content":"        * Do not enter any commands after this output. Close the terminal window and move on the next test case.\u003cbr\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":823,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":824,"author":{"gitId":"CrimsonTitan79"},"content":"    2. Loading from storage, patients with invalid phone number and invalid NRIC.","lastModifiedDate":"2021-11-07"},{"lineNumber":825,"author":{"gitId":"CrimsonTitan79"},"content":"        1. Test case: Replace the current contents in the text file `patient.txt` to this:","lastModifiedDate":"2021-11-07"},{"lineNumber":826,"author":{"gitId":"CrimsonTitan79"},"content":"            ```","lastModifiedDate":"2021-11-07"},{"lineNumber":827,"author":{"gitId":"CrimsonTitan79"},"content":"               1 | S7812345X | John Xavier Doe | 899999999 | john.doe@gmail.com | John Street, Block 1234, #01-01 | S","lastModifiedDate":"2021-11-07"},{"lineNumber":828,"author":{"gitId":"CrimsonTitan79"},"content":"               2 | X | Jim Bob | X | jimbob@hotmail.com | X | H","lastModifiedDate":"2021-11-07"},{"lineNumber":829,"author":{"gitId":"CrimsonTitan79"},"content":"               3 | A8367812K | Sasha Alexander | 91238765 | X | Mauville City 2nd Street | S","lastModifiedDate":"2021-11-07"},{"lineNumber":830,"author":{"gitId":"CrimsonTitan79"},"content":"            ```","lastModifiedDate":"2021-11-07"},{"lineNumber":831,"author":{"gitId":"CrimsonTitan79"},"content":"           Expected:","lastModifiedDate":"2021-11-07"},{"lineNumber":832,"author":{"gitId":"CrimsonTitan79"},"content":"            ```","lastModifiedDate":"2021-11-07"},{"lineNumber":833,"author":{"gitId":"CrimsonTitan79"},"content":"                Hello, I\u0027m MedBot!","lastModifiedDate":"2021-11-07"},{"lineNumber":834,"author":{"gitId":"CrimsonTitan79"},"content":"     ","lastModifiedDate":"2021-11-07"},{"lineNumber":835,"author":{"gitId":"CrimsonTitan79"},"content":"                Error: Line 1 of MedBotData/patient.txt is invalid!","lastModifiedDate":"2021-11-07"},{"lineNumber":836,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":837,"author":{"gitId":"CrimsonTitan79"},"content":"                Error: Line 3 of MedBotData/patient.txt is invalid!","lastModifiedDate":"2021-11-07"},{"lineNumber":838,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":839,"author":{"gitId":"CrimsonTitan79"},"content":"                Error: Line 1 of MedBotData/appointment.txt is invalid!","lastModifiedDate":"2021-11-07"},{"lineNumber":840,"author":{"gitId":"CrimsonTitan79"},"content":"         ","lastModifiedDate":"2021-11-07"},{"lineNumber":841,"author":{"gitId":"CrimsonTitan79"},"content":"                Please decide if you wish to:","lastModifiedDate":"2021-11-07"},{"lineNumber":842,"author":{"gitId":"CrimsonTitan79"},"content":"         ","lastModifiedDate":"2021-11-07"},{"lineNumber":843,"author":{"gitId":"CrimsonTitan79"},"content":"                1. Enter \u0027exit\u0027 to exit MedBot to correct the storage files","lastModifiedDate":"2021-11-07"},{"lineNumber":844,"author":{"gitId":"CrimsonTitan79"},"content":"                2. Enter other valid commands to OVERWRITE all invalid data!","lastModifiedDate":"2021-11-07"},{"lineNumber":845,"author":{"gitId":"CrimsonTitan79"},"content":"             ","lastModifiedDate":"2021-11-07"},{"lineNumber":846,"author":{"gitId":"CrimsonTitan79"},"content":"                How can I help you today?","lastModifiedDate":"2021-11-07"},{"lineNumber":847,"author":{"gitId":"CrimsonTitan79"},"content":"            ```","lastModifiedDate":"2021-11-07"}],"authorContributionMap":{"justinfidelis":115,"CrimsonTitan79":506,"jushg":120,"-":30,"EricBryann":34,"Kureans":42}},{"path":"docs/README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"jushg"},"content":"# MedBot","lastModifiedDate":"2021-10-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":3,"author":{"gitId":"jushg"},"content":"MedBot is a Command Line Interface (CLI) application for head nurses to manage patients’ personal and medical","lastModifiedDate":"2021-10-26"},{"lineNumber":4,"author":{"gitId":"jushg"},"content":"information. By utilising text-based commands instead of traditional Graphical User Interface (GUI) based navigation,","lastModifiedDate":"2021-10-26"},{"lineNumber":5,"author":{"gitId":"jushg"},"content":"MedBot can allow head nurses to get their management tasks done quicker and more efficiently.","lastModifiedDate":"2021-10-26"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Useful links:","lastModifiedDate":"2020-05-24"},{"lineNumber":8,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":9,"author":{"gitId":"-"},"content":"* [User Guide](UserGuide.md)","lastModifiedDate":"2020-05-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"* [Developer Guide](DeveloperGuide.md)","lastModifiedDate":"2020-05-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"* [About Us](AboutUs.md)","lastModifiedDate":"2020-05-24"}],"authorContributionMap":{"jushg":5,"-":6}},{"path":"docs/UserGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide","lastModifiedDate":"2020-05-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":3,"author":{"gitId":"justinfidelis"},"content":"## Table of Content","lastModifiedDate":"2021-11-08"},{"lineNumber":4,"author":{"gitId":"justinfidelis"},"content":"- [1. Introduction](#1-introduction)","lastModifiedDate":"2021-11-08"},{"lineNumber":5,"author":{"gitId":"justinfidelis"},"content":"- [2. Quick Start Guide](#2-quick-start-guide)","lastModifiedDate":"2021-11-08"},{"lineNumber":6,"author":{"gitId":"justinfidelis"},"content":"  - [2.1 Installation](#21-installation)","lastModifiedDate":"2021-11-08"},{"lineNumber":7,"author":{"gitId":"justinfidelis"},"content":"  - [2.2 Using MedBot](#22-using-medbot)","lastModifiedDate":"2021-11-08"},{"lineNumber":8,"author":{"gitId":"justinfidelis"},"content":"- [3. Features](#3-features)","lastModifiedDate":"2021-11-08"},{"lineNumber":9,"author":{"gitId":"justinfidelis"},"content":"- [4. Commands](#4-commands)","lastModifiedDate":"2021-11-08"},{"lineNumber":10,"author":{"gitId":"justinfidelis"},"content":"  - [4.1 General Notes](#41-general-notes)","lastModifiedDate":"2021-11-08"},{"lineNumber":11,"author":{"gitId":"justinfidelis"},"content":"- [4.2 General Commands](#42-general-commands)","lastModifiedDate":"2021-11-08"},{"lineNumber":12,"author":{"gitId":"justinfidelis"},"content":"  - [4.2.1 Access user guide](#421-access-user-guide-help)","lastModifiedDate":"2021-11-08"},{"lineNumber":13,"author":{"gitId":"justinfidelis"},"content":"  - [4.2.2 Switch view](#422-switch-view-switch)","lastModifiedDate":"2021-11-08"},{"lineNumber":14,"author":{"gitId":"justinfidelis"},"content":"  - [4.2.3 Get Current View](#423-get-current-view-get-view)","lastModifiedDate":"2021-11-08"},{"lineNumber":15,"author":{"gitId":"justinfidelis"},"content":"  - [4.2.4 Exit Program](#424-exit-program-exit)","lastModifiedDate":"2021-11-08"},{"lineNumber":16,"author":{"gitId":"justinfidelis"},"content":"- [4.3 Patient/Medical Staff Management Commands](#43-patientmedical-staff-management-commands)","lastModifiedDate":"2021-11-08"},{"lineNumber":17,"author":{"gitId":"justinfidelis"},"content":"  - [4.3.1 Add a patient](#431-add-a-patient-add)","lastModifiedDate":"2021-11-08"},{"lineNumber":18,"author":{"gitId":"justinfidelis"},"content":"  - [4.3.2 Delete a patient](#432-delete-a-patient-delete)","lastModifiedDate":"2021-11-08"},{"lineNumber":19,"author":{"gitId":"justinfidelis"},"content":"  - [4.3.3 View a patient\u0027s information](#433-view-a-patients-information-view)","lastModifiedDate":"2021-11-08"},{"lineNumber":20,"author":{"gitId":"justinfidelis"},"content":"  - [4.3.4 List information of all patients](#434-list-information-of-all-patients-list)","lastModifiedDate":"2021-11-08"},{"lineNumber":21,"author":{"gitId":"justinfidelis"},"content":"  - [4.3.5 Edit a patient\u0027s information](#435-edit-a-patients-information-edit)","lastModifiedDate":"2021-11-08"},{"lineNumber":22,"author":{"gitId":"justinfidelis"},"content":"  - [4.3.6 Find patients](#436-find-patients-find)","lastModifiedDate":"2021-11-08"},{"lineNumber":23,"author":{"gitId":"justinfidelis"},"content":"  - [4.3.7 Hide a patient](#437-hide-a-patient-hide)","lastModifiedDate":"2021-11-08"},{"lineNumber":24,"author":{"gitId":"justinfidelis"},"content":"  - [4.3.8 Show a patient](#438-show-a-patient-show)","lastModifiedDate":"2021-11-08"},{"lineNumber":25,"author":{"gitId":"justinfidelis"},"content":"- [4.4 Scheduler Commands](#44-scheduler-commands)","lastModifiedDate":"2021-11-08"},{"lineNumber":26,"author":{"gitId":"justinfidelis"},"content":"  - [4.4.1 Add an appointment](#441-add-an-appointment-add)","lastModifiedDate":"2021-11-08"},{"lineNumber":27,"author":{"gitId":"justinfidelis"},"content":"  - [4.4.2 Delete an appointment](#442-delete-an-appointment-delete)","lastModifiedDate":"2021-11-08"},{"lineNumber":28,"author":{"gitId":"justinfidelis"},"content":"  - [4.4.3 View an appointment\u0027s information](#443-view-an-appointments-information-view)","lastModifiedDate":"2021-11-08"},{"lineNumber":29,"author":{"gitId":"justinfidelis"},"content":"  - [4.4.4 List information of all appointments](#444-list-information-of-all-appointments-list)","lastModifiedDate":"2021-11-08"},{"lineNumber":30,"author":{"gitId":"justinfidelis"},"content":"  - [4.4.5 Edit an appointment\u0027s information](#445-edit-an-appointments-information-edit)","lastModifiedDate":"2021-11-08"},{"lineNumber":31,"author":{"gitId":"justinfidelis"},"content":"  - [4.4.6 Find appointments](#446-find-appointments-find)","lastModifiedDate":"2021-11-08"},{"lineNumber":32,"author":{"gitId":"justinfidelis"},"content":"- [5 FAQ](#5-faq)","lastModifiedDate":"2021-11-08"},{"lineNumber":33,"author":{"gitId":"justinfidelis"},"content":"- [6 Command Summary](#6-command-summary)","lastModifiedDate":"2021-11-08"},{"lineNumber":34,"author":{"gitId":"justinfidelis"},"content":"  - [6.1 General Commands](#61-general-commands)","lastModifiedDate":"2021-11-08"},{"lineNumber":35,"author":{"gitId":"justinfidelis"},"content":"  - [6.2 Patient/Medical Staff Management Commands](#62-patientmedical-staff-management-commands)","lastModifiedDate":"2021-11-08"},{"lineNumber":36,"author":{"gitId":"justinfidelis"},"content":"  - [6.3 Scheduler Commands](#63-scheduler-commands)","lastModifiedDate":"2021-11-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":38,"author":{"gitId":"CrimsonTitan79"},"content":"## 1. Introduction","lastModifiedDate":"2021-11-07"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":40,"author":{"gitId":"CrimsonTitan79"},"content":"MedBot is a Command Line Interface (CLI) application for head nurses to manage patients’ personal and medical","lastModifiedDate":"2021-10-28"},{"lineNumber":41,"author":{"gitId":"CrimsonTitan79"},"content":"information. By utilising text-based commands instead of traditional Graphical User Interface (GUI) based navigation,","lastModifiedDate":"2021-10-28"},{"lineNumber":42,"author":{"gitId":"CrimsonTitan79"},"content":"MedBot can allow head nurses to get their management tasks done quicker and more efficiently.","lastModifiedDate":"2021-10-28"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":44,"author":{"gitId":"CrimsonTitan79"},"content":"## 2. Quick Start Guide","lastModifiedDate":"2021-11-07"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":46,"author":{"gitId":"CrimsonTitan79"},"content":"### 2.1 Installation","lastModifiedDate":"2021-11-07"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":48,"author":{"gitId":"jushg"},"content":"1. Ensure that you are currently using `Java 11`. ","lastModifiedDate":"2021-11-07"},{"lineNumber":49,"author":{"gitId":"justinfidelis"},"content":"2. Download the latest version of `MedBot.jar` from [here](https://github.com/AY2122S1-CS2113-T13-1/tp/releases).","lastModifiedDate":"2021-11-08"},{"lineNumber":50,"author":{"gitId":"justinfidelis"},"content":"3. Move the file to the folder that you want to use as the MedBot\u0027s root folder.","lastModifiedDate":"2021-10-26"},{"lineNumber":51,"author":{"gitId":"justinfidelis"},"content":"4. Execute the `java -jar MedBot.jar` command in the terminal in the same folder as the `MedBot.jar` file to launch","lastModifiedDate":"2021-11-08"},{"lineNumber":52,"author":{"gitId":"justinfidelis"},"content":"   MedBot. The following output should be observed:","lastModifiedDate":"2021-10-26"},{"lineNumber":53,"author":{"gitId":"CrimsonTitan79"},"content":"```","lastModifiedDate":"2021-11-07"},{"lineNumber":54,"author":{"gitId":"CrimsonTitan79"},"content":"Hello, I\u0027m MedBot!","lastModifiedDate":"2021-11-07"},{"lineNumber":55,"author":{"gitId":"CrimsonTitan79"},"content":"How can I help you today?","lastModifiedDate":"2021-11-07"},{"lineNumber":56,"author":{"gitId":"CrimsonTitan79"},"content":"```","lastModifiedDate":"2021-11-07"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":58,"author":{"gitId":"CrimsonTitan79"},"content":"### 2.2 Using MedBot","lastModifiedDate":"2021-11-07"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":60,"author":{"gitId":"justinfidelis"},"content":"1. Type in commands into the terminal and press **Enter** to execute it.","lastModifiedDate":"2021-10-26"},{"lineNumber":61,"author":{"gitId":"CrimsonTitan79"},"content":"2. Refer to the [Commands](#4-commands) below for details on each command.","lastModifiedDate":"2021-11-07"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":63,"author":{"gitId":"CrimsonTitan79"},"content":"## 3. Features","lastModifiedDate":"2021-11-07"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":65,"author":{"gitId":"CrimsonTitan79"},"content":"These are the main features of MedBot:","lastModifiedDate":"2021-11-07"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":67,"author":{"gitId":"Kureans"},"content":"* Manage patient and medical staff information efficiently","lastModifiedDate":"2021-10-24"},{"lineNumber":68,"author":{"gitId":"Kureans"},"content":"* Schedule medical appointments for patients seamlessly","lastModifiedDate":"2021-10-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":70,"author":{"gitId":"CrimsonTitan79"},"content":"Each feature is contained inside a different view/tab in MedBot, which can be switched between using the `switch`","lastModifiedDate":"2021-10-28"},{"lineNumber":71,"author":{"gitId":"CrimsonTitan79"},"content":"command, explained further down below.","lastModifiedDate":"2021-11-07"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":73,"author":{"gitId":"CrimsonTitan79"},"content":"## 4. Commands","lastModifiedDate":"2021-11-07"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":75,"author":{"gitId":"CrimsonTitan79"},"content":"### 4.1 General Notes","lastModifiedDate":"2021-11-07"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":77,"author":{"gitId":"EricBryann"},"content":"These notes apply to all commands that are supported by MedBot.","lastModifiedDate":"2021-11-03"},{"lineNumber":78,"author":{"gitId":"justinfidelis"},"content":"* Words in upper case are the parameters of the command.","lastModifiedDate":"2021-11-08"},{"lineNumber":79,"author":{"gitId":"justinfidelis"},"content":"  * e.g. in `add p/PATIENT_ID s/STAFF_ID d/DATE_TIME`, `PATIENT_ID`, `STAFF_ID` and `DATE_TIME` are parameters for the ","lastModifiedDate":"2021-11-08"},{"lineNumber":80,"author":{"gitId":"justinfidelis"},"content":"command","lastModifiedDate":"2021-11-08"},{"lineNumber":81,"author":{"gitId":"justinfidelis"},"content":"* Parameters not in square brackets are compulsory parameters.","lastModifiedDate":"2021-11-08"},{"lineNumber":82,"author":{"gitId":"EricBryann"},"content":"  * e.g. in `delete PATIENT_ID`, a `PATIENT_ID` is required for this command.","lastModifiedDate":"2021-11-03"},{"lineNumber":83,"author":{"gitId":"justinfidelis"},"content":"* Parameters in square brackets are optional parameters.","lastModifiedDate":"2021-11-08"},{"lineNumber":84,"author":{"gitId":"EricBryann"},"content":"  * e.g. in `help [COMMAND]`, the `COMMAND` is optional for this command.","lastModifiedDate":"2021-11-03"},{"lineNumber":85,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":86,"author":{"gitId":"justinfidelis"},"content":"## 4.2 General Commands","lastModifiedDate":"2021-11-08"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":88,"author":{"gitId":"Kureans"},"content":"These commands will work the same for any view that you are currently in.","lastModifiedDate":"2021-10-24"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":90,"author":{"gitId":"justinfidelis"},"content":"### 4.2.1 Access user guide: `help`","lastModifiedDate":"2021-11-08"},{"lineNumber":91,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":92,"author":{"gitId":"justinfidelis"},"content":"Provides an internal user guide that is accessible via the terminal.","lastModifiedDate":"2021-11-08"},{"lineNumber":93,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":94,"author":{"gitId":"justinfidelis"},"content":"Format: `help [COMMAND]`","lastModifiedDate":"2021-11-08"},{"lineNumber":95,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":96,"author":{"gitId":"justinfidelis"},"content":"Simply typing help without parameters will display a list of commands that can be used in the current view.","lastModifiedDate":"2021-11-08"},{"lineNumber":97,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":98,"author":{"gitId":"justinfidelis"},"content":"Expected Output when the program is in the Patient Management view:","lastModifiedDate":"2021-11-08"},{"lineNumber":99,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":100,"author":{"gitId":"Kureans"},"content":"```","lastModifiedDate":"2021-10-24"},{"lineNumber":101,"author":{"gitId":"justinfidelis"},"content":"Here are the list of commands:","lastModifiedDate":"2021-11-08"},{"lineNumber":102,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":103,"author":{"gitId":"justinfidelis"},"content":"help","lastModifiedDate":"2021-11-08"},{"lineNumber":104,"author":{"gitId":"justinfidelis"},"content":"add","lastModifiedDate":"2021-11-08"},{"lineNumber":105,"author":{"gitId":"justinfidelis"},"content":"delete","lastModifiedDate":"2021-11-08"},{"lineNumber":106,"author":{"gitId":"justinfidelis"},"content":"edit","lastModifiedDate":"2021-11-08"},{"lineNumber":107,"author":{"gitId":"justinfidelis"},"content":"view","lastModifiedDate":"2021-11-08"},{"lineNumber":108,"author":{"gitId":"justinfidelis"},"content":"list","lastModifiedDate":"2021-11-08"},{"lineNumber":109,"author":{"gitId":"justinfidelis"},"content":"find","lastModifiedDate":"2021-11-08"},{"lineNumber":110,"author":{"gitId":"justinfidelis"},"content":"hide","lastModifiedDate":"2021-11-08"},{"lineNumber":111,"author":{"gitId":"justinfidelis"},"content":"show","lastModifiedDate":"2021-11-08"},{"lineNumber":112,"author":{"gitId":"justinfidelis"},"content":"switch","lastModifiedDate":"2021-11-08"},{"lineNumber":113,"author":{"gitId":"justinfidelis"},"content":"get view","lastModifiedDate":"2021-11-08"},{"lineNumber":114,"author":{"gitId":"justinfidelis"},"content":"exit","lastModifiedDate":"2021-11-08"},{"lineNumber":115,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":116,"author":{"gitId":"justinfidelis"},"content":"To obtain more information on each command and their respective required inputs, type:","lastModifiedDate":"2021-11-08"},{"lineNumber":117,"author":{"gitId":"justinfidelis"},"content":"help [COMMAND]","lastModifiedDate":"2021-11-08"},{"lineNumber":118,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":119,"author":{"gitId":"justinfidelis"},"content":"*Note that all commands will remove any \u0027|\u0027 inputs for format parsing purposes.","lastModifiedDate":"2021-11-08"},{"lineNumber":120,"author":{"gitId":"justinfidelis"},"content":"For expected output examples, please refer to the User Guide.","lastModifiedDate":"2021-11-08"},{"lineNumber":121,"author":{"gitId":"Kureans"},"content":"```","lastModifiedDate":"2021-10-24"},{"lineNumber":122,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":123,"author":{"gitId":"justinfidelis"},"content":"### 4.2.2 Switch view: `switch`","lastModifiedDate":"2021-11-08"},{"lineNumber":124,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":125,"author":{"gitId":"justinfidelis"},"content":"Switches between the different views of MedBot.","lastModifiedDate":"2021-11-08"},{"lineNumber":126,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":127,"author":{"gitId":"justinfidelis"},"content":"Format: `switch [VIEW_TYPE]`","lastModifiedDate":"2021-11-08"},{"lineNumber":128,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":129,"author":{"gitId":"justinfidelis"},"content":"Here is the list of views and their corresponding `[VIEW_TYPE]` specifiers:","lastModifiedDate":"2021-10-26"},{"lineNumber":130,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":131,"author":{"gitId":"justinfidelis"},"content":"| View                     | Specifier | Alternate Specifier |","lastModifiedDate":"2021-10-26"},{"lineNumber":132,"author":{"gitId":"justinfidelis"},"content":"| :---                     | :---      | :---                |","lastModifiedDate":"2021-10-26"},{"lineNumber":133,"author":{"gitId":"justinfidelis"},"content":"| Patient Management       | `p`       | `1`                 |","lastModifiedDate":"2021-11-08"},{"lineNumber":134,"author":{"gitId":"justinfidelis"},"content":"| Medical Staff Management | `m`       | `2`                 |","lastModifiedDate":"2021-11-08"},{"lineNumber":135,"author":{"gitId":"justinfidelis"},"content":"| Scheduler                | `s`       | `3`                 |","lastModifiedDate":"2021-10-26"},{"lineNumber":136,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":137,"author":{"gitId":"justinfidelis"},"content":"Using either specifier will switch to the corresponding view. I.e., `switch m` and `switch 2` will both switch to the ","lastModifiedDate":"2021-11-08"},{"lineNumber":138,"author":{"gitId":"justinfidelis"},"content":"Medical Staff Info view.","lastModifiedDate":"2021-11-08"},{"lineNumber":139,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":140,"author":{"gitId":"justinfidelis"},"content":"If the switch command is called without any parameters, the view that is switched to will depend on the current view in ","lastModifiedDate":"2021-11-08"},{"lineNumber":141,"author":{"gitId":"justinfidelis"},"content":"the following order.","lastModifiedDate":"2021-11-08"},{"lineNumber":142,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":143,"author":{"gitId":"justinfidelis"},"content":"(Patient Info --\u003e Medical Staff Info --\u003e Scheduler --\u003e Patient Info)","lastModifiedDate":"2021-11-08"},{"lineNumber":144,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":145,"author":{"gitId":"justinfidelis"},"content":"Example: `switch p`","lastModifiedDate":"2021-11-08"},{"lineNumber":146,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":147,"author":{"gitId":"Kureans"},"content":"Expected Output:","lastModifiedDate":"2021-10-24"},{"lineNumber":148,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":149,"author":{"gitId":"Kureans"},"content":"```","lastModifiedDate":"2021-10-24"},{"lineNumber":150,"author":{"gitId":"justinfidelis"},"content":"  ___  _ _____ ___ ___ _  _ _____ ","lastModifiedDate":"2021-11-08"},{"lineNumber":151,"author":{"gitId":"justinfidelis"},"content":" | _ \\/_\\_   _|_ _| __| \\| |_   _|","lastModifiedDate":"2021-11-08"},{"lineNumber":152,"author":{"gitId":"justinfidelis"},"content":" |  _/ _ \\| |  | || _|| .` | | |  ","lastModifiedDate":"2021-11-08"},{"lineNumber":153,"author":{"gitId":"justinfidelis"},"content":" |_|/_/ \\_\\_|_|___|___|_|\\_| |_|  ","lastModifiedDate":"2021-11-08"},{"lineNumber":154,"author":{"gitId":"justinfidelis"},"content":" |_ _| \\| | __/ _ \\               ","lastModifiedDate":"2021-11-08"},{"lineNumber":155,"author":{"gitId":"justinfidelis"},"content":"  | || .` | _| (_) |              ","lastModifiedDate":"2021-11-08"},{"lineNumber":156,"author":{"gitId":"justinfidelis"},"content":" |___|_|\\_|_|_\\___/    __         ","lastModifiedDate":"2021-11-08"},{"lineNumber":157,"author":{"gitId":"justinfidelis"},"content":" \\ \\ / /_ _| __\\ \\    / /         ","lastModifiedDate":"2021-11-08"},{"lineNumber":158,"author":{"gitId":"justinfidelis"},"content":"  \\ V / | || _| \\ \\/\\/ /          ","lastModifiedDate":"2021-11-08"},{"lineNumber":159,"author":{"gitId":"justinfidelis"},"content":"   \\_/ |___|___| \\_/\\_/           ","lastModifiedDate":"2021-11-08"},{"lineNumber":160,"author":{"gitId":"justinfidelis"},"content":"                                  ","lastModifiedDate":"2021-11-08"},{"lineNumber":161,"author":{"gitId":"justinfidelis"},"content":"View has been switched to PATIENT_INFO","lastModifiedDate":"2021-11-08"},{"lineNumber":162,"author":{"gitId":"Kureans"},"content":"```","lastModifiedDate":"2021-10-24"},{"lineNumber":163,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":164,"author":{"gitId":"justinfidelis"},"content":"### 4.2.3 Get current view: `get view`","lastModifiedDate":"2021-11-08"},{"lineNumber":165,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":166,"author":{"gitId":"Kureans"},"content":"Gets the current view type of the program.","lastModifiedDate":"2021-10-31"},{"lineNumber":167,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":168,"author":{"gitId":"jushg"},"content":"Format: `get view`","lastModifiedDate":"2021-10-26"},{"lineNumber":169,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":170,"author":{"gitId":"justinfidelis"},"content":"Expected Output when the program is in the Patient Management view:","lastModifiedDate":"2021-11-08"},{"lineNumber":171,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":172,"author":{"gitId":"jushg"},"content":"```","lastModifiedDate":"2021-10-26"},{"lineNumber":173,"author":{"gitId":"justinfidelis"},"content":"You are currently in the Patient Management view.","lastModifiedDate":"2021-11-08"},{"lineNumber":174,"author":{"gitId":"jushg"},"content":"```","lastModifiedDate":"2021-10-26"},{"lineNumber":175,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":176,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":177,"author":{"gitId":"justinfidelis"},"content":"### 4.2.4 Exit Program: `exit`","lastModifiedDate":"2021-11-08"},{"lineNumber":178,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":179,"author":{"gitId":"justinfidelis"},"content":"Exits the program.","lastModifiedDate":"2021-11-08"},{"lineNumber":180,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":181,"author":{"gitId":"justinfidelis"},"content":"Format: `exit`","lastModifiedDate":"2021-11-08"},{"lineNumber":182,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":183,"author":{"gitId":"Kureans"},"content":"Expected Output:","lastModifiedDate":"2021-10-24"},{"lineNumber":184,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":185,"author":{"gitId":"Kureans"},"content":"```","lastModifiedDate":"2021-10-24"},{"lineNumber":186,"author":{"gitId":"justinfidelis"},"content":"Thank you for using MedBot!","lastModifiedDate":"2021-11-08"},{"lineNumber":187,"author":{"gitId":"justinfidelis"},"content":"See you again!","lastModifiedDate":"2021-11-08"},{"lineNumber":188,"author":{"gitId":"Kureans"},"content":"```","lastModifiedDate":"2021-10-24"},{"lineNumber":189,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":190,"author":{"gitId":"justinfidelis"},"content":"## 4.3 Patient/Medical Staff Management Commands","lastModifiedDate":"2021-11-08"},{"lineNumber":191,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":192,"author":{"gitId":"justinfidelis"},"content":"Commands in the Patient Management view and Medical Staff Management view function similarly. Below are the descriptions","lastModifiedDate":"2021-11-08"},{"lineNumber":193,"author":{"gitId":"justinfidelis"},"content":"of the patient management commands that are used in the Patient Management view, but these commands would work the same ","lastModifiedDate":"2021-11-08"},{"lineNumber":194,"author":{"gitId":"justinfidelis"},"content":"way for staff management in the Medical Staff Management view.","lastModifiedDate":"2021-11-08"},{"lineNumber":195,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":196,"author":{"gitId":"justinfidelis"},"content":"### 4.3.1 Add a patient: `add`","lastModifiedDate":"2021-11-08"},{"lineNumber":197,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":198,"author":{"gitId":"justinfidelis"},"content":"Adds a patient with the given information to the patient manager. Upon successfully adding a patient, MedBot will ","lastModifiedDate":"2021-11-08"},{"lineNumber":199,"author":{"gitId":"justinfidelis"},"content":"generate a unique patient ID for reference and use in other commands.","lastModifiedDate":"2021-11-08"},{"lineNumber":200,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":201,"author":{"gitId":"Kureans"},"content":"Format: `add [i/PATIENT_IC] [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS]`","lastModifiedDate":"2021-10-31"},{"lineNumber":202,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":203,"author":{"gitId":"justinfidelis"},"content":"At least one parameter must be provided. Parameters can be entered in any order.","lastModifiedDate":"2021-11-08"},{"lineNumber":204,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":205,"author":{"gitId":"justinfidelis"},"content":"Example: `add i/S7812345X n/John Doe p/87654321 e/john.doe@gmail.com a/Blk 123 Bishan Street 7, #03-07`","lastModifiedDate":"2021-11-08"},{"lineNumber":206,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":207,"author":{"gitId":"Kureans"},"content":"Expected output:","lastModifiedDate":"2021-10-24"},{"lineNumber":208,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":209,"author":{"gitId":"Kureans"},"content":"```","lastModifiedDate":"2021-10-24"},{"lineNumber":210,"author":{"gitId":"justinfidelis"},"content":"Added patient with Patient ID: 1","lastModifiedDate":"2021-11-08"},{"lineNumber":211,"author":{"gitId":"justinfidelis"},"content":"IC: S7812345X","lastModifiedDate":"2021-11-08"},{"lineNumber":212,"author":{"gitId":"justinfidelis"},"content":"Name: John Doe","lastModifiedDate":"2021-11-08"},{"lineNumber":213,"author":{"gitId":"justinfidelis"},"content":"H/P: 87654321","lastModifiedDate":"2021-11-08"},{"lineNumber":214,"author":{"gitId":"justinfidelis"},"content":"Email: john.doe@gmail.com","lastModifiedDate":"2021-11-08"},{"lineNumber":215,"author":{"gitId":"justinfidelis"},"content":"Address: Blk 123 Bishan Street 7, #03-07","lastModifiedDate":"2021-11-08"},{"lineNumber":216,"author":{"gitId":"Kureans"},"content":"```","lastModifiedDate":"2021-10-24"},{"lineNumber":217,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":218,"author":{"gitId":"justinfidelis"},"content":"#### Notes on adding patients:","lastModifiedDate":"2021-11-08"},{"lineNumber":219,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":220,"author":{"gitId":"justinfidelis"},"content":"- The first letter of each word in `NAME` and `ADDRESS` will be capitalized, and the remaining letters will be set to","lastModifiedDate":"2021-11-08"},{"lineNumber":221,"author":{"gitId":"justinfidelis"},"content":"- `PHONE_NUMBER` must be an 8-digit phone number. Spaces, dashes and underscore characters will be accepted but removed","lastModifiedDate":"2021-11-08"},{"lineNumber":222,"author":{"gitId":"justinfidelis"},"content":"  lower case","lastModifiedDate":"2021-11-08"},{"lineNumber":223,"author":{"gitId":"justinfidelis"},"content":"- `EMAIL` must be in a valid email format","lastModifiedDate":"2021-10-29"},{"lineNumber":224,"author":{"gitId":"justinfidelis"},"content":"    - eg. tim_ong@example.com","lastModifiedDate":"2021-10-29"},{"lineNumber":225,"author":{"gitId":"justinfidelis"},"content":"- `PATIENT_IC` must be in a valid NRIC format:","lastModifiedDate":"2021-10-29"},{"lineNumber":226,"author":{"gitId":"justinfidelis"},"content":"    - The checksum of the NRIC will not be checked.","lastModifiedDate":"2021-10-29"},{"lineNumber":227,"author":{"gitId":"justinfidelis"},"content":"    - Alphabets will be auto-capitalized.","lastModifiedDate":"2021-11-08"},{"lineNumber":228,"author":{"gitId":"justinfidelis"},"content":"- No parameters are made compulsory but at least one parameter must be given. The purpose is to allow for the addition ","lastModifiedDate":"2021-11-08"},{"lineNumber":229,"author":{"gitId":"justinfidelis"},"content":"of patients into MedBot in emergency cases where personal information is not yet available.","lastModifiedDate":"2021-11-08"},{"lineNumber":230,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":231,"author":{"gitId":"justinfidelis"},"content":"### 4.3.2 Delete a patient: `delete`","lastModifiedDate":"2021-11-08"},{"lineNumber":232,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":233,"author":{"gitId":"justinfidelis"},"content":"Deletes a patient from the patient manager.","lastModifiedDate":"2021-11-08"},{"lineNumber":234,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":235,"author":{"gitId":"Kureans"},"content":"Format: `delete PATIENT_ID`","lastModifiedDate":"2021-10-24"},{"lineNumber":236,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":237,"author":{"gitId":"justinfidelis"},"content":"Example: `delete 3`","lastModifiedDate":"2021-11-08"},{"lineNumber":238,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":239,"author":{"gitId":"Kureans"},"content":"Expected Output:","lastModifiedDate":"2021-10-24"},{"lineNumber":240,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":241,"author":{"gitId":"Kureans"},"content":"```","lastModifiedDate":"2021-10-24"},{"lineNumber":242,"author":{"gitId":"justinfidelis"},"content":"Patient with ID 3 deleted from system.","lastModifiedDate":"2021-11-08"},{"lineNumber":243,"author":{"gitId":"Kureans"},"content":"```","lastModifiedDate":"2021-10-24"},{"lineNumber":244,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":245,"author":{"gitId":"justinfidelis"},"content":"#### Notes:","lastModifiedDate":"2021-11-08"},{"lineNumber":246,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":247,"author":{"gitId":"EricBryann"},"content":"* The patient being deleted does not affect the data of the rest of the patients, i.e. the ID will ","lastModifiedDate":"2021-11-03"},{"lineNumber":248,"author":{"gitId":"EricBryann"},"content":"remain the same. ","lastModifiedDate":"2021-11-03"},{"lineNumber":249,"author":{"gitId":"EricBryann"},"content":"\u003cbr\u003eReasons :","lastModifiedDate":"2021-11-03"},{"lineNumber":250,"author":{"gitId":"EricBryann"},"content":"  * ID uniquely identifies a patient and should not be changed.","lastModifiedDate":"2021-11-03"},{"lineNumber":251,"author":{"gitId":"EricBryann"},"content":"  * ID does not indicate the row number in the patient list.","lastModifiedDate":"2021-11-03"},{"lineNumber":252,"author":{"gitId":"CrimsonTitan79"},"content":"* Deleting a patient also deletes all appointments associated with the patient.","lastModifiedDate":"2021-11-07"},{"lineNumber":253,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":254,"author":{"gitId":"justinfidelis"},"content":"### 4.3.3 View a patient’s information: `view`","lastModifiedDate":"2021-11-08"},{"lineNumber":255,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":256,"author":{"gitId":"Kureans"},"content":"View a patient’s personal information.","lastModifiedDate":"2021-10-24"},{"lineNumber":257,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":258,"author":{"gitId":"Kureans"},"content":"Format: `view PATIENT_ID`","lastModifiedDate":"2021-10-24"},{"lineNumber":259,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":260,"author":{"gitId":"justinfidelis"},"content":"Example: `view 1`","lastModifiedDate":"2021-11-08"},{"lineNumber":261,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":262,"author":{"gitId":"Kureans"},"content":"Expected Output:","lastModifiedDate":"2021-10-24"},{"lineNumber":263,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":264,"author":{"gitId":"Kureans"},"content":"```","lastModifiedDate":"2021-10-24"},{"lineNumber":265,"author":{"gitId":"justinfidelis"},"content":"Here\u0027s the requested patient information:","lastModifiedDate":"2021-11-08"},{"lineNumber":266,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":267,"author":{"gitId":"justinfidelis"},"content":"Patient ID: 1","lastModifiedDate":"2021-11-08"},{"lineNumber":268,"author":{"gitId":"justinfidelis"},"content":"IC: S7812345X","lastModifiedDate":"2021-11-08"},{"lineNumber":269,"author":{"gitId":"justinfidelis"},"content":"Name: John Doe","lastModifiedDate":"2021-11-08"},{"lineNumber":270,"author":{"gitId":"justinfidelis"},"content":"H/P: 87654321","lastModifiedDate":"2021-11-08"},{"lineNumber":271,"author":{"gitId":"justinfidelis"},"content":"Email: john.doe@gmail.com","lastModifiedDate":"2021-11-08"},{"lineNumber":272,"author":{"gitId":"justinfidelis"},"content":"Address: Blk 123 Bishan Street 7, #03-07","lastModifiedDate":"2021-11-08"},{"lineNumber":273,"author":{"gitId":"Kureans"},"content":"```","lastModifiedDate":"2021-10-24"},{"lineNumber":274,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":275,"author":{"gitId":"justinfidelis"},"content":"### 4.3.4 List information of all patients: `list`","lastModifiedDate":"2021-11-08"},{"lineNumber":276,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":277,"author":{"gitId":"justinfidelis"},"content":"List the information of all patients in the patient manager.","lastModifiedDate":"2021-11-08"},{"lineNumber":278,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":279,"author":{"gitId":"EricBryann"},"content":"Format: `list [-h]`","lastModifiedDate":"2021-11-02"},{"lineNumber":280,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":281,"author":{"gitId":"justinfidelis"},"content":"`list` will only show all not-hidden patients. To show hidden patients, use `list -h` instead.","lastModifiedDate":"2021-11-08"},{"lineNumber":282,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":283,"author":{"gitId":"Kureans"},"content":"Example Output:","lastModifiedDate":"2021-10-24"},{"lineNumber":284,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":285,"author":{"gitId":"Kureans"},"content":"```","lastModifiedDate":"2021-10-24"},{"lineNumber":286,"author":{"gitId":"Kureans"},"content":"Here is a list of all patients:","lastModifiedDate":"2021-10-24"},{"lineNumber":287,"author":{"gitId":"Kureans"},"content":"For full details of each patient, please use the command \"view PATIENT_ID\"","lastModifiedDate":"2021-10-24"},{"lineNumber":288,"author":{"gitId":"Kureans"},"content":" ----------------------------------------------------------------------------------------------------- ","lastModifiedDate":"2021-10-24"},{"lineNumber":289,"author":{"gitId":"Kureans"},"content":" |  ID  | IC Number |         Name         | Phone No. |        Email         |       Address        | ","lastModifiedDate":"2021-10-24"},{"lineNumber":290,"author":{"gitId":"Kureans"},"content":" ----------------------------------------------------------------------------------------------------- ","lastModifiedDate":"2021-10-24"},{"lineNumber":291,"author":{"gitId":"justinfidelis"},"content":" | 1    | S7812345X | John Doe             | 87654321  | john.doe@gmail.com   | Blk 123 Bishan St... | ","lastModifiedDate":"2021-11-08"},{"lineNumber":292,"author":{"gitId":"justinfidelis"},"content":" | 2    | S8765432G | Alice Tan            | 81234567  | alice123@yahoo.com   | Blk 519 Queenstow... | ","lastModifiedDate":"2021-11-08"},{"lineNumber":293,"author":{"gitId":"justinfidelis"},"content":" | 3    | S9234567M | Muhd Faiz            | 91231234  | faiz123@gmail.com    | Blk 217 Ang Mo Ki... | ","lastModifiedDate":"2021-11-08"},{"lineNumber":294,"author":{"gitId":"justinfidelis"},"content":" | 4    | S9412345R | Sarah Fernandez      | 81112222  |                      | 47 Lentor Crescent   | ","lastModifiedDate":"2021-11-08"},{"lineNumber":295,"author":{"gitId":"Kureans"},"content":" ----------------------------------------------------------------------------------------------------- ","lastModifiedDate":"2021-10-24"},{"lineNumber":296,"author":{"gitId":"Kureans"},"content":"```","lastModifiedDate":"2021-10-24"},{"lineNumber":297,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":298,"author":{"gitId":"justinfidelis"},"content":"#### Notes:","lastModifiedDate":"2021-11-08"},{"lineNumber":299,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":300,"author":{"gitId":"CrimsonTitan79"},"content":"* `Name`, `Email`, `Address` that are longer than 20 characters will be truncated to the first 17 characters with a ","lastModifiedDate":"2021-11-07"},{"lineNumber":301,"author":{"gitId":"CrimsonTitan79"},"content":"`...` appended.","lastModifiedDate":"2021-11-07"},{"lineNumber":302,"author":{"gitId":"EricBryann"},"content":"\u003cbr\u003eReason:","lastModifiedDate":"2021-11-03"},{"lineNumber":303,"author":{"gitId":"EricBryann"},"content":"  * To maintain the table layout and prevent overflow of a cell.","lastModifiedDate":"2021-11-03"},{"lineNumber":304,"author":{"gitId":"CrimsonTitan79"},"content":"* To get the full information of a particular patient without the truncated details, use `VIEW PATIENT_ID`.","lastModifiedDate":"2021-11-07"},{"lineNumber":305,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":306,"author":{"gitId":"justinfidelis"},"content":"### 4.3.5 Edit a patient\u0027s information: `edit`","lastModifiedDate":"2021-11-08"},{"lineNumber":307,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":308,"author":{"gitId":"justinfidelis"},"content":"Edit the personal information of a patient in the patient manager. ","lastModifiedDate":"2021-11-08"},{"lineNumber":309,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":310,"author":{"gitId":"Kureans"},"content":"Format: `edit PATIENT_ID [i/PATIENT_IC] [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS]`","lastModifiedDate":"2021-10-31"},{"lineNumber":311,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":312,"author":{"gitId":"justinfidelis"},"content":"At least one parameter must be provided. Parameters can be entered in any order. Only the parameters that are given will","lastModifiedDate":"2021-11-08"},{"lineNumber":313,"author":{"gitId":"justinfidelis"},"content":"be modified.","lastModifiedDate":"2021-11-08"},{"lineNumber":314,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":315,"author":{"gitId":"justinfidelis"},"content":"Example: `edit 1 p/87776666 e/john_doe@gmail.com`","lastModifiedDate":"2021-11-08"},{"lineNumber":316,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":317,"author":{"gitId":"Kureans"},"content":"Expected output:","lastModifiedDate":"2021-10-24"},{"lineNumber":318,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":319,"author":{"gitId":"Kureans"},"content":"```","lastModifiedDate":"2021-10-24"},{"lineNumber":320,"author":{"gitId":"justinfidelis"},"content":"The information of the patient with ID 1 has been edited to:","lastModifiedDate":"2021-11-08"},{"lineNumber":321,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":322,"author":{"gitId":"justinfidelis"},"content":"Patient ID: 1","lastModifiedDate":"2021-11-08"},{"lineNumber":323,"author":{"gitId":"justinfidelis"},"content":"IC: S7812345X","lastModifiedDate":"2021-11-08"},{"lineNumber":324,"author":{"gitId":"justinfidelis"},"content":"Name: John Doe","lastModifiedDate":"2021-11-08"},{"lineNumber":325,"author":{"gitId":"justinfidelis"},"content":"H/P: 87776666","lastModifiedDate":"2021-11-08"},{"lineNumber":326,"author":{"gitId":"justinfidelis"},"content":"Email: john_doe@gmail.com","lastModifiedDate":"2021-11-08"},{"lineNumber":327,"author":{"gitId":"justinfidelis"},"content":"Address: Blk 123 Bishan Street 7, #03-07","lastModifiedDate":"2021-11-08"},{"lineNumber":328,"author":{"gitId":"Kureans"},"content":"```","lastModifiedDate":"2021-10-24"},{"lineNumber":329,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":330,"author":{"gitId":"justinfidelis"},"content":"#### Notes: ","lastModifiedDate":"2021-11-08"},{"lineNumber":331,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":332,"author":{"gitId":"justinfidelis"},"content":"Refer to [notes on adding patients](#notes-on-adding-patients)","lastModifiedDate":"2021-11-08"},{"lineNumber":333,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":334,"author":{"gitId":"justinfidelis"},"content":"### 4.3.6 Find patients: `find`","lastModifiedDate":"2021-11-08"},{"lineNumber":335,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":336,"author":{"gitId":"CrimsonTitan79"},"content":"Find all patients that contain the given attributes.","lastModifiedDate":"2021-11-07"},{"lineNumber":337,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":338,"author":{"gitId":"EricBryann"},"content":"Format `find [i/PATIENT_IC] [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS]`","lastModifiedDate":"2021-10-26"},{"lineNumber":339,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":340,"author":{"gitId":"EricBryann"},"content":"Example:","lastModifiedDate":"2021-10-26"},{"lineNumber":341,"author":{"gitId":"justinfidelis"},"content":"`find n/John`","lastModifiedDate":"2021-11-08"},{"lineNumber":342,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":343,"author":{"gitId":"justinfidelis"},"content":"Expected Output:","lastModifiedDate":"2021-11-08"},{"lineNumber":344,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":345,"author":{"gitId":"EricBryann"},"content":"```","lastModifiedDate":"2021-10-26"},{"lineNumber":346,"author":{"gitId":"EricBryann"},"content":"Here is a list of all patients:","lastModifiedDate":"2021-10-26"},{"lineNumber":347,"author":{"gitId":"EricBryann"},"content":"For full details of each patient, please use the command \"view PATIENT_ID\"","lastModifiedDate":"2021-10-26"},{"lineNumber":348,"author":{"gitId":"EricBryann"},"content":" ----------------------------------------------------------------------------------------------------- ","lastModifiedDate":"2021-10-26"},{"lineNumber":349,"author":{"gitId":"EricBryann"},"content":" |  ID  | IC Number |         Name         | Phone No. |        Email         |       Address        | ","lastModifiedDate":"2021-10-26"},{"lineNumber":350,"author":{"gitId":"EricBryann"},"content":" ----------------------------------------------------------------------------------------------------- ","lastModifiedDate":"2021-10-26"},{"lineNumber":351,"author":{"gitId":"justinfidelis"},"content":" | 1    | S7812345X | John Doe             | 87654321  | john.doe@gmail.com   | Blk 123 Bishan St... | ","lastModifiedDate":"2021-11-08"},{"lineNumber":352,"author":{"gitId":"EricBryann"},"content":" ----------------------------------------------------------------------------------------------------- ","lastModifiedDate":"2021-10-26"},{"lineNumber":353,"author":{"gitId":"EricBryann"},"content":"```","lastModifiedDate":"2021-10-26"},{"lineNumber":354,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":355,"author":{"gitId":"justinfidelis"},"content":"#### Notes:","lastModifiedDate":"2021-11-08"},{"lineNumber":356,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":357,"author":{"gitId":"EricBryann"},"content":"* The attributes given do not have to be in full.","lastModifiedDate":"2021-11-03"},{"lineNumber":358,"author":{"gitId":"justinfidelis"},"content":"* At least one attribute must be given.","lastModifiedDate":"2021-11-08"},{"lineNumber":359,"author":{"gitId":"EricBryann"},"content":"* Hidden patients will also be displayed.","lastModifiedDate":"2021-11-03"},{"lineNumber":360,"author":{"gitId":"EricBryann"},"content":"* An empty value for a parameter will return rows with an empty value for the particular parameter","lastModifiedDate":"2021-11-03"},{"lineNumber":361,"author":{"gitId":"EricBryann"},"content":"    * e.g. `find n/ e/` will show all patients with empty Name and Email.","lastModifiedDate":"2021-11-03"},{"lineNumber":362,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":363,"author":{"gitId":"justinfidelis"},"content":"### 4.3.7 Hide a patient: `hide`","lastModifiedDate":"2021-11-08"},{"lineNumber":364,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":365,"author":{"gitId":"EricBryann"},"content":"Hides a patient in the list. Hidden patients are not shown with `list` command. To show all hidden patients,","lastModifiedDate":"2021-11-02"},{"lineNumber":366,"author":{"gitId":"EricBryann"},"content":"use `list -h`.","lastModifiedDate":"2021-11-02"},{"lineNumber":367,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":368,"author":{"gitId":"EricBryann"},"content":"This command only works for currently not-hidden patients.","lastModifiedDate":"2021-11-02"},{"lineNumber":369,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":370,"author":{"gitId":"EricBryann"},"content":"Format: `hide PATIENT_ID`","lastModifiedDate":"2021-11-02"},{"lineNumber":371,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":372,"author":{"gitId":"justinfidelis"},"content":"Example: `hide 1`","lastModifiedDate":"2021-11-08"},{"lineNumber":373,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":374,"author":{"gitId":"justinfidelis"},"content":"Expected Output:","lastModifiedDate":"2021-11-08"},{"lineNumber":375,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":376,"author":{"gitId":"justinfidelis"},"content":"`The patient with ID 1 is now hidden.`","lastModifiedDate":"2021-11-08"},{"lineNumber":377,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":378,"author":{"gitId":"justinfidelis"},"content":"### 4.3.8 Show a patient: `show`","lastModifiedDate":"2021-11-08"},{"lineNumber":379,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":380,"author":{"gitId":"EricBryann"},"content":"Show a patient in the list. Shown (not-hidden) patients are shown on `list`","lastModifiedDate":"2021-11-02"},{"lineNumber":381,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":382,"author":{"gitId":"EricBryann"},"content":"This command only works for currently hidden patients.","lastModifiedDate":"2021-11-02"},{"lineNumber":383,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":384,"author":{"gitId":"EricBryann"},"content":"Format: `show PATIENT_ID`","lastModifiedDate":"2021-11-02"},{"lineNumber":385,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":386,"author":{"gitId":"justinfidelis"},"content":"Example: `show 1`","lastModifiedDate":"2021-11-08"},{"lineNumber":387,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":388,"author":{"gitId":"justinfidelis"},"content":"Expected Output:","lastModifiedDate":"2021-11-08"},{"lineNumber":389,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":390,"author":{"gitId":"justinfidelis"},"content":"`The patient with ID 1 is now not hidden.`","lastModifiedDate":"2021-11-08"},{"lineNumber":391,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":392,"author":{"gitId":"justinfidelis"},"content":"## 4.4 Scheduler Commands","lastModifiedDate":"2021-11-08"},{"lineNumber":393,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":394,"author":{"gitId":"justinfidelis"},"content":"### 4.4.1 Add an appointment: `add`","lastModifiedDate":"2021-11-08"},{"lineNumber":395,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":396,"author":{"gitId":"justinfidelis"},"content":"Adds an appointment to the appointment manager. MedBot will check if the appointment clashes with others and display an ","lastModifiedDate":"2021-11-08"},{"lineNumber":397,"author":{"gitId":"justinfidelis"},"content":"error message if it does. Upon successfully adding an appointment, MedBot will generate a unique appointment ID for ","lastModifiedDate":"2021-11-08"},{"lineNumber":398,"author":{"gitId":"justinfidelis"},"content":"reference and use in other commands.","lastModifiedDate":"2021-11-08"},{"lineNumber":399,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":400,"author":{"gitId":"justinfidelis"},"content":"Format: `add p/PATIENT_ID s/STAFF_ID d/DATE_TIME`","lastModifiedDate":"2021-10-26"},{"lineNumber":401,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":402,"author":{"gitId":"justinfidelis"},"content":"The format for `DATE_TIME` is `DDMMYY hhmm`. I.e. 9 February 2021, 0800HRS should be written as `090221 0800`","lastModifiedDate":"2021-10-26"},{"lineNumber":403,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":404,"author":{"gitId":"justinfidelis"},"content":"Example: `add p/2 s/1 d/091121 1200`","lastModifiedDate":"2021-11-08"},{"lineNumber":405,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":406,"author":{"gitId":"justinfidelis"},"content":"Expected output:","lastModifiedDate":"2021-10-26"},{"lineNumber":407,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":408,"author":{"gitId":"justinfidelis"},"content":"```","lastModifiedDate":"2021-10-26"},{"lineNumber":409,"author":{"gitId":"justinfidelis"},"content":"Added appointment with Appointment ID: 1","lastModifiedDate":"2021-11-08"},{"lineNumber":410,"author":{"gitId":"justinfidelis"},"content":"Patient ID: 2","lastModifiedDate":"2021-11-08"},{"lineNumber":411,"author":{"gitId":"justinfidelis"},"content":"Staff ID: 1","lastModifiedDate":"2021-11-08"},{"lineNumber":412,"author":{"gitId":"justinfidelis"},"content":"Date/Time: 09 Nov 21 1200HRS","lastModifiedDate":"2021-11-08"},{"lineNumber":413,"author":{"gitId":"justinfidelis"},"content":"```","lastModifiedDate":"2021-10-26"},{"lineNumber":414,"author":{"gitId":"justinfidelis"},"content":"#### Notes:","lastModifiedDate":"2021-11-08"},{"lineNumber":415,"author":{"gitId":"justinfidelis"},"content":"- Appointments are managed on an hourly basis. ","lastModifiedDate":"2021-11-08"},{"lineNumber":416,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":417,"author":{"gitId":"CrimsonTitan79"},"content":"  - e.g. any appointments set to any time between 0800HRS and 0859HRS will be treated as an appointment from 0800HRS to ","lastModifiedDate":"2021-11-07"},{"lineNumber":418,"author":{"gitId":"CrimsonTitan79"},"content":"  0859HRS. ","lastModifiedDate":"2021-11-07"},{"lineNumber":419,"author":{"gitId":"CrimsonTitan79"},"content":"  - No subsequent appointment can then be scheduled for both the patient and the medical staff during that time frame.","lastModifiedDate":"2021-11-07"},{"lineNumber":420,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":421,"author":{"gitId":"justinfidelis"},"content":"### 4.4.2 Delete an appointment: `delete`","lastModifiedDate":"2021-11-08"},{"lineNumber":422,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":423,"author":{"gitId":"justinfidelis"},"content":"Delete an appointment from the appointment manager.","lastModifiedDate":"2021-11-08"},{"lineNumber":424,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":425,"author":{"gitId":"justinfidelis"},"content":"Format: `delete APPOINTMENT_ID`","lastModifiedDate":"2021-10-26"},{"lineNumber":426,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":427,"author":{"gitId":"justinfidelis"},"content":"Example: `delete 1`","lastModifiedDate":"2021-11-08"},{"lineNumber":428,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":429,"author":{"gitId":"justinfidelis"},"content":"Expected output:","lastModifiedDate":"2021-10-26"},{"lineNumber":430,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":431,"author":{"gitId":"justinfidelis"},"content":"```","lastModifiedDate":"2021-10-26"},{"lineNumber":432,"author":{"gitId":"justinfidelis"},"content":"Appointment with ID 1 deleted from system.","lastModifiedDate":"2021-11-08"},{"lineNumber":433,"author":{"gitId":"justinfidelis"},"content":"```","lastModifiedDate":"2021-10-26"},{"lineNumber":434,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":435,"author":{"gitId":"justinfidelis"},"content":"#### Notes:","lastModifiedDate":"2021-11-08"},{"lineNumber":436,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":437,"author":{"gitId":"CrimsonTitan79"},"content":"* Deleting an appointment will not affect the appointment IDs of other appointments.","lastModifiedDate":"2021-11-07"},{"lineNumber":438,"author":{"gitId":"EricBryann"},"content":"  \u003cbr\u003eReasons :","lastModifiedDate":"2021-11-03"},{"lineNumber":439,"author":{"gitId":"EricBryann"},"content":"    * ID uniquely identifies an appointment and should not be changed.","lastModifiedDate":"2021-11-03"},{"lineNumber":440,"author":{"gitId":"EricBryann"},"content":"    * ID does not indicate the row number in the appointment list.","lastModifiedDate":"2021-11-03"},{"lineNumber":441,"author":{"gitId":"justinfidelis"},"content":"* Deleting a patient/medical staff will also delete all appointments associated with them.","lastModifiedDate":"2021-11-08"},{"lineNumber":442,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":443,"author":{"gitId":"justinfidelis"},"content":"### 4.4.3 View an appointment\u0027s information: `view`","lastModifiedDate":"2021-11-08"},{"lineNumber":444,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":445,"author":{"gitId":"justinfidelis"},"content":"View the information of an appointment.","lastModifiedDate":"2021-10-26"},{"lineNumber":446,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":447,"author":{"gitId":"justinfidelis"},"content":"Format: `view APPOINTMENT_ID`","lastModifiedDate":"2021-10-26"},{"lineNumber":448,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":449,"author":{"gitId":"justinfidelis"},"content":"Example: `view 1`","lastModifiedDate":"2021-11-08"},{"lineNumber":450,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":451,"author":{"gitId":"justinfidelis"},"content":"Expected output:","lastModifiedDate":"2021-10-26"},{"lineNumber":452,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":453,"author":{"gitId":"justinfidelis"},"content":"```","lastModifiedDate":"2021-10-26"},{"lineNumber":454,"author":{"gitId":"justinfidelis"},"content":"Here is the requested appointment information:","lastModifiedDate":"2021-11-08"},{"lineNumber":455,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":456,"author":{"gitId":"justinfidelis"},"content":"Appointment ID: 1","lastModifiedDate":"2021-11-08"},{"lineNumber":457,"author":{"gitId":"justinfidelis"},"content":"Patient ID: 1","lastModifiedDate":"2021-11-08"},{"lineNumber":458,"author":{"gitId":"justinfidelis"},"content":"Staff ID: 1","lastModifiedDate":"2021-11-08"},{"lineNumber":459,"author":{"gitId":"justinfidelis"},"content":"Date/Time: 12 Nov 21 1200HRS","lastModifiedDate":"2021-11-08"},{"lineNumber":460,"author":{"gitId":"justinfidelis"},"content":"```","lastModifiedDate":"2021-10-26"},{"lineNumber":461,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":462,"author":{"gitId":"justinfidelis"},"content":"### 4.4.4 List information of all appointments: `list`","lastModifiedDate":"2021-11-08"},{"lineNumber":463,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":464,"author":{"gitId":"EricBryann"},"content":"List the information of all appointments, including those of hidden patients.","lastModifiedDate":"2021-11-02"},{"lineNumber":465,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":466,"author":{"gitId":"justinfidelis"},"content":"Format: `list`","lastModifiedDate":"2021-10-26"},{"lineNumber":467,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":468,"author":{"gitId":"justinfidelis"},"content":"Example output:","lastModifiedDate":"2021-10-26"},{"lineNumber":469,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":470,"author":{"gitId":"justinfidelis"},"content":"```","lastModifiedDate":"2021-10-26"},{"lineNumber":471,"author":{"gitId":"justinfidelis"},"content":"Here is a list of all appointments:","lastModifiedDate":"2021-10-26"},{"lineNumber":472,"author":{"gitId":"justinfidelis"},"content":" -------------------------------------------------------------------------------------------------- ","lastModifiedDate":"2021-10-26"},{"lineNumber":473,"author":{"gitId":"justinfidelis"},"content":" |  ID  |     Date/Time     | Patient ID |     Patient Name     | Staff ID |      Staff Name      | ","lastModifiedDate":"2021-10-26"},{"lineNumber":474,"author":{"gitId":"justinfidelis"},"content":" -------------------------------------------------------------------------------------------------- ","lastModifiedDate":"2021-10-26"},{"lineNumber":475,"author":{"gitId":"justinfidelis"},"content":" | 1    | 12 Nov 21 1200HRS | 1          | John Doe             | 1        | Dr Tan               | ","lastModifiedDate":"2021-11-08"},{"lineNumber":476,"author":{"gitId":"justinfidelis"},"content":" | 2    | 10 Nov 21 1100HRS | 1          | John Doe             | 1        | Dr Tan               | ","lastModifiedDate":"2021-11-08"},{"lineNumber":477,"author":{"gitId":"justinfidelis"},"content":" | 3    | 19 Nov 21 1400HRS | 3          | Muhd Faiz            | 2        | Dr Lee               | ","lastModifiedDate":"2021-11-08"},{"lineNumber":478,"author":{"gitId":"justinfidelis"},"content":" | 4    | 01 Dec 21 0900HRS | 2          | Alice Tan            | 2        | Dr Lee               | ","lastModifiedDate":"2021-11-08"},{"lineNumber":479,"author":{"gitId":"CrimsonTitan79"},"content":" -------------------------------------------------------------------------------------------------- ","lastModifiedDate":"2021-10-28"},{"lineNumber":480,"author":{"gitId":"justinfidelis"},"content":"```","lastModifiedDate":"2021-10-26"},{"lineNumber":481,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":482,"author":{"gitId":"justinfidelis"},"content":"#### Notes:","lastModifiedDate":"2021-11-08"},{"lineNumber":483,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":484,"author":{"gitId":"CrimsonTitan79"},"content":"* `Patient Name` and `Staff Name` that are longer than 20 characters will be truncated to first 17 characters ","lastModifiedDate":"2021-11-07"},{"lineNumber":485,"author":{"gitId":"CrimsonTitan79"},"content":"with a `...` appended.","lastModifiedDate":"2021-11-07"},{"lineNumber":486,"author":{"gitId":"EricBryann"},"content":"  \u003cbr\u003eReason:","lastModifiedDate":"2021-11-03"},{"lineNumber":487,"author":{"gitId":"EricBryann"},"content":"  * To maintain the table layout and prevent overflow of a cell.","lastModifiedDate":"2021-11-03"},{"lineNumber":488,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":489,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":490,"author":{"gitId":"justinfidelis"},"content":"### 4.4.5 Edit an appointment\u0027s information: `edit`","lastModifiedDate":"2021-11-08"},{"lineNumber":491,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":492,"author":{"gitId":"justinfidelis"},"content":"Edit an appointment\u0027s information. MedBot will check if the edited appointment clashes with others and display an error","lastModifiedDate":"2021-11-08"},{"lineNumber":493,"author":{"gitId":"justinfidelis"},"content":"message if it does.","lastModifiedDate":"2021-11-08"},{"lineNumber":494,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":495,"author":{"gitId":"justinfidelis"},"content":"Format: `edit APPOINTMENT_ID [p/PATIENT_ID] [s/STAFF_ID] [d/DATE_TIME]`","lastModifiedDate":"2021-11-08"},{"lineNumber":496,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":497,"author":{"gitId":"justinfidelis"},"content":"At least one parameter must be provided. Only the parameters that are given will be modified.","lastModifiedDate":"2021-11-08"},{"lineNumber":498,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":499,"author":{"gitId":"justinfidelis"},"content":"Example: `edit 1 d/121121 1200`","lastModifiedDate":"2021-11-08"},{"lineNumber":500,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":501,"author":{"gitId":"justinfidelis"},"content":"Expected output:","lastModifiedDate":"2021-11-08"},{"lineNumber":502,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":503,"author":{"gitId":"justinfidelis"},"content":"```","lastModifiedDate":"2021-11-08"},{"lineNumber":504,"author":{"gitId":"justinfidelis"},"content":"The information of appointment with ID 1 has been edited to:","lastModifiedDate":"2021-11-08"},{"lineNumber":505,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":506,"author":{"gitId":"justinfidelis"},"content":"Appointment ID: 1","lastModifiedDate":"2021-11-08"},{"lineNumber":507,"author":{"gitId":"justinfidelis"},"content":"Patient ID: 1","lastModifiedDate":"2021-11-08"},{"lineNumber":508,"author":{"gitId":"justinfidelis"},"content":"Staff ID: 1","lastModifiedDate":"2021-11-08"},{"lineNumber":509,"author":{"gitId":"justinfidelis"},"content":"Date/Time: 12 Nov 21 1200HRS","lastModifiedDate":"2021-11-08"},{"lineNumber":510,"author":{"gitId":"justinfidelis"},"content":"```","lastModifiedDate":"2021-11-08"},{"lineNumber":511,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":512,"author":{"gitId":"justinfidelis"},"content":"### 4.4.6 Find appointments: `find`","lastModifiedDate":"2021-11-08"},{"lineNumber":513,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":514,"author":{"gitId":"CrimsonTitan79"},"content":"- Finds a person’s (patient or medical staff) list of appointments. ","lastModifiedDate":"2021-11-07"},{"lineNumber":515,"author":{"gitId":"CrimsonTitan79"},"content":"- The search query can be filtered by date/time to display the list of appointments before/after a certain date ","lastModifiedDate":"2021-11-07"},{"lineNumber":516,"author":{"gitId":"CrimsonTitan79"},"content":"involving the particular person.","lastModifiedDate":"2021-11-07"},{"lineNumber":517,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":518,"author":{"gitId":"CrimsonTitan79"},"content":"Format: `find PERSON_TYPE/PERSON_ID [FILTER_TYPE/DATE_TIME]`","lastModifiedDate":"2021-11-07"},{"lineNumber":519,"author":{"gitId":"CrimsonTitan79"},"content":"- The format for DATE_TIME is DDMMYY hhmm. I.e. 9 February 2021, 0800HRS should be written as 090221 0800","lastModifiedDate":"2021-11-07"},{"lineNumber":520,"author":{"gitId":"CrimsonTitan79"},"content":"- `PERSON_TYPE` is p (patient) or s (staff)","lastModifiedDate":"2021-11-07"},{"lineNumber":521,"author":{"gitId":"CrimsonTitan79"},"content":"- `FILTER_TYPE` is b (before) or a (after)","lastModifiedDate":"2021-11-07"},{"lineNumber":522,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":523,"author":{"gitId":"justinfidelis"},"content":"Example: `find p/6`","lastModifiedDate":"2021-11-08"},{"lineNumber":524,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":525,"author":{"gitId":"CrimsonTitan79"},"content":"Example Output:","lastModifiedDate":"2021-11-07"},{"lineNumber":526,"author":{"gitId":"CrimsonTitan79"},"content":"```","lastModifiedDate":"2021-11-07"},{"lineNumber":527,"author":{"gitId":"CrimsonTitan79"},"content":"Here is a list of matched appointments:","lastModifiedDate":"2021-11-07"},{"lineNumber":528,"author":{"gitId":"CrimsonTitan79"},"content":" -------------------------------------------------------------------------------------------------- ","lastModifiedDate":"2021-11-07"},{"lineNumber":529,"author":{"gitId":"CrimsonTitan79"},"content":" |  ID  |     Date/Time     | Patient ID |     Patient Name     | Staff ID |      Staff Name        | ","lastModifiedDate":"2021-11-07"},{"lineNumber":530,"author":{"gitId":"CrimsonTitan79"},"content":" -------------------------------------------------------------------------------------------------- ","lastModifiedDate":"2021-11-07"},{"lineNumber":531,"author":{"gitId":"CrimsonTitan79"},"content":" | 6    | 04 Jan 22 1300HRS | 6          | Emma                 | 2        | Doctor Two           | ","lastModifiedDate":"2021-11-07"},{"lineNumber":532,"author":{"gitId":"CrimsonTitan79"},"content":" | 10   | 04 Jan 22 1800HRS | 6          | Emma                 | 2        | Doctor Two           | ","lastModifiedDate":"2021-11-07"},{"lineNumber":533,"author":{"gitId":"CrimsonTitan79"},"content":" | 11   | 05 Jan 22 1300HRS | 6          | Emma                 | 2        | Doctor Two           | ","lastModifiedDate":"2021-11-07"},{"lineNumber":534,"author":{"gitId":"CrimsonTitan79"},"content":" | 12   | 06 Jan 22 1300HRS | 6          | Emma                 | 2        | Doctor Two           | ","lastModifiedDate":"2021-11-07"},{"lineNumber":535,"author":{"gitId":"CrimsonTitan79"},"content":" | 13   | 07 Jan 22 1300HRS | 6          | Emma                 | 2        | Doctor Two           | ","lastModifiedDate":"2021-11-07"},{"lineNumber":536,"author":{"gitId":"CrimsonTitan79"},"content":" | 14   | 08 Jan 22 1300HRS | 6          | Emma                 | 2        | Doctor Two           | ","lastModifiedDate":"2021-11-07"},{"lineNumber":537,"author":{"gitId":"CrimsonTitan79"},"content":" -------------------------------------------------------------------------------------------------- ","lastModifiedDate":"2021-11-07"},{"lineNumber":538,"author":{"gitId":"CrimsonTitan79"},"content":"```","lastModifiedDate":"2021-11-07"},{"lineNumber":539,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":540,"author":{"gitId":"justinfidelis"},"content":"Example: `find p/6 a/060122 0000`","lastModifiedDate":"2021-11-08"},{"lineNumber":541,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":542,"author":{"gitId":"CrimsonTitan79"},"content":"Example Output","lastModifiedDate":"2021-11-07"},{"lineNumber":543,"author":{"gitId":"CrimsonTitan79"},"content":"```","lastModifiedDate":"2021-11-07"},{"lineNumber":544,"author":{"gitId":"CrimsonTitan79"},"content":" -------------------------------------------------------------------------------------------------- ","lastModifiedDate":"2021-11-07"},{"lineNumber":545,"author":{"gitId":"CrimsonTitan79"},"content":" |  ID  |     Date/Time     | Patient ID |     Patient Name     | Staff ID  |      Staff Name       | ","lastModifiedDate":"2021-11-07"},{"lineNumber":546,"author":{"gitId":"CrimsonTitan79"},"content":" -------------------------------------------------------------------------------------------------- ","lastModifiedDate":"2021-11-07"},{"lineNumber":547,"author":{"gitId":"CrimsonTitan79"},"content":" | 12   | 06 Jan 22 1300HRS | 6          | Emma                 | 2        | Doctor Two           | ","lastModifiedDate":"2021-11-07"},{"lineNumber":548,"author":{"gitId":"CrimsonTitan79"},"content":" | 13   | 07 Jan 22 1300HRS | 6          | Emma                 | 2        | Doctor Two           | ","lastModifiedDate":"2021-11-07"},{"lineNumber":549,"author":{"gitId":"CrimsonTitan79"},"content":" | 14   | 08 Jan 22 1300HRS | 6          | Emma                 | 2        | Doctor Two           | ","lastModifiedDate":"2021-11-07"},{"lineNumber":550,"author":{"gitId":"CrimsonTitan79"},"content":" -------------------------------------------------------------------------------------------------- ","lastModifiedDate":"2021-11-07"},{"lineNumber":551,"author":{"gitId":"CrimsonTitan79"},"content":"```","lastModifiedDate":"2021-11-07"},{"lineNumber":552,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":553,"author":{"gitId":"justinfidelis"},"content":"#### Notes:","lastModifiedDate":"2021-11-08"},{"lineNumber":554,"author":{"gitId":"CrimsonTitan79"},"content":"- Before or after DATE_TIME also includes the appointment (if any) at the date/time specified.","lastModifiedDate":"2021-11-07"},{"lineNumber":555,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":556,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":557,"author":{"gitId":"CrimsonTitan79"},"content":"## 5. FAQ","lastModifiedDate":"2021-11-07"},{"lineNumber":558,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":559,"author":{"gitId":"-"},"content":"**Q**: How do I transfer my data to another computer?","lastModifiedDate":"2020-05-24"},{"lineNumber":560,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":561,"author":{"gitId":"justinfidelis"},"content":"**A**: All data will be stored in the `MedBotData` directory that is created in the same working directory as `MedBot.jar`.","lastModifiedDate":"2021-11-08"},{"lineNumber":562,"author":{"gitId":"CrimsonTitan79"},"content":"There are 3 text files in `MedBotData` - `patient.txt`, `staff.txt` and `appointment.txt`. Simply transfer","lastModifiedDate":"2021-11-07"},{"lineNumber":563,"author":{"gitId":"justinfidelis"},"content":"the `MedBotData` directory containing the three text files to the other computer, and run the `MedBot.jar` in the same new","lastModifiedDate":"2021-11-08"},{"lineNumber":564,"author":{"gitId":"CrimsonTitan79"},"content":"location as the `MedBotData` directory.","lastModifiedDate":"2021-11-07"},{"lineNumber":565,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":566,"author":{"gitId":"CrimsonTitan79"},"content":"## 6. Command Summary","lastModifiedDate":"2021-11-07"},{"lineNumber":567,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":568,"author":{"gitId":"justinfidelis"},"content":"### 6.1 General Commands","lastModifiedDate":"2021-11-08"},{"lineNumber":569,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":570,"author":{"gitId":"Kureans"},"content":"| Action       | Format + Examples |","lastModifiedDate":"2021-10-24"},{"lineNumber":571,"author":{"gitId":"Kureans"},"content":"| :---         | :-----            |","lastModifiedDate":"2021-10-24"},{"lineNumber":572,"author":{"gitId":"Kureans"},"content":"| **help**     | `help [COMMAND]` \u003cbr/\u003eeg., `help add`|","lastModifiedDate":"2021-10-24"},{"lineNumber":573,"author":{"gitId":"justinfidelis"},"content":"| **switch**   | `switch [VIEW_TYPE]` \u003cbr/\u003eeg., `switch s`|","lastModifiedDate":"2021-11-08"},{"lineNumber":574,"author":{"gitId":"jushg"},"content":"| **get view** | `get view`|","lastModifiedDate":"2021-10-26"},{"lineNumber":575,"author":{"gitId":"Kureans"},"content":"| **exit**     | `exit`|","lastModifiedDate":"2021-10-24"},{"lineNumber":576,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":577,"author":{"gitId":"justinfidelis"},"content":"### 6.2 Patient/Medical Staff Management Commands","lastModifiedDate":"2021-11-08"},{"lineNumber":578,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":579,"author":{"gitId":"Kureans"},"content":"| Action       | Format + Examples        |","lastModifiedDate":"2021-10-24"},{"lineNumber":580,"author":{"gitId":"Kureans"},"content":"| :---         | :---                     |","lastModifiedDate":"2021-10-24"},{"lineNumber":581,"author":{"gitId":"justinfidelis"},"content":"| **add**      | `add i/PERSON_ID [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS]`\u003cbr/\u003eeg.,`add i/S1231234A n/John Smith p/91234567 e/johnsmit@eg.com a/ABC Street 123`|","lastModifiedDate":"2021-10-29"},{"lineNumber":582,"author":{"gitId":"justinfidelis"},"content":"| **delete**   | `delete [PERSON_ID]`\u003cbr/\u003eeg., `delete 2`|","lastModifiedDate":"2021-11-08"},{"lineNumber":583,"author":{"gitId":"justinfidelis"},"content":"| **view**     | `view [PERSON_ID]`\u003cbr/\u003eeg., `view 3`|","lastModifiedDate":"2021-11-08"},{"lineNumber":584,"author":{"gitId":"CrimsonTitan79"},"content":"| **list**     | `list [-h]`|","lastModifiedDate":"2021-11-07"},{"lineNumber":585,"author":{"gitId":"justinfidelis"},"content":"| **edit**     | `edit PERSON_ID [i/PATIENT_IC] [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS]` \u003cbr/\u003eeg., `edit 2 n/Bob Smith`|","lastModifiedDate":"2021-10-29"},{"lineNumber":586,"author":{"gitId":"Kureans"},"content":"| **find**     | `find [i/PERSON_IC] [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS]`\u003cbr/\u003eeg.,`find i/s1231234A`|","lastModifiedDate":"2021-10-24"},{"lineNumber":587,"author":{"gitId":"EricBryann"},"content":"| **hide**     | `hide PATIENT_ID`\u003cbr/\u003eeg., `hide 1`|","lastModifiedDate":"2021-11-02"},{"lineNumber":588,"author":{"gitId":"EricBryann"},"content":"| **show**     | `show PATIENT_ID`\u003cbr/\u003eeg., `show 1`|","lastModifiedDate":"2021-11-02"},{"lineNumber":589,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":590,"author":{"gitId":"justinfidelis"},"content":"### 6.3 Scheduler Commands","lastModifiedDate":"2021-11-08"},{"lineNumber":591,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":592,"author":{"gitId":"Kureans"},"content":"| Action       | Format + Examples        |","lastModifiedDate":"2021-10-24"},{"lineNumber":593,"author":{"gitId":"Kureans"},"content":"| :---         | :---                     |","lastModifiedDate":"2021-10-24"},{"lineNumber":594,"author":{"gitId":"justinfidelis"},"content":"| **add**      | `add p/PERSON_ID s/STAFF_ID d/DATE_TIME` \u003cbr/\u003e E.g., `add p/19 s/1 d/090222 0900`|","lastModifiedDate":"2021-10-26"},{"lineNumber":595,"author":{"gitId":"justinfidelis"},"content":"| **delete**   | `delete APPOINTMENT_ID`  |","lastModifiedDate":"2021-10-26"},{"lineNumber":596,"author":{"gitId":"justinfidelis"},"content":"| **view**     | `view APPOINTMENT_ID` \u003cbr/\u003e E.g., `view 3` |","lastModifiedDate":"2021-11-08"},{"lineNumber":597,"author":{"gitId":"justinfidelis"},"content":"| **list**     | `list`                   |","lastModifiedDate":"2021-11-08"},{"lineNumber":598,"author":{"gitId":"CrimsonTitan79"},"content":"| **edit**     | `edit APPOINTMENT_ID [p/PATIENT_ID] [s/STAFF_ID] [d/DATE_TIME]` \u003cbr/\u003e E.g., `edit 2 s/3 d/100322 0800`|         ","lastModifiedDate":"2021-11-07"},{"lineNumber":599,"author":{"gitId":"CrimsonTitan79"},"content":"| **find**     | `find PERSON_TYPE/PERSON_ID [FILTER_TYPE/DATE_TIME]`\u003cbr/\u003e E.g., `find s/3 b/100322 0800`|         ","lastModifiedDate":"2021-11-07"},{"lineNumber":600,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":601,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":602,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":603,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"}],"authorContributionMap":{"justinfidelis":314,"CrimsonTitan79":96,"jushg":8,"-":28,"Kureans":89,"EricBryann":68}},{"path":"docs/diagrams/pumlfiles/AddAppointmentSequenceDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"justinfidelis"},"content":"@startuml","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"justinfidelis"},"content":"!define ENTITY_COLOR_0 #FF4600","lastModifiedDate":"2021-10-27"},{"lineNumber":3,"author":{"gitId":"justinfidelis"},"content":"!define ENTITY_COLOR_1 #FF7100","lastModifiedDate":"2021-10-27"},{"lineNumber":4,"author":{"gitId":"justinfidelis"},"content":"!define ENTITY_COLOR_2 #FF9700","lastModifiedDate":"2021-10-27"},{"lineNumber":5,"author":{"gitId":"justinfidelis"},"content":"!define ENTITY_COLOR_3 #FFBE00","lastModifiedDate":"2021-10-27"},{"lineNumber":6,"author":{"gitId":"justinfidelis"},"content":"!define ENTITY_COLOR_4 #FFF400","lastModifiedDate":"2021-10-27"},{"lineNumber":7,"author":{"gitId":"justinfidelis"},"content":"!define ENTITY_COLOR_5 #B6F400","lastModifiedDate":"2021-10-27"},{"lineNumber":8,"author":{"gitId":"justinfidelis"},"content":"!define ENTITY_COLOR_6 #8CF400","lastModifiedDate":"2021-10-27"},{"lineNumber":9,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":10,"author":{"gitId":"justinfidelis"},"content":"!define ACTIVATION_COLOR_0 #FF8E66","lastModifiedDate":"2021-10-27"},{"lineNumber":11,"author":{"gitId":"justinfidelis"},"content":"!define ACTIVATION_COLOR_1 #FFAC6D","lastModifiedDate":"2021-10-27"},{"lineNumber":12,"author":{"gitId":"justinfidelis"},"content":"!define ACTIVATION_COLOR_1a #FFC093","lastModifiedDate":"2021-10-27"},{"lineNumber":13,"author":{"gitId":"justinfidelis"},"content":"!define ACTIVATION_COLOR_1b #FFD6BA","lastModifiedDate":"2021-10-27"},{"lineNumber":14,"author":{"gitId":"justinfidelis"},"content":"!define ACTIVATION_COLOR_2 #FFBF66","lastModifiedDate":"2021-10-27"},{"lineNumber":15,"author":{"gitId":"justinfidelis"},"content":"!define ACTIVATION_COLOR_3 #FFD366","lastModifiedDate":"2021-10-27"},{"lineNumber":16,"author":{"gitId":"justinfidelis"},"content":"!define ACTIVATION_COLOR_4 #FFF766","lastModifiedDate":"2021-10-27"},{"lineNumber":17,"author":{"gitId":"justinfidelis"},"content":"!define ACTIVATION_COLOR_5 #CDF260","lastModifiedDate":"2021-10-27"},{"lineNumber":18,"author":{"gitId":"justinfidelis"},"content":"!define ACTIVATION_COLOR_6 #B5F260","lastModifiedDate":"2021-10-27"},{"lineNumber":19,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":20,"author":{"gitId":"justinfidelis"},"content":"participant \":AddAppointmentCommand\" as command ENTITY_COLOR_0","lastModifiedDate":"2021-10-27"},{"lineNumber":21,"author":{"gitId":"justinfidelis"},"content":"participant \":Scheduler\" as scheduler ENTITY_COLOR_1","lastModifiedDate":"2021-10-27"},{"lineNumber":22,"author":{"gitId":"justinfidelis"},"content":"participant \":PatientList\" as PL ENTITY_COLOR_2","lastModifiedDate":"2021-10-27"},{"lineNumber":23,"author":{"gitId":"justinfidelis"},"content":"participant \":Patient\" as patient ENTITY_COLOR_3","lastModifiedDate":"2021-10-27"},{"lineNumber":24,"author":{"gitId":"justinfidelis"},"content":"participant \":MedicalStaffList\" as SL ENTITY_COLOR_4","lastModifiedDate":"2021-10-27"},{"lineNumber":25,"author":{"gitId":"justinfidelis"},"content":"participant \":Staff\" as staff ENTITY_COLOR_5","lastModifiedDate":"2021-10-27"},{"lineNumber":26,"author":{"gitId":"justinfidelis"},"content":"participant \":SchedulerAppointmentList\" as AL ENTITY_COLOR_6","lastModifiedDate":"2021-10-27"},{"lineNumber":27,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":28,"author":{"gitId":"justinfidelis"},"content":"autoactivate on","lastModifiedDate":"2021-10-27"},{"lineNumber":29,"author":{"gitId":"justinfidelis"},"content":"command -\u003e scheduler ACTIVATION_COLOR_1: addAppointment(appointment)","lastModifiedDate":"2021-10-27"},{"lineNumber":30,"author":{"gitId":"justinfidelis"},"content":"scheduler -\u003e scheduler ACTIVATION_COLOR_1a: checkPatientAvailability\\n(patientId, dateTimeCode)","lastModifiedDate":"2021-10-27"},{"lineNumber":31,"author":{"gitId":"justinfidelis"},"content":"scheduler -\u003e PL ACTIVATION_COLOR_2: getAppointmentId\\n(patientId, dateTimeCode)","lastModifiedDate":"2021-10-27"},{"lineNumber":32,"author":{"gitId":"justinfidelis"},"content":"PL -\u003e patient ACTIVATION_COLOR_3: getAppointmentId\\n(dateTimeCode)","lastModifiedDate":"2021-10-27"},{"lineNumber":33,"author":{"gitId":"justinfidelis"},"content":"patient --\u003e PL: appointmentId","lastModifiedDate":"2021-10-27"},{"lineNumber":34,"author":{"gitId":"justinfidelis"},"content":"PL --\u003e scheduler: appointmentId","lastModifiedDate":"2021-10-27"},{"lineNumber":35,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":36,"author":{"gitId":"justinfidelis"},"content":"break appointmentId !\u003d -1","lastModifiedDate":"2021-10-27"},{"lineNumber":37,"author":{"gitId":"justinfidelis"},"content":"note over command, scheduler","lastModifiedDate":"2021-10-27"},{"lineNumber":38,"author":{"gitId":"justinfidelis"},"content":"Exception is thrown here if patient","lastModifiedDate":"2021-10-27"},{"lineNumber":39,"author":{"gitId":"justinfidelis"},"content":"has an existing appointment at","lastModifiedDate":"2021-10-27"},{"lineNumber":40,"author":{"gitId":"justinfidelis"},"content":"this date and time.","lastModifiedDate":"2021-10-27"},{"lineNumber":41,"author":{"gitId":"justinfidelis"},"content":"end note","lastModifiedDate":"2021-10-27"},{"lineNumber":42,"author":{"gitId":"justinfidelis"},"content":"end","lastModifiedDate":"2021-10-27"},{"lineNumber":43,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":44,"author":{"gitId":"justinfidelis"},"content":"scheduler --\u003e scheduler","lastModifiedDate":"2021-10-27"},{"lineNumber":45,"author":{"gitId":"justinfidelis"},"content":"scheduler -\u003e scheduler ACTIVATION_COLOR_1a: checkStaffAvailability\\n(staffId, dateTimeCode)","lastModifiedDate":"2021-10-27"},{"lineNumber":46,"author":{"gitId":"justinfidelis"},"content":"scheduler -\u003e SL ACTIVATION_COLOR_4: getAppointmentId\\n(staffId, dateTimeCode)","lastModifiedDate":"2021-10-27"},{"lineNumber":47,"author":{"gitId":"justinfidelis"},"content":"SL -\u003e staff ACTIVATION_COLOR_5: getAppointmentId\\n(dateTimeCode)","lastModifiedDate":"2021-10-27"},{"lineNumber":48,"author":{"gitId":"justinfidelis"},"content":"staff --\u003e SL","lastModifiedDate":"2021-10-27"},{"lineNumber":49,"author":{"gitId":"justinfidelis"},"content":"SL --\u003e scheduler","lastModifiedDate":"2021-10-27"},{"lineNumber":50,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":51,"author":{"gitId":"justinfidelis"},"content":"break appointmentId !\u003d -1","lastModifiedDate":"2021-10-27"},{"lineNumber":52,"author":{"gitId":"justinfidelis"},"content":"note over command, scheduler","lastModifiedDate":"2021-10-27"},{"lineNumber":53,"author":{"gitId":"justinfidelis"},"content":"Exception is thrown here if staff","lastModifiedDate":"2021-10-27"},{"lineNumber":54,"author":{"gitId":"justinfidelis"},"content":"has an existing appointment at","lastModifiedDate":"2021-10-27"},{"lineNumber":55,"author":{"gitId":"justinfidelis"},"content":"this date and time.","lastModifiedDate":"2021-10-27"},{"lineNumber":56,"author":{"gitId":"justinfidelis"},"content":"end note","lastModifiedDate":"2021-10-27"},{"lineNumber":57,"author":{"gitId":"justinfidelis"},"content":"end","lastModifiedDate":"2021-10-27"},{"lineNumber":58,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":59,"author":{"gitId":"justinfidelis"},"content":"scheduler --\u003e scheduler","lastModifiedDate":"2021-10-27"},{"lineNumber":60,"author":{"gitId":"justinfidelis"},"content":"scheduler -\u003e scheduler ACTIVATION_COLOR_1a: insertAppointment(appointment)","lastModifiedDate":"2021-10-27"},{"lineNumber":61,"author":{"gitId":"justinfidelis"},"content":"scheduler -\u003e AL ACTIVATION_COLOR_6: addAppointment(appointment)","lastModifiedDate":"2021-10-27"},{"lineNumber":62,"author":{"gitId":"justinfidelis"},"content":"AL --\u003e scheduler: appointmentId","lastModifiedDate":"2021-10-27"},{"lineNumber":63,"author":{"gitId":"justinfidelis"},"content":"scheduler -\u003e PL ACTIVATION_COLOR_2: addAppointment\\n(patientId, appointment)","lastModifiedDate":"2021-10-27"},{"lineNumber":64,"author":{"gitId":"justinfidelis"},"content":"PL -\u003e patient ACTIVATION_COLOR_3: addAppointment\\n(appointment)","lastModifiedDate":"2021-10-27"},{"lineNumber":65,"author":{"gitId":"justinfidelis"},"content":"patient --\u003e PL","lastModifiedDate":"2021-10-27"},{"lineNumber":66,"author":{"gitId":"justinfidelis"},"content":"PL --\u003e scheduler","lastModifiedDate":"2021-10-27"},{"lineNumber":67,"author":{"gitId":"justinfidelis"},"content":"scheduler -\u003e SL ACTIVATION_COLOR_4: addAppointment(staffId, appointment)","lastModifiedDate":"2021-10-27"},{"lineNumber":68,"author":{"gitId":"justinfidelis"},"content":"SL -\u003e staff ACTIVATION_COLOR_5: addAppointment\\n(staffId)","lastModifiedDate":"2021-10-27"},{"lineNumber":69,"author":{"gitId":"justinfidelis"},"content":"staff --\u003e SL","lastModifiedDate":"2021-10-27"},{"lineNumber":70,"author":{"gitId":"justinfidelis"},"content":"SL --\u003e scheduler","lastModifiedDate":"2021-10-27"},{"lineNumber":71,"author":{"gitId":"justinfidelis"},"content":"scheduler --\u003e scheduler","lastModifiedDate":"2021-10-27"},{"lineNumber":72,"author":{"gitId":"justinfidelis"},"content":"scheduler --\u003e command","lastModifiedDate":"2021-10-27"},{"lineNumber":73,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":74,"author":{"gitId":"justinfidelis"},"content":"@enduml","lastModifiedDate":"2021-10-27"}],"authorContributionMap":{"justinfidelis":74}},{"path":"docs/diagrams/pumlfiles/AppointmentCommand.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"jushg"},"content":"@startuml","lastModifiedDate":"2021-10-26"},{"lineNumber":2,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":3,"author":{"gitId":"jushg"},"content":"hide circle","lastModifiedDate":"2021-10-26"},{"lineNumber":4,"author":{"gitId":"jushg"},"content":"skinparam classAttributeIconSize 0","lastModifiedDate":"2021-10-26"},{"lineNumber":5,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":6,"author":{"gitId":"jushg"},"content":"skinparam groupInheritance 6","lastModifiedDate":"2021-10-26"},{"lineNumber":7,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":8,"author":{"gitId":"jushg"},"content":"class \"{abstract} \\n Command\"{","lastModifiedDate":"2021-10-26"},{"lineNumber":9,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":10,"author":{"gitId":"jushg"},"content":"    + exit() : boolean","lastModifiedDate":"2021-10-26"},{"lineNumber":11,"author":{"gitId":"jushg"},"content":"    + {abstract} execute(Scheduler, Ui)","lastModifiedDate":"2021-10-26"},{"lineNumber":12,"author":{"gitId":"jushg"},"content":"}","lastModifiedDate":"2021-10-26"},{"lineNumber":13,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":14,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":15,"author":{"gitId":"jushg"},"content":"package medbot.command.appointmentcommand {","lastModifiedDate":"2021-10-26"},{"lineNumber":16,"author":{"gitId":"jushg"},"content":"class AddAppointmentCommand{","lastModifiedDate":"2021-10-26"},{"lineNumber":17,"author":{"gitId":"jushg"},"content":"    # appointment : Appointment","lastModifiedDate":"2021-10-26"},{"lineNumber":18,"author":{"gitId":"jushg"},"content":"    + execute(Scheduler, Ui)","lastModifiedDate":"2021-10-26"},{"lineNumber":19,"author":{"gitId":"jushg"},"content":"}","lastModifiedDate":"2021-10-26"},{"lineNumber":20,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":21,"author":{"gitId":"jushg"},"content":"class EditAppointmentCommand{","lastModifiedDate":"2021-10-26"},{"lineNumber":22,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":23,"author":{"gitId":"jushg"},"content":"    # appointmentId : int","lastModifiedDate":"2021-10-26"},{"lineNumber":24,"author":{"gitId":"jushg"},"content":"    # appointment : Appointment","lastModifiedDate":"2021-10-26"},{"lineNumber":25,"author":{"gitId":"jushg"},"content":"    + execute(Scheduler, Ui)","lastModifiedDate":"2021-10-26"},{"lineNumber":26,"author":{"gitId":"jushg"},"content":"}","lastModifiedDate":"2021-10-26"},{"lineNumber":27,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":28,"author":{"gitId":"jushg"},"content":"class FindAppointmentCommand{","lastModifiedDate":"2021-10-26"},{"lineNumber":29,"author":{"gitId":"jushg"},"content":"    # appointmentId: int","lastModifiedDate":"2021-10-26"},{"lineNumber":30,"author":{"gitId":"jushg"},"content":"    # personType : PersonType","lastModifiedDate":"2021-10-26"},{"lineNumber":31,"author":{"gitId":"jushg"},"content":"    # filterType : FilterType","lastModifiedDate":"2021-10-26"},{"lineNumber":32,"author":{"gitId":"jushg"},"content":"    # dateTimeCode: int","lastModifiedDate":"2021-10-26"},{"lineNumber":33,"author":{"gitId":"jushg"},"content":"    + execute(Scheduler, Ui)","lastModifiedDate":"2021-10-26"},{"lineNumber":34,"author":{"gitId":"jushg"},"content":"}","lastModifiedDate":"2021-10-26"},{"lineNumber":35,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":36,"author":{"gitId":"jushg"},"content":"class ListAppointmentCommand{","lastModifiedDate":"2021-10-26"},{"lineNumber":37,"author":{"gitId":"jushg"},"content":"    + execute(Scheduler, Ui)","lastModifiedDate":"2021-10-26"},{"lineNumber":38,"author":{"gitId":"jushg"},"content":"}","lastModifiedDate":"2021-10-26"},{"lineNumber":39,"author":{"gitId":"jushg"},"content":"class DeleteAppointmentCommand{","lastModifiedDate":"2021-10-26"},{"lineNumber":40,"author":{"gitId":"jushg"},"content":"    # appointmentId: int","lastModifiedDate":"2021-10-26"},{"lineNumber":41,"author":{"gitId":"jushg"},"content":"    + execute(Scheduler, Ui)","lastModifiedDate":"2021-10-26"},{"lineNumber":42,"author":{"gitId":"jushg"},"content":"}","lastModifiedDate":"2021-10-26"},{"lineNumber":43,"author":{"gitId":"jushg"},"content":"class ViewAppointmentCommand{","lastModifiedDate":"2021-10-26"},{"lineNumber":44,"author":{"gitId":"jushg"},"content":"    appointmentId: int","lastModifiedDate":"2021-10-26"},{"lineNumber":45,"author":{"gitId":"jushg"},"content":"    + execute(Scheduler, Ui)","lastModifiedDate":"2021-10-26"},{"lineNumber":46,"author":{"gitId":"jushg"},"content":"}","lastModifiedDate":"2021-10-26"},{"lineNumber":47,"author":{"gitId":"jushg"},"content":"\"{abstract} \\n Command\" \u003c|-- AddAppointmentCommand","lastModifiedDate":"2021-10-26"},{"lineNumber":48,"author":{"gitId":"jushg"},"content":"\"{abstract} \\n Command\" \u003c|-- EditAppointmentCommand","lastModifiedDate":"2021-10-26"},{"lineNumber":49,"author":{"gitId":"jushg"},"content":"\"{abstract} \\n Command\" \u003c|-- DeleteAppointmentCommand","lastModifiedDate":"2021-10-26"},{"lineNumber":50,"author":{"gitId":"jushg"},"content":"\"{abstract} \\n Command\" \u003c|-- ListAppointmentCommand","lastModifiedDate":"2021-10-26"},{"lineNumber":51,"author":{"gitId":"jushg"},"content":"\"{abstract} \\n Command\" \u003c|-- FindAppointmentCommand","lastModifiedDate":"2021-10-26"},{"lineNumber":52,"author":{"gitId":"jushg"},"content":"\"{abstract} \\n Command\" \u003c|-- ViewAppointmentCommand","lastModifiedDate":"2021-10-26"},{"lineNumber":53,"author":{"gitId":"jushg"},"content":"}","lastModifiedDate":"2021-10-26"},{"lineNumber":54,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":55,"author":{"gitId":"jushg"},"content":"@enduml","lastModifiedDate":"2021-10-26"}],"authorContributionMap":{"jushg":55}},{"path":"docs/diagrams/pumlfiles/ArchitectureDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"jushg"},"content":"@startuml ArchitectureDiagram","lastModifiedDate":"2021-11-03"},{"lineNumber":2,"author":{"gitId":"jushg"},"content":"!include \u003coffice/Concepts/documents\u003e","lastModifiedDate":"2021-11-03"},{"lineNumber":3,"author":{"gitId":"jushg"},"content":"!include \u003coffice/Users/user\u003e","lastModifiedDate":"2021-11-03"},{"lineNumber":4,"author":{"gitId":"jushg"},"content":"!define UI_COLOR #1D8900","lastModifiedDate":"2021-11-03"},{"lineNumber":5,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":6,"author":{"gitId":"jushg"},"content":"\u0027 hide the circles in the diagram","lastModifiedDate":"2021-11-03"},{"lineNumber":7,"author":{"gitId":"jushg"},"content":"hide circle","lastModifiedDate":"2021-11-03"},{"lineNumber":8,"author":{"gitId":"jushg"},"content":"hide empty members","lastModifiedDate":"2021-11-03"},{"lineNumber":9,"author":{"gitId":"jushg"},"content":"skinparam Shadowing false","lastModifiedDate":"2021-11-03"},{"lineNumber":10,"author":{"gitId":"jushg"},"content":"skinparam MinClassWidth 50","lastModifiedDate":"2021-11-03"},{"lineNumber":11,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":12,"author":{"gitId":"jushg"},"content":"skinparam Class {","lastModifiedDate":"2021-11-03"},{"lineNumber":13,"author":{"gitId":"jushg"},"content":"    BorderThickness 1","lastModifiedDate":"2021-11-03"},{"lineNumber":14,"author":{"gitId":"jushg"},"content":"    BorderColor #000000","lastModifiedDate":"2021-11-03"},{"lineNumber":15,"author":{"gitId":"jushg"},"content":"}","lastModifiedDate":"2021-11-03"},{"lineNumber":16,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":17,"author":{"gitId":"jushg"},"content":"package \" \"\u003c\u003cRectangle\u003e\u003e{","lastModifiedDate":"2021-11-03"},{"lineNumber":18,"author":{"gitId":"jushg"},"content":"    class MedBot #grey","lastModifiedDate":"2021-11-03"},{"lineNumber":19,"author":{"gitId":"jushg"},"content":"    class Ui #green","lastModifiedDate":"2021-11-03"},{"lineNumber":20,"author":{"gitId":"jushg"},"content":"    class Parser #lightblue","lastModifiedDate":"2021-11-03"},{"lineNumber":21,"author":{"gitId":"jushg"},"content":"    class Command #blue","lastModifiedDate":"2021-11-03"},{"lineNumber":22,"author":{"gitId":"jushg"},"content":"    class Scheduler #9D0012","lastModifiedDate":"2021-11-03"},{"lineNumber":23,"author":{"gitId":"jushg"},"content":"    class Storage  #A38300","lastModifiedDate":"2021-11-03"},{"lineNumber":24,"author":{"gitId":"jushg"},"content":"}","lastModifiedDate":"2021-11-03"},{"lineNumber":25,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":26,"author":{"gitId":"jushg"},"content":"class \"\u003c$user\u003e\" as User  #83E769","lastModifiedDate":"2021-11-03"},{"lineNumber":27,"author":{"gitId":"jushg"},"content":"class \"\u003c$documents\u003e\" as Files  #FFE374","lastModifiedDate":"2021-11-03"},{"lineNumber":28,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":29,"author":{"gitId":"jushg"},"content":"User .down[#green].\u003e Ui","lastModifiedDate":"2021-11-03"},{"lineNumber":30,"author":{"gitId":"jushg"},"content":"Ui -[#green]left-\u003e Parser","lastModifiedDate":"2021-11-03"},{"lineNumber":31,"author":{"gitId":"jushg"},"content":"Parser -[#lightblue]-\u003e Command","lastModifiedDate":"2021-11-03"},{"lineNumber":32,"author":{"gitId":"jushg"},"content":"Command -[#blue]-\u003e Scheduler","lastModifiedDate":"2021-11-03"},{"lineNumber":33,"author":{"gitId":"jushg"},"content":"Command -[#blue]up-\u003e Ui","lastModifiedDate":"2021-11-03"},{"lineNumber":34,"author":{"gitId":"jushg"},"content":"Scheduler -[#9D0012]-\u003e Storage","lastModifiedDate":"2021-11-03"},{"lineNumber":35,"author":{"gitId":"jushg"},"content":"MedBot -[#grey]up-\u003eUi","lastModifiedDate":"2021-11-03"},{"lineNumber":36,"author":{"gitId":"jushg"},"content":"MedBot -[#grey]-\u003e Storage","lastModifiedDate":"2021-11-03"},{"lineNumber":37,"author":{"gitId":"jushg"},"content":"MedBot -[#grey]left-\u003e Parser","lastModifiedDate":"2021-11-03"},{"lineNumber":38,"author":{"gitId":"jushg"},"content":"MedBot -[#grey]\u003e Scheduler","lastModifiedDate":"2021-11-03"},{"lineNumber":39,"author":{"gitId":"jushg"},"content":"Storage .right[#A38300]..\u003eFiles","lastModifiedDate":"2021-11-03"},{"lineNumber":40,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":41,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":42,"author":{"gitId":"jushg"},"content":"@enduml","lastModifiedDate":"2021-11-03"}],"authorContributionMap":{"jushg":42}},{"path":"docs/diagrams/pumlfiles/Command.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"jushg"},"content":"@startuml","lastModifiedDate":"2021-10-26"},{"lineNumber":2,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":3,"author":{"gitId":"jushg"},"content":"hide circle","lastModifiedDate":"2021-10-26"},{"lineNumber":4,"author":{"gitId":"jushg"},"content":"skinparam classAttributeIconSize 0","lastModifiedDate":"2021-10-26"},{"lineNumber":5,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":6,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":7,"author":{"gitId":"jushg"},"content":"package medbot.command {","lastModifiedDate":"2021-10-26"},{"lineNumber":8,"author":{"gitId":"jushg"},"content":"class \"{abstract} \\n Command\"{","lastModifiedDate":"2021-10-26"},{"lineNumber":9,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":10,"author":{"gitId":"jushg"},"content":"    + exit() : boolean","lastModifiedDate":"2021-10-26"},{"lineNumber":11,"author":{"gitId":"jushg"},"content":"    + execute(Scheduler, Ui) {\u0027abstract\u0027}","lastModifiedDate":"2021-10-26"},{"lineNumber":12,"author":{"gitId":"jushg"},"content":"}","lastModifiedDate":"2021-10-26"},{"lineNumber":13,"author":{"gitId":"jushg"},"content":"together {","lastModifiedDate":"2021-10-26"},{"lineNumber":14,"author":{"gitId":"jushg"},"content":"class ExitCommand {","lastModifiedDate":"2021-10-26"},{"lineNumber":15,"author":{"gitId":"jushg"},"content":"+ exit() : boolean","lastModifiedDate":"2021-10-26"},{"lineNumber":16,"author":{"gitId":"jushg"},"content":"+ execute(Scheduler, Ui)","lastModifiedDate":"2021-10-26"},{"lineNumber":17,"author":{"gitId":"jushg"},"content":"}","lastModifiedDate":"2021-10-26"},{"lineNumber":18,"author":{"gitId":"jushg"},"content":"class GetCurrentViewCommand {","lastModifiedDate":"2021-10-26"},{"lineNumber":19,"author":{"gitId":"jushg"},"content":"- viewType: ViewType","lastModifiedDate":"2021-10-26"},{"lineNumber":20,"author":{"gitId":"jushg"},"content":"+ execute(Scheduler, Ui)","lastModifiedDate":"2021-10-26"},{"lineNumber":21,"author":{"gitId":"jushg"},"content":"}","lastModifiedDate":"2021-10-26"},{"lineNumber":22,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":23,"author":{"gitId":"jushg"},"content":"class HelpCommand {","lastModifiedDate":"2021-10-26"},{"lineNumber":24,"author":{"gitId":"jushg"},"content":"- viewType: ViewType","lastModifiedDate":"2021-10-26"},{"lineNumber":25,"author":{"gitId":"jushg"},"content":"- commandType: CommandType","lastModifiedDate":"2021-10-26"},{"lineNumber":26,"author":{"gitId":"jushg"},"content":"+ execute(Scheduler, Ui)","lastModifiedDate":"2021-10-26"},{"lineNumber":27,"author":{"gitId":"jushg"},"content":"}","lastModifiedDate":"2021-10-26"},{"lineNumber":28,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":29,"author":{"gitId":"jushg"},"content":"class SwitchCommand {","lastModifiedDate":"2021-10-26"},{"lineNumber":30,"author":{"gitId":"jushg"},"content":"- newViewType: ViewType","lastModifiedDate":"2021-10-26"},{"lineNumber":31,"author":{"gitId":"jushg"},"content":"+ execute(Scheduler, Ui)","lastModifiedDate":"2021-10-26"},{"lineNumber":32,"author":{"gitId":"jushg"},"content":"}","lastModifiedDate":"2021-10-26"},{"lineNumber":33,"author":{"gitId":"jushg"},"content":"}","lastModifiedDate":"2021-10-26"},{"lineNumber":34,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":35,"author":{"gitId":"jushg"},"content":"\"{abstract} \\n Command\" \u003c|-up- HelpCommand","lastModifiedDate":"2021-10-26"},{"lineNumber":36,"author":{"gitId":"jushg"},"content":"\"{abstract} \\n Command\" \u003c|-up- ExitCommand","lastModifiedDate":"2021-10-26"},{"lineNumber":37,"author":{"gitId":"jushg"},"content":"\"{abstract} \\n Command\" \u003c|-up- SwitchCommand","lastModifiedDate":"2021-10-26"},{"lineNumber":38,"author":{"gitId":"jushg"},"content":"\"{abstract} \\n Command\" \u003c|-up- GetCurrentViewCommand","lastModifiedDate":"2021-10-26"},{"lineNumber":39,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":40,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":41,"author":{"gitId":"jushg"},"content":"package medbot.command.personcommand {","lastModifiedDate":"2021-10-26"},{"lineNumber":42,"author":{"gitId":"jushg"},"content":"class \"{abstract} \\n AddPersonCommand\"{","lastModifiedDate":"2021-10-26"},{"lineNumber":43,"author":{"gitId":"jushg"},"content":"    # person : Person","lastModifiedDate":"2021-10-26"},{"lineNumber":44,"author":{"gitId":"jushg"},"content":"    + execute(Scheduler, Ui) {\u0027abstract\u0027}","lastModifiedDate":"2021-10-26"},{"lineNumber":45,"author":{"gitId":"jushg"},"content":"}","lastModifiedDate":"2021-10-26"},{"lineNumber":46,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":47,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":48,"author":{"gitId":"jushg"},"content":"class \"{abstract} \\n ArchivePersonCommand\"{","lastModifiedDate":"2021-10-26"},{"lineNumber":49,"author":{"gitId":"jushg"},"content":"    # personId : int","lastModifiedDate":"2021-10-26"},{"lineNumber":50,"author":{"gitId":"jushg"},"content":"    + execute(Scheduler, Ui) {\u0027abstract\u0027}","lastModifiedDate":"2021-10-26"},{"lineNumber":51,"author":{"gitId":"jushg"},"content":"}","lastModifiedDate":"2021-10-26"},{"lineNumber":52,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":53,"author":{"gitId":"jushg"},"content":"class \"{abstract} \\n DeletePersonCommand\"{","lastModifiedDate":"2021-10-26"},{"lineNumber":54,"author":{"gitId":"jushg"},"content":"    # personId : int","lastModifiedDate":"2021-10-26"},{"lineNumber":55,"author":{"gitId":"jushg"},"content":"    + execute(Scheduler, Ui) {\u0027abstract\u0027}","lastModifiedDate":"2021-10-26"},{"lineNumber":56,"author":{"gitId":"jushg"},"content":"}","lastModifiedDate":"2021-10-26"},{"lineNumber":57,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":58,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":59,"author":{"gitId":"jushg"},"content":"class \"{abstract} \\n EditPersonCommand\"{","lastModifiedDate":"2021-10-26"},{"lineNumber":60,"author":{"gitId":"jushg"},"content":"    # personId : int","lastModifiedDate":"2021-10-26"},{"lineNumber":61,"author":{"gitId":"jushg"},"content":"    # person : Person","lastModifiedDate":"2021-10-26"},{"lineNumber":62,"author":{"gitId":"jushg"},"content":"    + execute(Scheduler, Ui) {\u0027abstract\u0027}","lastModifiedDate":"2021-10-26"},{"lineNumber":63,"author":{"gitId":"jushg"},"content":"}","lastModifiedDate":"2021-10-26"},{"lineNumber":64,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":65,"author":{"gitId":"jushg"},"content":"class \"{abstract} \\n FindPersonCommand\"{","lastModifiedDate":"2021-10-26"},{"lineNumber":66,"author":{"gitId":"jushg"},"content":"    # parameters: String[]","lastModifiedDate":"2021-10-26"},{"lineNumber":67,"author":{"gitId":"jushg"},"content":"    + execute(Scheduler, Ui) {\u0027abstract\u0027}","lastModifiedDate":"2021-10-26"},{"lineNumber":68,"author":{"gitId":"jushg"},"content":"}","lastModifiedDate":"2021-10-26"},{"lineNumber":69,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":70,"author":{"gitId":"jushg"},"content":"class \"{abstract} \\n ListPersonCommand\"{","lastModifiedDate":"2021-10-26"},{"lineNumber":71,"author":{"gitId":"jushg"},"content":"    # getArchived: boolean","lastModifiedDate":"2021-10-26"},{"lineNumber":72,"author":{"gitId":"jushg"},"content":"    + execute(Scheduler, Ui) {\u0027abstract\u0027}","lastModifiedDate":"2021-10-26"},{"lineNumber":73,"author":{"gitId":"jushg"},"content":"}","lastModifiedDate":"2021-10-26"},{"lineNumber":74,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":75,"author":{"gitId":"jushg"},"content":"class \"{abstract} \\n UnarchivePersonCommand\"{","lastModifiedDate":"2021-10-26"},{"lineNumber":76,"author":{"gitId":"jushg"},"content":"    # personId : int","lastModifiedDate":"2021-10-26"},{"lineNumber":77,"author":{"gitId":"jushg"},"content":"    + execute(Scheduler, Ui) {\u0027abstract\u0027}","lastModifiedDate":"2021-10-26"},{"lineNumber":78,"author":{"gitId":"jushg"},"content":"}","lastModifiedDate":"2021-10-26"},{"lineNumber":79,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":80,"author":{"gitId":"jushg"},"content":"class \"{abstract} \\n ViewPersonCommand\"{","lastModifiedDate":"2021-10-26"},{"lineNumber":81,"author":{"gitId":"jushg"},"content":"    # personId : int","lastModifiedDate":"2021-10-26"},{"lineNumber":82,"author":{"gitId":"jushg"},"content":"    + execute(Scheduler, Ui) {\u0027abstract\u0027}","lastModifiedDate":"2021-10-26"},{"lineNumber":83,"author":{"gitId":"jushg"},"content":"}","lastModifiedDate":"2021-10-26"},{"lineNumber":84,"author":{"gitId":"jushg"},"content":"\"{abstract} \\n Command\" \u003c|-- \"{abstract} \\n AddPersonCommand\"","lastModifiedDate":"2021-10-26"},{"lineNumber":85,"author":{"gitId":"jushg"},"content":"\"{abstract} \\n Command\" \u003c|-- \"{abstract} \\n EditPersonCommand\"","lastModifiedDate":"2021-10-26"},{"lineNumber":86,"author":{"gitId":"jushg"},"content":"\"{abstract} \\n Command\" \u003c|-- \"{abstract} \\n ArchivePersonCommand\"","lastModifiedDate":"2021-10-26"},{"lineNumber":87,"author":{"gitId":"jushg"},"content":"\"{abstract} \\n Command\" \u003c|-- \"{abstract} \\n UnarchivePersonCommand\"","lastModifiedDate":"2021-10-26"},{"lineNumber":88,"author":{"gitId":"jushg"},"content":"\"{abstract} \\n Command\" \u003c|-- \"{abstract} \\n DeletePersonCommand\"","lastModifiedDate":"2021-10-26"},{"lineNumber":89,"author":{"gitId":"jushg"},"content":"\"{abstract} \\n Command\" \u003c|-- \"{abstract} \\n ListPersonCommand\"","lastModifiedDate":"2021-10-26"},{"lineNumber":90,"author":{"gitId":"jushg"},"content":"\"{abstract} \\n Command\" \u003c|-- \"{abstract} \\n FindPersonCommand\"","lastModifiedDate":"2021-10-26"},{"lineNumber":91,"author":{"gitId":"jushg"},"content":"\"{abstract} \\n Command\" \u003c|-- \"{abstract} \\n ViewPersonCommand\"","lastModifiedDate":"2021-10-26"},{"lineNumber":92,"author":{"gitId":"jushg"},"content":"}","lastModifiedDate":"2021-10-26"},{"lineNumber":93,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":94,"author":{"gitId":"jushg"},"content":"package medbot.command.appointmentcommand {","lastModifiedDate":"2021-10-26"},{"lineNumber":95,"author":{"gitId":"jushg"},"content":"class AddAppointmentCommand{","lastModifiedDate":"2021-10-26"},{"lineNumber":96,"author":{"gitId":"jushg"},"content":"    # appointment : Appointment","lastModifiedDate":"2021-10-26"},{"lineNumber":97,"author":{"gitId":"jushg"},"content":"    + execute(Scheduler, Ui)","lastModifiedDate":"2021-10-26"},{"lineNumber":98,"author":{"gitId":"jushg"},"content":"}","lastModifiedDate":"2021-10-26"},{"lineNumber":99,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":100,"author":{"gitId":"jushg"},"content":"class EditAppointmentCommand{","lastModifiedDate":"2021-10-26"},{"lineNumber":101,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":102,"author":{"gitId":"jushg"},"content":"    # appointmentId : int","lastModifiedDate":"2021-10-26"},{"lineNumber":103,"author":{"gitId":"jushg"},"content":"    # appointment : Appointment","lastModifiedDate":"2021-10-26"},{"lineNumber":104,"author":{"gitId":"jushg"},"content":"    + execute(Scheduler, Ui)","lastModifiedDate":"2021-10-26"},{"lineNumber":105,"author":{"gitId":"jushg"},"content":"}","lastModifiedDate":"2021-10-26"},{"lineNumber":106,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":107,"author":{"gitId":"jushg"},"content":"class FindAppointmentCommand{","lastModifiedDate":"2021-10-26"},{"lineNumber":108,"author":{"gitId":"jushg"},"content":"    # appointmentId: int","lastModifiedDate":"2021-10-26"},{"lineNumber":109,"author":{"gitId":"jushg"},"content":"    # personType : PersonType","lastModifiedDate":"2021-10-26"},{"lineNumber":110,"author":{"gitId":"jushg"},"content":"    # filterType : FilterType","lastModifiedDate":"2021-10-26"},{"lineNumber":111,"author":{"gitId":"jushg"},"content":"    # dateTimeCode: int","lastModifiedDate":"2021-10-26"},{"lineNumber":112,"author":{"gitId":"jushg"},"content":"    + execute(Scheduler, Ui)","lastModifiedDate":"2021-10-26"},{"lineNumber":113,"author":{"gitId":"jushg"},"content":"}","lastModifiedDate":"2021-10-26"},{"lineNumber":114,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":115,"author":{"gitId":"jushg"},"content":"class ListAppointmentCommand{","lastModifiedDate":"2021-10-26"},{"lineNumber":116,"author":{"gitId":"jushg"},"content":"    + execute(Scheduler, Ui)","lastModifiedDate":"2021-10-26"},{"lineNumber":117,"author":{"gitId":"jushg"},"content":"}","lastModifiedDate":"2021-10-26"},{"lineNumber":118,"author":{"gitId":"jushg"},"content":"class DeleteAppointmentCommand{","lastModifiedDate":"2021-10-26"},{"lineNumber":119,"author":{"gitId":"jushg"},"content":"    # appointmentId: int","lastModifiedDate":"2021-10-26"},{"lineNumber":120,"author":{"gitId":"jushg"},"content":"    + execute(Scheduler, Ui)","lastModifiedDate":"2021-10-26"},{"lineNumber":121,"author":{"gitId":"jushg"},"content":"}","lastModifiedDate":"2021-10-26"},{"lineNumber":122,"author":{"gitId":"jushg"},"content":"class ViewAppointmentCommand{","lastModifiedDate":"2021-10-26"},{"lineNumber":123,"author":{"gitId":"jushg"},"content":"    appointmentId: int","lastModifiedDate":"2021-10-26"},{"lineNumber":124,"author":{"gitId":"jushg"},"content":"    + execute(Scheduler, Ui)","lastModifiedDate":"2021-10-26"},{"lineNumber":125,"author":{"gitId":"jushg"},"content":"}","lastModifiedDate":"2021-10-26"},{"lineNumber":126,"author":{"gitId":"jushg"},"content":"\"{abstract} \\n Command\" \u003c|-up AddAppointmentCommand","lastModifiedDate":"2021-10-26"},{"lineNumber":127,"author":{"gitId":"jushg"},"content":"\"{abstract} \\n Command\" \u003c|-up EditAppointmentCommand","lastModifiedDate":"2021-10-26"},{"lineNumber":128,"author":{"gitId":"jushg"},"content":"\"{abstract} \\n Command\" \u003c|-up DeleteAppointmentCommand","lastModifiedDate":"2021-10-26"},{"lineNumber":129,"author":{"gitId":"jushg"},"content":"\"{abstract} \\n Command\" \u003c|-up ListAppointmentCommand","lastModifiedDate":"2021-10-26"},{"lineNumber":130,"author":{"gitId":"jushg"},"content":"\"{abstract} \\n Command\" \u003c|-up FindAppointmentCommand","lastModifiedDate":"2021-10-26"},{"lineNumber":131,"author":{"gitId":"jushg"},"content":"\"{abstract} \\n Command\" \u003c|-up ViewAppointmentCommand","lastModifiedDate":"2021-10-26"},{"lineNumber":132,"author":{"gitId":"jushg"},"content":"}","lastModifiedDate":"2021-10-26"},{"lineNumber":133,"author":{"gitId":"jushg"},"content":"enum \"\u003c\u003cEnumeration\u003e\u003e \\n CommandType\" {","lastModifiedDate":"2021-10-26"},{"lineNumber":134,"author":{"gitId":"jushg"},"content":"  HELP","lastModifiedDate":"2021-10-26"},{"lineNumber":135,"author":{"gitId":"jushg"},"content":"  EXIT","lastModifiedDate":"2021-10-26"},{"lineNumber":136,"author":{"gitId":"jushg"},"content":"  SWITCH","lastModifiedDate":"2021-10-26"},{"lineNumber":137,"author":{"gitId":"jushg"},"content":"  ADD","lastModifiedDate":"2021-10-26"},{"lineNumber":138,"author":{"gitId":"jushg"},"content":"  DELETE","lastModifiedDate":"2021-10-26"},{"lineNumber":139,"author":{"gitId":"jushg"},"content":"  EDIT","lastModifiedDate":"2021-10-26"},{"lineNumber":140,"author":{"gitId":"jushg"},"content":"  VIEW","lastModifiedDate":"2021-10-26"},{"lineNumber":141,"author":{"gitId":"jushg"},"content":"  LIST","lastModifiedDate":"2021-10-26"},{"lineNumber":142,"author":{"gitId":"jushg"},"content":"  FIND","lastModifiedDate":"2021-10-26"},{"lineNumber":143,"author":{"gitId":"jushg"},"content":"  ARCHIVE","lastModifiedDate":"2021-10-26"},{"lineNumber":144,"author":{"gitId":"jushg"},"content":"  UNARCHIVE","lastModifiedDate":"2021-10-26"},{"lineNumber":145,"author":{"gitId":"jushg"},"content":"}","lastModifiedDate":"2021-10-26"},{"lineNumber":146,"author":{"gitId":"jushg"},"content":"}","lastModifiedDate":"2021-10-26"},{"lineNumber":147,"author":{"gitId":"jushg"},"content":"@enduml","lastModifiedDate":"2021-10-26"}],"authorContributionMap":{"jushg":147}},{"path":"docs/diagrams/pumlfiles/GeneralCommand.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"jushg"},"content":"@startuml","lastModifiedDate":"2021-10-26"},{"lineNumber":2,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":3,"author":{"gitId":"jushg"},"content":"hide circle","lastModifiedDate":"2021-10-26"},{"lineNumber":4,"author":{"gitId":"jushg"},"content":"skinparam classAttributeIconSize 0","lastModifiedDate":"2021-10-26"},{"lineNumber":5,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":6,"author":{"gitId":"jushg"},"content":"skinparam groupInheritance 3","lastModifiedDate":"2021-10-26"},{"lineNumber":7,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":8,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":9,"author":{"gitId":"jushg"},"content":"package medbot.command {","lastModifiedDate":"2021-10-26"},{"lineNumber":10,"author":{"gitId":"jushg"},"content":"enum \"\u003c\u003cEnumeration\u003e\u003e \\n CommandType\" {","lastModifiedDate":"2021-10-26"},{"lineNumber":11,"author":{"gitId":"jushg"},"content":"  HELP","lastModifiedDate":"2021-10-26"},{"lineNumber":12,"author":{"gitId":"jushg"},"content":"  EXIT","lastModifiedDate":"2021-10-26"},{"lineNumber":13,"author":{"gitId":"jushg"},"content":"  SWITCH","lastModifiedDate":"2021-10-26"},{"lineNumber":14,"author":{"gitId":"jushg"},"content":"  ADD","lastModifiedDate":"2021-10-26"},{"lineNumber":15,"author":{"gitId":"jushg"},"content":"  DELETE","lastModifiedDate":"2021-10-26"},{"lineNumber":16,"author":{"gitId":"jushg"},"content":"  EDIT","lastModifiedDate":"2021-10-26"},{"lineNumber":17,"author":{"gitId":"jushg"},"content":"  VIEW","lastModifiedDate":"2021-10-26"},{"lineNumber":18,"author":{"gitId":"jushg"},"content":"  LIST","lastModifiedDate":"2021-10-26"},{"lineNumber":19,"author":{"gitId":"jushg"},"content":"  FIND","lastModifiedDate":"2021-10-26"},{"lineNumber":20,"author":{"gitId":"jushg"},"content":"  ARCHIVE","lastModifiedDate":"2021-10-26"},{"lineNumber":21,"author":{"gitId":"jushg"},"content":"  UNARCHIVE","lastModifiedDate":"2021-10-26"},{"lineNumber":22,"author":{"gitId":"jushg"},"content":"}","lastModifiedDate":"2021-10-26"},{"lineNumber":23,"author":{"gitId":"jushg"},"content":"class \"{abstract} \\n Command\"{","lastModifiedDate":"2021-10-26"},{"lineNumber":24,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":25,"author":{"gitId":"jushg"},"content":"    + exit() : boolean","lastModifiedDate":"2021-10-26"},{"lineNumber":26,"author":{"gitId":"jushg"},"content":"    + {abstract} execute(Scheduler, Ui)","lastModifiedDate":"2021-10-26"},{"lineNumber":27,"author":{"gitId":"jushg"},"content":"}","lastModifiedDate":"2021-10-26"},{"lineNumber":28,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":29,"author":{"gitId":"jushg"},"content":"class ExitCommand {","lastModifiedDate":"2021-10-26"},{"lineNumber":30,"author":{"gitId":"jushg"},"content":"+ exit() : boolean","lastModifiedDate":"2021-10-26"},{"lineNumber":31,"author":{"gitId":"jushg"},"content":"+ execute(Scheduler, Ui)","lastModifiedDate":"2021-10-26"},{"lineNumber":32,"author":{"gitId":"jushg"},"content":"}","lastModifiedDate":"2021-10-26"},{"lineNumber":33,"author":{"gitId":"jushg"},"content":"class GetCurrentViewCommand {","lastModifiedDate":"2021-10-26"},{"lineNumber":34,"author":{"gitId":"jushg"},"content":"- viewType: ViewType","lastModifiedDate":"2021-10-26"},{"lineNumber":35,"author":{"gitId":"jushg"},"content":"+ execute(Scheduler, Ui)","lastModifiedDate":"2021-10-26"},{"lineNumber":36,"author":{"gitId":"jushg"},"content":"}","lastModifiedDate":"2021-10-26"},{"lineNumber":37,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":38,"author":{"gitId":"jushg"},"content":"class HelpCommand {","lastModifiedDate":"2021-10-26"},{"lineNumber":39,"author":{"gitId":"jushg"},"content":"- viewType: ViewType","lastModifiedDate":"2021-10-26"},{"lineNumber":40,"author":{"gitId":"jushg"},"content":"- commandType: CommandType","lastModifiedDate":"2021-10-26"},{"lineNumber":41,"author":{"gitId":"jushg"},"content":"+ execute(Scheduler, Ui)","lastModifiedDate":"2021-10-26"},{"lineNumber":42,"author":{"gitId":"jushg"},"content":"}","lastModifiedDate":"2021-10-26"},{"lineNumber":43,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":44,"author":{"gitId":"jushg"},"content":"class SwitchCommand {","lastModifiedDate":"2021-10-26"},{"lineNumber":45,"author":{"gitId":"jushg"},"content":"- newViewType: ViewType","lastModifiedDate":"2021-10-26"},{"lineNumber":46,"author":{"gitId":"jushg"},"content":"+ execute(Scheduler, Ui)","lastModifiedDate":"2021-10-26"},{"lineNumber":47,"author":{"gitId":"jushg"},"content":"}","lastModifiedDate":"2021-10-26"},{"lineNumber":48,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":49,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":50,"author":{"gitId":"jushg"},"content":"\"{abstract} \\n Command\" \u003c|-- HelpCommand","lastModifiedDate":"2021-10-26"},{"lineNumber":51,"author":{"gitId":"jushg"},"content":"\"{abstract} \\n Command\" \u003c|-- ExitCommand","lastModifiedDate":"2021-10-26"},{"lineNumber":52,"author":{"gitId":"jushg"},"content":"\"{abstract} \\n Command\" \u003c|-- SwitchCommand","lastModifiedDate":"2021-10-26"},{"lineNumber":53,"author":{"gitId":"jushg"},"content":"\"{abstract} \\n Command\" \u003c|-- GetCurrentViewCommand","lastModifiedDate":"2021-10-26"},{"lineNumber":54,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":55,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":56,"author":{"gitId":"jushg"},"content":"package medbot.command.personcommand {","lastModifiedDate":"2021-10-26"},{"lineNumber":57,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":58,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":59,"author":{"gitId":"jushg"},"content":"}","lastModifiedDate":"2021-10-26"},{"lineNumber":60,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":61,"author":{"gitId":"jushg"},"content":"package medbot.command.appointmentcommand {","lastModifiedDate":"2021-10-26"},{"lineNumber":62,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":63,"author":{"gitId":"jushg"},"content":"}","lastModifiedDate":"2021-10-26"},{"lineNumber":64,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":65,"author":{"gitId":"jushg"},"content":"}","lastModifiedDate":"2021-10-26"},{"lineNumber":66,"author":{"gitId":"jushg"},"content":"@enduml","lastModifiedDate":"2021-10-26"}],"authorContributionMap":{"jushg":66}},{"path":"docs/diagrams/pumlfiles/Main.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"justinfidelis"},"content":"@startuml","lastModifiedDate":"2021-10-22"},{"lineNumber":2,"author":{"gitId":"justinfidelis"},"content":"!define ENTITY_COLOR_0 #FF4600","lastModifiedDate":"2021-10-22"},{"lineNumber":3,"author":{"gitId":"justinfidelis"},"content":"!define ENTITY_COLOR_1 #FF7100","lastModifiedDate":"2021-10-22"},{"lineNumber":4,"author":{"gitId":"justinfidelis"},"content":"!define ENTITY_COLOR_2 #FF9700","lastModifiedDate":"2021-10-22"},{"lineNumber":5,"author":{"gitId":"justinfidelis"},"content":"!define ENTITY_COLOR_3 #FFBE00","lastModifiedDate":"2021-10-22"},{"lineNumber":6,"author":{"gitId":"justinfidelis"},"content":"!define ENTITY_COLOR_4 #FFF400","lastModifiedDate":"2021-10-22"},{"lineNumber":7,"author":{"gitId":"justinfidelis"},"content":"!define ENTITY_COLOR_5 #B6F400","lastModifiedDate":"2021-10-22"},{"lineNumber":8,"author":{"gitId":"justinfidelis"},"content":"!define ENTITY_COLOR_6 #8CF400","lastModifiedDate":"2021-10-22"},{"lineNumber":9,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":10,"author":{"gitId":"justinfidelis"},"content":"!define ACTIVATION_COLOR_0 #FF8E66","lastModifiedDate":"2021-10-22"},{"lineNumber":11,"author":{"gitId":"justinfidelis"},"content":"!define ACTIVATION_COLOR_1 #FFAC6D","lastModifiedDate":"2021-10-22"},{"lineNumber":12,"author":{"gitId":"justinfidelis"},"content":"!define ACTIVATION_COLOR_2 #FFBF66","lastModifiedDate":"2021-10-22"},{"lineNumber":13,"author":{"gitId":"justinfidelis"},"content":"!define ACTIVATION_COLOR_3 #FFD366","lastModifiedDate":"2021-10-22"},{"lineNumber":14,"author":{"gitId":"justinfidelis"},"content":"!define ACTIVATION_COLOR_4 #FFF766","lastModifiedDate":"2021-10-22"},{"lineNumber":15,"author":{"gitId":"justinfidelis"},"content":"!define ACTIVATION_COLOR_5 #CDF260","lastModifiedDate":"2021-10-22"},{"lineNumber":16,"author":{"gitId":"justinfidelis"},"content":"!define ACTIVATION_COLOR_6 #B5F260","lastModifiedDate":"2021-10-22"},{"lineNumber":17,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":18,"author":{"gitId":"justinfidelis"},"content":"actor User as user ENTITY_COLOR_0","lastModifiedDate":"2021-10-22"},{"lineNumber":19,"author":{"gitId":"justinfidelis"},"content":"participant \":Ui\" as ui ENTITY_COLOR_1","lastModifiedDate":"2021-10-22"},{"lineNumber":20,"author":{"gitId":"justinfidelis"},"content":"participant \":MedBot\" as medbot ENTITY_COLOR_2","lastModifiedDate":"2021-10-22"},{"lineNumber":21,"author":{"gitId":"justinfidelis"},"content":"participant \"\u003c\u003cClass\u003e\u003e\\nParser\" as parser ENTITY_COLOR_3","lastModifiedDate":"2021-10-22"},{"lineNumber":22,"author":{"gitId":"justinfidelis"},"content":"participant \":DeleteCommand\" as command ENTITY_COLOR_4","lastModifiedDate":"2021-10-22"},{"lineNumber":23,"author":{"gitId":"justinfidelis"},"content":"participant \"scheduler:Scheduler\" as scheduler ENTITY_COLOR_5","lastModifiedDate":"2021-10-22"},{"lineNumber":24,"author":{"gitId":"justinfidelis"},"content":"participant \"storage:Storage\" as storage ENTITY_COLOR_6","lastModifiedDate":"2021-10-22"},{"lineNumber":25,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":26,"author":{"gitId":"justinfidelis"},"content":"autoactivate on","lastModifiedDate":"2021-10-22"},{"lineNumber":27,"author":{"gitId":"justinfidelis"},"content":"user -\u003e ui ACTIVATION_COLOR_1: \"delete 1\"","lastModifiedDate":"2021-10-22"},{"lineNumber":28,"author":{"gitId":"justinfidelis"},"content":"ui -\u003e medbot ACTIVATION_COLOR_2: \"delete 1\"","lastModifiedDate":"2021-10-22"},{"lineNumber":29,"author":{"gitId":"justinfidelis"},"content":"medbot -\u003e parser ACTIVATION_COLOR_3: parseCommand(\"delete 1\")","lastModifiedDate":"2021-10-22"},{"lineNumber":30,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":31,"author":{"gitId":"justinfidelis"},"content":"parser -\u003e command **: DeleteCommand(1)","lastModifiedDate":"2021-10-22"},{"lineNumber":32,"author":{"gitId":"justinfidelis"},"content":"activate command ACTIVATION_COLOR_4","lastModifiedDate":"2021-10-22"},{"lineNumber":33,"author":{"gitId":"justinfidelis"},"content":"command --\u003e parser","lastModifiedDate":"2021-10-22"},{"lineNumber":34,"author":{"gitId":"justinfidelis"},"content":"parser --\u003e medbot","lastModifiedDate":"2021-10-22"},{"lineNumber":35,"author":{"gitId":"justinfidelis"},"content":"medbot -\u003e command ACTIVATION_COLOR_4: execute()","lastModifiedDate":"2021-10-22"},{"lineNumber":36,"author":{"gitId":"justinfidelis"},"content":"command -\u003e scheduler ACTIVATION_COLOR_5: deletePatient(1)","lastModifiedDate":"2021-10-22"},{"lineNumber":37,"author":{"gitId":"justinfidelis"},"content":"scheduler --\u003e command","lastModifiedDate":"2021-10-22"},{"lineNumber":38,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":39,"author":{"gitId":"justinfidelis"},"content":"command --\u003e medbot ACTIVATION_COLOR_1:","lastModifiedDate":"2021-10-22"},{"lineNumber":40,"author":{"gitId":"justinfidelis"},"content":"destroy command","lastModifiedDate":"2021-10-22"},{"lineNumber":41,"author":{"gitId":"justinfidelis"},"content":"medbot -\u003e storage ACTIVATION_COLOR_6: saveData()","lastModifiedDate":"2021-10-22"},{"lineNumber":42,"author":{"gitId":"justinfidelis"},"content":"storage --\u003e medbot","lastModifiedDate":"2021-10-22"},{"lineNumber":43,"author":{"gitId":"justinfidelis"},"content":"medbot --\u003e ui","lastModifiedDate":"2021-10-27"},{"lineNumber":44,"author":{"gitId":"justinfidelis"},"content":"ui --\u003e user","lastModifiedDate":"2021-10-27"},{"lineNumber":45,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":46,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":47,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":48,"author":{"gitId":"justinfidelis"},"content":"@enduml","lastModifiedDate":"2021-10-22"}],"authorContributionMap":{"justinfidelis":48}},{"path":"docs/diagrams/pumlfiles/ParserClassDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"Kureans"},"content":"@startuml","lastModifiedDate":"2021-10-26"},{"lineNumber":2,"author":{"gitId":"Kureans"},"content":"\u0027https://plantuml.com/class-diagram","lastModifiedDate":"2021-10-26"},{"lineNumber":3,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":4,"author":{"gitId":"Kureans"},"content":"hide circle","lastModifiedDate":"2021-10-26"},{"lineNumber":5,"author":{"gitId":"Kureans"},"content":"skinparam classAttributeIconSize 0","lastModifiedDate":"2021-10-26"},{"lineNumber":6,"author":{"gitId":"Kureans"},"content":"skinparam class {","lastModifiedDate":"2021-10-26"},{"lineNumber":7,"author":{"gitId":"Kureans"},"content":"BackgroundColor DarkOrchid","lastModifiedDate":"2021-10-26"},{"lineNumber":8,"author":{"gitId":"Kureans"},"content":"ArrowColor Purple","lastModifiedDate":"2021-10-26"},{"lineNumber":9,"author":{"gitId":"Kureans"},"content":"BorderColor Purple","lastModifiedDate":"2021-10-26"},{"lineNumber":10,"author":{"gitId":"Kureans"},"content":"}","lastModifiedDate":"2021-10-26"},{"lineNumber":11,"author":{"gitId":"Kureans"},"content":"package medbot.parser #DDDDDD {","lastModifiedDate":"2021-10-26"},{"lineNumber":12,"author":{"gitId":"Kureans"},"content":"class \"{abstract}\\n Parser\"","lastModifiedDate":"2021-10-26"},{"lineNumber":13,"author":{"gitId":"Kureans"},"content":"class \"{abstract}\\n XYZCommandParser\"","lastModifiedDate":"2021-10-26"},{"lineNumber":14,"author":{"gitId":"Kureans"},"content":"class \"{abstract}\\n ParserUtils\" {","lastModifiedDate":"2021-10-26"},{"lineNumber":15,"author":{"gitId":"Kureans"},"content":"    {static} -preprocessInput(userInput: String): String","lastModifiedDate":"2021-11-07"},{"lineNumber":16,"author":{"gitId":"Kureans"},"content":"    {static} ~getParameters(userInput: String): String","lastModifiedDate":"2021-11-07"},{"lineNumber":17,"author":{"gitId":"Kureans"},"content":"    {static} ~updateMultipleAppointmentInformation(person: Person, attributeStrings: String[])","lastModifiedDate":"2021-11-07"},{"lineNumber":18,"author":{"gitId":"Kureans"},"content":"    {static} ~updateMultiplePersonalInformation(person: Person, attributeStrings: String[])","lastModifiedDate":"2021-11-07"},{"lineNumber":19,"author":{"gitId":"Kureans"},"content":"}","lastModifiedDate":"2021-10-26"},{"lineNumber":20,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":21,"author":{"gitId":"Kureans"},"content":"\"{abstract}\\n Parser\" ..\u003e \"{abstract}\\n XYZCommandParser\"","lastModifiedDate":"2021-10-26"},{"lineNumber":22,"author":{"gitId":"Kureans"},"content":"\"{abstract}\\n XYZCommandParser\" .\u003e \"{abstract}\\n ParserUtils\" : \u003e uses","lastModifiedDate":"2021-10-26"},{"lineNumber":23,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":24,"author":{"gitId":"Kureans"},"content":"note left of \"{abstract}\\n XYZCommandParser\" : XYZCommandParser \u003d\\nPatientCommandParser/\\nSchedulerCommandParser/\\nStaffCommandParser","lastModifiedDate":"2021-10-26"},{"lineNumber":25,"author":{"gitId":"Kureans"},"content":"note top of \"{abstract}\\n ParserUtils\" : Only some key methods are listed*","lastModifiedDate":"2021-10-26"},{"lineNumber":26,"author":{"gitId":"Kureans"},"content":"}","lastModifiedDate":"2021-10-26"},{"lineNumber":27,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":28,"author":{"gitId":"Kureans"},"content":"class \"{abstract}\\n Command\"","lastModifiedDate":"2021-10-26"},{"lineNumber":29,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":30,"author":{"gitId":"Kureans"},"content":"\"{abstract}\\n Parser\" \u003c.up.MedBot","lastModifiedDate":"2021-10-26"},{"lineNumber":31,"author":{"gitId":"Kureans"},"content":"\"{abstract}\\n Command\" \u003c|- XYZCommand","lastModifiedDate":"2021-10-26"},{"lineNumber":32,"author":{"gitId":"Kureans"},"content":"\"{abstract}\\n XYZCommandParser\" ..\u003e XYZCommand :  \u003e returns","lastModifiedDate":"2021-10-26"},{"lineNumber":33,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":34,"author":{"gitId":"Kureans"},"content":"note right of XYZCommand : XYZCommand \u003d PatientCommand/\\nSchedulerCommand/StaffCommand","lastModifiedDate":"2021-10-26"},{"lineNumber":35,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":36,"author":{"gitId":"Kureans"},"content":"@enduml","lastModifiedDate":"2021-10-26"}],"authorContributionMap":{"Kureans":36}},{"path":"docs/diagrams/pumlfiles/ParserSequenceDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"Kureans"},"content":"@startuml","lastModifiedDate":"2021-10-26"},{"lineNumber":2,"author":{"gitId":"Kureans"},"content":"\u0027https://plantuml.com/sequence-diagram","lastModifiedDate":"2021-10-26"},{"lineNumber":3,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":4,"author":{"gitId":"Kureans"},"content":"control Medbot as X #red","lastModifiedDate":"2021-10-26"},{"lineNumber":5,"author":{"gitId":"Kureans"},"content":"box #beige","lastModifiedDate":"2021-10-26"},{"lineNumber":6,"author":{"gitId":"Kureans"},"content":"participant \":Parser\" as A #DarkOrchid","lastModifiedDate":"2021-10-26"},{"lineNumber":7,"author":{"gitId":"Kureans"},"content":"participant \":PatientCommandParser\" as B #DarkOrchid","lastModifiedDate":"2021-10-26"},{"lineNumber":8,"author":{"gitId":"Kureans"},"content":"participant \":ParserUtils\" as C #DarkOrchid","lastModifiedDate":"2021-10-26"},{"lineNumber":9,"author":{"gitId":"Kureans"},"content":"participant \"patient:Patient\" as D #DarkOrchid","lastModifiedDate":"2021-10-26"},{"lineNumber":10,"author":{"gitId":"Kureans"},"content":"end box","lastModifiedDate":"2021-10-26"},{"lineNumber":11,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":12,"author":{"gitId":"Kureans"},"content":"note right of C: Minor utility functions\\nin ParserUtils have\\nbeen omitted for brevity.","lastModifiedDate":"2021-10-26"},{"lineNumber":13,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":14,"author":{"gitId":"Kureans"},"content":"X -\u003e A : parseCommand(userInput)","lastModifiedDate":"2021-10-26"},{"lineNumber":15,"author":{"gitId":"Kureans"},"content":"activate A","lastModifiedDate":"2021-10-26"},{"lineNumber":16,"author":{"gitId":"Kureans"},"content":"A -\u003e B : parsePatientCommand(userInput)","lastModifiedDate":"2021-10-26"},{"lineNumber":17,"author":{"gitId":"Kureans"},"content":"activate B","lastModifiedDate":"2021-10-26"},{"lineNumber":18,"author":{"gitId":"Kureans"},"content":"B -\u003e B : parseAddCommand(userInput)","lastModifiedDate":"2021-10-26"},{"lineNumber":19,"author":{"gitId":"Kureans"},"content":"activate B","lastModifiedDate":"2021-10-26"},{"lineNumber":20,"author":{"gitId":"Kureans"},"content":"B -\u003e C : getParameters(userInput)","lastModifiedDate":"2021-10-26"},{"lineNumber":21,"author":{"gitId":"Kureans"},"content":"activate C","lastModifiedDate":"2021-10-26"},{"lineNumber":22,"author":{"gitId":"Kureans"},"content":"return parameters","lastModifiedDate":"2021-10-26"},{"lineNumber":23,"author":{"gitId":"Kureans"},"content":"create D","lastModifiedDate":"2021-10-26"},{"lineNumber":24,"author":{"gitId":"Kureans"},"content":"B -\u003e D","lastModifiedDate":"2021-10-26"},{"lineNumber":25,"author":{"gitId":"Kureans"},"content":"activate D","lastModifiedDate":"2021-10-26"},{"lineNumber":26,"author":{"gitId":"Kureans"},"content":"return patient","lastModifiedDate":"2021-10-26"},{"lineNumber":27,"author":{"gitId":"Kureans"},"content":"B -\u003e C : updateMultiplePersonalInformation(patient, parameters)","lastModifiedDate":"2021-10-26"},{"lineNumber":28,"author":{"gitId":"Kureans"},"content":"activate C","lastModifiedDate":"2021-10-26"},{"lineNumber":29,"author":{"gitId":"Kureans"},"content":"return","lastModifiedDate":"2021-10-26"},{"lineNumber":30,"author":{"gitId":"Kureans"},"content":"return AddPatientCommand(patient)","lastModifiedDate":"2021-10-26"},{"lineNumber":31,"author":{"gitId":"Kureans"},"content":"return AddPatientCommand(patient)","lastModifiedDate":"2021-10-26"},{"lineNumber":32,"author":{"gitId":"Kureans"},"content":"return AddPatientCommand(patient)","lastModifiedDate":"2021-10-26"},{"lineNumber":33,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":34,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":35,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":36,"author":{"gitId":"Kureans"},"content":"@enduml","lastModifiedDate":"2021-10-26"}],"authorContributionMap":{"Kureans":36}},{"path":"docs/diagrams/pumlfiles/PersonCommand.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"jushg"},"content":"@startuml","lastModifiedDate":"2021-10-26"},{"lineNumber":2,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":3,"author":{"gitId":"jushg"},"content":"hide circle","lastModifiedDate":"2021-10-26"},{"lineNumber":4,"author":{"gitId":"jushg"},"content":"skinparam classAttributeIconSize 0","lastModifiedDate":"2021-10-26"},{"lineNumber":5,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":6,"author":{"gitId":"jushg"},"content":"skinparam groupInheritance 6","lastModifiedDate":"2021-10-26"},{"lineNumber":7,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":8,"author":{"gitId":"jushg"},"content":"class \"{abstract} \\n Command\"{","lastModifiedDate":"2021-10-26"},{"lineNumber":9,"author":{"gitId":"jushg"},"content":"    + exit() : boolean","lastModifiedDate":"2021-10-26"},{"lineNumber":10,"author":{"gitId":"jushg"},"content":"    + {abstract} execute(Scheduler, Ui)","lastModifiedDate":"2021-10-26"},{"lineNumber":11,"author":{"gitId":"jushg"},"content":"}","lastModifiedDate":"2021-10-26"},{"lineNumber":12,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":13,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":14,"author":{"gitId":"jushg"},"content":"package medbot.command.personcommand {","lastModifiedDate":"2021-10-26"},{"lineNumber":15,"author":{"gitId":"jushg"},"content":"class \"{abstract} \\n AddPersonCommand\"{","lastModifiedDate":"2021-10-26"},{"lineNumber":16,"author":{"gitId":"jushg"},"content":"    # person : Person","lastModifiedDate":"2021-10-26"},{"lineNumber":17,"author":{"gitId":"jushg"},"content":"    + {abstract} execute(Scheduler, Ui)","lastModifiedDate":"2021-10-26"},{"lineNumber":18,"author":{"gitId":"jushg"},"content":"}","lastModifiedDate":"2021-10-26"},{"lineNumber":19,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":20,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":21,"author":{"gitId":"jushg"},"content":"class \"{abstract} \\n ArchivePersonCommand\"{","lastModifiedDate":"2021-10-26"},{"lineNumber":22,"author":{"gitId":"jushg"},"content":"    # personId : int","lastModifiedDate":"2021-10-26"},{"lineNumber":23,"author":{"gitId":"jushg"},"content":"    + {abstract} execute(Scheduler, Ui)","lastModifiedDate":"2021-10-26"},{"lineNumber":24,"author":{"gitId":"jushg"},"content":"}","lastModifiedDate":"2021-10-26"},{"lineNumber":25,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":26,"author":{"gitId":"jushg"},"content":"class \"{abstract} \\n DeletePersonCommand\"{","lastModifiedDate":"2021-10-26"},{"lineNumber":27,"author":{"gitId":"jushg"},"content":"    # personId : int","lastModifiedDate":"2021-10-26"},{"lineNumber":28,"author":{"gitId":"jushg"},"content":"    + {abstract} execute(Scheduler, Ui)","lastModifiedDate":"2021-10-26"},{"lineNumber":29,"author":{"gitId":"jushg"},"content":"}","lastModifiedDate":"2021-10-26"},{"lineNumber":30,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":31,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":32,"author":{"gitId":"jushg"},"content":"class \"{abstract} \\n EditPersonCommand\"{","lastModifiedDate":"2021-10-26"},{"lineNumber":33,"author":{"gitId":"jushg"},"content":"    # personId : int","lastModifiedDate":"2021-10-26"},{"lineNumber":34,"author":{"gitId":"jushg"},"content":"    # person : Person","lastModifiedDate":"2021-10-26"},{"lineNumber":35,"author":{"gitId":"jushg"},"content":"    + {abstract} execute(Scheduler, Ui)","lastModifiedDate":"2021-10-26"},{"lineNumber":36,"author":{"gitId":"jushg"},"content":"}","lastModifiedDate":"2021-10-26"},{"lineNumber":37,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":38,"author":{"gitId":"jushg"},"content":"class \"{abstract} \\n FindPersonCommand\"{","lastModifiedDate":"2021-10-26"},{"lineNumber":39,"author":{"gitId":"jushg"},"content":"    # parameters: String[]","lastModifiedDate":"2021-10-26"},{"lineNumber":40,"author":{"gitId":"jushg"},"content":"    + {abstract} execute(Scheduler, Ui)","lastModifiedDate":"2021-10-26"},{"lineNumber":41,"author":{"gitId":"jushg"},"content":"}","lastModifiedDate":"2021-10-26"},{"lineNumber":42,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":43,"author":{"gitId":"jushg"},"content":"class \"{abstract} \\n ListPersonCommand\"{","lastModifiedDate":"2021-10-26"},{"lineNumber":44,"author":{"gitId":"jushg"},"content":"    # getArchived: boolean","lastModifiedDate":"2021-10-26"},{"lineNumber":45,"author":{"gitId":"jushg"},"content":"    + {abstract} execute(Scheduler, Ui)","lastModifiedDate":"2021-10-26"},{"lineNumber":46,"author":{"gitId":"jushg"},"content":"}","lastModifiedDate":"2021-10-26"},{"lineNumber":47,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":48,"author":{"gitId":"jushg"},"content":"class \"{abstract} \\n UnarchivePersonCommand\"{","lastModifiedDate":"2021-10-26"},{"lineNumber":49,"author":{"gitId":"jushg"},"content":"    # personId : int","lastModifiedDate":"2021-10-26"},{"lineNumber":50,"author":{"gitId":"jushg"},"content":"    + {abstract} execute(Scheduler, Ui)","lastModifiedDate":"2021-10-26"},{"lineNumber":51,"author":{"gitId":"jushg"},"content":"}","lastModifiedDate":"2021-10-26"},{"lineNumber":52,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":53,"author":{"gitId":"jushg"},"content":"class \"{abstract} \\n ViewPersonCommand\"{","lastModifiedDate":"2021-10-26"},{"lineNumber":54,"author":{"gitId":"jushg"},"content":"    # personId : int","lastModifiedDate":"2021-10-26"},{"lineNumber":55,"author":{"gitId":"jushg"},"content":"    + {abstract} execute(Scheduler, Ui)","lastModifiedDate":"2021-10-26"},{"lineNumber":56,"author":{"gitId":"jushg"},"content":"}","lastModifiedDate":"2021-10-26"},{"lineNumber":57,"author":{"gitId":"jushg"},"content":"\"{abstract} \\n Command\" \u003c|--- \"{abstract} \\n AddPersonCommand\"","lastModifiedDate":"2021-10-26"},{"lineNumber":58,"author":{"gitId":"jushg"},"content":"\"{abstract} \\n Command\" \u003c|--- \"{abstract} \\n EditPersonCommand\"","lastModifiedDate":"2021-10-26"},{"lineNumber":59,"author":{"gitId":"jushg"},"content":"\"{abstract} \\n Command\" \u003c|--- \"{abstract} \\n ArchivePersonCommand\"","lastModifiedDate":"2021-10-26"},{"lineNumber":60,"author":{"gitId":"jushg"},"content":"\"{abstract} \\n Command\" \u003c|--- \"{abstract} \\n UnarchivePersonCommand\"","lastModifiedDate":"2021-10-26"},{"lineNumber":61,"author":{"gitId":"jushg"},"content":"\"{abstract} \\n Command\" \u003c|--- \"{abstract} \\n DeletePersonCommand\"","lastModifiedDate":"2021-10-26"},{"lineNumber":62,"author":{"gitId":"jushg"},"content":"\"{abstract} \\n Command\" \u003c|--- \"{abstract} \\n ListPersonCommand\"","lastModifiedDate":"2021-10-26"},{"lineNumber":63,"author":{"gitId":"jushg"},"content":"\"{abstract} \\n Command\" \u003c|--- \"{abstract} \\n FindPersonCommand\"","lastModifiedDate":"2021-10-26"},{"lineNumber":64,"author":{"gitId":"jushg"},"content":"\"{abstract} \\n Command\" \u003c|--- \"{abstract} \\n ViewPersonCommand\"","lastModifiedDate":"2021-10-26"},{"lineNumber":65,"author":{"gitId":"jushg"},"content":"}","lastModifiedDate":"2021-10-26"},{"lineNumber":66,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":67,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":68,"author":{"gitId":"jushg"},"content":"@enduml","lastModifiedDate":"2021-10-26"}],"authorContributionMap":{"jushg":68}},{"path":"docs/diagrams/pumlfiles/SchedulerClassDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"justinfidelis"},"content":"@startuml","lastModifiedDate":"2021-10-26"},{"lineNumber":2,"author":{"gitId":"justinfidelis"},"content":"!define SCHEDULER_COLOR #CDF260","lastModifiedDate":"2021-10-26"},{"lineNumber":3,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":4,"author":{"gitId":"justinfidelis"},"content":"skinparam class {","lastModifiedDate":"2021-10-26"},{"lineNumber":5,"author":{"gitId":"justinfidelis"},"content":"    BackgroundColor SCHEDULER_COLOR","lastModifiedDate":"2021-10-26"},{"lineNumber":6,"author":{"gitId":"justinfidelis"},"content":"}","lastModifiedDate":"2021-10-26"},{"lineNumber":7,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":8,"author":{"gitId":"justinfidelis"},"content":"hide circle","lastModifiedDate":"2021-10-26"},{"lineNumber":9,"author":{"gitId":"justinfidelis"},"content":"hide empty members","lastModifiedDate":"2021-10-26"},{"lineNumber":10,"author":{"gitId":"justinfidelis"},"content":"skinparam classAttributeIconSize 0","lastModifiedDate":"2021-10-26"},{"lineNumber":11,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":12,"author":{"gitId":"justinfidelis"},"content":"package \"MedBot\" \u003c\u003cRectangle\u003e\u003e {","lastModifiedDate":"2021-10-27"},{"lineNumber":13,"author":{"gitId":"justinfidelis"},"content":"}","lastModifiedDate":"2021-10-27"},{"lineNumber":14,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":15,"author":{"gitId":"justinfidelis"},"content":"package \"Storage\" \u003c\u003cRectangle\u003e\u003e {","lastModifiedDate":"2021-10-27"},{"lineNumber":16,"author":{"gitId":"justinfidelis"},"content":"}","lastModifiedDate":"2021-10-27"},{"lineNumber":17,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":18,"author":{"gitId":"justinfidelis"},"content":"package \"Command\" \u003c\u003cRectangle\u003e\u003e {","lastModifiedDate":"2021-10-27"},{"lineNumber":19,"author":{"gitId":"justinfidelis"},"content":"}","lastModifiedDate":"2021-10-27"},{"lineNumber":20,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":21,"author":{"gitId":"justinfidelis"},"content":"package \"Scheduler Component\" \u003c\u003cRectangle\u003e\u003e {","lastModifiedDate":"2021-10-26"},{"lineNumber":22,"author":{"gitId":"justinfidelis"},"content":"    class Scheduler","lastModifiedDate":"2021-10-26"},{"lineNumber":23,"author":{"gitId":"justinfidelis"},"content":"    class \"{abstract}\\nPersonList\" as PersonList","lastModifiedDate":"2021-10-26"},{"lineNumber":24,"author":{"gitId":"justinfidelis"},"content":"    class PatientList","lastModifiedDate":"2021-10-26"},{"lineNumber":25,"author":{"gitId":"justinfidelis"},"content":"    class \"MedicalStaffList\" as StaffList","lastModifiedDate":"2021-10-26"},{"lineNumber":26,"author":{"gitId":"justinfidelis"},"content":"    class SchedulerAppointmentList","lastModifiedDate":"2021-10-26"},{"lineNumber":27,"author":{"gitId":"justinfidelis"},"content":"    class \"{abstract}\\nPerson\" as Person","lastModifiedDate":"2021-10-26"},{"lineNumber":28,"author":{"gitId":"justinfidelis"},"content":"    class Patient","lastModifiedDate":"2021-10-26"},{"lineNumber":29,"author":{"gitId":"justinfidelis"},"content":"    class Staff","lastModifiedDate":"2021-10-26"},{"lineNumber":30,"author":{"gitId":"justinfidelis"},"content":"    class PersonalAppointmentList","lastModifiedDate":"2021-10-26"},{"lineNumber":31,"author":{"gitId":"justinfidelis"},"content":"    class Appointment","lastModifiedDate":"2021-10-26"},{"lineNumber":32,"author":{"gitId":"justinfidelis"},"content":"    note left: Not drawn: appointment is an\\nassociation class between\\nPatient and Staff","lastModifiedDate":"2021-10-27"},{"lineNumber":33,"author":{"gitId":"justinfidelis"},"content":"    enum \"\u003c\u003cenumeration\u003e\u003e\\nPersonType\" as PersonType","lastModifiedDate":"2021-10-26"},{"lineNumber":34,"author":{"gitId":"justinfidelis"},"content":"}","lastModifiedDate":"2021-10-26"},{"lineNumber":35,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":36,"author":{"gitId":"justinfidelis"},"content":"MedBot -down-\u003e \"1\" Scheduler","lastModifiedDate":"2021-10-27"},{"lineNumber":37,"author":{"gitId":"justinfidelis"},"content":"Storage .right.\u003e Scheduler","lastModifiedDate":"2021-10-27"},{"lineNumber":38,"author":{"gitId":"justinfidelis"},"content":"Command .up.\u003e Scheduler","lastModifiedDate":"2021-10-27"},{"lineNumber":39,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":40,"author":{"gitId":"justinfidelis"},"content":"MedBot -[hidden]down-\u003e Storage","lastModifiedDate":"2021-10-27"},{"lineNumber":41,"author":{"gitId":"justinfidelis"},"content":"Storage -[hidden]down-\u003e Command","lastModifiedDate":"2021-10-27"},{"lineNumber":42,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":43,"author":{"gitId":"justinfidelis"},"content":"class Scheduler {","lastModifiedDate":"2021-10-26"},{"lineNumber":44,"author":{"gitId":"justinfidelis"},"content":"    +addPatient(patient: Person): int","lastModifiedDate":"2021-10-26"},{"lineNumber":45,"author":{"gitId":"justinfidelis"},"content":"    +deletePatient(patientId: int): void","lastModifiedDate":"2021-10-26"},{"lineNumber":46,"author":{"gitId":"justinfidelis"},"content":"    +editPatient(patientId: int, newPatientData: Person): void","lastModifiedDate":"2021-10-26"},{"lineNumber":47,"author":{"gitId":"justinfidelis"},"content":"    +addStaff(staff: Person): int","lastModifiedDate":"2021-10-27"},{"lineNumber":48,"author":{"gitId":"justinfidelis"},"content":"    +deleteStaff(staffId: int): void","lastModifiedDate":"2021-10-27"},{"lineNumber":49,"author":{"gitId":"justinfidelis"},"content":"    +editStaff(staffId: int, newStaffData: Person): void","lastModifiedDate":"2021-10-26"},{"lineNumber":50,"author":{"gitId":"justinfidelis"},"content":"    +addAppointment(appointment: Appointment): int","lastModifiedDate":"2021-10-26"},{"lineNumber":51,"author":{"gitId":"justinfidelis"},"content":"    +deleteAppointment(appointmentId: int): void","lastModifiedDate":"2021-10-26"},{"lineNumber":52,"author":{"gitId":"justinfidelis"},"content":"    +editAppointment(appointmentId: int, newAppointment: Appointment): void","lastModifiedDate":"2021-10-26"},{"lineNumber":53,"author":{"gitId":"justinfidelis"},"content":"}","lastModifiedDate":"2021-10-26"},{"lineNumber":54,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":55,"author":{"gitId":"justinfidelis"},"content":"class PersonList {","lastModifiedDate":"2021-10-26"},{"lineNumber":56,"author":{"gitId":"justinfidelis"},"content":"    +addPerson(person: Person)","lastModifiedDate":"2021-10-26"},{"lineNumber":57,"author":{"gitId":"justinfidelis"},"content":"    +editPerson(personId: int, person: newPersonData)","lastModifiedDate":"2021-10-26"},{"lineNumber":58,"author":{"gitId":"justinfidelis"},"content":"    +deletePerson(personId: int)","lastModifiedDate":"2021-10-26"},{"lineNumber":59,"author":{"gitId":"justinfidelis"},"content":"}","lastModifiedDate":"2021-10-26"},{"lineNumber":60,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":61,"author":{"gitId":"justinfidelis"},"content":"class Person {","lastModifiedDate":"2021-10-26"},{"lineNumber":62,"author":{"gitId":"justinfidelis"},"content":"    #icNumber: String","lastModifiedDate":"2021-10-26"},{"lineNumber":63,"author":{"gitId":"justinfidelis"},"content":"    #name:String","lastModifiedDate":"2021-10-26"},{"lineNumber":64,"author":{"gitId":"justinfidelis"},"content":"    #phoneNumber: String","lastModifiedDate":"2021-10-26"},{"lineNumber":65,"author":{"gitId":"justinfidelis"},"content":"    #emailAddress: String","lastModifiedDate":"2021-10-26"},{"lineNumber":66,"author":{"gitId":"justinfidelis"},"content":"    #residentialAddress: String","lastModifiedDate":"2021-10-26"},{"lineNumber":67,"author":{"gitId":"justinfidelis"},"content":"    #isArchived: boolean","lastModifiedDate":"2021-10-26"},{"lineNumber":68,"author":{"gitId":"justinfidelis"},"content":"}","lastModifiedDate":"2021-10-26"},{"lineNumber":69,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":70,"author":{"gitId":"justinfidelis"},"content":"enum PersonType {","lastModifiedDate":"2021-10-26"},{"lineNumber":71,"author":{"gitId":"justinfidelis"},"content":"    PATIENT","lastModifiedDate":"2021-10-26"},{"lineNumber":72,"author":{"gitId":"justinfidelis"},"content":"    STAFF","lastModifiedDate":"2021-10-26"},{"lineNumber":73,"author":{"gitId":"justinfidelis"},"content":"}","lastModifiedDate":"2021-10-26"},{"lineNumber":74,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":75,"author":{"gitId":"justinfidelis"},"content":"class PersonalAppointmentList {","lastModifiedDate":"2021-10-26"},{"lineNumber":76,"author":{"gitId":"justinfidelis"},"content":"    +addAppointment(appointment: Appointment): void","lastModifiedDate":"2021-10-26"},{"lineNumber":77,"author":{"gitId":"justinfidelis"},"content":"    +deleteAppointment(appointmentId: int): void","lastModifiedDate":"2021-10-26"},{"lineNumber":78,"author":{"gitId":"justinfidelis"},"content":"    +getAppointmentId(dateTimeCode: int): int","lastModifiedDate":"2021-10-27"},{"lineNumber":79,"author":{"gitId":"justinfidelis"},"content":"}","lastModifiedDate":"2021-10-26"},{"lineNumber":80,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":81,"author":{"gitId":"justinfidelis"},"content":"class SchedulerAppointmentList {","lastModifiedDate":"2021-10-26"},{"lineNumber":82,"author":{"gitId":"justinfidelis"},"content":"    +addAppointment(appointment: Appointment): int","lastModifiedDate":"2021-10-26"},{"lineNumber":83,"author":{"gitId":"justinfidelis"},"content":"    +deleteAppointment(appointmentId: int): void","lastModifiedDate":"2021-10-26"},{"lineNumber":84,"author":{"gitId":"justinfidelis"},"content":"    +getAppointment(appointmentId: int): Appointment","lastModifiedDate":"2021-10-26"},{"lineNumber":85,"author":{"gitId":"justinfidelis"},"content":"}","lastModifiedDate":"2021-10-26"},{"lineNumber":86,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":87,"author":{"gitId":"justinfidelis"},"content":"class Appointment {","lastModifiedDate":"2021-10-26"},{"lineNumber":88,"author":{"gitId":"justinfidelis"},"content":"    -appointmentId: int","lastModifiedDate":"2021-10-26"},{"lineNumber":89,"author":{"gitId":"justinfidelis"},"content":"    -patientId: int","lastModifiedDate":"2021-10-26"},{"lineNumber":90,"author":{"gitId":"justinfidelis"},"content":"    -medicalStaffId: int","lastModifiedDate":"2021-10-26"},{"lineNumber":91,"author":{"gitId":"justinfidelis"},"content":"    -dateTimeCode: int","lastModifiedDate":"2021-10-26"},{"lineNumber":92,"author":{"gitId":"justinfidelis"},"content":"}","lastModifiedDate":"2021-10-26"},{"lineNumber":93,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":94,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":95,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":96,"author":{"gitId":"justinfidelis"},"content":"PersonList \u003c|-down- PatientList","lastModifiedDate":"2021-10-26"},{"lineNumber":97,"author":{"gitId":"justinfidelis"},"content":"PersonList \u003c|-down- StaffList","lastModifiedDate":"2021-10-26"},{"lineNumber":98,"author":{"gitId":"justinfidelis"},"content":"Person \u003c|-up- Patient","lastModifiedDate":"2021-10-26"},{"lineNumber":99,"author":{"gitId":"justinfidelis"},"content":"Person \u003c|-up- Staff","lastModifiedDate":"2021-10-26"},{"lineNumber":100,"author":{"gitId":"justinfidelis"},"content":"Person -right-\u003e \"1\" PersonType","lastModifiedDate":"2021-10-26"},{"lineNumber":101,"author":{"gitId":"justinfidelis"},"content":"Person -left-\u003e \"1\" PersonalAppointmentList","lastModifiedDate":"2021-10-26"},{"lineNumber":102,"author":{"gitId":"justinfidelis"},"content":"PatientList o-down- \"*\" Patient","lastModifiedDate":"2021-10-26"},{"lineNumber":103,"author":{"gitId":"justinfidelis"},"content":"StaffList o-down- \"*\" Staff","lastModifiedDate":"2021-10-26"},{"lineNumber":104,"author":{"gitId":"justinfidelis"},"content":"Scheduler -right-\u003e \"1\" PatientList","lastModifiedDate":"2021-10-26"},{"lineNumber":105,"author":{"gitId":"justinfidelis"},"content":"Scheduler -right-\u003e \"1\" StaffList","lastModifiedDate":"2021-10-26"},{"lineNumber":106,"author":{"gitId":"justinfidelis"},"content":"Scheduler -down--\u003e \"1\" SchedulerAppointmentList","lastModifiedDate":"2021-10-26"},{"lineNumber":107,"author":{"gitId":"justinfidelis"},"content":"PersonalAppointmentList o-down- \"*\" Appointment","lastModifiedDate":"2021-10-26"},{"lineNumber":108,"author":{"gitId":"justinfidelis"},"content":"SchedulerAppointmentList o-down- \"*\" Appointment","lastModifiedDate":"2021-10-26"},{"lineNumber":109,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":110,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":111,"author":{"gitId":"justinfidelis"},"content":"SchedulerAppointmentList -[hidden]right- PersonalAppointmentList","lastModifiedDate":"2021-10-27"},{"lineNumber":112,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":113,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":114,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":115,"author":{"gitId":"justinfidelis"},"content":"note as MethodsNote","lastModifiedDate":"2021-10-26"},{"lineNumber":116,"author":{"gitId":"justinfidelis"},"content":"Note: Not all methods are","lastModifiedDate":"2021-10-26"},{"lineNumber":117,"author":{"gitId":"justinfidelis"},"content":"included in this diagram.","lastModifiedDate":"2021-10-26"},{"lineNumber":118,"author":{"gitId":"justinfidelis"},"content":"end note","lastModifiedDate":"2021-10-26"},{"lineNumber":119,"author":{"gitId":"justinfidelis"},"content":"@enduml","lastModifiedDate":"2021-10-26"}],"authorContributionMap":{"justinfidelis":119}},{"path":"docs/diagrams/pumlfiles/StorageClassDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"CrimsonTitan79"},"content":"@startuml","lastModifiedDate":"2021-10-28"},{"lineNumber":2,"author":{"gitId":"CrimsonTitan79"},"content":"hide circle","lastModifiedDate":"2021-10-28"},{"lineNumber":3,"author":{"gitId":"CrimsonTitan79"},"content":"skinparam classAttributeIconSize 0","lastModifiedDate":"2021-10-28"},{"lineNumber":4,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":5,"author":{"gitId":"CrimsonTitan79"},"content":"package medbot.storage {","lastModifiedDate":"2021-10-28"},{"lineNumber":6,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":7,"author":{"gitId":"CrimsonTitan79"},"content":"class StorageManager {","lastModifiedDate":"2021-10-28"},{"lineNumber":8,"author":{"gitId":"CrimsonTitan79"},"content":"+ StorageManager(scheduler, ui)","lastModifiedDate":"2021-10-28"},{"lineNumber":9,"author":{"gitId":"CrimsonTitan79"},"content":"+ saveToStorage(scheduler)","lastModifiedDate":"2021-10-28"},{"lineNumber":10,"author":{"gitId":"CrimsonTitan79"},"content":"}","lastModifiedDate":"2021-10-28"},{"lineNumber":11,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":12,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":13,"author":{"gitId":"CrimsonTitan79"},"content":"class \"{abstract} \\n Storage\"{","lastModifiedDate":"2021-10-28"},{"lineNumber":14,"author":{"gitId":"CrimsonTitan79"},"content":"+ loadStorage(listItemType, scheduler): String","lastModifiedDate":"2021-10-28"},{"lineNumber":15,"author":{"gitId":"CrimsonTitan79"},"content":"+ saveData(storageString: String)","lastModifiedDate":"2021-10-28"},{"lineNumber":16,"author":{"gitId":"CrimsonTitan79"},"content":"# createListItem(storageLine, listItemType) {\u0027abstract\u0027}","lastModifiedDate":"2021-10-28"},{"lineNumber":17,"author":{"gitId":"CrimsonTitan79"},"content":"}","lastModifiedDate":"2021-10-28"},{"lineNumber":18,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":19,"author":{"gitId":"CrimsonTitan79"},"content":"together {","lastModifiedDate":"2021-10-28"},{"lineNumber":20,"author":{"gitId":"CrimsonTitan79"},"content":"class AppointmentStorage {","lastModifiedDate":"2021-10-28"},{"lineNumber":21,"author":{"gitId":"CrimsonTitan79"},"content":"# createListItem(storageLine, listItemType)","lastModifiedDate":"2021-10-28"},{"lineNumber":22,"author":{"gitId":"CrimsonTitan79"},"content":"}","lastModifiedDate":"2021-10-28"},{"lineNumber":23,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":24,"author":{"gitId":"CrimsonTitan79"},"content":"class \"{abstract} \\n PersonStorage\"{","lastModifiedDate":"2021-10-28"},{"lineNumber":25,"author":{"gitId":"CrimsonTitan79"},"content":"# createListItem(storageLine, listItemType)","lastModifiedDate":"2021-10-28"},{"lineNumber":26,"author":{"gitId":"CrimsonTitan79"},"content":"}","lastModifiedDate":"2021-10-28"},{"lineNumber":27,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":28,"author":{"gitId":"CrimsonTitan79"},"content":"class PatientStorage","lastModifiedDate":"2021-10-28"},{"lineNumber":29,"author":{"gitId":"CrimsonTitan79"},"content":"class StaffStorage","lastModifiedDate":"2021-10-28"},{"lineNumber":30,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":31,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":32,"author":{"gitId":"CrimsonTitan79"},"content":"StorageManager --\u003e \"1\" AppointmentStorage","lastModifiedDate":"2021-11-06"},{"lineNumber":33,"author":{"gitId":"CrimsonTitan79"},"content":"PatientStorage \"1\"\u003c-- StorageManager","lastModifiedDate":"2021-11-06"},{"lineNumber":34,"author":{"gitId":"CrimsonTitan79"},"content":"StaffStorage \"1\"\u003c-- StorageManager","lastModifiedDate":"2021-11-06"},{"lineNumber":35,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":36,"author":{"gitId":"CrimsonTitan79"},"content":"\"{abstract} \\n Storage\" \u003c|-- AppointmentStorage","lastModifiedDate":"2021-10-28"},{"lineNumber":37,"author":{"gitId":"CrimsonTitan79"},"content":"\"{abstract} \\n Storage\" \u003c|-- \"{abstract} \\n PersonStorage\"","lastModifiedDate":"2021-10-28"},{"lineNumber":38,"author":{"gitId":"CrimsonTitan79"},"content":"\"{abstract} \\n PersonStorage\" \u003c|-- PatientStorage","lastModifiedDate":"2021-10-28"},{"lineNumber":39,"author":{"gitId":"CrimsonTitan79"},"content":"\"{abstract} \\n PersonStorage\" \u003c|-- StaffStorage","lastModifiedDate":"2021-10-28"},{"lineNumber":40,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":41,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":42,"author":{"gitId":"CrimsonTitan79"},"content":"enum \"\u003c\u003cenumeration\u003e\u003e \\n ListItemType\"{","lastModifiedDate":"2021-11-06"},{"lineNumber":43,"author":{"gitId":"CrimsonTitan79"},"content":"PATIENT","lastModifiedDate":"2021-10-28"},{"lineNumber":44,"author":{"gitId":"CrimsonTitan79"},"content":"STAFF","lastModifiedDate":"2021-10-28"},{"lineNumber":45,"author":{"gitId":"CrimsonTitan79"},"content":"APPOINTMENT","lastModifiedDate":"2021-10-28"},{"lineNumber":46,"author":{"gitId":"CrimsonTitan79"},"content":"}","lastModifiedDate":"2021-10-28"},{"lineNumber":47,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":48,"author":{"gitId":"CrimsonTitan79"},"content":"@enduml","lastModifiedDate":"2021-10-28"}],"authorContributionMap":{"CrimsonTitan79":48}},{"path":"docs/diagrams/pumlfiles/SwitchViewDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"Kureans"},"content":"@startuml","lastModifiedDate":"2021-10-19"},{"lineNumber":2,"author":{"gitId":"Kureans"},"content":"Medbot -\u003e Ui","lastModifiedDate":"2021-10-19"},{"lineNumber":3,"author":{"gitId":"Kureans"},"content":"Ui -\u003e Parser","lastModifiedDate":"2021-10-19"},{"lineNumber":4,"author":{"gitId":"Kureans"},"content":"Parser -\u003e Command","lastModifiedDate":"2021-10-19"},{"lineNumber":5,"author":{"gitId":"Kureans"},"content":"Command --\u003e Ui","lastModifiedDate":"2021-10-19"},{"lineNumber":6,"author":{"gitId":"Kureans"},"content":"Command -\u003e PatientList","lastModifiedDate":"2021-10-19"},{"lineNumber":7,"author":{"gitId":"Kureans"},"content":"PatientList --\u003e Ui","lastModifiedDate":"2021-10-19"},{"lineNumber":8,"author":{"gitId":"Kureans"},"content":"@enduml","lastModifiedDate":"2021-10-19"}],"authorContributionMap":{"Kureans":8}},{"path":"docs/team/crimsontitan79.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"CrimsonTitan79"},"content":"# CrimsonTitan79 - Project Portfolio Page","lastModifiedDate":"2021-11-06"},{"lineNumber":2,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":3,"author":{"gitId":"CrimsonTitan79"},"content":"## Overview","lastModifiedDate":"2021-11-06"},{"lineNumber":4,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":5,"author":{"gitId":"CrimsonTitan79"},"content":"MedBot is a Command Line Interface (CLI) application for head nurses to manage the personal information of patients and","lastModifiedDate":"2021-11-06"},{"lineNumber":6,"author":{"gitId":"CrimsonTitan79"},"content":"medical staff and to schedule appointments between the 2 parties. By utilising text-based commands instead of Graphical","lastModifiedDate":"2021-11-06"},{"lineNumber":7,"author":{"gitId":"CrimsonTitan79"},"content":"User Interface (GUI)","lastModifiedDate":"2021-11-06"},{"lineNumber":8,"author":{"gitId":"CrimsonTitan79"},"content":"based navigation, MedBot allows head nurses to complete their management tasks done quicker and more efficiently.","lastModifiedDate":"2021-11-06"},{"lineNumber":9,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":10,"author":{"gitId":"CrimsonTitan79"},"content":"### Summary of Contributions","lastModifiedDate":"2021-11-06"},{"lineNumber":11,"author":{"gitId":"CrimsonTitan79"},"content":"* Code","lastModifiedDate":"2021-11-06"},{"lineNumber":12,"author":{"gitId":"CrimsonTitan79"},"content":"  contributed: [RepoSense link](https://nus-cs2113-ay2122s1.github.io/tp-dashboard/?search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dtrue\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026since\u003d2021-09-25\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dCrimsonTitan79\u0026tabRepo\u003dAY2122S1-CS2113-T13-1%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs~functional-code~test-code~other\u0026authorshipIsBinaryFileTypeChecked\u003dfalse)","lastModifiedDate":"2021-11-06"},{"lineNumber":13,"author":{"gitId":"CrimsonTitan79"},"content":"* Enhancements implemented","lastModifiedDate":"2021-11-06"},{"lineNumber":14,"author":{"gitId":"CrimsonTitan79"},"content":"    * `Storage` class (including `AppointmentStorage`, `PersonStorage`, `PatientStorage`, `StaffStorage` classes).","lastModifiedDate":"2021-11-06"},{"lineNumber":15,"author":{"gitId":"CrimsonTitan79"},"content":"        * Object-Oriented Programming (OOP) concepts used: `AppointmentStorage` and `PersonStorage` inherit","lastModifiedDate":"2021-11-06"},{"lineNumber":16,"author":{"gitId":"CrimsonTitan79"},"content":"          from `Storage`, and","lastModifiedDate":"2021-11-06"},{"lineNumber":17,"author":{"gitId":"CrimsonTitan79"},"content":"          `PatientStorage` and `StaffStorage` inherit from `PersonStorage`.","lastModifiedDate":"2021-11-06"},{"lineNumber":18,"author":{"gitId":"CrimsonTitan79"},"content":"        * These classes give MedBot the ability to persistently store and retrieve data that the user enters into the","lastModifiedDate":"2021-11-06"},{"lineNumber":19,"author":{"gitId":"CrimsonTitan79"},"content":"          program, and even allows for porting of the data to other computers.","lastModifiedDate":"2021-11-06"},{"lineNumber":20,"author":{"gitId":"CrimsonTitan79"},"content":"    * `StorageManager` class which consolidates the functionality of the aforementioned `Storage` classes.","lastModifiedDate":"2021-11-06"},{"lineNumber":21,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":22,"author":{"gitId":"CrimsonTitan79"},"content":"* Documentations:","lastModifiedDate":"2021-11-06"},{"lineNumber":23,"author":{"gitId":"CrimsonTitan79"},"content":"    * User Guide Contribution","lastModifiedDate":"2021-11-06"},{"lineNumber":24,"author":{"gitId":"CrimsonTitan79"},"content":"      * Update User Guide with the latest features and expected outputs after changes in MedBot code","lastModifiedDate":"2021-11-08"},{"lineNumber":25,"author":{"gitId":"CrimsonTitan79"},"content":"        * Added find appointments section ","lastModifiedDate":"2021-11-08"},{"lineNumber":26,"author":{"gitId":"CrimsonTitan79"},"content":"      * Explanation for how persistent data is stored for MedBot.","lastModifiedDate":"2021-11-06"},{"lineNumber":27,"author":{"gitId":"CrimsonTitan79"},"content":"      * Edits to refine certain explanations and certain edge cases","lastModifiedDate":"2021-11-08"},{"lineNumber":28,"author":{"gitId":"CrimsonTitan79"},"content":"      * Add contents page for easy navigation","lastModifiedDate":"2021-11-08"},{"lineNumber":29,"author":{"gitId":"CrimsonTitan79"},"content":"    * Developer Guide Contribution","lastModifiedDate":"2021-11-06"},{"lineNumber":30,"author":{"gitId":"CrimsonTitan79"},"content":"      * Section on instructions for manual testing","lastModifiedDate":"2021-11-08"},{"lineNumber":31,"author":{"gitId":"CrimsonTitan79"},"content":"      * Implementation details for Storage component.","lastModifiedDate":"2021-11-08"},{"lineNumber":32,"author":{"gitId":"CrimsonTitan79"},"content":"      * Sequence diagram for `Storage`.","lastModifiedDate":"2021-11-08"},{"lineNumber":33,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":34,"author":{"gitId":"CrimsonTitan79"},"content":"* Review/mentoring contributions","lastModifiedDate":"2021-11-06"},{"lineNumber":35,"author":{"gitId":"CrimsonTitan79"},"content":"    * Fix minor bugs from other components when they arise. (e.g. erroneous UI print messages )","lastModifiedDate":"2021-11-08"},{"lineNumber":36,"author":{"gitId":"CrimsonTitan79"},"content":"    * Occasional PR reviews: [link](https://github.com/AY2122S1-CS2113-T13-1/tp/pull/46).","lastModifiedDate":"2021-11-06"},{"lineNumber":37,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-11-06"}],"authorContributionMap":{"CrimsonTitan79":37}},{"path":"docs/team/ericbryann.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"EricBryann"},"content":"# Eric Bryan - Project Portfolio Page","lastModifiedDate":"2021-11-04"},{"lineNumber":2,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":3,"author":{"gitId":"EricBryann"},"content":"## Overview","lastModifiedDate":"2021-11-04"},{"lineNumber":4,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":5,"author":{"gitId":"EricBryann"},"content":"MedBot is a Command Line Interface (CLI) application for head nurses to manage patients’ personal information, and","lastModifiedDate":"2021-11-04"},{"lineNumber":6,"author":{"gitId":"EricBryann"},"content":"scheduler appointments between them and medical staff.","lastModifiedDate":"2021-11-04"},{"lineNumber":7,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":8,"author":{"gitId":"EricBryann"},"content":"### Summary of Contributions","lastModifiedDate":"2021-11-04"},{"lineNumber":9,"author":{"gitId":"EricBryann"},"content":"* Code contributed: [RepoSense link](https://nus-cs2113-ay2122s1.github.io/tp-dashboard/?search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2021-09-25\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dEricBryann\u0026tabRepo\u003dAY2122S1-CS2113-T13-1%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs~functional-code~test-code~other\u0026authorshipIsBinaryFileTypeChecked\u003dfalse)","lastModifiedDate":"2021-11-04"},{"lineNumber":10,"author":{"gitId":"EricBryann"},"content":"* New Features implemented:","lastModifiedDate":"2021-11-04"},{"lineNumber":11,"author":{"gitId":"EricBryann"},"content":"  * `Ui` class (including `PersonUi`, `PatientUi`, `StaffUi` class)","lastModifiedDate":"2021-11-04"},{"lineNumber":12,"author":{"gitId":"EricBryann"},"content":"    * What it does : interacts with users by reading user inputs and printing outputs.","lastModifiedDate":"2021-11-04"},{"lineNumber":13,"author":{"gitId":"EricBryann"},"content":"    * Highlights :","lastModifiedDate":"2021-11-04"},{"lineNumber":14,"author":{"gitId":"EricBryann"},"content":"      * Various OOP concepts are used. `Ui` is an abstraction over `PatientUi`,","lastModifiedDate":"2021-11-04"},{"lineNumber":15,"author":{"gitId":"EricBryann"},"content":"        `StaffUi`, and `SchedulerUi`. `PatientUi` and `StaffUi` inherits from abstract","lastModifiedDate":"2021-11-04"},{"lineNumber":16,"author":{"gitId":"EricBryann"},"content":"        `PersonUi` class.","lastModifiedDate":"2021-11-04"},{"lineNumber":17,"author":{"gitId":"EricBryann"},"content":"      * Printing user-friendly outputs including the design of a table that will truncate","lastModifiedDate":"2021-11-04"},{"lineNumber":18,"author":{"gitId":"EricBryann"},"content":"        long string to fit the table cell.","lastModifiedDate":"2021-11-04"},{"lineNumber":19,"author":{"gitId":"EricBryann"},"content":"  * `find` command","lastModifiedDate":"2021-11-04"},{"lineNumber":20,"author":{"gitId":"EricBryann"},"content":"    * What it does : filter through a list based on inputted parameters.","lastModifiedDate":"2021-11-04"},{"lineNumber":21,"author":{"gitId":"EricBryann"},"content":"    * Justification : This feature mimics a search bar feature in a GUI application to address the","lastModifiedDate":"2021-11-04"},{"lineNumber":22,"author":{"gitId":"EricBryann"},"content":"      project requirement of a user who likes to type.","lastModifiedDate":"2021-11-04"},{"lineNumber":23,"author":{"gitId":"EricBryann"},"content":"    * Highlights :","lastModifiedDate":"2021-11-04"},{"lineNumber":24,"author":{"gitId":"EricBryann"},"content":"      * Consider edge case when empty parameters are given, it will give records with empty","lastModifiedDate":"2021-11-04"},{"lineNumber":25,"author":{"gitId":"EricBryann"},"content":"        values.","lastModifiedDate":"2021-11-04"},{"lineNumber":26,"author":{"gitId":"EricBryann"},"content":"  * `hide`/`show` commands","lastModifiedDate":"2021-11-04"},{"lineNumber":27,"author":{"gitId":"EricBryann"},"content":"    * What it does : soft deleting a person when no longer relevant (e.g. discharged).","lastModifiedDate":"2021-11-04"},{"lineNumber":28,"author":{"gitId":"EricBryann"},"content":"    * Justification : While `delete` will completely remove the data, these commands will not","lastModifiedDate":"2021-11-04"},{"lineNumber":29,"author":{"gitId":"EricBryann"},"content":"      remove the data, to retain past records.","lastModifiedDate":"2021-11-04"},{"lineNumber":30,"author":{"gitId":"EricBryann"},"content":"    * Highlights :","lastModifiedDate":"2021-11-04"},{"lineNumber":31,"author":{"gitId":"EricBryann"},"content":"      * Consider its interaction with `list` command to show not-hidden persons, and","lastModifiedDate":"2021-11-04"},{"lineNumber":32,"author":{"gitId":"EricBryann"},"content":"        `list -h` to show hidden persons, ensuring the existing code does not break.","lastModifiedDate":"2021-11-04"},{"lineNumber":33,"author":{"gitId":"EricBryann"},"content":"* Documentations:","lastModifiedDate":"2021-11-04"},{"lineNumber":34,"author":{"gitId":"EricBryann"},"content":"  * UG:","lastModifiedDate":"2021-11-04"},{"lineNumber":35,"author":{"gitId":"EricBryann"},"content":"    * Added information for `find`, `hide`, and `show` commands.","lastModifiedDate":"2021-11-04"},{"lineNumber":36,"author":{"gitId":"EricBryann"},"content":"    * Added additional notes for some commands under `Notes` and `General Notes` for possible edge cases or","lastModifiedDate":"2021-11-07"},{"lineNumber":37,"author":{"gitId":"EricBryann"},"content":"      additional useful information.","lastModifiedDate":"2021-11-07"},{"lineNumber":38,"author":{"gitId":"EricBryann"},"content":"  * DG:","lastModifiedDate":"2021-11-04"},{"lineNumber":39,"author":{"gitId":"EricBryann"},"content":"    * Added implementation details for `Ui` and `find`","lastModifiedDate":"2021-11-04"},{"lineNumber":40,"author":{"gitId":"EricBryann"},"content":"    * Added a sequence diagram for `Ui`","lastModifiedDate":"2021-11-04"},{"lineNumber":41,"author":{"gitId":"EricBryann"},"content":"* Contributions to team task:","lastModifiedDate":"2021-11-04"},{"lineNumber":42,"author":{"gitId":"EricBryann"},"content":"  * Occasional refactoring of codes to follow more OOP principles. [#30](https://github.com/AY2122S1-CS2113-T13-1/tp/pull/30), [#92](https://github.com/AY2122S1-CS2113-T13-1/tp/pull/92), [#163](https://github.com/AY2122S1-CS2113-T13-1/tp/pull/163)","lastModifiedDate":"2021-11-07"},{"lineNumber":43,"author":{"gitId":"EricBryann"},"content":"  * Assigned milestone `v1.0` due dates.","lastModifiedDate":"2021-11-07"}],"authorContributionMap":{"EricBryann":43}},{"path":"docs/team/jushg.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"jushg"},"content":"# Hoang Trong Tan - Project Portfolio Page","lastModifiedDate":"2021-11-05"},{"lineNumber":2,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":3,"author":{"gitId":"jushg"},"content":"## Overview","lastModifiedDate":"2021-11-05"},{"lineNumber":4,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":5,"author":{"gitId":"jushg"},"content":"MedBot is a Command Line Interface (CLI) application for head nurses to manage patients’ personal and medical","lastModifiedDate":"2021-11-05"},{"lineNumber":6,"author":{"gitId":"jushg"},"content":"information. By utilising text-based commands instead of traditional Graphical User Interface (GUI)","lastModifiedDate":"2021-11-05"},{"lineNumber":7,"author":{"gitId":"jushg"},"content":"based navigation, MedBot can allow head nurses to get their management tasks done quicker and more efficiently.","lastModifiedDate":"2021-11-05"},{"lineNumber":8,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":9,"author":{"gitId":"jushg"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2021-11-05"},{"lineNumber":10,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":11,"author":{"gitId":"jushg"},"content":"### Summary of Contributions","lastModifiedDate":"2021-11-05"},{"lineNumber":12,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":13,"author":{"gitId":"jushg"},"content":"* **Code","lastModifiedDate":"2021-11-05"},{"lineNumber":14,"author":{"gitId":"jushg"},"content":"  Contributed:** [Reposense Link](https://nus-cs2113-ay2122s1.github.io/tp-dashboard/?search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dtrue\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026since\u003d2021-09-25\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003djushg\u0026tabRepo\u003dAY2122S1-CS2113-T13-1%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs~functional-code~test-code\u0026authorshipIsBinaryFileTypeChecked\u003dfalse)","lastModifiedDate":"2021-11-05"},{"lineNumber":15,"author":{"gitId":"jushg"},"content":"* **New Feature:**","lastModifiedDate":"2021-11-05"},{"lineNumber":16,"author":{"gitId":"jushg"},"content":"    * Implement two different role for person: patients and staffs.","lastModifiedDate":"2021-11-05"},{"lineNumber":17,"author":{"gitId":"jushg"},"content":"        * What it does: Allows a person\u0027s record to be added as a patient or as a staff.","lastModifiedDate":"2021-11-05"},{"lineNumber":18,"author":{"gitId":"jushg"},"content":"        * Justification: Facilitate the development of the `Scheduler` class which rely on the existent of two separate","lastModifiedDate":"2021-11-05"},{"lineNumber":19,"author":{"gitId":"jushg"},"content":"          lists.","lastModifiedDate":"2021-11-05"},{"lineNumber":20,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":21,"author":{"gitId":"jushg"},"content":"    * Added the ability to modify existing person record via the `edit` command.","lastModifiedDate":"2021-11-05"},{"lineNumber":22,"author":{"gitId":"jushg"},"content":"        * What it does: Allows the user to modify existing record of the program.","lastModifiedDate":"2021-11-05"},{"lineNumber":23,"author":{"gitId":"jushg"},"content":"        * Justification: It can help the user to save time instead of remove and re-add the record.","lastModifiedDate":"2021-11-05"},{"lineNumber":24,"author":{"gitId":"jushg"},"content":"        * Highlights: Users can remove existing information by indicating a blank field when entering the command.","lastModifiedDate":"2021-11-05"},{"lineNumber":25,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":26,"author":{"gitId":"jushg"},"content":"    * Added a way to get the current views via the `get view` command.","lastModifiedDate":"2021-11-05"},{"lineNumber":27,"author":{"gitId":"jushg"},"content":"        * What it does: Allows the user to know if they are in `PATIENT_INFO`, `STAFF_INFO`, or `SCHEDULER`","lastModifiedDate":"2021-11-05"},{"lineNumber":28,"author":{"gitId":"jushg"},"content":"          views.","lastModifiedDate":"2021-11-05"},{"lineNumber":29,"author":{"gitId":"jushg"},"content":"        * Justification: Help the user to easily identify which part of the system they are in.","lastModifiedDate":"2021-11-05"},{"lineNumber":30,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":31,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":32,"author":{"gitId":"jushg"},"content":"* **Enhancements Implemented :**","lastModifiedDate":"2021-11-05"},{"lineNumber":33,"author":{"gitId":"jushg"},"content":"    * `Command` class, including `PersonCommand`, `GeneralCommand`, and `StaffCommand`.","lastModifiedDate":"2021-11-05"},{"lineNumber":34,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":35,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":36,"author":{"gitId":"jushg"},"content":"* **User Guide Contribution**","lastModifiedDate":"2021-11-05"},{"lineNumber":37,"author":{"gitId":"jushg"},"content":"  * Added information for `get view` command","lastModifiedDate":"2021-11-05"},{"lineNumber":38,"author":{"gitId":"jushg"},"content":"  * Formatted some information for basic commands for Patient/Staff Info view (`add`, `delete`, `edit`, `exit`)","lastModifiedDate":"2021-11-05"},{"lineNumber":39,"author":{"gitId":"jushg"},"content":"  * Revamped some the expected outputs for the various commands after `Ui` class was refactored","lastModifiedDate":"2021-11-05"},{"lineNumber":40,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":41,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":42,"author":{"gitId":"jushg"},"content":"* **Documentation Guide Contribution**","lastModifiedDate":"2021-11-05"},{"lineNumber":43,"author":{"gitId":"jushg"},"content":"    * Added Command Class Component which includes implementation details about the `Command` class.","lastModifiedDate":"2021-11-05"},{"lineNumber":44,"author":{"gitId":"jushg"},"content":"    * Added the overall architecture details of the program.","lastModifiedDate":"2021-11-05"},{"lineNumber":45,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":46,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":47,"author":{"gitId":"jushg"},"content":"* **Contribution to Team-Based Tasks**","lastModifiedDate":"2021-11-05"},{"lineNumber":48,"author":{"gitId":"jushg"},"content":"    * Assigned milestone `v2.0` and `v2.1` due dates.","lastModifiedDate":"2021-11-05"},{"lineNumber":49,"author":{"gitId":"jushg"},"content":"    * Occasional refactoring of code to align towards OOP and reduce coupling","lastModifiedDate":"2021-11-05"},{"lineNumber":50,"author":{"gitId":"jushg"},"content":"    * Write test cases for `Ui`, `Parser` and `PersonList` classes.","lastModifiedDate":"2021-11-05"}],"authorContributionMap":{"jushg":50}},{"path":"docs/team/justinfidelis.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"justinfidelis"},"content":"# Justin Wong - Project Portfolio Page","lastModifiedDate":"2021-11-05"},{"lineNumber":2,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":3,"author":{"gitId":"justinfidelis"},"content":"## Overview","lastModifiedDate":"2021-11-05"},{"lineNumber":4,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":5,"author":{"gitId":"justinfidelis"},"content":"MedBot is a Command Line Interface (CLI) application for head nurses to manage patients’ personal information, and","lastModifiedDate":"2021-11-05"},{"lineNumber":6,"author":{"gitId":"justinfidelis"},"content":"schedule appointments between them and medical staff.","lastModifiedDate":"2021-11-05"},{"lineNumber":7,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":8,"author":{"gitId":"justinfidelis"},"content":"### Summary of Contributions","lastModifiedDate":"2021-11-05"},{"lineNumber":9,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":10,"author":{"gitId":"justinfidelis"},"content":"* Code Contributed: [RepoSense link](https://nus-cs2113-ay2122s1.github.io/tp-dashboard/?search\u003djustinfidelis\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2021-09-25\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003djustinfidelis\u0026tabRepo\u003dAY2122S1-CS2113-T13-1%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs~functional-code~test-code\u0026authorshipIsBinaryFileTypeChecked\u003dfalse)","lastModifiedDate":"2021-11-05"},{"lineNumber":11,"author":{"gitId":"justinfidelis"},"content":"* Enhancements Implemented:","lastModifiedDate":"2021-11-05"},{"lineNumber":12,"author":{"gitId":"justinfidelis"},"content":"  * `Parser` class, including `ParserUtils`, `PatientCommandParser`, `StaffCommandParser` and `SchedulerCommandParser`","lastModifiedDate":"2021-11-05"},{"lineNumber":13,"author":{"gitId":"justinfidelis"},"content":"    * ","lastModifiedDate":"2021-11-05"},{"lineNumber":14,"author":{"gitId":"justinfidelis"},"content":"  * Appointment management functionality, including relevant `Scheduler` class methods, `Appointment` class and `SchedulerAppointmentList` class","lastModifiedDate":"2021-11-05"},{"lineNumber":15,"author":{"gitId":"justinfidelis"},"content":"* User Guide Contribution","lastModifiedDate":"2021-11-05"},{"lineNumber":16,"author":{"gitId":"justinfidelis"},"content":"  * Added the Quick Start Guide","lastModifiedDate":"2021-11-05"},{"lineNumber":17,"author":{"gitId":"justinfidelis"},"content":"  * Added information about the scheduler commands, namely `add`, `delete`, `edit`, `view` and `list`","lastModifiedDate":"2021-11-05"},{"lineNumber":18,"author":{"gitId":"justinfidelis"},"content":"* Developer Guide Contribution","lastModifiedDate":"2021-11-05"},{"lineNumber":19,"author":{"gitId":"justinfidelis"},"content":"  * Added __Main Components__ and __Component Interaction__ sections (including __Component Interaction__ sequence diagram but excluding architecture diagram)","lastModifiedDate":"2021-11-05"},{"lineNumber":20,"author":{"gitId":"justinfidelis"},"content":"which provided an overview of MedBot\u0027s architecture","lastModifiedDate":"2021-11-05"},{"lineNumber":21,"author":{"gitId":"justinfidelis"},"content":"  * Added __Scheduler Component__ section which included information about the `Scheduler` class and how it works","lastModifiedDate":"2021-11-05"},{"lineNumber":22,"author":{"gitId":"justinfidelis"},"content":"  * Added __Appointment Management__ section which details the appointment management functionality of MedBot, its implementation details","lastModifiedDate":"2021-11-05"},{"lineNumber":23,"author":{"gitId":"justinfidelis"},"content":"and the reasons motivating the implementation decisions","lastModifiedDate":"2021-11-05"},{"lineNumber":24,"author":{"gitId":"justinfidelis"},"content":"* Contribution of Team-Based Tasks","lastModifiedDate":"2021-11-05"},{"lineNumber":25,"author":{"gitId":"justinfidelis"},"content":"  * Setting up of GitHub team org/repo","lastModifiedDate":"2021-11-05"},{"lineNumber":26,"author":{"gitId":"justinfidelis"},"content":"  * Occasional refactoring of code to reduce coupling, improve encapsulation and reduce redundancies","lastModifiedDate":"2021-11-05"},{"lineNumber":27,"author":{"gitId":"justinfidelis"},"content":"  * Occasional addition of JavaDoc to improve documentation","lastModifiedDate":"2021-11-05"}],"authorContributionMap":{"justinfidelis":27}},{"path":"docs/team/kureans.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"Kureans"},"content":"# Kureans  - Project Portfolio Page","lastModifiedDate":"2021-11-05"},{"lineNumber":2,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":3,"author":{"gitId":"Kureans"},"content":"## Overview","lastModifiedDate":"2021-11-05"},{"lineNumber":4,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":5,"author":{"gitId":"Kureans"},"content":"MedBot is a Command Line Interface (CLI) application for head nurses to manage patients’ personal and ","lastModifiedDate":"2021-11-05"},{"lineNumber":6,"author":{"gitId":"Kureans"},"content":"medical information. By utilising text-based commands instead of traditional Graphical User Interface (GUI) ","lastModifiedDate":"2021-11-05"},{"lineNumber":7,"author":{"gitId":"Kureans"},"content":"based navigation, MedBot can allow head nurses to get their management tasks done quicker and more efficiently.","lastModifiedDate":"2021-11-05"},{"lineNumber":8,"author":{"gitId":"Kureans"},"content":"It is written in Java, and has about 8kLoC.","lastModifiedDate":"2021-11-05"},{"lineNumber":9,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":10,"author":{"gitId":"Kureans"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2021-11-05"},{"lineNumber":11,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":12,"author":{"gitId":"Kureans"},"content":"### Summary of Contributions","lastModifiedDate":"2021-11-05"},{"lineNumber":13,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":14,"author":{"gitId":"Kureans"},"content":"* **Code Contributed:** [Reposense Link](https://nus-cs2113-ay2122s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dkureans)","lastModifiedDate":"2021-11-05"},{"lineNumber":15,"author":{"gitId":"Kureans"},"content":"* **New Feature:** Added the ability to filter for personal appointments by date/time.","lastModifiedDate":"2021-11-05"},{"lineNumber":16,"author":{"gitId":"Kureans"},"content":"    * What it does: Allows the user to find appointments before or after a","lastModifiedDate":"2021-11-05"},{"lineNumber":17,"author":{"gitId":"Kureans"},"content":"      certain date/time for a specific patient or medical staff.","lastModifiedDate":"2021-11-05"},{"lineNumber":18,"author":{"gitId":"Kureans"},"content":"    * Justification: This allows head nurses to quickly check which time slots are taken","lastModifiedDate":"2021-11-05"},{"lineNumber":19,"author":{"gitId":"Kureans"},"content":"      up for a specific range of dates, which helps them plan out how they should schedule a","lastModifiedDate":"2021-11-05"},{"lineNumber":20,"author":{"gitId":"Kureans"},"content":"      given appointment. ","lastModifiedDate":"2021-11-05"},{"lineNumber":21,"author":{"gitId":"Kureans"},"content":"    * Highlights: This feature required an alternative implementation in terms of the data structure","lastModifiedDate":"2021-11-05"},{"lineNumber":22,"author":{"gitId":"Kureans"},"content":"      compared to the main list of appointments in the `Scheduler` view, in order to sort appointments","lastModifiedDate":"2021-11-05"},{"lineNumber":23,"author":{"gitId":"Kureans"},"content":"      in `log(n)` time. Smart modification of the `SortedSet` comparator help to reduce code length.","lastModifiedDate":"2021-11-05"},{"lineNumber":24,"author":{"gitId":"Kureans"},"content":"  ","lastModifiedDate":"2021-11-05"},{"lineNumber":25,"author":{"gitId":"Kureans"},"content":"    ","lastModifiedDate":"2021-11-05"},{"lineNumber":26,"author":{"gitId":"Kureans"},"content":"* **New Feature:** Added an internal user guide via the `help` command.","lastModifiedDate":"2021-11-05"},{"lineNumber":27,"author":{"gitId":"Kureans"},"content":"  * What it does: Allows the user to get information about the various commands in MedBot internally. ","lastModifiedDate":"2021-11-05"},{"lineNumber":28,"author":{"gitId":"Kureans"},"content":"  * Justification: It can help the user to save time if they forgot the syntax of the commands, but they are","lastModifiedDate":"2021-11-05"},{"lineNumber":29,"author":{"gitId":"Kureans"},"content":"                   already familiar enough with the application that they don\u0027t need the full user guide.","lastModifiedDate":"2021-11-05"},{"lineNumber":30,"author":{"gitId":"Kureans"},"content":"  * Highlights: Users can obtain further information for each command by inputting `help [COMMAND]` instead of","lastModifiedDate":"2021-11-05"},{"lineNumber":31,"author":{"gitId":"Kureans"},"content":"                just `help`. ","lastModifiedDate":"2021-11-05"},{"lineNumber":32,"author":{"gitId":"Kureans"},"content":"  ","lastModifiedDate":"2021-11-05"},{"lineNumber":33,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":34,"author":{"gitId":"Kureans"},"content":"* **New Feature:** Added a way to switch views via the `switch` command.","lastModifiedDate":"2021-11-05"},{"lineNumber":35,"author":{"gitId":"Kureans"},"content":"  * What it does: Allows the user to switch between `PATIENT_INFO`, `STAFF_INFO`, AND `SCHEDULER`","lastModifiedDate":"2021-11-05"},{"lineNumber":36,"author":{"gitId":"Kureans"},"content":"                    views.","lastModifiedDate":"2021-11-05"},{"lineNumber":37,"author":{"gitId":"Kureans"},"content":"  * Justification: Helps to provide a cleaner \u0027ui\u0027 since only related commands can be executed in their respective","lastModifiedDate":"2021-11-05"},{"lineNumber":38,"author":{"gitId":"Kureans"},"content":"                   views, which can help make the workflow of the user smoother.","lastModifiedDate":"2021-11-05"},{"lineNumber":39,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":40,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":41,"author":{"gitId":"Kureans"},"content":"* **User Guide Contribution**","lastModifiedDate":"2021-11-05"},{"lineNumber":42,"author":{"gitId":"Kureans"},"content":"  * Added information for basic commands for Patient/Staff Info view (`add`, `delete`, `edit`, `help`, `exit`, `list`)","lastModifiedDate":"2021-11-05"},{"lineNumber":43,"author":{"gitId":"Kureans"},"content":"  * Revamped all the expected outputs for the various commands after `Ui` class was refactored","lastModifiedDate":"2021-11-05"},{"lineNumber":44,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":45,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":46,"author":{"gitId":"Kureans"},"content":"* **Documentation Guide Contribution**","lastModifiedDate":"2021-11-05"},{"lineNumber":47,"author":{"gitId":"Kureans"},"content":"  * Added Parser Component which includes implementation details about the `Parser` class. ","lastModifiedDate":"2021-11-05"},{"lineNumber":48,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":49,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":50,"author":{"gitId":"Kureans"},"content":"* **Contribution to Team-Based Tasks**","lastModifiedDate":"2021-11-05"},{"lineNumber":51,"author":{"gitId":"Kureans"},"content":"  * Assigned milestone `v2.0` and `v2.1` due dates ","lastModifiedDate":"2021-11-05"},{"lineNumber":52,"author":{"gitId":"Kureans"},"content":"  * Occasional refactoring of code to align towards OOP","lastModifiedDate":"2021-11-05"}],"authorContributionMap":{"Kureans":52}},{"path":"src/main/java/medbot/Appointment.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"justinfidelis"},"content":"package medbot;","lastModifiedDate":"2021-10-21"},{"lineNumber":2,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":3,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":4,"author":{"gitId":"CrimsonTitan79"},"content":"import medbot.list.ListItem;","lastModifiedDate":"2021-10-25"},{"lineNumber":5,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":6,"author":{"gitId":"justinfidelis"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-10-21"},{"lineNumber":7,"author":{"gitId":"justinfidelis"},"content":"import java.time.ZoneOffset;","lastModifiedDate":"2021-10-21"},{"lineNumber":8,"author":{"gitId":"justinfidelis"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-10-21"},{"lineNumber":9,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":10,"author":{"gitId":"CrimsonTitan79"},"content":"import static medbot.ui.Ui.VERTICAL_LINE_SPACED;","lastModifiedDate":"2021-10-26"},{"lineNumber":11,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":12,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":13,"author":{"gitId":"justinfidelis"},"content":"public class Appointment implements ListItem {","lastModifiedDate":"2021-10-27"},{"lineNumber":14,"author":{"gitId":"justinfidelis"},"content":"    private static final ZoneOffset ZONE_OFFSET \u003d ZoneOffset.ofHours(8);","lastModifiedDate":"2021-10-25"},{"lineNumber":15,"author":{"gitId":"justinfidelis"},"content":"    private static final DateTimeFormatter DATE_TIME_FORMATTER \u003d DateTimeFormatter.ofPattern(\"dd MMM yy HH00\");","lastModifiedDate":"2021-10-25"},{"lineNumber":16,"author":{"gitId":"CrimsonTitan79"},"content":"    private static final DateTimeFormatter DATE_TIME_FORMATTER_STORAGE \u003d DateTimeFormatter.ofPattern(\"ddMMyy HH00\");","lastModifiedDate":"2021-10-26"},{"lineNumber":17,"author":{"gitId":"justinfidelis"},"content":"    private static final String END_LINE \u003d System.lineSeparator();","lastModifiedDate":"2021-11-07"},{"lineNumber":18,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":19,"author":{"gitId":"justinfidelis"},"content":"    private int appointmentId \u003d 0;","lastModifiedDate":"2021-10-27"},{"lineNumber":20,"author":{"gitId":"justinfidelis"},"content":"    private int patientId \u003d 0;","lastModifiedDate":"2021-10-21"},{"lineNumber":21,"author":{"gitId":"justinfidelis"},"content":"    private int medicalStaffId \u003d 0;","lastModifiedDate":"2021-10-21"},{"lineNumber":22,"author":{"gitId":"justinfidelis"},"content":"    private int dateTimeCode \u003d 0;","lastModifiedDate":"2021-10-21"},{"lineNumber":23,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":24,"author":{"gitId":"justinfidelis"},"content":"    public int getId() {","lastModifiedDate":"2021-10-27"},{"lineNumber":25,"author":{"gitId":"justinfidelis"},"content":"        return appointmentId;","lastModifiedDate":"2021-10-27"},{"lineNumber":26,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":27,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":28,"author":{"gitId":"justinfidelis"},"content":"    public void setId(int appointmentId) {","lastModifiedDate":"2021-10-27"},{"lineNumber":29,"author":{"gitId":"justinfidelis"},"content":"        this.appointmentId \u003d appointmentId;","lastModifiedDate":"2021-10-27"},{"lineNumber":30,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":31,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":32,"author":{"gitId":"justinfidelis"},"content":"    public int getPatientId() {","lastModifiedDate":"2021-10-21"},{"lineNumber":33,"author":{"gitId":"justinfidelis"},"content":"        return patientId;","lastModifiedDate":"2021-10-21"},{"lineNumber":34,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":35,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":36,"author":{"gitId":"justinfidelis"},"content":"    public void setPatientId(int patientId) {","lastModifiedDate":"2021-10-21"},{"lineNumber":37,"author":{"gitId":"justinfidelis"},"content":"        this.patientId \u003d patientId;","lastModifiedDate":"2021-10-21"},{"lineNumber":38,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":39,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":40,"author":{"gitId":"justinfidelis"},"content":"    public int getMedicalStaffId() {","lastModifiedDate":"2021-10-21"},{"lineNumber":41,"author":{"gitId":"justinfidelis"},"content":"        return medicalStaffId;","lastModifiedDate":"2021-10-21"},{"lineNumber":42,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":43,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":44,"author":{"gitId":"justinfidelis"},"content":"    public void setMedicalStaffId(int medicalStaffId) {","lastModifiedDate":"2021-10-21"},{"lineNumber":45,"author":{"gitId":"justinfidelis"},"content":"        this.medicalStaffId \u003d medicalStaffId;","lastModifiedDate":"2021-10-21"},{"lineNumber":46,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":47,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":48,"author":{"gitId":"justinfidelis"},"content":"    public int getDateTimeCode() {","lastModifiedDate":"2021-10-21"},{"lineNumber":49,"author":{"gitId":"justinfidelis"},"content":"        return dateTimeCode;","lastModifiedDate":"2021-10-21"},{"lineNumber":50,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":51,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":52,"author":{"gitId":"justinfidelis"},"content":"    public void setDateTimeCode(int dateTimeCode) {","lastModifiedDate":"2021-10-21"},{"lineNumber":53,"author":{"gitId":"justinfidelis"},"content":"        this.dateTimeCode \u003d dateTimeCode;","lastModifiedDate":"2021-10-21"},{"lineNumber":54,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":55,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":56,"author":{"gitId":"justinfidelis"},"content":"    public String getDateTimeString() {","lastModifiedDate":"2021-10-26"},{"lineNumber":57,"author":{"gitId":"justinfidelis"},"content":"        return formatDateTimeCode(dateTimeCode);","lastModifiedDate":"2021-10-26"},{"lineNumber":58,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":59,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":60,"author":{"gitId":"jushg"},"content":"    /**","lastModifiedDate":"2021-10-27"},{"lineNumber":61,"author":{"gitId":"jushg"},"content":"     * Returns the dateTimeCode as a String.","lastModifiedDate":"2021-10-27"},{"lineNumber":62,"author":{"gitId":"jushg"},"content":"     *","lastModifiedDate":"2021-10-27"},{"lineNumber":63,"author":{"gitId":"jushg"},"content":"     * @param dateTimeCode the dateTime code to be parsed.","lastModifiedDate":"2021-10-27"},{"lineNumber":64,"author":{"gitId":"jushg"},"content":"     * @return the date time as a String.","lastModifiedDate":"2021-10-27"},{"lineNumber":65,"author":{"gitId":"jushg"},"content":"     */","lastModifiedDate":"2021-10-27"},{"lineNumber":66,"author":{"gitId":"justinfidelis"},"content":"    public static String formatDateTimeCode(int dateTimeCode) {","lastModifiedDate":"2021-10-26"},{"lineNumber":67,"author":{"gitId":"justinfidelis"},"content":"        long epochSecond \u003d (long) dateTimeCode * 60;","lastModifiedDate":"2021-10-21"},{"lineNumber":68,"author":{"gitId":"justinfidelis"},"content":"        LocalDateTime localDateTime \u003d LocalDateTime.ofEpochSecond(epochSecond, 0, ZONE_OFFSET);","lastModifiedDate":"2021-10-25"},{"lineNumber":69,"author":{"gitId":"justinfidelis"},"content":"        return localDateTime.format(DATE_TIME_FORMATTER) + \"HRS\";","lastModifiedDate":"2021-10-25"},{"lineNumber":70,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":71,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":72,"author":{"gitId":"justinfidelis"},"content":"    /**","lastModifiedDate":"2021-10-24"},{"lineNumber":73,"author":{"gitId":"justinfidelis"},"content":"     * Returns whether appointment is complete. I.e., contains a positive patientId, medicalStaffId and dateTimeCode.","lastModifiedDate":"2021-10-24"},{"lineNumber":74,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-10-24"},{"lineNumber":75,"author":{"gitId":"justinfidelis"},"content":"     * @return whether appointment is complete","lastModifiedDate":"2021-10-24"},{"lineNumber":76,"author":{"gitId":"justinfidelis"},"content":"     */","lastModifiedDate":"2021-10-24"},{"lineNumber":77,"author":{"gitId":"justinfidelis"},"content":"    public boolean isComplete() {","lastModifiedDate":"2021-10-21"},{"lineNumber":78,"author":{"gitId":"justinfidelis"},"content":"        return patientId \u003e 0 \u0026\u0026 medicalStaffId \u003e 0 \u0026\u0026 dateTimeCode \u003e 0;","lastModifiedDate":"2021-10-24"},{"lineNumber":79,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":80,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":81,"author":{"gitId":"justinfidelis"},"content":"    /**","lastModifiedDate":"2021-10-24"},{"lineNumber":82,"author":{"gitId":"justinfidelis"},"content":"     * Updates parameters (patientId, medicalStaffId and dateTimeCode) with non-zero parameters of newAppointment.","lastModifiedDate":"2021-10-24"},{"lineNumber":83,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-10-24"},{"lineNumber":84,"author":{"gitId":"justinfidelis"},"content":"     * \u003cp\u003eDoes not update appointmentId.","lastModifiedDate":"2021-10-24"},{"lineNumber":85,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-10-24"},{"lineNumber":86,"author":{"gitId":"justinfidelis"},"content":"     * @param newAppointment Appointment object that contains the parameters to be updated","lastModifiedDate":"2021-10-24"},{"lineNumber":87,"author":{"gitId":"justinfidelis"},"content":"     */","lastModifiedDate":"2021-10-24"},{"lineNumber":88,"author":{"gitId":"justinfidelis"},"content":"    public void mergeAppointmentData(Appointment newAppointment) {","lastModifiedDate":"2021-10-21"},{"lineNumber":89,"author":{"gitId":"justinfidelis"},"content":"        if (newAppointment.getDateTimeCode() \u003e 0) {","lastModifiedDate":"2021-10-24"},{"lineNumber":90,"author":{"gitId":"justinfidelis"},"content":"            setDateTimeCode(newAppointment.getDateTimeCode());","lastModifiedDate":"2021-10-21"},{"lineNumber":91,"author":{"gitId":"justinfidelis"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":92,"author":{"gitId":"justinfidelis"},"content":"        if (newAppointment.getPatientId() \u003e 0) {","lastModifiedDate":"2021-10-24"},{"lineNumber":93,"author":{"gitId":"justinfidelis"},"content":"            setPatientId(newAppointment.getPatientId());","lastModifiedDate":"2021-10-21"},{"lineNumber":94,"author":{"gitId":"justinfidelis"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":95,"author":{"gitId":"justinfidelis"},"content":"        if (newAppointment.getMedicalStaffId() \u003e 0) {","lastModifiedDate":"2021-10-24"},{"lineNumber":96,"author":{"gitId":"justinfidelis"},"content":"            setMedicalStaffId(newAppointment.getMedicalStaffId());","lastModifiedDate":"2021-10-21"},{"lineNumber":97,"author":{"gitId":"justinfidelis"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":98,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":99,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":100,"author":{"gitId":"justinfidelis"},"content":"    /**","lastModifiedDate":"2021-10-24"},{"lineNumber":101,"author":{"gitId":"justinfidelis"},"content":"     * Updates parameters (patientId, medicalStaffId and dateTimeCode) of a copy of oldAppointment","lastModifiedDate":"2021-10-24"},{"lineNumber":102,"author":{"gitId":"justinfidelis"},"content":"     * with non-zero parameters of newAppointment.","lastModifiedDate":"2021-10-24"},{"lineNumber":103,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-10-24"},{"lineNumber":104,"author":{"gitId":"justinfidelis"},"content":"     * \u003cp\u003eDoes not update appointmentId.","lastModifiedDate":"2021-10-24"},{"lineNumber":105,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-10-24"},{"lineNumber":106,"author":{"gitId":"justinfidelis"},"content":"     * @param oldAppointment Appointment to be updated.","lastModifiedDate":"2021-10-24"},{"lineNumber":107,"author":{"gitId":"justinfidelis"},"content":"     * @param newAppointment Appointment that contains the parameters to be updated","lastModifiedDate":"2021-10-24"},{"lineNumber":108,"author":{"gitId":"justinfidelis"},"content":"     * @return a copy of oldAppointment updated with the attributes in newAppointment","lastModifiedDate":"2021-10-24"},{"lineNumber":109,"author":{"gitId":"justinfidelis"},"content":"     */","lastModifiedDate":"2021-10-24"},{"lineNumber":110,"author":{"gitId":"justinfidelis"},"content":"    public static Appointment mergeAppointmentData(Appointment oldAppointment, Appointment newAppointment) {","lastModifiedDate":"2021-10-21"},{"lineNumber":111,"author":{"gitId":"justinfidelis"},"content":"        Appointment tempAppointment \u003d new Appointment();","lastModifiedDate":"2021-10-21"},{"lineNumber":112,"author":{"gitId":"justinfidelis"},"content":"        tempAppointment.mergeAppointmentData(oldAppointment);","lastModifiedDate":"2021-10-21"},{"lineNumber":113,"author":{"gitId":"justinfidelis"},"content":"        tempAppointment.mergeAppointmentData(newAppointment);","lastModifiedDate":"2021-10-21"},{"lineNumber":114,"author":{"gitId":"justinfidelis"},"content":"        return tempAppointment;","lastModifiedDate":"2021-10-21"},{"lineNumber":115,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":116,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":117,"author":{"gitId":"justinfidelis"},"content":"    public String toString() {","lastModifiedDate":"2021-10-21"},{"lineNumber":118,"author":{"gitId":"justinfidelis"},"content":"        return \"Appointment ID: \" + appointmentId + END_LINE","lastModifiedDate":"2021-11-08"},{"lineNumber":119,"author":{"gitId":"justinfidelis"},"content":"                + \"Patient ID: \" + patientId + END_LINE","lastModifiedDate":"2021-11-02"},{"lineNumber":120,"author":{"gitId":"justinfidelis"},"content":"                + \"Staff ID: \" + medicalStaffId + END_LINE","lastModifiedDate":"2021-11-02"},{"lineNumber":121,"author":{"gitId":"justinfidelis"},"content":"                + \"Date/Time: \" + getDateTimeString() + END_LINE;","lastModifiedDate":"2021-11-02"},{"lineNumber":122,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":123,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":124,"author":{"gitId":"CrimsonTitan79"},"content":"    /**","lastModifiedDate":"2021-10-25"},{"lineNumber":125,"author":{"gitId":"CrimsonTitan79"},"content":"     * Text to be written to storage file of a person.","lastModifiedDate":"2021-10-25"},{"lineNumber":126,"author":{"gitId":"CrimsonTitan79"},"content":"     *","lastModifiedDate":"2021-10-25"},{"lineNumber":127,"author":{"gitId":"CrimsonTitan79"},"content":"     * @return storageString of a person","lastModifiedDate":"2021-10-25"},{"lineNumber":128,"author":{"gitId":"CrimsonTitan79"},"content":"     */","lastModifiedDate":"2021-10-25"},{"lineNumber":129,"author":{"gitId":"CrimsonTitan79"},"content":"    public String getStorageString() {","lastModifiedDate":"2021-10-25"},{"lineNumber":130,"author":{"gitId":"justinfidelis"},"content":"        return appointmentId + VERTICAL_LINE_SPACED","lastModifiedDate":"2021-10-27"},{"lineNumber":131,"author":{"gitId":"CrimsonTitan79"},"content":"                + getDateTimeStorageString(dateTimeCode) + VERTICAL_LINE_SPACED","lastModifiedDate":"2021-10-26"},{"lineNumber":132,"author":{"gitId":"CrimsonTitan79"},"content":"                + patientId + VERTICAL_LINE_SPACED","lastModifiedDate":"2021-10-25"},{"lineNumber":133,"author":{"gitId":"CrimsonTitan79"},"content":"                + medicalStaffId;","lastModifiedDate":"2021-10-25"},{"lineNumber":134,"author":{"gitId":"CrimsonTitan79"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":135,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":136,"author":{"gitId":"CrimsonTitan79"},"content":"    /**","lastModifiedDate":"2021-10-27"},{"lineNumber":137,"author":{"gitId":"CrimsonTitan79"},"content":"     * Converts dateTimeCode to a String in the format of ddMMyy HH00.","lastModifiedDate":"2021-10-27"},{"lineNumber":138,"author":{"gitId":"CrimsonTitan79"},"content":"     *","lastModifiedDate":"2021-10-27"},{"lineNumber":139,"author":{"gitId":"CrimsonTitan79"},"content":"     * @param dateTimeCode date time code","lastModifiedDate":"2021-10-27"},{"lineNumber":140,"author":{"gitId":"CrimsonTitan79"},"content":"     * @return returns a string of the date in the format of ddMMyy HH00","lastModifiedDate":"2021-10-27"},{"lineNumber":141,"author":{"gitId":"CrimsonTitan79"},"content":"     */","lastModifiedDate":"2021-10-27"},{"lineNumber":142,"author":{"gitId":"CrimsonTitan79"},"content":"    private String getDateTimeStorageString(int dateTimeCode) {","lastModifiedDate":"2021-10-26"},{"lineNumber":143,"author":{"gitId":"CrimsonTitan79"},"content":"        long epochSecond \u003d (long) dateTimeCode * 60;","lastModifiedDate":"2021-10-26"},{"lineNumber":144,"author":{"gitId":"CrimsonTitan79"},"content":"        LocalDateTime localDateTime \u003d LocalDateTime.ofEpochSecond(epochSecond, 0, ZONE_OFFSET);","lastModifiedDate":"2021-10-26"},{"lineNumber":145,"author":{"gitId":"CrimsonTitan79"},"content":"        return localDateTime.format(DATE_TIME_FORMATTER_STORAGE);","lastModifiedDate":"2021-10-26"},{"lineNumber":146,"author":{"gitId":"CrimsonTitan79"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":147,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":148,"author":{"gitId":"justinfidelis"},"content":"}","lastModifiedDate":"2021-10-21"}],"authorContributionMap":{"justinfidelis":111,"CrimsonTitan79":31,"jushg":6}},{"path":"src/main/java/medbot/MedBot.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"justinfidelis"},"content":"package medbot;","lastModifiedDate":"2021-09-30"},{"lineNumber":2,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":3,"author":{"gitId":"justinfidelis"},"content":"import medbot.command.Command;","lastModifiedDate":"2021-09-30"},{"lineNumber":4,"author":{"gitId":"justinfidelis"},"content":"import medbot.exceptions.MedBotException;","lastModifiedDate":"2021-10-18"},{"lineNumber":5,"author":{"gitId":"justinfidelis"},"content":"import medbot.parser.Parser;","lastModifiedDate":"2021-10-22"},{"lineNumber":6,"author":{"gitId":"CrimsonTitan79"},"content":"import medbot.storage.Storage;","lastModifiedDate":"2021-11-02"},{"lineNumber":7,"author":{"gitId":"CrimsonTitan79"},"content":"import medbot.storage.StorageManager;","lastModifiedDate":"2021-10-26"},{"lineNumber":8,"author":{"gitId":"jushg"},"content":"import medbot.ui.Ui;","lastModifiedDate":"2021-10-22"},{"lineNumber":9,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":10,"author":{"gitId":"CrimsonTitan79"},"content":"import java.io.IOException;","lastModifiedDate":"2021-11-02"},{"lineNumber":11,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":12,"author":{"gitId":"justinfidelis"},"content":"public class MedBot {","lastModifiedDate":"2021-09-30"},{"lineNumber":13,"author":{"gitId":"justinfidelis"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-09-30"},{"lineNumber":14,"author":{"gitId":"justinfidelis"},"content":"        interactWithUser();","lastModifiedDate":"2021-09-30"},{"lineNumber":15,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-09-30"},{"lineNumber":16,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":17,"author":{"gitId":"jushg"},"content":"    /**","lastModifiedDate":"2021-10-27"},{"lineNumber":18,"author":{"gitId":"jushg"},"content":"     * Runs a loop to get inputs from the user and executes the commands","lastModifiedDate":"2021-10-27"},{"lineNumber":19,"author":{"gitId":"jushg"},"content":"     * until an \u0027exit\u0027 command is given.","lastModifiedDate":"2021-10-27"},{"lineNumber":20,"author":{"gitId":"jushg"},"content":"     */","lastModifiedDate":"2021-10-27"},{"lineNumber":21,"author":{"gitId":"justinfidelis"},"content":"    public static void interactWithUser() {","lastModifiedDate":"2021-09-30"},{"lineNumber":22,"author":{"gitId":"justinfidelis"},"content":"        Scheduler scheduler \u003d new Scheduler();","lastModifiedDate":"2021-10-20"},{"lineNumber":23,"author":{"gitId":"justinfidelis"},"content":"        Ui ui \u003d new Ui();","lastModifiedDate":"2021-09-30"},{"lineNumber":24,"author":{"gitId":"CrimsonTitan79"},"content":"        StorageManager storageManager \u003d new StorageManager();","lastModifiedDate":"2021-11-02"},{"lineNumber":25,"author":{"gitId":"CrimsonTitan79"},"content":"        boolean isInteracting \u003d true;","lastModifiedDate":"2021-11-02"},{"lineNumber":26,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":27,"author":{"gitId":"CrimsonTitan79"},"content":"        ui.printWelcomeMessageOne();","lastModifiedDate":"2021-10-12"},{"lineNumber":28,"author":{"gitId":"CrimsonTitan79"},"content":"        try {","lastModifiedDate":"2021-10-08"},{"lineNumber":29,"author":{"gitId":"CrimsonTitan79"},"content":"            storageManager.initializeStorages(scheduler, ui);","lastModifiedDate":"2021-11-02"},{"lineNumber":30,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":31,"author":{"gitId":"CrimsonTitan79"},"content":"        } catch (MedBotException e) {","lastModifiedDate":"2021-11-02"},{"lineNumber":32,"author":{"gitId":"CrimsonTitan79"},"content":"            ui.printOutput(e.getMessage());","lastModifiedDate":"2021-10-12"},{"lineNumber":33,"author":{"gitId":"CrimsonTitan79"},"content":"            isInteracting \u003d false;","lastModifiedDate":"2021-11-02"},{"lineNumber":34,"author":{"gitId":"CrimsonTitan79"},"content":"        }","lastModifiedDate":"2021-10-08"},{"lineNumber":35,"author":{"gitId":"CrimsonTitan79"},"content":"        if (isInteracting) {","lastModifiedDate":"2021-11-02"},{"lineNumber":36,"author":{"gitId":"CrimsonTitan79"},"content":"            ui.printWelcomeMessageTwo();","lastModifiedDate":"2021-10-26"},{"lineNumber":37,"author":{"gitId":"CrimsonTitan79"},"content":"        }","lastModifiedDate":"2021-11-02"},{"lineNumber":38,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":39,"author":{"gitId":"justinfidelis"},"content":"        while (isInteracting) {","lastModifiedDate":"2021-09-30"},{"lineNumber":40,"author":{"gitId":"justinfidelis"},"content":"            String userInput \u003d ui.readInput();","lastModifiedDate":"2021-09-30"},{"lineNumber":41,"author":{"gitId":"justinfidelis"},"content":"            try {","lastModifiedDate":"2021-09-30"},{"lineNumber":42,"author":{"gitId":"justinfidelis"},"content":"                Command command \u003d Parser.parseCommand(userInput);","lastModifiedDate":"2021-10-20"},{"lineNumber":43,"author":{"gitId":"justinfidelis"},"content":"                command.execute(scheduler, ui);","lastModifiedDate":"2021-10-20"},{"lineNumber":44,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":45,"author":{"gitId":"CrimsonTitan79"},"content":"                storageManager.saveToStorage(scheduler);","lastModifiedDate":"2021-10-26"},{"lineNumber":46,"author":{"gitId":"justinfidelis"},"content":"                isInteracting \u003d !command.isExit();","lastModifiedDate":"2021-09-30"},{"lineNumber":47,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":48,"author":{"gitId":"CrimsonTitan79"},"content":"            } catch (IOException e) {","lastModifiedDate":"2021-11-02"},{"lineNumber":49,"author":{"gitId":"CrimsonTitan79"},"content":"                ui.printOutput(Storage.ERROR_SAVE_STORAGE + Storage.ERROR_MOVE_STORAGE_FILES","lastModifiedDate":"2021-11-02"},{"lineNumber":50,"author":{"gitId":"CrimsonTitan79"},"content":"                        + System.lineSeparator());","lastModifiedDate":"2021-11-02"},{"lineNumber":51,"author":{"gitId":"CrimsonTitan79"},"content":"                isInteracting \u003d false;","lastModifiedDate":"2021-11-02"},{"lineNumber":52,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":53,"author":{"gitId":"justinfidelis"},"content":"            } catch (MedBotException mbe) {","lastModifiedDate":"2021-09-30"},{"lineNumber":54,"author":{"gitId":"justinfidelis"},"content":"                ui.printOutput(mbe.getMessage() + System.lineSeparator());","lastModifiedDate":"2021-10-24"},{"lineNumber":55,"author":{"gitId":"justinfidelis"},"content":"            }","lastModifiedDate":"2021-09-30"},{"lineNumber":56,"author":{"gitId":"justinfidelis"},"content":"        }","lastModifiedDate":"2021-09-30"},{"lineNumber":57,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-09-30"},{"lineNumber":58,"author":{"gitId":"justinfidelis"},"content":"}","lastModifiedDate":"2021-09-30"}],"authorContributionMap":{"justinfidelis":25,"CrimsonTitan79":28,"jushg":5}},{"path":"src/main/java/medbot/Scheduler.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"justinfidelis"},"content":"package medbot;","lastModifiedDate":"2021-10-20"},{"lineNumber":2,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":3,"author":{"gitId":"justinfidelis"},"content":"import medbot.exceptions.MedBotException;","lastModifiedDate":"2021-10-21"},{"lineNumber":4,"author":{"gitId":"justinfidelis"},"content":"import medbot.list.MedicalStaffList;","lastModifiedDate":"2021-10-20"},{"lineNumber":5,"author":{"gitId":"justinfidelis"},"content":"import medbot.list.PatientList;","lastModifiedDate":"2021-10-20"},{"lineNumber":6,"author":{"gitId":"justinfidelis"},"content":"import medbot.list.SchedulerAppointmentList;","lastModifiedDate":"2021-10-21"},{"lineNumber":7,"author":{"gitId":"justinfidelis"},"content":"import medbot.person.Person;","lastModifiedDate":"2021-10-24"},{"lineNumber":8,"author":{"gitId":"Kureans"},"content":"import medbot.utilities.FilterType;","lastModifiedDate":"2021-10-25"},{"lineNumber":9,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":10,"author":{"gitId":"CrimsonTitan79"},"content":"import java.util.LinkedList;","lastModifiedDate":"2021-10-26"},{"lineNumber":11,"author":{"gitId":"EricBryann"},"content":"import java.util.List;","lastModifiedDate":"2021-10-25"},{"lineNumber":12,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":13,"author":{"gitId":"justinfidelis"},"content":"public class Scheduler {","lastModifiedDate":"2021-10-20"},{"lineNumber":14,"author":{"gitId":"justinfidelis"},"content":"    private static final String EMPTY_STRING \u003d \"\";","lastModifiedDate":"2021-10-26"},{"lineNumber":15,"author":{"gitId":"justinfidelis"},"content":"    private static final String END_LINE \u003d System.lineSeparator();","lastModifiedDate":"2021-10-26"},{"lineNumber":16,"author":{"gitId":"justinfidelis"},"content":"    private static final String SPACE \u003d \" \";","lastModifiedDate":"2021-10-26"},{"lineNumber":17,"author":{"gitId":"justinfidelis"},"content":"    private static final String VERTICAL_LINE_SPACED \u003d \" | \";","lastModifiedDate":"2021-10-26"},{"lineNumber":18,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":19,"author":{"gitId":"justinfidelis"},"content":"    private static final int LENGTH_APPOINTMENT_ID_COLUMN \u003d 4;","lastModifiedDate":"2021-10-26"},{"lineNumber":20,"author":{"gitId":"justinfidelis"},"content":"    private static final int LENGTH_PATIENT_ID_COLUMN \u003d 10;","lastModifiedDate":"2021-10-26"},{"lineNumber":21,"author":{"gitId":"justinfidelis"},"content":"    private static final int LENGTH_STAFF_ID_COLUMN \u003d 8;","lastModifiedDate":"2021-10-26"},{"lineNumber":22,"author":{"gitId":"justinfidelis"},"content":"    private static final int LENGTH_NAME_COLUMN \u003d 20;","lastModifiedDate":"2021-10-26"},{"lineNumber":23,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":24,"author":{"gitId":"justinfidelis"},"content":"    private static final String ERROR_ADD_INCOMPLETE_APPOINTMENT \u003d \"Incomplete appointment.\";","lastModifiedDate":"2021-10-21"},{"lineNumber":25,"author":{"gitId":"justinfidelis"},"content":"    private static final String ERROR_PATIENT_APPOINTMENT_CLASH \u003d \"Patient unavailable, appointment %d at that time.\";","lastModifiedDate":"2021-10-21"},{"lineNumber":26,"author":{"gitId":"justinfidelis"},"content":"    private static final String ERROR_STAFF_APPOINTMENT_CLASH \u003d \"Staff unavailable, appointment %d at that time.\";","lastModifiedDate":"2021-10-21"},{"lineNumber":27,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":28,"author":{"gitId":"justinfidelis"},"content":"    private static final String ERROR_ADD_APPOINTMENT_ERROR \u003d \"Add appointment error.\";","lastModifiedDate":"2021-10-21"},{"lineNumber":29,"author":{"gitId":"justinfidelis"},"content":"    private static final String ERROR_DELETE_APPOINTMENT_ERROR \u003d \"Delete appointment error.\";","lastModifiedDate":"2021-10-21"},{"lineNumber":30,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":31,"author":{"gitId":"justinfidelis"},"content":"    private final PatientList patientList \u003d new PatientList();","lastModifiedDate":"2021-10-20"},{"lineNumber":32,"author":{"gitId":"justinfidelis"},"content":"    private final MedicalStaffList medicalStaffList \u003d new MedicalStaffList();","lastModifiedDate":"2021-10-20"},{"lineNumber":33,"author":{"gitId":"justinfidelis"},"content":"    private final SchedulerAppointmentList schedulerAppointmentList \u003d new SchedulerAppointmentList();","lastModifiedDate":"2021-10-21"},{"lineNumber":34,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":35,"author":{"gitId":"justinfidelis"},"content":"    //Patient and Staff Management methods","lastModifiedDate":"2021-10-27"},{"lineNumber":36,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":37,"author":{"gitId":"justinfidelis"},"content":"    /**","lastModifiedDate":"2021-10-24"},{"lineNumber":38,"author":{"gitId":"justinfidelis"},"content":"     * Adds the given patient into the scheduler, allocates an id to the patient and returns the id value.","lastModifiedDate":"2021-10-24"},{"lineNumber":39,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-10-24"},{"lineNumber":40,"author":{"gitId":"justinfidelis"},"content":"     * @param patient Patient to be added into the scheduler","lastModifiedDate":"2021-10-24"},{"lineNumber":41,"author":{"gitId":"justinfidelis"},"content":"     * @return personId that was allocated to the patient","lastModifiedDate":"2021-10-24"},{"lineNumber":42,"author":{"gitId":"justinfidelis"},"content":"     */","lastModifiedDate":"2021-10-24"},{"lineNumber":43,"author":{"gitId":"jushg"},"content":"    public int addPatient(Person patient) throws MedBotException {","lastModifiedDate":"2021-11-02"},{"lineNumber":44,"author":{"gitId":"justinfidelis"},"content":"        return patientList.addPerson(patient);","lastModifiedDate":"2021-10-24"},{"lineNumber":45,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":46,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":47,"author":{"gitId":"justinfidelis"},"content":"    /**","lastModifiedDate":"2021-10-24"},{"lineNumber":48,"author":{"gitId":"justinfidelis"},"content":"     * Adds the given staff into the scheduler, allocates an id to the staff and returns the id value.","lastModifiedDate":"2021-10-24"},{"lineNumber":49,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-10-24"},{"lineNumber":50,"author":{"gitId":"justinfidelis"},"content":"     * @param staff Staff to be added into the scheduler","lastModifiedDate":"2021-10-24"},{"lineNumber":51,"author":{"gitId":"justinfidelis"},"content":"     * @return personId that was allocated to the staff","lastModifiedDate":"2021-10-24"},{"lineNumber":52,"author":{"gitId":"justinfidelis"},"content":"     */","lastModifiedDate":"2021-10-24"},{"lineNumber":53,"author":{"gitId":"jushg"},"content":"    public int addStaff(Person staff) throws MedBotException {","lastModifiedDate":"2021-11-02"},{"lineNumber":54,"author":{"gitId":"justinfidelis"},"content":"        return medicalStaffList.addPerson(staff);","lastModifiedDate":"2021-10-24"},{"lineNumber":55,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":56,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":57,"author":{"gitId":"justinfidelis"},"content":"    /**","lastModifiedDate":"2021-10-24"},{"lineNumber":58,"author":{"gitId":"justinfidelis"},"content":"     * Edits the specified fields on Patient information with new values from the user.","lastModifiedDate":"2021-10-24"},{"lineNumber":59,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-10-24"},{"lineNumber":60,"author":{"gitId":"justinfidelis"},"content":"     * @param patientId      the id of the Patient with information to change","lastModifiedDate":"2021-10-24"},{"lineNumber":61,"author":{"gitId":"justinfidelis"},"content":"     * @param newPatientData the new Patient data to change to (except the null fields)","lastModifiedDate":"2021-10-24"},{"lineNumber":62,"author":{"gitId":"justinfidelis"},"content":"     * @throws MedBotException if there is no patient with that id","lastModifiedDate":"2021-10-24"},{"lineNumber":63,"author":{"gitId":"justinfidelis"},"content":"     */","lastModifiedDate":"2021-10-24"},{"lineNumber":64,"author":{"gitId":"justinfidelis"},"content":"    public void editPatient(int patientId, Person newPatientData) throws MedBotException {","lastModifiedDate":"2021-10-24"},{"lineNumber":65,"author":{"gitId":"justinfidelis"},"content":"        patientList.editPerson(patientId, newPatientData);","lastModifiedDate":"2021-10-24"},{"lineNumber":66,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":67,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":68,"author":{"gitId":"justinfidelis"},"content":"    /**","lastModifiedDate":"2021-10-24"},{"lineNumber":69,"author":{"gitId":"justinfidelis"},"content":"     * Edits the specified fields on Staff information with new values from the user.","lastModifiedDate":"2021-10-24"},{"lineNumber":70,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-10-24"},{"lineNumber":71,"author":{"gitId":"justinfidelis"},"content":"     * @param staffId      the id of the Staff with information to change","lastModifiedDate":"2021-10-24"},{"lineNumber":72,"author":{"gitId":"justinfidelis"},"content":"     * @param newStaffData the new Staff data to change to (except the null fields)","lastModifiedDate":"2021-10-24"},{"lineNumber":73,"author":{"gitId":"justinfidelis"},"content":"     * @throws MedBotException if there is no staff with that id","lastModifiedDate":"2021-10-24"},{"lineNumber":74,"author":{"gitId":"justinfidelis"},"content":"     */","lastModifiedDate":"2021-10-24"},{"lineNumber":75,"author":{"gitId":"justinfidelis"},"content":"    public void editStaff(int staffId, Person newStaffData) throws MedBotException {","lastModifiedDate":"2021-10-24"},{"lineNumber":76,"author":{"gitId":"Kureans"},"content":"        medicalStaffList.editPerson(staffId, newStaffData);","lastModifiedDate":"2021-10-25"},{"lineNumber":77,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":78,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":79,"author":{"gitId":"justinfidelis"},"content":"    /**","lastModifiedDate":"2021-10-24"},{"lineNumber":80,"author":{"gitId":"justinfidelis"},"content":"     * Removes the patient with the specified id.","lastModifiedDate":"2021-10-24"},{"lineNumber":81,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-10-24"},{"lineNumber":82,"author":{"gitId":"justinfidelis"},"content":"     * @param patientId the id of the patient to remove.","lastModifiedDate":"2021-10-24"},{"lineNumber":83,"author":{"gitId":"justinfidelis"},"content":"     * @throws MedBotException if there is no patient with that id","lastModifiedDate":"2021-10-24"},{"lineNumber":84,"author":{"gitId":"justinfidelis"},"content":"     */","lastModifiedDate":"2021-10-24"},{"lineNumber":85,"author":{"gitId":"justinfidelis"},"content":"    public void deletePatient(int patientId) throws MedBotException {","lastModifiedDate":"2021-10-24"},{"lineNumber":86,"author":{"gitId":"justinfidelis"},"content":"        LinkedList\u003cInteger\u003e appointmentIds \u003d patientList.getAllAppointmentIds(patientId);","lastModifiedDate":"2021-10-25"},{"lineNumber":87,"author":{"gitId":"justinfidelis"},"content":"        deleteAppointments(appointmentIds);","lastModifiedDate":"2021-10-25"},{"lineNumber":88,"author":{"gitId":"justinfidelis"},"content":"        patientList.deletePerson(patientId);","lastModifiedDate":"2021-10-24"},{"lineNumber":89,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":90,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":91,"author":{"gitId":"justinfidelis"},"content":"    /**","lastModifiedDate":"2021-10-24"},{"lineNumber":92,"author":{"gitId":"justinfidelis"},"content":"     * Removes the staff with the specified id.","lastModifiedDate":"2021-10-24"},{"lineNumber":93,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-10-24"},{"lineNumber":94,"author":{"gitId":"justinfidelis"},"content":"     * @param staffId the id of the staff to remove.","lastModifiedDate":"2021-10-24"},{"lineNumber":95,"author":{"gitId":"justinfidelis"},"content":"     * @throws MedBotException if there is no staff with that id","lastModifiedDate":"2021-10-24"},{"lineNumber":96,"author":{"gitId":"justinfidelis"},"content":"     */","lastModifiedDate":"2021-10-24"},{"lineNumber":97,"author":{"gitId":"justinfidelis"},"content":"    public void deleteStaff(int staffId) throws MedBotException {","lastModifiedDate":"2021-10-24"},{"lineNumber":98,"author":{"gitId":"justinfidelis"},"content":"        LinkedList\u003cInteger\u003e appointmentIds \u003d medicalStaffList.getAllAppointmentIds(staffId);","lastModifiedDate":"2021-10-25"},{"lineNumber":99,"author":{"gitId":"justinfidelis"},"content":"        deleteAppointments(appointmentIds);","lastModifiedDate":"2021-10-25"},{"lineNumber":100,"author":{"gitId":"Kureans"},"content":"        medicalStaffList.deletePerson(staffId);","lastModifiedDate":"2021-10-25"},{"lineNumber":101,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":102,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":103,"author":{"gitId":"justinfidelis"},"content":"    /**","lastModifiedDate":"2021-10-25"},{"lineNumber":104,"author":{"gitId":"justinfidelis"},"content":"     * Delete all appointments whose id is in the given appointmentIds List.","lastModifiedDate":"2021-10-25"},{"lineNumber":105,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-10-25"},{"lineNumber":106,"author":{"gitId":"justinfidelis"},"content":"     * @param appointmentIds List of ids of appointments to be deleted","lastModifiedDate":"2021-10-25"},{"lineNumber":107,"author":{"gitId":"justinfidelis"},"content":"     * @throws MedBotException if there is an error when deleting the appointments","lastModifiedDate":"2021-10-25"},{"lineNumber":108,"author":{"gitId":"justinfidelis"},"content":"     */","lastModifiedDate":"2021-10-25"},{"lineNumber":109,"author":{"gitId":"justinfidelis"},"content":"    private void deleteAppointments(List\u003cInteger\u003e appointmentIds) throws MedBotException {","lastModifiedDate":"2021-10-25"},{"lineNumber":110,"author":{"gitId":"justinfidelis"},"content":"        for (int appointmentId : appointmentIds) {","lastModifiedDate":"2021-10-25"},{"lineNumber":111,"author":{"gitId":"justinfidelis"},"content":"            try {","lastModifiedDate":"2021-10-25"},{"lineNumber":112,"author":{"gitId":"justinfidelis"},"content":"                deleteAppointment(appointmentId);","lastModifiedDate":"2021-10-25"},{"lineNumber":113,"author":{"gitId":"justinfidelis"},"content":"            } catch (MedBotException mbe) {","lastModifiedDate":"2021-10-25"},{"lineNumber":114,"author":{"gitId":"justinfidelis"},"content":"                //This exception should not be thrown","lastModifiedDate":"2021-10-25"},{"lineNumber":115,"author":{"gitId":"justinfidelis"},"content":"                assert false;","lastModifiedDate":"2021-10-25"},{"lineNumber":116,"author":{"gitId":"justinfidelis"},"content":"                throw new MedBotException(ERROR_DELETE_APPOINTMENT_ERROR);","lastModifiedDate":"2021-10-25"},{"lineNumber":117,"author":{"gitId":"justinfidelis"},"content":"            }","lastModifiedDate":"2021-10-25"},{"lineNumber":118,"author":{"gitId":"justinfidelis"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":119,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":120,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":121,"author":{"gitId":"justinfidelis"},"content":"    /**","lastModifiedDate":"2021-10-24"},{"lineNumber":122,"author":{"gitId":"justinfidelis"},"content":"     * Returns a String containing the information of the patient with the specified patientId.","lastModifiedDate":"2021-10-24"},{"lineNumber":123,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-10-24"},{"lineNumber":124,"author":{"gitId":"justinfidelis"},"content":"     * @param patientId the id of the patient to search for","lastModifiedDate":"2021-10-24"},{"lineNumber":125,"author":{"gitId":"justinfidelis"},"content":"     * @return a String containing the patient\u0027s information","lastModifiedDate":"2021-10-24"},{"lineNumber":126,"author":{"gitId":"justinfidelis"},"content":"     * @throws MedBotException if there is no patient with that id","lastModifiedDate":"2021-10-24"},{"lineNumber":127,"author":{"gitId":"justinfidelis"},"content":"     */","lastModifiedDate":"2021-10-24"},{"lineNumber":128,"author":{"gitId":"justinfidelis"},"content":"    public String getPatientInfo(int patientId) throws MedBotException {","lastModifiedDate":"2021-10-24"},{"lineNumber":129,"author":{"gitId":"justinfidelis"},"content":"        return patientList.getPersonInfo(patientId);","lastModifiedDate":"2021-10-24"},{"lineNumber":130,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":131,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":132,"author":{"gitId":"justinfidelis"},"content":"    /**","lastModifiedDate":"2021-10-24"},{"lineNumber":133,"author":{"gitId":"justinfidelis"},"content":"     * Returns a String containing the information of the staff with the specified patientId.","lastModifiedDate":"2021-10-24"},{"lineNumber":134,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-10-24"},{"lineNumber":135,"author":{"gitId":"justinfidelis"},"content":"     * @param staffId the id of the staff to search for","lastModifiedDate":"2021-10-24"},{"lineNumber":136,"author":{"gitId":"justinfidelis"},"content":"     * @return a String containing the staff\u0027s information","lastModifiedDate":"2021-10-24"},{"lineNumber":137,"author":{"gitId":"justinfidelis"},"content":"     * @throws MedBotException if there is no staff with that id","lastModifiedDate":"2021-10-24"},{"lineNumber":138,"author":{"gitId":"justinfidelis"},"content":"     */","lastModifiedDate":"2021-10-24"},{"lineNumber":139,"author":{"gitId":"justinfidelis"},"content":"    public String getStaffInfo(int staffId) throws MedBotException {","lastModifiedDate":"2021-10-24"},{"lineNumber":140,"author":{"gitId":"justinfidelis"},"content":"        return medicalStaffList.getPersonInfo(staffId);","lastModifiedDate":"2021-10-24"},{"lineNumber":141,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":142,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":143,"author":{"gitId":"justinfidelis"},"content":"    /**","lastModifiedDate":"2021-10-24"},{"lineNumber":144,"author":{"gitId":"justinfidelis"},"content":"     * Returns a list of patients that match the specified attributes.","lastModifiedDate":"2021-10-24"},{"lineNumber":145,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-10-24"},{"lineNumber":146,"author":{"gitId":"justinfidelis"},"content":"     * @param parameters The attributes to filter patients","lastModifiedDate":"2021-10-24"},{"lineNumber":147,"author":{"gitId":"justinfidelis"},"content":"     * @return list of patients that match the specified attributes","lastModifiedDate":"2021-10-24"},{"lineNumber":148,"author":{"gitId":"justinfidelis"},"content":"     */","lastModifiedDate":"2021-10-24"},{"lineNumber":149,"author":{"gitId":"EricBryann"},"content":"    public List\u003cString\u003e findPatients(String[] parameters) throws MedBotException {","lastModifiedDate":"2021-11-02"},{"lineNumber":150,"author":{"gitId":"justinfidelis"},"content":"        return patientList.findPersons(parameters);","lastModifiedDate":"2021-10-24"},{"lineNumber":151,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":152,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":153,"author":{"gitId":"justinfidelis"},"content":"    /**","lastModifiedDate":"2021-10-24"},{"lineNumber":154,"author":{"gitId":"justinfidelis"},"content":"     * Returns a list of staff that match the specified attributes.","lastModifiedDate":"2021-10-24"},{"lineNumber":155,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-10-24"},{"lineNumber":156,"author":{"gitId":"justinfidelis"},"content":"     * @param parameters The attributes to filter patients","lastModifiedDate":"2021-10-24"},{"lineNumber":157,"author":{"gitId":"justinfidelis"},"content":"     * @return list of staff that match the specified attributes","lastModifiedDate":"2021-10-24"},{"lineNumber":158,"author":{"gitId":"justinfidelis"},"content":"     */","lastModifiedDate":"2021-10-24"},{"lineNumber":159,"author":{"gitId":"EricBryann"},"content":"    public List\u003cString\u003e findStaff(String[] parameters) throws MedBotException {","lastModifiedDate":"2021-11-02"},{"lineNumber":160,"author":{"gitId":"justinfidelis"},"content":"        return medicalStaffList.findPersons(parameters);","lastModifiedDate":"2021-10-24"},{"lineNumber":161,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":162,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":163,"author":{"gitId":"justinfidelis"},"content":"    /**","lastModifiedDate":"2021-10-24"},{"lineNumber":164,"author":{"gitId":"justinfidelis"},"content":"     * Returns a String that containing information of all patients.","lastModifiedDate":"2021-10-24"},{"lineNumber":165,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-10-24"},{"lineNumber":166,"author":{"gitId":"justinfidelis"},"content":"     * @return String containing information of all patients.","lastModifiedDate":"2021-10-24"},{"lineNumber":167,"author":{"gitId":"justinfidelis"},"content":"     */","lastModifiedDate":"2021-10-24"},{"lineNumber":168,"author":{"gitId":"EricBryann"},"content":"    public String listPatients(boolean getHiddenPatients) {","lastModifiedDate":"2021-11-02"},{"lineNumber":169,"author":{"gitId":"EricBryann"},"content":"        return patientList.listPersons(getHiddenPatients);","lastModifiedDate":"2021-11-02"},{"lineNumber":170,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":171,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":172,"author":{"gitId":"justinfidelis"},"content":"    /**","lastModifiedDate":"2021-10-24"},{"lineNumber":173,"author":{"gitId":"justinfidelis"},"content":"     * Returns a String that containing information of all staff.","lastModifiedDate":"2021-10-24"},{"lineNumber":174,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-10-24"},{"lineNumber":175,"author":{"gitId":"justinfidelis"},"content":"     * @return String containing information of all staff.","lastModifiedDate":"2021-10-24"},{"lineNumber":176,"author":{"gitId":"justinfidelis"},"content":"     */","lastModifiedDate":"2021-10-24"},{"lineNumber":177,"author":{"gitId":"EricBryann"},"content":"    public String listStaff(boolean getHiddenStaffs) {","lastModifiedDate":"2021-11-02"},{"lineNumber":178,"author":{"gitId":"EricBryann"},"content":"        return medicalStaffList.listPersons(getHiddenStaffs);","lastModifiedDate":"2021-11-02"},{"lineNumber":179,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":180,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":181,"author":{"gitId":"EricBryann"},"content":"    /**","lastModifiedDate":"2021-10-25"},{"lineNumber":182,"author":{"gitId":"EricBryann"},"content":"     * Hides the patient with the specified id.","lastModifiedDate":"2021-11-02"},{"lineNumber":183,"author":{"gitId":"EricBryann"},"content":"     *","lastModifiedDate":"2021-10-25"},{"lineNumber":184,"author":{"gitId":"EricBryann"},"content":"     * @param patientId the id of the patient to hide.","lastModifiedDate":"2021-11-02"},{"lineNumber":185,"author":{"gitId":"EricBryann"},"content":"     * @throws MedBotException if there is no patient with that id","lastModifiedDate":"2021-10-25"},{"lineNumber":186,"author":{"gitId":"EricBryann"},"content":"     */","lastModifiedDate":"2021-10-25"},{"lineNumber":187,"author":{"gitId":"EricBryann"},"content":"    public void hidePatient(int patientId) throws MedBotException {","lastModifiedDate":"2021-11-02"},{"lineNumber":188,"author":{"gitId":"EricBryann"},"content":"        patientList.hidePerson(patientId);","lastModifiedDate":"2021-11-02"},{"lineNumber":189,"author":{"gitId":"EricBryann"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":190,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":191,"author":{"gitId":"EricBryann"},"content":"    /**","lastModifiedDate":"2021-10-25"},{"lineNumber":192,"author":{"gitId":"EricBryann"},"content":"     * Hides the staff with the specified id.","lastModifiedDate":"2021-11-02"},{"lineNumber":193,"author":{"gitId":"EricBryann"},"content":"     *","lastModifiedDate":"2021-10-25"},{"lineNumber":194,"author":{"gitId":"EricBryann"},"content":"     * @param staffId the id of the staff to hide.","lastModifiedDate":"2021-11-02"},{"lineNumber":195,"author":{"gitId":"EricBryann"},"content":"     * @throws MedBotException if there is no staff with that id","lastModifiedDate":"2021-10-25"},{"lineNumber":196,"author":{"gitId":"EricBryann"},"content":"     */","lastModifiedDate":"2021-10-25"},{"lineNumber":197,"author":{"gitId":"EricBryann"},"content":"    public void hideStaff(int staffId) throws MedBotException {","lastModifiedDate":"2021-11-02"},{"lineNumber":198,"author":{"gitId":"EricBryann"},"content":"        medicalStaffList.hidePerson(staffId);","lastModifiedDate":"2021-11-02"},{"lineNumber":199,"author":{"gitId":"EricBryann"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":200,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":201,"author":{"gitId":"EricBryann"},"content":"    /**","lastModifiedDate":"2021-10-25"},{"lineNumber":202,"author":{"gitId":"EricBryann"},"content":"     * Shows the patient with the specified id.","lastModifiedDate":"2021-11-02"},{"lineNumber":203,"author":{"gitId":"EricBryann"},"content":"     *","lastModifiedDate":"2021-10-25"},{"lineNumber":204,"author":{"gitId":"EricBryann"},"content":"     * @param patientId the id of the patient to show.","lastModifiedDate":"2021-11-02"},{"lineNumber":205,"author":{"gitId":"EricBryann"},"content":"     * @throws MedBotException if there is no patient with that id","lastModifiedDate":"2021-10-25"},{"lineNumber":206,"author":{"gitId":"EricBryann"},"content":"     */","lastModifiedDate":"2021-10-25"},{"lineNumber":207,"author":{"gitId":"EricBryann"},"content":"    public void showPatient(int patientId) throws MedBotException {","lastModifiedDate":"2021-11-02"},{"lineNumber":208,"author":{"gitId":"EricBryann"},"content":"        patientList.showPerson(patientId);","lastModifiedDate":"2021-11-02"},{"lineNumber":209,"author":{"gitId":"EricBryann"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":210,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":211,"author":{"gitId":"EricBryann"},"content":"    /**","lastModifiedDate":"2021-10-25"},{"lineNumber":212,"author":{"gitId":"EricBryann"},"content":"     * Shows the staff with the specified id.","lastModifiedDate":"2021-11-02"},{"lineNumber":213,"author":{"gitId":"EricBryann"},"content":"     *","lastModifiedDate":"2021-10-25"},{"lineNumber":214,"author":{"gitId":"EricBryann"},"content":"     * @param staffId the id of the staff to show.","lastModifiedDate":"2021-11-02"},{"lineNumber":215,"author":{"gitId":"EricBryann"},"content":"     * @throws MedBotException if there is no staff with that id","lastModifiedDate":"2021-10-25"},{"lineNumber":216,"author":{"gitId":"EricBryann"},"content":"     */","lastModifiedDate":"2021-10-25"},{"lineNumber":217,"author":{"gitId":"EricBryann"},"content":"    public void showStaff(int staffId) throws MedBotException {","lastModifiedDate":"2021-11-02"},{"lineNumber":218,"author":{"gitId":"EricBryann"},"content":"        medicalStaffList.showPerson(staffId);","lastModifiedDate":"2021-11-02"},{"lineNumber":219,"author":{"gitId":"EricBryann"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":220,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":221,"author":{"gitId":"justinfidelis"},"content":"    //Storage methods","lastModifiedDate":"2021-10-27"},{"lineNumber":222,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":223,"author":{"gitId":"justinfidelis"},"content":"    public int getLastPatientId() {","lastModifiedDate":"2021-10-27"},{"lineNumber":224,"author":{"gitId":"justinfidelis"},"content":"        return patientList.getLastId();","lastModifiedDate":"2021-10-27"},{"lineNumber":225,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":226,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":227,"author":{"gitId":"justinfidelis"},"content":"    public void setLastPatientId(int lastPatientId) {","lastModifiedDate":"2021-10-27"},{"lineNumber":228,"author":{"gitId":"justinfidelis"},"content":"        patientList.setLastId(lastPatientId);","lastModifiedDate":"2021-10-27"},{"lineNumber":229,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":230,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":231,"author":{"gitId":"justinfidelis"},"content":"    public String getPatientStorageString() {","lastModifiedDate":"2021-10-27"},{"lineNumber":232,"author":{"gitId":"justinfidelis"},"content":"        return patientList.getStorageString();","lastModifiedDate":"2021-10-27"},{"lineNumber":233,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":234,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":235,"author":{"gitId":"justinfidelis"},"content":"    public int getLastStaffId() {","lastModifiedDate":"2021-10-27"},{"lineNumber":236,"author":{"gitId":"justinfidelis"},"content":"        return medicalStaffList.getLastId();","lastModifiedDate":"2021-10-27"},{"lineNumber":237,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":238,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":239,"author":{"gitId":"justinfidelis"},"content":"    public void setLastStaffId(int lastStaffId) {","lastModifiedDate":"2021-10-27"},{"lineNumber":240,"author":{"gitId":"justinfidelis"},"content":"        medicalStaffList.setLastId(lastStaffId);","lastModifiedDate":"2021-10-27"},{"lineNumber":241,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":242,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":243,"author":{"gitId":"justinfidelis"},"content":"    public String getStaffStorageString() {","lastModifiedDate":"2021-10-27"},{"lineNumber":244,"author":{"gitId":"justinfidelis"},"content":"        return medicalStaffList.getStorageString();","lastModifiedDate":"2021-10-27"},{"lineNumber":245,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":246,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":247,"author":{"gitId":"justinfidelis"},"content":"    public int getLastAppointmentId() {","lastModifiedDate":"2021-10-27"},{"lineNumber":248,"author":{"gitId":"justinfidelis"},"content":"        return schedulerAppointmentList.getLastId();","lastModifiedDate":"2021-10-27"},{"lineNumber":249,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":250,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":251,"author":{"gitId":"justinfidelis"},"content":"    public void setLastAppointmentId(int lastAppointmentId) {","lastModifiedDate":"2021-10-27"},{"lineNumber":252,"author":{"gitId":"justinfidelis"},"content":"        schedulerAppointmentList.setLastId(lastAppointmentId);","lastModifiedDate":"2021-10-27"},{"lineNumber":253,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":254,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":255,"author":{"gitId":"justinfidelis"},"content":"    public String getAppointmentStorageString() {","lastModifiedDate":"2021-10-27"},{"lineNumber":256,"author":{"gitId":"justinfidelis"},"content":"        return schedulerAppointmentList.getStorageString();","lastModifiedDate":"2021-10-27"},{"lineNumber":257,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":258,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":259,"author":{"gitId":"justinfidelis"},"content":"    //Appointment Management methods","lastModifiedDate":"2021-10-27"},{"lineNumber":260,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":261,"author":{"gitId":"justinfidelis"},"content":"    /**","lastModifiedDate":"2021-10-24"},{"lineNumber":262,"author":{"gitId":"justinfidelis"},"content":"     * Returns a copy of the appointment at the specified id.","lastModifiedDate":"2021-10-24"},{"lineNumber":263,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-10-24"},{"lineNumber":264,"author":{"gitId":"justinfidelis"},"content":"     * @param appointmentId the id of the Appointment to be returned","lastModifiedDate":"2021-10-24"},{"lineNumber":265,"author":{"gitId":"justinfidelis"},"content":"     * @return a copy of the appointment at the specified id","lastModifiedDate":"2021-10-24"},{"lineNumber":266,"author":{"gitId":"justinfidelis"},"content":"     * @throws MedBotException if there is no appointment with that id","lastModifiedDate":"2021-10-24"},{"lineNumber":267,"author":{"gitId":"justinfidelis"},"content":"     */","lastModifiedDate":"2021-10-24"},{"lineNumber":268,"author":{"gitId":"justinfidelis"},"content":"    public Appointment getAppointment(int appointmentId) throws MedBotException {","lastModifiedDate":"2021-10-24"},{"lineNumber":269,"author":{"gitId":"justinfidelis"},"content":"        return schedulerAppointmentList.getAppointment(appointmentId);","lastModifiedDate":"2021-10-24"},{"lineNumber":270,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":271,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":272,"author":{"gitId":"jushg"},"content":"    /**","lastModifiedDate":"2021-10-27"},{"lineNumber":273,"author":{"gitId":"jushg"},"content":"     * Returns all current appointments.","lastModifiedDate":"2021-10-27"},{"lineNumber":274,"author":{"gitId":"jushg"},"content":"     *","lastModifiedDate":"2021-10-27"},{"lineNumber":275,"author":{"gitId":"jushg"},"content":"     * @return the String list of all appointments.","lastModifiedDate":"2021-10-27"},{"lineNumber":276,"author":{"gitId":"jushg"},"content":"     * @throws MedBotException when the appointment List cannot be generated.","lastModifiedDate":"2021-10-27"},{"lineNumber":277,"author":{"gitId":"jushg"},"content":"     */","lastModifiedDate":"2021-10-27"},{"lineNumber":278,"author":{"gitId":"justinfidelis"},"content":"    public String listAllAppointments() throws MedBotException {","lastModifiedDate":"2021-10-26"},{"lineNumber":279,"author":{"gitId":"justinfidelis"},"content":"        List\u003cInteger\u003e appointmentIds \u003d schedulerAppointmentList.listAppointments();","lastModifiedDate":"2021-10-26"},{"lineNumber":280,"author":{"gitId":"justinfidelis"},"content":"        return generateAppointmentTable(appointmentIds);","lastModifiedDate":"2021-10-26"},{"lineNumber":281,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":282,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":283,"author":{"gitId":"jushg"},"content":"    /**","lastModifiedDate":"2021-10-27"},{"lineNumber":284,"author":{"gitId":"jushg"},"content":"     * Returns all current appointments of a staff.","lastModifiedDate":"2021-10-27"},{"lineNumber":285,"author":{"gitId":"jushg"},"content":"     *","lastModifiedDate":"2021-10-27"},{"lineNumber":286,"author":{"gitId":"jushg"},"content":"     * @return the String list of all appointments of a staff.","lastModifiedDate":"2021-10-27"},{"lineNumber":287,"author":{"gitId":"jushg"},"content":"     * @throws MedBotException when the appointment List cannot be generated.","lastModifiedDate":"2021-10-27"},{"lineNumber":288,"author":{"gitId":"jushg"},"content":"     */","lastModifiedDate":"2021-10-27"},{"lineNumber":289,"author":{"gitId":"justinfidelis"},"content":"    public String listMedicalStaffAppointments(int staffId, FilterType filterType, int dateTimeCode)","lastModifiedDate":"2021-10-26"},{"lineNumber":290,"author":{"gitId":"justinfidelis"},"content":"            throws MedBotException {","lastModifiedDate":"2021-10-26"},{"lineNumber":291,"author":{"gitId":"justinfidelis"},"content":"        List\u003cInteger\u003e appointmentIds \u003d medicalStaffList.listAppointments(staffId, filterType, dateTimeCode);","lastModifiedDate":"2021-10-26"},{"lineNumber":292,"author":{"gitId":"justinfidelis"},"content":"        return generateAppointmentTable(appointmentIds);","lastModifiedDate":"2021-10-26"},{"lineNumber":293,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":294,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":295,"author":{"gitId":"jushg"},"content":"    /**","lastModifiedDate":"2021-10-27"},{"lineNumber":296,"author":{"gitId":"jushg"},"content":"     * Returns all current appointments of a patient.","lastModifiedDate":"2021-10-27"},{"lineNumber":297,"author":{"gitId":"jushg"},"content":"     *","lastModifiedDate":"2021-10-27"},{"lineNumber":298,"author":{"gitId":"jushg"},"content":"     * @return the String list of all appointments of a patient.","lastModifiedDate":"2021-10-27"},{"lineNumber":299,"author":{"gitId":"jushg"},"content":"     * @throws MedBotException when the appointment List cannot be generated.","lastModifiedDate":"2021-10-27"},{"lineNumber":300,"author":{"gitId":"jushg"},"content":"     */","lastModifiedDate":"2021-10-27"},{"lineNumber":301,"author":{"gitId":"justinfidelis"},"content":"    public String listPatientAppointments(int patientId, FilterType filterType, int dateTimeCode)","lastModifiedDate":"2021-10-26"},{"lineNumber":302,"author":{"gitId":"justinfidelis"},"content":"            throws MedBotException {","lastModifiedDate":"2021-10-26"},{"lineNumber":303,"author":{"gitId":"justinfidelis"},"content":"        List\u003cInteger\u003e appointmentIds \u003d patientList.listAppointments(patientId, filterType, dateTimeCode);","lastModifiedDate":"2021-10-26"},{"lineNumber":304,"author":{"gitId":"justinfidelis"},"content":"        return generateAppointmentTable(appointmentIds);","lastModifiedDate":"2021-10-26"},{"lineNumber":305,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":306,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":307,"author":{"gitId":"justinfidelis"},"content":"    /**","lastModifiedDate":"2021-10-24"},{"lineNumber":308,"author":{"gitId":"justinfidelis"},"content":"     * Adds the specified appointment to the scheduler if it does not clash with existing appointments.","lastModifiedDate":"2021-10-24"},{"lineNumber":309,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-10-24"},{"lineNumber":310,"author":{"gitId":"justinfidelis"},"content":"     * \u003cp\u003eIf the appointment does not have an appointmentId, it will be assigned one.","lastModifiedDate":"2021-10-24"},{"lineNumber":311,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-10-24"},{"lineNumber":312,"author":{"gitId":"justinfidelis"},"content":"     * @param appointment Appointment to be added to the scheduler","lastModifiedDate":"2021-10-24"},{"lineNumber":313,"author":{"gitId":"justinfidelis"},"content":"     * @throws MedBotException if the appointment is missing information or clashes with another appointment","lastModifiedDate":"2021-10-24"},{"lineNumber":314,"author":{"gitId":"justinfidelis"},"content":"     */","lastModifiedDate":"2021-10-24"},{"lineNumber":315,"author":{"gitId":"justinfidelis"},"content":"    public int addAppointment(Appointment appointment) throws MedBotException {","lastModifiedDate":"2021-10-26"},{"lineNumber":316,"author":{"gitId":"justinfidelis"},"content":"        if (!appointment.isComplete()) {","lastModifiedDate":"2021-10-21"},{"lineNumber":317,"author":{"gitId":"justinfidelis"},"content":"            throw new MedBotException(ERROR_ADD_INCOMPLETE_APPOINTMENT);","lastModifiedDate":"2021-10-21"},{"lineNumber":318,"author":{"gitId":"justinfidelis"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":319,"author":{"gitId":"justinfidelis"},"content":"        checkAvailability(appointment);","lastModifiedDate":"2021-10-24"},{"lineNumber":320,"author":{"gitId":"justinfidelis"},"content":"        return insertAppointment(appointment);","lastModifiedDate":"2021-10-26"},{"lineNumber":321,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":322,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":323,"author":{"gitId":"justinfidelis"},"content":"    /**","lastModifiedDate":"2021-10-24"},{"lineNumber":324,"author":{"gitId":"justinfidelis"},"content":"     * Removes the appointment with the specified appointmentId.","lastModifiedDate":"2021-10-24"},{"lineNumber":325,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-10-24"},{"lineNumber":326,"author":{"gitId":"justinfidelis"},"content":"     * @param appointmentId the appointmentId of the appointment to be removed","lastModifiedDate":"2021-10-24"},{"lineNumber":327,"author":{"gitId":"justinfidelis"},"content":"     * @throws MedBotException if there is no appointment with that appointmentId","lastModifiedDate":"2021-10-24"},{"lineNumber":328,"author":{"gitId":"justinfidelis"},"content":"     */","lastModifiedDate":"2021-10-24"},{"lineNumber":329,"author":{"gitId":"justinfidelis"},"content":"    public void deleteAppointment(int appointmentId) throws MedBotException {","lastModifiedDate":"2021-10-21"},{"lineNumber":330,"author":{"gitId":"justinfidelis"},"content":"        Appointment deletedAppointment \u003d schedulerAppointmentList.deleteAppointment(appointmentId);","lastModifiedDate":"2021-10-24"},{"lineNumber":331,"author":{"gitId":"justinfidelis"},"content":"        int patientId \u003d deletedAppointment.getPatientId();","lastModifiedDate":"2021-10-21"},{"lineNumber":332,"author":{"gitId":"justinfidelis"},"content":"        int medicalStaffId \u003d deletedAppointment.getMedicalStaffId();","lastModifiedDate":"2021-10-21"},{"lineNumber":333,"author":{"gitId":"justinfidelis"},"content":"        int dateTimeCode \u003d deletedAppointment.getDateTimeCode();","lastModifiedDate":"2021-10-21"},{"lineNumber":334,"author":{"gitId":"justinfidelis"},"content":"        try {","lastModifiedDate":"2021-10-21"},{"lineNumber":335,"author":{"gitId":"justinfidelis"},"content":"            patientList.deleteAppointment(patientId, dateTimeCode);","lastModifiedDate":"2021-10-24"},{"lineNumber":336,"author":{"gitId":"justinfidelis"},"content":"            medicalStaffList.deleteAppointment(medicalStaffId, dateTimeCode);","lastModifiedDate":"2021-10-24"},{"lineNumber":337,"author":{"gitId":"justinfidelis"},"content":"        } catch (MedBotException me) {","lastModifiedDate":"2021-10-21"},{"lineNumber":338,"author":{"gitId":"justinfidelis"},"content":"            //This exception should not be thrown as the patientId, medicalStaffId and dateTimeCode should correspond","lastModifiedDate":"2021-10-25"},{"lineNumber":339,"author":{"gitId":"justinfidelis"},"content":"            //to a valid appointment","lastModifiedDate":"2021-10-25"},{"lineNumber":340,"author":{"gitId":"justinfidelis"},"content":"            assert false;","lastModifiedDate":"2021-10-24"},{"lineNumber":341,"author":{"gitId":"justinfidelis"},"content":"            throw new MedBotException(ERROR_DELETE_APPOINTMENT_ERROR);","lastModifiedDate":"2021-10-21"},{"lineNumber":342,"author":{"gitId":"justinfidelis"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":343,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":344,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":345,"author":{"gitId":"justinfidelis"},"content":"    /**","lastModifiedDate":"2021-10-24"},{"lineNumber":346,"author":{"gitId":"justinfidelis"},"content":"     * Edits the appointment at the specified appointmentId to have the parameters of newAppointment.","lastModifiedDate":"2021-10-24"},{"lineNumber":347,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-10-24"},{"lineNumber":348,"author":{"gitId":"justinfidelis"},"content":"     * @param appointmentId  the id of the appointment to be modified","lastModifiedDate":"2021-10-24"},{"lineNumber":349,"author":{"gitId":"justinfidelis"},"content":"     * @param newAppointment Appointment containing the new parameter values","lastModifiedDate":"2021-10-24"},{"lineNumber":350,"author":{"gitId":"justinfidelis"},"content":"     * @throws MedBotException if there is no appointment with the specified id or the changes will lead to a clash","lastModifiedDate":"2021-10-24"},{"lineNumber":351,"author":{"gitId":"justinfidelis"},"content":"     */","lastModifiedDate":"2021-10-24"},{"lineNumber":352,"author":{"gitId":"justinfidelis"},"content":"    public void editAppointment(int appointmentId, Appointment newAppointment) throws MedBotException {","lastModifiedDate":"2021-10-24"},{"lineNumber":353,"author":{"gitId":"justinfidelis"},"content":"        Appointment oldAppointment \u003d schedulerAppointmentList.getAppointment(appointmentId);","lastModifiedDate":"2021-10-21"},{"lineNumber":354,"author":{"gitId":"justinfidelis"},"content":"        newAppointment \u003d Appointment.mergeAppointmentData(oldAppointment, newAppointment);","lastModifiedDate":"2021-10-21"},{"lineNumber":355,"author":{"gitId":"justinfidelis"},"content":"        newAppointment.setId(appointmentId);","lastModifiedDate":"2021-10-27"},{"lineNumber":356,"author":{"gitId":"justinfidelis"},"content":"        assert newAppointment.isComplete();","lastModifiedDate":"2021-10-24"},{"lineNumber":357,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":358,"author":{"gitId":"justinfidelis"},"content":"        checkAvailability(newAppointment);","lastModifiedDate":"2021-10-24"},{"lineNumber":359,"author":{"gitId":"justinfidelis"},"content":"        deleteAppointment(appointmentId);","lastModifiedDate":"2021-10-21"},{"lineNumber":360,"author":{"gitId":"justinfidelis"},"content":"        insertAppointment(newAppointment);","lastModifiedDate":"2021-10-24"},{"lineNumber":361,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":362,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":363,"author":{"gitId":"justinfidelis"},"content":"    private int insertAppointment(Appointment appointment) throws MedBotException {","lastModifiedDate":"2021-10-24"},{"lineNumber":364,"author":{"gitId":"justinfidelis"},"content":"        try {","lastModifiedDate":"2021-10-24"},{"lineNumber":365,"author":{"gitId":"justinfidelis"},"content":"            int appointmentId \u003d schedulerAppointmentList.addAppointment(appointment);","lastModifiedDate":"2021-10-24"},{"lineNumber":366,"author":{"gitId":"justinfidelis"},"content":"            patientList.addAppointment(appointment.getPatientId(), appointment);","lastModifiedDate":"2021-10-24"},{"lineNumber":367,"author":{"gitId":"justinfidelis"},"content":"            medicalStaffList.addAppointment(appointment.getMedicalStaffId(), appointment);","lastModifiedDate":"2021-10-24"},{"lineNumber":368,"author":{"gitId":"justinfidelis"},"content":"            return appointmentId;","lastModifiedDate":"2021-10-24"},{"lineNumber":369,"author":{"gitId":"justinfidelis"},"content":"        } catch (MedBotException me) {","lastModifiedDate":"2021-10-24"},{"lineNumber":370,"author":{"gitId":"justinfidelis"},"content":"            //This exception should not be thrown as it was already checked that there would be no clashes when","lastModifiedDate":"2021-10-25"},{"lineNumber":371,"author":{"gitId":"justinfidelis"},"content":"            //inserting the appointment","lastModifiedDate":"2021-10-25"},{"lineNumber":372,"author":{"gitId":"justinfidelis"},"content":"            assert false;","lastModifiedDate":"2021-10-24"},{"lineNumber":373,"author":{"gitId":"justinfidelis"},"content":"            throw new MedBotException(ERROR_ADD_APPOINTMENT_ERROR);","lastModifiedDate":"2021-10-24"},{"lineNumber":374,"author":{"gitId":"justinfidelis"},"content":"        }","lastModifiedDate":"2021-10-24"},{"lineNumber":375,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":376,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":377,"author":{"gitId":"justinfidelis"},"content":"    private void checkAvailability(Appointment appointment) throws MedBotException {","lastModifiedDate":"2021-10-24"},{"lineNumber":378,"author":{"gitId":"justinfidelis"},"content":"        int patientId \u003d appointment.getPatientId();","lastModifiedDate":"2021-10-24"},{"lineNumber":379,"author":{"gitId":"justinfidelis"},"content":"        int staffId \u003d appointment.getMedicalStaffId();","lastModifiedDate":"2021-10-24"},{"lineNumber":380,"author":{"gitId":"justinfidelis"},"content":"        int dateTimeCode \u003d appointment.getDateTimeCode();","lastModifiedDate":"2021-10-24"},{"lineNumber":381,"author":{"gitId":"justinfidelis"},"content":"        int appointmentId \u003d appointment.getId();","lastModifiedDate":"2021-10-27"},{"lineNumber":382,"author":{"gitId":"justinfidelis"},"content":"        checkPatientAvailability(patientId, dateTimeCode, appointmentId);","lastModifiedDate":"2021-10-24"},{"lineNumber":383,"author":{"gitId":"justinfidelis"},"content":"        checkStaffAvailability(staffId, dateTimeCode, appointmentId);","lastModifiedDate":"2021-10-27"},{"lineNumber":384,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":385,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":386,"author":{"gitId":"justinfidelis"},"content":"    private void checkPatientAvailability(int patientId, int dateTimeCode, int appointmentId) throws MedBotException {","lastModifiedDate":"2021-10-24"},{"lineNumber":387,"author":{"gitId":"justinfidelis"},"content":"        int clashAppointmentId \u003d patientList.getAppointmentId(patientId, dateTimeCode);","lastModifiedDate":"2021-10-24"},{"lineNumber":388,"author":{"gitId":"justinfidelis"},"content":"        if (clashAppointmentId !\u003d -1 \u0026\u0026 clashAppointmentId !\u003d appointmentId) {","lastModifiedDate":"2021-10-24"},{"lineNumber":389,"author":{"gitId":"justinfidelis"},"content":"            throw new MedBotException(String.format(ERROR_PATIENT_APPOINTMENT_CLASH, clashAppointmentId));","lastModifiedDate":"2021-10-21"},{"lineNumber":390,"author":{"gitId":"justinfidelis"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":391,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":392,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":393,"author":{"gitId":"justinfidelis"},"content":"    private void checkStaffAvailability(int staffId, int dateTimeCode, int appointmentId)","lastModifiedDate":"2021-10-27"},{"lineNumber":394,"author":{"gitId":"justinfidelis"},"content":"            throws MedBotException {","lastModifiedDate":"2021-10-24"},{"lineNumber":395,"author":{"gitId":"justinfidelis"},"content":"        int clashAppointmentId \u003d medicalStaffList.getAppointmentId(staffId, dateTimeCode);","lastModifiedDate":"2021-10-24"},{"lineNumber":396,"author":{"gitId":"justinfidelis"},"content":"        if (clashAppointmentId !\u003d -1 \u0026\u0026 clashAppointmentId !\u003d appointmentId) {","lastModifiedDate":"2021-10-24"},{"lineNumber":397,"author":{"gitId":"justinfidelis"},"content":"            throw new MedBotException(String.format(ERROR_STAFF_APPOINTMENT_CLASH, clashAppointmentId));","lastModifiedDate":"2021-10-21"},{"lineNumber":398,"author":{"gitId":"justinfidelis"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":399,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":400,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":401,"author":{"gitId":"justinfidelis"},"content":"    private String generateAppointmentTable(List\u003cInteger\u003e appointmentIds) throws MedBotException {","lastModifiedDate":"2021-10-27"},{"lineNumber":402,"author":{"gitId":"justinfidelis"},"content":"        String output \u003d EMPTY_STRING;","lastModifiedDate":"2021-10-27"},{"lineNumber":403,"author":{"gitId":"justinfidelis"},"content":"        for (int appointmentId : appointmentIds) {","lastModifiedDate":"2021-10-27"},{"lineNumber":404,"author":{"gitId":"justinfidelis"},"content":"            output +\u003d generateAppointmentTableRow(appointmentId) + END_LINE;","lastModifiedDate":"2021-10-27"},{"lineNumber":405,"author":{"gitId":"justinfidelis"},"content":"        }","lastModifiedDate":"2021-10-27"},{"lineNumber":406,"author":{"gitId":"justinfidelis"},"content":"        return output;","lastModifiedDate":"2021-10-27"},{"lineNumber":407,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":408,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":409,"author":{"gitId":"justinfidelis"},"content":"    private String generateAppointmentTableRow(int appointmentId) throws MedBotException {","lastModifiedDate":"2021-10-26"},{"lineNumber":410,"author":{"gitId":"justinfidelis"},"content":"        Appointment appointment \u003d schedulerAppointmentList.getAppointment(appointmentId);","lastModifiedDate":"2021-10-26"},{"lineNumber":411,"author":{"gitId":"justinfidelis"},"content":"        String patientName \u003d patientList.getPersonName(appointment.getPatientId());","lastModifiedDate":"2021-10-26"},{"lineNumber":412,"author":{"gitId":"justinfidelis"},"content":"        String staffName \u003d medicalStaffList.getPersonName(appointment.getMedicalStaffId());","lastModifiedDate":"2021-10-26"},{"lineNumber":413,"author":{"gitId":"justinfidelis"},"content":"        return VERTICAL_LINE_SPACED + formatAppointmentId(appointment.getId())","lastModifiedDate":"2021-10-27"},{"lineNumber":414,"author":{"gitId":"justinfidelis"},"content":"                + VERTICAL_LINE_SPACED + appointment.getDateTimeString()","lastModifiedDate":"2021-10-26"},{"lineNumber":415,"author":{"gitId":"justinfidelis"},"content":"                + VERTICAL_LINE_SPACED + formatPatientId(appointment.getPatientId())","lastModifiedDate":"2021-10-26"},{"lineNumber":416,"author":{"gitId":"justinfidelis"},"content":"                + VERTICAL_LINE_SPACED + formatNameString(patientName)","lastModifiedDate":"2021-10-26"},{"lineNumber":417,"author":{"gitId":"justinfidelis"},"content":"                + VERTICAL_LINE_SPACED + formatStaffId(appointment.getMedicalStaffId())","lastModifiedDate":"2021-10-26"},{"lineNumber":418,"author":{"gitId":"justinfidelis"},"content":"                + VERTICAL_LINE_SPACED + formatNameString(staffName)","lastModifiedDate":"2021-10-26"},{"lineNumber":419,"author":{"gitId":"justinfidelis"},"content":"                + VERTICAL_LINE_SPACED;","lastModifiedDate":"2021-10-26"},{"lineNumber":420,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":421,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":422,"author":{"gitId":"justinfidelis"},"content":"    private String formatAppointmentId(int id) {","lastModifiedDate":"2021-10-26"},{"lineNumber":423,"author":{"gitId":"justinfidelis"},"content":"        String idString \u003d Integer.toString(id);","lastModifiedDate":"2021-10-26"},{"lineNumber":424,"author":{"gitId":"justinfidelis"},"content":"        return formatAttributeString(idString, LENGTH_APPOINTMENT_ID_COLUMN);","lastModifiedDate":"2021-10-26"},{"lineNumber":425,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":426,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":427,"author":{"gitId":"justinfidelis"},"content":"    private String formatPatientId(int id) {","lastModifiedDate":"2021-10-26"},{"lineNumber":428,"author":{"gitId":"justinfidelis"},"content":"        String idString \u003d Integer.toString(id);","lastModifiedDate":"2021-10-26"},{"lineNumber":429,"author":{"gitId":"justinfidelis"},"content":"        return formatAttributeString(idString, LENGTH_PATIENT_ID_COLUMN);","lastModifiedDate":"2021-10-26"},{"lineNumber":430,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":431,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":432,"author":{"gitId":"justinfidelis"},"content":"    private String formatStaffId(int id) {","lastModifiedDate":"2021-10-26"},{"lineNumber":433,"author":{"gitId":"justinfidelis"},"content":"        String idString \u003d Integer.toString(id);","lastModifiedDate":"2021-10-26"},{"lineNumber":434,"author":{"gitId":"justinfidelis"},"content":"        return formatAttributeString(idString, LENGTH_STAFF_ID_COLUMN);","lastModifiedDate":"2021-10-26"},{"lineNumber":435,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":436,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":437,"author":{"gitId":"justinfidelis"},"content":"    private String formatNameString(String nameString) {","lastModifiedDate":"2021-10-26"},{"lineNumber":438,"author":{"gitId":"justinfidelis"},"content":"        return formatAttributeString(nameString, LENGTH_NAME_COLUMN);","lastModifiedDate":"2021-10-26"},{"lineNumber":439,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":440,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":441,"author":{"gitId":"justinfidelis"},"content":"    private String formatAttributeString(String attribute, int outputLength) {","lastModifiedDate":"2021-10-26"},{"lineNumber":442,"author":{"gitId":"justinfidelis"},"content":"        int attributeLength \u003d attribute.length();","lastModifiedDate":"2021-10-26"},{"lineNumber":443,"author":{"gitId":"justinfidelis"},"content":"        String output \u003d attribute;","lastModifiedDate":"2021-10-26"},{"lineNumber":444,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":445,"author":{"gitId":"justinfidelis"},"content":"        if (attributeLength \u003e outputLength) {","lastModifiedDate":"2021-10-26"},{"lineNumber":446,"author":{"gitId":"justinfidelis"},"content":"            output \u003d output.substring(0, outputLength - 3) + \"...\";","lastModifiedDate":"2021-10-26"},{"lineNumber":447,"author":{"gitId":"justinfidelis"},"content":"            return output;","lastModifiedDate":"2021-10-26"},{"lineNumber":448,"author":{"gitId":"justinfidelis"},"content":"        }","lastModifiedDate":"2021-10-26"},{"lineNumber":449,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":450,"author":{"gitId":"justinfidelis"},"content":"        for (int i \u003d attributeLength; i \u003c outputLength; i++) {","lastModifiedDate":"2021-10-26"},{"lineNumber":451,"author":{"gitId":"justinfidelis"},"content":"            output +\u003d SPACE;","lastModifiedDate":"2021-10-26"},{"lineNumber":452,"author":{"gitId":"justinfidelis"},"content":"        }","lastModifiedDate":"2021-10-26"},{"lineNumber":453,"author":{"gitId":"justinfidelis"},"content":"        return output;","lastModifiedDate":"2021-10-26"},{"lineNumber":454,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":455,"author":{"gitId":"justinfidelis"},"content":"}","lastModifiedDate":"2021-10-20"}],"authorContributionMap":{"justinfidelis":382,"CrimsonTitan79":2,"jushg":20,"Kureans":3,"EricBryann":48}},{"path":"src/main/java/medbot/command/Command.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"justinfidelis"},"content":"package medbot.command;","lastModifiedDate":"2021-09-30"},{"lineNumber":2,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":3,"author":{"gitId":"justinfidelis"},"content":"import medbot.Scheduler;","lastModifiedDate":"2021-10-20"},{"lineNumber":4,"author":{"gitId":"justinfidelis"},"content":"import medbot.exceptions.MedBotException;","lastModifiedDate":"2021-10-18"},{"lineNumber":5,"author":{"gitId":"jushg"},"content":"import medbot.ui.Ui;","lastModifiedDate":"2021-10-22"},{"lineNumber":6,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":7,"author":{"gitId":"justinfidelis"},"content":"public abstract class Command {","lastModifiedDate":"2021-09-30"},{"lineNumber":8,"author":{"gitId":"justinfidelis"},"content":"    /**","lastModifiedDate":"2021-09-30"},{"lineNumber":9,"author":{"gitId":"EricBryann"},"content":"     * Returns if the command type is the exitCommand.","lastModifiedDate":"2021-10-04"},{"lineNumber":10,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-09-30"},{"lineNumber":11,"author":{"gitId":"justinfidelis"},"content":"     * @return boolean value of whether the command is the exitCommand","lastModifiedDate":"2021-09-30"},{"lineNumber":12,"author":{"gitId":"justinfidelis"},"content":"     */","lastModifiedDate":"2021-09-30"},{"lineNumber":13,"author":{"gitId":"justinfidelis"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-09-30"},{"lineNumber":14,"author":{"gitId":"justinfidelis"},"content":"        return false;","lastModifiedDate":"2021-09-30"},{"lineNumber":15,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-09-30"},{"lineNumber":16,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":17,"author":{"gitId":"justinfidelis"},"content":"    /**","lastModifiedDate":"2021-09-30"},{"lineNumber":18,"author":{"gitId":"EricBryann"},"content":"     * Abstract method that executes the command.","lastModifiedDate":"2021-10-04"},{"lineNumber":19,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-09-30"},{"lineNumber":20,"author":{"gitId":"justinfidelis"},"content":"     * @param scheduler the scheduler that will be read or modified","lastModifiedDate":"2021-10-20"},{"lineNumber":21,"author":{"gitId":"justinfidelis"},"content":"     * @param ui Ui class instance used to print output messages","lastModifiedDate":"2021-11-07"},{"lineNumber":22,"author":{"gitId":"justinfidelis"},"content":"     */","lastModifiedDate":"2021-09-30"},{"lineNumber":23,"author":{"gitId":"justinfidelis"},"content":"    public abstract void execute(Scheduler scheduler, Ui ui) throws MedBotException;","lastModifiedDate":"2021-10-20"},{"lineNumber":24,"author":{"gitId":"justinfidelis"},"content":"}","lastModifiedDate":"2021-09-30"}],"authorContributionMap":{"justinfidelis":21,"jushg":1,"EricBryann":2}},{"path":"src/main/java/medbot/command/CommandType.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"justinfidelis"},"content":"package medbot.command;","lastModifiedDate":"2021-10-18"},{"lineNumber":2,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":3,"author":{"gitId":"justinfidelis"},"content":"public enum CommandType {","lastModifiedDate":"2021-10-18"},{"lineNumber":4,"author":{"gitId":"EricBryann"},"content":"    HELP, EXIT, SWITCH, ADD, DELETE, EDIT, VIEW, LIST, FIND, HIDE, SHOW, GET_VIEW","lastModifiedDate":"2021-11-02"},{"lineNumber":5,"author":{"gitId":"justinfidelis"},"content":"}","lastModifiedDate":"2021-10-18"}],"authorContributionMap":{"justinfidelis":4,"EricBryann":1}},{"path":"src/main/java/medbot/command/ExitCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"justinfidelis"},"content":"package medbot.command;","lastModifiedDate":"2021-09-30"},{"lineNumber":2,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":3,"author":{"gitId":"justinfidelis"},"content":"import medbot.Scheduler;","lastModifiedDate":"2021-10-20"},{"lineNumber":4,"author":{"gitId":"jushg"},"content":"import medbot.ui.Ui;","lastModifiedDate":"2021-10-22"},{"lineNumber":5,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":6,"author":{"gitId":"justinfidelis"},"content":"public class ExitCommand extends Command {","lastModifiedDate":"2021-09-30"},{"lineNumber":7,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":8,"author":{"gitId":"justinfidelis"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-09-30"},{"lineNumber":9,"author":{"gitId":"justinfidelis"},"content":"        return true;","lastModifiedDate":"2021-09-30"},{"lineNumber":10,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-09-30"},{"lineNumber":11,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":12,"author":{"gitId":"EricBryann"},"content":"    @Override","lastModifiedDate":"2021-10-13"},{"lineNumber":13,"author":{"gitId":"justinfidelis"},"content":"    public void execute(Scheduler scheduler, Ui ui) {","lastModifiedDate":"2021-10-20"},{"lineNumber":14,"author":{"gitId":"jushg"},"content":"        String exitMessage \u003d Ui.getExitMessage();","lastModifiedDate":"2021-10-25"},{"lineNumber":15,"author":{"gitId":"EricBryann"},"content":"        ui.printOutput(exitMessage);","lastModifiedDate":"2021-10-06"},{"lineNumber":16,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-09-30"},{"lineNumber":17,"author":{"gitId":"justinfidelis"},"content":"}","lastModifiedDate":"2021-09-30"}],"authorContributionMap":{"justinfidelis":13,"jushg":2,"EricBryann":2}},{"path":"src/main/java/medbot/command/GetCurrentViewCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jushg"},"content":"package medbot.command;","lastModifiedDate":"2021-10-25"},{"lineNumber":2,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":3,"author":{"gitId":"jushg"},"content":"import medbot.Scheduler;","lastModifiedDate":"2021-10-25"},{"lineNumber":4,"author":{"gitId":"jushg"},"content":"import medbot.exceptions.MedBotException;","lastModifiedDate":"2021-10-25"},{"lineNumber":5,"author":{"gitId":"jushg"},"content":"import medbot.ui.Ui;","lastModifiedDate":"2021-10-25"},{"lineNumber":6,"author":{"gitId":"jushg"},"content":"import medbot.utilities.ViewType;","lastModifiedDate":"2021-10-25"},{"lineNumber":7,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":8,"author":{"gitId":"jushg"},"content":"public class GetCurrentViewCommand extends Command {","lastModifiedDate":"2021-10-25"},{"lineNumber":9,"author":{"gitId":"jushg"},"content":"    private ViewType viewType;","lastModifiedDate":"2021-10-25"},{"lineNumber":10,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":11,"author":{"gitId":"jushg"},"content":"    public GetCurrentViewCommand(ViewType viewType) {","lastModifiedDate":"2021-10-25"},{"lineNumber":12,"author":{"gitId":"jushg"},"content":"        this.viewType \u003d viewType;","lastModifiedDate":"2021-10-25"},{"lineNumber":13,"author":{"gitId":"jushg"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":14,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":15,"author":{"gitId":"jushg"},"content":"    @Override","lastModifiedDate":"2021-10-25"},{"lineNumber":16,"author":{"gitId":"jushg"},"content":"    public void execute(Scheduler scheduler, Ui ui) throws MedBotException {","lastModifiedDate":"2021-10-25"},{"lineNumber":17,"author":{"gitId":"jushg"},"content":"        String viewMessage \u003d Ui.getCurrentViewMessage(viewType);","lastModifiedDate":"2021-10-25"},{"lineNumber":18,"author":{"gitId":"jushg"},"content":"        ui.printOutput(viewMessage);","lastModifiedDate":"2021-10-25"},{"lineNumber":19,"author":{"gitId":"jushg"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":20,"author":{"gitId":"jushg"},"content":"}","lastModifiedDate":"2021-10-25"}],"authorContributionMap":{"jushg":20}},{"path":"src/main/java/medbot/command/HelpCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Kureans"},"content":"package medbot.command;","lastModifiedDate":"2021-10-07"},{"lineNumber":2,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":3,"author":{"gitId":"justinfidelis"},"content":"import medbot.Scheduler;","lastModifiedDate":"2021-10-20"},{"lineNumber":4,"author":{"gitId":"jushg"},"content":"import medbot.ui.Ui;","lastModifiedDate":"2021-10-22"},{"lineNumber":5,"author":{"gitId":"jushg"},"content":"import medbot.exceptions.MedBotException;","lastModifiedDate":"2021-10-22"},{"lineNumber":6,"author":{"gitId":"jushg"},"content":"import medbot.utilities.ViewType;","lastModifiedDate":"2021-10-22"},{"lineNumber":7,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":8,"author":{"gitId":"Kureans"},"content":"//@@author Kureans","lastModifiedDate":"2021-10-29"},{"lineNumber":9,"author":{"gitId":"Kureans"},"content":"public class HelpCommand extends Command {","lastModifiedDate":"2021-10-07"},{"lineNumber":10,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":11,"author":{"gitId":"Kureans"},"content":"    private CommandType commandType \u003d null;","lastModifiedDate":"2021-10-18"},{"lineNumber":12,"author":{"gitId":"Kureans"},"content":"    private ViewType viewType \u003d null;","lastModifiedDate":"2021-10-22"},{"lineNumber":13,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":14,"author":{"gitId":"Kureans"},"content":"    public HelpCommand(ViewType viewType) {","lastModifiedDate":"2021-10-22"},{"lineNumber":15,"author":{"gitId":"Kureans"},"content":"        this.viewType \u003d viewType;","lastModifiedDate":"2021-10-22"},{"lineNumber":16,"author":{"gitId":"Kureans"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":17,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":18,"author":{"gitId":"Kureans"},"content":"    public HelpCommand(ViewType viewType, CommandType commandType) {","lastModifiedDate":"2021-10-25"},{"lineNumber":19,"author":{"gitId":"Kureans"},"content":"        this.viewType \u003d viewType;","lastModifiedDate":"2021-10-22"},{"lineNumber":20,"author":{"gitId":"Kureans"},"content":"        this.commandType \u003d commandType;","lastModifiedDate":"2021-10-25"},{"lineNumber":21,"author":{"gitId":"Kureans"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":22,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":23,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":24,"author":{"gitId":"Kureans"},"content":"    @Override","lastModifiedDate":"2021-10-07"},{"lineNumber":25,"author":{"gitId":"Kureans"},"content":"    public void execute(Scheduler scheduler, Ui ui) throws MedBotException {","lastModifiedDate":"2021-10-22"},{"lineNumber":26,"author":{"gitId":"Kureans"},"content":"        String output;","lastModifiedDate":"2021-10-07"},{"lineNumber":27,"author":{"gitId":"Kureans"},"content":"        if (commandType \u003d\u003d null) {","lastModifiedDate":"2021-10-18"},{"lineNumber":28,"author":{"gitId":"Kureans"},"content":"            output \u003d Ui.getCommandList(viewType);","lastModifiedDate":"2021-10-25"},{"lineNumber":29,"author":{"gitId":"Kureans"},"content":"            ui.printOutput(output);","lastModifiedDate":"2021-10-18"},{"lineNumber":30,"author":{"gitId":"Kureans"},"content":"            return;","lastModifiedDate":"2021-10-18"},{"lineNumber":31,"author":{"gitId":"Kureans"},"content":"        }","lastModifiedDate":"2021-10-18"},{"lineNumber":32,"author":{"gitId":"Kureans"},"content":"        switch (commandType) {","lastModifiedDate":"2021-10-18"},{"lineNumber":33,"author":{"gitId":"Kureans"},"content":"        case ADD:","lastModifiedDate":"2021-10-22"},{"lineNumber":34,"author":{"gitId":"Kureans"},"content":"            output \u003d ui.getAddHelpMessage(viewType);","lastModifiedDate":"2021-10-22"},{"lineNumber":35,"author":{"gitId":"Kureans"},"content":"            break;","lastModifiedDate":"2021-10-18"},{"lineNumber":36,"author":{"gitId":"Kureans"},"content":"        case DELETE:","lastModifiedDate":"2021-10-22"},{"lineNumber":37,"author":{"gitId":"Kureans"},"content":"            output \u003d ui.getDeleteHelpMessage(viewType);","lastModifiedDate":"2021-10-22"},{"lineNumber":38,"author":{"gitId":"Kureans"},"content":"            break;","lastModifiedDate":"2021-10-18"},{"lineNumber":39,"author":{"gitId":"Kureans"},"content":"        case EDIT:","lastModifiedDate":"2021-10-22"},{"lineNumber":40,"author":{"gitId":"Kureans"},"content":"            output \u003d ui.getEditHelpMessage(viewType);","lastModifiedDate":"2021-10-22"},{"lineNumber":41,"author":{"gitId":"Kureans"},"content":"            break;","lastModifiedDate":"2021-10-18"},{"lineNumber":42,"author":{"gitId":"Kureans"},"content":"        case LIST:","lastModifiedDate":"2021-10-22"},{"lineNumber":43,"author":{"gitId":"Kureans"},"content":"            output \u003d ui.getListHelpMessage(viewType);","lastModifiedDate":"2021-10-22"},{"lineNumber":44,"author":{"gitId":"Kureans"},"content":"            break;","lastModifiedDate":"2021-10-18"},{"lineNumber":45,"author":{"gitId":"Kureans"},"content":"        case FIND:","lastModifiedDate":"2021-10-22"},{"lineNumber":46,"author":{"gitId":"Kureans"},"content":"            output \u003d ui.getFindHelpMessage(viewType);","lastModifiedDate":"2021-10-22"},{"lineNumber":47,"author":{"gitId":"Kureans"},"content":"            break;","lastModifiedDate":"2021-10-18"},{"lineNumber":48,"author":{"gitId":"Kureans"},"content":"        case VIEW:","lastModifiedDate":"2021-10-22"},{"lineNumber":49,"author":{"gitId":"Kureans"},"content":"            output \u003d ui.getViewHelpMessage(viewType);","lastModifiedDate":"2021-10-22"},{"lineNumber":50,"author":{"gitId":"Kureans"},"content":"            break;","lastModifiedDate":"2021-10-18"},{"lineNumber":51,"author":{"gitId":"Kureans"},"content":"        case SWITCH:","lastModifiedDate":"2021-10-22"},{"lineNumber":52,"author":{"gitId":"Kureans"},"content":"            output \u003d ui.getSwitchHelpMessage();","lastModifiedDate":"2021-10-22"},{"lineNumber":53,"author":{"gitId":"Kureans"},"content":"            break;","lastModifiedDate":"2021-10-19"},{"lineNumber":54,"author":{"gitId":"Kureans"},"content":"        case HIDE:","lastModifiedDate":"2021-11-02"},{"lineNumber":55,"author":{"gitId":"Kureans"},"content":"            output \u003d ui.getHideHelpMessage(viewType);","lastModifiedDate":"2021-11-02"},{"lineNumber":56,"author":{"gitId":"Kureans"},"content":"            break;","lastModifiedDate":"2021-10-25"},{"lineNumber":57,"author":{"gitId":"Kureans"},"content":"        case SHOW:","lastModifiedDate":"2021-11-02"},{"lineNumber":58,"author":{"gitId":"Kureans"},"content":"            output \u003d ui.getShowHelpMessage(viewType);","lastModifiedDate":"2021-11-02"},{"lineNumber":59,"author":{"gitId":"Kureans"},"content":"            break;","lastModifiedDate":"2021-10-25"},{"lineNumber":60,"author":{"gitId":"Kureans"},"content":"        case EXIT:","lastModifiedDate":"2021-10-22"},{"lineNumber":61,"author":{"gitId":"Kureans"},"content":"            output \u003d ui.getExitHelpMessage();","lastModifiedDate":"2021-10-22"},{"lineNumber":62,"author":{"gitId":"Kureans"},"content":"            break;","lastModifiedDate":"2021-10-18"},{"lineNumber":63,"author":{"gitId":"Kureans"},"content":"        case GET_VIEW:","lastModifiedDate":"2021-10-26"},{"lineNumber":64,"author":{"gitId":"Kureans"},"content":"            output \u003d ui.getGetCurrentViewHelpMessage();","lastModifiedDate":"2021-10-26"},{"lineNumber":65,"author":{"gitId":"Kureans"},"content":"            break;","lastModifiedDate":"2021-10-26"},{"lineNumber":66,"author":{"gitId":"Kureans"},"content":"        default:","lastModifiedDate":"2021-10-18"},{"lineNumber":67,"author":{"gitId":"Kureans"},"content":"            output \u003d Ui.getCommandList(viewType);","lastModifiedDate":"2021-10-25"},{"lineNumber":68,"author":{"gitId":"Kureans"},"content":"            break;","lastModifiedDate":"2021-10-18"},{"lineNumber":69,"author":{"gitId":"Kureans"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":70,"author":{"gitId":"Kureans"},"content":"        ui.printOutput(output);","lastModifiedDate":"2021-10-07"},{"lineNumber":71,"author":{"gitId":"Kureans"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":72,"author":{"gitId":"Kureans"},"content":"}","lastModifiedDate":"2021-10-07"}],"authorContributionMap":{"justinfidelis":1,"jushg":3,"Kureans":68}},{"path":"src/main/java/medbot/command/SwitchCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Kureans"},"content":"package medbot.command;","lastModifiedDate":"2021-10-16"},{"lineNumber":2,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":3,"author":{"gitId":"justinfidelis"},"content":"import medbot.parser.Parser;","lastModifiedDate":"2021-10-22"},{"lineNumber":4,"author":{"gitId":"justinfidelis"},"content":"import medbot.Scheduler;","lastModifiedDate":"2021-10-20"},{"lineNumber":5,"author":{"gitId":"jushg"},"content":"import medbot.ui.Ui;","lastModifiedDate":"2021-10-22"},{"lineNumber":6,"author":{"gitId":"justinfidelis"},"content":"import medbot.utilities.ViewType;","lastModifiedDate":"2021-10-18"},{"lineNumber":7,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":8,"author":{"gitId":"Kureans"},"content":"//@@author Kureans","lastModifiedDate":"2021-10-29"},{"lineNumber":9,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":10,"author":{"gitId":"Kureans"},"content":"public class SwitchCommand extends Command {","lastModifiedDate":"2021-10-16"},{"lineNumber":11,"author":{"gitId":"Kureans"},"content":"    private ViewType newViewType \u003d null;","lastModifiedDate":"2021-10-18"},{"lineNumber":12,"author":{"gitId":"Kureans"},"content":"    private boolean isChanged \u003d false;","lastModifiedDate":"2021-11-02"},{"lineNumber":13,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":14,"author":{"gitId":"Kureans"},"content":"    public SwitchCommand(ViewType viewType, boolean isChanged) {","lastModifiedDate":"2021-11-02"},{"lineNumber":15,"author":{"gitId":"Kureans"},"content":"        newViewType \u003d viewType;","lastModifiedDate":"2021-10-18"},{"lineNumber":16,"author":{"gitId":"Kureans"},"content":"        this.isChanged \u003d isChanged;","lastModifiedDate":"2021-11-02"},{"lineNumber":17,"author":{"gitId":"Kureans"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":18,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":19,"author":{"gitId":"Kureans"},"content":"    @Override","lastModifiedDate":"2021-10-16"},{"lineNumber":20,"author":{"gitId":"Kureans"},"content":"    public void execute(Scheduler scheduler, Ui ui) {","lastModifiedDate":"2021-10-20"},{"lineNumber":21,"author":{"gitId":"Kureans"},"content":"        if (isChanged) {","lastModifiedDate":"2021-11-02"},{"lineNumber":22,"author":{"gitId":"Kureans"},"content":"            Parser.setViewType(newViewType);","lastModifiedDate":"2021-10-20"},{"lineNumber":23,"author":{"gitId":"Kureans"},"content":"            Ui.clearConsoleFromIde();","lastModifiedDate":"2021-11-02"},{"lineNumber":24,"author":{"gitId":"Kureans"},"content":"            ui.printSwitchedViewMessage(newViewType);","lastModifiedDate":"2021-10-20"},{"lineNumber":25,"author":{"gitId":"Kureans"},"content":"        } else {","lastModifiedDate":"2021-11-02"},{"lineNumber":26,"author":{"gitId":"Kureans"},"content":"            ui.printUnchangedViewMessage(newViewType);","lastModifiedDate":"2021-11-02"},{"lineNumber":27,"author":{"gitId":"Kureans"},"content":"        }","lastModifiedDate":"2021-11-02"},{"lineNumber":28,"author":{"gitId":"Kureans"},"content":"    }","lastModifiedDate":"2021-10-16"},{"lineNumber":29,"author":{"gitId":"Kureans"},"content":"}","lastModifiedDate":"2021-10-16"}],"authorContributionMap":{"justinfidelis":3,"jushg":1,"Kureans":25}},{"path":"src/main/java/medbot/command/appointmentcommand/AddAppointmentCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"justinfidelis"},"content":"package medbot.command.appointmentcommand;","lastModifiedDate":"2021-10-21"},{"lineNumber":2,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":3,"author":{"gitId":"justinfidelis"},"content":"import medbot.Appointment;","lastModifiedDate":"2021-10-21"},{"lineNumber":4,"author":{"gitId":"justinfidelis"},"content":"import medbot.Scheduler;","lastModifiedDate":"2021-10-21"},{"lineNumber":5,"author":{"gitId":"jushg"},"content":"import medbot.ui.Ui;","lastModifiedDate":"2021-10-22"},{"lineNumber":6,"author":{"gitId":"justinfidelis"},"content":"import medbot.command.Command;","lastModifiedDate":"2021-10-21"},{"lineNumber":7,"author":{"gitId":"justinfidelis"},"content":"import medbot.exceptions.MedBotException;","lastModifiedDate":"2021-10-21"},{"lineNumber":8,"author":{"gitId":"justinfidelis"},"content":"import medbot.utilities.ViewType;","lastModifiedDate":"2021-11-02"},{"lineNumber":9,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":10,"author":{"gitId":"justinfidelis"},"content":"public class AddAppointmentCommand extends Command {","lastModifiedDate":"2021-10-21"},{"lineNumber":11,"author":{"gitId":"justinfidelis"},"content":"    Appointment appointment \u003d null;","lastModifiedDate":"2021-10-21"},{"lineNumber":12,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":13,"author":{"gitId":"justinfidelis"},"content":"    public AddAppointmentCommand(Appointment appointment) {","lastModifiedDate":"2021-10-21"},{"lineNumber":14,"author":{"gitId":"justinfidelis"},"content":"        this.appointment \u003d appointment;","lastModifiedDate":"2021-10-21"},{"lineNumber":15,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":16,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":17,"author":{"gitId":"justinfidelis"},"content":"    @Override","lastModifiedDate":"2021-10-21"},{"lineNumber":18,"author":{"gitId":"justinfidelis"},"content":"    public void execute(Scheduler scheduler, Ui ui) throws MedBotException {","lastModifiedDate":"2021-10-21"},{"lineNumber":19,"author":{"gitId":"justinfidelis"},"content":"        scheduler.addAppointment(appointment);","lastModifiedDate":"2021-10-21"},{"lineNumber":20,"author":{"gitId":"justinfidelis"},"content":"        String addAppointmentMessage \u003d Ui.getAddMessage(appointment.toString(), ViewType.SCHEDULER);","lastModifiedDate":"2021-11-07"},{"lineNumber":21,"author":{"gitId":"justinfidelis"},"content":"        ui.printOutput(addAppointmentMessage);","lastModifiedDate":"2021-11-02"},{"lineNumber":22,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":23,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":24,"author":{"gitId":"justinfidelis"},"content":"}","lastModifiedDate":"2021-10-21"}],"authorContributionMap":{"justinfidelis":23,"jushg":1}},{"path":"src/main/java/medbot/command/appointmentcommand/DeleteAppointmentCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"justinfidelis"},"content":"package medbot.command.appointmentcommand;","lastModifiedDate":"2021-10-21"},{"lineNumber":2,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":3,"author":{"gitId":"justinfidelis"},"content":"import medbot.Scheduler;","lastModifiedDate":"2021-10-21"},{"lineNumber":4,"author":{"gitId":"justinfidelis"},"content":"import medbot.ui.SchedulerUi;","lastModifiedDate":"2021-11-08"},{"lineNumber":5,"author":{"gitId":"jushg"},"content":"import medbot.ui.Ui;","lastModifiedDate":"2021-10-22"},{"lineNumber":6,"author":{"gitId":"justinfidelis"},"content":"import medbot.command.Command;","lastModifiedDate":"2021-10-21"},{"lineNumber":7,"author":{"gitId":"justinfidelis"},"content":"import medbot.exceptions.MedBotException;","lastModifiedDate":"2021-10-21"},{"lineNumber":8,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":9,"author":{"gitId":"justinfidelis"},"content":"public class DeleteAppointmentCommand extends Command {","lastModifiedDate":"2021-10-21"},{"lineNumber":10,"author":{"gitId":"justinfidelis"},"content":"    int appointmentId \u003d 0;","lastModifiedDate":"2021-10-21"},{"lineNumber":11,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":12,"author":{"gitId":"justinfidelis"},"content":"    public DeleteAppointmentCommand(int appointmentId) {","lastModifiedDate":"2021-10-21"},{"lineNumber":13,"author":{"gitId":"justinfidelis"},"content":"        this.appointmentId \u003d appointmentId;","lastModifiedDate":"2021-10-21"},{"lineNumber":14,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":15,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":16,"author":{"gitId":"justinfidelis"},"content":"    @Override","lastModifiedDate":"2021-10-21"},{"lineNumber":17,"author":{"gitId":"justinfidelis"},"content":"    public void execute(Scheduler scheduler, Ui ui) throws MedBotException {","lastModifiedDate":"2021-10-21"},{"lineNumber":18,"author":{"gitId":"justinfidelis"},"content":"        scheduler.deleteAppointment(appointmentId);","lastModifiedDate":"2021-10-21"},{"lineNumber":19,"author":{"gitId":"justinfidelis"},"content":"        String deleteAppointmentMessage \u003d SchedulerUi.getDeleteAppointmentMessage(appointmentId);","lastModifiedDate":"2021-11-08"},{"lineNumber":20,"author":{"gitId":"justinfidelis"},"content":"        ui.printOutput(deleteAppointmentMessage);","lastModifiedDate":"2021-11-08"},{"lineNumber":21,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":22,"author":{"gitId":"justinfidelis"},"content":"}","lastModifiedDate":"2021-10-21"}],"authorContributionMap":{"justinfidelis":21,"jushg":1}},{"path":"src/main/java/medbot/command/appointmentcommand/EditAppointmentCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"justinfidelis"},"content":"package medbot.command.appointmentcommand;","lastModifiedDate":"2021-10-21"},{"lineNumber":2,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":3,"author":{"gitId":"justinfidelis"},"content":"import medbot.Appointment;","lastModifiedDate":"2021-10-21"},{"lineNumber":4,"author":{"gitId":"justinfidelis"},"content":"import medbot.Scheduler;","lastModifiedDate":"2021-10-21"},{"lineNumber":5,"author":{"gitId":"jushg"},"content":"import medbot.ui.Ui;","lastModifiedDate":"2021-10-22"},{"lineNumber":6,"author":{"gitId":"justinfidelis"},"content":"import medbot.command.Command;","lastModifiedDate":"2021-10-21"},{"lineNumber":7,"author":{"gitId":"justinfidelis"},"content":"import medbot.exceptions.MedBotException;","lastModifiedDate":"2021-10-21"},{"lineNumber":8,"author":{"gitId":"justinfidelis"},"content":"import medbot.utilities.ViewType;","lastModifiedDate":"2021-11-07"},{"lineNumber":9,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":10,"author":{"gitId":"justinfidelis"},"content":"public class EditAppointmentCommand extends Command {","lastModifiedDate":"2021-10-21"},{"lineNumber":11,"author":{"gitId":"justinfidelis"},"content":"    int appointmentId \u003d 0;","lastModifiedDate":"2021-10-21"},{"lineNumber":12,"author":{"gitId":"justinfidelis"},"content":"    Appointment appointment \u003d null;","lastModifiedDate":"2021-10-21"},{"lineNumber":13,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":14,"author":{"gitId":"justinfidelis"},"content":"    public EditAppointmentCommand(int appointmentId, Appointment appointment) {","lastModifiedDate":"2021-10-21"},{"lineNumber":15,"author":{"gitId":"justinfidelis"},"content":"        this.appointmentId \u003d appointmentId;","lastModifiedDate":"2021-10-21"},{"lineNumber":16,"author":{"gitId":"justinfidelis"},"content":"        this.appointment \u003d appointment;","lastModifiedDate":"2021-10-21"},{"lineNumber":17,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":18,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":19,"author":{"gitId":"justinfidelis"},"content":"    @Override","lastModifiedDate":"2021-10-21"},{"lineNumber":20,"author":{"gitId":"justinfidelis"},"content":"    public void execute(Scheduler scheduler, Ui ui) throws MedBotException {","lastModifiedDate":"2021-10-21"},{"lineNumber":21,"author":{"gitId":"justinfidelis"},"content":"        scheduler.editAppointment(appointmentId, appointment);","lastModifiedDate":"2021-10-24"},{"lineNumber":22,"author":{"gitId":"justinfidelis"},"content":"        Appointment editedAppointment \u003d scheduler.getAppointment(appointmentId);","lastModifiedDate":"2021-10-24"},{"lineNumber":23,"author":{"gitId":"justinfidelis"},"content":"        String editAppointmentMessage \u003d Ui.getEditMessage(editedAppointment.getId(), editedAppointment.toString(),","lastModifiedDate":"2021-11-07"},{"lineNumber":24,"author":{"gitId":"justinfidelis"},"content":"                ViewType.SCHEDULER);","lastModifiedDate":"2021-11-07"},{"lineNumber":25,"author":{"gitId":"justinfidelis"},"content":"        ui.printOutput(editAppointmentMessage);","lastModifiedDate":"2021-11-07"},{"lineNumber":26,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":27,"author":{"gitId":"justinfidelis"},"content":"}","lastModifiedDate":"2021-10-21"}],"authorContributionMap":{"justinfidelis":26,"jushg":1}},{"path":"src/main/java/medbot/command/appointmentcommand/FindAppointmentCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Kureans"},"content":"package medbot.command.appointmentcommand;","lastModifiedDate":"2021-10-25"},{"lineNumber":2,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":3,"author":{"gitId":"Kureans"},"content":"import medbot.Scheduler;","lastModifiedDate":"2021-10-25"},{"lineNumber":4,"author":{"gitId":"Kureans"},"content":"import medbot.command.Command;","lastModifiedDate":"2021-10-25"},{"lineNumber":5,"author":{"gitId":"Kureans"},"content":"import medbot.exceptions.MedBotException;","lastModifiedDate":"2021-10-25"},{"lineNumber":6,"author":{"gitId":"Kureans"},"content":"import medbot.person.PersonType;","lastModifiedDate":"2021-10-25"},{"lineNumber":7,"author":{"gitId":"justinfidelis"},"content":"import medbot.ui.SchedulerUi;","lastModifiedDate":"2021-10-26"},{"lineNumber":8,"author":{"gitId":"Kureans"},"content":"import medbot.ui.Ui;","lastModifiedDate":"2021-10-25"},{"lineNumber":9,"author":{"gitId":"Kureans"},"content":"import medbot.utilities.FilterType;","lastModifiedDate":"2021-10-25"},{"lineNumber":10,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":11,"author":{"gitId":"Kureans"},"content":"public class FindAppointmentCommand extends Command {","lastModifiedDate":"2021-10-25"},{"lineNumber":12,"author":{"gitId":"Kureans"},"content":"    protected int personId \u003d 0;","lastModifiedDate":"2021-10-25"},{"lineNumber":13,"author":{"gitId":"Kureans"},"content":"    protected PersonType personType;","lastModifiedDate":"2021-10-25"},{"lineNumber":14,"author":{"gitId":"Kureans"},"content":"    protected FilterType filterType;","lastModifiedDate":"2021-10-25"},{"lineNumber":15,"author":{"gitId":"Kureans"},"content":"    protected int dateTimeCode;","lastModifiedDate":"2021-10-25"},{"lineNumber":16,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":17,"author":{"gitId":"Kureans"},"content":"    private static final String ERROR_PERSON_TYPE_INVALID \u003d \"Person type specified is not valid.\";","lastModifiedDate":"2021-11-07"},{"lineNumber":18,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":19,"author":{"gitId":"Kureans"},"content":"    public FindAppointmentCommand(int personId, PersonType personType, FilterType filterType, int dateTimeCode) {","lastModifiedDate":"2021-10-25"},{"lineNumber":20,"author":{"gitId":"Kureans"},"content":"        this.personId \u003d personId;","lastModifiedDate":"2021-10-25"},{"lineNumber":21,"author":{"gitId":"Kureans"},"content":"        this.personType \u003d personType;","lastModifiedDate":"2021-10-25"},{"lineNumber":22,"author":{"gitId":"Kureans"},"content":"        this.filterType \u003d filterType;","lastModifiedDate":"2021-10-25"},{"lineNumber":23,"author":{"gitId":"Kureans"},"content":"        this.dateTimeCode \u003d dateTimeCode;","lastModifiedDate":"2021-10-25"},{"lineNumber":24,"author":{"gitId":"Kureans"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":25,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":26,"author":{"gitId":"Kureans"},"content":"    @Override","lastModifiedDate":"2021-10-25"},{"lineNumber":27,"author":{"gitId":"Kureans"},"content":"    public void execute(Scheduler scheduler, Ui ui) throws MedBotException {","lastModifiedDate":"2021-10-25"},{"lineNumber":28,"author":{"gitId":"Kureans"},"content":"        String output;","lastModifiedDate":"2021-11-07"},{"lineNumber":29,"author":{"gitId":"Kureans"},"content":"        switch (personType) {","lastModifiedDate":"2021-10-25"},{"lineNumber":30,"author":{"gitId":"Kureans"},"content":"        case PATIENT:","lastModifiedDate":"2021-10-25"},{"lineNumber":31,"author":{"gitId":"Kureans"},"content":"            output \u003d scheduler.listPatientAppointments(personId, filterType, dateTimeCode);","lastModifiedDate":"2021-10-25"},{"lineNumber":32,"author":{"gitId":"Kureans"},"content":"            break;","lastModifiedDate":"2021-10-25"},{"lineNumber":33,"author":{"gitId":"Kureans"},"content":"        case STAFF:","lastModifiedDate":"2021-10-25"},{"lineNumber":34,"author":{"gitId":"Kureans"},"content":"            output \u003d scheduler.listMedicalStaffAppointments(personId, filterType, dateTimeCode);","lastModifiedDate":"2021-10-25"},{"lineNumber":35,"author":{"gitId":"Kureans"},"content":"            break;","lastModifiedDate":"2021-10-25"},{"lineNumber":36,"author":{"gitId":"Kureans"},"content":"        default:","lastModifiedDate":"2021-11-07"},{"lineNumber":37,"author":{"gitId":"Kureans"},"content":"            throw new MedBotException(ERROR_PERSON_TYPE_INVALID);","lastModifiedDate":"2021-11-07"},{"lineNumber":38,"author":{"gitId":"Kureans"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":39,"author":{"gitId":"Kureans"},"content":"        if (output.isEmpty()) {","lastModifiedDate":"2021-10-25"},{"lineNumber":40,"author":{"gitId":"justinfidelis"},"content":"            output \u003d SchedulerUi.getNoAppointmentsFoundMessage();","lastModifiedDate":"2021-10-26"},{"lineNumber":41,"author":{"gitId":"justinfidelis"},"content":"        } else {","lastModifiedDate":"2021-10-26"},{"lineNumber":42,"author":{"gitId":"justinfidelis"},"content":"            output \u003d SchedulerUi.getFindAppointmentListMessage(output);","lastModifiedDate":"2021-10-26"},{"lineNumber":43,"author":{"gitId":"Kureans"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":44,"author":{"gitId":"Kureans"},"content":"        ui.printOutput(output);","lastModifiedDate":"2021-10-25"},{"lineNumber":45,"author":{"gitId":"Kureans"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":46,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":47,"author":{"gitId":"Kureans"},"content":"}","lastModifiedDate":"2021-10-25"}],"authorContributionMap":{"justinfidelis":4,"Kureans":43}},{"path":"src/main/java/medbot/command/appointmentcommand/ListAppointmentCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"justinfidelis"},"content":"package medbot.command.appointmentcommand;","lastModifiedDate":"2021-10-21"},{"lineNumber":2,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":3,"author":{"gitId":"justinfidelis"},"content":"import medbot.Scheduler;","lastModifiedDate":"2021-10-21"},{"lineNumber":4,"author":{"gitId":"justinfidelis"},"content":"import medbot.ui.SchedulerUi;","lastModifiedDate":"2021-10-26"},{"lineNumber":5,"author":{"gitId":"jushg"},"content":"import medbot.ui.Ui;","lastModifiedDate":"2021-10-22"},{"lineNumber":6,"author":{"gitId":"justinfidelis"},"content":"import medbot.command.Command;","lastModifiedDate":"2021-10-21"},{"lineNumber":7,"author":{"gitId":"justinfidelis"},"content":"import medbot.exceptions.MedBotException;","lastModifiedDate":"2021-10-21"},{"lineNumber":8,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":9,"author":{"gitId":"justinfidelis"},"content":"public class ListAppointmentCommand extends Command {","lastModifiedDate":"2021-10-21"},{"lineNumber":10,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":11,"author":{"gitId":"justinfidelis"},"content":"    @Override","lastModifiedDate":"2021-10-21"},{"lineNumber":12,"author":{"gitId":"justinfidelis"},"content":"    public void execute(Scheduler scheduler, Ui ui) throws MedBotException {","lastModifiedDate":"2021-10-21"},{"lineNumber":13,"author":{"gitId":"justinfidelis"},"content":"        String output \u003d scheduler.listAllAppointments();","lastModifiedDate":"2021-10-24"},{"lineNumber":14,"author":{"gitId":"justinfidelis"},"content":"        if (output.isEmpty()) {","lastModifiedDate":"2021-10-26"},{"lineNumber":15,"author":{"gitId":"justinfidelis"},"content":"            output \u003d SchedulerUi.getNoAppointmentsMessage();","lastModifiedDate":"2021-10-26"},{"lineNumber":16,"author":{"gitId":"justinfidelis"},"content":"        } else {","lastModifiedDate":"2021-10-26"},{"lineNumber":17,"author":{"gitId":"justinfidelis"},"content":"            output \u003d SchedulerUi.getListAppointmentListMessage(output);","lastModifiedDate":"2021-10-26"},{"lineNumber":18,"author":{"gitId":"justinfidelis"},"content":"        }","lastModifiedDate":"2021-10-26"},{"lineNumber":19,"author":{"gitId":"justinfidelis"},"content":"        ui.printOutput(output);","lastModifiedDate":"2021-10-21"},{"lineNumber":20,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":21,"author":{"gitId":"justinfidelis"},"content":"}","lastModifiedDate":"2021-10-21"}],"authorContributionMap":{"justinfidelis":20,"jushg":1}},{"path":"src/main/java/medbot/command/appointmentcommand/ViewAppointmentCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Kureans"},"content":"package medbot.command.appointmentcommand;","lastModifiedDate":"2021-10-22"},{"lineNumber":2,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":3,"author":{"gitId":"Kureans"},"content":"import medbot.Scheduler;","lastModifiedDate":"2021-10-22"},{"lineNumber":4,"author":{"gitId":"jushg"},"content":"import medbot.ui.Ui;","lastModifiedDate":"2021-10-22"},{"lineNumber":5,"author":{"gitId":"Kureans"},"content":"import medbot.command.Command;","lastModifiedDate":"2021-10-22"},{"lineNumber":6,"author":{"gitId":"Kureans"},"content":"import medbot.exceptions.MedBotException;","lastModifiedDate":"2021-10-22"},{"lineNumber":7,"author":{"gitId":"justinfidelis"},"content":"import medbot.utilities.ViewType;","lastModifiedDate":"2021-11-07"},{"lineNumber":8,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":9,"author":{"gitId":"Kureans"},"content":"public class ViewAppointmentCommand extends Command {","lastModifiedDate":"2021-10-22"},{"lineNumber":10,"author":{"gitId":"Kureans"},"content":"    protected int appointmentId;","lastModifiedDate":"2021-10-25"},{"lineNumber":11,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":12,"author":{"gitId":"Kureans"},"content":"    public ViewAppointmentCommand(int appointmentId) {","lastModifiedDate":"2021-10-25"},{"lineNumber":13,"author":{"gitId":"Kureans"},"content":"        this.appointmentId \u003d appointmentId;","lastModifiedDate":"2021-10-25"},{"lineNumber":14,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":15,"author":{"gitId":"Kureans"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":16,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":17,"author":{"gitId":"Kureans"},"content":"    @Override","lastModifiedDate":"2021-10-22"},{"lineNumber":18,"author":{"gitId":"Kureans"},"content":"    public void execute(Scheduler scheduler, Ui ui) throws MedBotException {","lastModifiedDate":"2021-10-22"},{"lineNumber":19,"author":{"gitId":"justinfidelis"},"content":"        String appointmentInfo \u003d scheduler.getAppointment(appointmentId).toString();","lastModifiedDate":"2021-11-07"},{"lineNumber":20,"author":{"gitId":"justinfidelis"},"content":"        String viewAppointmentMessage \u003d Ui.getViewMessage(appointmentInfo, ViewType.SCHEDULER);","lastModifiedDate":"2021-11-07"},{"lineNumber":21,"author":{"gitId":"justinfidelis"},"content":"        ui.printOutput(viewAppointmentMessage);","lastModifiedDate":"2021-11-07"},{"lineNumber":22,"author":{"gitId":"Kureans"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":23,"author":{"gitId":"Kureans"},"content":"}","lastModifiedDate":"2021-10-22"}],"authorContributionMap":{"justinfidelis":4,"jushg":1,"Kureans":18}},{"path":"src/main/java/medbot/command/personcommand/AddPersonCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"justinfidelis"},"content":"package medbot.command.personcommand;","lastModifiedDate":"2021-10-20"},{"lineNumber":2,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":3,"author":{"gitId":"justinfidelis"},"content":"import medbot.command.Command;","lastModifiedDate":"2021-10-20"},{"lineNumber":4,"author":{"gitId":"jushg"},"content":"import medbot.person.Person;","lastModifiedDate":"2021-10-18"},{"lineNumber":5,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":6,"author":{"gitId":"justinfidelis"},"content":"public abstract class AddPersonCommand extends Command {","lastModifiedDate":"2021-10-20"},{"lineNumber":7,"author":{"gitId":"jushg"},"content":"    protected Person person;","lastModifiedDate":"2021-10-18"},{"lineNumber":8,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":9,"author":{"gitId":"justinfidelis"},"content":"    public AddPersonCommand(Person person) {","lastModifiedDate":"2021-10-20"},{"lineNumber":10,"author":{"gitId":"jushg"},"content":"        this.person \u003d person;","lastModifiedDate":"2021-10-18"},{"lineNumber":11,"author":{"gitId":"jushg"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":12,"author":{"gitId":"jushg"},"content":"}","lastModifiedDate":"2021-10-18"}],"authorContributionMap":{"justinfidelis":4,"jushg":8}},{"path":"src/main/java/medbot/command/personcommand/DeletePersonCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"justinfidelis"},"content":"package medbot.command.personcommand;","lastModifiedDate":"2021-10-20"},{"lineNumber":2,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":3,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":4,"author":{"gitId":"justinfidelis"},"content":"import medbot.command.Command;","lastModifiedDate":"2021-10-20"},{"lineNumber":5,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":6,"author":{"gitId":"justinfidelis"},"content":"public abstract class DeletePersonCommand extends Command {","lastModifiedDate":"2021-10-20"},{"lineNumber":7,"author":{"gitId":"jushg"},"content":"    protected int personId;","lastModifiedDate":"2021-10-18"},{"lineNumber":8,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":9,"author":{"gitId":"justinfidelis"},"content":"    public DeletePersonCommand(int personId) {","lastModifiedDate":"2021-10-20"},{"lineNumber":10,"author":{"gitId":"jushg"},"content":"        this.personId \u003d personId;","lastModifiedDate":"2021-10-18"},{"lineNumber":11,"author":{"gitId":"jushg"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":12,"author":{"gitId":"jushg"},"content":"}","lastModifiedDate":"2021-10-18"}],"authorContributionMap":{"justinfidelis":5,"jushg":7}},{"path":"src/main/java/medbot/command/personcommand/EditPersonCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"justinfidelis"},"content":"package medbot.command.personcommand;","lastModifiedDate":"2021-10-20"},{"lineNumber":2,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":3,"author":{"gitId":"justinfidelis"},"content":"import medbot.command.Command;","lastModifiedDate":"2021-10-20"},{"lineNumber":4,"author":{"gitId":"jushg"},"content":"import medbot.person.Person;","lastModifiedDate":"2021-10-18"},{"lineNumber":5,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":6,"author":{"gitId":"justinfidelis"},"content":"public abstract class EditPersonCommand extends Command {","lastModifiedDate":"2021-10-20"},{"lineNumber":7,"author":{"gitId":"jushg"},"content":"    protected int personId;","lastModifiedDate":"2021-10-18"},{"lineNumber":8,"author":{"gitId":"jushg"},"content":"    protected Person person;","lastModifiedDate":"2021-10-18"},{"lineNumber":9,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":10,"author":{"gitId":"justinfidelis"},"content":"    public EditPersonCommand(int personId, Person person) {","lastModifiedDate":"2021-10-20"},{"lineNumber":11,"author":{"gitId":"jushg"},"content":"        this.personId \u003d personId;","lastModifiedDate":"2021-10-18"},{"lineNumber":12,"author":{"gitId":"jushg"},"content":"        this.person \u003d person;","lastModifiedDate":"2021-10-18"},{"lineNumber":13,"author":{"gitId":"jushg"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":14,"author":{"gitId":"jushg"},"content":"}","lastModifiedDate":"2021-10-18"}],"authorContributionMap":{"justinfidelis":4,"jushg":10}},{"path":"src/main/java/medbot/command/personcommand/FindPersonCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"justinfidelis"},"content":"package medbot.command.personcommand;","lastModifiedDate":"2021-10-20"},{"lineNumber":2,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":3,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":4,"author":{"gitId":"justinfidelis"},"content":"import medbot.command.Command;","lastModifiedDate":"2021-10-20"},{"lineNumber":5,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":6,"author":{"gitId":"justinfidelis"},"content":"public abstract class FindPersonCommand extends Command {","lastModifiedDate":"2021-10-20"},{"lineNumber":7,"author":{"gitId":"EricBryann"},"content":"    protected String[] parameters;","lastModifiedDate":"2021-10-19"},{"lineNumber":8,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":9,"author":{"gitId":"justinfidelis"},"content":"    public FindPersonCommand(String[] parameters) {","lastModifiedDate":"2021-10-20"},{"lineNumber":10,"author":{"gitId":"EricBryann"},"content":"        this.parameters \u003d parameters;","lastModifiedDate":"2021-10-19"},{"lineNumber":11,"author":{"gitId":"EricBryann"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":12,"author":{"gitId":"EricBryann"},"content":"}","lastModifiedDate":"2021-10-19"}],"authorContributionMap":{"justinfidelis":5,"EricBryann":7}},{"path":"src/main/java/medbot/command/personcommand/HidePersonCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"EricBryann"},"content":"package medbot.command.personcommand;","lastModifiedDate":"2021-10-25"},{"lineNumber":2,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":3,"author":{"gitId":"EricBryann"},"content":"import medbot.command.Command;","lastModifiedDate":"2021-10-25"},{"lineNumber":4,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":5,"author":{"gitId":"EricBryann"},"content":"public abstract class HidePersonCommand extends Command {","lastModifiedDate":"2021-11-02"},{"lineNumber":6,"author":{"gitId":"EricBryann"},"content":"    protected int personId;","lastModifiedDate":"2021-10-25"},{"lineNumber":7,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":8,"author":{"gitId":"EricBryann"},"content":"    public HidePersonCommand(int personId) {","lastModifiedDate":"2021-11-02"},{"lineNumber":9,"author":{"gitId":"EricBryann"},"content":"        this.personId \u003d personId;","lastModifiedDate":"2021-10-25"},{"lineNumber":10,"author":{"gitId":"EricBryann"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":11,"author":{"gitId":"EricBryann"},"content":"}","lastModifiedDate":"2021-10-25"}],"authorContributionMap":{"EricBryann":11}},{"path":"src/main/java/medbot/command/personcommand/ListPersonCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"justinfidelis"},"content":"package medbot.command.personcommand;","lastModifiedDate":"2021-10-20"},{"lineNumber":2,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":3,"author":{"gitId":"justinfidelis"},"content":"import medbot.command.Command;","lastModifiedDate":"2021-10-20"},{"lineNumber":4,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":5,"author":{"gitId":"justinfidelis"},"content":"public abstract class ListPersonCommand extends Command {","lastModifiedDate":"2021-10-20"},{"lineNumber":6,"author":{"gitId":"EricBryann"},"content":"    private boolean getHidden;","lastModifiedDate":"2021-11-02"},{"lineNumber":7,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":8,"author":{"gitId":"EricBryann"},"content":"    public ListPersonCommand(boolean getHidden) {","lastModifiedDate":"2021-11-02"},{"lineNumber":9,"author":{"gitId":"EricBryann"},"content":"        this.getHidden \u003d getHidden;","lastModifiedDate":"2021-11-02"},{"lineNumber":10,"author":{"gitId":"EricBryann"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":11,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":12,"author":{"gitId":"EricBryann"},"content":"    public boolean getHidden() {","lastModifiedDate":"2021-11-02"},{"lineNumber":13,"author":{"gitId":"EricBryann"},"content":"        return getHidden;","lastModifiedDate":"2021-11-02"},{"lineNumber":14,"author":{"gitId":"EricBryann"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":15,"author":{"gitId":"justinfidelis"},"content":"}","lastModifiedDate":"2021-10-20"}],"authorContributionMap":{"justinfidelis":7,"EricBryann":8}},{"path":"src/main/java/medbot/command/personcommand/ShowPersonCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"EricBryann"},"content":"package medbot.command.personcommand;","lastModifiedDate":"2021-10-25"},{"lineNumber":2,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":3,"author":{"gitId":"EricBryann"},"content":"import medbot.command.Command;","lastModifiedDate":"2021-10-25"},{"lineNumber":4,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":5,"author":{"gitId":"EricBryann"},"content":"public abstract class ShowPersonCommand extends Command {","lastModifiedDate":"2021-11-02"},{"lineNumber":6,"author":{"gitId":"EricBryann"},"content":"    protected int personId;","lastModifiedDate":"2021-10-25"},{"lineNumber":7,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":8,"author":{"gitId":"EricBryann"},"content":"    public ShowPersonCommand(int personId) {","lastModifiedDate":"2021-11-02"},{"lineNumber":9,"author":{"gitId":"EricBryann"},"content":"        this.personId \u003d personId;","lastModifiedDate":"2021-10-25"},{"lineNumber":10,"author":{"gitId":"EricBryann"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":11,"author":{"gitId":"EricBryann"},"content":"}","lastModifiedDate":"2021-10-25"}],"authorContributionMap":{"EricBryann":11}},{"path":"src/main/java/medbot/command/personcommand/ViewPersonCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"justinfidelis"},"content":"package medbot.command.personcommand;","lastModifiedDate":"2021-10-20"},{"lineNumber":2,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":3,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":4,"author":{"gitId":"justinfidelis"},"content":"import medbot.command.Command;","lastModifiedDate":"2021-10-20"},{"lineNumber":5,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":6,"author":{"gitId":"justinfidelis"},"content":"public abstract class ViewPersonCommand extends Command {","lastModifiedDate":"2021-10-20"},{"lineNumber":7,"author":{"gitId":"jushg"},"content":"    protected int personId;","lastModifiedDate":"2021-11-07"},{"lineNumber":8,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":9,"author":{"gitId":"justinfidelis"},"content":"    public ViewPersonCommand(int personId) {","lastModifiedDate":"2021-10-20"},{"lineNumber":10,"author":{"gitId":"jushg"},"content":"        this.personId \u003d personId;","lastModifiedDate":"2021-10-18"},{"lineNumber":11,"author":{"gitId":"jushg"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":12,"author":{"gitId":"jushg"},"content":"}","lastModifiedDate":"2021-10-18"}],"authorContributionMap":{"justinfidelis":5,"jushg":7}},{"path":"src/main/java/medbot/command/personcommand/patientcommand/AddPatientCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"justinfidelis"},"content":"package medbot.command.personcommand.patientcommand;","lastModifiedDate":"2021-10-20"},{"lineNumber":2,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":3,"author":{"gitId":"justinfidelis"},"content":"import medbot.Scheduler;","lastModifiedDate":"2021-10-20"},{"lineNumber":4,"author":{"gitId":"justinfidelis"},"content":"import medbot.command.personcommand.AddPersonCommand;","lastModifiedDate":"2021-10-20"},{"lineNumber":5,"author":{"gitId":"jushg"},"content":"import medbot.ui.Ui;","lastModifiedDate":"2021-10-22"},{"lineNumber":6,"author":{"gitId":"justinfidelis"},"content":"import medbot.exceptions.MedBotException;","lastModifiedDate":"2021-10-20"},{"lineNumber":7,"author":{"gitId":"jushg"},"content":"import medbot.person.Patient;","lastModifiedDate":"2021-10-18"},{"lineNumber":8,"author":{"gitId":"jushg"},"content":"import medbot.utilities.ViewType;","lastModifiedDate":"2021-10-22"},{"lineNumber":9,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":10,"author":{"gitId":"justinfidelis"},"content":"public class AddPatientCommand extends AddPersonCommand {","lastModifiedDate":"2021-10-20"},{"lineNumber":11,"author":{"gitId":"jushg"},"content":"    public AddPatientCommand(Patient patient) {","lastModifiedDate":"2021-10-18"},{"lineNumber":12,"author":{"gitId":"jushg"},"content":"        super(patient);","lastModifiedDate":"2021-10-18"},{"lineNumber":13,"author":{"gitId":"jushg"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":14,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":15,"author":{"gitId":"jushg"},"content":"    @Override","lastModifiedDate":"2021-10-18"},{"lineNumber":16,"author":{"gitId":"justinfidelis"},"content":"    public void execute(Scheduler scheduler, Ui ui) throws MedBotException {","lastModifiedDate":"2021-10-20"},{"lineNumber":17,"author":{"gitId":"justinfidelis"},"content":"        scheduler.addPatient(person);","lastModifiedDate":"2021-11-02"},{"lineNumber":18,"author":{"gitId":"justinfidelis"},"content":"        String addPatientMessage \u003d Ui.getAddMessage(person.toString(), ViewType.PATIENT_INFO);","lastModifiedDate":"2021-11-07"},{"lineNumber":19,"author":{"gitId":"justinfidelis"},"content":"        ui.printOutput(addPatientMessage);","lastModifiedDate":"2021-10-20"},{"lineNumber":20,"author":{"gitId":"jushg"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":21,"author":{"gitId":"jushg"},"content":"}","lastModifiedDate":"2021-10-18"}],"authorContributionMap":{"justinfidelis":9,"jushg":12}},{"path":"src/main/java/medbot/command/personcommand/patientcommand/DeletePatientCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"justinfidelis"},"content":"package medbot.command.personcommand.patientcommand;","lastModifiedDate":"2021-10-20"},{"lineNumber":2,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":3,"author":{"gitId":"justinfidelis"},"content":"import medbot.Scheduler;","lastModifiedDate":"2021-10-20"},{"lineNumber":4,"author":{"gitId":"justinfidelis"},"content":"import medbot.command.personcommand.DeletePersonCommand;","lastModifiedDate":"2021-10-20"},{"lineNumber":5,"author":{"gitId":"jushg"},"content":"import medbot.exceptions.MedBotException;","lastModifiedDate":"2021-10-18"},{"lineNumber":6,"author":{"gitId":"jushg"},"content":"import medbot.ui.Ui;","lastModifiedDate":"2021-10-22"},{"lineNumber":7,"author":{"gitId":"jushg"},"content":"import medbot.utilities.ViewType;","lastModifiedDate":"2021-10-22"},{"lineNumber":8,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":9,"author":{"gitId":"justinfidelis"},"content":"public class DeletePatientCommand extends DeletePersonCommand {","lastModifiedDate":"2021-10-20"},{"lineNumber":10,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":11,"author":{"gitId":"jushg"},"content":"    public DeletePatientCommand(int patientId) {","lastModifiedDate":"2021-10-18"},{"lineNumber":12,"author":{"gitId":"jushg"},"content":"        super(patientId);","lastModifiedDate":"2021-10-18"},{"lineNumber":13,"author":{"gitId":"jushg"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":14,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":15,"author":{"gitId":"jushg"},"content":"    @Override","lastModifiedDate":"2021-10-18"},{"lineNumber":16,"author":{"gitId":"justinfidelis"},"content":"    public void execute(Scheduler scheduler, Ui ui) throws MedBotException {","lastModifiedDate":"2021-10-20"},{"lineNumber":17,"author":{"gitId":"justinfidelis"},"content":"        scheduler.deletePatient(personId);","lastModifiedDate":"2021-10-24"},{"lineNumber":18,"author":{"gitId":"jushg"},"content":"        String deletePatientMessage \u003d Ui.getDeleteMessage(personId, ViewType.PATIENT_INFO);","lastModifiedDate":"2021-10-22"},{"lineNumber":19,"author":{"gitId":"jushg"},"content":"        ui.printOutput(deletePatientMessage);","lastModifiedDate":"2021-10-18"},{"lineNumber":20,"author":{"gitId":"jushg"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":21,"author":{"gitId":"jushg"},"content":"}","lastModifiedDate":"2021-10-18"}],"authorContributionMap":{"justinfidelis":6,"jushg":15}},{"path":"src/main/java/medbot/command/personcommand/patientcommand/EditPatientCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"justinfidelis"},"content":"package medbot.command.personcommand.patientcommand;","lastModifiedDate":"2021-10-20"},{"lineNumber":2,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":3,"author":{"gitId":"justinfidelis"},"content":"import medbot.Scheduler;","lastModifiedDate":"2021-10-20"},{"lineNumber":4,"author":{"gitId":"justinfidelis"},"content":"import medbot.command.personcommand.EditPersonCommand;","lastModifiedDate":"2021-10-20"},{"lineNumber":5,"author":{"gitId":"jushg"},"content":"import medbot.exceptions.MedBotException;","lastModifiedDate":"2021-10-18"},{"lineNumber":6,"author":{"gitId":"jushg"},"content":"import medbot.ui.Ui;","lastModifiedDate":"2021-10-22"},{"lineNumber":7,"author":{"gitId":"jushg"},"content":"import medbot.person.Patient;","lastModifiedDate":"2021-10-18"},{"lineNumber":8,"author":{"gitId":"jushg"},"content":"import medbot.utilities.ViewType;","lastModifiedDate":"2021-10-22"},{"lineNumber":9,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":10,"author":{"gitId":"justinfidelis"},"content":"public class EditPatientCommand extends EditPersonCommand {","lastModifiedDate":"2021-10-20"},{"lineNumber":11,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":12,"author":{"gitId":"jushg"},"content":"    public EditPatientCommand(int patientId, Patient patient) {","lastModifiedDate":"2021-10-18"},{"lineNumber":13,"author":{"gitId":"jushg"},"content":"        super(patientId, patient);","lastModifiedDate":"2021-10-18"},{"lineNumber":14,"author":{"gitId":"jushg"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":15,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":16,"author":{"gitId":"jushg"},"content":"    @Override","lastModifiedDate":"2021-10-18"},{"lineNumber":17,"author":{"gitId":"justinfidelis"},"content":"    public void execute(Scheduler scheduler, Ui ui) throws MedBotException {","lastModifiedDate":"2021-10-20"},{"lineNumber":18,"author":{"gitId":"justinfidelis"},"content":"        scheduler.editPatient(personId, person);","lastModifiedDate":"2021-10-24"},{"lineNumber":19,"author":{"gitId":"justinfidelis"},"content":"        String patientInfo \u003d scheduler.getPatientInfo(personId);","lastModifiedDate":"2021-10-24"},{"lineNumber":20,"author":{"gitId":"jushg"},"content":"        String editPatientMessage \u003d Ui.getEditMessage(personId, patientInfo, ViewType.PATIENT_INFO);","lastModifiedDate":"2021-10-22"},{"lineNumber":21,"author":{"gitId":"jushg"},"content":"        ui.printOutput(editPatientMessage);","lastModifiedDate":"2021-10-18"},{"lineNumber":22,"author":{"gitId":"jushg"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":23,"author":{"gitId":"jushg"},"content":"}","lastModifiedDate":"2021-10-18"}],"authorContributionMap":{"justinfidelis":7,"jushg":16}},{"path":"src/main/java/medbot/command/personcommand/patientcommand/FindPatientCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"justinfidelis"},"content":"package medbot.command.personcommand.patientcommand;","lastModifiedDate":"2021-10-20"},{"lineNumber":2,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":3,"author":{"gitId":"justinfidelis"},"content":"import medbot.Scheduler;","lastModifiedDate":"2021-10-20"},{"lineNumber":4,"author":{"gitId":"jushg"},"content":"import medbot.ui.Ui;","lastModifiedDate":"2021-10-22"},{"lineNumber":5,"author":{"gitId":"justinfidelis"},"content":"import medbot.command.personcommand.FindPersonCommand;","lastModifiedDate":"2021-10-20"},{"lineNumber":6,"author":{"gitId":"EricBryann"},"content":"import medbot.exceptions.MedBotException;","lastModifiedDate":"2021-10-19"},{"lineNumber":7,"author":{"gitId":"jushg"},"content":"import medbot.utilities.ViewType;","lastModifiedDate":"2021-10-22"},{"lineNumber":8,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":9,"author":{"gitId":"EricBryann"},"content":"import java.util.List;","lastModifiedDate":"2021-10-19"},{"lineNumber":10,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":11,"author":{"gitId":"justinfidelis"},"content":"public class FindPatientCommand extends FindPersonCommand {","lastModifiedDate":"2021-10-20"},{"lineNumber":12,"author":{"gitId":"EricBryann"},"content":"    public FindPatientCommand(String[] parameters) {","lastModifiedDate":"2021-10-19"},{"lineNumber":13,"author":{"gitId":"EricBryann"},"content":"        super(parameters);","lastModifiedDate":"2021-10-19"},{"lineNumber":14,"author":{"gitId":"EricBryann"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":15,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":16,"author":{"gitId":"EricBryann"},"content":"    @Override","lastModifiedDate":"2021-10-19"},{"lineNumber":17,"author":{"gitId":"justinfidelis"},"content":"    public void execute(Scheduler scheduler, Ui ui) throws MedBotException {","lastModifiedDate":"2021-10-20"},{"lineNumber":18,"author":{"gitId":"justinfidelis"},"content":"        List\u003cString\u003e patients \u003d scheduler.findPatients(parameters);","lastModifiedDate":"2021-10-24"},{"lineNumber":19,"author":{"gitId":"jushg"},"content":"        String findPatientsMessage \u003d Ui.getFindPersonsMessage(patients, ViewType.PATIENT_INFO);","lastModifiedDate":"2021-10-22"},{"lineNumber":20,"author":{"gitId":"EricBryann"},"content":"        ui.printOutput(findPatientsMessage);","lastModifiedDate":"2021-10-19"},{"lineNumber":21,"author":{"gitId":"EricBryann"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":22,"author":{"gitId":"EricBryann"},"content":"}","lastModifiedDate":"2021-10-19"}],"authorContributionMap":{"justinfidelis":6,"jushg":3,"EricBryann":13}},{"path":"src/main/java/medbot/command/personcommand/patientcommand/HidePatientCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"EricBryann"},"content":"package medbot.command.personcommand.patientcommand;","lastModifiedDate":"2021-11-02"},{"lineNumber":2,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":3,"author":{"gitId":"EricBryann"},"content":"import medbot.Scheduler;","lastModifiedDate":"2021-11-02"},{"lineNumber":4,"author":{"gitId":"EricBryann"},"content":"import medbot.command.personcommand.HidePersonCommand;","lastModifiedDate":"2021-11-02"},{"lineNumber":5,"author":{"gitId":"EricBryann"},"content":"import medbot.exceptions.MedBotException;","lastModifiedDate":"2021-11-02"},{"lineNumber":6,"author":{"gitId":"EricBryann"},"content":"import medbot.ui.Ui;","lastModifiedDate":"2021-11-02"},{"lineNumber":7,"author":{"gitId":"EricBryann"},"content":"import medbot.utilities.ViewType;","lastModifiedDate":"2021-11-02"},{"lineNumber":8,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":9,"author":{"gitId":"EricBryann"},"content":"public class HidePatientCommand extends HidePersonCommand {","lastModifiedDate":"2021-11-02"},{"lineNumber":10,"author":{"gitId":"EricBryann"},"content":"    public HidePatientCommand(int patientId) {","lastModifiedDate":"2021-11-02"},{"lineNumber":11,"author":{"gitId":"EricBryann"},"content":"        super(patientId);","lastModifiedDate":"2021-11-02"},{"lineNumber":12,"author":{"gitId":"EricBryann"},"content":"    }","lastModifiedDate":"2021-11-02"},{"lineNumber":13,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":14,"author":{"gitId":"EricBryann"},"content":"    @Override","lastModifiedDate":"2021-11-02"},{"lineNumber":15,"author":{"gitId":"EricBryann"},"content":"    public void execute(Scheduler scheduler, Ui ui) throws MedBotException {","lastModifiedDate":"2021-11-02"},{"lineNumber":16,"author":{"gitId":"EricBryann"},"content":"        scheduler.hidePatient(personId);","lastModifiedDate":"2021-11-02"},{"lineNumber":17,"author":{"gitId":"EricBryann"},"content":"        String hidePatientMessage \u003d Ui.getHidePersonMessage(personId, ViewType.PATIENT_INFO);","lastModifiedDate":"2021-11-02"},{"lineNumber":18,"author":{"gitId":"EricBryann"},"content":"        ui.printOutput(hidePatientMessage);","lastModifiedDate":"2021-11-02"},{"lineNumber":19,"author":{"gitId":"EricBryann"},"content":"    }","lastModifiedDate":"2021-11-02"},{"lineNumber":20,"author":{"gitId":"EricBryann"},"content":"}","lastModifiedDate":"2021-11-02"}],"authorContributionMap":{"EricBryann":20}},{"path":"src/main/java/medbot/command/personcommand/patientcommand/ListPatientCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"justinfidelis"},"content":"package medbot.command.personcommand.patientcommand;","lastModifiedDate":"2021-10-20"},{"lineNumber":2,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":3,"author":{"gitId":"justinfidelis"},"content":"import medbot.Scheduler;","lastModifiedDate":"2021-10-20"},{"lineNumber":4,"author":{"gitId":"jushg"},"content":"import medbot.ui.PatientUi;","lastModifiedDate":"2021-10-22"},{"lineNumber":5,"author":{"gitId":"jushg"},"content":"import medbot.ui.Ui;","lastModifiedDate":"2021-10-22"},{"lineNumber":6,"author":{"gitId":"justinfidelis"},"content":"import medbot.command.personcommand.ListPersonCommand;","lastModifiedDate":"2021-10-20"},{"lineNumber":7,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":8,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":9,"author":{"gitId":"justinfidelis"},"content":"public class ListPatientCommand extends ListPersonCommand {","lastModifiedDate":"2021-10-20"},{"lineNumber":10,"author":{"gitId":"EricBryann"},"content":"    public ListPatientCommand(boolean getHiddenPersons) {","lastModifiedDate":"2021-11-02"},{"lineNumber":11,"author":{"gitId":"EricBryann"},"content":"        super(getHiddenPersons);","lastModifiedDate":"2021-11-02"},{"lineNumber":12,"author":{"gitId":"EricBryann"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":13,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":14,"author":{"gitId":"jushg"},"content":"    @Override","lastModifiedDate":"2021-10-18"},{"lineNumber":15,"author":{"gitId":"justinfidelis"},"content":"    public void execute(Scheduler scheduler, Ui ui) {","lastModifiedDate":"2021-10-20"},{"lineNumber":16,"author":{"gitId":"EricBryann"},"content":"        String allPatientsString \u003d PatientUi.getAllPatientsString(scheduler.listPatients(getHidden()));","lastModifiedDate":"2021-11-02"},{"lineNumber":17,"author":{"gitId":"jushg"},"content":"        ui.printOutput(allPatientsString);","lastModifiedDate":"2021-10-18"},{"lineNumber":18,"author":{"gitId":"jushg"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":19,"author":{"gitId":"jushg"},"content":"}","lastModifiedDate":"2021-10-18"}],"authorContributionMap":{"justinfidelis":6,"jushg":9,"EricBryann":4}},{"path":"src/main/java/medbot/command/personcommand/patientcommand/ShowPatientCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"EricBryann"},"content":"package medbot.command.personcommand.patientcommand;","lastModifiedDate":"2021-11-02"},{"lineNumber":2,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":3,"author":{"gitId":"EricBryann"},"content":"import medbot.Scheduler;","lastModifiedDate":"2021-11-02"},{"lineNumber":4,"author":{"gitId":"EricBryann"},"content":"import medbot.command.personcommand.ShowPersonCommand;","lastModifiedDate":"2021-11-02"},{"lineNumber":5,"author":{"gitId":"EricBryann"},"content":"import medbot.exceptions.MedBotException;","lastModifiedDate":"2021-11-02"},{"lineNumber":6,"author":{"gitId":"EricBryann"},"content":"import medbot.ui.Ui;","lastModifiedDate":"2021-11-02"},{"lineNumber":7,"author":{"gitId":"EricBryann"},"content":"import medbot.utilities.ViewType;","lastModifiedDate":"2021-11-02"},{"lineNumber":8,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":9,"author":{"gitId":"EricBryann"},"content":"public class ShowPatientCommand extends ShowPersonCommand {","lastModifiedDate":"2021-11-02"},{"lineNumber":10,"author":{"gitId":"EricBryann"},"content":"    public ShowPatientCommand(int patientId) {","lastModifiedDate":"2021-11-02"},{"lineNumber":11,"author":{"gitId":"EricBryann"},"content":"        super(patientId);","lastModifiedDate":"2021-11-02"},{"lineNumber":12,"author":{"gitId":"EricBryann"},"content":"    }","lastModifiedDate":"2021-11-02"},{"lineNumber":13,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":14,"author":{"gitId":"EricBryann"},"content":"    @Override","lastModifiedDate":"2021-11-02"},{"lineNumber":15,"author":{"gitId":"EricBryann"},"content":"    public void execute(Scheduler scheduler, Ui ui) throws MedBotException {","lastModifiedDate":"2021-11-02"},{"lineNumber":16,"author":{"gitId":"EricBryann"},"content":"        scheduler.showPatient(personId);","lastModifiedDate":"2021-11-02"},{"lineNumber":17,"author":{"gitId":"EricBryann"},"content":"        String showPatientMessage \u003d Ui.getShowPersonMessage(personId, ViewType.PATIENT_INFO);","lastModifiedDate":"2021-11-02"},{"lineNumber":18,"author":{"gitId":"EricBryann"},"content":"        ui.printOutput(showPatientMessage);","lastModifiedDate":"2021-11-02"},{"lineNumber":19,"author":{"gitId":"EricBryann"},"content":"    }","lastModifiedDate":"2021-11-02"},{"lineNumber":20,"author":{"gitId":"EricBryann"},"content":"}","lastModifiedDate":"2021-11-02"}],"authorContributionMap":{"EricBryann":20}},{"path":"src/main/java/medbot/command/personcommand/patientcommand/ViewPatientCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"justinfidelis"},"content":"package medbot.command.personcommand.patientcommand;","lastModifiedDate":"2021-10-20"},{"lineNumber":2,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":3,"author":{"gitId":"justinfidelis"},"content":"import medbot.Scheduler;","lastModifiedDate":"2021-10-20"},{"lineNumber":4,"author":{"gitId":"justinfidelis"},"content":"import medbot.command.personcommand.ViewPersonCommand;","lastModifiedDate":"2021-10-20"},{"lineNumber":5,"author":{"gitId":"jushg"},"content":"import medbot.exceptions.MedBotException;","lastModifiedDate":"2021-10-18"},{"lineNumber":6,"author":{"gitId":"jushg"},"content":"import medbot.ui.Ui;","lastModifiedDate":"2021-10-22"},{"lineNumber":7,"author":{"gitId":"justinfidelis"},"content":"import medbot.utilities.ViewType;","lastModifiedDate":"2021-11-07"},{"lineNumber":8,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":9,"author":{"gitId":"justinfidelis"},"content":"public class ViewPatientCommand extends ViewPersonCommand {","lastModifiedDate":"2021-10-20"},{"lineNumber":10,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":11,"author":{"gitId":"jushg"},"content":"    public ViewPatientCommand(int patientId) {","lastModifiedDate":"2021-10-18"},{"lineNumber":12,"author":{"gitId":"jushg"},"content":"        super(patientId);","lastModifiedDate":"2021-10-18"},{"lineNumber":13,"author":{"gitId":"jushg"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":14,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":15,"author":{"gitId":"jushg"},"content":"    @Override","lastModifiedDate":"2021-10-18"},{"lineNumber":16,"author":{"gitId":"justinfidelis"},"content":"    public void execute(Scheduler scheduler, Ui ui) throws MedBotException {","lastModifiedDate":"2021-10-20"},{"lineNumber":17,"author":{"gitId":"justinfidelis"},"content":"        String patientInfo \u003d scheduler.getPatientInfo(personId);","lastModifiedDate":"2021-10-24"},{"lineNumber":18,"author":{"gitId":"justinfidelis"},"content":"        String viewPatientMessage \u003d Ui.getViewMessage(patientInfo, ViewType.PATIENT_INFO);","lastModifiedDate":"2021-11-07"},{"lineNumber":19,"author":{"gitId":"justinfidelis"},"content":"        ui.printOutput(viewPatientMessage);","lastModifiedDate":"2021-10-20"},{"lineNumber":20,"author":{"gitId":"jushg"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":21,"author":{"gitId":"jushg"},"content":"}","lastModifiedDate":"2021-10-18"}],"authorContributionMap":{"justinfidelis":9,"jushg":12}},{"path":"src/main/java/medbot/command/personcommand/staffcommand/AddStaffCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"justinfidelis"},"content":"package medbot.command.personcommand.staffcommand;","lastModifiedDate":"2021-10-20"},{"lineNumber":2,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":3,"author":{"gitId":"justinfidelis"},"content":"import medbot.Scheduler;","lastModifiedDate":"2021-10-20"},{"lineNumber":4,"author":{"gitId":"jushg"},"content":"import medbot.ui.Ui;","lastModifiedDate":"2021-10-22"},{"lineNumber":5,"author":{"gitId":"justinfidelis"},"content":"import medbot.command.personcommand.AddPersonCommand;","lastModifiedDate":"2021-10-20"},{"lineNumber":6,"author":{"gitId":"justinfidelis"},"content":"import medbot.exceptions.MedBotException;","lastModifiedDate":"2021-10-20"},{"lineNumber":7,"author":{"gitId":"jushg"},"content":"import medbot.person.Staff;","lastModifiedDate":"2021-10-18"},{"lineNumber":8,"author":{"gitId":"jushg"},"content":"import medbot.utilities.ViewType;","lastModifiedDate":"2021-10-22"},{"lineNumber":9,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":10,"author":{"gitId":"jushg"},"content":"//@@author jushg","lastModifiedDate":"2021-11-07"},{"lineNumber":11,"author":{"gitId":"jushg"},"content":"public class AddStaffCommand extends AddPersonCommand {","lastModifiedDate":"2021-10-20"},{"lineNumber":12,"author":{"gitId":"jushg"},"content":"    public AddStaffCommand(Staff staff) {","lastModifiedDate":"2021-10-18"},{"lineNumber":13,"author":{"gitId":"jushg"},"content":"        super(staff);","lastModifiedDate":"2021-10-18"},{"lineNumber":14,"author":{"gitId":"jushg"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":15,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":16,"author":{"gitId":"jushg"},"content":"    @Override","lastModifiedDate":"2021-10-19"},{"lineNumber":17,"author":{"gitId":"jushg"},"content":"    public void execute(Scheduler scheduler, Ui ui) throws MedBotException {","lastModifiedDate":"2021-10-20"},{"lineNumber":18,"author":{"gitId":"jushg"},"content":"        scheduler.addStaff(person);","lastModifiedDate":"2021-11-02"},{"lineNumber":19,"author":{"gitId":"jushg"},"content":"        String addStaffMessage \u003d Ui.getAddMessage(person.toString(), ViewType.MEDICAL_STAFF_INFO);","lastModifiedDate":"2021-11-07"},{"lineNumber":20,"author":{"gitId":"jushg"},"content":"        ui.printOutput(addStaffMessage);","lastModifiedDate":"2021-10-20"},{"lineNumber":21,"author":{"gitId":"jushg"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":22,"author":{"gitId":"jushg"},"content":"}","lastModifiedDate":"2021-10-18"}],"authorContributionMap":{"justinfidelis":4,"jushg":18}},{"path":"src/main/java/medbot/command/personcommand/staffcommand/DeleteStaffCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"justinfidelis"},"content":"package medbot.command.personcommand.staffcommand;","lastModifiedDate":"2021-10-20"},{"lineNumber":2,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":3,"author":{"gitId":"justinfidelis"},"content":"import medbot.Scheduler;","lastModifiedDate":"2021-10-20"},{"lineNumber":4,"author":{"gitId":"jushg"},"content":"import medbot.ui.Ui;","lastModifiedDate":"2021-10-22"},{"lineNumber":5,"author":{"gitId":"justinfidelis"},"content":"import medbot.command.personcommand.DeletePersonCommand;","lastModifiedDate":"2021-10-20"},{"lineNumber":6,"author":{"gitId":"jushg"},"content":"import medbot.exceptions.MedBotException;","lastModifiedDate":"2021-10-19"},{"lineNumber":7,"author":{"gitId":"jushg"},"content":"import medbot.utilities.ViewType;","lastModifiedDate":"2021-10-22"},{"lineNumber":8,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":9,"author":{"gitId":"jushg"},"content":"//@@author jushg","lastModifiedDate":"2021-11-07"},{"lineNumber":10,"author":{"gitId":"jushg"},"content":"public class DeleteStaffCommand extends DeletePersonCommand {","lastModifiedDate":"2021-10-20"},{"lineNumber":11,"author":{"gitId":"jushg"},"content":"    public DeleteStaffCommand(int staffId) {","lastModifiedDate":"2021-10-18"},{"lineNumber":12,"author":{"gitId":"jushg"},"content":"        super(staffId);","lastModifiedDate":"2021-10-18"},{"lineNumber":13,"author":{"gitId":"jushg"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":14,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":15,"author":{"gitId":"jushg"},"content":"    @Override","lastModifiedDate":"2021-10-19"},{"lineNumber":16,"author":{"gitId":"jushg"},"content":"    public void execute(Scheduler scheduler, Ui ui) throws MedBotException {","lastModifiedDate":"2021-10-20"},{"lineNumber":17,"author":{"gitId":"jushg"},"content":"        scheduler.deleteStaff(personId);","lastModifiedDate":"2021-10-24"},{"lineNumber":18,"author":{"gitId":"jushg"},"content":"        String deleteStaffMessage \u003d Ui.getDeleteMessage(personId, ViewType.MEDICAL_STAFF_INFO);","lastModifiedDate":"2021-10-22"},{"lineNumber":19,"author":{"gitId":"jushg"},"content":"        ui.printOutput(deleteStaffMessage);","lastModifiedDate":"2021-10-20"},{"lineNumber":20,"author":{"gitId":"jushg"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":21,"author":{"gitId":"jushg"},"content":"}","lastModifiedDate":"2021-10-18"}],"authorContributionMap":{"justinfidelis":3,"jushg":18}},{"path":"src/main/java/medbot/command/personcommand/staffcommand/EditStaffCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"justinfidelis"},"content":"package medbot.command.personcommand.staffcommand;","lastModifiedDate":"2021-10-20"},{"lineNumber":2,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":3,"author":{"gitId":"justinfidelis"},"content":"import medbot.Scheduler;","lastModifiedDate":"2021-10-20"},{"lineNumber":4,"author":{"gitId":"jushg"},"content":"import medbot.ui.Ui;","lastModifiedDate":"2021-10-22"},{"lineNumber":5,"author":{"gitId":"justinfidelis"},"content":"import medbot.command.personcommand.EditPersonCommand;","lastModifiedDate":"2021-10-20"},{"lineNumber":6,"author":{"gitId":"jushg"},"content":"import medbot.exceptions.MedBotException;","lastModifiedDate":"2021-10-19"},{"lineNumber":7,"author":{"gitId":"jushg"},"content":"import medbot.person.Staff;","lastModifiedDate":"2021-10-18"},{"lineNumber":8,"author":{"gitId":"jushg"},"content":"import medbot.utilities.ViewType;","lastModifiedDate":"2021-10-22"},{"lineNumber":9,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":10,"author":{"gitId":"jushg"},"content":"//@@author jushg","lastModifiedDate":"2021-11-07"},{"lineNumber":11,"author":{"gitId":"jushg"},"content":"public class EditStaffCommand extends EditPersonCommand {","lastModifiedDate":"2021-10-20"},{"lineNumber":12,"author":{"gitId":"jushg"},"content":"    public EditStaffCommand(int staffId, Staff staff) {","lastModifiedDate":"2021-10-18"},{"lineNumber":13,"author":{"gitId":"jushg"},"content":"        super(staffId, staff);","lastModifiedDate":"2021-10-18"},{"lineNumber":14,"author":{"gitId":"jushg"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":15,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":16,"author":{"gitId":"jushg"},"content":"    @Override","lastModifiedDate":"2021-10-19"},{"lineNumber":17,"author":{"gitId":"jushg"},"content":"    public void execute(Scheduler scheduler, Ui ui) throws MedBotException {","lastModifiedDate":"2021-10-20"},{"lineNumber":18,"author":{"gitId":"jushg"},"content":"        scheduler.editStaff(personId, person);","lastModifiedDate":"2021-10-24"},{"lineNumber":19,"author":{"gitId":"jushg"},"content":"        String staffInfo \u003d scheduler.getStaffInfo(personId);","lastModifiedDate":"2021-10-24"},{"lineNumber":20,"author":{"gitId":"jushg"},"content":"        String editStaffMessage \u003d Ui.getEditMessage(personId, staffInfo, ViewType.MEDICAL_STAFF_INFO);","lastModifiedDate":"2021-10-22"},{"lineNumber":21,"author":{"gitId":"jushg"},"content":"        ui.printOutput(editStaffMessage);","lastModifiedDate":"2021-10-20"},{"lineNumber":22,"author":{"gitId":"jushg"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":23,"author":{"gitId":"jushg"},"content":"}","lastModifiedDate":"2021-10-18"}],"authorContributionMap":{"justinfidelis":3,"jushg":20}},{"path":"src/main/java/medbot/command/personcommand/staffcommand/FindStaffCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"justinfidelis"},"content":"package medbot.command.personcommand.staffcommand;","lastModifiedDate":"2021-10-20"},{"lineNumber":2,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":3,"author":{"gitId":"justinfidelis"},"content":"import medbot.Scheduler;","lastModifiedDate":"2021-10-20"},{"lineNumber":4,"author":{"gitId":"jushg"},"content":"import medbot.ui.Ui;","lastModifiedDate":"2021-10-22"},{"lineNumber":5,"author":{"gitId":"justinfidelis"},"content":"import medbot.command.personcommand.FindPersonCommand;","lastModifiedDate":"2021-10-20"},{"lineNumber":6,"author":{"gitId":"jushg"},"content":"import medbot.exceptions.MedBotException;","lastModifiedDate":"2021-10-19"},{"lineNumber":7,"author":{"gitId":"jushg"},"content":"import medbot.utilities.ViewType;","lastModifiedDate":"2021-10-22"},{"lineNumber":8,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":9,"author":{"gitId":"jushg"},"content":"import java.util.List;","lastModifiedDate":"2021-10-19"},{"lineNumber":10,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":11,"author":{"gitId":"jushg"},"content":"//@@author jushg","lastModifiedDate":"2021-11-07"},{"lineNumber":12,"author":{"gitId":"jushg"},"content":"public class FindStaffCommand extends FindPersonCommand {","lastModifiedDate":"2021-10-20"},{"lineNumber":13,"author":{"gitId":"jushg"},"content":"    public FindStaffCommand(String[] parameters) {","lastModifiedDate":"2021-10-19"},{"lineNumber":14,"author":{"gitId":"jushg"},"content":"        super(parameters);","lastModifiedDate":"2021-10-19"},{"lineNumber":15,"author":{"gitId":"jushg"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":16,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":17,"author":{"gitId":"jushg"},"content":"    @Override","lastModifiedDate":"2021-10-19"},{"lineNumber":18,"author":{"gitId":"jushg"},"content":"    public void execute(Scheduler scheduler, Ui ui) throws MedBotException {","lastModifiedDate":"2021-10-20"},{"lineNumber":19,"author":{"gitId":"jushg"},"content":"        List\u003cString\u003e staffs \u003d scheduler.findStaff(parameters);","lastModifiedDate":"2021-10-24"},{"lineNumber":20,"author":{"gitId":"jushg"},"content":"        String findStaffMessage \u003d Ui.getFindPersonsMessage(staffs, ViewType.MEDICAL_STAFF_INFO);","lastModifiedDate":"2021-10-24"},{"lineNumber":21,"author":{"gitId":"jushg"},"content":"        ui.printOutput(findStaffMessage);","lastModifiedDate":"2021-10-20"},{"lineNumber":22,"author":{"gitId":"jushg"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":23,"author":{"gitId":"jushg"},"content":"}","lastModifiedDate":"2021-10-19"}],"authorContributionMap":{"justinfidelis":3,"jushg":18,"EricBryann":2}},{"path":"src/main/java/medbot/command/personcommand/staffcommand/HideStaffCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"EricBryann"},"content":"package medbot.command.personcommand.staffcommand;","lastModifiedDate":"2021-11-02"},{"lineNumber":2,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":3,"author":{"gitId":"EricBryann"},"content":"import medbot.Scheduler;","lastModifiedDate":"2021-11-02"},{"lineNumber":4,"author":{"gitId":"EricBryann"},"content":"import medbot.command.personcommand.HidePersonCommand;","lastModifiedDate":"2021-11-02"},{"lineNumber":5,"author":{"gitId":"EricBryann"},"content":"import medbot.exceptions.MedBotException;","lastModifiedDate":"2021-11-02"},{"lineNumber":6,"author":{"gitId":"EricBryann"},"content":"import medbot.ui.Ui;","lastModifiedDate":"2021-11-02"},{"lineNumber":7,"author":{"gitId":"EricBryann"},"content":"import medbot.utilities.ViewType;","lastModifiedDate":"2021-11-02"},{"lineNumber":8,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":9,"author":{"gitId":"EricBryann"},"content":"public class HideStaffCommand extends HidePersonCommand {","lastModifiedDate":"2021-11-02"},{"lineNumber":10,"author":{"gitId":"EricBryann"},"content":"    public HideStaffCommand(int staffId) {","lastModifiedDate":"2021-11-02"},{"lineNumber":11,"author":{"gitId":"EricBryann"},"content":"        super(staffId);","lastModifiedDate":"2021-11-02"},{"lineNumber":12,"author":{"gitId":"EricBryann"},"content":"    }","lastModifiedDate":"2021-11-02"},{"lineNumber":13,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":14,"author":{"gitId":"EricBryann"},"content":"    @Override","lastModifiedDate":"2021-11-02"},{"lineNumber":15,"author":{"gitId":"EricBryann"},"content":"    public void execute(Scheduler scheduler, Ui ui) throws MedBotException {","lastModifiedDate":"2021-11-02"},{"lineNumber":16,"author":{"gitId":"EricBryann"},"content":"        scheduler.hideStaff(personId);","lastModifiedDate":"2021-11-02"},{"lineNumber":17,"author":{"gitId":"EricBryann"},"content":"        String hideStaffMessage \u003d Ui.getHidePersonMessage(personId, ViewType.MEDICAL_STAFF_INFO);","lastModifiedDate":"2021-11-02"},{"lineNumber":18,"author":{"gitId":"EricBryann"},"content":"        ui.printOutput(hideStaffMessage);","lastModifiedDate":"2021-11-02"},{"lineNumber":19,"author":{"gitId":"EricBryann"},"content":"    }","lastModifiedDate":"2021-11-02"},{"lineNumber":20,"author":{"gitId":"EricBryann"},"content":"}","lastModifiedDate":"2021-11-02"}],"authorContributionMap":{"EricBryann":20}},{"path":"src/main/java/medbot/command/personcommand/staffcommand/ListStaffCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"justinfidelis"},"content":"package medbot.command.personcommand.staffcommand;","lastModifiedDate":"2021-10-20"},{"lineNumber":2,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":3,"author":{"gitId":"justinfidelis"},"content":"import medbot.Scheduler;","lastModifiedDate":"2021-10-20"},{"lineNumber":4,"author":{"gitId":"jushg"},"content":"import medbot.ui.StaffUi;","lastModifiedDate":"2021-10-22"},{"lineNumber":5,"author":{"gitId":"jushg"},"content":"import medbot.ui.Ui;","lastModifiedDate":"2021-10-22"},{"lineNumber":6,"author":{"gitId":"justinfidelis"},"content":"import medbot.command.personcommand.ListPersonCommand;","lastModifiedDate":"2021-10-20"},{"lineNumber":7,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":8,"author":{"gitId":"jushg"},"content":"//@@author jushg","lastModifiedDate":"2021-11-07"},{"lineNumber":9,"author":{"gitId":"jushg"},"content":"public class ListStaffCommand extends ListPersonCommand {","lastModifiedDate":"2021-10-20"},{"lineNumber":10,"author":{"gitId":"jushg"},"content":"    public ListStaffCommand(boolean getHidden) {","lastModifiedDate":"2021-11-02"},{"lineNumber":11,"author":{"gitId":"jushg"},"content":"        super(getHidden);","lastModifiedDate":"2021-11-02"},{"lineNumber":12,"author":{"gitId":"jushg"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":13,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":14,"author":{"gitId":"jushg"},"content":"    @Override","lastModifiedDate":"2021-10-19"},{"lineNumber":15,"author":{"gitId":"jushg"},"content":"    public void execute(Scheduler scheduler, Ui ui) {","lastModifiedDate":"2021-10-20"},{"lineNumber":16,"author":{"gitId":"jushg"},"content":"        String allStaffString \u003d StaffUi.getAllStaffsString(scheduler.listStaff(getHidden()));","lastModifiedDate":"2021-11-02"},{"lineNumber":17,"author":{"gitId":"jushg"},"content":"        ui.printOutput(allStaffString);","lastModifiedDate":"2021-10-20"},{"lineNumber":18,"author":{"gitId":"jushg"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":19,"author":{"gitId":"jushg"},"content":"}","lastModifiedDate":"2021-10-18"}],"authorContributionMap":{"justinfidelis":3,"jushg":16}},{"path":"src/main/java/medbot/command/personcommand/staffcommand/ShowStaffCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"EricBryann"},"content":"package medbot.command.personcommand.staffcommand;","lastModifiedDate":"2021-11-02"},{"lineNumber":2,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":3,"author":{"gitId":"EricBryann"},"content":"import medbot.Scheduler;","lastModifiedDate":"2021-11-02"},{"lineNumber":4,"author":{"gitId":"EricBryann"},"content":"import medbot.command.personcommand.ShowPersonCommand;","lastModifiedDate":"2021-11-02"},{"lineNumber":5,"author":{"gitId":"EricBryann"},"content":"import medbot.exceptions.MedBotException;","lastModifiedDate":"2021-11-02"},{"lineNumber":6,"author":{"gitId":"EricBryann"},"content":"import medbot.ui.Ui;","lastModifiedDate":"2021-11-02"},{"lineNumber":7,"author":{"gitId":"EricBryann"},"content":"import medbot.utilities.ViewType;","lastModifiedDate":"2021-11-02"},{"lineNumber":8,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":9,"author":{"gitId":"EricBryann"},"content":"public class ShowStaffCommand extends ShowPersonCommand {","lastModifiedDate":"2021-11-02"},{"lineNumber":10,"author":{"gitId":"EricBryann"},"content":"    public ShowStaffCommand(int patientId) {","lastModifiedDate":"2021-11-02"},{"lineNumber":11,"author":{"gitId":"EricBryann"},"content":"        super(patientId);","lastModifiedDate":"2021-11-02"},{"lineNumber":12,"author":{"gitId":"EricBryann"},"content":"    }","lastModifiedDate":"2021-11-02"},{"lineNumber":13,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":14,"author":{"gitId":"EricBryann"},"content":"    @Override","lastModifiedDate":"2021-11-02"},{"lineNumber":15,"author":{"gitId":"EricBryann"},"content":"    public void execute(Scheduler scheduler, Ui ui) throws MedBotException {","lastModifiedDate":"2021-11-02"},{"lineNumber":16,"author":{"gitId":"EricBryann"},"content":"        scheduler.showStaff(personId);","lastModifiedDate":"2021-11-02"},{"lineNumber":17,"author":{"gitId":"EricBryann"},"content":"        String showStaffMessage \u003d Ui.getShowPersonMessage(personId, ViewType.MEDICAL_STAFF_INFO);","lastModifiedDate":"2021-11-02"},{"lineNumber":18,"author":{"gitId":"EricBryann"},"content":"        ui.printOutput(showStaffMessage);","lastModifiedDate":"2021-11-02"},{"lineNumber":19,"author":{"gitId":"EricBryann"},"content":"    }","lastModifiedDate":"2021-11-02"},{"lineNumber":20,"author":{"gitId":"EricBryann"},"content":"}","lastModifiedDate":"2021-11-02"}],"authorContributionMap":{"EricBryann":20}},{"path":"src/main/java/medbot/command/personcommand/staffcommand/ViewStaffCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"justinfidelis"},"content":"package medbot.command.personcommand.staffcommand;","lastModifiedDate":"2021-10-20"},{"lineNumber":2,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":3,"author":{"gitId":"justinfidelis"},"content":"import medbot.Scheduler;","lastModifiedDate":"2021-10-20"},{"lineNumber":4,"author":{"gitId":"jushg"},"content":"import medbot.ui.Ui;","lastModifiedDate":"2021-10-22"},{"lineNumber":5,"author":{"gitId":"justinfidelis"},"content":"import medbot.command.personcommand.ViewPersonCommand;","lastModifiedDate":"2021-10-20"},{"lineNumber":6,"author":{"gitId":"jushg"},"content":"import medbot.exceptions.MedBotException;","lastModifiedDate":"2021-10-19"},{"lineNumber":7,"author":{"gitId":"justinfidelis"},"content":"import medbot.utilities.ViewType;","lastModifiedDate":"2021-11-07"},{"lineNumber":8,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":9,"author":{"gitId":"jushg"},"content":"//@@author jushg","lastModifiedDate":"2021-11-07"},{"lineNumber":10,"author":{"gitId":"jushg"},"content":"public class ViewStaffCommand extends ViewPersonCommand {","lastModifiedDate":"2021-10-20"},{"lineNumber":11,"author":{"gitId":"jushg"},"content":"    public ViewStaffCommand(int staffId) {","lastModifiedDate":"2021-10-18"},{"lineNumber":12,"author":{"gitId":"jushg"},"content":"        super(staffId);","lastModifiedDate":"2021-10-18"},{"lineNumber":13,"author":{"gitId":"jushg"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":14,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":15,"author":{"gitId":"jushg"},"content":"    @Override","lastModifiedDate":"2021-10-19"},{"lineNumber":16,"author":{"gitId":"jushg"},"content":"    public void execute(Scheduler scheduler, Ui ui) throws MedBotException {","lastModifiedDate":"2021-10-20"},{"lineNumber":17,"author":{"gitId":"jushg"},"content":"        String staffInfo \u003d scheduler.getStaffInfo(personId);","lastModifiedDate":"2021-10-24"},{"lineNumber":18,"author":{"gitId":"jushg"},"content":"        String viewStaffMessage \u003d Ui.getViewMessage(staffInfo, ViewType.MEDICAL_STAFF_INFO);","lastModifiedDate":"2021-11-07"},{"lineNumber":19,"author":{"gitId":"jushg"},"content":"        ui.printOutput(viewStaffMessage);","lastModifiedDate":"2021-10-20"},{"lineNumber":20,"author":{"gitId":"jushg"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":21,"author":{"gitId":"jushg"},"content":"}","lastModifiedDate":"2021-10-18"}],"authorContributionMap":{"justinfidelis":4,"jushg":17}},{"path":"src/main/java/medbot/exceptions/MedBotException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"justinfidelis"},"content":"package medbot.exceptions;","lastModifiedDate":"2021-10-18"},{"lineNumber":2,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":3,"author":{"gitId":"justinfidelis"},"content":"public class MedBotException extends Exception {","lastModifiedDate":"2021-09-30"},{"lineNumber":4,"author":{"gitId":"justinfidelis"},"content":"    public MedBotException(String message) {","lastModifiedDate":"2021-09-30"},{"lineNumber":5,"author":{"gitId":"justinfidelis"},"content":"        super(message);","lastModifiedDate":"2021-09-30"},{"lineNumber":6,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-09-30"},{"lineNumber":7,"author":{"gitId":"justinfidelis"},"content":"}","lastModifiedDate":"2021-09-30"}],"authorContributionMap":{"justinfidelis":7}},{"path":"src/main/java/medbot/exceptions/MedBotParserException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"justinfidelis"},"content":"package medbot.exceptions;","lastModifiedDate":"2021-10-18"},{"lineNumber":2,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":3,"author":{"gitId":"justinfidelis"},"content":"public class MedBotParserException extends MedBotException {","lastModifiedDate":"2021-10-18"},{"lineNumber":4,"author":{"gitId":"justinfidelis"},"content":"    public MedBotParserException(String message) {","lastModifiedDate":"2021-10-18"},{"lineNumber":5,"author":{"gitId":"justinfidelis"},"content":"        super(message);","lastModifiedDate":"2021-10-18"},{"lineNumber":6,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":7,"author":{"gitId":"justinfidelis"},"content":"}","lastModifiedDate":"2021-10-18"}],"authorContributionMap":{"justinfidelis":7}},{"path":"src/main/java/medbot/list/ListItem.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"CrimsonTitan79"},"content":"package medbot.list;","lastModifiedDate":"2021-10-25"},{"lineNumber":2,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":3,"author":{"gitId":"justinfidelis"},"content":"public interface ListItem {","lastModifiedDate":"2021-10-27"},{"lineNumber":4,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":5,"author":{"gitId":"CrimsonTitan79"},"content":"    /**","lastModifiedDate":"2021-10-26"},{"lineNumber":6,"author":{"gitId":"CrimsonTitan79"},"content":"     * Returns id of ListItem object.","lastModifiedDate":"2021-10-26"},{"lineNumber":7,"author":{"gitId":"CrimsonTitan79"},"content":"     *","lastModifiedDate":"2021-10-26"},{"lineNumber":8,"author":{"gitId":"CrimsonTitan79"},"content":"     * @return id of ListItem object","lastModifiedDate":"2021-10-26"},{"lineNumber":9,"author":{"gitId":"CrimsonTitan79"},"content":"     */","lastModifiedDate":"2021-10-26"},{"lineNumber":10,"author":{"gitId":"justinfidelis"},"content":"    int getId();","lastModifiedDate":"2021-10-27"},{"lineNumber":11,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":12,"author":{"gitId":"CrimsonTitan79"},"content":"    /**","lastModifiedDate":"2021-10-25"},{"lineNumber":13,"author":{"gitId":"CrimsonTitan79"},"content":"     * Sets value of id.","lastModifiedDate":"2021-10-26"},{"lineNumber":14,"author":{"gitId":"CrimsonTitan79"},"content":"     *","lastModifiedDate":"2021-10-25"},{"lineNumber":15,"author":{"gitId":"CrimsonTitan79"},"content":"     * @param id new value of id to be set","lastModifiedDate":"2021-10-26"},{"lineNumber":16,"author":{"gitId":"CrimsonTitan79"},"content":"     */","lastModifiedDate":"2021-10-25"},{"lineNumber":17,"author":{"gitId":"justinfidelis"},"content":"    void setId(int id);","lastModifiedDate":"2021-10-27"},{"lineNumber":18,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":19,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":20,"author":{"gitId":"CrimsonTitan79"},"content":"}","lastModifiedDate":"2021-10-25"}],"authorContributionMap":{"justinfidelis":3,"CrimsonTitan79":17}},{"path":"src/main/java/medbot/list/ListItemType.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"CrimsonTitan79"},"content":"package medbot.list;","lastModifiedDate":"2021-10-25"},{"lineNumber":2,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":3,"author":{"gitId":"CrimsonTitan79"},"content":"public enum ListItemType {","lastModifiedDate":"2021-10-25"},{"lineNumber":4,"author":{"gitId":"CrimsonTitan79"},"content":"    STAFF, PATIENT, APPOINTMENT","lastModifiedDate":"2021-10-25"},{"lineNumber":5,"author":{"gitId":"CrimsonTitan79"},"content":"}","lastModifiedDate":"2021-10-25"}],"authorContributionMap":{"CrimsonTitan79":5}},{"path":"src/main/java/medbot/list/MedicalStaffList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jushg"},"content":"package medbot.list;","lastModifiedDate":"2021-10-18"},{"lineNumber":2,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":3,"author":{"gitId":"justinfidelis"},"content":"import static medbot.ui.Ui.END_LINE;","lastModifiedDate":"2021-10-24"},{"lineNumber":4,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":5,"author":{"gitId":"jushg"},"content":"//@@author jushg","lastModifiedDate":"2021-11-07"},{"lineNumber":6,"author":{"gitId":"jushg"},"content":"public class MedicalStaffList extends PersonList {","lastModifiedDate":"2021-10-18"},{"lineNumber":7,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":8,"author":{"gitId":"jushg"},"content":"    @Override","lastModifiedDate":"2021-10-24"},{"lineNumber":9,"author":{"gitId":"jushg"},"content":"    protected String getPersonNotFoundErrorMessage(int staffId) {","lastModifiedDate":"2021-10-25"},{"lineNumber":10,"author":{"gitId":"jushg"},"content":"        return \"No staff with ID \" + staffId + \" found.\" + END_LINE;","lastModifiedDate":"2021-11-07"},{"lineNumber":11,"author":{"gitId":"jushg"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":12,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":13,"author":{"gitId":"jushg"},"content":"    @Override","lastModifiedDate":"2021-10-25"},{"lineNumber":14,"author":{"gitId":"jushg"},"content":"    protected String getAlreadyHiddenErrorMessage(int staffId) {","lastModifiedDate":"2021-11-02"},{"lineNumber":15,"author":{"gitId":"jushg"},"content":"        return \"The staff with ID \" + staffId + \" is already hidden.\" + END_LINE;","lastModifiedDate":"2021-11-02"},{"lineNumber":16,"author":{"gitId":"jushg"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":17,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":18,"author":{"gitId":"jushg"},"content":"    @Override","lastModifiedDate":"2021-10-25"},{"lineNumber":19,"author":{"gitId":"jushg"},"content":"    protected String getAlreadyShownErrorMessage(int staffId) {","lastModifiedDate":"2021-11-02"},{"lineNumber":20,"author":{"gitId":"jushg"},"content":"        return \"The staff with ID \" + staffId + \" is already not-hidden.\" + END_LINE;","lastModifiedDate":"2021-11-02"},{"lineNumber":21,"author":{"gitId":"jushg"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":22,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":23,"author":{"gitId":"jushg"},"content":"    @Override","lastModifiedDate":"2021-11-02"},{"lineNumber":24,"author":{"gitId":"jushg"},"content":"    protected String getIcIsDuplicate(String icNumber) {","lastModifiedDate":"2021-11-02"},{"lineNumber":25,"author":{"gitId":"jushg"},"content":"        return \"The staff with IC \" + icNumber + \" is already in the record.\" + END_LINE;","lastModifiedDate":"2021-11-02"},{"lineNumber":26,"author":{"gitId":"jushg"},"content":"    }","lastModifiedDate":"2021-11-02"},{"lineNumber":27,"author":{"gitId":"jushg"},"content":"}","lastModifiedDate":"2021-10-18"}],"authorContributionMap":{"justinfidelis":1,"jushg":26}},{"path":"src/main/java/medbot/list/PatientList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jushg"},"content":"package medbot.list;","lastModifiedDate":"2021-10-18"},{"lineNumber":2,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":3,"author":{"gitId":"justinfidelis"},"content":"import static medbot.ui.Ui.END_LINE;","lastModifiedDate":"2021-10-24"},{"lineNumber":4,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":5,"author":{"gitId":"Kureans"},"content":"public class PatientList extends PersonList {","lastModifiedDate":"2021-10-16"},{"lineNumber":6,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":7,"author":{"gitId":"justinfidelis"},"content":"    @Override","lastModifiedDate":"2021-10-24"},{"lineNumber":8,"author":{"gitId":"justinfidelis"},"content":"    protected String getPersonNotFoundErrorMessage(int patientId) {","lastModifiedDate":"2021-10-24"},{"lineNumber":9,"author":{"gitId":"justinfidelis"},"content":"        return \"No patient with ID \" + patientId + \" found.\" + END_LINE;","lastModifiedDate":"2021-11-07"},{"lineNumber":10,"author":{"gitId":"Kureans"},"content":"    }","lastModifiedDate":"2021-10-16"},{"lineNumber":11,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":12,"author":{"gitId":"EricBryann"},"content":"    @Override","lastModifiedDate":"2021-10-25"},{"lineNumber":13,"author":{"gitId":"EricBryann"},"content":"    protected String getAlreadyHiddenErrorMessage(int patientId) {","lastModifiedDate":"2021-11-02"},{"lineNumber":14,"author":{"gitId":"EricBryann"},"content":"        return \"The patient with ID \" + patientId + \" is already hidden.\" + END_LINE;","lastModifiedDate":"2021-11-02"},{"lineNumber":15,"author":{"gitId":"EricBryann"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":16,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":17,"author":{"gitId":"EricBryann"},"content":"    @Override","lastModifiedDate":"2021-10-25"},{"lineNumber":18,"author":{"gitId":"EricBryann"},"content":"    protected String getAlreadyShownErrorMessage(int patientId) {","lastModifiedDate":"2021-11-02"},{"lineNumber":19,"author":{"gitId":"EricBryann"},"content":"        return \"The patient with ID \" + patientId + \" is already not-hidden.\" + END_LINE;","lastModifiedDate":"2021-11-02"},{"lineNumber":20,"author":{"gitId":"EricBryann"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":21,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":22,"author":{"gitId":"jushg"},"content":"    @Override","lastModifiedDate":"2021-11-02"},{"lineNumber":23,"author":{"gitId":"jushg"},"content":"    protected String getIcIsDuplicate(String icNumber) {","lastModifiedDate":"2021-11-02"},{"lineNumber":24,"author":{"gitId":"jushg"},"content":"        return \"The patient with IC \" + icNumber + \" is already in the record.\" + END_LINE;","lastModifiedDate":"2021-11-02"},{"lineNumber":25,"author":{"gitId":"jushg"},"content":"    }","lastModifiedDate":"2021-11-02"},{"lineNumber":26,"author":{"gitId":"justinfidelis"},"content":"}","lastModifiedDate":"2021-09-30"}],"authorContributionMap":{"justinfidelis":7,"jushg":5,"EricBryann":11,"Kureans":3}},{"path":"src/main/java/medbot/list/PersonList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jushg"},"content":"package medbot.list;","lastModifiedDate":"2021-10-18"},{"lineNumber":2,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":3,"author":{"gitId":"justinfidelis"},"content":"import medbot.Appointment;","lastModifiedDate":"2021-10-24"},{"lineNumber":4,"author":{"gitId":"justinfidelis"},"content":"import medbot.exceptions.MedBotException;","lastModifiedDate":"2021-10-18"},{"lineNumber":5,"author":{"gitId":"Kureans"},"content":"import medbot.person.Person;","lastModifiedDate":"2021-10-16"},{"lineNumber":6,"author":{"gitId":"Kureans"},"content":"import medbot.utilities.FilterType;","lastModifiedDate":"2021-10-25"},{"lineNumber":7,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":8,"author":{"gitId":"EricBryann"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-19"},{"lineNumber":9,"author":{"gitId":"CrimsonTitan79"},"content":"import java.util.LinkedList;","lastModifiedDate":"2021-10-26"},{"lineNumber":10,"author":{"gitId":"EricBryann"},"content":"import java.util.List;","lastModifiedDate":"2021-10-19"},{"lineNumber":11,"author":{"gitId":"CrimsonTitan79"},"content":"import java.util.SortedMap;","lastModifiedDate":"2021-10-26"},{"lineNumber":12,"author":{"gitId":"CrimsonTitan79"},"content":"import java.util.TreeMap;","lastModifiedDate":"2021-10-26"},{"lineNumber":13,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":14,"author":{"gitId":"jushg"},"content":"import static medbot.ui.Ui.END_LINE;","lastModifiedDate":"2021-10-22"},{"lineNumber":15,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":16,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":17,"author":{"gitId":"justinfidelis"},"content":"public abstract class PersonList {","lastModifiedDate":"2021-10-27"},{"lineNumber":18,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":19,"author":{"gitId":"CrimsonTitan79"},"content":"    //Sorted to ensure that persons will always be printed in ascending order of ID when storage is manipulated","lastModifiedDate":"2021-10-26"},{"lineNumber":20,"author":{"gitId":"CrimsonTitan79"},"content":"    private final SortedMap\u003cInteger, Person\u003e persons \u003d new TreeMap\u003c\u003e();","lastModifiedDate":"2021-10-26"},{"lineNumber":21,"author":{"gitId":"justinfidelis"},"content":"    private int lastId \u003d 1;","lastModifiedDate":"2021-10-27"},{"lineNumber":22,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":23,"author":{"gitId":"justinfidelis"},"content":"    /**","lastModifiedDate":"2021-10-24"},{"lineNumber":24,"author":{"gitId":"justinfidelis"},"content":"     * Adds the given person into the person list, allocates an id to the person and returns the id value.","lastModifiedDate":"2021-10-24"},{"lineNumber":25,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-10-24"},{"lineNumber":26,"author":{"gitId":"justinfidelis"},"content":"     * @param person Person to be added into the list","lastModifiedDate":"2021-10-24"},{"lineNumber":27,"author":{"gitId":"justinfidelis"},"content":"     * @return personId that was allocated to the person","lastModifiedDate":"2021-10-24"},{"lineNumber":28,"author":{"gitId":"justinfidelis"},"content":"     */","lastModifiedDate":"2021-10-24"},{"lineNumber":29,"author":{"gitId":"jushg"},"content":"    public int addPerson(Person person) throws MedBotException {","lastModifiedDate":"2021-11-02"},{"lineNumber":30,"author":{"gitId":"jushg"},"content":"        checkIcExists(person.getIcNumber());","lastModifiedDate":"2021-11-02"},{"lineNumber":31,"author":{"gitId":"justinfidelis"},"content":"        int personId \u003d person.getId();","lastModifiedDate":"2021-10-27"},{"lineNumber":32,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":33,"author":{"gitId":"CrimsonTitan79"},"content":"        //if person not created from storage data","lastModifiedDate":"2021-10-26"},{"lineNumber":34,"author":{"gitId":"CrimsonTitan79"},"content":"        if (personId \u003c\u003d 0) {","lastModifiedDate":"2021-10-26"},{"lineNumber":35,"author":{"gitId":"CrimsonTitan79"},"content":"            personId \u003d generatePersonId();","lastModifiedDate":"2021-10-26"},{"lineNumber":36,"author":{"gitId":"justinfidelis"},"content":"            person.setId(personId);","lastModifiedDate":"2021-10-27"},{"lineNumber":37,"author":{"gitId":"CrimsonTitan79"},"content":"        }","lastModifiedDate":"2021-10-26"},{"lineNumber":38,"author":{"gitId":"Kureans"},"content":"        persons.put(personId, person);","lastModifiedDate":"2021-10-16"},{"lineNumber":39,"author":{"gitId":"Kureans"},"content":"        return personId;","lastModifiedDate":"2021-10-16"},{"lineNumber":40,"author":{"gitId":"Kureans"},"content":"    }","lastModifiedDate":"2021-10-16"},{"lineNumber":41,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":42,"author":{"gitId":"justinfidelis"},"content":"    /**","lastModifiedDate":"2021-10-24"},{"lineNumber":43,"author":{"gitId":"justinfidelis"},"content":"     * Generates a non-random but unique id to be allocated to a person.","lastModifiedDate":"2021-10-24"},{"lineNumber":44,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-10-24"},{"lineNumber":45,"author":{"gitId":"justinfidelis"},"content":"     * @return a unique id to be allocated to a person","lastModifiedDate":"2021-10-24"},{"lineNumber":46,"author":{"gitId":"justinfidelis"},"content":"     */","lastModifiedDate":"2021-10-24"},{"lineNumber":47,"author":{"gitId":"justinfidelis"},"content":"    private int generatePersonId() {","lastModifiedDate":"2021-10-24"},{"lineNumber":48,"author":{"gitId":"justinfidelis"},"content":"        while (persons.containsKey(lastId)) {","lastModifiedDate":"2021-10-27"},{"lineNumber":49,"author":{"gitId":"justinfidelis"},"content":"            lastId++;","lastModifiedDate":"2021-10-24"},{"lineNumber":50,"author":{"gitId":"justinfidelis"},"content":"        }","lastModifiedDate":"2021-10-27"},{"lineNumber":51,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":52,"author":{"gitId":"justinfidelis"},"content":"        return lastId;","lastModifiedDate":"2021-10-24"},{"lineNumber":53,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":54,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":55,"author":{"gitId":"justinfidelis"},"content":"    /**","lastModifiedDate":"2021-10-26"},{"lineNumber":56,"author":{"gitId":"justinfidelis"},"content":"     * Returns a String containing the information of the person with the specified personId.","lastModifiedDate":"2021-10-26"},{"lineNumber":57,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-10-26"},{"lineNumber":58,"author":{"gitId":"justinfidelis"},"content":"     * @param personId the id of the person to search for","lastModifiedDate":"2021-10-26"},{"lineNumber":59,"author":{"gitId":"justinfidelis"},"content":"     * @return a String containing the person\u0027s information","lastModifiedDate":"2021-10-26"},{"lineNumber":60,"author":{"gitId":"justinfidelis"},"content":"     * @throws MedBotException if there is no person with that id","lastModifiedDate":"2021-10-26"},{"lineNumber":61,"author":{"gitId":"justinfidelis"},"content":"     */","lastModifiedDate":"2021-10-26"},{"lineNumber":62,"author":{"gitId":"CrimsonTitan79"},"content":"    public String getPersonInfo(int personId) throws MedBotException {","lastModifiedDate":"2021-10-26"},{"lineNumber":63,"author":{"gitId":"justinfidelis"},"content":"        checkPersonExists(personId);","lastModifiedDate":"2021-10-26"},{"lineNumber":64,"author":{"gitId":"CrimsonTitan79"},"content":"        return persons.get(personId).toString();","lastModifiedDate":"2021-10-26"},{"lineNumber":65,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":66,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":67,"author":{"gitId":"justinfidelis"},"content":"    /**","lastModifiedDate":"2021-10-24"},{"lineNumber":68,"author":{"gitId":"Kureans"},"content":"     * Returns a String containing the name of the person with the specified personId.","lastModifiedDate":"2021-11-02"},{"lineNumber":69,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-10-24"},{"lineNumber":70,"author":{"gitId":"justinfidelis"},"content":"     * @param personId the id of the person to search for","lastModifiedDate":"2021-10-24"},{"lineNumber":71,"author":{"gitId":"Kureans"},"content":"     * @return a String containing the person\u0027s name","lastModifiedDate":"2021-11-02"},{"lineNumber":72,"author":{"gitId":"justinfidelis"},"content":"     * @throws MedBotException if there is no person with that id","lastModifiedDate":"2021-10-24"},{"lineNumber":73,"author":{"gitId":"justinfidelis"},"content":"     */","lastModifiedDate":"2021-10-24"},{"lineNumber":74,"author":{"gitId":"CrimsonTitan79"},"content":"    public String getPersonName(int personId) throws MedBotException {","lastModifiedDate":"2021-10-26"},{"lineNumber":75,"author":{"gitId":"justinfidelis"},"content":"        checkPersonExists(personId);","lastModifiedDate":"2021-10-25"},{"lineNumber":76,"author":{"gitId":"CrimsonTitan79"},"content":"        return persons.get(personId).getName();","lastModifiedDate":"2021-10-26"},{"lineNumber":77,"author":{"gitId":"Kureans"},"content":"    }","lastModifiedDate":"2021-10-16"},{"lineNumber":78,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":79,"author":{"gitId":"Kureans"},"content":"    public boolean getPersonIsHidden(int personId) {","lastModifiedDate":"2021-11-02"},{"lineNumber":80,"author":{"gitId":"Kureans"},"content":"        return persons.get(personId).isHidden();","lastModifiedDate":"2021-11-02"},{"lineNumber":81,"author":{"gitId":"Kureans"},"content":"    }","lastModifiedDate":"2021-11-02"},{"lineNumber":82,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":83,"author":{"gitId":"justinfidelis"},"content":"    /**","lastModifiedDate":"2021-10-24"},{"lineNumber":84,"author":{"gitId":"justinfidelis"},"content":"     * Edits the specified fields on Person information with new values from the user.","lastModifiedDate":"2021-10-24"},{"lineNumber":85,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-10-24"},{"lineNumber":86,"author":{"gitId":"justinfidelis"},"content":"     * @param personId      The Person with information to change","lastModifiedDate":"2021-10-24"},{"lineNumber":87,"author":{"gitId":"justinfidelis"},"content":"     * @param newPersonData the new Person data to change to (except the null fields)","lastModifiedDate":"2021-10-24"},{"lineNumber":88,"author":{"gitId":"justinfidelis"},"content":"     * @throws MedBotException when the Person ID cannot be found","lastModifiedDate":"2021-10-24"},{"lineNumber":89,"author":{"gitId":"justinfidelis"},"content":"     */","lastModifiedDate":"2021-10-24"},{"lineNumber":90,"author":{"gitId":"justinfidelis"},"content":"    public void editPerson(int personId, Person newPersonData) throws MedBotException {","lastModifiedDate":"2021-10-24"},{"lineNumber":91,"author":{"gitId":"justinfidelis"},"content":"        checkPersonExists(personId);","lastModifiedDate":"2021-10-25"},{"lineNumber":92,"author":{"gitId":"justinfidelis"},"content":"        assert (personId \u003e 0);","lastModifiedDate":"2021-10-24"},{"lineNumber":93,"author":{"gitId":"justinfidelis"},"content":"        mergeEditPersonData(persons.get(personId), newPersonData);","lastModifiedDate":"2021-10-24"},{"lineNumber":94,"author":{"gitId":"Kureans"},"content":"    }","lastModifiedDate":"2021-10-16"},{"lineNumber":95,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":96,"author":{"gitId":"Kureans"},"content":"    /**","lastModifiedDate":"2021-10-16"},{"lineNumber":97,"author":{"gitId":"Kureans"},"content":"     * Replaces all values of the Person data that is non-null in the new inputted data.","lastModifiedDate":"2021-10-16"},{"lineNumber":98,"author":{"gitId":"Kureans"},"content":"     *","lastModifiedDate":"2021-10-16"},{"lineNumber":99,"author":{"gitId":"Kureans"},"content":"     * @param oldPersonData the old Person data in the system","lastModifiedDate":"2021-10-16"},{"lineNumber":100,"author":{"gitId":"Kureans"},"content":"     * @param newPersonData the new Person data inputted by the user","lastModifiedDate":"2021-10-16"},{"lineNumber":101,"author":{"gitId":"Kureans"},"content":"     */","lastModifiedDate":"2021-10-16"},{"lineNumber":102,"author":{"gitId":"jushg"},"content":"    private void mergeEditPersonData(Person oldPersonData, Person newPersonData) throws MedBotException {","lastModifiedDate":"2021-11-02"},{"lineNumber":103,"author":{"gitId":"Kureans"},"content":"        if (newPersonData.getIcNumber() !\u003d null) {","lastModifiedDate":"2021-10-16"},{"lineNumber":104,"author":{"gitId":"jushg"},"content":"            checkIcExists(newPersonData.getIcNumber());","lastModifiedDate":"2021-11-02"},{"lineNumber":105,"author":{"gitId":"Kureans"},"content":"            oldPersonData.setIcNumber(newPersonData.getIcNumber());","lastModifiedDate":"2021-10-16"},{"lineNumber":106,"author":{"gitId":"Kureans"},"content":"        }","lastModifiedDate":"2021-10-16"},{"lineNumber":107,"author":{"gitId":"jushg"},"content":"        if (newPersonData.getName() !\u003d null) {","lastModifiedDate":"2021-11-02"},{"lineNumber":108,"author":{"gitId":"jushg"},"content":"            oldPersonData.setName(newPersonData.getName());","lastModifiedDate":"2021-11-02"},{"lineNumber":109,"author":{"gitId":"jushg"},"content":"        }","lastModifiedDate":"2021-11-02"},{"lineNumber":110,"author":{"gitId":"Kureans"},"content":"        if (newPersonData.getEmailAddress() !\u003d null) {","lastModifiedDate":"2021-10-16"},{"lineNumber":111,"author":{"gitId":"Kureans"},"content":"            oldPersonData.setEmailAddress(newPersonData.getEmailAddress());","lastModifiedDate":"2021-10-16"},{"lineNumber":112,"author":{"gitId":"Kureans"},"content":"        }","lastModifiedDate":"2021-10-16"},{"lineNumber":113,"author":{"gitId":"Kureans"},"content":"        if (newPersonData.getPhoneNumber() !\u003d null) {","lastModifiedDate":"2021-10-16"},{"lineNumber":114,"author":{"gitId":"Kureans"},"content":"            oldPersonData.setPhoneNumber(newPersonData.getPhoneNumber());","lastModifiedDate":"2021-10-16"},{"lineNumber":115,"author":{"gitId":"Kureans"},"content":"        }","lastModifiedDate":"2021-10-16"},{"lineNumber":116,"author":{"gitId":"Kureans"},"content":"        if (newPersonData.getResidentialAddress() !\u003d null) {","lastModifiedDate":"2021-10-16"},{"lineNumber":117,"author":{"gitId":"Kureans"},"content":"            oldPersonData.setResidentialAddress(newPersonData.getResidentialAddress());","lastModifiedDate":"2021-10-16"},{"lineNumber":118,"author":{"gitId":"Kureans"},"content":"        }","lastModifiedDate":"2021-10-16"},{"lineNumber":119,"author":{"gitId":"Kureans"},"content":"    }","lastModifiedDate":"2021-10-16"},{"lineNumber":120,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":121,"author":{"gitId":"Kureans"},"content":"    /**","lastModifiedDate":"2021-10-16"},{"lineNumber":122,"author":{"gitId":"Kureans"},"content":"     * Deletes the specified Person.","lastModifiedDate":"2021-10-16"},{"lineNumber":123,"author":{"gitId":"Kureans"},"content":"     *","lastModifiedDate":"2021-10-16"},{"lineNumber":124,"author":{"gitId":"Kureans"},"content":"     * @param personId The Person to delete.","lastModifiedDate":"2021-10-16"},{"lineNumber":125,"author":{"gitId":"Kureans"},"content":"     * @throws MedBotException when the Person ID cannot be found.","lastModifiedDate":"2021-10-16"},{"lineNumber":126,"author":{"gitId":"Kureans"},"content":"     */","lastModifiedDate":"2021-10-16"},{"lineNumber":127,"author":{"gitId":"Kureans"},"content":"    public void deletePerson(int personId) throws MedBotException {","lastModifiedDate":"2021-10-16"},{"lineNumber":128,"author":{"gitId":"justinfidelis"},"content":"        checkPersonExists(personId);","lastModifiedDate":"2021-10-25"},{"lineNumber":129,"author":{"gitId":"EricBryann"},"content":"        assert (personId \u003e 0);","lastModifiedDate":"2021-10-19"},{"lineNumber":130,"author":{"gitId":"Kureans"},"content":"        persons.remove(personId);","lastModifiedDate":"2021-10-16"},{"lineNumber":131,"author":{"gitId":"Kureans"},"content":"    }","lastModifiedDate":"2021-10-16"},{"lineNumber":132,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":133,"author":{"gitId":"EricBryann"},"content":"    /**","lastModifiedDate":"2021-10-19"},{"lineNumber":134,"author":{"gitId":"EricBryann"},"content":"     * Filters persons in the list based on specified attributes.","lastModifiedDate":"2021-10-19"},{"lineNumber":135,"author":{"gitId":"EricBryann"},"content":"     *","lastModifiedDate":"2021-10-19"},{"lineNumber":136,"author":{"gitId":"EricBryann"},"content":"     * @param parameters The attributes to filter persons.","lastModifiedDate":"2021-10-19"},{"lineNumber":137,"author":{"gitId":"EricBryann"},"content":"     * @return The filtered persons.","lastModifiedDate":"2021-10-19"},{"lineNumber":138,"author":{"gitId":"EricBryann"},"content":"     */","lastModifiedDate":"2021-10-19"},{"lineNumber":139,"author":{"gitId":"EricBryann"},"content":"    public List\u003cString\u003e findPersons(String[] parameters) throws MedBotException {","lastModifiedDate":"2021-11-02"},{"lineNumber":140,"author":{"gitId":"EricBryann"},"content":"        List\u003cString\u003e filteredPersons \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-19"},{"lineNumber":141,"author":{"gitId":"EricBryann"},"content":"        for (int key : persons.keySet()) {","lastModifiedDate":"2021-10-19"},{"lineNumber":142,"author":{"gitId":"EricBryann"},"content":"            Person currentPerson \u003d persons.get(key);","lastModifiedDate":"2021-10-19"},{"lineNumber":143,"author":{"gitId":"EricBryann"},"content":"            if (currentPerson.containsAllParameters(parameters)) {","lastModifiedDate":"2021-10-19"},{"lineNumber":144,"author":{"gitId":"EricBryann"},"content":"                filteredPersons.add(currentPerson.getInfoInTableFormat());","lastModifiedDate":"2021-10-19"},{"lineNumber":145,"author":{"gitId":"EricBryann"},"content":"            }","lastModifiedDate":"2021-10-19"},{"lineNumber":146,"author":{"gitId":"EricBryann"},"content":"        }","lastModifiedDate":"2021-10-19"},{"lineNumber":147,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":148,"author":{"gitId":"EricBryann"},"content":"        return filteredPersons;","lastModifiedDate":"2021-10-19"},{"lineNumber":149,"author":{"gitId":"EricBryann"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":150,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":151,"author":{"gitId":"Kureans"},"content":"    /**","lastModifiedDate":"2021-10-16"},{"lineNumber":152,"author":{"gitId":"EricBryann"},"content":"     * Returns a String that contains information of all hiddren or not-hidden persons.","lastModifiedDate":"2021-11-02"},{"lineNumber":153,"author":{"gitId":"Kureans"},"content":"     *","lastModifiedDate":"2021-10-16"},{"lineNumber":154,"author":{"gitId":"EricBryann"},"content":"     * @param getHiddenPersons The boolean to indicate whether to get hidden or not-hidden persons.","lastModifiedDate":"2021-11-02"},{"lineNumber":155,"author":{"gitId":"EricBryann"},"content":"     * @return String that contains information of all hidden or not-hidden persons","lastModifiedDate":"2021-11-02"},{"lineNumber":156,"author":{"gitId":"Kureans"},"content":"     */","lastModifiedDate":"2021-10-16"},{"lineNumber":157,"author":{"gitId":"EricBryann"},"content":"    public String listPersons(boolean getHiddenPersons) {","lastModifiedDate":"2021-11-02"},{"lineNumber":158,"author":{"gitId":"Kureans"},"content":"        String output \u003d \"\";","lastModifiedDate":"2021-10-16"},{"lineNumber":159,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":160,"author":{"gitId":"Kureans"},"content":"        for (int key : persons.keySet()) {","lastModifiedDate":"2021-10-16"},{"lineNumber":161,"author":{"gitId":"EricBryann"},"content":"            boolean isPersonHidden \u003d persons.get(key).isHidden();","lastModifiedDate":"2021-11-02"},{"lineNumber":162,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":163,"author":{"gitId":"EricBryann"},"content":"            if (isPersonHidden \u003d\u003d getHiddenPersons) {","lastModifiedDate":"2021-11-02"},{"lineNumber":164,"author":{"gitId":"jushg"},"content":"                output +\u003d persons.get(key).getInfoInTableFormat() + END_LINE;","lastModifiedDate":"2021-10-22"},{"lineNumber":165,"author":{"gitId":"Kureans"},"content":"            }","lastModifiedDate":"2021-10-16"},{"lineNumber":166,"author":{"gitId":"EricBryann"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":167,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":168,"author":{"gitId":"Kureans"},"content":"        return output;","lastModifiedDate":"2021-10-16"},{"lineNumber":169,"author":{"gitId":"Kureans"},"content":"    }","lastModifiedDate":"2021-10-16"},{"lineNumber":170,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":171,"author":{"gitId":"jushg"},"content":"    /**","lastModifiedDate":"2021-10-27"},{"lineNumber":172,"author":{"gitId":"EricBryann"},"content":"     * Hide a person in the list.","lastModifiedDate":"2021-11-02"},{"lineNumber":173,"author":{"gitId":"jushg"},"content":"     *","lastModifiedDate":"2021-10-27"},{"lineNumber":174,"author":{"gitId":"EricBryann"},"content":"     * @param personId the id of the person to hide.","lastModifiedDate":"2021-11-02"},{"lineNumber":175,"author":{"gitId":"EricBryann"},"content":"     * @throws MedBotException when the person have already been hidden.","lastModifiedDate":"2021-11-02"},{"lineNumber":176,"author":{"gitId":"jushg"},"content":"     */","lastModifiedDate":"2021-10-27"},{"lineNumber":177,"author":{"gitId":"EricBryann"},"content":"    public void hidePerson(int personId) throws MedBotException {","lastModifiedDate":"2021-11-02"},{"lineNumber":178,"author":{"gitId":"justinfidelis"},"content":"        checkPersonExists(personId);","lastModifiedDate":"2021-10-25"},{"lineNumber":179,"author":{"gitId":"EricBryann"},"content":"        boolean isPersonHidden \u003d persons.get(personId).isHidden();","lastModifiedDate":"2021-11-02"},{"lineNumber":180,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":181,"author":{"gitId":"EricBryann"},"content":"        if (isPersonHidden) {","lastModifiedDate":"2021-11-02"},{"lineNumber":182,"author":{"gitId":"EricBryann"},"content":"            throw new MedBotException(getAlreadyHiddenErrorMessage(personId));","lastModifiedDate":"2021-11-02"},{"lineNumber":183,"author":{"gitId":"justinfidelis"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":184,"author":{"gitId":"EricBryann"},"content":"        persons.get(personId).hide();","lastModifiedDate":"2021-11-02"},{"lineNumber":185,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":186,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":187,"author":{"gitId":"jushg"},"content":"    /**","lastModifiedDate":"2021-10-27"},{"lineNumber":188,"author":{"gitId":"EricBryann"},"content":"     * Shows a hidden person in the list.","lastModifiedDate":"2021-11-02"},{"lineNumber":189,"author":{"gitId":"jushg"},"content":"     *","lastModifiedDate":"2021-10-27"},{"lineNumber":190,"author":{"gitId":"EricBryann"},"content":"     * @param personId the id of the person to show.","lastModifiedDate":"2021-11-02"},{"lineNumber":191,"author":{"gitId":"EricBryann"},"content":"     * @throws MedBotException when the person is not hidden.","lastModifiedDate":"2021-11-02"},{"lineNumber":192,"author":{"gitId":"jushg"},"content":"     */","lastModifiedDate":"2021-10-27"},{"lineNumber":193,"author":{"gitId":"EricBryann"},"content":"    public void showPerson(int personId) throws MedBotException {","lastModifiedDate":"2021-11-02"},{"lineNumber":194,"author":{"gitId":"justinfidelis"},"content":"        checkPersonExists(personId);","lastModifiedDate":"2021-10-25"},{"lineNumber":195,"author":{"gitId":"EricBryann"},"content":"        boolean isPersonHidden \u003d persons.get(personId).isHidden();","lastModifiedDate":"2021-11-02"},{"lineNumber":196,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":197,"author":{"gitId":"EricBryann"},"content":"        if (!isPersonHidden) {","lastModifiedDate":"2021-11-02"},{"lineNumber":198,"author":{"gitId":"EricBryann"},"content":"            throw new MedBotException(getAlreadyShownErrorMessage(personId));","lastModifiedDate":"2021-11-02"},{"lineNumber":199,"author":{"gitId":"EricBryann"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":200,"author":{"gitId":"EricBryann"},"content":"        persons.get(personId).show();","lastModifiedDate":"2021-11-02"},{"lineNumber":201,"author":{"gitId":"EricBryann"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":202,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":203,"author":{"gitId":"justinfidelis"},"content":"    /**","lastModifiedDate":"2021-10-24"},{"lineNumber":204,"author":{"gitId":"justinfidelis"},"content":"     * For the person with the specified personId, returns the appointmentId of the appointment at the specified","lastModifiedDate":"2021-10-24"},{"lineNumber":205,"author":{"gitId":"justinfidelis"},"content":"     * time code, or -1 if there is none.","lastModifiedDate":"2021-10-24"},{"lineNumber":206,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-10-24"},{"lineNumber":207,"author":{"gitId":"justinfidelis"},"content":"     * @param personId     the id of the person to search for","lastModifiedDate":"2021-10-24"},{"lineNumber":208,"author":{"gitId":"justinfidelis"},"content":"     * @param dateTimeCode the dateTimeCode to search for","lastModifiedDate":"2021-10-24"},{"lineNumber":209,"author":{"gitId":"justinfidelis"},"content":"     * @return the appointmentId of the appointment with that dateTimeCode, or -1 if there is none","lastModifiedDate":"2021-10-24"},{"lineNumber":210,"author":{"gitId":"justinfidelis"},"content":"     * @throws MedBotException if there is no person with the specified personId","lastModifiedDate":"2021-10-24"},{"lineNumber":211,"author":{"gitId":"justinfidelis"},"content":"     */","lastModifiedDate":"2021-10-24"},{"lineNumber":212,"author":{"gitId":"justinfidelis"},"content":"    public int getAppointmentId(int personId, int dateTimeCode) throws MedBotException {","lastModifiedDate":"2021-10-24"},{"lineNumber":213,"author":{"gitId":"justinfidelis"},"content":"        checkPersonExists(personId);","lastModifiedDate":"2021-10-25"},{"lineNumber":214,"author":{"gitId":"justinfidelis"},"content":"        return persons.get(personId).getAppointmentId(dateTimeCode);","lastModifiedDate":"2021-10-24"},{"lineNumber":215,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":216,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":217,"author":{"gitId":"justinfidelis"},"content":"    /**","lastModifiedDate":"2021-10-25"},{"lineNumber":218,"author":{"gitId":"justinfidelis"},"content":"     * For the person with the specified personId, returns an LinkedList of the appointmentId of all appointments.","lastModifiedDate":"2021-10-25"},{"lineNumber":219,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-10-25"},{"lineNumber":220,"author":{"gitId":"justinfidelis"},"content":"     * @param personId the id of the person to search for","lastModifiedDate":"2021-10-25"},{"lineNumber":221,"author":{"gitId":"justinfidelis"},"content":"     * @return LinkedList of the appointmentId of all appointments for the specified person","lastModifiedDate":"2021-10-25"},{"lineNumber":222,"author":{"gitId":"justinfidelis"},"content":"     * @throws MedBotException if there is no person with the specified personId","lastModifiedDate":"2021-10-25"},{"lineNumber":223,"author":{"gitId":"justinfidelis"},"content":"     */","lastModifiedDate":"2021-10-25"},{"lineNumber":224,"author":{"gitId":"justinfidelis"},"content":"    public LinkedList\u003cInteger\u003e getAllAppointmentIds(int personId) throws MedBotException {","lastModifiedDate":"2021-10-25"},{"lineNumber":225,"author":{"gitId":"justinfidelis"},"content":"        checkPersonExists(personId);","lastModifiedDate":"2021-10-25"},{"lineNumber":226,"author":{"gitId":"justinfidelis"},"content":"        return persons.get(personId).getAllAppointmentIds();","lastModifiedDate":"2021-10-25"},{"lineNumber":227,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":228,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":229,"author":{"gitId":"justinfidelis"},"content":"    /**","lastModifiedDate":"2021-10-24"},{"lineNumber":230,"author":{"gitId":"justinfidelis"},"content":"     * For the person with the specified personId, adds the appointment into their appointment list.","lastModifiedDate":"2021-10-24"},{"lineNumber":231,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-10-24"},{"lineNumber":232,"author":{"gitId":"justinfidelis"},"content":"     * @param personId    the id of the person to whom the appointment will be added","lastModifiedDate":"2021-10-24"},{"lineNumber":233,"author":{"gitId":"justinfidelis"},"content":"     * @param appointment the appointment to be added","lastModifiedDate":"2021-10-24"},{"lineNumber":234,"author":{"gitId":"justinfidelis"},"content":"     * @throws MedBotException if there is no person with the specified personId","lastModifiedDate":"2021-10-24"},{"lineNumber":235,"author":{"gitId":"justinfidelis"},"content":"     */","lastModifiedDate":"2021-10-24"},{"lineNumber":236,"author":{"gitId":"justinfidelis"},"content":"    public void addAppointment(int personId, Appointment appointment) throws MedBotException {","lastModifiedDate":"2021-10-24"},{"lineNumber":237,"author":{"gitId":"justinfidelis"},"content":"        checkPersonExists(personId);","lastModifiedDate":"2021-10-25"},{"lineNumber":238,"author":{"gitId":"justinfidelis"},"content":"        persons.get(personId).addAppointment(appointment);","lastModifiedDate":"2021-10-24"},{"lineNumber":239,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":240,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":241,"author":{"gitId":"justinfidelis"},"content":"    /**","lastModifiedDate":"2021-10-24"},{"lineNumber":242,"author":{"gitId":"justinfidelis"},"content":"     * For the person with the specified personId, deletes the appointment with the specified dateTimeCode.","lastModifiedDate":"2021-10-24"},{"lineNumber":243,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-10-24"},{"lineNumber":244,"author":{"gitId":"justinfidelis"},"content":"     * @param personId     the id of the person whose appointment will be deleted","lastModifiedDate":"2021-10-24"},{"lineNumber":245,"author":{"gitId":"justinfidelis"},"content":"     * @param dateTimeCode the dateTimeCode of the appointment to be deleted","lastModifiedDate":"2021-10-24"},{"lineNumber":246,"author":{"gitId":"justinfidelis"},"content":"     * @throws MedBotException if there is no person with the specified personId, or if there is no appointment at","lastModifiedDate":"2021-10-24"},{"lineNumber":247,"author":{"gitId":"justinfidelis"},"content":"     *                         the specified dateTimeCode for that person","lastModifiedDate":"2021-10-24"},{"lineNumber":248,"author":{"gitId":"justinfidelis"},"content":"     */","lastModifiedDate":"2021-10-24"},{"lineNumber":249,"author":{"gitId":"justinfidelis"},"content":"    public void deleteAppointment(int personId, int dateTimeCode) throws MedBotException {","lastModifiedDate":"2021-10-24"},{"lineNumber":250,"author":{"gitId":"justinfidelis"},"content":"        checkPersonExists(personId);","lastModifiedDate":"2021-10-25"},{"lineNumber":251,"author":{"gitId":"justinfidelis"},"content":"        persons.get(personId).deleteAppointment(dateTimeCode);","lastModifiedDate":"2021-10-24"},{"lineNumber":252,"author":{"gitId":"Kureans"},"content":"    }","lastModifiedDate":"2021-10-16"},{"lineNumber":253,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":254,"author":{"gitId":"justinfidelis"},"content":"    /**","lastModifiedDate":"2021-10-24"},{"lineNumber":255,"author":{"gitId":"CrimsonTitan79"},"content":"     * Returns a String containing the information of the appointments of the person with the specified personId.","lastModifiedDate":"2021-10-26"},{"lineNumber":256,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-10-24"},{"lineNumber":257,"author":{"gitId":"justinfidelis"},"content":"     * @param personId the id of the person whose appointments will be listed","lastModifiedDate":"2021-10-24"},{"lineNumber":258,"author":{"gitId":"CrimsonTitan79"},"content":"     * @return a String containing the information of the person\u0027s appointments","lastModifiedDate":"2021-10-26"},{"lineNumber":259,"author":{"gitId":"justinfidelis"},"content":"     * @throws MedBotException if there is no person with the specified personId","lastModifiedDate":"2021-10-24"},{"lineNumber":260,"author":{"gitId":"justinfidelis"},"content":"     */","lastModifiedDate":"2021-10-24"},{"lineNumber":261,"author":{"gitId":"justinfidelis"},"content":"    public List\u003cInteger\u003e listAppointments(int personId, FilterType filterType, int dateTimeCode)","lastModifiedDate":"2021-10-26"},{"lineNumber":262,"author":{"gitId":"justinfidelis"},"content":"            throws MedBotException {","lastModifiedDate":"2021-10-26"},{"lineNumber":263,"author":{"gitId":"justinfidelis"},"content":"        checkPersonExists(personId);","lastModifiedDate":"2021-10-25"},{"lineNumber":264,"author":{"gitId":"justinfidelis"},"content":"        return persons.get(personId).listAppointments(filterType, dateTimeCode);","lastModifiedDate":"2021-10-25"},{"lineNumber":265,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":266,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":267,"author":{"gitId":"justinfidelis"},"content":"    /**","lastModifiedDate":"2021-10-25"},{"lineNumber":268,"author":{"gitId":"justinfidelis"},"content":"     * Checks if a person with the specified id is present in the list.","lastModifiedDate":"2021-10-25"},{"lineNumber":269,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-10-25"},{"lineNumber":270,"author":{"gitId":"justinfidelis"},"content":"     * @param personId the id of the person to search for","lastModifiedDate":"2021-10-25"},{"lineNumber":271,"author":{"gitId":"justinfidelis"},"content":"     * @throws MedBotException if there is no person with the specified personId","lastModifiedDate":"2021-10-25"},{"lineNumber":272,"author":{"gitId":"justinfidelis"},"content":"     */","lastModifiedDate":"2021-10-25"},{"lineNumber":273,"author":{"gitId":"justinfidelis"},"content":"    private void checkPersonExists(int personId) throws MedBotException {","lastModifiedDate":"2021-10-25"},{"lineNumber":274,"author":{"gitId":"justinfidelis"},"content":"        if (!persons.containsKey(personId)) {","lastModifiedDate":"2021-10-24"},{"lineNumber":275,"author":{"gitId":"justinfidelis"},"content":"            throw new MedBotException(getPersonNotFoundErrorMessage(personId));","lastModifiedDate":"2021-10-24"},{"lineNumber":276,"author":{"gitId":"justinfidelis"},"content":"        }","lastModifiedDate":"2021-10-24"},{"lineNumber":277,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":278,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":279,"author":{"gitId":"jushg"},"content":"    /**","lastModifiedDate":"2021-11-02"},{"lineNumber":280,"author":{"gitId":"jushg"},"content":"     * Checks if a specified ic is present in the list.","lastModifiedDate":"2021-11-02"},{"lineNumber":281,"author":{"gitId":"jushg"},"content":"     *","lastModifiedDate":"2021-11-02"},{"lineNumber":282,"author":{"gitId":"jushg"},"content":"     * @param icNumber the ic number to search for","lastModifiedDate":"2021-11-02"},{"lineNumber":283,"author":{"gitId":"jushg"},"content":"     * @throws MedBotException if the specified IC exists in the list already.","lastModifiedDate":"2021-11-02"},{"lineNumber":284,"author":{"gitId":"jushg"},"content":"     */","lastModifiedDate":"2021-11-02"},{"lineNumber":285,"author":{"gitId":"jushg"},"content":"    private void checkIcExists(String icNumber) throws MedBotException {","lastModifiedDate":"2021-11-02"},{"lineNumber":286,"author":{"gitId":"jushg"},"content":"        if (icNumber.isBlank()) {","lastModifiedDate":"2021-11-02"},{"lineNumber":287,"author":{"gitId":"jushg"},"content":"            return;","lastModifiedDate":"2021-11-02"},{"lineNumber":288,"author":{"gitId":"jushg"},"content":"        }","lastModifiedDate":"2021-11-02"},{"lineNumber":289,"author":{"gitId":"jushg"},"content":"        for (int key : persons.keySet()) {","lastModifiedDate":"2021-11-02"},{"lineNumber":290,"author":{"gitId":"jushg"},"content":"            Person currentPerson \u003d persons.get(key);","lastModifiedDate":"2021-11-02"},{"lineNumber":291,"author":{"gitId":"jushg"},"content":"            if (currentPerson.getIcNumber().equals(icNumber)) {","lastModifiedDate":"2021-11-02"},{"lineNumber":292,"author":{"gitId":"jushg"},"content":"                throw new MedBotException(getIcIsDuplicate(icNumber));","lastModifiedDate":"2021-11-02"},{"lineNumber":293,"author":{"gitId":"jushg"},"content":"            }","lastModifiedDate":"2021-11-02"},{"lineNumber":294,"author":{"gitId":"jushg"},"content":"        }","lastModifiedDate":"2021-11-02"},{"lineNumber":295,"author":{"gitId":"jushg"},"content":"    }","lastModifiedDate":"2021-11-02"},{"lineNumber":296,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":297,"author":{"gitId":"jushg"},"content":"    /**","lastModifiedDate":"2021-11-02"},{"lineNumber":298,"author":{"gitId":"jushg"},"content":"     * Generates the exception message for MedBotExceptions when the recently added Ic Number exists in the record.","lastModifiedDate":"2021-11-02"},{"lineNumber":299,"author":{"gitId":"jushg"},"content":"     *","lastModifiedDate":"2021-11-02"},{"lineNumber":300,"author":{"gitId":"jushg"},"content":"     * \u003cp\u003eIs overrode by subclasses","lastModifiedDate":"2021-11-02"},{"lineNumber":301,"author":{"gitId":"jushg"},"content":"     *","lastModifiedDate":"2021-11-02"},{"lineNumber":302,"author":{"gitId":"jushg"},"content":"     * @param icNumber the newly added IC number.","lastModifiedDate":"2021-11-02"},{"lineNumber":303,"author":{"gitId":"jushg"},"content":"     * @return exception message when the recently added Ic Number exists in the record.","lastModifiedDate":"2021-11-02"},{"lineNumber":304,"author":{"gitId":"jushg"},"content":"     */","lastModifiedDate":"2021-11-02"},{"lineNumber":305,"author":{"gitId":"jushg"},"content":"    protected abstract String getIcIsDuplicate(String icNumber);","lastModifiedDate":"2021-11-02"},{"lineNumber":306,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":307,"author":{"gitId":"justinfidelis"},"content":"    /**","lastModifiedDate":"2021-10-24"},{"lineNumber":308,"author":{"gitId":"justinfidelis"},"content":"     * Generates the exception message for MedBotExceptions when no person with the specified id is found.","lastModifiedDate":"2021-10-24"},{"lineNumber":309,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-10-24"},{"lineNumber":310,"author":{"gitId":"justinfidelis"},"content":"     * \u003cp\u003eIs overrode by subclasses","lastModifiedDate":"2021-10-24"},{"lineNumber":311,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-10-24"},{"lineNumber":312,"author":{"gitId":"justinfidelis"},"content":"     * @param personId id of the person who was not found","lastModifiedDate":"2021-10-24"},{"lineNumber":313,"author":{"gitId":"justinfidelis"},"content":"     * @return exception message when no person with the specified id is found","lastModifiedDate":"2021-10-24"},{"lineNumber":314,"author":{"gitId":"justinfidelis"},"content":"     */","lastModifiedDate":"2021-10-24"},{"lineNumber":315,"author":{"gitId":"justinfidelis"},"content":"    protected abstract String getPersonNotFoundErrorMessage(int personId);","lastModifiedDate":"2021-10-24"},{"lineNumber":316,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":317,"author":{"gitId":"EricBryann"},"content":"    /**","lastModifiedDate":"2021-10-25"},{"lineNumber":318,"author":{"gitId":"EricBryann"},"content":"     * Generates the exception message for MedBotExceptions when the person is already hidden.","lastModifiedDate":"2021-11-02"},{"lineNumber":319,"author":{"gitId":"EricBryann"},"content":"     *","lastModifiedDate":"2021-10-25"},{"lineNumber":320,"author":{"gitId":"EricBryann"},"content":"     * \u003cp\u003eIs overrode by subclasses","lastModifiedDate":"2021-10-25"},{"lineNumber":321,"author":{"gitId":"EricBryann"},"content":"     *","lastModifiedDate":"2021-10-25"},{"lineNumber":322,"author":{"gitId":"EricBryann"},"content":"     * @param personId id of the person who is already hidden","lastModifiedDate":"2021-11-02"},{"lineNumber":323,"author":{"gitId":"EricBryann"},"content":"     * @return exception message when the person is already hidden","lastModifiedDate":"2021-11-02"},{"lineNumber":324,"author":{"gitId":"EricBryann"},"content":"     */","lastModifiedDate":"2021-10-25"},{"lineNumber":325,"author":{"gitId":"EricBryann"},"content":"    protected abstract String getAlreadyHiddenErrorMessage(int personId);","lastModifiedDate":"2021-11-02"},{"lineNumber":326,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":327,"author":{"gitId":"EricBryann"},"content":"    /**","lastModifiedDate":"2021-10-25"},{"lineNumber":328,"author":{"gitId":"EricBryann"},"content":"     * Generates the exception message for MedBotExceptions when the person is already shown.","lastModifiedDate":"2021-11-02"},{"lineNumber":329,"author":{"gitId":"EricBryann"},"content":"     *","lastModifiedDate":"2021-10-25"},{"lineNumber":330,"author":{"gitId":"EricBryann"},"content":"     * \u003cp\u003eIs overrode by subclasses","lastModifiedDate":"2021-10-25"},{"lineNumber":331,"author":{"gitId":"EricBryann"},"content":"     *","lastModifiedDate":"2021-10-25"},{"lineNumber":332,"author":{"gitId":"EricBryann"},"content":"     * @param personId id of the person who is already shown","lastModifiedDate":"2021-11-02"},{"lineNumber":333,"author":{"gitId":"EricBryann"},"content":"     * @return exception message when the person is already shown","lastModifiedDate":"2021-11-02"},{"lineNumber":334,"author":{"gitId":"EricBryann"},"content":"     */","lastModifiedDate":"2021-10-25"},{"lineNumber":335,"author":{"gitId":"EricBryann"},"content":"    protected abstract String getAlreadyShownErrorMessage(int personId);","lastModifiedDate":"2021-11-02"},{"lineNumber":336,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":337,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":338,"author":{"gitId":"Kureans"},"content":"    /**","lastModifiedDate":"2021-10-16"},{"lineNumber":339,"author":{"gitId":"Kureans"},"content":"     * Get storageString for all persons.","lastModifiedDate":"2021-10-16"},{"lineNumber":340,"author":{"gitId":"Kureans"},"content":"     *","lastModifiedDate":"2021-10-16"},{"lineNumber":341,"author":{"gitId":"Kureans"},"content":"     * @return storageString of all persons","lastModifiedDate":"2021-10-16"},{"lineNumber":342,"author":{"gitId":"Kureans"},"content":"     */","lastModifiedDate":"2021-10-16"},{"lineNumber":343,"author":{"gitId":"Kureans"},"content":"    public String getStorageString() {","lastModifiedDate":"2021-10-16"},{"lineNumber":344,"author":{"gitId":"Kureans"},"content":"        String output \u003d \"\";","lastModifiedDate":"2021-10-16"},{"lineNumber":345,"author":{"gitId":"Kureans"},"content":"        for (int key : persons.keySet()) {","lastModifiedDate":"2021-10-16"},{"lineNumber":346,"author":{"gitId":"Kureans"},"content":"            Person person \u003d persons.get(key);","lastModifiedDate":"2021-10-16"},{"lineNumber":347,"author":{"gitId":"Kureans"},"content":"            String personStorageString \u003d person.getStorageString();","lastModifiedDate":"2021-10-16"},{"lineNumber":348,"author":{"gitId":"jushg"},"content":"            output +\u003d personStorageString + END_LINE;","lastModifiedDate":"2021-10-22"},{"lineNumber":349,"author":{"gitId":"Kureans"},"content":"        }","lastModifiedDate":"2021-10-16"},{"lineNumber":350,"author":{"gitId":"Kureans"},"content":"        return output;","lastModifiedDate":"2021-10-16"},{"lineNumber":351,"author":{"gitId":"Kureans"},"content":"    }","lastModifiedDate":"2021-10-16"},{"lineNumber":352,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":353,"author":{"gitId":"Kureans"},"content":"    /**","lastModifiedDate":"2021-10-16"},{"lineNumber":354,"author":{"gitId":"justinfidelis"},"content":"     * Set lastId to newLastId.","lastModifiedDate":"2021-10-27"},{"lineNumber":355,"author":{"gitId":"Kureans"},"content":"     *","lastModifiedDate":"2021-10-16"},{"lineNumber":356,"author":{"gitId":"Kureans"},"content":"     * @param newLastId lastId to be set to this","lastModifiedDate":"2021-10-16"},{"lineNumber":357,"author":{"gitId":"Kureans"},"content":"     */","lastModifiedDate":"2021-10-16"},{"lineNumber":358,"author":{"gitId":"Kureans"},"content":"    public void setLastId(int newLastId) {","lastModifiedDate":"2021-10-16"},{"lineNumber":359,"author":{"gitId":"Kureans"},"content":"        lastId \u003d newLastId;","lastModifiedDate":"2021-10-16"},{"lineNumber":360,"author":{"gitId":"Kureans"},"content":"    }","lastModifiedDate":"2021-10-16"},{"lineNumber":361,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":362,"author":{"gitId":"CrimsonTitan79"},"content":"    public int getLastId() {","lastModifiedDate":"2021-10-25"},{"lineNumber":363,"author":{"gitId":"CrimsonTitan79"},"content":"        return lastId;","lastModifiedDate":"2021-10-25"},{"lineNumber":364,"author":{"gitId":"CrimsonTitan79"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":365,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":366,"author":{"gitId":"Kureans"},"content":"}","lastModifiedDate":"2021-10-16"}],"authorContributionMap":{"justinfidelis":140,"CrimsonTitan79":23,"jushg":45,"Kureans":84,"EricBryann":74}},{"path":"src/main/java/medbot/list/PersonalAppointmentList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"justinfidelis"},"content":"package medbot.list;","lastModifiedDate":"2021-10-21"},{"lineNumber":2,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":3,"author":{"gitId":"CrimsonTitan79"},"content":"import medbot.Appointment;","lastModifiedDate":"2021-10-26"},{"lineNumber":4,"author":{"gitId":"CrimsonTitan79"},"content":"import medbot.exceptions.MedBotException;","lastModifiedDate":"2021-10-26"},{"lineNumber":5,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":6,"author":{"gitId":"Kureans"},"content":"import java.util.Iterator;","lastModifiedDate":"2021-10-22"},{"lineNumber":7,"author":{"gitId":"justinfidelis"},"content":"import java.util.LinkedList;","lastModifiedDate":"2021-10-25"},{"lineNumber":8,"author":{"gitId":"justinfidelis"},"content":"import java.util.List;","lastModifiedDate":"2021-10-26"},{"lineNumber":9,"author":{"gitId":"Kureans"},"content":"import java.util.NavigableSet;","lastModifiedDate":"2021-10-22"},{"lineNumber":10,"author":{"gitId":"Kureans"},"content":"import java.util.TreeSet;","lastModifiedDate":"2021-10-22"},{"lineNumber":11,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":12,"author":{"gitId":"Kureans"},"content":"//@@author Kureans","lastModifiedDate":"2021-10-29"},{"lineNumber":13,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":14,"author":{"gitId":"Kureans"},"content":"public class PersonalAppointmentList {","lastModifiedDate":"2021-10-21"},{"lineNumber":15,"author":{"gitId":"Kureans"},"content":"    private static final String ERROR_APPOINTMENT_ID_NOT_SET \u003d \"Appointment ID is not set.\";","lastModifiedDate":"2021-10-21"},{"lineNumber":16,"author":{"gitId":"Kureans"},"content":"    private static final String ERROR_ADD_APPOINTMENT_CLASH \u003d \"New appointment clashes with another appointment.\";","lastModifiedDate":"2021-10-21"},{"lineNumber":17,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":18,"author":{"gitId":"Kureans"},"content":"    private final NavigableSet\u003cAppointment\u003e appointments \u003d new TreeSet\u003c\u003e((o1, o2) -\u003e {","lastModifiedDate":"2021-10-24"},{"lineNumber":19,"author":{"gitId":"Kureans"},"content":"        if (o1.getDateTimeCode() \u003e o2.getDateTimeCode()) {","lastModifiedDate":"2021-10-22"},{"lineNumber":20,"author":{"gitId":"Kureans"},"content":"            return 1;","lastModifiedDate":"2021-10-22"},{"lineNumber":21,"author":{"gitId":"Kureans"},"content":"        } else if (o1.getDateTimeCode() \u003c o2.getDateTimeCode()) {","lastModifiedDate":"2021-10-22"},{"lineNumber":22,"author":{"gitId":"Kureans"},"content":"            return -1;","lastModifiedDate":"2021-10-22"},{"lineNumber":23,"author":{"gitId":"Kureans"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":24,"author":{"gitId":"Kureans"},"content":"        assert o1.getDateTimeCode() \u003d\u003d o2.getDateTimeCode();","lastModifiedDate":"2021-10-22"},{"lineNumber":25,"author":{"gitId":"Kureans"},"content":"        return 0;","lastModifiedDate":"2021-10-22"},{"lineNumber":26,"author":{"gitId":"Kureans"},"content":"    });","lastModifiedDate":"2021-10-22"},{"lineNumber":27,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":28,"author":{"gitId":"Kureans"},"content":"    public PersonalAppointmentList() {","lastModifiedDate":"2021-10-21"},{"lineNumber":29,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":30,"author":{"gitId":"Kureans"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":31,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":32,"author":{"gitId":"Kureans"},"content":"    /**","lastModifiedDate":"2021-10-24"},{"lineNumber":33,"author":{"gitId":"Kureans"},"content":"     * Adds the given appointment to the appointment list.","lastModifiedDate":"2021-10-24"},{"lineNumber":34,"author":{"gitId":"Kureans"},"content":"     *","lastModifiedDate":"2021-10-24"},{"lineNumber":35,"author":{"gitId":"Kureans"},"content":"     * @param appointment Appointment to be added to the appointment list","lastModifiedDate":"2021-10-24"},{"lineNumber":36,"author":{"gitId":"Kureans"},"content":"     * @throws MedBotException if there is another appointment at that time","lastModifiedDate":"2021-10-24"},{"lineNumber":37,"author":{"gitId":"Kureans"},"content":"     */","lastModifiedDate":"2021-10-24"},{"lineNumber":38,"author":{"gitId":"Kureans"},"content":"    public void addAppointment(Appointment appointment) throws MedBotException {","lastModifiedDate":"2021-10-21"},{"lineNumber":39,"author":{"gitId":"Kureans"},"content":"        int appointmentId \u003d appointment.getId();","lastModifiedDate":"2021-10-27"},{"lineNumber":40,"author":{"gitId":"Kureans"},"content":"        if (appointmentId \u003d\u003d 0) {","lastModifiedDate":"2021-10-21"},{"lineNumber":41,"author":{"gitId":"Kureans"},"content":"            throw new MedBotException(ERROR_APPOINTMENT_ID_NOT_SET);","lastModifiedDate":"2021-10-21"},{"lineNumber":42,"author":{"gitId":"Kureans"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":43,"author":{"gitId":"Kureans"},"content":"        boolean isNotClash \u003d appointments.add(appointment);","lastModifiedDate":"2021-10-22"},{"lineNumber":44,"author":{"gitId":"Kureans"},"content":"        if (!isNotClash) {","lastModifiedDate":"2021-10-22"},{"lineNumber":45,"author":{"gitId":"Kureans"},"content":"            throw new MedBotException(ERROR_ADD_APPOINTMENT_CLASH);","lastModifiedDate":"2021-10-21"},{"lineNumber":46,"author":{"gitId":"Kureans"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":47,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":48,"author":{"gitId":"Kureans"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":49,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":50,"author":{"gitId":"Kureans"},"content":"    /**","lastModifiedDate":"2021-10-24"},{"lineNumber":51,"author":{"gitId":"Kureans"},"content":"     * Returns the appointmentId of the appointment at the specified time code, or -1 if there is none.","lastModifiedDate":"2021-10-24"},{"lineNumber":52,"author":{"gitId":"Kureans"},"content":"     *","lastModifiedDate":"2021-10-24"},{"lineNumber":53,"author":{"gitId":"Kureans"},"content":"     * @param dateTimeCode the dateTimeCode to search for","lastModifiedDate":"2021-10-24"},{"lineNumber":54,"author":{"gitId":"Kureans"},"content":"     * @return the appointmentId of the appointment with that dateTimeCode","lastModifiedDate":"2021-10-24"},{"lineNumber":55,"author":{"gitId":"Kureans"},"content":"     */","lastModifiedDate":"2021-10-24"},{"lineNumber":56,"author":{"gitId":"Kureans"},"content":"    public int getAppointmentId(int dateTimeCode) {","lastModifiedDate":"2021-10-21"},{"lineNumber":57,"author":{"gitId":"Kureans"},"content":"        for (Appointment appointment : appointments) {","lastModifiedDate":"2021-10-24"},{"lineNumber":58,"author":{"gitId":"Kureans"},"content":"            if (appointment !\u003d null \u0026\u0026 appointment.getDateTimeCode() \u003d\u003d dateTimeCode) {","lastModifiedDate":"2021-10-24"},{"lineNumber":59,"author":{"gitId":"Kureans"},"content":"                return appointment.getId();","lastModifiedDate":"2021-10-27"},{"lineNumber":60,"author":{"gitId":"Kureans"},"content":"            }","lastModifiedDate":"2021-10-21"},{"lineNumber":61,"author":{"gitId":"Kureans"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":62,"author":{"gitId":"Kureans"},"content":"        return -1;","lastModifiedDate":"2021-10-21"},{"lineNumber":63,"author":{"gitId":"Kureans"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":64,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":65,"author":{"gitId":"Kureans"},"content":"    /**","lastModifiedDate":"2021-10-25"},{"lineNumber":66,"author":{"gitId":"Kureans"},"content":"     * Returns a LinkedList of the appointmentId of all appointments.","lastModifiedDate":"2021-10-25"},{"lineNumber":67,"author":{"gitId":"Kureans"},"content":"     *","lastModifiedDate":"2021-10-25"},{"lineNumber":68,"author":{"gitId":"Kureans"},"content":"     * @return LinkedList of the appointmentId of all appointments","lastModifiedDate":"2021-10-25"},{"lineNumber":69,"author":{"gitId":"Kureans"},"content":"     */","lastModifiedDate":"2021-10-25"},{"lineNumber":70,"author":{"gitId":"Kureans"},"content":"    public LinkedList\u003cInteger\u003e getAllAppointmentIds() {","lastModifiedDate":"2021-10-25"},{"lineNumber":71,"author":{"gitId":"Kureans"},"content":"        LinkedList\u003cInteger\u003e appointmentIds \u003d new LinkedList\u003c\u003e();","lastModifiedDate":"2021-10-25"},{"lineNumber":72,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":73,"author":{"gitId":"Kureans"},"content":"        for (Appointment appointment : appointments) {","lastModifiedDate":"2021-10-25"},{"lineNumber":74,"author":{"gitId":"Kureans"},"content":"            if (appointment !\u003d null) {","lastModifiedDate":"2021-10-25"},{"lineNumber":75,"author":{"gitId":"Kureans"},"content":"                appointmentIds.add(appointment.getId());","lastModifiedDate":"2021-10-27"},{"lineNumber":76,"author":{"gitId":"Kureans"},"content":"            }","lastModifiedDate":"2021-10-25"},{"lineNumber":77,"author":{"gitId":"Kureans"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":78,"author":{"gitId":"Kureans"},"content":"        return appointmentIds;","lastModifiedDate":"2021-10-25"},{"lineNumber":79,"author":{"gitId":"Kureans"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":80,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":81,"author":{"gitId":"Kureans"},"content":"    /**","lastModifiedDate":"2021-10-24"},{"lineNumber":82,"author":{"gitId":"Kureans"},"content":"     * Removes the appointment with the specified dateTimeCode.","lastModifiedDate":"2021-10-24"},{"lineNumber":83,"author":{"gitId":"Kureans"},"content":"     *","lastModifiedDate":"2021-10-24"},{"lineNumber":84,"author":{"gitId":"Kureans"},"content":"     * @param dateTimeCode the dateTimeCode of the appointment to be deleted","lastModifiedDate":"2021-10-24"},{"lineNumber":85,"author":{"gitId":"Kureans"},"content":"     * @throws MedBotException if there is no appointment with that dateTimeCode.","lastModifiedDate":"2021-10-24"},{"lineNumber":86,"author":{"gitId":"Kureans"},"content":"     */","lastModifiedDate":"2021-10-24"},{"lineNumber":87,"author":{"gitId":"Kureans"},"content":"    public void deleteAppointment(int dateTimeCode) throws MedBotException {","lastModifiedDate":"2021-10-24"},{"lineNumber":88,"author":{"gitId":"Kureans"},"content":"        Iterator\u003cAppointment\u003e it \u003d appointments.iterator();","lastModifiedDate":"2021-10-22"},{"lineNumber":89,"author":{"gitId":"Kureans"},"content":"        while (it.hasNext()) {","lastModifiedDate":"2021-10-22"},{"lineNumber":90,"author":{"gitId":"Kureans"},"content":"            Appointment appointment \u003d it.next();","lastModifiedDate":"2021-10-22"},{"lineNumber":91,"author":{"gitId":"Kureans"},"content":"            if (appointment.getDateTimeCode() \u003d\u003d dateTimeCode) {","lastModifiedDate":"2021-10-22"},{"lineNumber":92,"author":{"gitId":"Kureans"},"content":"                it.remove();","lastModifiedDate":"2021-10-22"},{"lineNumber":93,"author":{"gitId":"Kureans"},"content":"                return;","lastModifiedDate":"2021-10-22"},{"lineNumber":94,"author":{"gitId":"Kureans"},"content":"            }","lastModifiedDate":"2021-10-22"},{"lineNumber":95,"author":{"gitId":"Kureans"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":96,"author":{"gitId":"Kureans"},"content":"        throw new MedBotException(getAppointmentNotFoundErrorMessage(dateTimeCode));","lastModifiedDate":"2021-10-22"},{"lineNumber":97,"author":{"gitId":"Kureans"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":98,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":99,"author":{"gitId":"Kureans"},"content":"    /**","lastModifiedDate":"2021-10-27"},{"lineNumber":100,"author":{"gitId":"Kureans"},"content":"     * Returns the error message when no appointment was found.","lastModifiedDate":"2021-10-27"},{"lineNumber":101,"author":{"gitId":"Kureans"},"content":"     *","lastModifiedDate":"2021-10-27"},{"lineNumber":102,"author":{"gitId":"Kureans"},"content":"     * @param dateTimeCode the dateTimeCode to look for.","lastModifiedDate":"2021-10-27"},{"lineNumber":103,"author":{"gitId":"Kureans"},"content":"     * @return the String indicates the error message.","lastModifiedDate":"2021-10-27"},{"lineNumber":104,"author":{"gitId":"Kureans"},"content":"     */","lastModifiedDate":"2021-10-27"},{"lineNumber":105,"author":{"gitId":"Kureans"},"content":"    private String getAppointmentNotFoundErrorMessage(int dateTimeCode) {","lastModifiedDate":"2021-10-21"},{"lineNumber":106,"author":{"gitId":"Kureans"},"content":"        return \"No appointment at : \" + Appointment.formatDateTimeCode(dateTimeCode) + \"found.\";","lastModifiedDate":"2021-10-26"},{"lineNumber":107,"author":{"gitId":"Kureans"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":108,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":109,"author":{"gitId":"Kureans"},"content":"    public List\u003cInteger\u003e listAppointments() {","lastModifiedDate":"2021-10-26"},{"lineNumber":110,"author":{"gitId":"Kureans"},"content":"        List\u003cInteger\u003e appointmentIds \u003d new LinkedList\u003c\u003e();","lastModifiedDate":"2021-10-26"},{"lineNumber":111,"author":{"gitId":"Kureans"},"content":"        for (Appointment appointment : appointments) {","lastModifiedDate":"2021-10-24"},{"lineNumber":112,"author":{"gitId":"Kureans"},"content":"            appointmentIds.add(appointment.getId());","lastModifiedDate":"2021-10-27"},{"lineNumber":113,"author":{"gitId":"Kureans"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":114,"author":{"gitId":"Kureans"},"content":"        return appointmentIds;","lastModifiedDate":"2021-10-26"},{"lineNumber":115,"author":{"gitId":"Kureans"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":116,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":117,"author":{"gitId":"Kureans"},"content":"    /**","lastModifiedDate":"2021-10-27"},{"lineNumber":118,"author":{"gitId":"Kureans"},"content":"     * Returns the list of appointment after the date time indicated.","lastModifiedDate":"2021-10-27"},{"lineNumber":119,"author":{"gitId":"Kureans"},"content":"     *","lastModifiedDate":"2021-10-27"},{"lineNumber":120,"author":{"gitId":"Kureans"},"content":"     * @param dateTimeCode the date time of the appointments to look for.","lastModifiedDate":"2021-10-27"},{"lineNumber":121,"author":{"gitId":"Kureans"},"content":"     * @return the list of appointments after the date.","lastModifiedDate":"2021-11-07"},{"lineNumber":122,"author":{"gitId":"Kureans"},"content":"     */","lastModifiedDate":"2021-10-27"},{"lineNumber":123,"author":{"gitId":"Kureans"},"content":"    public List\u003cInteger\u003e listAppointmentsAfter(int dateTimeCode) {","lastModifiedDate":"2021-10-26"},{"lineNumber":124,"author":{"gitId":"Kureans"},"content":"        Appointment referenceAppointment \u003d new Appointment();","lastModifiedDate":"2021-10-25"},{"lineNumber":125,"author":{"gitId":"Kureans"},"content":"        referenceAppointment.setDateTimeCode(dateTimeCode);","lastModifiedDate":"2021-10-25"},{"lineNumber":126,"author":{"gitId":"Kureans"},"content":"        NavigableSet\u003cAppointment\u003e appointmentsAfter \u003d appointments.tailSet(referenceAppointment, true);","lastModifiedDate":"2021-10-25"},{"lineNumber":127,"author":{"gitId":"Kureans"},"content":"        List\u003cInteger\u003e appointmentIds \u003d new LinkedList\u003c\u003e();","lastModifiedDate":"2021-10-26"},{"lineNumber":128,"author":{"gitId":"Kureans"},"content":"        for (Appointment appointment : appointmentsAfter) {","lastModifiedDate":"2021-10-25"},{"lineNumber":129,"author":{"gitId":"Kureans"},"content":"            appointmentIds.add(appointment.getId());","lastModifiedDate":"2021-10-27"},{"lineNumber":130,"author":{"gitId":"Kureans"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":131,"author":{"gitId":"Kureans"},"content":"        return appointmentIds;","lastModifiedDate":"2021-10-26"},{"lineNumber":132,"author":{"gitId":"Kureans"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":133,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":134,"author":{"gitId":"Kureans"},"content":"    /**","lastModifiedDate":"2021-10-27"},{"lineNumber":135,"author":{"gitId":"Kureans"},"content":"     * Returns the list of appointment before the date time indicated.","lastModifiedDate":"2021-10-27"},{"lineNumber":136,"author":{"gitId":"Kureans"},"content":"     *","lastModifiedDate":"2021-10-27"},{"lineNumber":137,"author":{"gitId":"Kureans"},"content":"     * @param dateTimeCode the date time of the appointments to look for.","lastModifiedDate":"2021-10-27"},{"lineNumber":138,"author":{"gitId":"Kureans"},"content":"     * @return the list of appointments before the date.","lastModifiedDate":"2021-11-07"},{"lineNumber":139,"author":{"gitId":"Kureans"},"content":"     */","lastModifiedDate":"2021-10-27"},{"lineNumber":140,"author":{"gitId":"Kureans"},"content":"    public List\u003cInteger\u003e listAppointmentsBefore(int dateTimeCode) {","lastModifiedDate":"2021-10-26"},{"lineNumber":141,"author":{"gitId":"Kureans"},"content":"        Appointment referenceAppointment \u003d new Appointment();","lastModifiedDate":"2021-10-25"},{"lineNumber":142,"author":{"gitId":"Kureans"},"content":"        referenceAppointment.setDateTimeCode(dateTimeCode);","lastModifiedDate":"2021-10-25"},{"lineNumber":143,"author":{"gitId":"Kureans"},"content":"        NavigableSet\u003cAppointment\u003e appointmentsBefore \u003d appointments.headSet(referenceAppointment, true);","lastModifiedDate":"2021-10-25"},{"lineNumber":144,"author":{"gitId":"Kureans"},"content":"        List\u003cInteger\u003e appointmentIds \u003d new LinkedList\u003c\u003e();","lastModifiedDate":"2021-10-26"},{"lineNumber":145,"author":{"gitId":"Kureans"},"content":"        for (Appointment appointment : appointmentsBefore) {","lastModifiedDate":"2021-10-25"},{"lineNumber":146,"author":{"gitId":"Kureans"},"content":"            appointmentIds.add(appointment.getId());","lastModifiedDate":"2021-10-27"},{"lineNumber":147,"author":{"gitId":"Kureans"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":148,"author":{"gitId":"Kureans"},"content":"        return appointmentIds;","lastModifiedDate":"2021-10-26"},{"lineNumber":149,"author":{"gitId":"Kureans"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":150,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":151,"author":{"gitId":"Kureans"},"content":"}","lastModifiedDate":"2021-10-21"}],"authorContributionMap":{"justinfidelis":4,"CrimsonTitan79":3,"Kureans":144}},{"path":"src/main/java/medbot/list/SchedulerAppointmentList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"justinfidelis"},"content":"package medbot.list;","lastModifiedDate":"2021-10-21"},{"lineNumber":2,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":3,"author":{"gitId":"justinfidelis"},"content":"import java.util.HashMap;","lastModifiedDate":"2021-10-21"},{"lineNumber":4,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":5,"author":{"gitId":"justinfidelis"},"content":"import java.util.LinkedList;","lastModifiedDate":"2021-10-26"},{"lineNumber":6,"author":{"gitId":"justinfidelis"},"content":"import java.util.List;","lastModifiedDate":"2021-10-26"},{"lineNumber":7,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":8,"author":{"gitId":"justinfidelis"},"content":"import medbot.Appointment;","lastModifiedDate":"2021-10-21"},{"lineNumber":9,"author":{"gitId":"justinfidelis"},"content":"import medbot.exceptions.MedBotException;","lastModifiedDate":"2021-10-21"},{"lineNumber":10,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":11,"author":{"gitId":"justinfidelis"},"content":"public class SchedulerAppointmentList {","lastModifiedDate":"2021-10-27"},{"lineNumber":12,"author":{"gitId":"justinfidelis"},"content":"    private static final String END_LINE \u003d System.lineSeparator();","lastModifiedDate":"2021-10-24"},{"lineNumber":13,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":14,"author":{"gitId":"justinfidelis"},"content":"    protected HashMap\u003cInteger, Appointment\u003e appointments \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2021-10-21"},{"lineNumber":15,"author":{"gitId":"justinfidelis"},"content":"    private int lastId \u003d 1;","lastModifiedDate":"2021-10-27"},{"lineNumber":16,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":17,"author":{"gitId":"justinfidelis"},"content":"    public SchedulerAppointmentList() {","lastModifiedDate":"2021-10-21"},{"lineNumber":18,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":19,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":20,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":21,"author":{"gitId":"justinfidelis"},"content":"    /**","lastModifiedDate":"2021-10-21"},{"lineNumber":22,"author":{"gitId":"justinfidelis"},"content":"     * Returns a copy of the appointment with the specified appointmentId.","lastModifiedDate":"2021-10-21"},{"lineNumber":23,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-10-21"},{"lineNumber":24,"author":{"gitId":"justinfidelis"},"content":"     * @param appointmentId the appointmentId to search for","lastModifiedDate":"2021-10-21"},{"lineNumber":25,"author":{"gitId":"justinfidelis"},"content":"     * @return copy of appointment with the specified appointmentId","lastModifiedDate":"2021-10-21"},{"lineNumber":26,"author":{"gitId":"justinfidelis"},"content":"     * @throws MedBotException if no appointment with the specified appointmentId is found","lastModifiedDate":"2021-10-21"},{"lineNumber":27,"author":{"gitId":"justinfidelis"},"content":"     */","lastModifiedDate":"2021-10-21"},{"lineNumber":28,"author":{"gitId":"justinfidelis"},"content":"    public Appointment getAppointment(int appointmentId) throws MedBotException {","lastModifiedDate":"2021-10-21"},{"lineNumber":29,"author":{"gitId":"justinfidelis"},"content":"        if (!appointments.containsKey(appointmentId)) {","lastModifiedDate":"2021-10-21"},{"lineNumber":30,"author":{"gitId":"justinfidelis"},"content":"            throw new MedBotException(getAppointmentNotFoundErrorMessage(appointmentId));","lastModifiedDate":"2021-10-21"},{"lineNumber":31,"author":{"gitId":"justinfidelis"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":32,"author":{"gitId":"justinfidelis"},"content":"        Appointment appointment \u003d new Appointment();","lastModifiedDate":"2021-10-21"},{"lineNumber":33,"author":{"gitId":"justinfidelis"},"content":"        appointment.setId(appointmentId);","lastModifiedDate":"2021-10-27"},{"lineNumber":34,"author":{"gitId":"justinfidelis"},"content":"        appointment.mergeAppointmentData(appointments.get(appointmentId));","lastModifiedDate":"2021-10-21"},{"lineNumber":35,"author":{"gitId":"justinfidelis"},"content":"        return appointment;","lastModifiedDate":"2021-10-21"},{"lineNumber":36,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":37,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":38,"author":{"gitId":"justinfidelis"},"content":"    /**","lastModifiedDate":"2021-10-24"},{"lineNumber":39,"author":{"gitId":"justinfidelis"},"content":"     * Adds the given appointment into the appointment list, returns the appointmentId that was allocated to it.","lastModifiedDate":"2021-10-24"},{"lineNumber":40,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-10-24"},{"lineNumber":41,"author":{"gitId":"justinfidelis"},"content":"     * \u003cp\u003eIf the appointment has an appointmentId, the appointment will be added if there is no existing appointment","lastModifiedDate":"2021-10-24"},{"lineNumber":42,"author":{"gitId":"justinfidelis"},"content":"     * with that id, and throw a MedBotException if there is a clash. If not, i.e, appointmentId \u003d\u003d 0, an id will be","lastModifiedDate":"2021-10-24"},{"lineNumber":43,"author":{"gitId":"justinfidelis"},"content":"     * generated and the appointment\u0027s id will be set to that value.","lastModifiedDate":"2021-10-24"},{"lineNumber":44,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-10-24"},{"lineNumber":45,"author":{"gitId":"justinfidelis"},"content":"     * @param appointment Appointment to be added into the appointment list","lastModifiedDate":"2021-10-24"},{"lineNumber":46,"author":{"gitId":"justinfidelis"},"content":"     * @return id of the appointment that was added","lastModifiedDate":"2021-10-24"},{"lineNumber":47,"author":{"gitId":"justinfidelis"},"content":"     * @throws MedBotException if another appointment with that id already exists","lastModifiedDate":"2021-10-24"},{"lineNumber":48,"author":{"gitId":"justinfidelis"},"content":"     */","lastModifiedDate":"2021-10-24"},{"lineNumber":49,"author":{"gitId":"justinfidelis"},"content":"    public int addAppointment(Appointment appointment) throws MedBotException {","lastModifiedDate":"2021-10-21"},{"lineNumber":50,"author":{"gitId":"justinfidelis"},"content":"        assert appointment.isComplete();","lastModifiedDate":"2021-10-21"},{"lineNumber":51,"author":{"gitId":"justinfidelis"},"content":"        int appointmentId \u003d appointment.getId();","lastModifiedDate":"2021-10-27"},{"lineNumber":52,"author":{"gitId":"justinfidelis"},"content":"        if (appointments.containsKey(appointmentId)) {","lastModifiedDate":"2021-10-21"},{"lineNumber":53,"author":{"gitId":"justinfidelis"},"content":"            throw new MedBotException(\"Appointment with ID \" + appointmentId + \" already exits!\");","lastModifiedDate":"2021-11-07"},{"lineNumber":54,"author":{"gitId":"justinfidelis"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":55,"author":{"gitId":"justinfidelis"},"content":"        if (appointmentId \u003d\u003d 0) {","lastModifiedDate":"2021-10-21"},{"lineNumber":56,"author":{"gitId":"justinfidelis"},"content":"            appointmentId \u003d generateAppointmentId();","lastModifiedDate":"2021-10-21"},{"lineNumber":57,"author":{"gitId":"justinfidelis"},"content":"            appointment.setId(appointmentId);","lastModifiedDate":"2021-10-27"},{"lineNumber":58,"author":{"gitId":"justinfidelis"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":59,"author":{"gitId":"justinfidelis"},"content":"        appointments.put(appointmentId, appointment);","lastModifiedDate":"2021-10-21"},{"lineNumber":60,"author":{"gitId":"justinfidelis"},"content":"        return appointmentId;","lastModifiedDate":"2021-10-21"},{"lineNumber":61,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":62,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":63,"author":{"gitId":"justinfidelis"},"content":"    /**","lastModifiedDate":"2021-10-25"},{"lineNumber":64,"author":{"gitId":"justinfidelis"},"content":"     * Generates a non-random but unique id to be allocated to an appointment.","lastModifiedDate":"2021-10-25"},{"lineNumber":65,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-10-25"},{"lineNumber":66,"author":{"gitId":"justinfidelis"},"content":"     * @return a unique id to be allocated to an appointment","lastModifiedDate":"2021-10-25"},{"lineNumber":67,"author":{"gitId":"justinfidelis"},"content":"     */","lastModifiedDate":"2021-10-25"},{"lineNumber":68,"author":{"gitId":"justinfidelis"},"content":"    private int generateAppointmentId() {","lastModifiedDate":"2021-10-25"},{"lineNumber":69,"author":{"gitId":"justinfidelis"},"content":"        while (appointments.containsKey(lastId)) {","lastModifiedDate":"2021-10-27"},{"lineNumber":70,"author":{"gitId":"justinfidelis"},"content":"            lastId++;","lastModifiedDate":"2021-10-25"},{"lineNumber":71,"author":{"gitId":"justinfidelis"},"content":"        }","lastModifiedDate":"2021-10-27"},{"lineNumber":72,"author":{"gitId":"justinfidelis"},"content":"        return lastId;","lastModifiedDate":"2021-10-25"},{"lineNumber":73,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":74,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":75,"author":{"gitId":"justinfidelis"},"content":"    /**","lastModifiedDate":"2021-10-24"},{"lineNumber":76,"author":{"gitId":"justinfidelis"},"content":"     * Removes the appointment with the specified appointmentId.","lastModifiedDate":"2021-10-24"},{"lineNumber":77,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-10-24"},{"lineNumber":78,"author":{"gitId":"justinfidelis"},"content":"     * @param appointmentId the appointmentId of the appointment to be removed","lastModifiedDate":"2021-10-24"},{"lineNumber":79,"author":{"gitId":"justinfidelis"},"content":"     * @return the Appointment that was removed","lastModifiedDate":"2021-10-24"},{"lineNumber":80,"author":{"gitId":"justinfidelis"},"content":"     * @throws MedBotException if there is no appointment with that appointmentId","lastModifiedDate":"2021-10-24"},{"lineNumber":81,"author":{"gitId":"justinfidelis"},"content":"     */","lastModifiedDate":"2021-10-24"},{"lineNumber":82,"author":{"gitId":"justinfidelis"},"content":"    public Appointment deleteAppointment(int appointmentId) throws MedBotException {","lastModifiedDate":"2021-10-24"},{"lineNumber":83,"author":{"gitId":"justinfidelis"},"content":"        if (!appointments.containsKey(appointmentId)) {","lastModifiedDate":"2021-10-21"},{"lineNumber":84,"author":{"gitId":"justinfidelis"},"content":"            throw new MedBotException(getAppointmentNotFoundErrorMessage(appointmentId));","lastModifiedDate":"2021-10-21"},{"lineNumber":85,"author":{"gitId":"justinfidelis"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":86,"author":{"gitId":"justinfidelis"},"content":"        return appointments.remove(appointmentId);","lastModifiedDate":"2021-10-21"},{"lineNumber":87,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":88,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":89,"author":{"gitId":"justinfidelis"},"content":"    private String getAppointmentNotFoundErrorMessage(int appointmentId) {","lastModifiedDate":"2021-10-21"},{"lineNumber":90,"author":{"gitId":"justinfidelis"},"content":"        return \"No appointment with ID \" + appointmentId + \" found.\";","lastModifiedDate":"2021-10-24"},{"lineNumber":91,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":92,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":93,"author":{"gitId":"jushg"},"content":"    /**","lastModifiedDate":"2021-10-27"},{"lineNumber":94,"author":{"gitId":"jushg"},"content":"     * Gets the list of all current appointments.","lastModifiedDate":"2021-10-27"},{"lineNumber":95,"author":{"gitId":"jushg"},"content":"     *","lastModifiedDate":"2021-10-27"},{"lineNumber":96,"author":{"gitId":"jushg"},"content":"     * @return the list of all current appointments.","lastModifiedDate":"2021-10-27"},{"lineNumber":97,"author":{"gitId":"jushg"},"content":"     */","lastModifiedDate":"2021-10-27"},{"lineNumber":98,"author":{"gitId":"justinfidelis"},"content":"    public List\u003cInteger\u003e listAppointments() {","lastModifiedDate":"2021-10-26"},{"lineNumber":99,"author":{"gitId":"justinfidelis"},"content":"        return new LinkedList\u003c\u003e(appointments.keySet());","lastModifiedDate":"2021-10-26"},{"lineNumber":100,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":101,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":102,"author":{"gitId":"CrimsonTitan79"},"content":"    /**","lastModifiedDate":"2021-10-25"},{"lineNumber":103,"author":{"gitId":"CrimsonTitan79"},"content":"     * Get storageString for all appointments.","lastModifiedDate":"2021-10-25"},{"lineNumber":104,"author":{"gitId":"CrimsonTitan79"},"content":"     *","lastModifiedDate":"2021-10-25"},{"lineNumber":105,"author":{"gitId":"CrimsonTitan79"},"content":"     * @return storageString of all appointments","lastModifiedDate":"2021-10-25"},{"lineNumber":106,"author":{"gitId":"CrimsonTitan79"},"content":"     */","lastModifiedDate":"2021-10-25"},{"lineNumber":107,"author":{"gitId":"CrimsonTitan79"},"content":"    public String getStorageString() {","lastModifiedDate":"2021-10-25"},{"lineNumber":108,"author":{"gitId":"CrimsonTitan79"},"content":"        String output \u003d \"\";","lastModifiedDate":"2021-10-25"},{"lineNumber":109,"author":{"gitId":"CrimsonTitan79"},"content":"        for (int key : appointments.keySet()) {","lastModifiedDate":"2021-10-25"},{"lineNumber":110,"author":{"gitId":"CrimsonTitan79"},"content":"            Appointment appointment \u003d appointments.get(key);","lastModifiedDate":"2021-10-25"},{"lineNumber":111,"author":{"gitId":"CrimsonTitan79"},"content":"            String appointmentStorageString \u003d appointment.getStorageString();","lastModifiedDate":"2021-10-25"},{"lineNumber":112,"author":{"gitId":"CrimsonTitan79"},"content":"            output +\u003d appointmentStorageString + END_LINE;","lastModifiedDate":"2021-10-25"},{"lineNumber":113,"author":{"gitId":"CrimsonTitan79"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":114,"author":{"gitId":"CrimsonTitan79"},"content":"        return output;","lastModifiedDate":"2021-10-25"},{"lineNumber":115,"author":{"gitId":"CrimsonTitan79"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":116,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":117,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":118,"author":{"gitId":"justinfidelis"},"content":"    public void setLastId(int lastId) {","lastModifiedDate":"2021-10-21"},{"lineNumber":119,"author":{"gitId":"justinfidelis"},"content":"        this.lastId \u003d lastId;","lastModifiedDate":"2021-10-21"},{"lineNumber":120,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":121,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":122,"author":{"gitId":"CrimsonTitan79"},"content":"    public int getLastId() {","lastModifiedDate":"2021-10-25"},{"lineNumber":123,"author":{"gitId":"CrimsonTitan79"},"content":"        return lastId;","lastModifiedDate":"2021-10-25"},{"lineNumber":124,"author":{"gitId":"CrimsonTitan79"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":125,"author":{"gitId":"justinfidelis"},"content":"}","lastModifiedDate":"2021-10-21"}],"authorContributionMap":{"justinfidelis":98,"CrimsonTitan79":22,"jushg":5}},{"path":"src/main/java/medbot/parser/Parser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"justinfidelis"},"content":"package medbot.parser;","lastModifiedDate":"2021-10-22"},{"lineNumber":2,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":3,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":4,"author":{"gitId":"jushg"},"content":"import medbot.command.Command;","lastModifiedDate":"2021-10-25"},{"lineNumber":5,"author":{"gitId":"jushg"},"content":"import medbot.command.CommandType;","lastModifiedDate":"2021-10-25"},{"lineNumber":6,"author":{"gitId":"jushg"},"content":"import medbot.command.ExitCommand;","lastModifiedDate":"2021-10-25"},{"lineNumber":7,"author":{"gitId":"jushg"},"content":"import medbot.command.GetCurrentViewCommand;","lastModifiedDate":"2021-10-25"},{"lineNumber":8,"author":{"gitId":"jushg"},"content":"import medbot.command.HelpCommand;","lastModifiedDate":"2021-10-25"},{"lineNumber":9,"author":{"gitId":"jushg"},"content":"import medbot.command.SwitchCommand;","lastModifiedDate":"2021-10-25"},{"lineNumber":10,"author":{"gitId":"justinfidelis"},"content":"import medbot.exceptions.MedBotParserException;","lastModifiedDate":"2021-10-22"},{"lineNumber":11,"author":{"gitId":"justinfidelis"},"content":"import medbot.utilities.ViewType;","lastModifiedDate":"2021-10-22"},{"lineNumber":12,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":13,"author":{"gitId":"Kureans"},"content":"//@@author Kureans","lastModifiedDate":"2021-10-29"},{"lineNumber":14,"author":{"gitId":"Kureans"},"content":"public abstract class Parser {","lastModifiedDate":"2021-10-22"},{"lineNumber":15,"author":{"gitId":"Kureans"},"content":"    private static final String END_LINE \u003d System.lineSeparator();","lastModifiedDate":"2021-10-22"},{"lineNumber":16,"author":{"gitId":"Kureans"},"content":"    private static final String EMPTY_STRING \u003d \"\";","lastModifiedDate":"2021-10-22"},{"lineNumber":17,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":18,"author":{"gitId":"Kureans"},"content":"    private static final String COMMAND_ADD \u003d \"add\";","lastModifiedDate":"2021-10-22"},{"lineNumber":19,"author":{"gitId":"Kureans"},"content":"    private static final String COMMAND_DELETE \u003d \"delete\";","lastModifiedDate":"2021-10-22"},{"lineNumber":20,"author":{"gitId":"Kureans"},"content":"    private static final String COMMAND_EDIT \u003d \"edit\";","lastModifiedDate":"2021-10-22"},{"lineNumber":21,"author":{"gitId":"Kureans"},"content":"    private static final String COMMAND_VIEW \u003d \"view\";","lastModifiedDate":"2021-10-22"},{"lineNumber":22,"author":{"gitId":"Kureans"},"content":"    private static final String COMMAND_LIST \u003d \"list\";","lastModifiedDate":"2021-10-22"},{"lineNumber":23,"author":{"gitId":"Kureans"},"content":"    private static final String COMMAND_EXIT \u003d \"exit\";","lastModifiedDate":"2021-10-22"},{"lineNumber":24,"author":{"gitId":"Kureans"},"content":"    private static final String COMMAND_HELP \u003d \"help\";","lastModifiedDate":"2021-10-22"},{"lineNumber":25,"author":{"gitId":"Kureans"},"content":"    private static final String COMMAND_SWITCH \u003d \"switch\";","lastModifiedDate":"2021-10-22"},{"lineNumber":26,"author":{"gitId":"Kureans"},"content":"    private static final String COMMAND_FIND \u003d \"find\";","lastModifiedDate":"2021-10-22"},{"lineNumber":27,"author":{"gitId":"Kureans"},"content":"    private static final String COMMAND_HIDE \u003d \"hide\";","lastModifiedDate":"2021-11-02"},{"lineNumber":28,"author":{"gitId":"Kureans"},"content":"    private static final String COMMAND_SHOW \u003d \"show\";","lastModifiedDate":"2021-11-02"},{"lineNumber":29,"author":{"gitId":"Kureans"},"content":"    private static final String COMMAND_GET_VIEW \u003d \"get view\";","lastModifiedDate":"2021-10-25"},{"lineNumber":30,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":31,"author":{"gitId":"Kureans"},"content":"    private static final String VIEW_TYPE_PATIENT_VIEW \u003d \"p\";","lastModifiedDate":"2021-10-22"},{"lineNumber":32,"author":{"gitId":"Kureans"},"content":"    private static final String VIEW_TYPE_PATIENT_VIEW_ALT \u003d \"1\";","lastModifiedDate":"2021-10-22"},{"lineNumber":33,"author":{"gitId":"Kureans"},"content":"    private static final String VIEW_TYPE_MEDICAL_STAFF_VIEW \u003d \"m\";","lastModifiedDate":"2021-10-22"},{"lineNumber":34,"author":{"gitId":"Kureans"},"content":"    private static final String VIEW_TYPE_MEDICAL_STAFF_VIEW_ALT \u003d \"2\";","lastModifiedDate":"2021-10-22"},{"lineNumber":35,"author":{"gitId":"Kureans"},"content":"    private static final String VIEW_TYPE_SCHEDULER_VIEW \u003d \"s\";","lastModifiedDate":"2021-10-22"},{"lineNumber":36,"author":{"gitId":"Kureans"},"content":"    private static final String VIEW_TYPE_SCHEDULER_VIEW_ALT \u003d \"3\";","lastModifiedDate":"2021-10-22"},{"lineNumber":37,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":38,"author":{"gitId":"Kureans"},"content":"    private static final String ERROR_WRONG_COMMAND \u003d \"Unable to parse command.\" + END_LINE;","lastModifiedDate":"2021-10-22"},{"lineNumber":39,"author":{"gitId":"Kureans"},"content":"    private static final String ERROR_NO_VIEW_FOUND \u003d \"Unidentified view.\" + END_LINE;","lastModifiedDate":"2021-10-22"},{"lineNumber":40,"author":{"gitId":"Kureans"},"content":"    private static final String ERROR_INVALID_VIEW_TYPE \u003d \"Invalid view type code.\" + END_LINE;","lastModifiedDate":"2021-10-22"},{"lineNumber":41,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":42,"author":{"gitId":"Kureans"},"content":"    private static ViewType viewType \u003d ViewType.PATIENT_INFO;","lastModifiedDate":"2021-10-22"},{"lineNumber":43,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":44,"author":{"gitId":"Kureans"},"content":"    public static ViewType getViewType() {","lastModifiedDate":"2021-10-22"},{"lineNumber":45,"author":{"gitId":"Kureans"},"content":"        return viewType;","lastModifiedDate":"2021-10-22"},{"lineNumber":46,"author":{"gitId":"Kureans"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":47,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":48,"author":{"gitId":"Kureans"},"content":"    public static void setViewType(ViewType viewType) {","lastModifiedDate":"2021-10-22"},{"lineNumber":49,"author":{"gitId":"Kureans"},"content":"        Parser.viewType \u003d viewType;","lastModifiedDate":"2021-10-22"},{"lineNumber":50,"author":{"gitId":"Kureans"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":51,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":52,"author":{"gitId":"Kureans"},"content":"    /**","lastModifiedDate":"2021-10-22"},{"lineNumber":53,"author":{"gitId":"Kureans"},"content":"     * Parses the user input and returns the corresponding command based on the parser\u0027s view type.","lastModifiedDate":"2021-10-22"},{"lineNumber":54,"author":{"gitId":"Kureans"},"content":"     *","lastModifiedDate":"2021-10-22"},{"lineNumber":55,"author":{"gitId":"Kureans"},"content":"     * @param userInput String containing the full user input.","lastModifiedDate":"2021-10-22"},{"lineNumber":56,"author":{"gitId":"Kureans"},"content":"     * @return the corresponding Command object.","lastModifiedDate":"2021-10-22"},{"lineNumber":57,"author":{"gitId":"Kureans"},"content":"     * @throws MedBotParserException if command is unrecognised.","lastModifiedDate":"2021-10-22"},{"lineNumber":58,"author":{"gitId":"Kureans"},"content":"     */","lastModifiedDate":"2021-10-22"},{"lineNumber":59,"author":{"gitId":"Kureans"},"content":"    public static Command parseCommand(String userInput) throws MedBotParserException {","lastModifiedDate":"2021-10-22"},{"lineNumber":60,"author":{"gitId":"Kureans"},"content":"        userInput \u003d ParserUtils.preprocessInput(userInput);","lastModifiedDate":"2021-10-22"},{"lineNumber":61,"author":{"gitId":"Kureans"},"content":"        //commands valid in all viewTypes","lastModifiedDate":"2021-10-22"},{"lineNumber":62,"author":{"gitId":"Kureans"},"content":"        if (userInput.startsWith(COMMAND_SWITCH)) {","lastModifiedDate":"2021-10-22"},{"lineNumber":63,"author":{"gitId":"Kureans"},"content":"            return parseSwitchCommand(userInput);","lastModifiedDate":"2021-10-22"},{"lineNumber":64,"author":{"gitId":"Kureans"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":65,"author":{"gitId":"Kureans"},"content":"        if (userInput.equals(COMMAND_EXIT)) {","lastModifiedDate":"2021-10-22"},{"lineNumber":66,"author":{"gitId":"Kureans"},"content":"            return new ExitCommand();","lastModifiedDate":"2021-10-22"},{"lineNumber":67,"author":{"gitId":"Kureans"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":68,"author":{"gitId":"Kureans"},"content":"        if (userInput.startsWith(COMMAND_HELP)) {","lastModifiedDate":"2021-10-25"},{"lineNumber":69,"author":{"gitId":"Kureans"},"content":"            return parseHelpCommand(userInput);","lastModifiedDate":"2021-10-22"},{"lineNumber":70,"author":{"gitId":"Kureans"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":71,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":72,"author":{"gitId":"Kureans"},"content":"        if (userInput.startsWith(COMMAND_GET_VIEW)) {","lastModifiedDate":"2021-10-25"},{"lineNumber":73,"author":{"gitId":"Kureans"},"content":"            return new GetCurrentViewCommand(getViewType());","lastModifiedDate":"2021-10-25"},{"lineNumber":74,"author":{"gitId":"Kureans"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":75,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":76,"author":{"gitId":"Kureans"},"content":"        //commands valid in only some viewTypes","lastModifiedDate":"2021-10-22"},{"lineNumber":77,"author":{"gitId":"Kureans"},"content":"        switch (viewType) {","lastModifiedDate":"2021-10-22"},{"lineNumber":78,"author":{"gitId":"Kureans"},"content":"        case PATIENT_INFO:","lastModifiedDate":"2021-10-22"},{"lineNumber":79,"author":{"gitId":"Kureans"},"content":"            return PatientCommandParser.parsePatientCommand(userInput);","lastModifiedDate":"2021-10-22"},{"lineNumber":80,"author":{"gitId":"Kureans"},"content":"        case MEDICAL_STAFF_INFO:","lastModifiedDate":"2021-10-22"},{"lineNumber":81,"author":{"gitId":"Kureans"},"content":"            return StaffCommandParser.parseStaffCommand(userInput);","lastModifiedDate":"2021-10-22"},{"lineNumber":82,"author":{"gitId":"Kureans"},"content":"        case SCHEDULER:","lastModifiedDate":"2021-10-22"},{"lineNumber":83,"author":{"gitId":"Kureans"},"content":"            return SchedulerCommandParser.parseSchedulingCommand(userInput);","lastModifiedDate":"2021-10-22"},{"lineNumber":84,"author":{"gitId":"Kureans"},"content":"        default:","lastModifiedDate":"2021-10-22"},{"lineNumber":85,"author":{"gitId":"Kureans"},"content":"            assert false;","lastModifiedDate":"2021-10-22"},{"lineNumber":86,"author":{"gitId":"Kureans"},"content":"            throw new MedBotParserException(ERROR_NO_VIEW_FOUND);","lastModifiedDate":"2021-10-22"},{"lineNumber":87,"author":{"gitId":"Kureans"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":88,"author":{"gitId":"Kureans"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":89,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":90,"author":{"gitId":"Kureans"},"content":"    /**","lastModifiedDate":"2021-10-22"},{"lineNumber":91,"author":{"gitId":"Kureans"},"content":"     * Parses user input to pass relevant parameters into the HelpCommand constructor.","lastModifiedDate":"2021-10-22"},{"lineNumber":92,"author":{"gitId":"Kureans"},"content":"     *","lastModifiedDate":"2021-10-22"},{"lineNumber":93,"author":{"gitId":"Kureans"},"content":"     * @param userInput String containing the full user input.","lastModifiedDate":"2021-10-22"},{"lineNumber":94,"author":{"gitId":"Kureans"},"content":"     * @return HelpCommand object.","lastModifiedDate":"2021-10-22"},{"lineNumber":95,"author":{"gitId":"Kureans"},"content":"     * @throws MedBotParserException if parameters.length \u003c 1 \u0026\u0026 \u003e 2","lastModifiedDate":"2021-10-22"},{"lineNumber":96,"author":{"gitId":"Kureans"},"content":"     */","lastModifiedDate":"2021-10-22"},{"lineNumber":97,"author":{"gitId":"Kureans"},"content":"    private static HelpCommand parseHelpCommand(String userInput) throws MedBotParserException {","lastModifiedDate":"2021-10-22"},{"lineNumber":98,"author":{"gitId":"Kureans"},"content":"        String commandTypeString \u003d EMPTY_STRING;","lastModifiedDate":"2021-10-22"},{"lineNumber":99,"author":{"gitId":"Kureans"},"content":"        try {","lastModifiedDate":"2021-10-22"},{"lineNumber":100,"author":{"gitId":"Kureans"},"content":"            commandTypeString \u003d userInput.substring(4).strip();","lastModifiedDate":"2021-10-22"},{"lineNumber":101,"author":{"gitId":"Kureans"},"content":"        } catch (IndexOutOfBoundsException ie) {","lastModifiedDate":"2021-10-22"},{"lineNumber":102,"author":{"gitId":"Kureans"},"content":"            return new HelpCommand(getViewType());","lastModifiedDate":"2021-10-22"},{"lineNumber":103,"author":{"gitId":"Kureans"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":104,"author":{"gitId":"Kureans"},"content":"        if (commandTypeString.equals(EMPTY_STRING)) {","lastModifiedDate":"2021-10-22"},{"lineNumber":105,"author":{"gitId":"Kureans"},"content":"            return new HelpCommand(getViewType());","lastModifiedDate":"2021-10-22"},{"lineNumber":106,"author":{"gitId":"Kureans"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":107,"author":{"gitId":"Kureans"},"content":"        CommandType commandType \u003d parseHelpCommandType(commandTypeString);","lastModifiedDate":"2021-10-22"},{"lineNumber":108,"author":{"gitId":"Kureans"},"content":"        return new HelpCommand(getViewType(),commandType);","lastModifiedDate":"2021-10-25"},{"lineNumber":109,"author":{"gitId":"Kureans"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":110,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":111,"author":{"gitId":"Kureans"},"content":"    private static CommandType parseHelpCommandType(String commandTypeString) throws MedBotParserException {","lastModifiedDate":"2021-10-22"},{"lineNumber":112,"author":{"gitId":"Kureans"},"content":"        switch (commandTypeString) {","lastModifiedDate":"2021-10-22"},{"lineNumber":113,"author":{"gitId":"Kureans"},"content":"        case COMMAND_ADD:","lastModifiedDate":"2021-10-22"},{"lineNumber":114,"author":{"gitId":"Kureans"},"content":"            return CommandType.ADD;","lastModifiedDate":"2021-10-22"},{"lineNumber":115,"author":{"gitId":"Kureans"},"content":"        case COMMAND_DELETE:","lastModifiedDate":"2021-10-22"},{"lineNumber":116,"author":{"gitId":"Kureans"},"content":"            return CommandType.DELETE;","lastModifiedDate":"2021-10-22"},{"lineNumber":117,"author":{"gitId":"Kureans"},"content":"        case COMMAND_EDIT:","lastModifiedDate":"2021-10-22"},{"lineNumber":118,"author":{"gitId":"Kureans"},"content":"            return CommandType.EDIT;","lastModifiedDate":"2021-10-22"},{"lineNumber":119,"author":{"gitId":"Kureans"},"content":"        case COMMAND_EXIT:","lastModifiedDate":"2021-10-22"},{"lineNumber":120,"author":{"gitId":"Kureans"},"content":"            return CommandType.EXIT;","lastModifiedDate":"2021-10-22"},{"lineNumber":121,"author":{"gitId":"Kureans"},"content":"        case COMMAND_HELP:","lastModifiedDate":"2021-10-22"},{"lineNumber":122,"author":{"gitId":"Kureans"},"content":"            return CommandType.HELP;","lastModifiedDate":"2021-10-22"},{"lineNumber":123,"author":{"gitId":"Kureans"},"content":"        case COMMAND_LIST:","lastModifiedDate":"2021-10-22"},{"lineNumber":124,"author":{"gitId":"Kureans"},"content":"            return CommandType.LIST;","lastModifiedDate":"2021-10-22"},{"lineNumber":125,"author":{"gitId":"Kureans"},"content":"        case COMMAND_SWITCH:","lastModifiedDate":"2021-10-22"},{"lineNumber":126,"author":{"gitId":"Kureans"},"content":"            return CommandType.SWITCH;","lastModifiedDate":"2021-10-22"},{"lineNumber":127,"author":{"gitId":"Kureans"},"content":"        case COMMAND_VIEW:","lastModifiedDate":"2021-10-22"},{"lineNumber":128,"author":{"gitId":"Kureans"},"content":"            return CommandType.VIEW;","lastModifiedDate":"2021-10-22"},{"lineNumber":129,"author":{"gitId":"Kureans"},"content":"        case COMMAND_FIND:","lastModifiedDate":"2021-10-22"},{"lineNumber":130,"author":{"gitId":"Kureans"},"content":"            return CommandType.FIND;","lastModifiedDate":"2021-10-22"},{"lineNumber":131,"author":{"gitId":"Kureans"},"content":"        case COMMAND_HIDE:","lastModifiedDate":"2021-11-02"},{"lineNumber":132,"author":{"gitId":"Kureans"},"content":"            return CommandType.HIDE;","lastModifiedDate":"2021-11-02"},{"lineNumber":133,"author":{"gitId":"Kureans"},"content":"        case COMMAND_SHOW:","lastModifiedDate":"2021-11-02"},{"lineNumber":134,"author":{"gitId":"Kureans"},"content":"            return CommandType.SHOW;","lastModifiedDate":"2021-11-02"},{"lineNumber":135,"author":{"gitId":"Kureans"},"content":"        case COMMAND_GET_VIEW:","lastModifiedDate":"2021-10-26"},{"lineNumber":136,"author":{"gitId":"Kureans"},"content":"            return CommandType.GET_VIEW;","lastModifiedDate":"2021-10-26"},{"lineNumber":137,"author":{"gitId":"Kureans"},"content":"        default:","lastModifiedDate":"2021-10-22"},{"lineNumber":138,"author":{"gitId":"Kureans"},"content":"            throw new MedBotParserException(ERROR_WRONG_COMMAND);","lastModifiedDate":"2021-10-22"},{"lineNumber":139,"author":{"gitId":"Kureans"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":140,"author":{"gitId":"Kureans"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":141,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":142,"author":{"gitId":"Kureans"},"content":"    /**","lastModifiedDate":"2021-10-22"},{"lineNumber":143,"author":{"gitId":"Kureans"},"content":"     * Processes user input and returns a SwitchCommand.","lastModifiedDate":"2021-10-22"},{"lineNumber":144,"author":{"gitId":"Kureans"},"content":"     *","lastModifiedDate":"2021-10-22"},{"lineNumber":145,"author":{"gitId":"Kureans"},"content":"     * \u003cp\u003eIf view type is specified, returns a switch command with that new view type. If not, returns","lastModifiedDate":"2021-10-22"},{"lineNumber":146,"author":{"gitId":"Kureans"},"content":"     * a switch command that iterates through the various views.","lastModifiedDate":"2021-10-22"},{"lineNumber":147,"author":{"gitId":"Kureans"},"content":"     *","lastModifiedDate":"2021-10-22"},{"lineNumber":148,"author":{"gitId":"Kureans"},"content":"     * @param userInput String containing the full user input.","lastModifiedDate":"2021-10-22"},{"lineNumber":149,"author":{"gitId":"Kureans"},"content":"     * @return SwitchCommand with the new view type if specified","lastModifiedDate":"2021-10-22"},{"lineNumber":150,"author":{"gitId":"Kureans"},"content":"     * @throws MedBotParserException if an invalid view type code is specified","lastModifiedDate":"2021-10-22"},{"lineNumber":151,"author":{"gitId":"Kureans"},"content":"     */","lastModifiedDate":"2021-10-22"},{"lineNumber":152,"author":{"gitId":"Kureans"},"content":"    private static SwitchCommand parseSwitchCommand(String userInput) throws MedBotParserException {","lastModifiedDate":"2021-10-22"},{"lineNumber":153,"author":{"gitId":"Kureans"},"content":"        String newType;","lastModifiedDate":"2021-10-22"},{"lineNumber":154,"author":{"gitId":"Kureans"},"content":"        try {","lastModifiedDate":"2021-10-22"},{"lineNumber":155,"author":{"gitId":"Kureans"},"content":"            newType \u003d userInput.substring(6).strip();","lastModifiedDate":"2021-10-22"},{"lineNumber":156,"author":{"gitId":"Kureans"},"content":"        } catch (IndexOutOfBoundsException ie) {","lastModifiedDate":"2021-10-22"},{"lineNumber":157,"author":{"gitId":"Kureans"},"content":"            newType \u003d EMPTY_STRING;","lastModifiedDate":"2021-10-22"},{"lineNumber":158,"author":{"gitId":"Kureans"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":159,"author":{"gitId":"Kureans"},"content":"        boolean isChanged;","lastModifiedDate":"2021-11-02"},{"lineNumber":160,"author":{"gitId":"Kureans"},"content":"        switch (newType) {","lastModifiedDate":"2021-10-22"},{"lineNumber":161,"author":{"gitId":"Kureans"},"content":"        case EMPTY_STRING:","lastModifiedDate":"2021-10-22"},{"lineNumber":162,"author":{"gitId":"Kureans"},"content":"            return new SwitchCommand(ViewType.getNextView(viewType), true);","lastModifiedDate":"2021-11-02"},{"lineNumber":163,"author":{"gitId":"Kureans"},"content":"        case VIEW_TYPE_PATIENT_VIEW:","lastModifiedDate":"2021-10-22"},{"lineNumber":164,"author":{"gitId":"Kureans"},"content":"        case VIEW_TYPE_PATIENT_VIEW_ALT:","lastModifiedDate":"2021-10-22"},{"lineNumber":165,"author":{"gitId":"Kureans"},"content":"            isChanged \u003d viewType !\u003d ViewType.PATIENT_INFO;","lastModifiedDate":"2021-11-02"},{"lineNumber":166,"author":{"gitId":"Kureans"},"content":"            return new SwitchCommand(ViewType.PATIENT_INFO, isChanged);","lastModifiedDate":"2021-11-02"},{"lineNumber":167,"author":{"gitId":"Kureans"},"content":"        case VIEW_TYPE_MEDICAL_STAFF_VIEW:","lastModifiedDate":"2021-10-22"},{"lineNumber":168,"author":{"gitId":"Kureans"},"content":"        case VIEW_TYPE_MEDICAL_STAFF_VIEW_ALT:","lastModifiedDate":"2021-10-22"},{"lineNumber":169,"author":{"gitId":"Kureans"},"content":"            isChanged \u003d viewType !\u003d ViewType.MEDICAL_STAFF_INFO;","lastModifiedDate":"2021-11-02"},{"lineNumber":170,"author":{"gitId":"Kureans"},"content":"            return new SwitchCommand(ViewType.MEDICAL_STAFF_INFO, isChanged);","lastModifiedDate":"2021-11-02"},{"lineNumber":171,"author":{"gitId":"Kureans"},"content":"        case VIEW_TYPE_SCHEDULER_VIEW:","lastModifiedDate":"2021-10-22"},{"lineNumber":172,"author":{"gitId":"Kureans"},"content":"        case VIEW_TYPE_SCHEDULER_VIEW_ALT:","lastModifiedDate":"2021-10-22"},{"lineNumber":173,"author":{"gitId":"Kureans"},"content":"            isChanged \u003d viewType !\u003d ViewType.SCHEDULER;","lastModifiedDate":"2021-11-02"},{"lineNumber":174,"author":{"gitId":"Kureans"},"content":"            return new SwitchCommand(ViewType.SCHEDULER, isChanged);","lastModifiedDate":"2021-11-02"},{"lineNumber":175,"author":{"gitId":"Kureans"},"content":"        default:","lastModifiedDate":"2021-10-22"},{"lineNumber":176,"author":{"gitId":"Kureans"},"content":"            throw new MedBotParserException(ERROR_INVALID_VIEW_TYPE);","lastModifiedDate":"2021-10-22"},{"lineNumber":177,"author":{"gitId":"Kureans"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":178,"author":{"gitId":"Kureans"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":179,"author":{"gitId":"Kureans"},"content":"}","lastModifiedDate":"2021-10-22"}],"authorContributionMap":{"justinfidelis":6,"jushg":6,"Kureans":167}},{"path":"src/main/java/medbot/parser/ParserUtils.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"justinfidelis"},"content":"package medbot.parser;","lastModifiedDate":"2021-10-22"},{"lineNumber":2,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":3,"author":{"gitId":"EricBryann"},"content":"import medbot.Appointment;","lastModifiedDate":"2021-10-25"},{"lineNumber":4,"author":{"gitId":"EricBryann"},"content":"import medbot.exceptions.MedBotParserException;","lastModifiedDate":"2021-10-25"},{"lineNumber":5,"author":{"gitId":"EricBryann"},"content":"import medbot.person.Person;","lastModifiedDate":"2021-10-25"},{"lineNumber":6,"author":{"gitId":"EricBryann"},"content":"import medbot.person.PersonType;","lastModifiedDate":"2021-10-25"},{"lineNumber":7,"author":{"gitId":"EricBryann"},"content":"import medbot.utilities.FilterType;","lastModifiedDate":"2021-10-25"},{"lineNumber":8,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":9,"author":{"gitId":"justinfidelis"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-10-22"},{"lineNumber":10,"author":{"gitId":"justinfidelis"},"content":"import java.time.ZoneOffset;","lastModifiedDate":"2021-10-22"},{"lineNumber":11,"author":{"gitId":"justinfidelis"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-10-22"},{"lineNumber":12,"author":{"gitId":"justinfidelis"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-10-24"},{"lineNumber":13,"author":{"gitId":"Kureans"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-11-04"},{"lineNumber":14,"author":{"gitId":"justinfidelis"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-10-22"},{"lineNumber":15,"author":{"gitId":"Kureans"},"content":"import java.util.List;","lastModifiedDate":"2021-10-25"},{"lineNumber":16,"author":{"gitId":"justinfidelis"},"content":"import java.util.function.Function;","lastModifiedDate":"2021-10-22"},{"lineNumber":17,"author":{"gitId":"justinfidelis"},"content":"import java.util.regex.MatchResult;","lastModifiedDate":"2021-10-22"},{"lineNumber":18,"author":{"gitId":"justinfidelis"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2021-10-22"},{"lineNumber":19,"author":{"gitId":"justinfidelis"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2021-10-22"},{"lineNumber":20,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":21,"author":{"gitId":"Kureans"},"content":"import static java.util.stream.Collectors.toList;","lastModifiedDate":"2021-10-25"},{"lineNumber":22,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":23,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":24,"author":{"gitId":"justinfidelis"},"content":"public abstract class ParserUtils {","lastModifiedDate":"2021-10-22"},{"lineNumber":25,"author":{"gitId":"EricBryann"},"content":"    private static final String PARAMETER_HIDE \u003d \"-h\";","lastModifiedDate":"2021-11-02"},{"lineNumber":26,"author":{"gitId":"justinfidelis"},"content":"    private static final String PARAMETER_NAME \u003d \"n/\";","lastModifiedDate":"2021-10-22"},{"lineNumber":27,"author":{"gitId":"justinfidelis"},"content":"    private static final String PARAMETER_PHONE \u003d \"p/\";","lastModifiedDate":"2021-10-22"},{"lineNumber":28,"author":{"gitId":"Kureans"},"content":"    private static final String PARAMETER_PATIENT \u003d \"p/\";","lastModifiedDate":"2021-10-25"},{"lineNumber":29,"author":{"gitId":"Kureans"},"content":"    private static final String PARAMETER_STAFF \u003d \"s/\";","lastModifiedDate":"2021-10-25"},{"lineNumber":30,"author":{"gitId":"justinfidelis"},"content":"    private static final String PARAMETER_EMAIL \u003d \"e/\";","lastModifiedDate":"2021-10-22"},{"lineNumber":31,"author":{"gitId":"justinfidelis"},"content":"    private static final String PARAMETER_IC \u003d \"i/\";","lastModifiedDate":"2021-10-22"},{"lineNumber":32,"author":{"gitId":"justinfidelis"},"content":"    private static final String PARAMETER_ADDRESS \u003d \"a/\";","lastModifiedDate":"2021-10-22"},{"lineNumber":33,"author":{"gitId":"Kureans"},"content":"    private static final String PARAMETER_BEFORE \u003d \"b/\";","lastModifiedDate":"2021-10-25"},{"lineNumber":34,"author":{"gitId":"Kureans"},"content":"    private static final String PARAMETER_AFTER \u003d \"a/\";","lastModifiedDate":"2021-10-25"},{"lineNumber":35,"author":{"gitId":"justinfidelis"},"content":"    private static final int PARAMETER_BUFFER \u003d 2;","lastModifiedDate":"2021-10-22"},{"lineNumber":36,"author":{"gitId":"justinfidelis"},"content":"    private static final String PARAMETER_APPOINTMENT_PATIENT_ID \u003d \"p/\";","lastModifiedDate":"2021-10-22"},{"lineNumber":37,"author":{"gitId":"justinfidelis"},"content":"    private static final String PARAMETER_APPOINTMENT_MEDICAL_STAFF_ID \u003d \"s/\";","lastModifiedDate":"2021-10-25"},{"lineNumber":38,"author":{"gitId":"justinfidelis"},"content":"    private static final String PARAMETER_APPOINTMENT_DATE_TIME \u003d \"d/\";","lastModifiedDate":"2021-10-25"},{"lineNumber":39,"author":{"gitId":"justinfidelis"},"content":"    private static final String ERROR_INVALID_PARAM_SPECIFIER \u003d \"\\\"%s\\\" is not a valid attribute specifier\";","lastModifiedDate":"2021-10-24"},{"lineNumber":40,"author":{"gitId":"Kureans"},"content":"    private static final String ERROR_NO_PARAMETER \u003d \"No parameters given.\";","lastModifiedDate":"2021-11-04"},{"lineNumber":41,"author":{"gitId":"Kureans"},"content":"    private static final String ERROR_TOO_MANY_SPECIFIERS \u003d \"Too many attribute specifiers.\";","lastModifiedDate":"2021-11-04"},{"lineNumber":42,"author":{"gitId":"justinfidelis"},"content":"    private static final String ERROR_ID_NOT_SPECIFIED \u003d \"ID not specified or not a number.\";","lastModifiedDate":"2021-10-24"},{"lineNumber":43,"author":{"gitId":"Kureans"},"content":"    private static final String ERROR_PERSON_TYPE_INVALID \u003d \"Person type specified is not valid.\";","lastModifiedDate":"2021-10-25"},{"lineNumber":44,"author":{"gitId":"Kureans"},"content":"    private static final String ERROR_FILTER_TYPE_INVALID \u003d \"Filter type specified is not valid.\";","lastModifiedDate":"2021-10-25"},{"lineNumber":45,"author":{"gitId":"EricBryann"},"content":"    private static final String ERROR_PARAMETER_TYPE_INVALID \u003d \"Parameter type specified is not valid.\";","lastModifiedDate":"2021-10-25"},{"lineNumber":46,"author":{"gitId":"justinfidelis"},"content":"    private static final String ERROR_NAME_NOT_SPECIFIED \u003d \"Name not specified.\";","lastModifiedDate":"2021-10-24"},{"lineNumber":47,"author":{"gitId":"justinfidelis"},"content":"    private static final String ERROR_IC_NUMBER_NOT_SPECIFIED \u003d \"IC number not specified.\";","lastModifiedDate":"2021-10-24"},{"lineNumber":48,"author":{"gitId":"justinfidelis"},"content":"    private static final String ERROR_IC_NUMBER_INCORRECT_FORMAT \u003d \"Incorrect IC number format.\";","lastModifiedDate":"2021-10-24"},{"lineNumber":49,"author":{"gitId":"justinfidelis"},"content":"    private static final String ERROR_PHONE_NUMBER_NOT_SPECIFIED \u003d \"Phone number not specified.\";","lastModifiedDate":"2021-10-24"},{"lineNumber":50,"author":{"gitId":"justinfidelis"},"content":"    private static final String ERROR_PHONE_NUMBER_TOO_FEW_DIGITS \u003d \"Phone number has too few digits.\";","lastModifiedDate":"2021-10-24"},{"lineNumber":51,"author":{"gitId":"justinfidelis"},"content":"    private static final String ERROR_PHONE_NUMBER_TOO_MANY_DIGITS \u003d \"Phone number has too many digits.\";","lastModifiedDate":"2021-10-24"},{"lineNumber":52,"author":{"gitId":"justinfidelis"},"content":"    private static final String ERROR_PHONE_NUMBER_UNEXPECTED_CHARS \u003d \"Phone number contains unexpected characters.\";","lastModifiedDate":"2021-10-24"},{"lineNumber":53,"author":{"gitId":"justinfidelis"},"content":"    private static final String ERROR_EMAIL_ADDRESS_NOT_SPECIFIED \u003d \"Email address not specified.\";","lastModifiedDate":"2021-10-24"},{"lineNumber":54,"author":{"gitId":"justinfidelis"},"content":"    private static final String ERROR_EMAIL_ADDRESS_WRONG_FORMAT \u003d \"\" + \"Incorrect email address format.\";","lastModifiedDate":"2021-10-24"},{"lineNumber":55,"author":{"gitId":"justinfidelis"},"content":"    private static final String ERROR_ADDRESS_NOT_SPECIFIED \u003d \"Address not specified.\";","lastModifiedDate":"2021-10-24"},{"lineNumber":56,"author":{"gitId":"justinfidelis"},"content":"    private static final String ERROR_DATE_TIME_WRONG_FORMAT \u003d \"Incorrect Date/Time format.\";","lastModifiedDate":"2021-10-24"},{"lineNumber":57,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":58,"author":{"gitId":"justinfidelis"},"content":"    private static final String REGEX_VERTICAL_LINE \u003d \"\\\\|\";","lastModifiedDate":"2021-10-22"},{"lineNumber":59,"author":{"gitId":"Kureans"},"content":"    private static final String REGEX_INPUT_PARAMETER \u003d \"[a-zA-Z]/\";","lastModifiedDate":"2021-11-04"},{"lineNumber":60,"author":{"gitId":"justinfidelis"},"content":"    private static final String REGEX_EMAIL \u003d \"(([a-zA-Z0-9][\\\\w-.]*[a-zA-Z0-9])|[a-zA-Z0-9])@([\\\\w]+\\\\.)+[\\\\w]+\";","lastModifiedDate":"2021-10-22"},{"lineNumber":61,"author":{"gitId":"justinfidelis"},"content":"    private static final String REGEX_IC \u003d \"[STFGM][0-9]{7}[A-Z]\";","lastModifiedDate":"2021-10-22"},{"lineNumber":62,"author":{"gitId":"justinfidelis"},"content":"    private static final String REGEX_PHONE_NUMBER \u003d \"[\\\\d]{8}\";","lastModifiedDate":"2021-10-22"},{"lineNumber":63,"author":{"gitId":"justinfidelis"},"content":"    private static final String REGEX_PHONE_NUMBER_SPACERS \u003d \"[- _]\";","lastModifiedDate":"2021-11-02"},{"lineNumber":64,"author":{"gitId":"justinfidelis"},"content":"    private static final String REGEX_ID \u003d \"([0-9]+$)|([0-9]+ )\";","lastModifiedDate":"2021-10-24"},{"lineNumber":65,"author":{"gitId":"justinfidelis"},"content":"    private static final String REGEX_CAPITALISE_POSITION \u003d \"(\\\\A|[ _-])[a-z]\";","lastModifiedDate":"2021-10-22"},{"lineNumber":66,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":67,"author":{"gitId":"justinfidelis"},"content":"    private static final String VERTICAL_LINE \u003d \"|\";","lastModifiedDate":"2021-10-22"},{"lineNumber":68,"author":{"gitId":"justinfidelis"},"content":"    private static final String EMPTY_STRING \u003d \"\";","lastModifiedDate":"2021-10-22"},{"lineNumber":69,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":70,"author":{"gitId":"justinfidelis"},"content":"    private static final String DATE_TIME_FORMATTER_PATTERN \u003d \"ddMMyy HHmm\";","lastModifiedDate":"2021-10-25"},{"lineNumber":71,"author":{"gitId":"justinfidelis"},"content":"    private static final ZoneOffset ZONE_OFFSET \u003d ZoneOffset.ofHours(8);","lastModifiedDate":"2021-10-25"},{"lineNumber":72,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":73,"author":{"gitId":"justinfidelis"},"content":"    /**","lastModifiedDate":"2021-10-22"},{"lineNumber":74,"author":{"gitId":"justinfidelis"},"content":"     * Parses attributeStrings array and modifies all the corresponding attribute in appointment.","lastModifiedDate":"2021-10-22"},{"lineNumber":75,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-10-22"},{"lineNumber":76,"author":{"gitId":"justinfidelis"},"content":"     * @param appointment      Appointment whose information will be updated","lastModifiedDate":"2021-10-22"},{"lineNumber":77,"author":{"gitId":"justinfidelis"},"content":"     * @param attributeStrings String Array containing Strings of an attribute specifier and the corresponding","lastModifiedDate":"2021-10-22"},{"lineNumber":78,"author":{"gitId":"justinfidelis"},"content":"     *                         appointment information","lastModifiedDate":"2021-10-22"},{"lineNumber":79,"author":{"gitId":"justinfidelis"},"content":"     * @throws MedBotParserException if the attributeString contains missing/invalid information","lastModifiedDate":"2021-10-22"},{"lineNumber":80,"author":{"gitId":"justinfidelis"},"content":"     */","lastModifiedDate":"2021-10-22"},{"lineNumber":81,"author":{"gitId":"justinfidelis"},"content":"    static void updateMultipleAppointmentInformation(Appointment appointment, String[] attributeStrings)","lastModifiedDate":"2021-10-22"},{"lineNumber":82,"author":{"gitId":"justinfidelis"},"content":"            throws MedBotParserException {","lastModifiedDate":"2021-10-22"},{"lineNumber":83,"author":{"gitId":"justinfidelis"},"content":"        for (String attributeString : attributeStrings) {","lastModifiedDate":"2021-10-22"},{"lineNumber":84,"author":{"gitId":"justinfidelis"},"content":"            updateAppointmentInformation(appointment, attributeString);","lastModifiedDate":"2021-10-22"},{"lineNumber":85,"author":{"gitId":"justinfidelis"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":86,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":87,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":88,"author":{"gitId":"justinfidelis"},"content":"    /**","lastModifiedDate":"2021-10-22"},{"lineNumber":89,"author":{"gitId":"justinfidelis"},"content":"     * Parses attributeString and modifies the corresponding attribute in appointment.","lastModifiedDate":"2021-10-22"},{"lineNumber":90,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-10-22"},{"lineNumber":91,"author":{"gitId":"justinfidelis"},"content":"     * @param appointment     Appointment whose information will be updated","lastModifiedDate":"2021-10-22"},{"lineNumber":92,"author":{"gitId":"justinfidelis"},"content":"     * @param attributeString String containing an attribute specifier and the corresponding appointment information","lastModifiedDate":"2021-10-22"},{"lineNumber":93,"author":{"gitId":"justinfidelis"},"content":"     * @throws MedBotParserException if the attributeString contains missing/invalid information","lastModifiedDate":"2021-10-22"},{"lineNumber":94,"author":{"gitId":"justinfidelis"},"content":"     */","lastModifiedDate":"2021-10-22"},{"lineNumber":95,"author":{"gitId":"CrimsonTitan79"},"content":"    public static void updateAppointmentInformation(Appointment appointment, String attributeString)","lastModifiedDate":"2021-10-25"},{"lineNumber":96,"author":{"gitId":"justinfidelis"},"content":"            throws MedBotParserException {","lastModifiedDate":"2021-10-22"},{"lineNumber":97,"author":{"gitId":"justinfidelis"},"content":"        if (attributeString.startsWith(PARAMETER_APPOINTMENT_PATIENT_ID)) {","lastModifiedDate":"2021-10-22"},{"lineNumber":98,"author":{"gitId":"justinfidelis"},"content":"            int patientId \u003d parseId(attributeString.substring(PARAMETER_BUFFER));","lastModifiedDate":"2021-10-22"},{"lineNumber":99,"author":{"gitId":"justinfidelis"},"content":"            appointment.setPatientId(patientId);","lastModifiedDate":"2021-10-22"},{"lineNumber":100,"author":{"gitId":"justinfidelis"},"content":"            return;","lastModifiedDate":"2021-10-22"},{"lineNumber":101,"author":{"gitId":"justinfidelis"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":102,"author":{"gitId":"justinfidelis"},"content":"        if (attributeString.startsWith(PARAMETER_APPOINTMENT_MEDICAL_STAFF_ID)) {","lastModifiedDate":"2021-10-25"},{"lineNumber":103,"author":{"gitId":"justinfidelis"},"content":"            int medicalStaffId \u003d parseId(attributeString.substring(PARAMETER_BUFFER));","lastModifiedDate":"2021-10-22"},{"lineNumber":104,"author":{"gitId":"justinfidelis"},"content":"            appointment.setMedicalStaffId(medicalStaffId);","lastModifiedDate":"2021-10-22"},{"lineNumber":105,"author":{"gitId":"justinfidelis"},"content":"            return;","lastModifiedDate":"2021-10-22"},{"lineNumber":106,"author":{"gitId":"justinfidelis"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":107,"author":{"gitId":"justinfidelis"},"content":"        if (attributeString.startsWith(PARAMETER_APPOINTMENT_DATE_TIME)) {","lastModifiedDate":"2021-10-25"},{"lineNumber":108,"author":{"gitId":"justinfidelis"},"content":"            int dateTimeCode \u003d parseDateTime(attributeString.substring(PARAMETER_BUFFER).strip());","lastModifiedDate":"2021-10-22"},{"lineNumber":109,"author":{"gitId":"justinfidelis"},"content":"            appointment.setDateTimeCode(dateTimeCode);","lastModifiedDate":"2021-10-22"},{"lineNumber":110,"author":{"gitId":"justinfidelis"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":111,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":112,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":113,"author":{"gitId":"justinfidelis"},"content":"    /**","lastModifiedDate":"2021-10-22"},{"lineNumber":114,"author":{"gitId":"justinfidelis"},"content":"     * Parses user input and separates it into a list of Strings containing the given parameters.","lastModifiedDate":"2021-10-22"},{"lineNumber":115,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-10-22"},{"lineNumber":116,"author":{"gitId":"justinfidelis"},"content":"     * @param userInput String containing the full user input.","lastModifiedDate":"2021-10-22"},{"lineNumber":117,"author":{"gitId":"justinfidelis"},"content":"     * @return list of parameters given by user.","lastModifiedDate":"2021-10-22"},{"lineNumber":118,"author":{"gitId":"justinfidelis"},"content":"     * @throws MedBotParserException when no parameters are specified.","lastModifiedDate":"2021-10-22"},{"lineNumber":119,"author":{"gitId":"justinfidelis"},"content":"     */","lastModifiedDate":"2021-10-22"},{"lineNumber":120,"author":{"gitId":"justinfidelis"},"content":"    static String[] getParameters(String userInput) throws MedBotParserException {","lastModifiedDate":"2021-10-22"},{"lineNumber":121,"author":{"gitId":"justinfidelis"},"content":"        String processedInput \u003d preprocessMultiAttributeInput(userInput);","lastModifiedDate":"2021-10-22"},{"lineNumber":122,"author":{"gitId":"justinfidelis"},"content":"        String[] words \u003d processedInput.split(REGEX_VERTICAL_LINE);","lastModifiedDate":"2021-10-22"},{"lineNumber":123,"author":{"gitId":"justinfidelis"},"content":"        if (words.length \u003d\u003d 1) {","lastModifiedDate":"2021-10-22"},{"lineNumber":124,"author":{"gitId":"justinfidelis"},"content":"            throw new MedBotParserException(ERROR_NO_PARAMETER);","lastModifiedDate":"2021-10-22"},{"lineNumber":125,"author":{"gitId":"justinfidelis"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":126,"author":{"gitId":"justinfidelis"},"content":"        assert words.length \u003e 1;","lastModifiedDate":"2021-10-22"},{"lineNumber":127,"author":{"gitId":"justinfidelis"},"content":"        String[] parameters \u003d Arrays.copyOfRange(words, 1, words.length);","lastModifiedDate":"2021-10-22"},{"lineNumber":128,"author":{"gitId":"justinfidelis"},"content":"        assert parameters.length \u003e\u003d 1;","lastModifiedDate":"2021-10-22"},{"lineNumber":129,"author":{"gitId":"justinfidelis"},"content":"        return parameters;","lastModifiedDate":"2021-10-22"},{"lineNumber":130,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":131,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":132,"author":{"gitId":"Kureans"},"content":"    static List\u003cString\u003e getParametersWithoutSpecifiers(String userInput) throws MedBotParserException {","lastModifiedDate":"2021-10-25"},{"lineNumber":133,"author":{"gitId":"Kureans"},"content":"        String processedInput \u003d preprocessMultiAttributeInput(userInput);","lastModifiedDate":"2021-10-25"},{"lineNumber":134,"author":{"gitId":"Kureans"},"content":"        String[] words \u003d processedInput.split(REGEX_VERTICAL_LINE);","lastModifiedDate":"2021-10-25"},{"lineNumber":135,"author":{"gitId":"Kureans"},"content":"        if (words.length \u003d\u003d 1) {","lastModifiedDate":"2021-10-25"},{"lineNumber":136,"author":{"gitId":"Kureans"},"content":"            throw new MedBotParserException(ERROR_NO_PARAMETER);","lastModifiedDate":"2021-10-25"},{"lineNumber":137,"author":{"gitId":"Kureans"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":138,"author":{"gitId":"Kureans"},"content":"        assert words.length \u003e 1;","lastModifiedDate":"2021-10-25"},{"lineNumber":139,"author":{"gitId":"Kureans"},"content":"        String[] parameters \u003d Arrays.copyOfRange(words, 1, words.length);","lastModifiedDate":"2021-10-25"},{"lineNumber":140,"author":{"gitId":"Kureans"},"content":"        List\u003cString\u003e p \u003d Arrays.asList(parameters);","lastModifiedDate":"2021-10-25"},{"lineNumber":141,"author":{"gitId":"Kureans"},"content":"        assert parameters.length \u003e\u003d 1;","lastModifiedDate":"2021-10-25"},{"lineNumber":142,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":143,"author":{"gitId":"justinfidelis"},"content":"        return p.stream()","lastModifiedDate":"2021-10-25"},{"lineNumber":144,"author":{"gitId":"Kureans"},"content":"                .map(s -\u003e s.substring(PARAMETER_BUFFER))","lastModifiedDate":"2021-10-25"},{"lineNumber":145,"author":{"gitId":"Kureans"},"content":"                .collect(toList());","lastModifiedDate":"2021-10-25"},{"lineNumber":146,"author":{"gitId":"Kureans"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":147,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":148,"author":{"gitId":"Kureans"},"content":"    static List\u003cString\u003e getSpecifiers(String userInput) throws MedBotParserException {","lastModifiedDate":"2021-11-04"},{"lineNumber":149,"author":{"gitId":"Kureans"},"content":"        Pattern pattern \u003d Pattern.compile(REGEX_INPUT_PARAMETER);","lastModifiedDate":"2021-11-07"},{"lineNumber":150,"author":{"gitId":"Kureans"},"content":"        Matcher matcher \u003d pattern.matcher(userInput);","lastModifiedDate":"2021-10-25"},{"lineNumber":151,"author":{"gitId":"Kureans"},"content":"        List\u003cString\u003e specifiers \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-11-04"},{"lineNumber":152,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":153,"author":{"gitId":"Kureans"},"content":"        while (matcher.find()) {","lastModifiedDate":"2021-10-25"},{"lineNumber":154,"author":{"gitId":"Kureans"},"content":"            specifiers.add(matcher.group());","lastModifiedDate":"2021-11-04"},{"lineNumber":155,"author":{"gitId":"Kureans"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":156,"author":{"gitId":"Kureans"},"content":"        if (specifiers.size() \u003e 2) {","lastModifiedDate":"2021-11-04"},{"lineNumber":157,"author":{"gitId":"Kureans"},"content":"            throw new MedBotParserException(ERROR_TOO_MANY_SPECIFIERS);","lastModifiedDate":"2021-11-04"},{"lineNumber":158,"author":{"gitId":"Kureans"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":159,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":160,"author":{"gitId":"Kureans"},"content":"        return specifiers;","lastModifiedDate":"2021-10-25"},{"lineNumber":161,"author":{"gitId":"Kureans"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":162,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":163,"author":{"gitId":"justinfidelis"},"content":"    /**","lastModifiedDate":"2021-10-22"},{"lineNumber":164,"author":{"gitId":"justinfidelis"},"content":"     * Preprocesses user input to remove invalid substring that can not be parsed.","lastModifiedDate":"2021-10-22"},{"lineNumber":165,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-10-22"},{"lineNumber":166,"author":{"gitId":"justinfidelis"},"content":"     * @param userInput The initial user input.","lastModifiedDate":"2021-10-22"},{"lineNumber":167,"author":{"gitId":"justinfidelis"},"content":"     * @return user input without leading white space and vertical lines present.","lastModifiedDate":"2021-10-22"},{"lineNumber":168,"author":{"gitId":"justinfidelis"},"content":"     */","lastModifiedDate":"2021-10-22"},{"lineNumber":169,"author":{"gitId":"justinfidelis"},"content":"    static String preprocessInput(String userInput) {","lastModifiedDate":"2021-10-22"},{"lineNumber":170,"author":{"gitId":"justinfidelis"},"content":"        return userInput.strip().replace(VERTICAL_LINE, EMPTY_STRING);","lastModifiedDate":"2021-10-22"},{"lineNumber":171,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":172,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":173,"author":{"gitId":"justinfidelis"},"content":"    /**","lastModifiedDate":"2021-10-22"},{"lineNumber":174,"author":{"gitId":"justinfidelis"},"content":"     * Parses attributeStrings array and modifies all the corresponding attribute in person.","lastModifiedDate":"2021-10-22"},{"lineNumber":175,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-10-22"},{"lineNumber":176,"author":{"gitId":"justinfidelis"},"content":"     * @param person           Person whose personal information will be updated","lastModifiedDate":"2021-10-22"},{"lineNumber":177,"author":{"gitId":"justinfidelis"},"content":"     * @param attributeStrings String Array containing Strings of an attribute specifier and the corresponding","lastModifiedDate":"2021-10-22"},{"lineNumber":178,"author":{"gitId":"justinfidelis"},"content":"     *                         personal information","lastModifiedDate":"2021-10-22"},{"lineNumber":179,"author":{"gitId":"justinfidelis"},"content":"     * @throws MedBotParserException if the attributeString contains missing/invalid information","lastModifiedDate":"2021-10-22"},{"lineNumber":180,"author":{"gitId":"justinfidelis"},"content":"     */","lastModifiedDate":"2021-10-22"},{"lineNumber":181,"author":{"gitId":"justinfidelis"},"content":"    static void updateMultiplePersonalInformation(Person person, String[] attributeStrings)","lastModifiedDate":"2021-10-22"},{"lineNumber":182,"author":{"gitId":"justinfidelis"},"content":"            throws MedBotParserException {","lastModifiedDate":"2021-10-22"},{"lineNumber":183,"author":{"gitId":"justinfidelis"},"content":"        for (String attributeString : attributeStrings) {","lastModifiedDate":"2021-10-22"},{"lineNumber":184,"author":{"gitId":"justinfidelis"},"content":"            updatePersonalInformation(person, attributeString);","lastModifiedDate":"2021-10-22"},{"lineNumber":185,"author":{"gitId":"justinfidelis"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":186,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":187,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":188,"author":{"gitId":"justinfidelis"},"content":"    /**","lastModifiedDate":"2021-10-22"},{"lineNumber":189,"author":{"gitId":"justinfidelis"},"content":"     * Parses attributeString and modifies the corresponding attribute in person.","lastModifiedDate":"2021-10-22"},{"lineNumber":190,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-10-22"},{"lineNumber":191,"author":{"gitId":"justinfidelis"},"content":"     * @param person          Person whose personal information will be updated","lastModifiedDate":"2021-10-22"},{"lineNumber":192,"author":{"gitId":"justinfidelis"},"content":"     * @param attributeString String containing an attribute specifier and the corresponding personal information","lastModifiedDate":"2021-10-22"},{"lineNumber":193,"author":{"gitId":"justinfidelis"},"content":"     * @throws MedBotParserException if the attributeString contains missing/invalid information","lastModifiedDate":"2021-10-22"},{"lineNumber":194,"author":{"gitId":"justinfidelis"},"content":"     */","lastModifiedDate":"2021-10-22"},{"lineNumber":195,"author":{"gitId":"justinfidelis"},"content":"    public static void updatePersonalInformation(Person person, String attributeString) throws MedBotParserException {","lastModifiedDate":"2021-10-22"},{"lineNumber":196,"author":{"gitId":"justinfidelis"},"content":"        if (attributeString.startsWith(PARAMETER_NAME)) {","lastModifiedDate":"2021-10-22"},{"lineNumber":197,"author":{"gitId":"justinfidelis"},"content":"            String name \u003d parseName(attributeString.substring(PARAMETER_BUFFER));","lastModifiedDate":"2021-10-22"},{"lineNumber":198,"author":{"gitId":"justinfidelis"},"content":"            person.setName(name);","lastModifiedDate":"2021-10-22"},{"lineNumber":199,"author":{"gitId":"justinfidelis"},"content":"            return;","lastModifiedDate":"2021-10-22"},{"lineNumber":200,"author":{"gitId":"justinfidelis"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":201,"author":{"gitId":"justinfidelis"},"content":"        if (attributeString.startsWith(PARAMETER_PHONE)) {","lastModifiedDate":"2021-10-22"},{"lineNumber":202,"author":{"gitId":"justinfidelis"},"content":"            String phoneNumber \u003d parsePhoneNumber(attributeString.substring(PARAMETER_BUFFER));","lastModifiedDate":"2021-10-22"},{"lineNumber":203,"author":{"gitId":"justinfidelis"},"content":"            person.setPhoneNumber(phoneNumber);","lastModifiedDate":"2021-10-22"},{"lineNumber":204,"author":{"gitId":"justinfidelis"},"content":"            return;","lastModifiedDate":"2021-10-22"},{"lineNumber":205,"author":{"gitId":"justinfidelis"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":206,"author":{"gitId":"justinfidelis"},"content":"        if (attributeString.startsWith(PARAMETER_EMAIL)) {","lastModifiedDate":"2021-10-22"},{"lineNumber":207,"author":{"gitId":"justinfidelis"},"content":"            String email \u003d parseEmailAddress(attributeString.substring(PARAMETER_BUFFER));","lastModifiedDate":"2021-10-22"},{"lineNumber":208,"author":{"gitId":"justinfidelis"},"content":"            person.setEmailAddress(email);","lastModifiedDate":"2021-10-22"},{"lineNumber":209,"author":{"gitId":"justinfidelis"},"content":"            return;","lastModifiedDate":"2021-10-22"},{"lineNumber":210,"author":{"gitId":"justinfidelis"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":211,"author":{"gitId":"justinfidelis"},"content":"        if (attributeString.startsWith(PARAMETER_IC)) {","lastModifiedDate":"2021-10-22"},{"lineNumber":212,"author":{"gitId":"justinfidelis"},"content":"            String icNumber \u003d parseIcNumber(attributeString.substring(PARAMETER_BUFFER));","lastModifiedDate":"2021-10-22"},{"lineNumber":213,"author":{"gitId":"justinfidelis"},"content":"            person.setIcNumber(icNumber);","lastModifiedDate":"2021-10-22"},{"lineNumber":214,"author":{"gitId":"justinfidelis"},"content":"            return;","lastModifiedDate":"2021-10-22"},{"lineNumber":215,"author":{"gitId":"justinfidelis"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":216,"author":{"gitId":"justinfidelis"},"content":"        if (attributeString.startsWith(PARAMETER_ADDRESS)) {","lastModifiedDate":"2021-10-22"},{"lineNumber":217,"author":{"gitId":"justinfidelis"},"content":"            String address \u003d parseResidentialAddress(attributeString.substring(PARAMETER_BUFFER));","lastModifiedDate":"2021-10-22"},{"lineNumber":218,"author":{"gitId":"justinfidelis"},"content":"            person.setResidentialAddress(address);","lastModifiedDate":"2021-10-22"},{"lineNumber":219,"author":{"gitId":"justinfidelis"},"content":"            return;","lastModifiedDate":"2021-10-24"},{"lineNumber":220,"author":{"gitId":"justinfidelis"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":221,"author":{"gitId":"justinfidelis"},"content":"        throw new MedBotParserException(String.format(ERROR_INVALID_PARAM_SPECIFIER, attributeString.substring(0, 2)));","lastModifiedDate":"2021-10-24"},{"lineNumber":222,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":223,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":224,"author":{"gitId":"justinfidelis"},"content":"    /**","lastModifiedDate":"2021-10-22"},{"lineNumber":225,"author":{"gitId":"justinfidelis"},"content":"     * Returns a String containing the names specified in attributeString, with each name capitalised.","lastModifiedDate":"2021-10-22"},{"lineNumber":226,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-10-22"},{"lineNumber":227,"author":{"gitId":"justinfidelis"},"content":"     * @param attributeString String containing the name to be parsed","lastModifiedDate":"2021-10-22"},{"lineNumber":228,"author":{"gitId":"justinfidelis"},"content":"     * @return String containing the name specified in attributeString","lastModifiedDate":"2021-10-22"},{"lineNumber":229,"author":{"gitId":"justinfidelis"},"content":"     * @throws MedBotParserException if no name is given","lastModifiedDate":"2021-10-22"},{"lineNumber":230,"author":{"gitId":"justinfidelis"},"content":"     */","lastModifiedDate":"2021-10-22"},{"lineNumber":231,"author":{"gitId":"justinfidelis"},"content":"    public static String parseName(String attributeString) throws MedBotParserException {","lastModifiedDate":"2021-10-24"},{"lineNumber":232,"author":{"gitId":"justinfidelis"},"content":"        String name \u003d attributeString.strip();","lastModifiedDate":"2021-10-22"},{"lineNumber":233,"author":{"gitId":"justinfidelis"},"content":"        if (name.equals(EMPTY_STRING)) {","lastModifiedDate":"2021-10-22"},{"lineNumber":234,"author":{"gitId":"justinfidelis"},"content":"            throw new MedBotParserException(ERROR_NAME_NOT_SPECIFIED);","lastModifiedDate":"2021-10-22"},{"lineNumber":235,"author":{"gitId":"justinfidelis"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":236,"author":{"gitId":"justinfidelis"},"content":"        return capitaliseEachWord(name);","lastModifiedDate":"2021-10-22"},{"lineNumber":237,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":238,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":239,"author":{"gitId":"justinfidelis"},"content":"    /**","lastModifiedDate":"2021-10-22"},{"lineNumber":240,"author":{"gitId":"justinfidelis"},"content":"     * Returns a String containing the IC number specified in attributeString.","lastModifiedDate":"2021-10-22"},{"lineNumber":241,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-10-22"},{"lineNumber":242,"author":{"gitId":"justinfidelis"},"content":"     * \u003cp\u003eChecks if the resultant String is of the right IC number format","lastModifiedDate":"2021-10-22"},{"lineNumber":243,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-10-22"},{"lineNumber":244,"author":{"gitId":"justinfidelis"},"content":"     * @param attributeString String containing the IC number to be parsed","lastModifiedDate":"2021-10-22"},{"lineNumber":245,"author":{"gitId":"justinfidelis"},"content":"     * @return String containing the IC number specified in attributeString","lastModifiedDate":"2021-10-22"},{"lineNumber":246,"author":{"gitId":"justinfidelis"},"content":"     * @throws MedBotParserException if IC number is not specified, or is in the wrong format","lastModifiedDate":"2021-10-22"},{"lineNumber":247,"author":{"gitId":"justinfidelis"},"content":"     */","lastModifiedDate":"2021-10-22"},{"lineNumber":248,"author":{"gitId":"justinfidelis"},"content":"    public static String parseIcNumber(String attributeString) throws MedBotParserException {","lastModifiedDate":"2021-10-24"},{"lineNumber":249,"author":{"gitId":"justinfidelis"},"content":"        String icString \u003d attributeString.toUpperCase().strip();","lastModifiedDate":"2021-10-22"},{"lineNumber":250,"author":{"gitId":"justinfidelis"},"content":"        if (icString.equals(EMPTY_STRING)) {","lastModifiedDate":"2021-10-22"},{"lineNumber":251,"author":{"gitId":"justinfidelis"},"content":"            throw new MedBotParserException(ERROR_IC_NUMBER_NOT_SPECIFIED);","lastModifiedDate":"2021-10-22"},{"lineNumber":252,"author":{"gitId":"justinfidelis"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":253,"author":{"gitId":"justinfidelis"},"content":"        if (!icString.matches(REGEX_IC)) {","lastModifiedDate":"2021-10-22"},{"lineNumber":254,"author":{"gitId":"justinfidelis"},"content":"            throw new MedBotParserException(ERROR_IC_NUMBER_INCORRECT_FORMAT);","lastModifiedDate":"2021-10-22"},{"lineNumber":255,"author":{"gitId":"justinfidelis"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":256,"author":{"gitId":"justinfidelis"},"content":"        assert icString.length() \u003d\u003d 9;","lastModifiedDate":"2021-10-22"},{"lineNumber":257,"author":{"gitId":"justinfidelis"},"content":"        return icString;","lastModifiedDate":"2021-10-22"},{"lineNumber":258,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":259,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":260,"author":{"gitId":"justinfidelis"},"content":"    /**","lastModifiedDate":"2021-10-22"},{"lineNumber":261,"author":{"gitId":"justinfidelis"},"content":"     * Returns a String containing the phone number specified in attributeString.","lastModifiedDate":"2021-10-22"},{"lineNumber":262,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-10-22"},{"lineNumber":263,"author":{"gitId":"justinfidelis"},"content":"     * \u003cp\u003eRemoves special characters \"- _+()\" and checks if the length of the resultant String is 8","lastModifiedDate":"2021-10-22"},{"lineNumber":264,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-10-22"},{"lineNumber":265,"author":{"gitId":"justinfidelis"},"content":"     * @param attributeString String containing the phone number to be parsed","lastModifiedDate":"2021-10-22"},{"lineNumber":266,"author":{"gitId":"justinfidelis"},"content":"     * @return String containing the phone number specified in attributeString","lastModifiedDate":"2021-10-22"},{"lineNumber":267,"author":{"gitId":"justinfidelis"},"content":"     * @throws MedBotParserException if the phone number is not specified,","lastModifiedDate":"2021-10-22"},{"lineNumber":268,"author":{"gitId":"justinfidelis"},"content":"     *                               has too many/few digits or contains unexpected characters","lastModifiedDate":"2021-10-22"},{"lineNumber":269,"author":{"gitId":"justinfidelis"},"content":"     */","lastModifiedDate":"2021-10-22"},{"lineNumber":270,"author":{"gitId":"justinfidelis"},"content":"    public static String parsePhoneNumber(String attributeString) throws MedBotParserException {","lastModifiedDate":"2021-10-24"},{"lineNumber":271,"author":{"gitId":"justinfidelis"},"content":"        String numberString \u003d attributeString.replaceAll(REGEX_PHONE_NUMBER_SPACERS, EMPTY_STRING).strip();","lastModifiedDate":"2021-11-02"},{"lineNumber":272,"author":{"gitId":"justinfidelis"},"content":"        if (numberString.equals(EMPTY_STRING)) {","lastModifiedDate":"2021-10-22"},{"lineNumber":273,"author":{"gitId":"justinfidelis"},"content":"            throw new MedBotParserException(ERROR_PHONE_NUMBER_NOT_SPECIFIED);","lastModifiedDate":"2021-10-22"},{"lineNumber":274,"author":{"gitId":"justinfidelis"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":275,"author":{"gitId":"justinfidelis"},"content":"        if (numberString.length() \u003e 8) {","lastModifiedDate":"2021-10-22"},{"lineNumber":276,"author":{"gitId":"justinfidelis"},"content":"            throw new MedBotParserException(ERROR_PHONE_NUMBER_TOO_MANY_DIGITS);","lastModifiedDate":"2021-10-22"},{"lineNumber":277,"author":{"gitId":"justinfidelis"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":278,"author":{"gitId":"justinfidelis"},"content":"        if (numberString.length() \u003c 8) {","lastModifiedDate":"2021-10-22"},{"lineNumber":279,"author":{"gitId":"justinfidelis"},"content":"            throw new MedBotParserException(ERROR_PHONE_NUMBER_TOO_FEW_DIGITS);","lastModifiedDate":"2021-10-22"},{"lineNumber":280,"author":{"gitId":"justinfidelis"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":281,"author":{"gitId":"justinfidelis"},"content":"        if (!numberString.matches(REGEX_PHONE_NUMBER)) {","lastModifiedDate":"2021-10-22"},{"lineNumber":282,"author":{"gitId":"justinfidelis"},"content":"            throw new MedBotParserException(ERROR_PHONE_NUMBER_UNEXPECTED_CHARS);","lastModifiedDate":"2021-10-24"},{"lineNumber":283,"author":{"gitId":"justinfidelis"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":284,"author":{"gitId":"justinfidelis"},"content":"        return numberString;","lastModifiedDate":"2021-10-22"},{"lineNumber":285,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":286,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":287,"author":{"gitId":"justinfidelis"},"content":"    /**","lastModifiedDate":"2021-10-22"},{"lineNumber":288,"author":{"gitId":"justinfidelis"},"content":"     * Returns a String containing the email address specified in attributeString.","lastModifiedDate":"2021-10-22"},{"lineNumber":289,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-10-22"},{"lineNumber":290,"author":{"gitId":"justinfidelis"},"content":"     * \u003cp\u003eChecks if the resultant String is of the right email format.","lastModifiedDate":"2021-10-24"},{"lineNumber":291,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-10-22"},{"lineNumber":292,"author":{"gitId":"justinfidelis"},"content":"     * @param attributeString String containing the email address to be parsed","lastModifiedDate":"2021-10-22"},{"lineNumber":293,"author":{"gitId":"justinfidelis"},"content":"     * @return String containing the email address specified in attributeString","lastModifiedDate":"2021-10-22"},{"lineNumber":294,"author":{"gitId":"justinfidelis"},"content":"     * @throws MedBotParserException if the email address is not specified or is in the wrong format","lastModifiedDate":"2021-10-22"},{"lineNumber":295,"author":{"gitId":"justinfidelis"},"content":"     */","lastModifiedDate":"2021-10-22"},{"lineNumber":296,"author":{"gitId":"justinfidelis"},"content":"    public static String parseEmailAddress(String attributeString) throws MedBotParserException {","lastModifiedDate":"2021-10-24"},{"lineNumber":297,"author":{"gitId":"justinfidelis"},"content":"        String emailString \u003d attributeString.strip();","lastModifiedDate":"2021-10-22"},{"lineNumber":298,"author":{"gitId":"justinfidelis"},"content":"        if (emailString.equals(EMPTY_STRING)) {","lastModifiedDate":"2021-10-22"},{"lineNumber":299,"author":{"gitId":"justinfidelis"},"content":"            throw new MedBotParserException(ERROR_EMAIL_ADDRESS_NOT_SPECIFIED);","lastModifiedDate":"2021-10-22"},{"lineNumber":300,"author":{"gitId":"justinfidelis"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":301,"author":{"gitId":"justinfidelis"},"content":"        if (!emailString.matches(REGEX_EMAIL)) {","lastModifiedDate":"2021-10-22"},{"lineNumber":302,"author":{"gitId":"justinfidelis"},"content":"            throw new MedBotParserException(ERROR_EMAIL_ADDRESS_WRONG_FORMAT);","lastModifiedDate":"2021-10-22"},{"lineNumber":303,"author":{"gitId":"justinfidelis"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":304,"author":{"gitId":"justinfidelis"},"content":"        return emailString;","lastModifiedDate":"2021-10-22"},{"lineNumber":305,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":306,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":307,"author":{"gitId":"justinfidelis"},"content":"    /**","lastModifiedDate":"2021-10-22"},{"lineNumber":308,"author":{"gitId":"justinfidelis"},"content":"     * Returns the String containing the address specified in attributeString, with each word capitalised.","lastModifiedDate":"2021-10-22"},{"lineNumber":309,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-10-22"},{"lineNumber":310,"author":{"gitId":"justinfidelis"},"content":"     * \u003cp\u003eCapitalises each word in the address.","lastModifiedDate":"2021-10-24"},{"lineNumber":311,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-10-22"},{"lineNumber":312,"author":{"gitId":"justinfidelis"},"content":"     * @param attributeString String containing the address to be parsed","lastModifiedDate":"2021-10-22"},{"lineNumber":313,"author":{"gitId":"justinfidelis"},"content":"     * @return String containing the address specified in attributeString","lastModifiedDate":"2021-10-22"},{"lineNumber":314,"author":{"gitId":"justinfidelis"},"content":"     * @throws MedBotParserException if address is not specified","lastModifiedDate":"2021-10-22"},{"lineNumber":315,"author":{"gitId":"justinfidelis"},"content":"     */","lastModifiedDate":"2021-10-22"},{"lineNumber":316,"author":{"gitId":"justinfidelis"},"content":"    public static String parseResidentialAddress(String attributeString) throws MedBotParserException {","lastModifiedDate":"2021-10-24"},{"lineNumber":317,"author":{"gitId":"justinfidelis"},"content":"        String addressString \u003d attributeString.strip();","lastModifiedDate":"2021-10-22"},{"lineNumber":318,"author":{"gitId":"justinfidelis"},"content":"        if (addressString.equals(EMPTY_STRING)) {","lastModifiedDate":"2021-10-22"},{"lineNumber":319,"author":{"gitId":"justinfidelis"},"content":"            throw new MedBotParserException(ERROR_ADDRESS_NOT_SPECIFIED);","lastModifiedDate":"2021-10-22"},{"lineNumber":320,"author":{"gitId":"justinfidelis"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":321,"author":{"gitId":"justinfidelis"},"content":"        return capitaliseEachWord(addressString);","lastModifiedDate":"2021-10-22"},{"lineNumber":322,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":323,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":324,"author":{"gitId":"justinfidelis"},"content":"    /**","lastModifiedDate":"2021-10-22"},{"lineNumber":325,"author":{"gitId":"justinfidelis"},"content":"     * Reads the String and returns the non-negative integer at the start of the String.","lastModifiedDate":"2021-10-24"},{"lineNumber":326,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-10-22"},{"lineNumber":327,"author":{"gitId":"justinfidelis"},"content":"     * \u003cp\u003eFinds an integer at the start of the String that is immediately followed by a space character or the","lastModifiedDate":"2021-10-22"},{"lineNumber":328,"author":{"gitId":"justinfidelis"},"content":"     * end of the String. Returns that integer.","lastModifiedDate":"2021-10-22"},{"lineNumber":329,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-10-22"},{"lineNumber":330,"author":{"gitId":"justinfidelis"},"content":"     * @param string String that starts with an integer","lastModifiedDate":"2021-10-22"},{"lineNumber":331,"author":{"gitId":"justinfidelis"},"content":"     * @return integer that was found","lastModifiedDate":"2021-10-22"},{"lineNumber":332,"author":{"gitId":"justinfidelis"},"content":"     * @throws MedBotParserException if no integer is found","lastModifiedDate":"2021-10-22"},{"lineNumber":333,"author":{"gitId":"justinfidelis"},"content":"     */","lastModifiedDate":"2021-10-22"},{"lineNumber":334,"author":{"gitId":"justinfidelis"},"content":"    public static int parseId(String string) throws MedBotParserException {","lastModifiedDate":"2021-10-24"},{"lineNumber":335,"author":{"gitId":"justinfidelis"},"content":"        string \u003d string.strip();","lastModifiedDate":"2021-10-22"},{"lineNumber":336,"author":{"gitId":"justinfidelis"},"content":"        if (string.equals(EMPTY_STRING)) {","lastModifiedDate":"2021-10-22"},{"lineNumber":337,"author":{"gitId":"justinfidelis"},"content":"            throw new MedBotParserException(ERROR_ID_NOT_SPECIFIED);","lastModifiedDate":"2021-10-22"},{"lineNumber":338,"author":{"gitId":"justinfidelis"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":339,"author":{"gitId":"justinfidelis"},"content":"        Pattern pattern \u003d Pattern.compile(REGEX_ID);","lastModifiedDate":"2021-10-24"},{"lineNumber":340,"author":{"gitId":"justinfidelis"},"content":"        Matcher matcher \u003d pattern.matcher(string);","lastModifiedDate":"2021-10-22"},{"lineNumber":341,"author":{"gitId":"justinfidelis"},"content":"        if (!matcher.lookingAt()) {","lastModifiedDate":"2021-10-24"},{"lineNumber":342,"author":{"gitId":"justinfidelis"},"content":"            throw new MedBotParserException(ERROR_ID_NOT_SPECIFIED);","lastModifiedDate":"2021-10-24"},{"lineNumber":343,"author":{"gitId":"justinfidelis"},"content":"        }","lastModifiedDate":"2021-10-24"},{"lineNumber":344,"author":{"gitId":"justinfidelis"},"content":"        try {","lastModifiedDate":"2021-10-22"},{"lineNumber":345,"author":{"gitId":"justinfidelis"},"content":"            return Integer.parseInt(matcher.group().stripTrailing());","lastModifiedDate":"2021-10-24"},{"lineNumber":346,"author":{"gitId":"justinfidelis"},"content":"        } catch (NumberFormatException ne) {","lastModifiedDate":"2021-10-22"},{"lineNumber":347,"author":{"gitId":"justinfidelis"},"content":"            //matched substring should only consist of [0-9], exception should not be thrown by parseInt method","lastModifiedDate":"2021-10-22"},{"lineNumber":348,"author":{"gitId":"justinfidelis"},"content":"            assert false;","lastModifiedDate":"2021-10-22"},{"lineNumber":349,"author":{"gitId":"justinfidelis"},"content":"            throw new MedBotParserException(ERROR_ID_NOT_SPECIFIED);","lastModifiedDate":"2021-10-22"},{"lineNumber":350,"author":{"gitId":"justinfidelis"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":351,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":352,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":353,"author":{"gitId":"jushg"},"content":"    /**","lastModifiedDate":"2021-10-27"},{"lineNumber":354,"author":{"gitId":"jushg"},"content":"     * Parses the person type from the input string.","lastModifiedDate":"2021-10-27"},{"lineNumber":355,"author":{"gitId":"jushg"},"content":"     *","lastModifiedDate":"2021-10-27"},{"lineNumber":356,"author":{"gitId":"jushg"},"content":"     * @param string the String to be parsed.","lastModifiedDate":"2021-10-27"},{"lineNumber":357,"author":{"gitId":"jushg"},"content":"     * @return the personType (Patient or Staff).","lastModifiedDate":"2021-10-27"},{"lineNumber":358,"author":{"gitId":"jushg"},"content":"     * @throws MedBotParserException when the person type cannot be parsed.","lastModifiedDate":"2021-10-27"},{"lineNumber":359,"author":{"gitId":"jushg"},"content":"     */","lastModifiedDate":"2021-10-27"},{"lineNumber":360,"author":{"gitId":"Kureans"},"content":"    public static PersonType parsePersonType(String string) throws MedBotParserException {","lastModifiedDate":"2021-10-25"},{"lineNumber":361,"author":{"gitId":"Kureans"},"content":"        String attributeSpecifier \u003d string.substring(0, PARAMETER_BUFFER);","lastModifiedDate":"2021-10-25"},{"lineNumber":362,"author":{"gitId":"Kureans"},"content":"        if (attributeSpecifier.equals(PARAMETER_PATIENT)) {","lastModifiedDate":"2021-10-25"},{"lineNumber":363,"author":{"gitId":"Kureans"},"content":"            return PersonType.PATIENT;","lastModifiedDate":"2021-10-25"},{"lineNumber":364,"author":{"gitId":"Kureans"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":365,"author":{"gitId":"Kureans"},"content":"        if (attributeSpecifier.equals(PARAMETER_STAFF)) {","lastModifiedDate":"2021-10-25"},{"lineNumber":366,"author":{"gitId":"Kureans"},"content":"            return PersonType.STAFF;","lastModifiedDate":"2021-10-25"},{"lineNumber":367,"author":{"gitId":"Kureans"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":368,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":369,"author":{"gitId":"Kureans"},"content":"        throw new MedBotParserException(ERROR_PERSON_TYPE_INVALID);","lastModifiedDate":"2021-10-25"},{"lineNumber":370,"author":{"gitId":"Kureans"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":371,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":372,"author":{"gitId":"jushg"},"content":"    /**","lastModifiedDate":"2021-10-27"},{"lineNumber":373,"author":{"gitId":"jushg"},"content":"     * Returns the filter type of the appointment class.","lastModifiedDate":"2021-10-27"},{"lineNumber":374,"author":{"gitId":"jushg"},"content":"     *","lastModifiedDate":"2021-10-27"},{"lineNumber":375,"author":{"gitId":"jushg"},"content":"     * @param attributeSpecifier the String to be parsed.","lastModifiedDate":"2021-10-27"},{"lineNumber":376,"author":{"gitId":"jushg"},"content":"     * @return the FilterType","lastModifiedDate":"2021-10-27"},{"lineNumber":377,"author":{"gitId":"jushg"},"content":"     * @throws MedBotParserException when the filter type cannot be","lastModifiedDate":"2021-10-27"},{"lineNumber":378,"author":{"gitId":"jushg"},"content":"     */","lastModifiedDate":"2021-10-27"},{"lineNumber":379,"author":{"gitId":"Kureans"},"content":"    public static FilterType parseFilterType(String attributeSpecifier) throws MedBotParserException {","lastModifiedDate":"2021-10-25"},{"lineNumber":380,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":381,"author":{"gitId":"Kureans"},"content":"        if (attributeSpecifier.equals(PARAMETER_BEFORE)) {","lastModifiedDate":"2021-10-25"},{"lineNumber":382,"author":{"gitId":"Kureans"},"content":"            return FilterType.BEFORE;","lastModifiedDate":"2021-10-25"},{"lineNumber":383,"author":{"gitId":"Kureans"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":384,"author":{"gitId":"Kureans"},"content":"        if (attributeSpecifier.equals(PARAMETER_AFTER)) {","lastModifiedDate":"2021-10-25"},{"lineNumber":385,"author":{"gitId":"Kureans"},"content":"            return FilterType.AFTER;","lastModifiedDate":"2021-10-25"},{"lineNumber":386,"author":{"gitId":"Kureans"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":387,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":388,"author":{"gitId":"Kureans"},"content":"        throw new MedBotParserException(ERROR_FILTER_TYPE_INVALID);","lastModifiedDate":"2021-10-25"},{"lineNumber":389,"author":{"gitId":"Kureans"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":390,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":391,"author":{"gitId":"jushg"},"content":"    /**","lastModifiedDate":"2021-10-27"},{"lineNumber":392,"author":{"gitId":"EricBryann"},"content":"     * Returns the flag in the list command (show hidden listItem or not).","lastModifiedDate":"2021-11-02"},{"lineNumber":393,"author":{"gitId":"jushg"},"content":"     *","lastModifiedDate":"2021-10-27"},{"lineNumber":394,"author":{"gitId":"jushg"},"content":"     * @param attributeString the String to be parsed.","lastModifiedDate":"2021-10-27"},{"lineNumber":395,"author":{"gitId":"EricBryann"},"content":"     * @return the boolean indicate whether we show hidden listItem or not.","lastModifiedDate":"2021-11-02"},{"lineNumber":396,"author":{"gitId":"jushg"},"content":"     * @throws MedBotParserException when the String is of wrong format.","lastModifiedDate":"2021-10-27"},{"lineNumber":397,"author":{"gitId":"jushg"},"content":"     */","lastModifiedDate":"2021-10-27"},{"lineNumber":398,"author":{"gitId":"EricBryann"},"content":"    public static boolean parseListParameter(String attributeString) throws MedBotParserException {","lastModifiedDate":"2021-10-25"},{"lineNumber":399,"author":{"gitId":"EricBryann"},"content":"        if (attributeString.trim().equals(PARAMETER_HIDE)) {","lastModifiedDate":"2021-11-02"},{"lineNumber":400,"author":{"gitId":"EricBryann"},"content":"            return true;","lastModifiedDate":"2021-10-25"},{"lineNumber":401,"author":{"gitId":"EricBryann"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":402,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":403,"author":{"gitId":"EricBryann"},"content":"        if (attributeString.trim().equals(EMPTY_STRING)) {","lastModifiedDate":"2021-10-25"},{"lineNumber":404,"author":{"gitId":"EricBryann"},"content":"            return false;","lastModifiedDate":"2021-10-25"},{"lineNumber":405,"author":{"gitId":"EricBryann"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":406,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":407,"author":{"gitId":"EricBryann"},"content":"        throw new MedBotParserException(ERROR_PARAMETER_TYPE_INVALID);","lastModifiedDate":"2021-10-25"},{"lineNumber":408,"author":{"gitId":"EricBryann"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":409,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":410,"author":{"gitId":"justinfidelis"},"content":"    /**","lastModifiedDate":"2021-10-22"},{"lineNumber":411,"author":{"gitId":"justinfidelis"},"content":"     * Sets the first letter of each word of each word to uppercase and sets all others to lowercase.","lastModifiedDate":"2021-10-22"},{"lineNumber":412,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-10-22"},{"lineNumber":413,"author":{"gitId":"justinfidelis"},"content":"     * \u003cp\u003eA letter is considered the first letter of a word if it is the first letter of the input String or","lastModifiedDate":"2021-10-22"},{"lineNumber":414,"author":{"gitId":"justinfidelis"},"content":"     * is immediately after any of the characters \" _-\".","lastModifiedDate":"2021-10-22"},{"lineNumber":415,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-10-22"},{"lineNumber":416,"author":{"gitId":"justinfidelis"},"content":"     * @param input String which will be capitalised","lastModifiedDate":"2021-10-22"},{"lineNumber":417,"author":{"gitId":"justinfidelis"},"content":"     * @return String with each word capitalised","lastModifiedDate":"2021-10-22"},{"lineNumber":418,"author":{"gitId":"justinfidelis"},"content":"     */","lastModifiedDate":"2021-10-22"},{"lineNumber":419,"author":{"gitId":"justinfidelis"},"content":"    private static String capitaliseEachWord(String input) {","lastModifiedDate":"2021-10-22"},{"lineNumber":420,"author":{"gitId":"justinfidelis"},"content":"        input \u003d input.toLowerCase();","lastModifiedDate":"2021-10-22"},{"lineNumber":421,"author":{"gitId":"justinfidelis"},"content":"        Function\u003cMatchResult, String\u003e multiAttributeReplacementFunction \u003d x -\u003e {","lastModifiedDate":"2021-10-22"},{"lineNumber":422,"author":{"gitId":"justinfidelis"},"content":"            String match \u003d x.group();","lastModifiedDate":"2021-10-22"},{"lineNumber":423,"author":{"gitId":"justinfidelis"},"content":"            if (match.length() \u003d\u003d 1) {","lastModifiedDate":"2021-10-22"},{"lineNumber":424,"author":{"gitId":"justinfidelis"},"content":"                //if substring is the first character of the string","lastModifiedDate":"2021-10-22"},{"lineNumber":425,"author":{"gitId":"justinfidelis"},"content":"                return match.toUpperCase();","lastModifiedDate":"2021-10-22"},{"lineNumber":426,"author":{"gitId":"justinfidelis"},"content":"            } else {","lastModifiedDate":"2021-10-22"},{"lineNumber":427,"author":{"gitId":"justinfidelis"},"content":"                //if substring consists of one of the characters \" _-\" followed by a letter","lastModifiedDate":"2021-10-22"},{"lineNumber":428,"author":{"gitId":"justinfidelis"},"content":"                return match.charAt(0) + match.substring(1).toUpperCase();","lastModifiedDate":"2021-10-22"},{"lineNumber":429,"author":{"gitId":"justinfidelis"},"content":"            }","lastModifiedDate":"2021-10-22"},{"lineNumber":430,"author":{"gitId":"justinfidelis"},"content":"        };","lastModifiedDate":"2021-10-22"},{"lineNumber":431,"author":{"gitId":"justinfidelis"},"content":"        Pattern pattern \u003d Pattern.compile(REGEX_CAPITALISE_POSITION);","lastModifiedDate":"2021-10-22"},{"lineNumber":432,"author":{"gitId":"justinfidelis"},"content":"        Matcher matcher \u003d pattern.matcher(input);","lastModifiedDate":"2021-10-22"},{"lineNumber":433,"author":{"gitId":"justinfidelis"},"content":"        return matcher.replaceAll(multiAttributeReplacementFunction);","lastModifiedDate":"2021-10-22"},{"lineNumber":434,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":435,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":436,"author":{"gitId":"justinfidelis"},"content":"    /**","lastModifiedDate":"2021-10-22"},{"lineNumber":437,"author":{"gitId":"justinfidelis"},"content":"     * Places a \"|\" separator before each attribute specifier in input and returns the resultant string.","lastModifiedDate":"2021-10-22"},{"lineNumber":438,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-10-22"},{"lineNumber":439,"author":{"gitId":"justinfidelis"},"content":"     * \u003cp\u003eAttribute specifiers are in the following formats \"a/\" or \"ab/\" where a and b can be any uppercase","lastModifiedDate":"2021-10-22"},{"lineNumber":440,"author":{"gitId":"justinfidelis"},"content":"     * or lowercase alphabet.","lastModifiedDate":"2021-10-22"},{"lineNumber":441,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-10-22"},{"lineNumber":442,"author":{"gitId":"justinfidelis"},"content":"     * @param input userInput String containing attribute specifiers","lastModifiedDate":"2021-10-22"},{"lineNumber":443,"author":{"gitId":"justinfidelis"},"content":"     * @return String containing added separator characters","lastModifiedDate":"2021-10-22"},{"lineNumber":444,"author":{"gitId":"justinfidelis"},"content":"     */","lastModifiedDate":"2021-10-22"},{"lineNumber":445,"author":{"gitId":"justinfidelis"},"content":"    private static String preprocessMultiAttributeInput(String input) {","lastModifiedDate":"2021-10-22"},{"lineNumber":446,"author":{"gitId":"justinfidelis"},"content":"        //replacement function to add a \"|\" character before an attribute specifier","lastModifiedDate":"2021-10-22"},{"lineNumber":447,"author":{"gitId":"justinfidelis"},"content":"        Function\u003cMatchResult, String\u003e replacementFunction \u003d x -\u003e VERTICAL_LINE + x.group();","lastModifiedDate":"2021-10-24"},{"lineNumber":448,"author":{"gitId":"justinfidelis"},"content":"        Pattern pattern \u003d Pattern.compile(REGEX_INPUT_PARAMETER);","lastModifiedDate":"2021-10-22"},{"lineNumber":449,"author":{"gitId":"justinfidelis"},"content":"        Matcher matcher \u003d pattern.matcher(input);","lastModifiedDate":"2021-10-22"},{"lineNumber":450,"author":{"gitId":"justinfidelis"},"content":"        return matcher.replaceAll(replacementFunction);","lastModifiedDate":"2021-10-22"},{"lineNumber":451,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":452,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":453,"author":{"gitId":"justinfidelis"},"content":"    /**","lastModifiedDate":"2021-10-22"},{"lineNumber":454,"author":{"gitId":"justinfidelis"},"content":"     * Parses a String that corresponds to a date and time and returns the number of hours since Unix epoch that","lastModifiedDate":"2021-10-22"},{"lineNumber":455,"author":{"gitId":"justinfidelis"},"content":"     * it corresponds to, rounded down.","lastModifiedDate":"2021-10-22"},{"lineNumber":456,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-10-22"},{"lineNumber":457,"author":{"gitId":"justinfidelis"},"content":"     * @param dateTimeString String corresponding to a date and time","lastModifiedDate":"2021-10-22"},{"lineNumber":458,"author":{"gitId":"justinfidelis"},"content":"     * @return the number of hours since Unix epoch, rounded down to the nearest hour","lastModifiedDate":"2021-10-22"},{"lineNumber":459,"author":{"gitId":"justinfidelis"},"content":"     */","lastModifiedDate":"2021-10-22"},{"lineNumber":460,"author":{"gitId":"Kureans"},"content":"    public static int parseDateTime(String dateTimeString) throws MedBotParserException {","lastModifiedDate":"2021-10-25"},{"lineNumber":461,"author":{"gitId":"justinfidelis"},"content":"        DateTimeFormatter dateTimeFormatter \u003d DateTimeFormatter.ofPattern(DATE_TIME_FORMATTER_PATTERN);","lastModifiedDate":"2021-10-22"},{"lineNumber":462,"author":{"gitId":"justinfidelis"},"content":"        LocalDateTime parsedDate;","lastModifiedDate":"2021-10-24"},{"lineNumber":463,"author":{"gitId":"justinfidelis"},"content":"        try {","lastModifiedDate":"2021-10-24"},{"lineNumber":464,"author":{"gitId":"justinfidelis"},"content":"            parsedDate \u003d LocalDateTime.parse(dateTimeString, dateTimeFormatter);","lastModifiedDate":"2021-10-24"},{"lineNumber":465,"author":{"gitId":"justinfidelis"},"content":"            parsedDate \u003d parsedDate.withMinute(0);","lastModifiedDate":"2021-10-24"},{"lineNumber":466,"author":{"gitId":"justinfidelis"},"content":"        } catch (DateTimeParseException dte) {","lastModifiedDate":"2021-10-24"},{"lineNumber":467,"author":{"gitId":"justinfidelis"},"content":"            throw new MedBotParserException(ERROR_DATE_TIME_WRONG_FORMAT);","lastModifiedDate":"2021-10-24"},{"lineNumber":468,"author":{"gitId":"justinfidelis"},"content":"        }","lastModifiedDate":"2021-10-24"},{"lineNumber":469,"author":{"gitId":"justinfidelis"},"content":"        return (int) (parsedDate.toEpochSecond(ZONE_OFFSET) / 60);","lastModifiedDate":"2021-10-25"},{"lineNumber":470,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":471,"author":{"gitId":"justinfidelis"},"content":"}","lastModifiedDate":"2021-10-22"}],"authorContributionMap":{"justinfidelis":360,"CrimsonTitan79":3,"jushg":19,"EricBryann":22,"Kureans":67}},{"path":"src/main/java/medbot/parser/PatientCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"justinfidelis"},"content":"package medbot.parser;","lastModifiedDate":"2021-10-22"},{"lineNumber":2,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":3,"author":{"gitId":"justinfidelis"},"content":"import medbot.command.Command;","lastModifiedDate":"2021-10-22"},{"lineNumber":4,"author":{"gitId":"justinfidelis"},"content":"import medbot.command.personcommand.patientcommand.AddPatientCommand;","lastModifiedDate":"2021-10-22"},{"lineNumber":5,"author":{"gitId":"EricBryann"},"content":"import medbot.command.personcommand.patientcommand.HidePatientCommand;","lastModifiedDate":"2021-11-02"},{"lineNumber":6,"author":{"gitId":"justinfidelis"},"content":"import medbot.command.personcommand.patientcommand.DeletePatientCommand;","lastModifiedDate":"2021-10-22"},{"lineNumber":7,"author":{"gitId":"justinfidelis"},"content":"import medbot.command.personcommand.patientcommand.EditPatientCommand;","lastModifiedDate":"2021-10-22"},{"lineNumber":8,"author":{"gitId":"justinfidelis"},"content":"import medbot.command.personcommand.patientcommand.FindPatientCommand;","lastModifiedDate":"2021-10-22"},{"lineNumber":9,"author":{"gitId":"justinfidelis"},"content":"import medbot.command.personcommand.patientcommand.ListPatientCommand;","lastModifiedDate":"2021-10-22"},{"lineNumber":10,"author":{"gitId":"EricBryann"},"content":"import medbot.command.personcommand.patientcommand.ShowPatientCommand;","lastModifiedDate":"2021-11-02"},{"lineNumber":11,"author":{"gitId":"justinfidelis"},"content":"import medbot.command.personcommand.patientcommand.ViewPatientCommand;","lastModifiedDate":"2021-10-22"},{"lineNumber":12,"author":{"gitId":"justinfidelis"},"content":"import medbot.exceptions.MedBotParserException;","lastModifiedDate":"2021-10-22"},{"lineNumber":13,"author":{"gitId":"justinfidelis"},"content":"import medbot.person.Patient;","lastModifiedDate":"2021-10-22"},{"lineNumber":14,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":15,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":16,"author":{"gitId":"justinfidelis"},"content":"public abstract class PatientCommandParser {","lastModifiedDate":"2021-10-22"},{"lineNumber":17,"author":{"gitId":"justinfidelis"},"content":"    private static final String END_LINE \u003d System.lineSeparator();","lastModifiedDate":"2021-10-22"},{"lineNumber":18,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":19,"author":{"gitId":"justinfidelis"},"content":"    private static final String COMMAND_ADD \u003d \"add\";","lastModifiedDate":"2021-10-22"},{"lineNumber":20,"author":{"gitId":"justinfidelis"},"content":"    private static final String COMMAND_DELETE \u003d \"delete\";","lastModifiedDate":"2021-10-22"},{"lineNumber":21,"author":{"gitId":"justinfidelis"},"content":"    private static final String COMMAND_EDIT \u003d \"edit\";","lastModifiedDate":"2021-10-22"},{"lineNumber":22,"author":{"gitId":"justinfidelis"},"content":"    private static final String COMMAND_VIEW \u003d \"view\";","lastModifiedDate":"2021-10-22"},{"lineNumber":23,"author":{"gitId":"justinfidelis"},"content":"    private static final String COMMAND_LIST \u003d \"list\";","lastModifiedDate":"2021-10-22"},{"lineNumber":24,"author":{"gitId":"justinfidelis"},"content":"    private static final String COMMAND_FIND \u003d \"find\";","lastModifiedDate":"2021-10-22"},{"lineNumber":25,"author":{"gitId":"EricBryann"},"content":"    private static final String COMMAND_HIDE \u003d \"hide\";","lastModifiedDate":"2021-11-02"},{"lineNumber":26,"author":{"gitId":"EricBryann"},"content":"    private static final String COMMAND_SHOW \u003d \"show\";","lastModifiedDate":"2021-11-02"},{"lineNumber":27,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":28,"author":{"gitId":"justinfidelis"},"content":"    private static final String ERROR_WRONG_COMMAND \u003d \"Unable to parse command.\" + END_LINE;","lastModifiedDate":"2021-10-22"},{"lineNumber":29,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":30,"author":{"gitId":"justinfidelis"},"content":"    /**","lastModifiedDate":"2021-10-22"},{"lineNumber":31,"author":{"gitId":"justinfidelis"},"content":"     * Parses the user input and returns the corresponding command when the view type is PATIENT_INFO.","lastModifiedDate":"2021-10-22"},{"lineNumber":32,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-10-22"},{"lineNumber":33,"author":{"gitId":"justinfidelis"},"content":"     * @param userInput String containing the full user input.","lastModifiedDate":"2021-10-22"},{"lineNumber":34,"author":{"gitId":"justinfidelis"},"content":"     * @return the corresponding Command object.","lastModifiedDate":"2021-10-22"},{"lineNumber":35,"author":{"gitId":"justinfidelis"},"content":"     * @throws MedBotParserException if user input is not a recognised command or contains invalid information.","lastModifiedDate":"2021-10-22"},{"lineNumber":36,"author":{"gitId":"justinfidelis"},"content":"     */","lastModifiedDate":"2021-10-22"},{"lineNumber":37,"author":{"gitId":"justinfidelis"},"content":"    public static Command parsePatientCommand(String userInput) throws MedBotParserException {","lastModifiedDate":"2021-10-22"},{"lineNumber":38,"author":{"gitId":"justinfidelis"},"content":"        if (userInput.startsWith(COMMAND_ADD)) {","lastModifiedDate":"2021-10-22"},{"lineNumber":39,"author":{"gitId":"justinfidelis"},"content":"            return parseAddPatientCommand(userInput);","lastModifiedDate":"2021-10-22"},{"lineNumber":40,"author":{"gitId":"justinfidelis"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":41,"author":{"gitId":"justinfidelis"},"content":"        if (userInput.startsWith(COMMAND_DELETE)) {","lastModifiedDate":"2021-10-22"},{"lineNumber":42,"author":{"gitId":"justinfidelis"},"content":"            return parseDeletePatientCommand(userInput);","lastModifiedDate":"2021-10-22"},{"lineNumber":43,"author":{"gitId":"justinfidelis"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":44,"author":{"gitId":"justinfidelis"},"content":"        if (userInput.startsWith(COMMAND_VIEW)) {","lastModifiedDate":"2021-10-22"},{"lineNumber":45,"author":{"gitId":"justinfidelis"},"content":"            return parseViewPatientCommand(userInput);","lastModifiedDate":"2021-10-22"},{"lineNumber":46,"author":{"gitId":"justinfidelis"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":47,"author":{"gitId":"EricBryann"},"content":"        if (userInput.startsWith(COMMAND_LIST)) {","lastModifiedDate":"2021-10-25"},{"lineNumber":48,"author":{"gitId":"EricBryann"},"content":"            return parseListPatientCommand(userInput);","lastModifiedDate":"2021-10-25"},{"lineNumber":49,"author":{"gitId":"justinfidelis"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":50,"author":{"gitId":"justinfidelis"},"content":"        if (userInput.startsWith(COMMAND_EDIT)) {","lastModifiedDate":"2021-10-22"},{"lineNumber":51,"author":{"gitId":"justinfidelis"},"content":"            return parseEditPatientCommand(userInput);","lastModifiedDate":"2021-10-22"},{"lineNumber":52,"author":{"gitId":"justinfidelis"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":53,"author":{"gitId":"justinfidelis"},"content":"        if (userInput.startsWith(COMMAND_FIND)) {","lastModifiedDate":"2021-10-22"},{"lineNumber":54,"author":{"gitId":"justinfidelis"},"content":"            return parseFindPatientCommand(userInput);","lastModifiedDate":"2021-10-22"},{"lineNumber":55,"author":{"gitId":"justinfidelis"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":56,"author":{"gitId":"EricBryann"},"content":"        if (userInput.startsWith(COMMAND_HIDE)) {","lastModifiedDate":"2021-11-02"},{"lineNumber":57,"author":{"gitId":"EricBryann"},"content":"            return parseHidePatientCommand(userInput);","lastModifiedDate":"2021-11-02"},{"lineNumber":58,"author":{"gitId":"EricBryann"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":59,"author":{"gitId":"EricBryann"},"content":"        if (userInput.startsWith(COMMAND_SHOW)) {","lastModifiedDate":"2021-11-02"},{"lineNumber":60,"author":{"gitId":"EricBryann"},"content":"            return parseShowPatientCommand(userInput);","lastModifiedDate":"2021-11-02"},{"lineNumber":61,"author":{"gitId":"EricBryann"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":62,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":63,"author":{"gitId":"justinfidelis"},"content":"        throw new MedBotParserException(ERROR_WRONG_COMMAND);","lastModifiedDate":"2021-10-22"},{"lineNumber":64,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":65,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":66,"author":{"gitId":"justinfidelis"},"content":"    /**","lastModifiedDate":"2021-10-22"},{"lineNumber":67,"author":{"gitId":"justinfidelis"},"content":"     * Parses user input and returns ViewPatientCommand with the specified patient ID.","lastModifiedDate":"2021-10-22"},{"lineNumber":68,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-10-22"},{"lineNumber":69,"author":{"gitId":"justinfidelis"},"content":"     * @param userInput String containing the full user input.","lastModifiedDate":"2021-10-22"},{"lineNumber":70,"author":{"gitId":"justinfidelis"},"content":"     * @return ViewPatientCommand object.","lastModifiedDate":"2021-10-22"},{"lineNumber":71,"author":{"gitId":"justinfidelis"},"content":"     * @throws MedBotParserException when patient id is not specified or not a number.","lastModifiedDate":"2021-10-22"},{"lineNumber":72,"author":{"gitId":"justinfidelis"},"content":"     */","lastModifiedDate":"2021-10-22"},{"lineNumber":73,"author":{"gitId":"justinfidelis"},"content":"    private static ViewPatientCommand parseViewPatientCommand(String userInput) throws MedBotParserException {","lastModifiedDate":"2021-10-22"},{"lineNumber":74,"author":{"gitId":"justinfidelis"},"content":"        int personId \u003d ParserUtils.parseId(userInput.substring(4));","lastModifiedDate":"2021-10-22"},{"lineNumber":75,"author":{"gitId":"justinfidelis"},"content":"        return new ViewPatientCommand(personId);","lastModifiedDate":"2021-10-22"},{"lineNumber":76,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":77,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":78,"author":{"gitId":"justinfidelis"},"content":"    /**","lastModifiedDate":"2021-10-22"},{"lineNumber":79,"author":{"gitId":"justinfidelis"},"content":"     * Parses user input and returns DeletePatientCommand with the specified patient ID.","lastModifiedDate":"2021-10-22"},{"lineNumber":80,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-10-22"},{"lineNumber":81,"author":{"gitId":"justinfidelis"},"content":"     * @param userInput String containing the full user input.","lastModifiedDate":"2021-10-22"},{"lineNumber":82,"author":{"gitId":"justinfidelis"},"content":"     * @return DeletePatientCommand object.","lastModifiedDate":"2021-10-22"},{"lineNumber":83,"author":{"gitId":"justinfidelis"},"content":"     * @throws MedBotParserException when patient id given is not specified or not a number.","lastModifiedDate":"2021-10-22"},{"lineNumber":84,"author":{"gitId":"justinfidelis"},"content":"     */","lastModifiedDate":"2021-10-22"},{"lineNumber":85,"author":{"gitId":"justinfidelis"},"content":"    private static DeletePatientCommand parseDeletePatientCommand(String userInput) throws MedBotParserException {","lastModifiedDate":"2021-10-22"},{"lineNumber":86,"author":{"gitId":"justinfidelis"},"content":"        int personId \u003d ParserUtils.parseId(userInput.substring(6));","lastModifiedDate":"2021-10-22"},{"lineNumber":87,"author":{"gitId":"justinfidelis"},"content":"        return new DeletePatientCommand(personId);","lastModifiedDate":"2021-10-22"},{"lineNumber":88,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":89,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":90,"author":{"gitId":"justinfidelis"},"content":"    /**","lastModifiedDate":"2021-10-22"},{"lineNumber":91,"author":{"gitId":"justinfidelis"},"content":"     * Parses user input and returns EditPatientCommand with the specified patient ID and parameters.","lastModifiedDate":"2021-10-22"},{"lineNumber":92,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-10-22"},{"lineNumber":93,"author":{"gitId":"justinfidelis"},"content":"     * @param userInput String containing the full user input.","lastModifiedDate":"2021-10-22"},{"lineNumber":94,"author":{"gitId":"justinfidelis"},"content":"     * @return EditPatientCommand object.","lastModifiedDate":"2021-10-22"},{"lineNumber":95,"author":{"gitId":"justinfidelis"},"content":"     * @throws MedBotParserException when patient id given is not specified or not a number, or when","lastModifiedDate":"2021-10-22"},{"lineNumber":96,"author":{"gitId":"justinfidelis"},"content":"     *                               the parameters given cannot be parsed.","lastModifiedDate":"2021-10-22"},{"lineNumber":97,"author":{"gitId":"justinfidelis"},"content":"     */","lastModifiedDate":"2021-10-22"},{"lineNumber":98,"author":{"gitId":"justinfidelis"},"content":"    private static EditPatientCommand parseEditPatientCommand(String userInput) throws MedBotParserException {","lastModifiedDate":"2021-10-22"},{"lineNumber":99,"author":{"gitId":"justinfidelis"},"content":"        int patientId \u003d ParserUtils.parseId(userInput.substring(4));","lastModifiedDate":"2021-10-22"},{"lineNumber":100,"author":{"gitId":"justinfidelis"},"content":"        String[] parameters \u003d ParserUtils.getParameters(userInput);","lastModifiedDate":"2021-10-22"},{"lineNumber":101,"author":{"gitId":"justinfidelis"},"content":"        Patient patient \u003d new Patient();","lastModifiedDate":"2021-10-22"},{"lineNumber":102,"author":{"gitId":"justinfidelis"},"content":"        patient.setNull();","lastModifiedDate":"2021-10-22"},{"lineNumber":103,"author":{"gitId":"justinfidelis"},"content":"        ParserUtils.updateMultiplePersonalInformation(patient, parameters);","lastModifiedDate":"2021-10-22"},{"lineNumber":104,"author":{"gitId":"justinfidelis"},"content":"        return new EditPatientCommand(patientId, patient);","lastModifiedDate":"2021-10-22"},{"lineNumber":105,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":106,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":107,"author":{"gitId":"EricBryann"},"content":"    /**","lastModifiedDate":"2021-10-25"},{"lineNumber":108,"author":{"gitId":"EricBryann"},"content":"     * Parses user input and returns ListPatientCommand with the parameter to retrieve hidden or not-hidden patients.","lastModifiedDate":"2021-11-02"},{"lineNumber":109,"author":{"gitId":"EricBryann"},"content":"     *","lastModifiedDate":"2021-10-25"},{"lineNumber":110,"author":{"gitId":"EricBryann"},"content":"     * @param userInput String containing the full user input.","lastModifiedDate":"2021-10-25"},{"lineNumber":111,"author":{"gitId":"EricBryann"},"content":"     * @return ListPatientCommand object.","lastModifiedDate":"2021-10-25"},{"lineNumber":112,"author":{"gitId":"EricBryann"},"content":"     */","lastModifiedDate":"2021-10-25"},{"lineNumber":113,"author":{"gitId":"EricBryann"},"content":"    private static ListPatientCommand parseListPatientCommand(String userInput) throws MedBotParserException {","lastModifiedDate":"2021-10-25"},{"lineNumber":114,"author":{"gitId":"EricBryann"},"content":"        boolean getHiddenPersons \u003d ParserUtils.parseListParameter(userInput.substring(4));","lastModifiedDate":"2021-11-02"},{"lineNumber":115,"author":{"gitId":"EricBryann"},"content":"        return new ListPatientCommand(getHiddenPersons);","lastModifiedDate":"2021-11-02"},{"lineNumber":116,"author":{"gitId":"EricBryann"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":117,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":118,"author":{"gitId":"justinfidelis"},"content":"    /**","lastModifiedDate":"2021-10-22"},{"lineNumber":119,"author":{"gitId":"justinfidelis"},"content":"     * Parses user input and returns AddPatientCommand with the specified parameters.","lastModifiedDate":"2021-10-22"},{"lineNumber":120,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-10-22"},{"lineNumber":121,"author":{"gitId":"justinfidelis"},"content":"     * @param userInput String containing the full user input.","lastModifiedDate":"2021-10-22"},{"lineNumber":122,"author":{"gitId":"justinfidelis"},"content":"     * @return AddPatientCommand object.","lastModifiedDate":"2021-10-22"},{"lineNumber":123,"author":{"gitId":"justinfidelis"},"content":"     * @throws MedBotParserException when no parameters are specified, or when the parameters given cannot be parsed.","lastModifiedDate":"2021-10-22"},{"lineNumber":124,"author":{"gitId":"justinfidelis"},"content":"     */","lastModifiedDate":"2021-10-22"},{"lineNumber":125,"author":{"gitId":"justinfidelis"},"content":"    private static AddPatientCommand parseAddPatientCommand(String userInput) throws MedBotParserException {","lastModifiedDate":"2021-10-22"},{"lineNumber":126,"author":{"gitId":"justinfidelis"},"content":"        String[] parameters \u003d ParserUtils.getParameters(userInput);","lastModifiedDate":"2021-10-22"},{"lineNumber":127,"author":{"gitId":"justinfidelis"},"content":"        Patient patient \u003d new Patient();","lastModifiedDate":"2021-10-22"},{"lineNumber":128,"author":{"gitId":"justinfidelis"},"content":"        ParserUtils.updateMultiplePersonalInformation(patient, parameters);","lastModifiedDate":"2021-10-22"},{"lineNumber":129,"author":{"gitId":"justinfidelis"},"content":"        return new AddPatientCommand(patient);","lastModifiedDate":"2021-10-22"},{"lineNumber":130,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":131,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":132,"author":{"gitId":"justinfidelis"},"content":"    /**","lastModifiedDate":"2021-10-24"},{"lineNumber":133,"author":{"gitId":"justinfidelis"},"content":"     * Parses user input and returns FindUserCommand with the specified parameters.","lastModifiedDate":"2021-10-24"},{"lineNumber":134,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-10-24"},{"lineNumber":135,"author":{"gitId":"justinfidelis"},"content":"     * @param userInput String containing the full user input.","lastModifiedDate":"2021-10-24"},{"lineNumber":136,"author":{"gitId":"justinfidelis"},"content":"     * @return FindUserCommand object with the specified parameters","lastModifiedDate":"2021-10-24"},{"lineNumber":137,"author":{"gitId":"justinfidelis"},"content":"     * @throws MedBotParserException when no parameters are specified","lastModifiedDate":"2021-10-24"},{"lineNumber":138,"author":{"gitId":"justinfidelis"},"content":"     */","lastModifiedDate":"2021-10-24"},{"lineNumber":139,"author":{"gitId":"justinfidelis"},"content":"    private static FindPatientCommand parseFindPatientCommand(String userInput) throws MedBotParserException {","lastModifiedDate":"2021-10-22"},{"lineNumber":140,"author":{"gitId":"justinfidelis"},"content":"        String[] parameters \u003d ParserUtils.getParameters(userInput);","lastModifiedDate":"2021-10-22"},{"lineNumber":141,"author":{"gitId":"justinfidelis"},"content":"        return new FindPatientCommand(parameters);","lastModifiedDate":"2021-10-22"},{"lineNumber":142,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":143,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":144,"author":{"gitId":"EricBryann"},"content":"    /**","lastModifiedDate":"2021-10-25"},{"lineNumber":145,"author":{"gitId":"EricBryann"},"content":"     * Parses user input and returns HideUserCommand with the specified patient ID.","lastModifiedDate":"2021-11-02"},{"lineNumber":146,"author":{"gitId":"EricBryann"},"content":"     *","lastModifiedDate":"2021-10-25"},{"lineNumber":147,"author":{"gitId":"EricBryann"},"content":"     * @param userInput String containing the full user input.","lastModifiedDate":"2021-10-25"},{"lineNumber":148,"author":{"gitId":"EricBryann"},"content":"     * @return HideUserCommand object with the specified parameters","lastModifiedDate":"2021-11-02"},{"lineNumber":149,"author":{"gitId":"EricBryann"},"content":"     * @throws MedBotParserException when patient id given is not specified or not a number.","lastModifiedDate":"2021-10-25"},{"lineNumber":150,"author":{"gitId":"EricBryann"},"content":"     */","lastModifiedDate":"2021-10-25"},{"lineNumber":151,"author":{"gitId":"EricBryann"},"content":"    private static HidePatientCommand parseHidePatientCommand(String userInput) throws MedBotParserException {","lastModifiedDate":"2021-11-02"},{"lineNumber":152,"author":{"gitId":"EricBryann"},"content":"        int personId \u003d ParserUtils.parseId(userInput.substring(4));","lastModifiedDate":"2021-11-02"},{"lineNumber":153,"author":{"gitId":"EricBryann"},"content":"        return new HidePatientCommand(personId);","lastModifiedDate":"2021-11-02"},{"lineNumber":154,"author":{"gitId":"EricBryann"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":155,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":156,"author":{"gitId":"EricBryann"},"content":"    /**","lastModifiedDate":"2021-10-25"},{"lineNumber":157,"author":{"gitId":"EricBryann"},"content":"     * Parses user input and returns ShowPatientCommand with the specified patient ID.","lastModifiedDate":"2021-11-02"},{"lineNumber":158,"author":{"gitId":"EricBryann"},"content":"     *","lastModifiedDate":"2021-10-25"},{"lineNumber":159,"author":{"gitId":"EricBryann"},"content":"     * @param userInput String containing the full user input.","lastModifiedDate":"2021-10-25"},{"lineNumber":160,"author":{"gitId":"EricBryann"},"content":"     * @return ShowPatientCommand object.","lastModifiedDate":"2021-11-02"},{"lineNumber":161,"author":{"gitId":"EricBryann"},"content":"     * @throws MedBotParserException when patient id given is not specified or not a number.","lastModifiedDate":"2021-10-25"},{"lineNumber":162,"author":{"gitId":"EricBryann"},"content":"     */","lastModifiedDate":"2021-10-25"},{"lineNumber":163,"author":{"gitId":"EricBryann"},"content":"    private static ShowPatientCommand parseShowPatientCommand(String userInput) throws MedBotParserException {","lastModifiedDate":"2021-11-02"},{"lineNumber":164,"author":{"gitId":"EricBryann"},"content":"        int personId \u003d ParserUtils.parseId(userInput.substring(4));","lastModifiedDate":"2021-11-02"},{"lineNumber":165,"author":{"gitId":"EricBryann"},"content":"        return new ShowPatientCommand(personId);","lastModifiedDate":"2021-11-02"},{"lineNumber":166,"author":{"gitId":"EricBryann"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":167,"author":{"gitId":"justinfidelis"},"content":"}","lastModifiedDate":"2021-10-22"}],"authorContributionMap":{"justinfidelis":119,"EricBryann":46,"Kureans":2}},{"path":"src/main/java/medbot/parser/SchedulerCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"justinfidelis"},"content":"package medbot.parser;","lastModifiedDate":"2021-10-22"},{"lineNumber":2,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":3,"author":{"gitId":"justinfidelis"},"content":"import medbot.Appointment;","lastModifiedDate":"2021-10-22"},{"lineNumber":4,"author":{"gitId":"justinfidelis"},"content":"import medbot.command.Command;","lastModifiedDate":"2021-10-22"},{"lineNumber":5,"author":{"gitId":"justinfidelis"},"content":"import medbot.command.appointmentcommand.AddAppointmentCommand;","lastModifiedDate":"2021-10-22"},{"lineNumber":6,"author":{"gitId":"justinfidelis"},"content":"import medbot.command.appointmentcommand.DeleteAppointmentCommand;","lastModifiedDate":"2021-10-22"},{"lineNumber":7,"author":{"gitId":"justinfidelis"},"content":"import medbot.command.appointmentcommand.EditAppointmentCommand;","lastModifiedDate":"2021-10-22"},{"lineNumber":8,"author":{"gitId":"Kureans"},"content":"import medbot.command.appointmentcommand.FindAppointmentCommand;","lastModifiedDate":"2021-10-25"},{"lineNumber":9,"author":{"gitId":"justinfidelis"},"content":"import medbot.command.appointmentcommand.ListAppointmentCommand;","lastModifiedDate":"2021-10-22"},{"lineNumber":10,"author":{"gitId":"justinfidelis"},"content":"import medbot.command.appointmentcommand.ViewAppointmentCommand;","lastModifiedDate":"2021-10-24"},{"lineNumber":11,"author":{"gitId":"justinfidelis"},"content":"import medbot.exceptions.MedBotParserException;","lastModifiedDate":"2021-10-22"},{"lineNumber":12,"author":{"gitId":"Kureans"},"content":"import medbot.person.PersonType;","lastModifiedDate":"2021-10-25"},{"lineNumber":13,"author":{"gitId":"Kureans"},"content":"import medbot.utilities.FilterType;","lastModifiedDate":"2021-10-25"},{"lineNumber":14,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":15,"author":{"gitId":"Kureans"},"content":"import java.util.List;","lastModifiedDate":"2021-11-04"},{"lineNumber":16,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":17,"author":{"gitId":"justinfidelis"},"content":"public abstract class SchedulerCommandParser {","lastModifiedDate":"2021-10-22"},{"lineNumber":18,"author":{"gitId":"justinfidelis"},"content":"    private static final String END_LINE \u003d System.lineSeparator();","lastModifiedDate":"2021-10-22"},{"lineNumber":19,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":20,"author":{"gitId":"justinfidelis"},"content":"    private static final String COMMAND_ADD \u003d \"add\";","lastModifiedDate":"2021-10-22"},{"lineNumber":21,"author":{"gitId":"justinfidelis"},"content":"    private static final String COMMAND_DELETE \u003d \"delete\";","lastModifiedDate":"2021-10-22"},{"lineNumber":22,"author":{"gitId":"justinfidelis"},"content":"    private static final String COMMAND_EDIT \u003d \"edit\";","lastModifiedDate":"2021-10-22"},{"lineNumber":23,"author":{"gitId":"justinfidelis"},"content":"    private static final String COMMAND_VIEW \u003d \"view\";","lastModifiedDate":"2021-10-22"},{"lineNumber":24,"author":{"gitId":"justinfidelis"},"content":"    private static final String COMMAND_LIST \u003d \"list\";","lastModifiedDate":"2021-10-22"},{"lineNumber":25,"author":{"gitId":"Kureans"},"content":"    private static final String COMMAND_FIND \u003d \"find\";","lastModifiedDate":"2021-10-25"},{"lineNumber":26,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":27,"author":{"gitId":"justinfidelis"},"content":"    private static final String ERROR_WRONG_COMMAND \u003d \"Unable to parse command.\" + END_LINE;","lastModifiedDate":"2021-10-22"},{"lineNumber":28,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":29,"author":{"gitId":"justinfidelis"},"content":"    /**","lastModifiedDate":"2021-10-22"},{"lineNumber":30,"author":{"gitId":"justinfidelis"},"content":"     * Parses the user input and returns the corresponding command when the view type is SCHEDULER.","lastModifiedDate":"2021-10-22"},{"lineNumber":31,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-10-22"},{"lineNumber":32,"author":{"gitId":"justinfidelis"},"content":"     * @param userInput String containing the full user input.","lastModifiedDate":"2021-10-22"},{"lineNumber":33,"author":{"gitId":"justinfidelis"},"content":"     * @return the corresponding Command object.","lastModifiedDate":"2021-10-22"},{"lineNumber":34,"author":{"gitId":"justinfidelis"},"content":"     * @throws MedBotParserException if user input is not a recognised command or contains invalid information.","lastModifiedDate":"2021-10-22"},{"lineNumber":35,"author":{"gitId":"justinfidelis"},"content":"     */","lastModifiedDate":"2021-10-22"},{"lineNumber":36,"author":{"gitId":"justinfidelis"},"content":"    public static Command parseSchedulingCommand(String userInput) throws MedBotParserException {","lastModifiedDate":"2021-10-22"},{"lineNumber":37,"author":{"gitId":"justinfidelis"},"content":"        if (userInput.startsWith(COMMAND_ADD)) {","lastModifiedDate":"2021-10-22"},{"lineNumber":38,"author":{"gitId":"justinfidelis"},"content":"            return parseAddAppointmentCommand(userInput);","lastModifiedDate":"2021-10-22"},{"lineNumber":39,"author":{"gitId":"justinfidelis"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":40,"author":{"gitId":"justinfidelis"},"content":"        if (userInput.startsWith(COMMAND_DELETE)) {","lastModifiedDate":"2021-10-22"},{"lineNumber":41,"author":{"gitId":"justinfidelis"},"content":"            return parseDeleteAppointmentCommand(userInput);","lastModifiedDate":"2021-10-22"},{"lineNumber":42,"author":{"gitId":"justinfidelis"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":43,"author":{"gitId":"justinfidelis"},"content":"        if (userInput.startsWith(COMMAND_EDIT)) {","lastModifiedDate":"2021-10-22"},{"lineNumber":44,"author":{"gitId":"justinfidelis"},"content":"            return parseEditAppointmentCommand(userInput);","lastModifiedDate":"2021-10-22"},{"lineNumber":45,"author":{"gitId":"justinfidelis"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":46,"author":{"gitId":"justinfidelis"},"content":"        if (userInput.equals(COMMAND_LIST)) {","lastModifiedDate":"2021-10-22"},{"lineNumber":47,"author":{"gitId":"justinfidelis"},"content":"            return new ListAppointmentCommand();","lastModifiedDate":"2021-10-22"},{"lineNumber":48,"author":{"gitId":"justinfidelis"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":49,"author":{"gitId":"Kureans"},"content":"        if (userInput.startsWith(COMMAND_VIEW)) {","lastModifiedDate":"2021-10-25"},{"lineNumber":50,"author":{"gitId":"Kureans"},"content":"            return parseViewAppointmentCommand(userInput);","lastModifiedDate":"2021-10-25"},{"lineNumber":51,"author":{"gitId":"Kureans"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":52,"author":{"gitId":"Kureans"},"content":"        if (userInput.startsWith(COMMAND_FIND)) {","lastModifiedDate":"2021-10-25"},{"lineNumber":53,"author":{"gitId":"Kureans"},"content":"            return parseFindAppointmentCommand(userInput);","lastModifiedDate":"2021-10-25"},{"lineNumber":54,"author":{"gitId":"Kureans"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":55,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":56,"author":{"gitId":"justinfidelis"},"content":"        throw new MedBotParserException(ERROR_WRONG_COMMAND);","lastModifiedDate":"2021-10-22"},{"lineNumber":57,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":58,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":59,"author":{"gitId":"justinfidelis"},"content":"    /**","lastModifiedDate":"2021-10-22"},{"lineNumber":60,"author":{"gitId":"justinfidelis"},"content":"     * Parses user input and returns an AddAppointmentCommand with the specified appointment information.","lastModifiedDate":"2021-10-22"},{"lineNumber":61,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-10-22"},{"lineNumber":62,"author":{"gitId":"justinfidelis"},"content":"     * @param userInput String containing the full user input.","lastModifiedDate":"2021-10-22"},{"lineNumber":63,"author":{"gitId":"justinfidelis"},"content":"     * @return AddAppointmentCommand with the specified appointment information.","lastModifiedDate":"2021-10-22"},{"lineNumber":64,"author":{"gitId":"justinfidelis"},"content":"     * @throws MedBotParserException when there is missing appointment information given or when the information is","lastModifiedDate":"2021-10-22"},{"lineNumber":65,"author":{"gitId":"justinfidelis"},"content":"     *                               invalid","lastModifiedDate":"2021-10-22"},{"lineNumber":66,"author":{"gitId":"justinfidelis"},"content":"     */","lastModifiedDate":"2021-10-22"},{"lineNumber":67,"author":{"gitId":"justinfidelis"},"content":"    private static AddAppointmentCommand parseAddAppointmentCommand(String userInput) throws MedBotParserException {","lastModifiedDate":"2021-10-22"},{"lineNumber":68,"author":{"gitId":"justinfidelis"},"content":"        String[] attributeStrings \u003d ParserUtils.getParameters(userInput);","lastModifiedDate":"2021-10-22"},{"lineNumber":69,"author":{"gitId":"justinfidelis"},"content":"        Appointment appointment \u003d new Appointment();","lastModifiedDate":"2021-10-22"},{"lineNumber":70,"author":{"gitId":"justinfidelis"},"content":"        ParserUtils.updateMultipleAppointmentInformation(appointment, attributeStrings);","lastModifiedDate":"2021-10-22"},{"lineNumber":71,"author":{"gitId":"justinfidelis"},"content":"        return new AddAppointmentCommand(appointment);","lastModifiedDate":"2021-10-22"},{"lineNumber":72,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":73,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":74,"author":{"gitId":"justinfidelis"},"content":"    /**","lastModifiedDate":"2021-10-22"},{"lineNumber":75,"author":{"gitId":"justinfidelis"},"content":"     * Parses user input and returns a DeleteAppointmentCommand with the specified appointment ID.","lastModifiedDate":"2021-10-22"},{"lineNumber":76,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-10-22"},{"lineNumber":77,"author":{"gitId":"justinfidelis"},"content":"     * @param userInput String containing the full user input.","lastModifiedDate":"2021-10-22"},{"lineNumber":78,"author":{"gitId":"justinfidelis"},"content":"     * @return DeleteAppointmentCommand with the specified appointment ID.","lastModifiedDate":"2021-10-22"},{"lineNumber":79,"author":{"gitId":"justinfidelis"},"content":"     * @throws MedBotParserException if the appointment ID is not specified or not a number","lastModifiedDate":"2021-10-22"},{"lineNumber":80,"author":{"gitId":"justinfidelis"},"content":"     */","lastModifiedDate":"2021-10-22"},{"lineNumber":81,"author":{"gitId":"justinfidelis"},"content":"    private static DeleteAppointmentCommand parseDeleteAppointmentCommand(String userInput)","lastModifiedDate":"2021-10-22"},{"lineNumber":82,"author":{"gitId":"justinfidelis"},"content":"            throws MedBotParserException {","lastModifiedDate":"2021-10-22"},{"lineNumber":83,"author":{"gitId":"justinfidelis"},"content":"        int appointmentId \u003d ParserUtils.parseId(userInput.substring(6));","lastModifiedDate":"2021-10-22"},{"lineNumber":84,"author":{"gitId":"justinfidelis"},"content":"        return new DeleteAppointmentCommand(appointmentId);","lastModifiedDate":"2021-10-22"},{"lineNumber":85,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":86,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":87,"author":{"gitId":"justinfidelis"},"content":"    /**","lastModifiedDate":"2021-10-22"},{"lineNumber":88,"author":{"gitId":"justinfidelis"},"content":"     * Parses user input and returns a EditAppointmentCommand with the specified appointment ID and appointment","lastModifiedDate":"2021-10-22"},{"lineNumber":89,"author":{"gitId":"justinfidelis"},"content":"     * information to be updated.","lastModifiedDate":"2021-10-22"},{"lineNumber":90,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-10-22"},{"lineNumber":91,"author":{"gitId":"justinfidelis"},"content":"     * @param userInput String containing the full user input.","lastModifiedDate":"2021-10-22"},{"lineNumber":92,"author":{"gitId":"justinfidelis"},"content":"     * @return EditAppointmentCommand with the specified appointment ID and appointment information.","lastModifiedDate":"2021-10-22"},{"lineNumber":93,"author":{"gitId":"justinfidelis"},"content":"     * @throws MedBotParserException if the appointment ID is not specified or not a number, or when the appointment","lastModifiedDate":"2021-10-22"},{"lineNumber":94,"author":{"gitId":"justinfidelis"},"content":"     *                               information given is invalid","lastModifiedDate":"2021-10-22"},{"lineNumber":95,"author":{"gitId":"justinfidelis"},"content":"     */","lastModifiedDate":"2021-10-22"},{"lineNumber":96,"author":{"gitId":"justinfidelis"},"content":"    private static EditAppointmentCommand parseEditAppointmentCommand(String userInput) throws MedBotParserException {","lastModifiedDate":"2021-10-22"},{"lineNumber":97,"author":{"gitId":"justinfidelis"},"content":"        int appointmentId \u003d ParserUtils.parseId(userInput.substring(4));","lastModifiedDate":"2021-10-22"},{"lineNumber":98,"author":{"gitId":"justinfidelis"},"content":"        String[] attributeStrings \u003d ParserUtils.getParameters(userInput);","lastModifiedDate":"2021-10-22"},{"lineNumber":99,"author":{"gitId":"justinfidelis"},"content":"        Appointment appointment \u003d new Appointment();","lastModifiedDate":"2021-10-22"},{"lineNumber":100,"author":{"gitId":"justinfidelis"},"content":"        ParserUtils.updateMultipleAppointmentInformation(appointment, attributeStrings);","lastModifiedDate":"2021-10-22"},{"lineNumber":101,"author":{"gitId":"justinfidelis"},"content":"        return new EditAppointmentCommand(appointmentId, appointment);","lastModifiedDate":"2021-10-22"},{"lineNumber":102,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":103,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":104,"author":{"gitId":"jushg"},"content":"    /**","lastModifiedDate":"2021-10-27"},{"lineNumber":105,"author":{"gitId":"jushg"},"content":"     * Parses user input and returns a ViewAppointmentCommand with the specified appointment ID.","lastModifiedDate":"2021-10-27"},{"lineNumber":106,"author":{"gitId":"jushg"},"content":"     *","lastModifiedDate":"2021-10-27"},{"lineNumber":107,"author":{"gitId":"jushg"},"content":"     * @param userInput String containing the full user input.","lastModifiedDate":"2021-10-27"},{"lineNumber":108,"author":{"gitId":"jushg"},"content":"     * @return ViewAppointmentCommand with the specified appointment ID.","lastModifiedDate":"2021-10-27"},{"lineNumber":109,"author":{"gitId":"jushg"},"content":"     * @throws MedBotParserException if the appointment ID is not specified or not a number.","lastModifiedDate":"2021-10-27"},{"lineNumber":110,"author":{"gitId":"jushg"},"content":"     */","lastModifiedDate":"2021-10-27"},{"lineNumber":111,"author":{"gitId":"Kureans"},"content":"    private static Command parseViewAppointmentCommand(String userInput) throws MedBotParserException {","lastModifiedDate":"2021-10-25"},{"lineNumber":112,"author":{"gitId":"Kureans"},"content":"        int appointmentId \u003d ParserUtils.parseId(userInput.substring(4));","lastModifiedDate":"2021-10-25"},{"lineNumber":113,"author":{"gitId":"Kureans"},"content":"        return new ViewAppointmentCommand(appointmentId);","lastModifiedDate":"2021-10-25"},{"lineNumber":114,"author":{"gitId":"Kureans"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":115,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":116,"author":{"gitId":"jushg"},"content":"    /**","lastModifiedDate":"2021-10-27"},{"lineNumber":117,"author":{"gitId":"jushg"},"content":"     * Parses user input and returns a FindAppointmentCommand with the specified information to find.","lastModifiedDate":"2021-10-27"},{"lineNumber":118,"author":{"gitId":"jushg"},"content":"     *","lastModifiedDate":"2021-10-27"},{"lineNumber":119,"author":{"gitId":"jushg"},"content":"     * @param userInput String containing the full user input.","lastModifiedDate":"2021-10-27"},{"lineNumber":120,"author":{"gitId":"jushg"},"content":"     * @return FindAppointmentCommand with the specified person ID, person type, the filter type and the dateTime code.","lastModifiedDate":"2021-10-27"},{"lineNumber":121,"author":{"gitId":"jushg"},"content":"     * @throws MedBotParserException if the input cannot be parsed.","lastModifiedDate":"2021-10-27"},{"lineNumber":122,"author":{"gitId":"jushg"},"content":"     */","lastModifiedDate":"2021-10-27"},{"lineNumber":123,"author":{"gitId":"Kureans"},"content":"    private static Command parseFindAppointmentCommand(String userInput) throws MedBotParserException {","lastModifiedDate":"2021-10-25"},{"lineNumber":124,"author":{"gitId":"Kureans"},"content":"        String[] attributeStrings \u003d ParserUtils.getParametersWithoutSpecifiers(userInput).toArray(new String[0]);","lastModifiedDate":"2021-10-25"},{"lineNumber":125,"author":{"gitId":"Kureans"},"content":"        List\u003cString\u003e attributeSpecifiers \u003d ParserUtils.getSpecifiers(userInput);","lastModifiedDate":"2021-11-04"},{"lineNumber":126,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":127,"author":{"gitId":"Kureans"},"content":"        assert (attributeSpecifiers.size() \u003d\u003d 1 || attributeSpecifiers.size() \u003d\u003d 2);","lastModifiedDate":"2021-11-04"},{"lineNumber":128,"author":{"gitId":"Kureans"},"content":"        assert (attributeStrings.length \u003d\u003d 1 || attributeStrings.length \u003d\u003d 2);","lastModifiedDate":"2021-10-25"},{"lineNumber":129,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":130,"author":{"gitId":"Kureans"},"content":"        PersonType personType \u003d ParserUtils.parsePersonType(attributeSpecifiers.get(0));","lastModifiedDate":"2021-11-04"},{"lineNumber":131,"author":{"gitId":"Kureans"},"content":"        int personId \u003d ParserUtils.parseId(attributeStrings[0]);","lastModifiedDate":"2021-10-25"},{"lineNumber":132,"author":{"gitId":"Kureans"},"content":"        FilterType filterType \u003d FilterType.NONE;","lastModifiedDate":"2021-10-25"},{"lineNumber":133,"author":{"gitId":"Kureans"},"content":"        int dateTimeCode \u003d -1;","lastModifiedDate":"2021-10-25"},{"lineNumber":134,"author":{"gitId":"Kureans"},"content":"        if (attributeSpecifiers.size() \u003d\u003d 2) {","lastModifiedDate":"2021-11-04"},{"lineNumber":135,"author":{"gitId":"Kureans"},"content":"            filterType \u003d ParserUtils.parseFilterType(attributeSpecifiers.get(1));","lastModifiedDate":"2021-11-04"},{"lineNumber":136,"author":{"gitId":"Kureans"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":137,"author":{"gitId":"Kureans"},"content":"        if (attributeStrings.length \u003d\u003d 2) {","lastModifiedDate":"2021-10-25"},{"lineNumber":138,"author":{"gitId":"Kureans"},"content":"            dateTimeCode \u003d ParserUtils.parseDateTime(attributeStrings[1]);","lastModifiedDate":"2021-10-25"},{"lineNumber":139,"author":{"gitId":"Kureans"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":140,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":141,"author":{"gitId":"Kureans"},"content":"        return new FindAppointmentCommand(personId, personType, filterType, dateTimeCode);","lastModifiedDate":"2021-10-25"},{"lineNumber":142,"author":{"gitId":"Kureans"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":143,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":144,"author":{"gitId":"justinfidelis"},"content":"}","lastModifiedDate":"2021-10-22"}],"authorContributionMap":{"justinfidelis":90,"jushg":14,"Kureans":40}},{"path":"src/main/java/medbot/parser/StaffCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"justinfidelis"},"content":"package medbot.parser;","lastModifiedDate":"2021-10-22"},{"lineNumber":2,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":3,"author":{"gitId":"justinfidelis"},"content":"import medbot.command.Command;","lastModifiedDate":"2021-10-22"},{"lineNumber":4,"author":{"gitId":"justinfidelis"},"content":"import medbot.command.personcommand.staffcommand.AddStaffCommand;","lastModifiedDate":"2021-10-22"},{"lineNumber":5,"author":{"gitId":"EricBryann"},"content":"import medbot.command.personcommand.staffcommand.HideStaffCommand;","lastModifiedDate":"2021-11-02"},{"lineNumber":6,"author":{"gitId":"justinfidelis"},"content":"import medbot.command.personcommand.staffcommand.DeleteStaffCommand;","lastModifiedDate":"2021-10-22"},{"lineNumber":7,"author":{"gitId":"justinfidelis"},"content":"import medbot.command.personcommand.staffcommand.EditStaffCommand;","lastModifiedDate":"2021-10-22"},{"lineNumber":8,"author":{"gitId":"justinfidelis"},"content":"import medbot.command.personcommand.staffcommand.FindStaffCommand;","lastModifiedDate":"2021-10-22"},{"lineNumber":9,"author":{"gitId":"justinfidelis"},"content":"import medbot.command.personcommand.staffcommand.ListStaffCommand;","lastModifiedDate":"2021-10-22"},{"lineNumber":10,"author":{"gitId":"EricBryann"},"content":"import medbot.command.personcommand.staffcommand.ShowStaffCommand;","lastModifiedDate":"2021-11-02"},{"lineNumber":11,"author":{"gitId":"justinfidelis"},"content":"import medbot.command.personcommand.staffcommand.ViewStaffCommand;","lastModifiedDate":"2021-10-22"},{"lineNumber":12,"author":{"gitId":"justinfidelis"},"content":"import medbot.exceptions.MedBotParserException;","lastModifiedDate":"2021-10-22"},{"lineNumber":13,"author":{"gitId":"justinfidelis"},"content":"import medbot.person.Staff;","lastModifiedDate":"2021-10-22"},{"lineNumber":14,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":15,"author":{"gitId":"justinfidelis"},"content":"public abstract class StaffCommandParser {","lastModifiedDate":"2021-10-22"},{"lineNumber":16,"author":{"gitId":"justinfidelis"},"content":"    private static final String END_LINE \u003d System.lineSeparator();","lastModifiedDate":"2021-10-22"},{"lineNumber":17,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":18,"author":{"gitId":"justinfidelis"},"content":"    private static final String COMMAND_ADD \u003d \"add\";","lastModifiedDate":"2021-10-22"},{"lineNumber":19,"author":{"gitId":"justinfidelis"},"content":"    private static final String COMMAND_DELETE \u003d \"delete\";","lastModifiedDate":"2021-10-22"},{"lineNumber":20,"author":{"gitId":"justinfidelis"},"content":"    private static final String COMMAND_EDIT \u003d \"edit\";","lastModifiedDate":"2021-10-22"},{"lineNumber":21,"author":{"gitId":"justinfidelis"},"content":"    private static final String COMMAND_VIEW \u003d \"view\";","lastModifiedDate":"2021-10-22"},{"lineNumber":22,"author":{"gitId":"justinfidelis"},"content":"    private static final String COMMAND_LIST \u003d \"list\";","lastModifiedDate":"2021-10-22"},{"lineNumber":23,"author":{"gitId":"justinfidelis"},"content":"    private static final String COMMAND_FIND \u003d \"find\";","lastModifiedDate":"2021-10-22"},{"lineNumber":24,"author":{"gitId":"EricBryann"},"content":"    private static final String COMMAND_HIDE \u003d \"hide\";","lastModifiedDate":"2021-11-02"},{"lineNumber":25,"author":{"gitId":"EricBryann"},"content":"    private static final String COMMAND_SHOW \u003d \"show\";","lastModifiedDate":"2021-11-02"},{"lineNumber":26,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":27,"author":{"gitId":"justinfidelis"},"content":"    private static final String ERROR_WRONG_COMMAND \u003d \"Unable to parse command.\" + END_LINE;","lastModifiedDate":"2021-10-22"},{"lineNumber":28,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":29,"author":{"gitId":"justinfidelis"},"content":"    /**","lastModifiedDate":"2021-10-22"},{"lineNumber":30,"author":{"gitId":"justinfidelis"},"content":"     * Parses the user input and returns the corresponding command when the view type is MEDICAL_STAFF_INFO.","lastModifiedDate":"2021-10-22"},{"lineNumber":31,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-10-22"},{"lineNumber":32,"author":{"gitId":"justinfidelis"},"content":"     * @param userInput String containing the full user input.","lastModifiedDate":"2021-10-22"},{"lineNumber":33,"author":{"gitId":"justinfidelis"},"content":"     * @return the corresponding Command object.","lastModifiedDate":"2021-10-22"},{"lineNumber":34,"author":{"gitId":"justinfidelis"},"content":"     * @throws MedBotParserException if user input is not a recognised command or contains invalid information.","lastModifiedDate":"2021-10-22"},{"lineNumber":35,"author":{"gitId":"justinfidelis"},"content":"     */","lastModifiedDate":"2021-10-22"},{"lineNumber":36,"author":{"gitId":"justinfidelis"},"content":"    public static Command parseStaffCommand(String userInput) throws MedBotParserException {","lastModifiedDate":"2021-10-22"},{"lineNumber":37,"author":{"gitId":"justinfidelis"},"content":"        if (userInput.startsWith(COMMAND_ADD)) {","lastModifiedDate":"2021-10-22"},{"lineNumber":38,"author":{"gitId":"justinfidelis"},"content":"            return parseAddStaffCommand(userInput);","lastModifiedDate":"2021-10-22"},{"lineNumber":39,"author":{"gitId":"justinfidelis"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":40,"author":{"gitId":"justinfidelis"},"content":"        if (userInput.startsWith(COMMAND_DELETE)) {","lastModifiedDate":"2021-10-22"},{"lineNumber":41,"author":{"gitId":"justinfidelis"},"content":"            return parseDeleteStaffCommand(userInput);","lastModifiedDate":"2021-10-22"},{"lineNumber":42,"author":{"gitId":"justinfidelis"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":43,"author":{"gitId":"justinfidelis"},"content":"        if (userInput.startsWith(COMMAND_VIEW)) {","lastModifiedDate":"2021-10-22"},{"lineNumber":44,"author":{"gitId":"justinfidelis"},"content":"            return parseViewStaffCommand(userInput);","lastModifiedDate":"2021-10-22"},{"lineNumber":45,"author":{"gitId":"justinfidelis"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":46,"author":{"gitId":"EricBryann"},"content":"        if (userInput.startsWith(COMMAND_LIST)) {","lastModifiedDate":"2021-10-25"},{"lineNumber":47,"author":{"gitId":"EricBryann"},"content":"            return parseListStaffCommand(userInput);","lastModifiedDate":"2021-10-25"},{"lineNumber":48,"author":{"gitId":"justinfidelis"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":49,"author":{"gitId":"justinfidelis"},"content":"        if (userInput.startsWith(COMMAND_EDIT)) {","lastModifiedDate":"2021-10-22"},{"lineNumber":50,"author":{"gitId":"justinfidelis"},"content":"            return parseEditStaffCommand(userInput);","lastModifiedDate":"2021-10-22"},{"lineNumber":51,"author":{"gitId":"justinfidelis"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":52,"author":{"gitId":"justinfidelis"},"content":"        if (userInput.startsWith(COMMAND_FIND)) {","lastModifiedDate":"2021-10-22"},{"lineNumber":53,"author":{"gitId":"justinfidelis"},"content":"            return parseFindStaffCommand(userInput);","lastModifiedDate":"2021-10-22"},{"lineNumber":54,"author":{"gitId":"justinfidelis"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":55,"author":{"gitId":"EricBryann"},"content":"        if (userInput.startsWith(COMMAND_HIDE)) {","lastModifiedDate":"2021-11-02"},{"lineNumber":56,"author":{"gitId":"EricBryann"},"content":"            return parseHideStaffCommand(userInput);","lastModifiedDate":"2021-11-02"},{"lineNumber":57,"author":{"gitId":"EricBryann"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":58,"author":{"gitId":"EricBryann"},"content":"        if (userInput.startsWith(COMMAND_SHOW)) {","lastModifiedDate":"2021-11-02"},{"lineNumber":59,"author":{"gitId":"EricBryann"},"content":"            return parseShowStaffCommand(userInput);","lastModifiedDate":"2021-11-02"},{"lineNumber":60,"author":{"gitId":"EricBryann"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":61,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":62,"author":{"gitId":"justinfidelis"},"content":"        throw new MedBotParserException(ERROR_WRONG_COMMAND);","lastModifiedDate":"2021-10-22"},{"lineNumber":63,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":64,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":65,"author":{"gitId":"justinfidelis"},"content":"    /**","lastModifiedDate":"2021-10-22"},{"lineNumber":66,"author":{"gitId":"justinfidelis"},"content":"     * Parses user input and returns ViewStaffCommand with the specified staff ID.","lastModifiedDate":"2021-10-22"},{"lineNumber":67,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-10-22"},{"lineNumber":68,"author":{"gitId":"justinfidelis"},"content":"     * @param userInput String containing the full user input.","lastModifiedDate":"2021-10-22"},{"lineNumber":69,"author":{"gitId":"justinfidelis"},"content":"     * @return ViewStaffCommand object.","lastModifiedDate":"2021-10-22"},{"lineNumber":70,"author":{"gitId":"justinfidelis"},"content":"     * @throws MedBotParserException when staff id is not specified or not a number.","lastModifiedDate":"2021-10-22"},{"lineNumber":71,"author":{"gitId":"justinfidelis"},"content":"     */","lastModifiedDate":"2021-10-22"},{"lineNumber":72,"author":{"gitId":"justinfidelis"},"content":"    private static ViewStaffCommand parseViewStaffCommand(String userInput) throws MedBotParserException {","lastModifiedDate":"2021-10-22"},{"lineNumber":73,"author":{"gitId":"justinfidelis"},"content":"        int personId \u003d ParserUtils.parseId(userInput.substring(4));","lastModifiedDate":"2021-10-22"},{"lineNumber":74,"author":{"gitId":"justinfidelis"},"content":"        return new ViewStaffCommand(personId);","lastModifiedDate":"2021-10-22"},{"lineNumber":75,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":76,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":77,"author":{"gitId":"justinfidelis"},"content":"    /**","lastModifiedDate":"2021-10-22"},{"lineNumber":78,"author":{"gitId":"justinfidelis"},"content":"     * Parses user input and returns DeleteStaffCommand with the specified staff ID.","lastModifiedDate":"2021-10-22"},{"lineNumber":79,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-10-22"},{"lineNumber":80,"author":{"gitId":"justinfidelis"},"content":"     * @param userInput String containing the full user input.","lastModifiedDate":"2021-10-22"},{"lineNumber":81,"author":{"gitId":"justinfidelis"},"content":"     * @return DeleteStaffCommand object.","lastModifiedDate":"2021-10-22"},{"lineNumber":82,"author":{"gitId":"justinfidelis"},"content":"     * @throws MedBotParserException when staff id given is not specified or not a number.","lastModifiedDate":"2021-10-22"},{"lineNumber":83,"author":{"gitId":"justinfidelis"},"content":"     */","lastModifiedDate":"2021-10-22"},{"lineNumber":84,"author":{"gitId":"justinfidelis"},"content":"    private static DeleteStaffCommand parseDeleteStaffCommand(String userInput) throws MedBotParserException {","lastModifiedDate":"2021-10-22"},{"lineNumber":85,"author":{"gitId":"justinfidelis"},"content":"        int personId \u003d ParserUtils.parseId(userInput.substring(6));","lastModifiedDate":"2021-10-22"},{"lineNumber":86,"author":{"gitId":"justinfidelis"},"content":"        return new DeleteStaffCommand(personId);","lastModifiedDate":"2021-10-22"},{"lineNumber":87,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":88,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":89,"author":{"gitId":"justinfidelis"},"content":"    /**","lastModifiedDate":"2021-10-22"},{"lineNumber":90,"author":{"gitId":"justinfidelis"},"content":"     * Parses user input and returns EditStaffCommand with the specified patient ID and parameters.","lastModifiedDate":"2021-10-22"},{"lineNumber":91,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-10-22"},{"lineNumber":92,"author":{"gitId":"justinfidelis"},"content":"     * @param userInput String containing the full user input.","lastModifiedDate":"2021-10-22"},{"lineNumber":93,"author":{"gitId":"justinfidelis"},"content":"     * @return EditStaffCommand objects","lastModifiedDate":"2021-10-22"},{"lineNumber":94,"author":{"gitId":"justinfidelis"},"content":"     * @throws MedBotParserException when staff id given is not specified or not a number, or when","lastModifiedDate":"2021-10-22"},{"lineNumber":95,"author":{"gitId":"justinfidelis"},"content":"     *                               the parameters given cannot be parsed.","lastModifiedDate":"2021-10-22"},{"lineNumber":96,"author":{"gitId":"justinfidelis"},"content":"     */","lastModifiedDate":"2021-10-22"},{"lineNumber":97,"author":{"gitId":"justinfidelis"},"content":"    private static EditStaffCommand parseEditStaffCommand(String userInput) throws MedBotParserException {","lastModifiedDate":"2021-10-22"},{"lineNumber":98,"author":{"gitId":"justinfidelis"},"content":"        int staffId \u003d ParserUtils.parseId(userInput.substring(4));","lastModifiedDate":"2021-10-22"},{"lineNumber":99,"author":{"gitId":"justinfidelis"},"content":"        String[] parameters \u003d ParserUtils.getParameters(userInput);","lastModifiedDate":"2021-10-22"},{"lineNumber":100,"author":{"gitId":"justinfidelis"},"content":"        Staff staff \u003d new Staff();","lastModifiedDate":"2021-10-22"},{"lineNumber":101,"author":{"gitId":"justinfidelis"},"content":"        staff.setNull();","lastModifiedDate":"2021-10-22"},{"lineNumber":102,"author":{"gitId":"justinfidelis"},"content":"        ParserUtils.updateMultiplePersonalInformation(staff, parameters);","lastModifiedDate":"2021-10-22"},{"lineNumber":103,"author":{"gitId":"justinfidelis"},"content":"        return new EditStaffCommand(staffId, staff);","lastModifiedDate":"2021-10-22"},{"lineNumber":104,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":105,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":106,"author":{"gitId":"EricBryann"},"content":"    /**","lastModifiedDate":"2021-10-25"},{"lineNumber":107,"author":{"gitId":"EricBryann"},"content":"     * Parses user input and returns ListPatientCommand with the parameter to retrieve hidden or not-hidden patients.","lastModifiedDate":"2021-11-02"},{"lineNumber":108,"author":{"gitId":"EricBryann"},"content":"     *","lastModifiedDate":"2021-10-25"},{"lineNumber":109,"author":{"gitId":"EricBryann"},"content":"     * @param userInput String containing the full user input.","lastModifiedDate":"2021-10-25"},{"lineNumber":110,"author":{"gitId":"EricBryann"},"content":"     * @return ListPatientCommand object.","lastModifiedDate":"2021-10-25"},{"lineNumber":111,"author":{"gitId":"EricBryann"},"content":"     */","lastModifiedDate":"2021-10-25"},{"lineNumber":112,"author":{"gitId":"EricBryann"},"content":"    private static ListStaffCommand parseListStaffCommand(String userInput) throws MedBotParserException {","lastModifiedDate":"2021-10-25"},{"lineNumber":113,"author":{"gitId":"EricBryann"},"content":"        boolean getHiddenPersons \u003d ParserUtils.parseListParameter(userInput.substring(4));","lastModifiedDate":"2021-11-02"},{"lineNumber":114,"author":{"gitId":"EricBryann"},"content":"        return new ListStaffCommand(getHiddenPersons);","lastModifiedDate":"2021-11-02"},{"lineNumber":115,"author":{"gitId":"EricBryann"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":116,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":117,"author":{"gitId":"justinfidelis"},"content":"    /**","lastModifiedDate":"2021-10-22"},{"lineNumber":118,"author":{"gitId":"justinfidelis"},"content":"     * Parses user input and returns AddStaffCommand with the specified parameters.","lastModifiedDate":"2021-10-22"},{"lineNumber":119,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-10-22"},{"lineNumber":120,"author":{"gitId":"justinfidelis"},"content":"     * @param userInput String containing the full user input.","lastModifiedDate":"2021-10-22"},{"lineNumber":121,"author":{"gitId":"justinfidelis"},"content":"     * @return AddStaffCommand object.","lastModifiedDate":"2021-10-22"},{"lineNumber":122,"author":{"gitId":"justinfidelis"},"content":"     * @throws MedBotParserException when no parameters are specified, or when the parameters given cannot be parsed.","lastModifiedDate":"2021-10-22"},{"lineNumber":123,"author":{"gitId":"justinfidelis"},"content":"     */","lastModifiedDate":"2021-10-22"},{"lineNumber":124,"author":{"gitId":"justinfidelis"},"content":"    private static AddStaffCommand parseAddStaffCommand(String userInput) throws MedBotParserException {","lastModifiedDate":"2021-10-22"},{"lineNumber":125,"author":{"gitId":"justinfidelis"},"content":"        String[] parameters \u003d ParserUtils.getParameters(userInput);","lastModifiedDate":"2021-10-22"},{"lineNumber":126,"author":{"gitId":"justinfidelis"},"content":"        Staff staff \u003d new Staff();","lastModifiedDate":"2021-10-22"},{"lineNumber":127,"author":{"gitId":"justinfidelis"},"content":"        ParserUtils.updateMultiplePersonalInformation(staff, parameters);","lastModifiedDate":"2021-10-22"},{"lineNumber":128,"author":{"gitId":"justinfidelis"},"content":"        return new AddStaffCommand(staff);","lastModifiedDate":"2021-10-22"},{"lineNumber":129,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":130,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":131,"author":{"gitId":"justinfidelis"},"content":"    private static FindStaffCommand parseFindStaffCommand(String userInput) throws MedBotParserException {","lastModifiedDate":"2021-10-22"},{"lineNumber":132,"author":{"gitId":"justinfidelis"},"content":"        String[] parameters \u003d ParserUtils.getParameters(userInput);","lastModifiedDate":"2021-10-22"},{"lineNumber":133,"author":{"gitId":"justinfidelis"},"content":"        return new FindStaffCommand(parameters);","lastModifiedDate":"2021-10-22"},{"lineNumber":134,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":135,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":136,"author":{"gitId":"EricBryann"},"content":"    /**","lastModifiedDate":"2021-10-25"},{"lineNumber":137,"author":{"gitId":"EricBryann"},"content":"     * Parses user input and returns HideStaffCommand with the specified staff ID.","lastModifiedDate":"2021-11-02"},{"lineNumber":138,"author":{"gitId":"EricBryann"},"content":"     *","lastModifiedDate":"2021-10-25"},{"lineNumber":139,"author":{"gitId":"EricBryann"},"content":"     * @param userInput String containing the full user input.","lastModifiedDate":"2021-10-25"},{"lineNumber":140,"author":{"gitId":"EricBryann"},"content":"     * @return HideStaffCommand object.","lastModifiedDate":"2021-11-02"},{"lineNumber":141,"author":{"gitId":"EricBryann"},"content":"     * @throws MedBotParserException when staff id given is not specified or not a number.","lastModifiedDate":"2021-10-25"},{"lineNumber":142,"author":{"gitId":"EricBryann"},"content":"     */","lastModifiedDate":"2021-10-25"},{"lineNumber":143,"author":{"gitId":"EricBryann"},"content":"    private static HideStaffCommand parseHideStaffCommand(String userInput) throws MedBotParserException {","lastModifiedDate":"2021-11-02"},{"lineNumber":144,"author":{"gitId":"EricBryann"},"content":"        int personId \u003d ParserUtils.parseId(userInput.substring(4));","lastModifiedDate":"2021-11-02"},{"lineNumber":145,"author":{"gitId":"EricBryann"},"content":"        return new HideStaffCommand(personId);","lastModifiedDate":"2021-11-02"},{"lineNumber":146,"author":{"gitId":"EricBryann"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":147,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":148,"author":{"gitId":"EricBryann"},"content":"    /**","lastModifiedDate":"2021-10-25"},{"lineNumber":149,"author":{"gitId":"EricBryann"},"content":"     * Parses user input and returns ShowStaffCommand with the specified staff ID.","lastModifiedDate":"2021-11-02"},{"lineNumber":150,"author":{"gitId":"EricBryann"},"content":"     *","lastModifiedDate":"2021-10-25"},{"lineNumber":151,"author":{"gitId":"EricBryann"},"content":"     * @param userInput String containing the full user input.","lastModifiedDate":"2021-10-25"},{"lineNumber":152,"author":{"gitId":"EricBryann"},"content":"     * @return ShowStaffCommand object.","lastModifiedDate":"2021-11-02"},{"lineNumber":153,"author":{"gitId":"EricBryann"},"content":"     * @throws MedBotParserException when staff id given is not specified or not a number.","lastModifiedDate":"2021-10-25"},{"lineNumber":154,"author":{"gitId":"EricBryann"},"content":"     */","lastModifiedDate":"2021-10-25"},{"lineNumber":155,"author":{"gitId":"EricBryann"},"content":"    private static ShowStaffCommand parseShowStaffCommand(String userInput) throws MedBotParserException {","lastModifiedDate":"2021-11-02"},{"lineNumber":156,"author":{"gitId":"EricBryann"},"content":"        int personId \u003d ParserUtils.parseId(userInput.substring(4));","lastModifiedDate":"2021-11-02"},{"lineNumber":157,"author":{"gitId":"EricBryann"},"content":"        return new ShowStaffCommand(personId);","lastModifiedDate":"2021-11-02"},{"lineNumber":158,"author":{"gitId":"EricBryann"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":159,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":160,"author":{"gitId":"justinfidelis"},"content":"}","lastModifiedDate":"2021-10-22"}],"authorContributionMap":{"justinfidelis":111,"EricBryann":48,"Kureans":1}},{"path":"src/main/java/medbot/person/Patient.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"justinfidelis"},"content":"package medbot.person;","lastModifiedDate":"2021-09-30"},{"lineNumber":2,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":3,"author":{"gitId":"justinfidelis"},"content":"public class Patient extends Person {","lastModifiedDate":"2021-09-30"},{"lineNumber":4,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":5,"author":{"gitId":"justinfidelis"},"content":"    public Patient() {","lastModifiedDate":"2021-09-30"},{"lineNumber":6,"author":{"gitId":"justinfidelis"},"content":"        super.personType \u003d PersonType.PATIENT;","lastModifiedDate":"2021-09-30"},{"lineNumber":7,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-09-30"},{"lineNumber":8,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":9,"author":{"gitId":"justinfidelis"},"content":"    public String toString() {","lastModifiedDate":"2021-09-30"},{"lineNumber":10,"author":{"gitId":"EricBryann"},"content":"        return \"Patient ID: \" + getId() + super.toString();","lastModifiedDate":"2021-11-02"},{"lineNumber":11,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-09-30"},{"lineNumber":12,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":13,"author":{"gitId":"justinfidelis"},"content":"}","lastModifiedDate":"2021-09-30"}],"authorContributionMap":{"justinfidelis":10,"CrimsonTitan79":2,"EricBryann":1}},{"path":"src/main/java/medbot/person/Person.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"justinfidelis"},"content":"package medbot.person;","lastModifiedDate":"2021-09-30"},{"lineNumber":2,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":3,"author":{"gitId":"justinfidelis"},"content":"import medbot.Appointment;","lastModifiedDate":"2021-10-24"},{"lineNumber":4,"author":{"gitId":"justinfidelis"},"content":"import medbot.exceptions.MedBotException;","lastModifiedDate":"2021-10-24"},{"lineNumber":5,"author":{"gitId":"CrimsonTitan79"},"content":"import medbot.list.ListItem;","lastModifiedDate":"2021-10-26"},{"lineNumber":6,"author":{"gitId":"justinfidelis"},"content":"import medbot.list.PersonalAppointmentList;","lastModifiedDate":"2021-10-21"},{"lineNumber":7,"author":{"gitId":"Kureans"},"content":"import medbot.utilities.FilterType;","lastModifiedDate":"2021-10-25"},{"lineNumber":8,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":9,"author":{"gitId":"CrimsonTitan79"},"content":"import java.util.LinkedList;","lastModifiedDate":"2021-10-26"},{"lineNumber":10,"author":{"gitId":"CrimsonTitan79"},"content":"import java.util.List;","lastModifiedDate":"2021-10-26"},{"lineNumber":11,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":12,"author":{"gitId":"CrimsonTitan79"},"content":"import static medbot.ui.Ui.END_LINE;","lastModifiedDate":"2021-10-26"},{"lineNumber":13,"author":{"gitId":"CrimsonTitan79"},"content":"import static medbot.ui.Ui.VERTICAL_LINE_SPACED;","lastModifiedDate":"2021-10-26"},{"lineNumber":14,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":15,"author":{"gitId":"justinfidelis"},"content":"public abstract class Person implements ListItem {","lastModifiedDate":"2021-10-27"},{"lineNumber":16,"author":{"gitId":"EricBryann"},"content":"    private static final String PARAMETER_NAME \u003d \"n/\";","lastModifiedDate":"2021-10-19"},{"lineNumber":17,"author":{"gitId":"EricBryann"},"content":"    private static final String PARAMETER_PHONE \u003d \"p/\";","lastModifiedDate":"2021-10-19"},{"lineNumber":18,"author":{"gitId":"EricBryann"},"content":"    private static final String PARAMETER_EMAIL \u003d \"e/\";","lastModifiedDate":"2021-10-19"},{"lineNumber":19,"author":{"gitId":"EricBryann"},"content":"    private static final String PARAMETER_IC \u003d \"i/\";","lastModifiedDate":"2021-10-19"},{"lineNumber":20,"author":{"gitId":"EricBryann"},"content":"    private static final String PARAMETER_ADDRESS \u003d \"a/\";","lastModifiedDate":"2021-10-19"},{"lineNumber":21,"author":{"gitId":"EricBryann"},"content":"    private static final int PARAMETER_BUFFER \u003d 2;","lastModifiedDate":"2021-10-19"},{"lineNumber":22,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":23,"author":{"gitId":"EricBryann"},"content":"    private static final String SPACE \u003d \" \";","lastModifiedDate":"2021-10-19"},{"lineNumber":24,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":25,"author":{"gitId":"EricBryann"},"content":"    private static final int LENGTH_ID_COLUMN \u003d 4;","lastModifiedDate":"2021-10-19"},{"lineNumber":26,"author":{"gitId":"EricBryann"},"content":"    private static final int LENGTH_IC_COLUMN \u003d 9;","lastModifiedDate":"2021-10-19"},{"lineNumber":27,"author":{"gitId":"EricBryann"},"content":"    private static final int LENGTH_NAME_COLUMN \u003d 20;","lastModifiedDate":"2021-10-19"},{"lineNumber":28,"author":{"gitId":"EricBryann"},"content":"    private static final int LENGTH_PHONE_NUM_COLUMN \u003d 9;","lastModifiedDate":"2021-10-19"},{"lineNumber":29,"author":{"gitId":"EricBryann"},"content":"    private static final int LENGTH_EMAIL_COLUMN \u003d 20;","lastModifiedDate":"2021-10-19"},{"lineNumber":30,"author":{"gitId":"EricBryann"},"content":"    private static final int LENGTH_ADDRESS_COLUMN \u003d 20;","lastModifiedDate":"2021-10-19"},{"lineNumber":31,"author":{"gitId":"EricBryann"},"content":"    private static final int LENGTH_EMPTY_STRING \u003d 0;","lastModifiedDate":"2021-11-02"},{"lineNumber":32,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":33,"author":{"gitId":"justinfidelis"},"content":"    private int personId \u003d 0;","lastModifiedDate":"2021-11-02"},{"lineNumber":34,"author":{"gitId":"justinfidelis"},"content":"    protected String icNumber \u003d \"\";","lastModifiedDate":"2021-09-30"},{"lineNumber":35,"author":{"gitId":"justinfidelis"},"content":"    protected String name \u003d \"\";","lastModifiedDate":"2021-09-30"},{"lineNumber":36,"author":{"gitId":"justinfidelis"},"content":"    protected String phoneNumber \u003d \"\";","lastModifiedDate":"2021-09-30"},{"lineNumber":37,"author":{"gitId":"justinfidelis"},"content":"    protected String emailAddress \u003d \"\";","lastModifiedDate":"2021-09-30"},{"lineNumber":38,"author":{"gitId":"justinfidelis"},"content":"    protected String residentialAddress \u003d \"\";","lastModifiedDate":"2021-09-30"},{"lineNumber":39,"author":{"gitId":"justinfidelis"},"content":"    protected PersonalAppointmentList personalAppointmentList \u003d new PersonalAppointmentList();","lastModifiedDate":"2021-10-21"},{"lineNumber":40,"author":{"gitId":"EricBryann"},"content":"    protected boolean isHidden \u003d false;","lastModifiedDate":"2021-11-02"},{"lineNumber":41,"author":{"gitId":"Kureans"},"content":"    protected PersonType personType;","lastModifiedDate":"2021-10-29"},{"lineNumber":42,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":43,"author":{"gitId":"justinfidelis"},"content":"    public int getId() {","lastModifiedDate":"2021-10-27"},{"lineNumber":44,"author":{"gitId":"justinfidelis"},"content":"        return personId;","lastModifiedDate":"2021-10-27"},{"lineNumber":45,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":46,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":47,"author":{"gitId":"justinfidelis"},"content":"    public void setId(int personId) {","lastModifiedDate":"2021-10-27"},{"lineNumber":48,"author":{"gitId":"justinfidelis"},"content":"        this.personId \u003d personId;","lastModifiedDate":"2021-10-27"},{"lineNumber":49,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":50,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":51,"author":{"gitId":"justinfidelis"},"content":"    public String toString() {","lastModifiedDate":"2021-09-30"},{"lineNumber":52,"author":{"gitId":"jushg"},"content":"        return END_LINE","lastModifiedDate":"2021-10-22"},{"lineNumber":53,"author":{"gitId":"jushg"},"content":"                + \"IC: \" + icNumber + END_LINE","lastModifiedDate":"2021-10-22"},{"lineNumber":54,"author":{"gitId":"jushg"},"content":"                + \"Name: \" + name + END_LINE","lastModifiedDate":"2021-10-22"},{"lineNumber":55,"author":{"gitId":"jushg"},"content":"                + \"H/P: \" + phoneNumber + END_LINE","lastModifiedDate":"2021-10-22"},{"lineNumber":56,"author":{"gitId":"jushg"},"content":"                + \"Email: \" + emailAddress + END_LINE","lastModifiedDate":"2021-10-22"},{"lineNumber":57,"author":{"gitId":"EricBryann"},"content":"                + \"Address: \" + residentialAddress;","lastModifiedDate":"2021-10-19"},{"lineNumber":58,"author":{"gitId":"EricBryann"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":59,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":60,"author":{"gitId":"EricBryann"},"content":"    public String getInfoInTableFormat() {","lastModifiedDate":"2021-10-19"},{"lineNumber":61,"author":{"gitId":"EricBryann"},"content":"        return VERTICAL_LINE_SPACED + getFormattedPersonId()","lastModifiedDate":"2021-10-19"},{"lineNumber":62,"author":{"gitId":"EricBryann"},"content":"                + VERTICAL_LINE_SPACED + getFormattedIcNumber()","lastModifiedDate":"2021-10-19"},{"lineNumber":63,"author":{"gitId":"EricBryann"},"content":"                + VERTICAL_LINE_SPACED + getFormattedName()","lastModifiedDate":"2021-10-19"},{"lineNumber":64,"author":{"gitId":"EricBryann"},"content":"                + VERTICAL_LINE_SPACED + getFormattedPhoneNumber()","lastModifiedDate":"2021-10-19"},{"lineNumber":65,"author":{"gitId":"EricBryann"},"content":"                + VERTICAL_LINE_SPACED + getFormattedEmail()","lastModifiedDate":"2021-10-19"},{"lineNumber":66,"author":{"gitId":"EricBryann"},"content":"                + VERTICAL_LINE_SPACED + getFormattedAddress()","lastModifiedDate":"2021-10-19"},{"lineNumber":67,"author":{"gitId":"EricBryann"},"content":"                + VERTICAL_LINE_SPACED;","lastModifiedDate":"2021-10-19"},{"lineNumber":68,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-09-30"},{"lineNumber":69,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":70,"author":{"gitId":"justinfidelis"},"content":"    public String getIcNumber() {","lastModifiedDate":"2021-09-30"},{"lineNumber":71,"author":{"gitId":"justinfidelis"},"content":"        return icNumber;","lastModifiedDate":"2021-09-30"},{"lineNumber":72,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-09-30"},{"lineNumber":73,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":74,"author":{"gitId":"justinfidelis"},"content":"    public void setIcNumber(String icNumber) {","lastModifiedDate":"2021-09-30"},{"lineNumber":75,"author":{"gitId":"justinfidelis"},"content":"        this.icNumber \u003d icNumber;","lastModifiedDate":"2021-09-30"},{"lineNumber":76,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-09-30"},{"lineNumber":77,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":78,"author":{"gitId":"justinfidelis"},"content":"    public String getName() {","lastModifiedDate":"2021-09-30"},{"lineNumber":79,"author":{"gitId":"justinfidelis"},"content":"        return name;","lastModifiedDate":"2021-09-30"},{"lineNumber":80,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-09-30"},{"lineNumber":81,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":82,"author":{"gitId":"justinfidelis"},"content":"    public void setName(String name) {","lastModifiedDate":"2021-09-30"},{"lineNumber":83,"author":{"gitId":"justinfidelis"},"content":"        this.name \u003d name;","lastModifiedDate":"2021-09-30"},{"lineNumber":84,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-09-30"},{"lineNumber":85,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":86,"author":{"gitId":"justinfidelis"},"content":"    public String getPhoneNumber() {","lastModifiedDate":"2021-09-30"},{"lineNumber":87,"author":{"gitId":"justinfidelis"},"content":"        return phoneNumber;","lastModifiedDate":"2021-09-30"},{"lineNumber":88,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-09-30"},{"lineNumber":89,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":90,"author":{"gitId":"justinfidelis"},"content":"    public void setPhoneNumber(String phoneNumber) {","lastModifiedDate":"2021-09-30"},{"lineNumber":91,"author":{"gitId":"justinfidelis"},"content":"        this.phoneNumber \u003d phoneNumber;","lastModifiedDate":"2021-09-30"},{"lineNumber":92,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-09-30"},{"lineNumber":93,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":94,"author":{"gitId":"justinfidelis"},"content":"    public String getEmailAddress() {","lastModifiedDate":"2021-09-30"},{"lineNumber":95,"author":{"gitId":"justinfidelis"},"content":"        return emailAddress;","lastModifiedDate":"2021-09-30"},{"lineNumber":96,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-09-30"},{"lineNumber":97,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":98,"author":{"gitId":"justinfidelis"},"content":"    public void setEmailAddress(String emailAddress) {","lastModifiedDate":"2021-09-30"},{"lineNumber":99,"author":{"gitId":"justinfidelis"},"content":"        this.emailAddress \u003d emailAddress;","lastModifiedDate":"2021-09-30"},{"lineNumber":100,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-09-30"},{"lineNumber":101,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":102,"author":{"gitId":"justinfidelis"},"content":"    public String getResidentialAddress() {","lastModifiedDate":"2021-09-30"},{"lineNumber":103,"author":{"gitId":"justinfidelis"},"content":"        return residentialAddress;","lastModifiedDate":"2021-09-30"},{"lineNumber":104,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-09-30"},{"lineNumber":105,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":106,"author":{"gitId":"justinfidelis"},"content":"    public void setResidentialAddress(String residentialAddress) {","lastModifiedDate":"2021-09-30"},{"lineNumber":107,"author":{"gitId":"justinfidelis"},"content":"        this.residentialAddress \u003d residentialAddress;","lastModifiedDate":"2021-09-30"},{"lineNumber":108,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-09-30"},{"lineNumber":109,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":110,"author":{"gitId":"justinfidelis"},"content":"    public void setNull() {","lastModifiedDate":"2021-10-06"},{"lineNumber":111,"author":{"gitId":"justinfidelis"},"content":"        icNumber \u003d null;","lastModifiedDate":"2021-10-06"},{"lineNumber":112,"author":{"gitId":"justinfidelis"},"content":"        name \u003d null;","lastModifiedDate":"2021-10-06"},{"lineNumber":113,"author":{"gitId":"justinfidelis"},"content":"        phoneNumber \u003d null;","lastModifiedDate":"2021-10-06"},{"lineNumber":114,"author":{"gitId":"justinfidelis"},"content":"        emailAddress \u003d null;","lastModifiedDate":"2021-10-06"},{"lineNumber":115,"author":{"gitId":"justinfidelis"},"content":"        residentialAddress \u003d null;","lastModifiedDate":"2021-10-06"},{"lineNumber":116,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":117,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":118,"author":{"gitId":"EricBryann"},"content":"    public boolean isHidden() {","lastModifiedDate":"2021-11-02"},{"lineNumber":119,"author":{"gitId":"EricBryann"},"content":"        return isHidden;","lastModifiedDate":"2021-11-02"},{"lineNumber":120,"author":{"gitId":"EricBryann"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":121,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":122,"author":{"gitId":"EricBryann"},"content":"    public void hide() {","lastModifiedDate":"2021-11-02"},{"lineNumber":123,"author":{"gitId":"EricBryann"},"content":"        isHidden \u003d true;","lastModifiedDate":"2021-11-02"},{"lineNumber":124,"author":{"gitId":"EricBryann"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":125,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":126,"author":{"gitId":"EricBryann"},"content":"    public void show() {","lastModifiedDate":"2021-11-02"},{"lineNumber":127,"author":{"gitId":"EricBryann"},"content":"        isHidden \u003d false;","lastModifiedDate":"2021-11-02"},{"lineNumber":128,"author":{"gitId":"EricBryann"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":129,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":130,"author":{"gitId":"justinfidelis"},"content":"    /**","lastModifiedDate":"2021-10-24"},{"lineNumber":131,"author":{"gitId":"justinfidelis"},"content":"     * Returns the appointmentId of the appointment at the specified time code, or -1 if there is none.","lastModifiedDate":"2021-10-24"},{"lineNumber":132,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-10-24"},{"lineNumber":133,"author":{"gitId":"justinfidelis"},"content":"     * @param dateTimeCode the dateTimeCode to search for","lastModifiedDate":"2021-10-24"},{"lineNumber":134,"author":{"gitId":"justinfidelis"},"content":"     * @return the appointmentId of the appointment with that dateTimeCode, or -1 if there is none","lastModifiedDate":"2021-10-24"},{"lineNumber":135,"author":{"gitId":"justinfidelis"},"content":"     */","lastModifiedDate":"2021-10-24"},{"lineNumber":136,"author":{"gitId":"justinfidelis"},"content":"    public int getAppointmentId(int dateTimeCode) {","lastModifiedDate":"2021-10-24"},{"lineNumber":137,"author":{"gitId":"justinfidelis"},"content":"        return personalAppointmentList.getAppointmentId(dateTimeCode);","lastModifiedDate":"2021-10-24"},{"lineNumber":138,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":139,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":140,"author":{"gitId":"justinfidelis"},"content":"    /**","lastModifiedDate":"2021-10-25"},{"lineNumber":141,"author":{"gitId":"justinfidelis"},"content":"     * Returns an LinkedList of the appointmentId of all appointments.","lastModifiedDate":"2021-10-25"},{"lineNumber":142,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-10-25"},{"lineNumber":143,"author":{"gitId":"justinfidelis"},"content":"     * @return LinkedList of the appointmentId of all appointments","lastModifiedDate":"2021-10-25"},{"lineNumber":144,"author":{"gitId":"justinfidelis"},"content":"     */","lastModifiedDate":"2021-10-25"},{"lineNumber":145,"author":{"gitId":"justinfidelis"},"content":"    public LinkedList\u003cInteger\u003e getAllAppointmentIds() {","lastModifiedDate":"2021-10-25"},{"lineNumber":146,"author":{"gitId":"justinfidelis"},"content":"        return personalAppointmentList.getAllAppointmentIds();","lastModifiedDate":"2021-10-25"},{"lineNumber":147,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":148,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":149,"author":{"gitId":"justinfidelis"},"content":"    /**","lastModifiedDate":"2021-10-24"},{"lineNumber":150,"author":{"gitId":"justinfidelis"},"content":"     * Adds the given appointment to the appointment list.","lastModifiedDate":"2021-10-24"},{"lineNumber":151,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-10-24"},{"lineNumber":152,"author":{"gitId":"justinfidelis"},"content":"     * @param appointment Appointment to be added to the appointment list","lastModifiedDate":"2021-10-24"},{"lineNumber":153,"author":{"gitId":"justinfidelis"},"content":"     * @throws MedBotException if there is another appointment at that time","lastModifiedDate":"2021-10-24"},{"lineNumber":154,"author":{"gitId":"justinfidelis"},"content":"     */","lastModifiedDate":"2021-10-24"},{"lineNumber":155,"author":{"gitId":"justinfidelis"},"content":"    public void addAppointment(Appointment appointment) throws MedBotException {","lastModifiedDate":"2021-10-24"},{"lineNumber":156,"author":{"gitId":"justinfidelis"},"content":"        personalAppointmentList.addAppointment(appointment);","lastModifiedDate":"2021-10-24"},{"lineNumber":157,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":158,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":159,"author":{"gitId":"justinfidelis"},"content":"    /**","lastModifiedDate":"2021-10-24"},{"lineNumber":160,"author":{"gitId":"justinfidelis"},"content":"     * Removes the appointment with the specified dateTimeCode.","lastModifiedDate":"2021-10-24"},{"lineNumber":161,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-10-24"},{"lineNumber":162,"author":{"gitId":"justinfidelis"},"content":"     * @param dateTimeCode the dateTimeCode of the appointment to be deleted","lastModifiedDate":"2021-10-24"},{"lineNumber":163,"author":{"gitId":"justinfidelis"},"content":"     * @throws MedBotException if there is no appointment with that dateTimeCode.","lastModifiedDate":"2021-10-24"},{"lineNumber":164,"author":{"gitId":"justinfidelis"},"content":"     */","lastModifiedDate":"2021-10-24"},{"lineNumber":165,"author":{"gitId":"justinfidelis"},"content":"    public void deleteAppointment(int dateTimeCode) throws MedBotException {","lastModifiedDate":"2021-10-24"},{"lineNumber":166,"author":{"gitId":"justinfidelis"},"content":"        personalAppointmentList.deleteAppointment(dateTimeCode);","lastModifiedDate":"2021-10-24"},{"lineNumber":167,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":168,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":169,"author":{"gitId":"Kureans"},"content":"    //@@author Kureans","lastModifiedDate":"2021-10-29"},{"lineNumber":170,"author":{"gitId":"Kureans"},"content":"    public List\u003cInteger\u003e listAppointments(FilterType filterType, int dateTimeCode) {","lastModifiedDate":"2021-10-26"},{"lineNumber":171,"author":{"gitId":"Kureans"},"content":"        switch (filterType) {","lastModifiedDate":"2021-10-25"},{"lineNumber":172,"author":{"gitId":"Kureans"},"content":"        case BEFORE:","lastModifiedDate":"2021-10-25"},{"lineNumber":173,"author":{"gitId":"Kureans"},"content":"            return personalAppointmentList.listAppointmentsBefore(dateTimeCode);","lastModifiedDate":"2021-10-25"},{"lineNumber":174,"author":{"gitId":"Kureans"},"content":"        case AFTER:","lastModifiedDate":"2021-10-25"},{"lineNumber":175,"author":{"gitId":"Kureans"},"content":"            return personalAppointmentList.listAppointmentsAfter(dateTimeCode);","lastModifiedDate":"2021-10-25"},{"lineNumber":176,"author":{"gitId":"Kureans"},"content":"        case NONE:","lastModifiedDate":"2021-10-25"},{"lineNumber":177,"author":{"gitId":"Kureans"},"content":"        default:","lastModifiedDate":"2021-10-25"},{"lineNumber":178,"author":{"gitId":"Kureans"},"content":"            return personalAppointmentList.listAppointments();","lastModifiedDate":"2021-10-24"},{"lineNumber":179,"author":{"gitId":"Kureans"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":180,"author":{"gitId":"Kureans"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":181,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":182,"author":{"gitId":"Kureans"},"content":"    //@@author","lastModifiedDate":"2021-10-29"},{"lineNumber":183,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":184,"author":{"gitId":"CrimsonTitan79"},"content":"    /**","lastModifiedDate":"2021-10-08"},{"lineNumber":185,"author":{"gitId":"CrimsonTitan79"},"content":"     * Text to be written to storage file of a person.","lastModifiedDate":"2021-10-25"},{"lineNumber":186,"author":{"gitId":"CrimsonTitan79"},"content":"     *","lastModifiedDate":"2021-10-08"},{"lineNumber":187,"author":{"gitId":"CrimsonTitan79"},"content":"     * @return storageString of a person","lastModifiedDate":"2021-10-08"},{"lineNumber":188,"author":{"gitId":"CrimsonTitan79"},"content":"     */","lastModifiedDate":"2021-10-08"},{"lineNumber":189,"author":{"gitId":"CrimsonTitan79"},"content":"    public String getStorageString() {","lastModifiedDate":"2021-10-08"},{"lineNumber":190,"author":{"gitId":"justinfidelis"},"content":"        return getId() + VERTICAL_LINE_SPACED","lastModifiedDate":"2021-10-27"},{"lineNumber":191,"author":{"gitId":"CrimsonTitan79"},"content":"                + setAsStorageParameterOrNull(icNumber) + VERTICAL_LINE_SPACED","lastModifiedDate":"2021-10-26"},{"lineNumber":192,"author":{"gitId":"CrimsonTitan79"},"content":"                + setAsStorageParameterOrNull(name) + VERTICAL_LINE_SPACED","lastModifiedDate":"2021-10-13"},{"lineNumber":193,"author":{"gitId":"CrimsonTitan79"},"content":"                + setAsStorageParameterOrNull(phoneNumber) + VERTICAL_LINE_SPACED","lastModifiedDate":"2021-10-13"},{"lineNumber":194,"author":{"gitId":"CrimsonTitan79"},"content":"                + setAsStorageParameterOrNull(emailAddress) + VERTICAL_LINE_SPACED","lastModifiedDate":"2021-10-13"},{"lineNumber":195,"author":{"gitId":"CrimsonTitan79"},"content":"                + setAsStorageParameterOrNull(residentialAddress) + VERTICAL_LINE_SPACED","lastModifiedDate":"2021-10-29"},{"lineNumber":196,"author":{"gitId":"EricBryann"},"content":"                + getHideStatusStorageString(isHidden);","lastModifiedDate":"2021-11-02"},{"lineNumber":197,"author":{"gitId":"CrimsonTitan79"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":198,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":199,"author":{"gitId":"EricBryann"},"content":"    /**","lastModifiedDate":"2021-10-19"},{"lineNumber":200,"author":{"gitId":"EricBryann"},"content":"     * Checks whether this person contains all the parameters specified.","lastModifiedDate":"2021-10-19"},{"lineNumber":201,"author":{"gitId":"EricBryann"},"content":"     *","lastModifiedDate":"2021-10-19"},{"lineNumber":202,"author":{"gitId":"EricBryann"},"content":"     * @param parameters the attributes to check.","lastModifiedDate":"2021-10-19"},{"lineNumber":203,"author":{"gitId":"EricBryann"},"content":"     * @return true if all parameters are found, false otherwise.","lastModifiedDate":"2021-10-19"},{"lineNumber":204,"author":{"gitId":"EricBryann"},"content":"     */","lastModifiedDate":"2021-10-19"},{"lineNumber":205,"author":{"gitId":"EricBryann"},"content":"    public boolean containsAllParameters(String[] parameters) throws MedBotException {","lastModifiedDate":"2021-11-02"},{"lineNumber":206,"author":{"gitId":"EricBryann"},"content":"        for (String parameter : parameters) {","lastModifiedDate":"2021-10-19"},{"lineNumber":207,"author":{"gitId":"EricBryann"},"content":"            if (!containsParameter(parameter)) {","lastModifiedDate":"2021-10-19"},{"lineNumber":208,"author":{"gitId":"EricBryann"},"content":"                return false;","lastModifiedDate":"2021-10-19"},{"lineNumber":209,"author":{"gitId":"EricBryann"},"content":"            }","lastModifiedDate":"2021-10-19"},{"lineNumber":210,"author":{"gitId":"EricBryann"},"content":"        }","lastModifiedDate":"2021-10-19"},{"lineNumber":211,"author":{"gitId":"EricBryann"},"content":"        return true;","lastModifiedDate":"2021-10-19"},{"lineNumber":212,"author":{"gitId":"EricBryann"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":213,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":214,"author":{"gitId":"EricBryann"},"content":"    /**","lastModifiedDate":"2021-11-02"},{"lineNumber":215,"author":{"gitId":"EricBryann"},"content":"     * Checks whether wordToCheck contains wordInput.","lastModifiedDate":"2021-11-02"},{"lineNumber":216,"author":{"gitId":"EricBryann"},"content":"     * If wordInput is an empty string, checks whether wordToCheck","lastModifiedDate":"2021-11-02"},{"lineNumber":217,"author":{"gitId":"EricBryann"},"content":"     * is an empty string.","lastModifiedDate":"2021-11-02"},{"lineNumber":218,"author":{"gitId":"EricBryann"},"content":"     *","lastModifiedDate":"2021-11-02"},{"lineNumber":219,"author":{"gitId":"EricBryann"},"content":"     * @param wordToCheck the attributes to check.","lastModifiedDate":"2021-11-02"},{"lineNumber":220,"author":{"gitId":"EricBryann"},"content":"     * @param wordInput the inputted word to check against wordToCheck.","lastModifiedDate":"2021-11-02"},{"lineNumber":221,"author":{"gitId":"EricBryann"},"content":"     * @return true if wordInput is in wordToCheck, false otherwise.","lastModifiedDate":"2021-11-02"},{"lineNumber":222,"author":{"gitId":"EricBryann"},"content":"     */","lastModifiedDate":"2021-11-02"},{"lineNumber":223,"author":{"gitId":"EricBryann"},"content":"    private boolean contains(String wordToCheck,String wordInput) {","lastModifiedDate":"2021-11-02"},{"lineNumber":224,"author":{"gitId":"EricBryann"},"content":"        if (wordInput.length() \u003d\u003d LENGTH_EMPTY_STRING) {","lastModifiedDate":"2021-11-02"},{"lineNumber":225,"author":{"gitId":"EricBryann"},"content":"            return wordToCheck.length() \u003d\u003d LENGTH_EMPTY_STRING;","lastModifiedDate":"2021-11-02"},{"lineNumber":226,"author":{"gitId":"EricBryann"},"content":"        }","lastModifiedDate":"2021-10-19"},{"lineNumber":227,"author":{"gitId":"EricBryann"},"content":"        return wordToCheck.toLowerCase().contains(wordInput);","lastModifiedDate":"2021-11-02"},{"lineNumber":228,"author":{"gitId":"EricBryann"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":229,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":230,"author":{"gitId":"EricBryann"},"content":"    private boolean containsParameter(String parameter) throws MedBotException {","lastModifiedDate":"2021-11-02"},{"lineNumber":231,"author":{"gitId":"EricBryann"},"content":"        String trimmedParameter \u003d parameter.substring(PARAMETER_BUFFER).trim().toLowerCase();","lastModifiedDate":"2021-11-02"},{"lineNumber":232,"author":{"gitId":"EricBryann"},"content":"        String paramSpecifier \u003d parameter.substring(0, PARAMETER_BUFFER);","lastModifiedDate":"2021-11-02"},{"lineNumber":233,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":234,"author":{"gitId":"EricBryann"},"content":"        switch (paramSpecifier) {","lastModifiedDate":"2021-11-02"},{"lineNumber":235,"author":{"gitId":"EricBryann"},"content":"        case (PARAMETER_NAME) :","lastModifiedDate":"2021-11-02"},{"lineNumber":236,"author":{"gitId":"EricBryann"},"content":"            return contains(getName(), trimmedParameter);","lastModifiedDate":"2021-11-02"},{"lineNumber":237,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":238,"author":{"gitId":"EricBryann"},"content":"        case (PARAMETER_IC) :","lastModifiedDate":"2021-11-02"},{"lineNumber":239,"author":{"gitId":"EricBryann"},"content":"            return contains(getIcNumber(), trimmedParameter);","lastModifiedDate":"2021-11-02"},{"lineNumber":240,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":241,"author":{"gitId":"EricBryann"},"content":"        case (PARAMETER_PHONE) :","lastModifiedDate":"2021-11-02"},{"lineNumber":242,"author":{"gitId":"EricBryann"},"content":"            return contains(getPhoneNumber(), trimmedParameter);","lastModifiedDate":"2021-11-02"},{"lineNumber":243,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":244,"author":{"gitId":"EricBryann"},"content":"        case (PARAMETER_EMAIL) :","lastModifiedDate":"2021-11-02"},{"lineNumber":245,"author":{"gitId":"EricBryann"},"content":"            return contains(getEmailAddress(), trimmedParameter);","lastModifiedDate":"2021-11-02"},{"lineNumber":246,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":247,"author":{"gitId":"EricBryann"},"content":"        case (PARAMETER_ADDRESS) :","lastModifiedDate":"2021-11-02"},{"lineNumber":248,"author":{"gitId":"EricBryann"},"content":"            return contains(getResidentialAddress(), trimmedParameter);","lastModifiedDate":"2021-11-02"},{"lineNumber":249,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":250,"author":{"gitId":"EricBryann"},"content":"        default:","lastModifiedDate":"2021-11-02"},{"lineNumber":251,"author":{"gitId":"EricBryann"},"content":"            throw new MedBotException(\"The specifier \" + paramSpecifier + \" is invalid.\");","lastModifiedDate":"2021-11-02"},{"lineNumber":252,"author":{"gitId":"EricBryann"},"content":"        }","lastModifiedDate":"2021-10-19"},{"lineNumber":253,"author":{"gitId":"EricBryann"},"content":"    }","lastModifiedDate":"2021-11-02"},{"lineNumber":254,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":255,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":256,"author":{"gitId":"EricBryann"},"content":"    private String formattedAttribute(String attribute, int outputLength) {","lastModifiedDate":"2021-10-19"},{"lineNumber":257,"author":{"gitId":"EricBryann"},"content":"        int attributeLength \u003d attribute.length();","lastModifiedDate":"2021-10-19"},{"lineNumber":258,"author":{"gitId":"EricBryann"},"content":"        String output \u003d attribute;","lastModifiedDate":"2021-10-19"},{"lineNumber":259,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":260,"author":{"gitId":"EricBryann"},"content":"        if (attributeLength \u003e outputLength) {","lastModifiedDate":"2021-10-19"},{"lineNumber":261,"author":{"gitId":"EricBryann"},"content":"            output \u003d output.substring(0, outputLength - 3) + \"...\";","lastModifiedDate":"2021-10-19"},{"lineNumber":262,"author":{"gitId":"EricBryann"},"content":"        }","lastModifiedDate":"2021-10-19"},{"lineNumber":263,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":264,"author":{"gitId":"EricBryann"},"content":"        int remainingLength \u003d outputLength - attributeLength;","lastModifiedDate":"2021-10-19"},{"lineNumber":265,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":266,"author":{"gitId":"EricBryann"},"content":"        for (int i \u003d 0; i \u003c remainingLength; i++) {","lastModifiedDate":"2021-10-19"},{"lineNumber":267,"author":{"gitId":"EricBryann"},"content":"            output +\u003d SPACE;","lastModifiedDate":"2021-10-19"},{"lineNumber":268,"author":{"gitId":"EricBryann"},"content":"        }","lastModifiedDate":"2021-10-19"},{"lineNumber":269,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":270,"author":{"gitId":"EricBryann"},"content":"        return output;","lastModifiedDate":"2021-10-19"},{"lineNumber":271,"author":{"gitId":"EricBryann"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":272,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":273,"author":{"gitId":"EricBryann"},"content":"    private String getFormattedPersonId() {","lastModifiedDate":"2021-10-19"},{"lineNumber":274,"author":{"gitId":"justinfidelis"},"content":"        return formattedAttribute(Integer.toString(personId), LENGTH_ID_COLUMN);","lastModifiedDate":"2021-10-27"},{"lineNumber":275,"author":{"gitId":"EricBryann"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":276,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":277,"author":{"gitId":"EricBryann"},"content":"    private String getFormattedIcNumber() {","lastModifiedDate":"2021-10-19"},{"lineNumber":278,"author":{"gitId":"EricBryann"},"content":"        return formattedAttribute(icNumber, LENGTH_IC_COLUMN);","lastModifiedDate":"2021-10-19"},{"lineNumber":279,"author":{"gitId":"EricBryann"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":280,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":281,"author":{"gitId":"EricBryann"},"content":"    private String getFormattedName() {","lastModifiedDate":"2021-10-19"},{"lineNumber":282,"author":{"gitId":"EricBryann"},"content":"        return formattedAttribute(name, LENGTH_NAME_COLUMN);","lastModifiedDate":"2021-10-19"},{"lineNumber":283,"author":{"gitId":"EricBryann"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":284,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":285,"author":{"gitId":"EricBryann"},"content":"    private String getFormattedPhoneNumber() {","lastModifiedDate":"2021-10-19"},{"lineNumber":286,"author":{"gitId":"EricBryann"},"content":"        return formattedAttribute(phoneNumber, LENGTH_PHONE_NUM_COLUMN);","lastModifiedDate":"2021-10-19"},{"lineNumber":287,"author":{"gitId":"EricBryann"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":288,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":289,"author":{"gitId":"EricBryann"},"content":"    private String getFormattedEmail() {","lastModifiedDate":"2021-10-19"},{"lineNumber":290,"author":{"gitId":"EricBryann"},"content":"        return formattedAttribute(emailAddress, LENGTH_EMAIL_COLUMN);","lastModifiedDate":"2021-10-19"},{"lineNumber":291,"author":{"gitId":"EricBryann"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":292,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":293,"author":{"gitId":"EricBryann"},"content":"    private String getFormattedAddress() {","lastModifiedDate":"2021-10-19"},{"lineNumber":294,"author":{"gitId":"EricBryann"},"content":"        return formattedAttribute(residentialAddress, LENGTH_ADDRESS_COLUMN);","lastModifiedDate":"2021-10-19"},{"lineNumber":295,"author":{"gitId":"EricBryann"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":296,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":297,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":298,"author":{"gitId":"CrimsonTitan79"},"content":"    /**","lastModifiedDate":"2021-10-26"},{"lineNumber":299,"author":{"gitId":"CrimsonTitan79"},"content":"     * Return \"X\" if parameter \u003d\u003d null || parameter.isBlank(), otherwise return parameter itself","lastModifiedDate":"2021-10-26"},{"lineNumber":300,"author":{"gitId":"CrimsonTitan79"},"content":"     *","lastModifiedDate":"2021-10-26"},{"lineNumber":301,"author":{"gitId":"CrimsonTitan79"},"content":"     * @param parameter an attribute of a person","lastModifiedDate":"2021-10-26"},{"lineNumber":302,"author":{"gitId":"CrimsonTitan79"},"content":"     * @return \"X\" if parameter \u003d\u003d null || parameter.isBlank(), otherwise return parameter itself","lastModifiedDate":"2021-10-26"},{"lineNumber":303,"author":{"gitId":"CrimsonTitan79"},"content":"     */","lastModifiedDate":"2021-10-26"},{"lineNumber":304,"author":{"gitId":"CrimsonTitan79"},"content":"    protected String setAsStorageParameterOrNull(String parameter) {","lastModifiedDate":"2021-10-26"},{"lineNumber":305,"author":{"gitId":"CrimsonTitan79"},"content":"        return (parameter \u003d\u003d null || parameter.isBlank()) ? \"X\" : parameter;","lastModifiedDate":"2021-10-26"},{"lineNumber":306,"author":{"gitId":"CrimsonTitan79"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":307,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":308,"author":{"gitId":"CrimsonTitan79"},"content":"    /**","lastModifiedDate":"2021-10-29"},{"lineNumber":309,"author":{"gitId":"EricBryann"},"content":"     * Return \"H\" if person is hidden, \"S\" otherwise.","lastModifiedDate":"2021-11-02"},{"lineNumber":310,"author":{"gitId":"CrimsonTitan79"},"content":"     *","lastModifiedDate":"2021-10-29"},{"lineNumber":311,"author":{"gitId":"EricBryann"},"content":"     * @param isHidden whether person is hidden or not","lastModifiedDate":"2021-11-02"},{"lineNumber":312,"author":{"gitId":"EricBryann"},"content":"     * @return \"H\" is person is hidden, \"S\" otherwise","lastModifiedDate":"2021-11-02"},{"lineNumber":313,"author":{"gitId":"CrimsonTitan79"},"content":"     */","lastModifiedDate":"2021-10-29"},{"lineNumber":314,"author":{"gitId":"EricBryann"},"content":"    protected String getHideStatusStorageString(boolean isHidden) {","lastModifiedDate":"2021-11-02"},{"lineNumber":315,"author":{"gitId":"EricBryann"},"content":"        return (isHidden) ? \"H\" : \"S\";","lastModifiedDate":"2021-11-02"},{"lineNumber":316,"author":{"gitId":"CrimsonTitan79"},"content":"    }","lastModifiedDate":"2021-10-29"},{"lineNumber":317,"author":{"gitId":"justinfidelis"},"content":"}","lastModifiedDate":"2021-09-30"}],"authorContributionMap":{"justinfidelis":114,"CrimsonTitan79":40,"jushg":5,"Kureans":16,"EricBryann":142}},{"path":"src/main/java/medbot/person/PersonType.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"justinfidelis"},"content":"package medbot.person;","lastModifiedDate":"2021-09-30"},{"lineNumber":2,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-09-30"},{"lineNumber":3,"author":{"gitId":"justinfidelis"},"content":"public enum PersonType {","lastModifiedDate":"2021-09-30"},{"lineNumber":4,"author":{"gitId":"Kureans"},"content":"    PATIENT, STAFF","lastModifiedDate":"2021-10-16"},{"lineNumber":5,"author":{"gitId":"justinfidelis"},"content":"}","lastModifiedDate":"2021-09-30"}],"authorContributionMap":{"justinfidelis":4,"Kureans":1}},{"path":"src/main/java/medbot/person/Staff.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Kureans"},"content":"package medbot.person;","lastModifiedDate":"2021-10-16"},{"lineNumber":2,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":3,"author":{"gitId":"Kureans"},"content":"public class Staff extends Person {","lastModifiedDate":"2021-10-16"},{"lineNumber":4,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":5,"author":{"gitId":"Kureans"},"content":"    public Staff() {","lastModifiedDate":"2021-10-16"},{"lineNumber":6,"author":{"gitId":"Kureans"},"content":"        super.personType \u003d PersonType.STAFF;","lastModifiedDate":"2021-10-16"},{"lineNumber":7,"author":{"gitId":"Kureans"},"content":"    }","lastModifiedDate":"2021-10-16"},{"lineNumber":8,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":9,"author":{"gitId":"jushg"},"content":"    @Override","lastModifiedDate":"2021-10-19"},{"lineNumber":10,"author":{"gitId":"Kureans"},"content":"    public String toString() {","lastModifiedDate":"2021-10-16"},{"lineNumber":11,"author":{"gitId":"justinfidelis"},"content":"        return \"Staff ID: \" + getId() + \" \" + super.toString();","lastModifiedDate":"2021-10-27"},{"lineNumber":12,"author":{"gitId":"Kureans"},"content":"    }","lastModifiedDate":"2021-10-16"},{"lineNumber":13,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":14,"author":{"gitId":"Kureans"},"content":"}","lastModifiedDate":"2021-10-16"}],"authorContributionMap":{"justinfidelis":1,"CrimsonTitan79":1,"jushg":1,"Kureans":11}},{"path":"src/main/java/medbot/storage/AppointmentStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"CrimsonTitan79"},"content":"package medbot.storage;","lastModifiedDate":"2021-10-25"},{"lineNumber":2,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":3,"author":{"gitId":"CrimsonTitan79"},"content":"import medbot.Appointment;","lastModifiedDate":"2021-10-25"},{"lineNumber":4,"author":{"gitId":"CrimsonTitan79"},"content":"import medbot.exceptions.MedBotException;","lastModifiedDate":"2021-10-25"},{"lineNumber":5,"author":{"gitId":"CrimsonTitan79"},"content":"import medbot.list.ListItem;","lastModifiedDate":"2021-10-25"},{"lineNumber":6,"author":{"gitId":"CrimsonTitan79"},"content":"import medbot.list.ListItemType;","lastModifiedDate":"2021-10-25"},{"lineNumber":7,"author":{"gitId":"CrimsonTitan79"},"content":"import medbot.utilities.Pair;","lastModifiedDate":"2021-10-25"},{"lineNumber":8,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":9,"author":{"gitId":"CrimsonTitan79"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-25"},{"lineNumber":10,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":11,"author":{"gitId":"CrimsonTitan79"},"content":"import static medbot.parser.ParserUtils.updateAppointmentInformation;","lastModifiedDate":"2021-10-25"},{"lineNumber":12,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":13,"author":{"gitId":"CrimsonTitan79"},"content":"public class AppointmentStorage extends Storage {","lastModifiedDate":"2021-10-25"},{"lineNumber":14,"author":{"gitId":"CrimsonTitan79"},"content":"    private static final String APPOINTMENT_DATA_PATH \u003d \"MedBotData/appointment.txt\";","lastModifiedDate":"2021-10-26"},{"lineNumber":15,"author":{"gitId":"CrimsonTitan79"},"content":"    private static final String[] parameterPrefixes \u003d {\"d/\", \"p/\", \"s/\"};","lastModifiedDate":"2021-10-26"},{"lineNumber":16,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":17,"author":{"gitId":"CrimsonTitan79"},"content":"    /**","lastModifiedDate":"2021-11-03"},{"lineNumber":18,"author":{"gitId":"CrimsonTitan79"},"content":"     * Instantiate storage at the default path, APPOINTMENT_DATA_PATH.","lastModifiedDate":"2021-11-03"},{"lineNumber":19,"author":{"gitId":"CrimsonTitan79"},"content":"     *","lastModifiedDate":"2021-11-03"},{"lineNumber":20,"author":{"gitId":"CrimsonTitan79"},"content":"     * @throws MedBotException if unable to create/detect storage file","lastModifiedDate":"2021-11-03"},{"lineNumber":21,"author":{"gitId":"CrimsonTitan79"},"content":"     */","lastModifiedDate":"2021-11-03"},{"lineNumber":22,"author":{"gitId":"CrimsonTitan79"},"content":"    public AppointmentStorage() throws MedBotException {","lastModifiedDate":"2021-10-25"},{"lineNumber":23,"author":{"gitId":"CrimsonTitan79"},"content":"        super(APPOINTMENT_DATA_PATH);","lastModifiedDate":"2021-10-25"},{"lineNumber":24,"author":{"gitId":"CrimsonTitan79"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":25,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":26,"author":{"gitId":"CrimsonTitan79"},"content":"    /**","lastModifiedDate":"2021-11-03"},{"lineNumber":27,"author":{"gitId":"CrimsonTitan79"},"content":"     * For testing purposes, using a custom data path.","lastModifiedDate":"2021-11-03"},{"lineNumber":28,"author":{"gitId":"CrimsonTitan79"},"content":"     *","lastModifiedDate":"2021-11-03"},{"lineNumber":29,"author":{"gitId":"CrimsonTitan79"},"content":"     * @param testDataPath custom data path","lastModifiedDate":"2021-11-03"},{"lineNumber":30,"author":{"gitId":"CrimsonTitan79"},"content":"     * @throws MedBotException if unable to create/detect storage file","lastModifiedDate":"2021-11-03"},{"lineNumber":31,"author":{"gitId":"CrimsonTitan79"},"content":"     */","lastModifiedDate":"2021-11-03"},{"lineNumber":32,"author":{"gitId":"CrimsonTitan79"},"content":"    protected AppointmentStorage(String testDataPath) throws MedBotException {","lastModifiedDate":"2021-11-03"},{"lineNumber":33,"author":{"gitId":"CrimsonTitan79"},"content":"        super(testDataPath);","lastModifiedDate":"2021-10-27"},{"lineNumber":34,"author":{"gitId":"CrimsonTitan79"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":35,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":36,"author":{"gitId":"CrimsonTitan79"},"content":"    /**","lastModifiedDate":"2021-10-26"},{"lineNumber":37,"author":{"gitId":"CrimsonTitan79"},"content":"     * Instantiates a ListItem interfaced object.","lastModifiedDate":"2021-10-27"},{"lineNumber":38,"author":{"gitId":"CrimsonTitan79"},"content":"     *","lastModifiedDate":"2021-10-26"},{"lineNumber":39,"author":{"gitId":"CrimsonTitan79"},"content":"     * @param storageLine  a line in storage file","lastModifiedDate":"2021-10-26"},{"lineNumber":40,"author":{"gitId":"CrimsonTitan79"},"content":"     * @param listItemType enum of ListItem type","lastModifiedDate":"2021-10-26"},{"lineNumber":41,"author":{"gitId":"CrimsonTitan79"},"content":"     * @return a ListItem interfaced object","lastModifiedDate":"2021-10-27"},{"lineNumber":42,"author":{"gitId":"CrimsonTitan79"},"content":"     * @throws MedBotException if fail to instantiate a ListItem object","lastModifiedDate":"2021-10-26"},{"lineNumber":43,"author":{"gitId":"CrimsonTitan79"},"content":"     */","lastModifiedDate":"2021-10-26"},{"lineNumber":44,"author":{"gitId":"CrimsonTitan79"},"content":"    @Override","lastModifiedDate":"2021-10-25"},{"lineNumber":45,"author":{"gitId":"CrimsonTitan79"},"content":"    protected ListItem createListItem(String storageLine, ListItemType listItemType) throws MedBotException {","lastModifiedDate":"2021-10-25"},{"lineNumber":46,"author":{"gitId":"CrimsonTitan79"},"content":"        Pair\u003cInteger, ArrayList\u003cString\u003e\u003e appointmentDetails \u003d parseStorageLine(storageLine);","lastModifiedDate":"2021-10-31"},{"lineNumber":47,"author":{"gitId":"CrimsonTitan79"},"content":"        if (appointmentDetails \u003d\u003d null) {","lastModifiedDate":"2021-10-26"},{"lineNumber":48,"author":{"gitId":"CrimsonTitan79"},"content":"            return null;","lastModifiedDate":"2021-10-25"},{"lineNumber":49,"author":{"gitId":"CrimsonTitan79"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":50,"author":{"gitId":"CrimsonTitan79"},"content":"        int appointmentId \u003d appointmentDetails.first;","lastModifiedDate":"2021-10-26"},{"lineNumber":51,"author":{"gitId":"CrimsonTitan79"},"content":"        ArrayList\u003cString\u003e prefixPlusAppointmentParameters \u003d appointmentDetails.second;","lastModifiedDate":"2021-10-26"},{"lineNumber":52,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":53,"author":{"gitId":"CrimsonTitan79"},"content":"        Appointment appointment \u003d new Appointment();","lastModifiedDate":"2021-10-25"},{"lineNumber":54,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":55,"author":{"gitId":"justinfidelis"},"content":"        appointment.setId(appointmentId);","lastModifiedDate":"2021-10-27"},{"lineNumber":56,"author":{"gitId":"CrimsonTitan79"},"content":"        for (String prefixPlusAppointmentParameter : prefixPlusAppointmentParameters) {","lastModifiedDate":"2021-10-25"},{"lineNumber":57,"author":{"gitId":"CrimsonTitan79"},"content":"            updateAppointmentInformation(appointment, prefixPlusAppointmentParameter);","lastModifiedDate":"2021-10-25"},{"lineNumber":58,"author":{"gitId":"CrimsonTitan79"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":59,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":60,"author":{"gitId":"CrimsonTitan79"},"content":"        return appointment;","lastModifiedDate":"2021-10-25"},{"lineNumber":61,"author":{"gitId":"CrimsonTitan79"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":62,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":63,"author":{"gitId":"CrimsonTitan79"},"content":"    /**","lastModifiedDate":"2021-10-31"},{"lineNumber":64,"author":{"gitId":"CrimsonTitan79"},"content":"     * Parse a line from the storage file by splitting its constituent parts.","lastModifiedDate":"2021-10-31"},{"lineNumber":65,"author":{"gitId":"CrimsonTitan79"},"content":"     *","lastModifiedDate":"2021-10-31"},{"lineNumber":66,"author":{"gitId":"CrimsonTitan79"},"content":"     * @param storageLine a line from the storage file","lastModifiedDate":"2021-10-31"},{"lineNumber":67,"author":{"gitId":"CrimsonTitan79"},"content":"     * @return listItem details, consisting of person ID and other parameters","lastModifiedDate":"2021-10-31"},{"lineNumber":68,"author":{"gitId":"CrimsonTitan79"},"content":"     */","lastModifiedDate":"2021-10-31"},{"lineNumber":69,"author":{"gitId":"CrimsonTitan79"},"content":"    protected Pair\u003cInteger, ArrayList\u003cString\u003e\u003e parseStorageLine(String storageLine) {","lastModifiedDate":"2021-10-31"},{"lineNumber":70,"author":{"gitId":"CrimsonTitan79"},"content":"        if (storageLine.isBlank()) {","lastModifiedDate":"2021-10-31"},{"lineNumber":71,"author":{"gitId":"CrimsonTitan79"},"content":"            return null;","lastModifiedDate":"2021-10-31"},{"lineNumber":72,"author":{"gitId":"CrimsonTitan79"},"content":"        }","lastModifiedDate":"2021-10-31"},{"lineNumber":73,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":74,"author":{"gitId":"CrimsonTitan79"},"content":"        String[] listItemParameters \u003d splitStorageLine(storageLine);","lastModifiedDate":"2021-10-31"},{"lineNumber":75,"author":{"gitId":"CrimsonTitan79"},"content":"        ArrayList\u003cString\u003e prefixPlusListItemParameters \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-31"},{"lineNumber":76,"author":{"gitId":"CrimsonTitan79"},"content":"        Integer listItemId \u003d Integer.parseInt(listItemParameters[0]);","lastModifiedDate":"2021-10-31"},{"lineNumber":77,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":78,"author":{"gitId":"CrimsonTitan79"},"content":"        for (int i \u003d 0; i \u003c parameterPrefixes.length; i++) {","lastModifiedDate":"2021-10-31"},{"lineNumber":79,"author":{"gitId":"CrimsonTitan79"},"content":"            if (isStorageParameterNull(listItemParameters[i + 1])) {","lastModifiedDate":"2021-10-31"},{"lineNumber":80,"author":{"gitId":"CrimsonTitan79"},"content":"                continue;","lastModifiedDate":"2021-10-31"},{"lineNumber":81,"author":{"gitId":"CrimsonTitan79"},"content":"            }","lastModifiedDate":"2021-10-31"},{"lineNumber":82,"author":{"gitId":"CrimsonTitan79"},"content":"            String prefixPlusListItemParameter \u003d parameterPrefixes[i] + listItemParameters[i + 1];","lastModifiedDate":"2021-10-31"},{"lineNumber":83,"author":{"gitId":"CrimsonTitan79"},"content":"            prefixPlusListItemParameters.add(prefixPlusListItemParameter);","lastModifiedDate":"2021-10-31"},{"lineNumber":84,"author":{"gitId":"CrimsonTitan79"},"content":"        }","lastModifiedDate":"2021-10-31"},{"lineNumber":85,"author":{"gitId":"CrimsonTitan79"},"content":"        assert listItemParameters.length \u003d\u003d parameterPrefixes.length + 1;","lastModifiedDate":"2021-10-31"},{"lineNumber":86,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":87,"author":{"gitId":"CrimsonTitan79"},"content":"        return new Pair\u003c\u003e(listItemId, prefixPlusListItemParameters);","lastModifiedDate":"2021-10-31"},{"lineNumber":88,"author":{"gitId":"CrimsonTitan79"},"content":"    }","lastModifiedDate":"2021-10-31"},{"lineNumber":89,"author":{"gitId":"CrimsonTitan79"},"content":"}","lastModifiedDate":"2021-10-25"}],"authorContributionMap":{"justinfidelis":1,"CrimsonTitan79":88}},{"path":"src/main/java/medbot/storage/PatientStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"CrimsonTitan79"},"content":"package medbot.storage;","lastModifiedDate":"2021-10-25"},{"lineNumber":2,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":3,"author":{"gitId":"CrimsonTitan79"},"content":"import medbot.exceptions.MedBotException;","lastModifiedDate":"2021-10-25"},{"lineNumber":4,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":5,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":6,"author":{"gitId":"CrimsonTitan79"},"content":"public class PatientStorage extends PersonStorage {","lastModifiedDate":"2021-10-25"},{"lineNumber":7,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":8,"author":{"gitId":"CrimsonTitan79"},"content":"    private static final String PATIENT_DATA_PATH \u003d \"MedBotData/patient.txt\";","lastModifiedDate":"2021-10-26"},{"lineNumber":9,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":10,"author":{"gitId":"CrimsonTitan79"},"content":"    /**","lastModifiedDate":"2021-11-03"},{"lineNumber":11,"author":{"gitId":"CrimsonTitan79"},"content":"     * Instantiate storage at the default path, PATIENT_DATA_PATH.","lastModifiedDate":"2021-11-03"},{"lineNumber":12,"author":{"gitId":"CrimsonTitan79"},"content":"     *","lastModifiedDate":"2021-11-03"},{"lineNumber":13,"author":{"gitId":"CrimsonTitan79"},"content":"     * @throws MedBotException if unable to create/detect storage file","lastModifiedDate":"2021-11-03"},{"lineNumber":14,"author":{"gitId":"CrimsonTitan79"},"content":"     */","lastModifiedDate":"2021-11-03"},{"lineNumber":15,"author":{"gitId":"CrimsonTitan79"},"content":"    public PatientStorage() throws MedBotException {","lastModifiedDate":"2021-10-25"},{"lineNumber":16,"author":{"gitId":"CrimsonTitan79"},"content":"        super(PATIENT_DATA_PATH);","lastModifiedDate":"2021-10-25"},{"lineNumber":17,"author":{"gitId":"CrimsonTitan79"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":18,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":19,"author":{"gitId":"CrimsonTitan79"},"content":"    /**","lastModifiedDate":"2021-11-03"},{"lineNumber":20,"author":{"gitId":"CrimsonTitan79"},"content":"     * For testing purposes, using a custom data path.","lastModifiedDate":"2021-11-03"},{"lineNumber":21,"author":{"gitId":"CrimsonTitan79"},"content":"     *","lastModifiedDate":"2021-11-03"},{"lineNumber":22,"author":{"gitId":"CrimsonTitan79"},"content":"     * @param testDataPath custom data path","lastModifiedDate":"2021-11-03"},{"lineNumber":23,"author":{"gitId":"CrimsonTitan79"},"content":"     * @throws MedBotException if unable to create/detect storage file","lastModifiedDate":"2021-11-03"},{"lineNumber":24,"author":{"gitId":"CrimsonTitan79"},"content":"     */","lastModifiedDate":"2021-11-03"},{"lineNumber":25,"author":{"gitId":"CrimsonTitan79"},"content":"    protected PatientStorage(String testDataPath) throws MedBotException {","lastModifiedDate":"2021-11-03"},{"lineNumber":26,"author":{"gitId":"CrimsonTitan79"},"content":"        super(testDataPath);","lastModifiedDate":"2021-10-27"},{"lineNumber":27,"author":{"gitId":"CrimsonTitan79"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":28,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":29,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":30,"author":{"gitId":"CrimsonTitan79"},"content":"}","lastModifiedDate":"2021-10-25"}],"authorContributionMap":{"CrimsonTitan79":30}},{"path":"src/main/java/medbot/storage/PersonStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"CrimsonTitan79"},"content":"package medbot.storage;","lastModifiedDate":"2021-10-25"},{"lineNumber":2,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":3,"author":{"gitId":"CrimsonTitan79"},"content":"import medbot.exceptions.MedBotException;","lastModifiedDate":"2021-10-25"},{"lineNumber":4,"author":{"gitId":"CrimsonTitan79"},"content":"import medbot.list.ListItem;","lastModifiedDate":"2021-10-25"},{"lineNumber":5,"author":{"gitId":"CrimsonTitan79"},"content":"import medbot.list.ListItemType;","lastModifiedDate":"2021-10-25"},{"lineNumber":6,"author":{"gitId":"CrimsonTitan79"},"content":"import medbot.person.Patient;","lastModifiedDate":"2021-10-25"},{"lineNumber":7,"author":{"gitId":"CrimsonTitan79"},"content":"import medbot.person.Person;","lastModifiedDate":"2021-10-25"},{"lineNumber":8,"author":{"gitId":"CrimsonTitan79"},"content":"import medbot.person.Staff;","lastModifiedDate":"2021-10-25"},{"lineNumber":9,"author":{"gitId":"justinfidelis"},"content":"import medbot.utilities.Triple;","lastModifiedDate":"2021-11-02"},{"lineNumber":10,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":11,"author":{"gitId":"CrimsonTitan79"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-25"},{"lineNumber":12,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":13,"author":{"gitId":"CrimsonTitan79"},"content":"import static medbot.parser.ParserUtils.updatePersonalInformation;","lastModifiedDate":"2021-10-25"},{"lineNumber":14,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":15,"author":{"gitId":"CrimsonTitan79"},"content":"public abstract class PersonStorage extends Storage {","lastModifiedDate":"2021-10-25"},{"lineNumber":16,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":17,"author":{"gitId":"CrimsonTitan79"},"content":"    private static final String[] parameterPrefixes \u003d {\"i/\", \"n/\", \"p/\", \"e/\", \"a/\"};","lastModifiedDate":"2021-10-26"},{"lineNumber":18,"author":{"gitId":"CrimsonTitan79"},"content":"    private static final String STORAGE_SHOW_PARAMETER \u003d \"S\";","lastModifiedDate":"2021-11-07"},{"lineNumber":19,"author":{"gitId":"CrimsonTitan79"},"content":"    private static final String STORAGE_HIDE_PARAMETER \u003d \"H\";","lastModifiedDate":"2021-11-07"},{"lineNumber":20,"author":{"gitId":"CrimsonTitan79"},"content":"    private static final String ERROR_STORAGE_HIDE_PARAMETER \u003d \"Invalid storage hide parameter\";","lastModifiedDate":"2021-11-07"},{"lineNumber":21,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":22,"author":{"gitId":"CrimsonTitan79"},"content":"    /**","lastModifiedDate":"2021-10-25"},{"lineNumber":23,"author":{"gitId":"CrimsonTitan79"},"content":"     * Generic constructor for PatientStorage and StaffStorage.","lastModifiedDate":"2021-10-25"},{"lineNumber":24,"author":{"gitId":"CrimsonTitan79"},"content":"     *","lastModifiedDate":"2021-10-25"},{"lineNumber":25,"author":{"gitId":"CrimsonTitan79"},"content":"     * @param dataPath is the path of the storage file","lastModifiedDate":"2021-10-25"},{"lineNumber":26,"author":{"gitId":"CrimsonTitan79"},"content":"     * @throws MedBotException if storage file cannot be created and does not exist","lastModifiedDate":"2021-10-25"},{"lineNumber":27,"author":{"gitId":"CrimsonTitan79"},"content":"     */","lastModifiedDate":"2021-10-25"},{"lineNumber":28,"author":{"gitId":"CrimsonTitan79"},"content":"    public PersonStorage(String dataPath) throws MedBotException {","lastModifiedDate":"2021-10-25"},{"lineNumber":29,"author":{"gitId":"CrimsonTitan79"},"content":"        super(dataPath);","lastModifiedDate":"2021-10-25"},{"lineNumber":30,"author":{"gitId":"CrimsonTitan79"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":31,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":32,"author":{"gitId":"CrimsonTitan79"},"content":"    /**","lastModifiedDate":"2021-10-25"},{"lineNumber":33,"author":{"gitId":"CrimsonTitan79"},"content":"     * Create a ListItem object from the given parameters/details.","lastModifiedDate":"2021-10-25"},{"lineNumber":34,"author":{"gitId":"CrimsonTitan79"},"content":"     *","lastModifiedDate":"2021-10-25"},{"lineNumber":35,"author":{"gitId":"CrimsonTitan79"},"content":"     * @param storageLine  a line in storage file","lastModifiedDate":"2021-10-25"},{"lineNumber":36,"author":{"gitId":"CrimsonTitan79"},"content":"     * @param listItemType enum of ListItem type","lastModifiedDate":"2021-10-25"},{"lineNumber":37,"author":{"gitId":"CrimsonTitan79"},"content":"     * @return a ListItem object with the given parameters. return null if patientDetails \u003d\u003d null","lastModifiedDate":"2021-10-25"},{"lineNumber":38,"author":{"gitId":"CrimsonTitan79"},"content":"     * @throws MedBotException if fail to create the object","lastModifiedDate":"2021-10-25"},{"lineNumber":39,"author":{"gitId":"CrimsonTitan79"},"content":"     */","lastModifiedDate":"2021-10-25"},{"lineNumber":40,"author":{"gitId":"CrimsonTitan79"},"content":"    @Override","lastModifiedDate":"2021-10-25"},{"lineNumber":41,"author":{"gitId":"CrimsonTitan79"},"content":"    protected ListItem createListItem(String storageLine, ListItemType listItemType) throws MedBotException {","lastModifiedDate":"2021-10-25"},{"lineNumber":42,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":43,"author":{"gitId":"justinfidelis"},"content":"        Triple\u003cInteger, Boolean, ArrayList\u003cString\u003e\u003e personDetails \u003d parseStorageLine(storageLine);","lastModifiedDate":"2021-11-02"},{"lineNumber":44,"author":{"gitId":"CrimsonTitan79"},"content":"        if (personDetails \u003d\u003d null) {","lastModifiedDate":"2021-10-25"},{"lineNumber":45,"author":{"gitId":"CrimsonTitan79"},"content":"            return null;","lastModifiedDate":"2021-10-25"},{"lineNumber":46,"author":{"gitId":"CrimsonTitan79"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":47,"author":{"gitId":"CrimsonTitan79"},"content":"        Person person;","lastModifiedDate":"2021-10-25"},{"lineNumber":48,"author":{"gitId":"CrimsonTitan79"},"content":"        switch (listItemType) {","lastModifiedDate":"2021-10-27"},{"lineNumber":49,"author":{"gitId":"CrimsonTitan79"},"content":"        case PATIENT:","lastModifiedDate":"2021-10-27"},{"lineNumber":50,"author":{"gitId":"CrimsonTitan79"},"content":"            person \u003d new Patient();","lastModifiedDate":"2021-10-25"},{"lineNumber":51,"author":{"gitId":"CrimsonTitan79"},"content":"            break;","lastModifiedDate":"2021-10-27"},{"lineNumber":52,"author":{"gitId":"CrimsonTitan79"},"content":"        case STAFF:","lastModifiedDate":"2021-10-27"},{"lineNumber":53,"author":{"gitId":"CrimsonTitan79"},"content":"            person \u003d new Staff();","lastModifiedDate":"2021-10-25"},{"lineNumber":54,"author":{"gitId":"CrimsonTitan79"},"content":"            break;","lastModifiedDate":"2021-10-27"},{"lineNumber":55,"author":{"gitId":"CrimsonTitan79"},"content":"        default:","lastModifiedDate":"2021-10-27"},{"lineNumber":56,"author":{"gitId":"CrimsonTitan79"},"content":"            throw new MedBotException(\"Invalid listItemType\");","lastModifiedDate":"2021-10-27"},{"lineNumber":57,"author":{"gitId":"CrimsonTitan79"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":58,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":59,"author":{"gitId":"CrimsonTitan79"},"content":"        int personId \u003d personDetails.first;","lastModifiedDate":"2021-10-31"},{"lineNumber":60,"author":{"gitId":"EricBryann"},"content":"        boolean isHidden \u003d personDetails.second;","lastModifiedDate":"2021-11-02"},{"lineNumber":61,"author":{"gitId":"CrimsonTitan79"},"content":"        ArrayList\u003cString\u003e prefixPlusPersonParameters \u003d personDetails.third;","lastModifiedDate":"2021-10-31"},{"lineNumber":62,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":63,"author":{"gitId":"justinfidelis"},"content":"        person.setId(personId);","lastModifiedDate":"2021-10-27"},{"lineNumber":64,"author":{"gitId":"EricBryann"},"content":"        if (isHidden) {","lastModifiedDate":"2021-11-02"},{"lineNumber":65,"author":{"gitId":"EricBryann"},"content":"            person.hide();","lastModifiedDate":"2021-11-02"},{"lineNumber":66,"author":{"gitId":"CrimsonTitan79"},"content":"        }","lastModifiedDate":"2021-10-31"},{"lineNumber":67,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":68,"author":{"gitId":"CrimsonTitan79"},"content":"        for (String prefixPlusPersonParameter : prefixPlusPersonParameters) {","lastModifiedDate":"2021-10-25"},{"lineNumber":69,"author":{"gitId":"CrimsonTitan79"},"content":"            //updatePersonalInformation does error-checking of person details and updates patient info","lastModifiedDate":"2021-10-25"},{"lineNumber":70,"author":{"gitId":"CrimsonTitan79"},"content":"            updatePersonalInformation(person, prefixPlusPersonParameter);","lastModifiedDate":"2021-10-25"},{"lineNumber":71,"author":{"gitId":"CrimsonTitan79"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":72,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":73,"author":{"gitId":"CrimsonTitan79"},"content":"        return person;","lastModifiedDate":"2021-10-25"},{"lineNumber":74,"author":{"gitId":"CrimsonTitan79"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":75,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":76,"author":{"gitId":"CrimsonTitan79"},"content":"    /**","lastModifiedDate":"2021-10-31"},{"lineNumber":77,"author":{"gitId":"CrimsonTitan79"},"content":"     * Parse a line from the storage file by splitting its constituent parts.","lastModifiedDate":"2021-10-31"},{"lineNumber":78,"author":{"gitId":"CrimsonTitan79"},"content":"     *","lastModifiedDate":"2021-10-31"},{"lineNumber":79,"author":{"gitId":"CrimsonTitan79"},"content":"     * @param storageLine a line from the storage file","lastModifiedDate":"2021-10-31"},{"lineNumber":80,"author":{"gitId":"CrimsonTitan79"},"content":"     * @return listItem details, consisting of person ID and other parameters","lastModifiedDate":"2021-10-31"},{"lineNumber":81,"author":{"gitId":"CrimsonTitan79"},"content":"     */","lastModifiedDate":"2021-10-31"},{"lineNumber":82,"author":{"gitId":"justinfidelis"},"content":"    protected Triple\u003cInteger, Boolean, ArrayList\u003cString\u003e\u003e parseStorageLine(String storageLine)","lastModifiedDate":"2021-11-02"},{"lineNumber":83,"author":{"gitId":"CrimsonTitan79"},"content":"            throws MedBotException {","lastModifiedDate":"2021-10-31"},{"lineNumber":84,"author":{"gitId":"CrimsonTitan79"},"content":"        if (storageLine.isBlank()) {","lastModifiedDate":"2021-10-31"},{"lineNumber":85,"author":{"gitId":"CrimsonTitan79"},"content":"            return null;","lastModifiedDate":"2021-10-31"},{"lineNumber":86,"author":{"gitId":"CrimsonTitan79"},"content":"        }","lastModifiedDate":"2021-10-31"},{"lineNumber":87,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":88,"author":{"gitId":"CrimsonTitan79"},"content":"        String[] listItemParameters \u003d splitStorageLine(storageLine);","lastModifiedDate":"2021-10-31"},{"lineNumber":89,"author":{"gitId":"CrimsonTitan79"},"content":"        ArrayList\u003cString\u003e prefixPlusListItemParameters \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-31"},{"lineNumber":90,"author":{"gitId":"CrimsonTitan79"},"content":"        Integer listItemId \u003d Integer.parseInt(listItemParameters[0]);","lastModifiedDate":"2021-10-31"},{"lineNumber":91,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":92,"author":{"gitId":"CrimsonTitan79"},"content":"        for (int i \u003d 0; i \u003c parameterPrefixes.length; i++) {","lastModifiedDate":"2021-10-31"},{"lineNumber":93,"author":{"gitId":"CrimsonTitan79"},"content":"            if (isStorageParameterNull(listItemParameters[i + 1])) {","lastModifiedDate":"2021-10-31"},{"lineNumber":94,"author":{"gitId":"CrimsonTitan79"},"content":"                continue;","lastModifiedDate":"2021-10-31"},{"lineNumber":95,"author":{"gitId":"CrimsonTitan79"},"content":"            }","lastModifiedDate":"2021-10-31"},{"lineNumber":96,"author":{"gitId":"CrimsonTitan79"},"content":"            String prefixPlusListItemParameter \u003d parameterPrefixes[i] + listItemParameters[i + 1];","lastModifiedDate":"2021-10-31"},{"lineNumber":97,"author":{"gitId":"CrimsonTitan79"},"content":"            prefixPlusListItemParameters.add(prefixPlusListItemParameter);","lastModifiedDate":"2021-10-31"},{"lineNumber":98,"author":{"gitId":"CrimsonTitan79"},"content":"        }","lastModifiedDate":"2021-10-31"},{"lineNumber":99,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":100,"author":{"gitId":"CrimsonTitan79"},"content":"        int listItemParametersLastIndex \u003d listItemParameters.length - 1;","lastModifiedDate":"2021-10-31"},{"lineNumber":101,"author":{"gitId":"EricBryann"},"content":"        String isHiddenParameter \u003d listItemParameters[listItemParametersLastIndex];","lastModifiedDate":"2021-11-02"},{"lineNumber":102,"author":{"gitId":"EricBryann"},"content":"        boolean isHidden \u003d convertStorageHideParameterToBoolean(isHiddenParameter);","lastModifiedDate":"2021-11-02"},{"lineNumber":103,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":104,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":105,"author":{"gitId":"EricBryann"},"content":"        return new Triple\u003c\u003e(listItemId, isHidden, prefixPlusListItemParameters);","lastModifiedDate":"2021-11-02"},{"lineNumber":106,"author":{"gitId":"CrimsonTitan79"},"content":"    }","lastModifiedDate":"2021-10-31"},{"lineNumber":107,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":108,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":109,"author":{"gitId":"CrimsonTitan79"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":110,"author":{"gitId":"CrimsonTitan79"},"content":"     * Convert the Hide parameter extracted from a storage line to boolean.","lastModifiedDate":"2021-11-07"},{"lineNumber":111,"author":{"gitId":"CrimsonTitan79"},"content":"     * @param storageHideParameter \"H\" for hide, \"S\" for show","lastModifiedDate":"2021-11-07"},{"lineNumber":112,"author":{"gitId":"CrimsonTitan79"},"content":"     * @return True if storageHideParameter \u003d\u003d \"H\", false if storageHideParameter \u003d\u003d \"S\"","lastModifiedDate":"2021-11-07"},{"lineNumber":113,"author":{"gitId":"CrimsonTitan79"},"content":"     * @throws MedBotException if storageHideParameter is neither \"H\" nor \"S\"","lastModifiedDate":"2021-11-07"},{"lineNumber":114,"author":{"gitId":"CrimsonTitan79"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":115,"author":{"gitId":"EricBryann"},"content":"    protected static boolean convertStorageHideParameterToBoolean(String storageHideParameter)","lastModifiedDate":"2021-11-02"},{"lineNumber":116,"author":{"gitId":"CrimsonTitan79"},"content":"            throws MedBotException {","lastModifiedDate":"2021-10-31"},{"lineNumber":117,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":118,"author":{"gitId":"CrimsonTitan79"},"content":"        switch (storageHideParameter) {","lastModifiedDate":"2021-11-07"},{"lineNumber":119,"author":{"gitId":"CrimsonTitan79"},"content":"        case (STORAGE_SHOW_PARAMETER):","lastModifiedDate":"2021-11-07"},{"lineNumber":120,"author":{"gitId":"CrimsonTitan79"},"content":"            return false;","lastModifiedDate":"2021-10-31"},{"lineNumber":121,"author":{"gitId":"CrimsonTitan79"},"content":"        case (STORAGE_HIDE_PARAMETER):","lastModifiedDate":"2021-11-07"},{"lineNumber":122,"author":{"gitId":"CrimsonTitan79"},"content":"            return true;","lastModifiedDate":"2021-10-31"},{"lineNumber":123,"author":{"gitId":"CrimsonTitan79"},"content":"        default:","lastModifiedDate":"2021-11-07"},{"lineNumber":124,"author":{"gitId":"CrimsonTitan79"},"content":"            throw new MedBotException(ERROR_STORAGE_HIDE_PARAMETER);","lastModifiedDate":"2021-11-07"},{"lineNumber":125,"author":{"gitId":"CrimsonTitan79"},"content":"        }","lastModifiedDate":"2021-10-31"},{"lineNumber":126,"author":{"gitId":"CrimsonTitan79"},"content":"    }","lastModifiedDate":"2021-10-31"},{"lineNumber":127,"author":{"gitId":"CrimsonTitan79"},"content":"}","lastModifiedDate":"2021-10-25"}],"authorContributionMap":{"justinfidelis":4,"CrimsonTitan79":115,"EricBryann":8}},{"path":"src/main/java/medbot/storage/StaffStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"CrimsonTitan79"},"content":"package medbot.storage;","lastModifiedDate":"2021-10-25"},{"lineNumber":2,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":3,"author":{"gitId":"CrimsonTitan79"},"content":"import medbot.exceptions.MedBotException;","lastModifiedDate":"2021-10-25"},{"lineNumber":4,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":5,"author":{"gitId":"CrimsonTitan79"},"content":"public class StaffStorage extends PersonStorage {","lastModifiedDate":"2021-10-25"},{"lineNumber":6,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":7,"author":{"gitId":"CrimsonTitan79"},"content":"    private static final String STAFF_DATA_PATH \u003d \"MedBotData/staff.txt\";","lastModifiedDate":"2021-10-26"},{"lineNumber":8,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":9,"author":{"gitId":"CrimsonTitan79"},"content":"    /**","lastModifiedDate":"2021-11-03"},{"lineNumber":10,"author":{"gitId":"CrimsonTitan79"},"content":"     * Instantiate storage at the default path, STAFF_DATA_PATH.","lastModifiedDate":"2021-11-03"},{"lineNumber":11,"author":{"gitId":"CrimsonTitan79"},"content":"     *","lastModifiedDate":"2021-11-03"},{"lineNumber":12,"author":{"gitId":"CrimsonTitan79"},"content":"     * @throws MedBotException if unable to create/detect storage file","lastModifiedDate":"2021-11-03"},{"lineNumber":13,"author":{"gitId":"CrimsonTitan79"},"content":"     */","lastModifiedDate":"2021-11-03"},{"lineNumber":14,"author":{"gitId":"CrimsonTitan79"},"content":"    public StaffStorage() throws MedBotException {","lastModifiedDate":"2021-10-25"},{"lineNumber":15,"author":{"gitId":"CrimsonTitan79"},"content":"        super(STAFF_DATA_PATH);","lastModifiedDate":"2021-10-25"},{"lineNumber":16,"author":{"gitId":"CrimsonTitan79"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":17,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":18,"author":{"gitId":"CrimsonTitan79"},"content":"    /**","lastModifiedDate":"2021-11-03"},{"lineNumber":19,"author":{"gitId":"CrimsonTitan79"},"content":"     * For testing purposes, using a custom data path.","lastModifiedDate":"2021-11-03"},{"lineNumber":20,"author":{"gitId":"CrimsonTitan79"},"content":"     *","lastModifiedDate":"2021-11-03"},{"lineNumber":21,"author":{"gitId":"CrimsonTitan79"},"content":"     * @param testDataPath custom data path","lastModifiedDate":"2021-11-03"},{"lineNumber":22,"author":{"gitId":"CrimsonTitan79"},"content":"     * @throws MedBotException if unable to create/detect storage file","lastModifiedDate":"2021-11-03"},{"lineNumber":23,"author":{"gitId":"CrimsonTitan79"},"content":"     */","lastModifiedDate":"2021-11-03"},{"lineNumber":24,"author":{"gitId":"CrimsonTitan79"},"content":"    protected StaffStorage(String testDataPath) throws MedBotException {","lastModifiedDate":"2021-11-03"},{"lineNumber":25,"author":{"gitId":"CrimsonTitan79"},"content":"        super(testDataPath);","lastModifiedDate":"2021-10-27"},{"lineNumber":26,"author":{"gitId":"CrimsonTitan79"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":27,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":28,"author":{"gitId":"CrimsonTitan79"},"content":"}","lastModifiedDate":"2021-10-25"}],"authorContributionMap":{"CrimsonTitan79":28}},{"path":"src/main/java/medbot/storage/Storage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"CrimsonTitan79"},"content":"package medbot.storage;","lastModifiedDate":"2021-10-25"},{"lineNumber":2,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":3,"author":{"gitId":"CrimsonTitan79"},"content":"import medbot.Appointment;","lastModifiedDate":"2021-10-26"},{"lineNumber":4,"author":{"gitId":"CrimsonTitan79"},"content":"import medbot.Scheduler;","lastModifiedDate":"2021-10-26"},{"lineNumber":5,"author":{"gitId":"CrimsonTitan79"},"content":"import medbot.exceptions.MedBotException;","lastModifiedDate":"2021-10-25"},{"lineNumber":6,"author":{"gitId":"CrimsonTitan79"},"content":"import medbot.list.ListItem;","lastModifiedDate":"2021-10-25"},{"lineNumber":7,"author":{"gitId":"CrimsonTitan79"},"content":"import medbot.list.ListItemType;","lastModifiedDate":"2021-10-25"},{"lineNumber":8,"author":{"gitId":"CrimsonTitan79"},"content":"import medbot.person.Patient;","lastModifiedDate":"2021-10-26"},{"lineNumber":9,"author":{"gitId":"CrimsonTitan79"},"content":"import medbot.person.Staff;","lastModifiedDate":"2021-10-26"},{"lineNumber":10,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":11,"author":{"gitId":"CrimsonTitan79"},"content":"import java.io.File;","lastModifiedDate":"2021-10-25"},{"lineNumber":12,"author":{"gitId":"CrimsonTitan79"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2021-10-25"},{"lineNumber":13,"author":{"gitId":"CrimsonTitan79"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-10-25"},{"lineNumber":14,"author":{"gitId":"CrimsonTitan79"},"content":"import java.io.IOException;","lastModifiedDate":"2021-10-25"},{"lineNumber":15,"author":{"gitId":"CrimsonTitan79"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-10-25"},{"lineNumber":16,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":17,"author":{"gitId":"justinfidelis"},"content":"import static java.lang.Math.max;","lastModifiedDate":"2021-10-27"},{"lineNumber":18,"author":{"gitId":"CrimsonTitan79"},"content":"import static medbot.ui.Ui.VERTICAL_LINE_SPACED_ESCAPED;","lastModifiedDate":"2021-10-25"},{"lineNumber":19,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":20,"author":{"gitId":"CrimsonTitan79"},"content":"public abstract class Storage {","lastModifiedDate":"2021-10-25"},{"lineNumber":21,"author":{"gitId":"CrimsonTitan79"},"content":"    protected static final String ERROR_CREATE_STORAGE \u003d \"\\nERROR: MedBot is unable to create/detect\"","lastModifiedDate":"2021-11-03"},{"lineNumber":22,"author":{"gitId":"CrimsonTitan79"},"content":"            + \" its storage files.\\n\";","lastModifiedDate":"2021-11-03"},{"lineNumber":23,"author":{"gitId":"CrimsonTitan79"},"content":"    public static final String ERROR_SAVE_STORAGE \u003d \"\\nERROR: MedBot is unable to save data into its storage files.\\n\";","lastModifiedDate":"2021-11-02"},{"lineNumber":24,"author":{"gitId":"CrimsonTitan79"},"content":"    public static final String ERROR_MOVE_STORAGE_FILES \u003d \"\\nPlease manually move tp.jar to \"","lastModifiedDate":"2021-11-07"},{"lineNumber":25,"author":{"gitId":"CrimsonTitan79"},"content":"            + \"a location where it has read and write privileges before running it again.\\n\\n\"","lastModifiedDate":"2021-11-02"},{"lineNumber":26,"author":{"gitId":"CrimsonTitan79"},"content":"            + \"Exiting MedBot...\\n\";","lastModifiedDate":"2021-11-02"},{"lineNumber":27,"author":{"gitId":"CrimsonTitan79"},"content":"    protected static final String ERROR_NOT_LIST_ITEM \u003d \"Not a list item\";","lastModifiedDate":"2021-11-03"},{"lineNumber":28,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":29,"author":{"gitId":"CrimsonTitan79"},"content":"    protected File dataFile;","lastModifiedDate":"2021-10-25"},{"lineNumber":30,"author":{"gitId":"CrimsonTitan79"},"content":"    protected String dataPath;","lastModifiedDate":"2021-10-25"},{"lineNumber":31,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":32,"author":{"gitId":"CrimsonTitan79"},"content":"    /**","lastModifiedDate":"2021-10-25"},{"lineNumber":33,"author":{"gitId":"CrimsonTitan79"},"content":"     * Generic Constructor with creates a storage text file if it doesn\u0027t already exist.","lastModifiedDate":"2021-11-03"},{"lineNumber":34,"author":{"gitId":"CrimsonTitan79"},"content":"     *","lastModifiedDate":"2021-10-25"},{"lineNumber":35,"author":{"gitId":"CrimsonTitan79"},"content":"     * @param dataPathString String that is the path of the storage file","lastModifiedDate":"2021-10-25"},{"lineNumber":36,"author":{"gitId":"CrimsonTitan79"},"content":"     * @throws MedBotException if storage file cannot be created and does not exist","lastModifiedDate":"2021-10-25"},{"lineNumber":37,"author":{"gitId":"CrimsonTitan79"},"content":"     */","lastModifiedDate":"2021-10-25"},{"lineNumber":38,"author":{"gitId":"CrimsonTitan79"},"content":"    public Storage(String dataPathString) throws MedBotException {","lastModifiedDate":"2021-10-25"},{"lineNumber":39,"author":{"gitId":"CrimsonTitan79"},"content":"        try {","lastModifiedDate":"2021-10-25"},{"lineNumber":40,"author":{"gitId":"CrimsonTitan79"},"content":"            dataPath \u003d dataPathString;","lastModifiedDate":"2021-10-25"},{"lineNumber":41,"author":{"gitId":"CrimsonTitan79"},"content":"            dataFile \u003d new File(dataPath);","lastModifiedDate":"2021-10-25"},{"lineNumber":42,"author":{"gitId":"CrimsonTitan79"},"content":"            dataFile.getParentFile().mkdirs();","lastModifiedDate":"2021-10-25"},{"lineNumber":43,"author":{"gitId":"CrimsonTitan79"},"content":"            dataFile.createNewFile();","lastModifiedDate":"2021-10-25"},{"lineNumber":44,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":45,"author":{"gitId":"CrimsonTitan79"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-10-25"},{"lineNumber":46,"author":{"gitId":"CrimsonTitan79"},"content":"            throw new MedBotException(ERROR_CREATE_STORAGE + ERROR_MOVE_STORAGE_FILES);","lastModifiedDate":"2021-11-03"},{"lineNumber":47,"author":{"gitId":"CrimsonTitan79"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":48,"author":{"gitId":"CrimsonTitan79"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":49,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":50,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":51,"author":{"gitId":"CrimsonTitan79"},"content":"    /**","lastModifiedDate":"2021-10-25"},{"lineNumber":52,"author":{"gitId":"CrimsonTitan79"},"content":"     * Reads in storage file, parses each line and adds the data into MedBot","lastModifiedDate":"2021-11-03"},{"lineNumber":53,"author":{"gitId":"CrimsonTitan79"},"content":"     * returns all line numbers of a storage file that are invalid.","lastModifiedDate":"2021-11-03"},{"lineNumber":54,"author":{"gitId":"CrimsonTitan79"},"content":"     *","lastModifiedDate":"2021-10-25"},{"lineNumber":55,"author":{"gitId":"CrimsonTitan79"},"content":"     * @param listItemType enum of ListItem type","lastModifiedDate":"2021-10-25"},{"lineNumber":56,"author":{"gitId":"CrimsonTitan79"},"content":"     * @return Error message if there are formatting errors in storage file","lastModifiedDate":"2021-10-26"},{"lineNumber":57,"author":{"gitId":"CrimsonTitan79"},"content":"     * @throws FileNotFoundException if storage file cannot be found","lastModifiedDate":"2021-10-26"},{"lineNumber":58,"author":{"gitId":"CrimsonTitan79"},"content":"     */","lastModifiedDate":"2021-10-25"},{"lineNumber":59,"author":{"gitId":"CrimsonTitan79"},"content":"    public String loadStorage(ListItemType listItemType, Scheduler scheduler) throws FileNotFoundException {","lastModifiedDate":"2021-10-26"},{"lineNumber":60,"author":{"gitId":"CrimsonTitan79"},"content":"        int lineNumber \u003d 1;","lastModifiedDate":"2021-10-25"},{"lineNumber":61,"author":{"gitId":"CrimsonTitan79"},"content":"        Scanner s \u003d new Scanner(dataFile);","lastModifiedDate":"2021-10-25"},{"lineNumber":62,"author":{"gitId":"CrimsonTitan79"},"content":"        String loadStorageErrorMessage \u003d \"\";","lastModifiedDate":"2021-10-25"},{"lineNumber":63,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":64,"author":{"gitId":"CrimsonTitan79"},"content":"        while (s.hasNext()) {","lastModifiedDate":"2021-10-25"},{"lineNumber":65,"author":{"gitId":"CrimsonTitan79"},"content":"            try {","lastModifiedDate":"2021-10-25"},{"lineNumber":66,"author":{"gitId":"CrimsonTitan79"},"content":"                String storageLine \u003d s.nextLine();","lastModifiedDate":"2021-10-25"},{"lineNumber":67,"author":{"gitId":"CrimsonTitan79"},"content":"                addListItemFromStorageLine(listItemType, scheduler, storageLine);","lastModifiedDate":"2021-10-26"},{"lineNumber":68,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":69,"author":{"gitId":"CrimsonTitan79"},"content":"            } catch (Exception e) {","lastModifiedDate":"2021-10-25"},{"lineNumber":70,"author":{"gitId":"CrimsonTitan79"},"content":"                loadStorageErrorMessage +\u003d loadStorageLineErrorMessage(lineNumber);","lastModifiedDate":"2021-10-25"},{"lineNumber":71,"author":{"gitId":"CrimsonTitan79"},"content":"            }","lastModifiedDate":"2021-10-25"},{"lineNumber":72,"author":{"gitId":"CrimsonTitan79"},"content":"            lineNumber++;","lastModifiedDate":"2021-10-25"},{"lineNumber":73,"author":{"gitId":"CrimsonTitan79"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":74,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":75,"author":{"gitId":"CrimsonTitan79"},"content":"        return loadStorageErrorMessage;","lastModifiedDate":"2021-10-25"},{"lineNumber":76,"author":{"gitId":"CrimsonTitan79"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":77,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":78,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":79,"author":{"gitId":"CrimsonTitan79"},"content":"    /**","lastModifiedDate":"2021-10-26"},{"lineNumber":80,"author":{"gitId":"justinfidelis"},"content":"     * Add a ListItem object to the corresponding list,","lastModifiedDate":"2021-10-27"},{"lineNumber":81,"author":{"gitId":"CrimsonTitan79"},"content":"     * from the text in a storage line in a storage file.","lastModifiedDate":"2021-10-26"},{"lineNumber":82,"author":{"gitId":"CrimsonTitan79"},"content":"     *","lastModifiedDate":"2021-10-26"},{"lineNumber":83,"author":{"gitId":"CrimsonTitan79"},"content":"     * @param listItemType enum of ListItem type","lastModifiedDate":"2021-10-26"},{"lineNumber":84,"author":{"gitId":"CrimsonTitan79"},"content":"     * @param storageLine  a line in storage file","lastModifiedDate":"2021-10-26"},{"lineNumber":85,"author":{"gitId":"justinfidelis"},"content":"     * @throws MedBotException if fail to add a ListItem to the list","lastModifiedDate":"2021-10-27"},{"lineNumber":86,"author":{"gitId":"CrimsonTitan79"},"content":"     */","lastModifiedDate":"2021-10-26"},{"lineNumber":87,"author":{"gitId":"CrimsonTitan79"},"content":"    protected void addListItemFromStorageLine(ListItemType listItemType, Scheduler scheduler, String storageLine)","lastModifiedDate":"2021-10-26"},{"lineNumber":88,"author":{"gitId":"CrimsonTitan79"},"content":"            throws MedBotException {","lastModifiedDate":"2021-10-25"},{"lineNumber":89,"author":{"gitId":"CrimsonTitan79"},"content":"        ListItem listItem \u003d createListItem(storageLine, listItemType);","lastModifiedDate":"2021-10-25"},{"lineNumber":90,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":91,"author":{"gitId":"CrimsonTitan79"},"content":"        switch (listItemType) {","lastModifiedDate":"2021-10-26"},{"lineNumber":92,"author":{"gitId":"CrimsonTitan79"},"content":"        case PATIENT:","lastModifiedDate":"2021-10-26"},{"lineNumber":93,"author":{"gitId":"CrimsonTitan79"},"content":"            scheduler.addPatient((Patient) listItem);","lastModifiedDate":"2021-10-26"},{"lineNumber":94,"author":{"gitId":"justinfidelis"},"content":"            int lastPatientId \u003d max(listItem.getId(), scheduler.getLastPatientId());","lastModifiedDate":"2021-10-27"},{"lineNumber":95,"author":{"gitId":"justinfidelis"},"content":"            scheduler.setLastPatientId(lastPatientId);","lastModifiedDate":"2021-10-27"},{"lineNumber":96,"author":{"gitId":"CrimsonTitan79"},"content":"            break;","lastModifiedDate":"2021-10-26"},{"lineNumber":97,"author":{"gitId":"CrimsonTitan79"},"content":"        case STAFF:","lastModifiedDate":"2021-10-26"},{"lineNumber":98,"author":{"gitId":"CrimsonTitan79"},"content":"            scheduler.addStaff((Staff) listItem);","lastModifiedDate":"2021-10-26"},{"lineNumber":99,"author":{"gitId":"justinfidelis"},"content":"            int lastStaffId \u003d max(listItem.getId(), scheduler.getLastStaffId());","lastModifiedDate":"2021-10-27"},{"lineNumber":100,"author":{"gitId":"justinfidelis"},"content":"            scheduler.setLastStaffId(lastStaffId);","lastModifiedDate":"2021-10-27"},{"lineNumber":101,"author":{"gitId":"CrimsonTitan79"},"content":"            break;","lastModifiedDate":"2021-10-26"},{"lineNumber":102,"author":{"gitId":"CrimsonTitan79"},"content":"        case APPOINTMENT:","lastModifiedDate":"2021-10-26"},{"lineNumber":103,"author":{"gitId":"CrimsonTitan79"},"content":"            scheduler.addAppointment((Appointment) listItem);","lastModifiedDate":"2021-10-26"},{"lineNumber":104,"author":{"gitId":"justinfidelis"},"content":"            int lastAppointmentId \u003d max(listItem.getId(), scheduler.getLastAppointmentId());","lastModifiedDate":"2021-10-27"},{"lineNumber":105,"author":{"gitId":"justinfidelis"},"content":"            scheduler.setLastAppointmentId(lastAppointmentId);","lastModifiedDate":"2021-10-27"},{"lineNumber":106,"author":{"gitId":"CrimsonTitan79"},"content":"            break;","lastModifiedDate":"2021-10-26"},{"lineNumber":107,"author":{"gitId":"CrimsonTitan79"},"content":"        default:","lastModifiedDate":"2021-10-26"},{"lineNumber":108,"author":{"gitId":"CrimsonTitan79"},"content":"            throw new MedBotException(ERROR_NOT_LIST_ITEM);","lastModifiedDate":"2021-11-03"},{"lineNumber":109,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":110,"author":{"gitId":"CrimsonTitan79"},"content":"        }","lastModifiedDate":"2021-10-26"},{"lineNumber":111,"author":{"gitId":"CrimsonTitan79"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":112,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":113,"author":{"gitId":"CrimsonTitan79"},"content":"    /**","lastModifiedDate":"2021-10-25"},{"lineNumber":114,"author":{"gitId":"justinfidelis"},"content":"     * Writes the storageString to storage file.","lastModifiedDate":"2021-10-27"},{"lineNumber":115,"author":{"gitId":"CrimsonTitan79"},"content":"     *","lastModifiedDate":"2021-10-25"},{"lineNumber":116,"author":{"gitId":"justinfidelis"},"content":"     * @param storageString String containing the data of the list.","lastModifiedDate":"2021-10-27"},{"lineNumber":117,"author":{"gitId":"CrimsonTitan79"},"content":"     * @throws IOException if unable to write to storage text file.","lastModifiedDate":"2021-11-02"},{"lineNumber":118,"author":{"gitId":"CrimsonTitan79"},"content":"     */","lastModifiedDate":"2021-10-25"},{"lineNumber":119,"author":{"gitId":"CrimsonTitan79"},"content":"    public void saveData(String storageString) throws IOException {","lastModifiedDate":"2021-11-02"},{"lineNumber":120,"author":{"gitId":"CrimsonTitan79"},"content":"        FileWriter fw \u003d new FileWriter(dataPath);","lastModifiedDate":"2021-10-25"},{"lineNumber":121,"author":{"gitId":"justinfidelis"},"content":"        fw.write(storageString);","lastModifiedDate":"2021-10-27"},{"lineNumber":122,"author":{"gitId":"CrimsonTitan79"},"content":"        fw.close();","lastModifiedDate":"2021-10-25"},{"lineNumber":123,"author":{"gitId":"CrimsonTitan79"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":124,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":125,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":126,"author":{"gitId":"CrimsonTitan79"},"content":"    /**","lastModifiedDate":"2021-10-25"},{"lineNumber":127,"author":{"gitId":"CrimsonTitan79"},"content":"     * String split a line with \" | \" as the delimiters.","lastModifiedDate":"2021-10-25"},{"lineNumber":128,"author":{"gitId":"CrimsonTitan79"},"content":"     *","lastModifiedDate":"2021-10-25"},{"lineNumber":129,"author":{"gitId":"CrimsonTitan79"},"content":"     * @param storageLine a line in storage file","lastModifiedDate":"2021-10-25"},{"lineNumber":130,"author":{"gitId":"CrimsonTitan79"},"content":"     * @return String[] with the parameters separated in different indexes in the array","lastModifiedDate":"2021-10-25"},{"lineNumber":131,"author":{"gitId":"CrimsonTitan79"},"content":"     */","lastModifiedDate":"2021-10-25"},{"lineNumber":132,"author":{"gitId":"CrimsonTitan79"},"content":"    protected static String[] splitStorageLine(String storageLine) {","lastModifiedDate":"2021-10-25"},{"lineNumber":133,"author":{"gitId":"CrimsonTitan79"},"content":"        return storageLine.split(VERTICAL_LINE_SPACED_ESCAPED);","lastModifiedDate":"2021-10-25"},{"lineNumber":134,"author":{"gitId":"CrimsonTitan79"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":135,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":136,"author":{"gitId":"CrimsonTitan79"},"content":"    /**","lastModifiedDate":"2021-10-25"},{"lineNumber":137,"author":{"gitId":"CrimsonTitan79"},"content":"     * True if \"X\", which means the parameter is null, false otherwise.","lastModifiedDate":"2021-10-25"},{"lineNumber":138,"author":{"gitId":"CrimsonTitan79"},"content":"     *","lastModifiedDate":"2021-10-25"},{"lineNumber":139,"author":{"gitId":"CrimsonTitan79"},"content":"     * @param parameter a parameter in a line of storage/data.txt","lastModifiedDate":"2021-10-25"},{"lineNumber":140,"author":{"gitId":"CrimsonTitan79"},"content":"     * @return true if \"X\", which means the parameter is null, false otherwise","lastModifiedDate":"2021-10-25"},{"lineNumber":141,"author":{"gitId":"CrimsonTitan79"},"content":"     */","lastModifiedDate":"2021-10-25"},{"lineNumber":142,"author":{"gitId":"CrimsonTitan79"},"content":"    protected static boolean isStorageParameterNull(String parameter) {","lastModifiedDate":"2021-10-25"},{"lineNumber":143,"author":{"gitId":"CrimsonTitan79"},"content":"        return parameter.equals(\"X\");","lastModifiedDate":"2021-10-25"},{"lineNumber":144,"author":{"gitId":"CrimsonTitan79"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":145,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":146,"author":{"gitId":"CrimsonTitan79"},"content":"    /**","lastModifiedDate":"2021-10-25"},{"lineNumber":147,"author":{"gitId":"CrimsonTitan79"},"content":"     * Error message that shows the line number of a line in storage file with improper formatting.","lastModifiedDate":"2021-10-27"},{"lineNumber":148,"author":{"gitId":"CrimsonTitan79"},"content":"     *","lastModifiedDate":"2021-10-25"},{"lineNumber":149,"author":{"gitId":"CrimsonTitan79"},"content":"     * @param lineNumber the line number with improper formatting in storage/data.txt","lastModifiedDate":"2021-10-25"},{"lineNumber":150,"author":{"gitId":"CrimsonTitan79"},"content":"     * @return Error message","lastModifiedDate":"2021-10-25"},{"lineNumber":151,"author":{"gitId":"CrimsonTitan79"},"content":"     */","lastModifiedDate":"2021-10-25"},{"lineNumber":152,"author":{"gitId":"CrimsonTitan79"},"content":"    protected String loadStorageLineErrorMessage(int lineNumber) {","lastModifiedDate":"2021-10-25"},{"lineNumber":153,"author":{"gitId":"CrimsonTitan79"},"content":"        return \"Error: Line \" + lineNumber + \" of \" + dataPath + \" is invalid!\\n\";","lastModifiedDate":"2021-11-03"},{"lineNumber":154,"author":{"gitId":"CrimsonTitan79"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":155,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":156,"author":{"gitId":"CrimsonTitan79"},"content":"    /**","lastModifiedDate":"2021-10-25"},{"lineNumber":157,"author":{"gitId":"CrimsonTitan79"},"content":"     * Template Method. Instantiates a ListItem interfaced object.","lastModifiedDate":"2021-10-27"},{"lineNumber":158,"author":{"gitId":"CrimsonTitan79"},"content":"     *","lastModifiedDate":"2021-10-25"},{"lineNumber":159,"author":{"gitId":"CrimsonTitan79"},"content":"     * @param storageLine  a line in storage file","lastModifiedDate":"2021-10-25"},{"lineNumber":160,"author":{"gitId":"CrimsonTitan79"},"content":"     * @param listItemType enum of ListItem type","lastModifiedDate":"2021-10-25"},{"lineNumber":161,"author":{"gitId":"CrimsonTitan79"},"content":"     * @return a ListItem interfaced object","lastModifiedDate":"2021-10-27"},{"lineNumber":162,"author":{"gitId":"CrimsonTitan79"},"content":"     * @throws MedBotException if a ListItem object fails to be created","lastModifiedDate":"2021-10-25"},{"lineNumber":163,"author":{"gitId":"CrimsonTitan79"},"content":"     */","lastModifiedDate":"2021-10-25"},{"lineNumber":164,"author":{"gitId":"CrimsonTitan79"},"content":"    protected abstract ListItem createListItem(String storageLine, ListItemType listItemType) throws MedBotException;","lastModifiedDate":"2021-11-03"},{"lineNumber":165,"author":{"gitId":"CrimsonTitan79"},"content":"}","lastModifiedDate":"2021-10-25"},{"lineNumber":166,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-25"}],"authorContributionMap":{"justinfidelis":12,"CrimsonTitan79":154}},{"path":"src/main/java/medbot/storage/StorageManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"CrimsonTitan79"},"content":"package medbot.storage;","lastModifiedDate":"2021-10-26"},{"lineNumber":2,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":3,"author":{"gitId":"CrimsonTitan79"},"content":"import medbot.Scheduler;","lastModifiedDate":"2021-10-26"},{"lineNumber":4,"author":{"gitId":"CrimsonTitan79"},"content":"import medbot.exceptions.MedBotException;","lastModifiedDate":"2021-10-26"},{"lineNumber":5,"author":{"gitId":"CrimsonTitan79"},"content":"import medbot.ui.Ui;","lastModifiedDate":"2021-10-26"},{"lineNumber":6,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":7,"author":{"gitId":"CrimsonTitan79"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2021-10-26"},{"lineNumber":8,"author":{"gitId":"CrimsonTitan79"},"content":"import java.io.IOException;","lastModifiedDate":"2021-11-02"},{"lineNumber":9,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":10,"author":{"gitId":"CrimsonTitan79"},"content":"import static medbot.list.ListItemType.APPOINTMENT;","lastModifiedDate":"2021-10-26"},{"lineNumber":11,"author":{"gitId":"CrimsonTitan79"},"content":"import static medbot.list.ListItemType.PATIENT;","lastModifiedDate":"2021-10-26"},{"lineNumber":12,"author":{"gitId":"CrimsonTitan79"},"content":"import static medbot.list.ListItemType.STAFF;","lastModifiedDate":"2021-10-26"},{"lineNumber":13,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":14,"author":{"gitId":"CrimsonTitan79"},"content":"public class StorageManager {","lastModifiedDate":"2021-10-26"},{"lineNumber":15,"author":{"gitId":"CrimsonTitan79"},"content":"    private static PatientStorage patientStorage;","lastModifiedDate":"2021-10-26"},{"lineNumber":16,"author":{"gitId":"CrimsonTitan79"},"content":"    private static StaffStorage staffStorage;","lastModifiedDate":"2021-10-26"},{"lineNumber":17,"author":{"gitId":"CrimsonTitan79"},"content":"    private static AppointmentStorage appointmentStorage;","lastModifiedDate":"2021-10-26"},{"lineNumber":18,"author":{"gitId":"CrimsonTitan79"},"content":"    protected static final String ERROR_INVALID_STORAGE_LINE_INSTRUCTION \u003d \"\\n\"","lastModifiedDate":"2021-10-26"},{"lineNumber":19,"author":{"gitId":"CrimsonTitan79"},"content":"            + \"Please decide if you wish to:\" + \"\\n\"","lastModifiedDate":"2021-10-26"},{"lineNumber":20,"author":{"gitId":"CrimsonTitan79"},"content":"            + \"1. Enter \u0027exit\u0027 to exit MedBot to correct the storage files\" + \"\\n\"","lastModifiedDate":"2021-11-02"},{"lineNumber":21,"author":{"gitId":"CrimsonTitan79"},"content":"            + \"2. Enter other valid commands to OVERWRITE all invalid data!\" + \"\\n\";","lastModifiedDate":"2021-10-26"},{"lineNumber":22,"author":{"gitId":"CrimsonTitan79"},"content":"    protected static final String ERROR_LOAD_STORAGE \u003d \"ERROR: MedBot has issues finding some or \"","lastModifiedDate":"2021-11-03"},{"lineNumber":23,"author":{"gitId":"CrimsonTitan79"},"content":"            + \"all of the storage files to load!\";","lastModifiedDate":"2021-11-03"},{"lineNumber":24,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":25,"author":{"gitId":"CrimsonTitan79"},"content":"    public StorageManager() {","lastModifiedDate":"2021-11-02"},{"lineNumber":26,"author":{"gitId":"CrimsonTitan79"},"content":"    }","lastModifiedDate":"2021-11-02"},{"lineNumber":27,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":28,"author":{"gitId":"CrimsonTitan79"},"content":"    /**","lastModifiedDate":"2021-10-26"},{"lineNumber":29,"author":{"gitId":"CrimsonTitan79"},"content":"     * Initializes all storage classes to be used for MedBot, and prints out the line number of invalid lines in","lastModifiedDate":"2021-11-03"},{"lineNumber":30,"author":{"gitId":"CrimsonTitan79"},"content":"     * the storage files and the name of the respective storage file.","lastModifiedDate":"2021-11-03"},{"lineNumber":31,"author":{"gitId":"CrimsonTitan79"},"content":"     *","lastModifiedDate":"2021-10-26"},{"lineNumber":32,"author":{"gitId":"CrimsonTitan79"},"content":"     * @param scheduler instance of scheduler class","lastModifiedDate":"2021-10-26"},{"lineNumber":33,"author":{"gitId":"CrimsonTitan79"},"content":"     * @param ui        instance of ui class","lastModifiedDate":"2021-10-26"},{"lineNumber":34,"author":{"gitId":"CrimsonTitan79"},"content":"     * @throws MedBotException if unable to load any of the storage files","lastModifiedDate":"2021-11-03"},{"lineNumber":35,"author":{"gitId":"CrimsonTitan79"},"content":"     */","lastModifiedDate":"2021-10-26"},{"lineNumber":36,"author":{"gitId":"CrimsonTitan79"},"content":"    public void initializeStorages(Scheduler scheduler, Ui ui) throws MedBotException {","lastModifiedDate":"2021-11-02"},{"lineNumber":37,"author":{"gitId":"CrimsonTitan79"},"content":"        patientStorage \u003d new PatientStorage();","lastModifiedDate":"2021-10-26"},{"lineNumber":38,"author":{"gitId":"CrimsonTitan79"},"content":"        staffStorage \u003d new StaffStorage();","lastModifiedDate":"2021-10-26"},{"lineNumber":39,"author":{"gitId":"CrimsonTitan79"},"content":"        appointmentStorage \u003d new AppointmentStorage();","lastModifiedDate":"2021-10-26"},{"lineNumber":40,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":41,"author":{"gitId":"CrimsonTitan79"},"content":"        try {","lastModifiedDate":"2021-11-02"},{"lineNumber":42,"author":{"gitId":"CrimsonTitan79"},"content":"            String loadStorageErrorMessage \u003d loadStoragesAndGetErrorMessage(scheduler);","lastModifiedDate":"2021-10-26"},{"lineNumber":43,"author":{"gitId":"CrimsonTitan79"},"content":"            if (!loadStorageErrorMessage.isBlank()) {","lastModifiedDate":"2021-10-26"},{"lineNumber":44,"author":{"gitId":"CrimsonTitan79"},"content":"                loadStorageErrorMessage +\u003d ERROR_INVALID_STORAGE_LINE_INSTRUCTION;","lastModifiedDate":"2021-10-26"},{"lineNumber":45,"author":{"gitId":"CrimsonTitan79"},"content":"                ui.printOutput(\"\");","lastModifiedDate":"2021-10-26"},{"lineNumber":46,"author":{"gitId":"CrimsonTitan79"},"content":"                ui.printOutput(loadStorageErrorMessage);","lastModifiedDate":"2021-10-26"},{"lineNumber":47,"author":{"gitId":"CrimsonTitan79"},"content":"            }","lastModifiedDate":"2021-10-26"},{"lineNumber":48,"author":{"gitId":"CrimsonTitan79"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2021-11-02"},{"lineNumber":49,"author":{"gitId":"CrimsonTitan79"},"content":"            throw new MedBotException(ERROR_LOAD_STORAGE);","lastModifiedDate":"2021-11-03"},{"lineNumber":50,"author":{"gitId":"CrimsonTitan79"},"content":"        }","lastModifiedDate":"2021-11-02"},{"lineNumber":51,"author":{"gitId":"CrimsonTitan79"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":52,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":53,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":54,"author":{"gitId":"CrimsonTitan79"},"content":"    /**","lastModifiedDate":"2021-10-26"},{"lineNumber":55,"author":{"gitId":"CrimsonTitan79"},"content":"     * Save all relevant data from MedBot program to storage text files.","lastModifiedDate":"2021-10-27"},{"lineNumber":56,"author":{"gitId":"CrimsonTitan79"},"content":"     *","lastModifiedDate":"2021-10-26"},{"lineNumber":57,"author":{"gitId":"CrimsonTitan79"},"content":"     * @param scheduler instance of Scheduler class","lastModifiedDate":"2021-10-26"},{"lineNumber":58,"author":{"gitId":"CrimsonTitan79"},"content":"     * @throws IOException if unable to save data to any of the storage text files","lastModifiedDate":"2021-11-02"},{"lineNumber":59,"author":{"gitId":"CrimsonTitan79"},"content":"     */","lastModifiedDate":"2021-10-26"},{"lineNumber":60,"author":{"gitId":"CrimsonTitan79"},"content":"    public void saveToStorage(Scheduler scheduler) throws IOException {","lastModifiedDate":"2021-11-02"},{"lineNumber":61,"author":{"gitId":"justinfidelis"},"content":"        patientStorage.saveData(scheduler.getPatientStorageString());","lastModifiedDate":"2021-10-27"},{"lineNumber":62,"author":{"gitId":"justinfidelis"},"content":"        staffStorage.saveData(scheduler.getStaffStorageString());","lastModifiedDate":"2021-10-27"},{"lineNumber":63,"author":{"gitId":"justinfidelis"},"content":"        appointmentStorage.saveData(scheduler.getAppointmentStorageString());","lastModifiedDate":"2021-10-27"},{"lineNumber":64,"author":{"gitId":"CrimsonTitan79"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":65,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":66,"author":{"gitId":"CrimsonTitan79"},"content":"    /**","lastModifiedDate":"2021-10-26"},{"lineNumber":67,"author":{"gitId":"CrimsonTitan79"},"content":"     * Load storage text file data into MedBot program. Print any errors in the storage text file data.","lastModifiedDate":"2021-10-27"},{"lineNumber":68,"author":{"gitId":"CrimsonTitan79"},"content":"     *","lastModifiedDate":"2021-10-26"},{"lineNumber":69,"author":{"gitId":"CrimsonTitan79"},"content":"     * @param scheduler instance of Scheduler class","lastModifiedDate":"2021-10-26"},{"lineNumber":70,"author":{"gitId":"CrimsonTitan79"},"content":"     * @return error message of the relevant lines with errors in the storage text files","lastModifiedDate":"2021-10-26"},{"lineNumber":71,"author":{"gitId":"CrimsonTitan79"},"content":"     * @throws FileNotFoundException if storage text files cannot be found","lastModifiedDate":"2021-10-26"},{"lineNumber":72,"author":{"gitId":"CrimsonTitan79"},"content":"     */","lastModifiedDate":"2021-10-26"},{"lineNumber":73,"author":{"gitId":"CrimsonTitan79"},"content":"    private String loadStoragesAndGetErrorMessage(Scheduler scheduler) throws FileNotFoundException {","lastModifiedDate":"2021-10-28"},{"lineNumber":74,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":75,"author":{"gitId":"CrimsonTitan79"},"content":"        return patientStorage.loadStorage(PATIENT, scheduler)","lastModifiedDate":"2021-10-26"},{"lineNumber":76,"author":{"gitId":"CrimsonTitan79"},"content":"                + staffStorage.loadStorage(STAFF, scheduler)","lastModifiedDate":"2021-10-26"},{"lineNumber":77,"author":{"gitId":"CrimsonTitan79"},"content":"                + appointmentStorage.loadStorage(APPOINTMENT, scheduler);","lastModifiedDate":"2021-10-26"},{"lineNumber":78,"author":{"gitId":"CrimsonTitan79"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":79,"author":{"gitId":"CrimsonTitan79"},"content":"}","lastModifiedDate":"2021-10-26"}],"authorContributionMap":{"justinfidelis":3,"CrimsonTitan79":76}},{"path":"src/main/java/medbot/ui/PatientUi.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jushg"},"content":"package medbot.ui;","lastModifiedDate":"2021-10-22"},{"lineNumber":2,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":3,"author":{"gitId":"EricBryann"},"content":"public class PatientUi extends PersonUi {","lastModifiedDate":"2021-10-26"},{"lineNumber":4,"author":{"gitId":"EricBryann"},"content":"    private static final String PATIENT \u003d \"patient\";","lastModifiedDate":"2021-10-26"},{"lineNumber":5,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":6,"author":{"gitId":"justinfidelis"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":7,"author":{"gitId":"justinfidelis"},"content":"     * Returns a list of valid commands.","lastModifiedDate":"2021-11-07"},{"lineNumber":8,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-11-07"},{"lineNumber":9,"author":{"gitId":"justinfidelis"},"content":"     * @return String containing a list of valid commands","lastModifiedDate":"2021-11-07"},{"lineNumber":10,"author":{"gitId":"justinfidelis"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":11,"author":{"gitId":"justinfidelis"},"content":"    public static String getPatientCommandList() {","lastModifiedDate":"2021-10-25"},{"lineNumber":12,"author":{"gitId":"EricBryann"},"content":"        return getCommandList();","lastModifiedDate":"2021-10-26"},{"lineNumber":13,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":14,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":15,"author":{"gitId":"justinfidelis"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":16,"author":{"gitId":"justinfidelis"},"content":"     * Returns a message String with help about the add patient command.","lastModifiedDate":"2021-11-07"},{"lineNumber":17,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-11-07"},{"lineNumber":18,"author":{"gitId":"justinfidelis"},"content":"     * @return String with help about the add patient command","lastModifiedDate":"2021-11-07"},{"lineNumber":19,"author":{"gitId":"justinfidelis"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":20,"author":{"gitId":"jushg"},"content":"    public static String getAddPatientHelpMessage() {","lastModifiedDate":"2021-10-22"},{"lineNumber":21,"author":{"gitId":"EricBryann"},"content":"        return getAddHelpMessage(PATIENT);","lastModifiedDate":"2021-10-26"},{"lineNumber":22,"author":{"gitId":"jushg"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":23,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":24,"author":{"gitId":"justinfidelis"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":25,"author":{"gitId":"justinfidelis"},"content":"     * Returns a message String with help about the delete patient command.","lastModifiedDate":"2021-11-07"},{"lineNumber":26,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-11-07"},{"lineNumber":27,"author":{"gitId":"justinfidelis"},"content":"     * @return String with help about the delete patient command","lastModifiedDate":"2021-11-07"},{"lineNumber":28,"author":{"gitId":"justinfidelis"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":29,"author":{"gitId":"justinfidelis"},"content":"    public static String getDeletePatientHelpMessage() {","lastModifiedDate":"2021-11-07"},{"lineNumber":30,"author":{"gitId":"justinfidelis"},"content":"        return getDeleteHelpMessage(PATIENT);","lastModifiedDate":"2021-11-07"},{"lineNumber":31,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-11-07"},{"lineNumber":32,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":33,"author":{"gitId":"justinfidelis"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":34,"author":{"gitId":"justinfidelis"},"content":"     * Returns a message String with help about the edit patient command.","lastModifiedDate":"2021-11-07"},{"lineNumber":35,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-11-07"},{"lineNumber":36,"author":{"gitId":"justinfidelis"},"content":"     * @return String with help about the edit patient command","lastModifiedDate":"2021-11-07"},{"lineNumber":37,"author":{"gitId":"justinfidelis"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":38,"author":{"gitId":"jushg"},"content":"    public static String getEditPatientHelpMessage() {","lastModifiedDate":"2021-10-22"},{"lineNumber":39,"author":{"gitId":"EricBryann"},"content":"        return getEditHelpMessage(PATIENT);","lastModifiedDate":"2021-10-26"},{"lineNumber":40,"author":{"gitId":"jushg"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":41,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":42,"author":{"gitId":"justinfidelis"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":43,"author":{"gitId":"justinfidelis"},"content":"     * Returns a message String with help about the view patient command.","lastModifiedDate":"2021-11-07"},{"lineNumber":44,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-11-07"},{"lineNumber":45,"author":{"gitId":"justinfidelis"},"content":"     * @return String with help about the view patient command","lastModifiedDate":"2021-11-07"},{"lineNumber":46,"author":{"gitId":"justinfidelis"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":47,"author":{"gitId":"justinfidelis"},"content":"    public static String getViewPatientHelpMessage() {","lastModifiedDate":"2021-11-07"},{"lineNumber":48,"author":{"gitId":"justinfidelis"},"content":"        return getViewHelpMessage(PATIENT);","lastModifiedDate":"2021-11-07"},{"lineNumber":49,"author":{"gitId":"jushg"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":50,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":51,"author":{"gitId":"justinfidelis"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":52,"author":{"gitId":"justinfidelis"},"content":"     * Returns a message String with help about the list patient command.","lastModifiedDate":"2021-11-07"},{"lineNumber":53,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-11-07"},{"lineNumber":54,"author":{"gitId":"justinfidelis"},"content":"     * @return String with help about the list patient command","lastModifiedDate":"2021-11-07"},{"lineNumber":55,"author":{"gitId":"justinfidelis"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":56,"author":{"gitId":"justinfidelis"},"content":"    public static String getListPatientHelpMessage() {","lastModifiedDate":"2021-11-07"},{"lineNumber":57,"author":{"gitId":"justinfidelis"},"content":"        return getListHelpMessage(PATIENT);","lastModifiedDate":"2021-11-07"},{"lineNumber":58,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-11-07"},{"lineNumber":59,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":60,"author":{"gitId":"justinfidelis"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":61,"author":{"gitId":"justinfidelis"},"content":"     * Returns a message String with help about the find patient command.","lastModifiedDate":"2021-11-07"},{"lineNumber":62,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-11-07"},{"lineNumber":63,"author":{"gitId":"justinfidelis"},"content":"     * @return String with help about the find patient command","lastModifiedDate":"2021-11-07"},{"lineNumber":64,"author":{"gitId":"justinfidelis"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":65,"author":{"gitId":"justinfidelis"},"content":"    public static String getFindPatientHelpMessage() {","lastModifiedDate":"2021-11-07"},{"lineNumber":66,"author":{"gitId":"justinfidelis"},"content":"        return getFindHelpMessage(PATIENT);","lastModifiedDate":"2021-11-07"},{"lineNumber":67,"author":{"gitId":"jushg"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":68,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":69,"author":{"gitId":"justinfidelis"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":70,"author":{"gitId":"justinfidelis"},"content":"     * Returns a message String with help about the hide command.","lastModifiedDate":"2021-11-07"},{"lineNumber":71,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-11-07"},{"lineNumber":72,"author":{"gitId":"justinfidelis"},"content":"     * @return String with help about the hide command","lastModifiedDate":"2021-11-07"},{"lineNumber":73,"author":{"gitId":"justinfidelis"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":74,"author":{"gitId":"EricBryann"},"content":"    public static String getHidePatientHelpMessage() {","lastModifiedDate":"2021-11-02"},{"lineNumber":75,"author":{"gitId":"EricBryann"},"content":"        return getHideHelpMessage(PATIENT);","lastModifiedDate":"2021-11-02"},{"lineNumber":76,"author":{"gitId":"EricBryann"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":77,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":78,"author":{"gitId":"justinfidelis"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":79,"author":{"gitId":"justinfidelis"},"content":"     * Returns a message String with help about the show command.","lastModifiedDate":"2021-11-07"},{"lineNumber":80,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-11-07"},{"lineNumber":81,"author":{"gitId":"justinfidelis"},"content":"     * @return String with help about the show command","lastModifiedDate":"2021-11-07"},{"lineNumber":82,"author":{"gitId":"justinfidelis"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":83,"author":{"gitId":"EricBryann"},"content":"    public static String getShowPatientHelpMessage() {","lastModifiedDate":"2021-11-02"},{"lineNumber":84,"author":{"gitId":"EricBryann"},"content":"        return getShowHelpMessage(PATIENT);","lastModifiedDate":"2021-11-02"},{"lineNumber":85,"author":{"gitId":"EricBryann"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":86,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":87,"author":{"gitId":"justinfidelis"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":88,"author":{"gitId":"justinfidelis"},"content":"     * Returns a message String indicating that the patient with the specified information has been added","lastModifiedDate":"2021-11-07"},{"lineNumber":89,"author":{"gitId":"justinfidelis"},"content":"     * to the system.","lastModifiedDate":"2021-11-07"},{"lineNumber":90,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-11-07"},{"lineNumber":91,"author":{"gitId":"justinfidelis"},"content":"     * @param patientInfo String containing the information about the patient","lastModifiedDate":"2021-11-07"},{"lineNumber":92,"author":{"gitId":"justinfidelis"},"content":"     * @return String indicating that the specified patient has been added to the system","lastModifiedDate":"2021-11-07"},{"lineNumber":93,"author":{"gitId":"justinfidelis"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":94,"author":{"gitId":"justinfidelis"},"content":"    public static String getAddPatientMessage(String patientInfo) {","lastModifiedDate":"2021-11-02"},{"lineNumber":95,"author":{"gitId":"justinfidelis"},"content":"        return getAddPersonMessage(PATIENT, patientInfo);","lastModifiedDate":"2021-11-02"},{"lineNumber":96,"author":{"gitId":"EricBryann"},"content":"    }","lastModifiedDate":"2021-11-01"},{"lineNumber":97,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":98,"author":{"gitId":"justinfidelis"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":99,"author":{"gitId":"justinfidelis"},"content":"     * Returns a message String indicating that the patient with the specified ID has been deleted from the system.","lastModifiedDate":"2021-11-07"},{"lineNumber":100,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-11-07"},{"lineNumber":101,"author":{"gitId":"justinfidelis"},"content":"     * @param id ID of the patient who was removed from the system","lastModifiedDate":"2021-11-07"},{"lineNumber":102,"author":{"gitId":"justinfidelis"},"content":"     * @return String indicating that the specified patient has been deleted from the system","lastModifiedDate":"2021-11-07"},{"lineNumber":103,"author":{"gitId":"justinfidelis"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":104,"author":{"gitId":"EricBryann"},"content":"    public static String getDeletePatientMessage(int id) {","lastModifiedDate":"2021-11-01"},{"lineNumber":105,"author":{"gitId":"EricBryann"},"content":"        return getDeletePersonMessage(PATIENT, id);","lastModifiedDate":"2021-11-01"},{"lineNumber":106,"author":{"gitId":"EricBryann"},"content":"    }","lastModifiedDate":"2021-11-01"},{"lineNumber":107,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":108,"author":{"gitId":"justinfidelis"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":109,"author":{"gitId":"justinfidelis"},"content":"     * Returns a message String indicating that the patient with the specified ID has had their information edited","lastModifiedDate":"2021-11-07"},{"lineNumber":110,"author":{"gitId":"justinfidelis"},"content":"     * to the specified information.","lastModifiedDate":"2021-11-07"},{"lineNumber":111,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-11-07"},{"lineNumber":112,"author":{"gitId":"justinfidelis"},"content":"     * @param id ID of the patient whose information was edited","lastModifiedDate":"2021-11-07"},{"lineNumber":113,"author":{"gitId":"justinfidelis"},"content":"     * @param patientInfo String containing the new information of the patient","lastModifiedDate":"2021-11-07"},{"lineNumber":114,"author":{"gitId":"justinfidelis"},"content":"     * @return String indicating that the specified patient\u0027s information has been edited","lastModifiedDate":"2021-11-07"},{"lineNumber":115,"author":{"gitId":"justinfidelis"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":116,"author":{"gitId":"justinfidelis"},"content":"    public static String getEditPatientMessage(int id, String patientInfo) {","lastModifiedDate":"2021-11-07"},{"lineNumber":117,"author":{"gitId":"justinfidelis"},"content":"        return getEditPersonMessage(PATIENT, id, patientInfo);","lastModifiedDate":"2021-11-07"},{"lineNumber":118,"author":{"gitId":"EricBryann"},"content":"    }","lastModifiedDate":"2021-11-01"},{"lineNumber":119,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":120,"author":{"gitId":"justinfidelis"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":121,"author":{"gitId":"justinfidelis"},"content":"     * Returns a message String indicating that the patient with the specified ID is now set to hidden.","lastModifiedDate":"2021-11-07"},{"lineNumber":122,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-11-07"},{"lineNumber":123,"author":{"gitId":"justinfidelis"},"content":"     * @param id ID of the patient who was set to shown","lastModifiedDate":"2021-11-07"},{"lineNumber":124,"author":{"gitId":"justinfidelis"},"content":"     * @return String indicating that the patient with the specified ID is now set to hidden","lastModifiedDate":"2021-11-07"},{"lineNumber":125,"author":{"gitId":"justinfidelis"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":126,"author":{"gitId":"EricBryann"},"content":"    public static String getHidePatientMessage(int id) {","lastModifiedDate":"2021-11-02"},{"lineNumber":127,"author":{"gitId":"EricBryann"},"content":"        return getHidePersonMessage(PATIENT, id);","lastModifiedDate":"2021-11-02"},{"lineNumber":128,"author":{"gitId":"EricBryann"},"content":"    }","lastModifiedDate":"2021-11-01"},{"lineNumber":129,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":130,"author":{"gitId":"justinfidelis"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":131,"author":{"gitId":"justinfidelis"},"content":"     * Returns a message String indicating that the patient with the specified ID is now set to shown.","lastModifiedDate":"2021-11-07"},{"lineNumber":132,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-11-07"},{"lineNumber":133,"author":{"gitId":"justinfidelis"},"content":"     * @param id ID of the patient who was set to shown","lastModifiedDate":"2021-11-07"},{"lineNumber":134,"author":{"gitId":"justinfidelis"},"content":"     * @return String indicating that the patient with the specified ID is now shown","lastModifiedDate":"2021-11-07"},{"lineNumber":135,"author":{"gitId":"justinfidelis"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":136,"author":{"gitId":"EricBryann"},"content":"    public static String getShowPatientMessage(int id) {","lastModifiedDate":"2021-11-02"},{"lineNumber":137,"author":{"gitId":"EricBryann"},"content":"        return getShowPersonMessage(PATIENT, id);","lastModifiedDate":"2021-11-02"},{"lineNumber":138,"author":{"gitId":"EricBryann"},"content":"    }","lastModifiedDate":"2021-11-01"},{"lineNumber":139,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":140,"author":{"gitId":"justinfidelis"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":141,"author":{"gitId":"justinfidelis"},"content":"     * Returns a message String indicating the current view.","lastModifiedDate":"2021-11-07"},{"lineNumber":142,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-11-07"},{"lineNumber":143,"author":{"gitId":"justinfidelis"},"content":"     * @return String indicating the current view.","lastModifiedDate":"2021-11-07"},{"lineNumber":144,"author":{"gitId":"justinfidelis"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":145,"author":{"gitId":"EricBryann"},"content":"    public static String getCurrentViewPatientMessage() {","lastModifiedDate":"2021-11-01"},{"lineNumber":146,"author":{"gitId":"EricBryann"},"content":"        return getCurrentViewPersonMessage(PATIENT);","lastModifiedDate":"2021-11-01"},{"lineNumber":147,"author":{"gitId":"EricBryann"},"content":"    }","lastModifiedDate":"2021-11-01"},{"lineNumber":148,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":149,"author":{"gitId":"jushg"},"content":"    /**","lastModifiedDate":"2021-10-22"},{"lineNumber":150,"author":{"gitId":"justinfidelis"},"content":"     * Returns a message String containing the information of the patient.","lastModifiedDate":"2021-11-07"},{"lineNumber":151,"author":{"gitId":"jushg"},"content":"     *","lastModifiedDate":"2021-10-22"},{"lineNumber":152,"author":{"gitId":"justinfidelis"},"content":"     * @param patientInfo the info of the patient to be printed.","lastModifiedDate":"2021-11-07"},{"lineNumber":153,"author":{"gitId":"justinfidelis"},"content":"     * @return String containing the information of the patient","lastModifiedDate":"2021-11-07"},{"lineNumber":154,"author":{"gitId":"jushg"},"content":"     */","lastModifiedDate":"2021-10-22"},{"lineNumber":155,"author":{"gitId":"justinfidelis"},"content":"    public static String getViewPatientMessage(String patientInfo) {","lastModifiedDate":"2021-11-07"},{"lineNumber":156,"author":{"gitId":"justinfidelis"},"content":"        return getViewPersonMessage(PATIENT, patientInfo);","lastModifiedDate":"2021-11-07"},{"lineNumber":157,"author":{"gitId":"jushg"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":158,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":159,"author":{"gitId":"jushg"},"content":"    /**","lastModifiedDate":"2021-10-22"},{"lineNumber":160,"author":{"gitId":"justinfidelis"},"content":"     * Returns a String containing all patient information in a table.","lastModifiedDate":"2021-11-07"},{"lineNumber":161,"author":{"gitId":"jushg"},"content":"     *","lastModifiedDate":"2021-10-22"},{"lineNumber":162,"author":{"gitId":"justinfidelis"},"content":"     * @param patientListString String containing information of all patients","lastModifiedDate":"2021-11-07"},{"lineNumber":163,"author":{"gitId":"justinfidelis"},"content":"     * @return String containing all patient information in a table","lastModifiedDate":"2021-11-07"},{"lineNumber":164,"author":{"gitId":"jushg"},"content":"     */","lastModifiedDate":"2021-10-22"},{"lineNumber":165,"author":{"gitId":"justinfidelis"},"content":"    public static String getAllPatientsString(String patientListString) {","lastModifiedDate":"2021-10-24"},{"lineNumber":166,"author":{"gitId":"EricBryann"},"content":"        return getAllPersonsString(PATIENT, patientListString);","lastModifiedDate":"2021-10-26"},{"lineNumber":167,"author":{"gitId":"jushg"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":168,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":169,"author":{"gitId":"jushg"},"content":"    /**","lastModifiedDate":"2021-10-25"},{"lineNumber":170,"author":{"gitId":"justinfidelis"},"content":"     * Returns a String containing the header of the patient information table.","lastModifiedDate":"2021-11-07"},{"lineNumber":171,"author":{"gitId":"jushg"},"content":"     *","lastModifiedDate":"2021-10-25"},{"lineNumber":172,"author":{"gitId":"justinfidelis"},"content":"     * @return String containing the header of the patient information table.","lastModifiedDate":"2021-11-07"},{"lineNumber":173,"author":{"gitId":"jushg"},"content":"     */","lastModifiedDate":"2021-10-25"},{"lineNumber":174,"author":{"gitId":"jushg"},"content":"    public static String getPatientTableHeader() {","lastModifiedDate":"2021-10-22"},{"lineNumber":175,"author":{"gitId":"EricBryann"},"content":"        return getTableHeader(PATIENT);","lastModifiedDate":"2021-10-26"},{"lineNumber":176,"author":{"gitId":"jushg"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":177,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":178,"author":{"gitId":"jushg"},"content":"}","lastModifiedDate":"2021-10-22"}],"authorContributionMap":{"justinfidelis":112,"jushg":31,"EricBryann":35}},{"path":"src/main/java/medbot/ui/PersonUi.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"EricBryann"},"content":"package medbot.ui;","lastModifiedDate":"2021-10-26"},{"lineNumber":2,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":3,"author":{"gitId":"Kureans"},"content":"//@@author Kureans","lastModifiedDate":"2021-10-29"},{"lineNumber":4,"author":{"gitId":"Kureans"},"content":"public abstract class PersonUi {","lastModifiedDate":"2021-10-26"},{"lineNumber":5,"author":{"gitId":"Kureans"},"content":"    protected static final String END_LINE \u003d System.lineSeparator();","lastModifiedDate":"2021-10-26"},{"lineNumber":6,"author":{"gitId":"Kureans"},"content":"    protected static final String TABLE_ROW_SEPARATOR \u003d \" ------------------------------------------------\"","lastModifiedDate":"2021-10-26"},{"lineNumber":7,"author":{"gitId":"Kureans"},"content":"            + \"----------------------------------------------------- \" + END_LINE;","lastModifiedDate":"2021-10-26"},{"lineNumber":8,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":9,"author":{"gitId":"Kureans"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":10,"author":{"gitId":"Kureans"},"content":"     * Returns a list of valid commands.","lastModifiedDate":"2021-11-07"},{"lineNumber":11,"author":{"gitId":"Kureans"},"content":"     *","lastModifiedDate":"2021-11-07"},{"lineNumber":12,"author":{"gitId":"Kureans"},"content":"     * @return String containing a list of valid commands","lastModifiedDate":"2021-11-07"},{"lineNumber":13,"author":{"gitId":"Kureans"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":14,"author":{"gitId":"Kureans"},"content":"    protected static String getCommandList() {","lastModifiedDate":"2021-10-26"},{"lineNumber":15,"author":{"gitId":"Kureans"},"content":"        return \"Here is the list of commands:\" + END_LINE + END_LINE","lastModifiedDate":"2021-11-07"},{"lineNumber":16,"author":{"gitId":"Kureans"},"content":"                + \"help\" + END_LINE","lastModifiedDate":"2021-11-07"},{"lineNumber":17,"author":{"gitId":"Kureans"},"content":"                + \"add\" + END_LINE","lastModifiedDate":"2021-11-07"},{"lineNumber":18,"author":{"gitId":"Kureans"},"content":"                + \"delete\" + END_LINE","lastModifiedDate":"2021-11-07"},{"lineNumber":19,"author":{"gitId":"Kureans"},"content":"                + \"edit\" + END_LINE","lastModifiedDate":"2021-11-07"},{"lineNumber":20,"author":{"gitId":"Kureans"},"content":"                + \"view\" + END_LINE","lastModifiedDate":"2021-11-07"},{"lineNumber":21,"author":{"gitId":"Kureans"},"content":"                + \"list\" + END_LINE","lastModifiedDate":"2021-11-07"},{"lineNumber":22,"author":{"gitId":"Kureans"},"content":"                + \"find\" + END_LINE","lastModifiedDate":"2021-11-07"},{"lineNumber":23,"author":{"gitId":"Kureans"},"content":"                + \"hide\" + END_LINE","lastModifiedDate":"2021-11-07"},{"lineNumber":24,"author":{"gitId":"Kureans"},"content":"                + \"show\" + END_LINE","lastModifiedDate":"2021-11-07"},{"lineNumber":25,"author":{"gitId":"Kureans"},"content":"                + \"switch\" + END_LINE","lastModifiedDate":"2021-11-07"},{"lineNumber":26,"author":{"gitId":"Kureans"},"content":"                + \"get view\" + END_LINE","lastModifiedDate":"2021-11-07"},{"lineNumber":27,"author":{"gitId":"Kureans"},"content":"                + \"exit\" + END_LINE + END_LINE","lastModifiedDate":"2021-11-07"},{"lineNumber":28,"author":{"gitId":"Kureans"},"content":"                + \"To view more information about each command and their respective command formats, type:\" + END_LINE","lastModifiedDate":"2021-11-07"},{"lineNumber":29,"author":{"gitId":"Kureans"},"content":"                + \"help [COMMAND]\" + END_LINE + END_LINE","lastModifiedDate":"2021-10-26"},{"lineNumber":30,"author":{"gitId":"Kureans"},"content":"                + \"*Note that all commands will remove any \u0027|\u0027 inputs for format parsing purposes.\" + END_LINE","lastModifiedDate":"2021-11-07"},{"lineNumber":31,"author":{"gitId":"Kureans"},"content":"                + \"For expected output examples, please refer to the User Guide.\" + END_LINE;","lastModifiedDate":"2021-11-07"},{"lineNumber":32,"author":{"gitId":"Kureans"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":33,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":34,"author":{"gitId":"Kureans"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":35,"author":{"gitId":"Kureans"},"content":"     * Returns a message String with help about the list command.","lastModifiedDate":"2021-11-07"},{"lineNumber":36,"author":{"gitId":"Kureans"},"content":"     *","lastModifiedDate":"2021-11-07"},{"lineNumber":37,"author":{"gitId":"Kureans"},"content":"     * @param person String indicating the type of person","lastModifiedDate":"2021-11-07"},{"lineNumber":38,"author":{"gitId":"Kureans"},"content":"     * @return String with help about the list command","lastModifiedDate":"2021-11-07"},{"lineNumber":39,"author":{"gitId":"Kureans"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":40,"author":{"gitId":"Kureans"},"content":"    protected static String getListHelpMessage(String person) {","lastModifiedDate":"2021-10-26"},{"lineNumber":41,"author":{"gitId":"Kureans"},"content":"        return \"View information of all non-hidden \" + person + \"s.\" + END_LINE","lastModifiedDate":"2021-11-02"},{"lineNumber":42,"author":{"gitId":"Kureans"},"content":"                + \"To view only hidden \" + person + \"s, add the \u0027-h\u0027 parameter.\" + END_LINE","lastModifiedDate":"2021-11-02"},{"lineNumber":43,"author":{"gitId":"Kureans"},"content":"                + \"Format: list [-h]\" + END_LINE;","lastModifiedDate":"2021-11-02"},{"lineNumber":44,"author":{"gitId":"Kureans"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":45,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":46,"author":{"gitId":"Kureans"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":47,"author":{"gitId":"Kureans"},"content":"     * Returns a message String with help about the view command.","lastModifiedDate":"2021-11-07"},{"lineNumber":48,"author":{"gitId":"Kureans"},"content":"     *","lastModifiedDate":"2021-11-07"},{"lineNumber":49,"author":{"gitId":"Kureans"},"content":"     * @param person String indicating the type of person","lastModifiedDate":"2021-11-07"},{"lineNumber":50,"author":{"gitId":"Kureans"},"content":"     * @return String with help about the view command","lastModifiedDate":"2021-11-07"},{"lineNumber":51,"author":{"gitId":"Kureans"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":52,"author":{"gitId":"Kureans"},"content":"    protected static String getViewHelpMessage(String person) {","lastModifiedDate":"2021-10-26"},{"lineNumber":53,"author":{"gitId":"Kureans"},"content":"        String uppercasePerson \u003d person.toUpperCase();","lastModifiedDate":"2021-11-07"},{"lineNumber":54,"author":{"gitId":"Kureans"},"content":"        return \"View a \" + person + \"\u0027s personal information.\" + END_LINE","lastModifiedDate":"2021-10-31"},{"lineNumber":55,"author":{"gitId":"Kureans"},"content":"                + \"Format: view \" + uppercasePerson + \"_ID\" + END_LINE;","lastModifiedDate":"2021-10-29"},{"lineNumber":56,"author":{"gitId":"Kureans"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":57,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":58,"author":{"gitId":"Kureans"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":59,"author":{"gitId":"Kureans"},"content":"     * Returns a message String with help about the add command.","lastModifiedDate":"2021-11-07"},{"lineNumber":60,"author":{"gitId":"Kureans"},"content":"     *","lastModifiedDate":"2021-11-07"},{"lineNumber":61,"author":{"gitId":"Kureans"},"content":"     * @param person String indicating the type of person","lastModifiedDate":"2021-11-07"},{"lineNumber":62,"author":{"gitId":"Kureans"},"content":"     * @return String with help about the add command","lastModifiedDate":"2021-11-07"},{"lineNumber":63,"author":{"gitId":"Kureans"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":64,"author":{"gitId":"Kureans"},"content":"    protected static String getAddHelpMessage(String person) {","lastModifiedDate":"2021-10-26"},{"lineNumber":65,"author":{"gitId":"Kureans"},"content":"        String uppercasePerson \u003d person.toUpperCase();","lastModifiedDate":"2021-11-07"},{"lineNumber":66,"author":{"gitId":"Kureans"},"content":"        return \"Adds a \" + person + \" to the \" + person + \" list.\" + END_LINE","lastModifiedDate":"2021-10-31"},{"lineNumber":67,"author":{"gitId":"Kureans"},"content":"                + \"Format:\" + END_LINE","lastModifiedDate":"2021-10-26"},{"lineNumber":68,"author":{"gitId":"Kureans"},"content":"                + \"add i/\" + uppercasePerson + \"_IC [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS]\"","lastModifiedDate":"2021-10-29"},{"lineNumber":69,"author":{"gitId":"Kureans"},"content":"                + END_LINE;","lastModifiedDate":"2021-10-29"},{"lineNumber":70,"author":{"gitId":"Kureans"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":71,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":72,"author":{"gitId":"Kureans"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":73,"author":{"gitId":"Kureans"},"content":"     * Returns a message String with help about the edit command.","lastModifiedDate":"2021-11-07"},{"lineNumber":74,"author":{"gitId":"Kureans"},"content":"     *","lastModifiedDate":"2021-11-07"},{"lineNumber":75,"author":{"gitId":"Kureans"},"content":"     * @param person String indicating the type of person","lastModifiedDate":"2021-11-07"},{"lineNumber":76,"author":{"gitId":"Kureans"},"content":"     * @return String with help about the edit command","lastModifiedDate":"2021-11-07"},{"lineNumber":77,"author":{"gitId":"Kureans"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":78,"author":{"gitId":"Kureans"},"content":"    protected static String getEditHelpMessage(String person) {","lastModifiedDate":"2021-10-26"},{"lineNumber":79,"author":{"gitId":"Kureans"},"content":"        String uppercasePerson \u003d person.toUpperCase();","lastModifiedDate":"2021-11-07"},{"lineNumber":80,"author":{"gitId":"Kureans"},"content":"        return \"Edit the personal and medical information of a \" + person + \" in the list.\" + END_LINE","lastModifiedDate":"2021-10-26"},{"lineNumber":81,"author":{"gitId":"Kureans"},"content":"                + \"Format:\" + END_LINE","lastModifiedDate":"2021-10-26"},{"lineNumber":82,"author":{"gitId":"Kureans"},"content":"                + \"edit \" + uppercasePerson + \"_ID [i/\" + uppercasePerson + \"_IC] [n/NAME] [p/PHONE_NUMBER]\"","lastModifiedDate":"2021-10-31"},{"lineNumber":83,"author":{"gitId":"Kureans"},"content":"                + \" [e/EMAIL] [a/ADDRESS]\" + END_LINE;","lastModifiedDate":"2021-10-29"},{"lineNumber":84,"author":{"gitId":"Kureans"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":85,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":86,"author":{"gitId":"Kureans"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":87,"author":{"gitId":"Kureans"},"content":"     * Returns a message String with help about the find command.","lastModifiedDate":"2021-11-07"},{"lineNumber":88,"author":{"gitId":"Kureans"},"content":"     *","lastModifiedDate":"2021-11-07"},{"lineNumber":89,"author":{"gitId":"Kureans"},"content":"     * @param person String indicating the type of person","lastModifiedDate":"2021-11-07"},{"lineNumber":90,"author":{"gitId":"Kureans"},"content":"     * @return String with help about the find command","lastModifiedDate":"2021-11-07"},{"lineNumber":91,"author":{"gitId":"Kureans"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":92,"author":{"gitId":"Kureans"},"content":"    protected static String getFindHelpMessage(String person) {","lastModifiedDate":"2021-11-07"},{"lineNumber":93,"author":{"gitId":"Kureans"},"content":"        String uppercasePerson \u003d person.toUpperCase();","lastModifiedDate":"2021-11-07"},{"lineNumber":94,"author":{"gitId":"Kureans"},"content":"        return \"Find \" + person + \"s from the list based on given attributes.\" + END_LINE","lastModifiedDate":"2021-10-26"},{"lineNumber":95,"author":{"gitId":"Kureans"},"content":"                + \"Format:\" + END_LINE","lastModifiedDate":"2021-10-26"},{"lineNumber":96,"author":{"gitId":"Kureans"},"content":"                + \"find [i/\" + uppercasePerson + \"_IC] [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS]\" + END_LINE","lastModifiedDate":"2021-10-26"},{"lineNumber":97,"author":{"gitId":"Kureans"},"content":"                + \"    * The attributes do not have to be in full.\" + END_LINE","lastModifiedDate":"2021-10-26"},{"lineNumber":98,"author":{"gitId":"Kureans"},"content":"                + \"    * At least one attribute must be present.\" + END_LINE;","lastModifiedDate":"2021-10-29"},{"lineNumber":99,"author":{"gitId":"Kureans"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":100,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":101,"author":{"gitId":"Kureans"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":102,"author":{"gitId":"Kureans"},"content":"     * Returns a message String with help about the delete command.","lastModifiedDate":"2021-11-07"},{"lineNumber":103,"author":{"gitId":"Kureans"},"content":"     *","lastModifiedDate":"2021-11-07"},{"lineNumber":104,"author":{"gitId":"Kureans"},"content":"     * @param person String indicating the type of person","lastModifiedDate":"2021-11-07"},{"lineNumber":105,"author":{"gitId":"Kureans"},"content":"     * @return String with help about the delete command","lastModifiedDate":"2021-11-07"},{"lineNumber":106,"author":{"gitId":"Kureans"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":107,"author":{"gitId":"Kureans"},"content":"    protected static String getDeleteHelpMessage(String person) {","lastModifiedDate":"2021-11-07"},{"lineNumber":108,"author":{"gitId":"Kureans"},"content":"        String uppercasePerson \u003d person.toUpperCase();","lastModifiedDate":"2021-11-07"},{"lineNumber":109,"author":{"gitId":"Kureans"},"content":"        return \"Deletes a \" + person + \" from the list.\" + END_LINE","lastModifiedDate":"2021-10-31"},{"lineNumber":110,"author":{"gitId":"Kureans"},"content":"                + \"Format:\" + END_LINE","lastModifiedDate":"2021-10-26"},{"lineNumber":111,"author":{"gitId":"Kureans"},"content":"                + \"delete \" + uppercasePerson + \"_ID\" + END_LINE;","lastModifiedDate":"2021-10-29"},{"lineNumber":112,"author":{"gitId":"Kureans"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":113,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":114,"author":{"gitId":"EricBryann"},"content":"    //@@author EricBryann","lastModifiedDate":"2021-10-29"},{"lineNumber":115,"author":{"gitId":"EricBryann"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":116,"author":{"gitId":"EricBryann"},"content":"     * Returns a message String with help about the hide command.","lastModifiedDate":"2021-11-07"},{"lineNumber":117,"author":{"gitId":"EricBryann"},"content":"     *","lastModifiedDate":"2021-11-07"},{"lineNumber":118,"author":{"gitId":"EricBryann"},"content":"     * @param person String indicating the type of person","lastModifiedDate":"2021-11-07"},{"lineNumber":119,"author":{"gitId":"EricBryann"},"content":"     * @return String with help about the hide command","lastModifiedDate":"2021-11-07"},{"lineNumber":120,"author":{"gitId":"EricBryann"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":121,"author":{"gitId":"EricBryann"},"content":"    protected static String getHideHelpMessage(String person) {","lastModifiedDate":"2021-11-07"},{"lineNumber":122,"author":{"gitId":"EricBryann"},"content":"        String uppercasePerson \u003d person.toUpperCase();","lastModifiedDate":"2021-11-07"},{"lineNumber":123,"author":{"gitId":"EricBryann"},"content":"        return \"Hides a \" + person + \" from the list.\" + END_LINE","lastModifiedDate":"2021-11-02"},{"lineNumber":124,"author":{"gitId":"EricBryann"},"content":"                + \"Format:\" + END_LINE","lastModifiedDate":"2021-10-26"},{"lineNumber":125,"author":{"gitId":"EricBryann"},"content":"                + \"hide \" + uppercasePerson + \"_ID\" + END_LINE;","lastModifiedDate":"2021-11-02"},{"lineNumber":126,"author":{"gitId":"EricBryann"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":127,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":128,"author":{"gitId":"EricBryann"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":129,"author":{"gitId":"EricBryann"},"content":"     * Returns a message String with help about the show command.","lastModifiedDate":"2021-11-07"},{"lineNumber":130,"author":{"gitId":"EricBryann"},"content":"     *","lastModifiedDate":"2021-11-07"},{"lineNumber":131,"author":{"gitId":"EricBryann"},"content":"     * @param person String indicating the type of person","lastModifiedDate":"2021-11-07"},{"lineNumber":132,"author":{"gitId":"EricBryann"},"content":"     * @return String with help about the show command","lastModifiedDate":"2021-11-07"},{"lineNumber":133,"author":{"gitId":"EricBryann"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":134,"author":{"gitId":"EricBryann"},"content":"    protected static String getShowHelpMessage(String person) {","lastModifiedDate":"2021-11-07"},{"lineNumber":135,"author":{"gitId":"EricBryann"},"content":"        String uppercasePerson \u003d person.toUpperCase();","lastModifiedDate":"2021-11-07"},{"lineNumber":136,"author":{"gitId":"EricBryann"},"content":"        return \"Show a \" + person + \" from the list.\" + END_LINE","lastModifiedDate":"2021-11-02"},{"lineNumber":137,"author":{"gitId":"EricBryann"},"content":"                + \"Format:\" + END_LINE","lastModifiedDate":"2021-10-26"},{"lineNumber":138,"author":{"gitId":"EricBryann"},"content":"                + \"show \" + uppercasePerson + \"_ID\" + END_LINE;","lastModifiedDate":"2021-11-02"},{"lineNumber":139,"author":{"gitId":"EricBryann"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":140,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":141,"author":{"gitId":"EricBryann"},"content":"    /**","lastModifiedDate":"2021-10-26"},{"lineNumber":142,"author":{"gitId":"EricBryann"},"content":"     * Returns a String containing all persons\u0027 information in a table.","lastModifiedDate":"2021-11-07"},{"lineNumber":143,"author":{"gitId":"EricBryann"},"content":"     *","lastModifiedDate":"2021-10-26"},{"lineNumber":144,"author":{"gitId":"EricBryann"},"content":"     * @param person String indicating the type of person","lastModifiedDate":"2021-11-07"},{"lineNumber":145,"author":{"gitId":"EricBryann"},"content":"     * @param personListString String containing information of all persons.","lastModifiedDate":"2021-10-26"},{"lineNumber":146,"author":{"gitId":"EricBryann"},"content":"     * @return String containing all Persons\u0027 information.","lastModifiedDate":"2021-11-07"},{"lineNumber":147,"author":{"gitId":"EricBryann"},"content":"     */","lastModifiedDate":"2021-10-26"},{"lineNumber":148,"author":{"gitId":"EricBryann"},"content":"    protected static String getAllPersonsString(String person, String personListString) {","lastModifiedDate":"2021-11-07"},{"lineNumber":149,"author":{"gitId":"EricBryann"},"content":"        String output \u003d getTableHeader(person);","lastModifiedDate":"2021-10-26"},{"lineNumber":150,"author":{"gitId":"EricBryann"},"content":"        output +\u003d personListString;","lastModifiedDate":"2021-10-26"},{"lineNumber":151,"author":{"gitId":"EricBryann"},"content":"        output +\u003d TABLE_ROW_SEPARATOR;","lastModifiedDate":"2021-10-26"},{"lineNumber":152,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":153,"author":{"gitId":"EricBryann"},"content":"        return output;","lastModifiedDate":"2021-10-26"},{"lineNumber":154,"author":{"gitId":"EricBryann"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":155,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":156,"author":{"gitId":"EricBryann"},"content":"    /**","lastModifiedDate":"2021-10-26"},{"lineNumber":157,"author":{"gitId":"EricBryann"},"content":"     * Returns a String containing the header of the person information table.","lastModifiedDate":"2021-11-07"},{"lineNumber":158,"author":{"gitId":"EricBryann"},"content":"     *","lastModifiedDate":"2021-10-26"},{"lineNumber":159,"author":{"gitId":"EricBryann"},"content":"     * @param person String indicating the type of person","lastModifiedDate":"2021-11-07"},{"lineNumber":160,"author":{"gitId":"EricBryann"},"content":"     * @return String containing the header of the person information table.","lastModifiedDate":"2021-11-07"},{"lineNumber":161,"author":{"gitId":"EricBryann"},"content":"     */","lastModifiedDate":"2021-10-26"},{"lineNumber":162,"author":{"gitId":"EricBryann"},"content":"    protected static String getTableHeader(String person) {","lastModifiedDate":"2021-11-07"},{"lineNumber":163,"author":{"gitId":"EricBryann"},"content":"        String uppercasePerson \u003d person.toUpperCase();","lastModifiedDate":"2021-11-07"},{"lineNumber":164,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":165,"author":{"gitId":"EricBryann"},"content":"        String output \u003d \"Here is a list of all \" + person + \"s:\" + END_LINE;","lastModifiedDate":"2021-10-26"},{"lineNumber":166,"author":{"gitId":"EricBryann"},"content":"        output +\u003d \"For full details of each \" + person + \", please use the command \\\"view \" + uppercasePerson","lastModifiedDate":"2021-10-26"},{"lineNumber":167,"author":{"gitId":"EricBryann"},"content":"                + \"_ID\\\"\" + END_LINE;","lastModifiedDate":"2021-10-26"},{"lineNumber":168,"author":{"gitId":"EricBryann"},"content":"        output +\u003d TABLE_ROW_SEPARATOR;","lastModifiedDate":"2021-10-26"},{"lineNumber":169,"author":{"gitId":"EricBryann"},"content":"        output +\u003d \" |  ID  | IC Number |         Name         |\"","lastModifiedDate":"2021-10-26"},{"lineNumber":170,"author":{"gitId":"EricBryann"},"content":"                + \" Phone No. |        Email         |       Address        | \" + END_LINE;","lastModifiedDate":"2021-10-26"},{"lineNumber":171,"author":{"gitId":"EricBryann"},"content":"        output +\u003d TABLE_ROW_SEPARATOR;","lastModifiedDate":"2021-10-26"},{"lineNumber":172,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":173,"author":{"gitId":"EricBryann"},"content":"        return output;","lastModifiedDate":"2021-10-26"},{"lineNumber":174,"author":{"gitId":"EricBryann"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":175,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":176,"author":{"gitId":"EricBryann"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":177,"author":{"gitId":"EricBryann"},"content":"     * Returns a message String indicating that the person with the specified information has been added","lastModifiedDate":"2021-11-07"},{"lineNumber":178,"author":{"gitId":"EricBryann"},"content":"     * to the system.","lastModifiedDate":"2021-11-07"},{"lineNumber":179,"author":{"gitId":"EricBryann"},"content":"     *","lastModifiedDate":"2021-11-07"},{"lineNumber":180,"author":{"gitId":"EricBryann"},"content":"     * @param person String indicating the type of person","lastModifiedDate":"2021-11-07"},{"lineNumber":181,"author":{"gitId":"EricBryann"},"content":"     * @param personInfo String containing the information about the person","lastModifiedDate":"2021-11-07"},{"lineNumber":182,"author":{"gitId":"EricBryann"},"content":"     * @return String indicating that the specified person has been added to the system","lastModifiedDate":"2021-11-07"},{"lineNumber":183,"author":{"gitId":"EricBryann"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":184,"author":{"gitId":"EricBryann"},"content":"    protected static String getAddPersonMessage(String person, String personInfo) {","lastModifiedDate":"2021-11-07"},{"lineNumber":185,"author":{"gitId":"EricBryann"},"content":"        return \"Added \" + person + \" with \" + personInfo + END_LINE;","lastModifiedDate":"2021-11-02"},{"lineNumber":186,"author":{"gitId":"EricBryann"},"content":"    }","lastModifiedDate":"2021-11-01"},{"lineNumber":187,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":188,"author":{"gitId":"EricBryann"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":189,"author":{"gitId":"EricBryann"},"content":"     * Returns a message String indicating that the person with the specified ID has been deleted from the system.","lastModifiedDate":"2021-11-07"},{"lineNumber":190,"author":{"gitId":"EricBryann"},"content":"     *","lastModifiedDate":"2021-11-07"},{"lineNumber":191,"author":{"gitId":"EricBryann"},"content":"     * @param person String indicating the type of person","lastModifiedDate":"2021-11-07"},{"lineNumber":192,"author":{"gitId":"EricBryann"},"content":"     * @param id ID of the person who was removed from the system","lastModifiedDate":"2021-11-07"},{"lineNumber":193,"author":{"gitId":"EricBryann"},"content":"     * @return String indicating that the specified person has been deleted from the system","lastModifiedDate":"2021-11-07"},{"lineNumber":194,"author":{"gitId":"EricBryann"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":195,"author":{"gitId":"EricBryann"},"content":"    protected static String getDeletePersonMessage(String person, int id) {","lastModifiedDate":"2021-11-07"},{"lineNumber":196,"author":{"gitId":"EricBryann"},"content":"        String uppercasePerson \u003d capitalizeFirstLetter(person);","lastModifiedDate":"2021-11-01"},{"lineNumber":197,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":198,"author":{"gitId":"EricBryann"},"content":"        return uppercasePerson + \" with ID \" + id + \" deleted from system.\" + END_LINE;","lastModifiedDate":"2021-11-07"},{"lineNumber":199,"author":{"gitId":"EricBryann"},"content":"    }","lastModifiedDate":"2021-11-01"},{"lineNumber":200,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":201,"author":{"gitId":"EricBryann"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":202,"author":{"gitId":"EricBryann"},"content":"     * Returns a message String indicating that the person with the specified ID has had their information edited","lastModifiedDate":"2021-11-07"},{"lineNumber":203,"author":{"gitId":"EricBryann"},"content":"     * to the specified information.","lastModifiedDate":"2021-11-07"},{"lineNumber":204,"author":{"gitId":"EricBryann"},"content":"     *","lastModifiedDate":"2021-11-07"},{"lineNumber":205,"author":{"gitId":"EricBryann"},"content":"     * @param person String indicating the type of person","lastModifiedDate":"2021-11-07"},{"lineNumber":206,"author":{"gitId":"EricBryann"},"content":"     * @param id ID of the person whose information was edited","lastModifiedDate":"2021-11-07"},{"lineNumber":207,"author":{"gitId":"EricBryann"},"content":"     * @param info String containing the new information of the person","lastModifiedDate":"2021-11-07"},{"lineNumber":208,"author":{"gitId":"EricBryann"},"content":"     * @return String indicating that the specified person\u0027s information has been edited","lastModifiedDate":"2021-11-07"},{"lineNumber":209,"author":{"gitId":"EricBryann"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":210,"author":{"gitId":"EricBryann"},"content":"    protected static String getEditPersonMessage(String person, int id, String info) {","lastModifiedDate":"2021-11-07"},{"lineNumber":211,"author":{"gitId":"EricBryann"},"content":"        return \"The information of the \" + person + \" with ID \" + id + \" has been edited to:\" + END_LINE + END_LINE","lastModifiedDate":"2021-11-07"},{"lineNumber":212,"author":{"gitId":"EricBryann"},"content":"                + info + END_LINE;","lastModifiedDate":"2021-11-01"},{"lineNumber":213,"author":{"gitId":"EricBryann"},"content":"    }","lastModifiedDate":"2021-11-01"},{"lineNumber":214,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":215,"author":{"gitId":"EricBryann"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":216,"author":{"gitId":"EricBryann"},"content":"     * Returns a message String containing the information of the person.","lastModifiedDate":"2021-11-07"},{"lineNumber":217,"author":{"gitId":"EricBryann"},"content":"     *","lastModifiedDate":"2021-11-07"},{"lineNumber":218,"author":{"gitId":"EricBryann"},"content":"     * @param person String indicating the type of person","lastModifiedDate":"2021-11-07"},{"lineNumber":219,"author":{"gitId":"EricBryann"},"content":"     * @param personInfo the info of the person to be printed.","lastModifiedDate":"2021-11-07"},{"lineNumber":220,"author":{"gitId":"EricBryann"},"content":"     * @return String containing the information of the person","lastModifiedDate":"2021-11-07"},{"lineNumber":221,"author":{"gitId":"EricBryann"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":222,"author":{"gitId":"EricBryann"},"content":"    protected static String getViewPersonMessage(String person, String personInfo) {","lastModifiedDate":"2021-11-07"},{"lineNumber":223,"author":{"gitId":"EricBryann"},"content":"        return \"Here\u0027s the requested \" + person + \" information:\" + END_LINE + END_LINE","lastModifiedDate":"2021-11-08"},{"lineNumber":224,"author":{"gitId":"EricBryann"},"content":"                + personInfo + END_LINE;","lastModifiedDate":"2021-11-07"},{"lineNumber":225,"author":{"gitId":"EricBryann"},"content":"    }","lastModifiedDate":"2021-11-07"},{"lineNumber":226,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":227,"author":{"gitId":"EricBryann"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":228,"author":{"gitId":"EricBryann"},"content":"     * Returns a message String indicating that the person with the specified ID is now set to hidden.","lastModifiedDate":"2021-11-07"},{"lineNumber":229,"author":{"gitId":"EricBryann"},"content":"     *","lastModifiedDate":"2021-11-07"},{"lineNumber":230,"author":{"gitId":"EricBryann"},"content":"     * @param person String indicating the type of person","lastModifiedDate":"2021-11-07"},{"lineNumber":231,"author":{"gitId":"EricBryann"},"content":"     * @param id ID of the person who was set to shown","lastModifiedDate":"2021-11-07"},{"lineNumber":232,"author":{"gitId":"EricBryann"},"content":"     * @return String indicating that the person with the specified ID is now set to hidden","lastModifiedDate":"2021-11-07"},{"lineNumber":233,"author":{"gitId":"EricBryann"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":234,"author":{"gitId":"EricBryann"},"content":"    protected static String getHidePersonMessage(String person, int id) {","lastModifiedDate":"2021-11-07"},{"lineNumber":235,"author":{"gitId":"EricBryann"},"content":"        return \"The \" + person + \" with ID \" + id + \" is now hidden.\" + END_LINE;","lastModifiedDate":"2021-11-08"},{"lineNumber":236,"author":{"gitId":"EricBryann"},"content":"    }","lastModifiedDate":"2021-11-01"},{"lineNumber":237,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":238,"author":{"gitId":"EricBryann"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":239,"author":{"gitId":"EricBryann"},"content":"     * Returns a message String indicating that the person with the specified ID is now set to shown.","lastModifiedDate":"2021-11-07"},{"lineNumber":240,"author":{"gitId":"EricBryann"},"content":"     *","lastModifiedDate":"2021-11-07"},{"lineNumber":241,"author":{"gitId":"EricBryann"},"content":"     * @param person String indicating the type of person","lastModifiedDate":"2021-11-07"},{"lineNumber":242,"author":{"gitId":"EricBryann"},"content":"     * @param id ID of the person who was set to shown","lastModifiedDate":"2021-11-07"},{"lineNumber":243,"author":{"gitId":"EricBryann"},"content":"     * @return String indicating that the person with the specified ID is now shown","lastModifiedDate":"2021-11-07"},{"lineNumber":244,"author":{"gitId":"EricBryann"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":245,"author":{"gitId":"EricBryann"},"content":"    protected static String getShowPersonMessage(String person, int id) {","lastModifiedDate":"2021-11-07"},{"lineNumber":246,"author":{"gitId":"EricBryann"},"content":"        return \"The \" + person + \" with ID \" + id + \" is now not hidden.\" + END_LINE;","lastModifiedDate":"2021-11-08"},{"lineNumber":247,"author":{"gitId":"EricBryann"},"content":"    }","lastModifiedDate":"2021-11-01"},{"lineNumber":248,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":249,"author":{"gitId":"EricBryann"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":250,"author":{"gitId":"EricBryann"},"content":"     * Returns a message String indicating the current view.","lastModifiedDate":"2021-11-07"},{"lineNumber":251,"author":{"gitId":"EricBryann"},"content":"     *","lastModifiedDate":"2021-11-07"},{"lineNumber":252,"author":{"gitId":"EricBryann"},"content":"     * @param person String indicating the type of person","lastModifiedDate":"2021-11-07"},{"lineNumber":253,"author":{"gitId":"EricBryann"},"content":"     * @return String indicating the current view.","lastModifiedDate":"2021-11-07"},{"lineNumber":254,"author":{"gitId":"EricBryann"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":255,"author":{"gitId":"EricBryann"},"content":"    protected static String getCurrentViewPersonMessage(String person) {","lastModifiedDate":"2021-11-07"},{"lineNumber":256,"author":{"gitId":"EricBryann"},"content":"        return \"You are currently in the \" + capitalizeFirstLetter(person) + \" Management view.\";","lastModifiedDate":"2021-11-07"},{"lineNumber":257,"author":{"gitId":"EricBryann"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":258,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":259,"author":{"gitId":"EricBryann"},"content":"    private static String capitalizeFirstLetter(String word) {","lastModifiedDate":"2021-10-26"},{"lineNumber":260,"author":{"gitId":"EricBryann"},"content":"        return word.substring(0, 1).toUpperCase() + word.substring(1);","lastModifiedDate":"2021-10-26"},{"lineNumber":261,"author":{"gitId":"EricBryann"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":262,"author":{"gitId":"EricBryann"},"content":"}","lastModifiedDate":"2021-10-26"}],"authorContributionMap":{"EricBryann":151,"Kureans":111}},{"path":"src/main/java/medbot/ui/SchedulerUi.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jushg"},"content":"package medbot.ui;","lastModifiedDate":"2021-10-22"},{"lineNumber":2,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":3,"author":{"gitId":"jushg"},"content":"public class SchedulerUi {","lastModifiedDate":"2021-10-22"},{"lineNumber":4,"author":{"gitId":"justinfidelis"},"content":"    private static final String END_LINE \u003d System.lineSeparator();","lastModifiedDate":"2021-10-26"},{"lineNumber":5,"author":{"gitId":"justinfidelis"},"content":"    private static final String TABLE_ROW_SEPARATOR \u003d \" ------------------------------------------------\"","lastModifiedDate":"2021-10-26"},{"lineNumber":6,"author":{"gitId":"justinfidelis"},"content":"            + \"-------------------------------------------------- \" + END_LINE;","lastModifiedDate":"2021-10-26"},{"lineNumber":7,"author":{"gitId":"justinfidelis"},"content":"    private static final String APPOINTMENT_TABLE_HEADER \u003d \" |  ID  |     Date/Time     | Patient ID |\"","lastModifiedDate":"2021-10-26"},{"lineNumber":8,"author":{"gitId":"justinfidelis"},"content":"            + \"     Patient Name     | Staff ID |      Staff Name      | \" + END_LINE;","lastModifiedDate":"2021-10-26"},{"lineNumber":9,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":10,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":11,"author":{"gitId":"Kureans"},"content":"    //@@author Kureans","lastModifiedDate":"2021-11-07"},{"lineNumber":12,"author":{"gitId":"Kureans"},"content":"    public static String getSchedulerCommandList() {","lastModifiedDate":"2021-11-07"},{"lineNumber":13,"author":{"gitId":"Kureans"},"content":"        return \"Here is the list of commands:\" + END_LINE + END_LINE","lastModifiedDate":"2021-11-07"},{"lineNumber":14,"author":{"gitId":"Kureans"},"content":"                + \"help\" + END_LINE","lastModifiedDate":"2021-11-07"},{"lineNumber":15,"author":{"gitId":"Kureans"},"content":"                + \"add\" + END_LINE","lastModifiedDate":"2021-11-07"},{"lineNumber":16,"author":{"gitId":"Kureans"},"content":"                + \"delete\" + END_LINE","lastModifiedDate":"2021-11-07"},{"lineNumber":17,"author":{"gitId":"Kureans"},"content":"                + \"edit\" + END_LINE","lastModifiedDate":"2021-11-07"},{"lineNumber":18,"author":{"gitId":"Kureans"},"content":"                + \"view\" + END_LINE","lastModifiedDate":"2021-11-07"},{"lineNumber":19,"author":{"gitId":"Kureans"},"content":"                + \"list\" + END_LINE","lastModifiedDate":"2021-11-07"},{"lineNumber":20,"author":{"gitId":"Kureans"},"content":"                + \"find\" + END_LINE","lastModifiedDate":"2021-11-07"},{"lineNumber":21,"author":{"gitId":"Kureans"},"content":"                + \"switch\" + END_LINE","lastModifiedDate":"2021-11-07"},{"lineNumber":22,"author":{"gitId":"Kureans"},"content":"                + \"get view\" + END_LINE","lastModifiedDate":"2021-11-07"},{"lineNumber":23,"author":{"gitId":"Kureans"},"content":"                + \"exit\" + END_LINE + END_LINE","lastModifiedDate":"2021-11-07"},{"lineNumber":24,"author":{"gitId":"Kureans"},"content":"                + \"To view more information about each command and their respective command formats, type:\" + END_LINE","lastModifiedDate":"2021-11-07"},{"lineNumber":25,"author":{"gitId":"Kureans"},"content":"                + \"help [COMMAND]\" + END_LINE + END_LINE","lastModifiedDate":"2021-11-07"},{"lineNumber":26,"author":{"gitId":"Kureans"},"content":"                + \"*Note that all commands will remove any \u0027|\u0027 inputs for format parsing purposes.\" + END_LINE","lastModifiedDate":"2021-11-07"},{"lineNumber":27,"author":{"gitId":"Kureans"},"content":"                + \"For expected output examples, please refer to the actual user guide.\" + END_LINE;","lastModifiedDate":"2021-11-07"},{"lineNumber":28,"author":{"gitId":"Kureans"},"content":"    }","lastModifiedDate":"2021-11-07"},{"lineNumber":29,"author":{"gitId":"Kureans"},"content":"    //@@author","lastModifiedDate":"2021-11-07"},{"lineNumber":30,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":31,"author":{"gitId":"justinfidelis"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":32,"author":{"gitId":"justinfidelis"},"content":"     * Returns a message String with help about the add appointment command.","lastModifiedDate":"2021-11-07"},{"lineNumber":33,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-11-07"},{"lineNumber":34,"author":{"gitId":"justinfidelis"},"content":"     * @return String with help about the add appointment command","lastModifiedDate":"2021-11-07"},{"lineNumber":35,"author":{"gitId":"justinfidelis"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":36,"author":{"gitId":"justinfidelis"},"content":"    public static String getAddAppointmentHelpMessage() {","lastModifiedDate":"2021-11-07"},{"lineNumber":37,"author":{"gitId":"Kureans"},"content":"        return \"Adds an appointment to the list. MedBot will check if the appointment clashes with \" + END_LINE","lastModifiedDate":"2021-10-29"},{"lineNumber":38,"author":{"gitId":"Kureans"},"content":"                + \"others and display an error message if it does.\" + END_LINE","lastModifiedDate":"2021-10-29"},{"lineNumber":39,"author":{"gitId":"Kureans"},"content":"                + \"Format: `add p/PATIENT_ID s/STAFF_ID d/DATE_TIME`\" + END_LINE","lastModifiedDate":"2021-10-29"},{"lineNumber":40,"author":{"gitId":"justinfidelis"},"content":"                + \"The format for `DATE_TIME` is `DDMMYY hhmm`.\" + END_LINE","lastModifiedDate":"2021-11-07"},{"lineNumber":41,"author":{"gitId":"justinfidelis"},"content":"                + \"E.g., 9 February 2021, 0800HRS should be written as `090221 0800`\" + END_LINE","lastModifiedDate":"2021-11-07"},{"lineNumber":42,"author":{"gitId":"Kureans"},"content":"                + \"Do note that the appointments are managed at an hourly basis. For example, \" + END_LINE","lastModifiedDate":"2021-10-29"},{"lineNumber":43,"author":{"gitId":"Kureans"},"content":"                + \"any appointments set to any time between 0800HRS and 0859HRS will be treated as \" + END_LINE","lastModifiedDate":"2021-10-29"},{"lineNumber":44,"author":{"gitId":"Kureans"},"content":"                + \"an appointment from 0800HRS to 0859HRS. No subsequent appointment can then be scheduled \" + END_LINE","lastModifiedDate":"2021-10-29"},{"lineNumber":45,"author":{"gitId":"Kureans"},"content":"                + \"for either the patient and the medical staff during that window.\" + END_LINE;","lastModifiedDate":"2021-10-29"},{"lineNumber":46,"author":{"gitId":"jushg"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":47,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":48,"author":{"gitId":"justinfidelis"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":49,"author":{"gitId":"justinfidelis"},"content":"     * Returns a message String with help about the edit appointment command.","lastModifiedDate":"2021-11-07"},{"lineNumber":50,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-11-07"},{"lineNumber":51,"author":{"gitId":"justinfidelis"},"content":"     * @return String with help about the edit appointment command","lastModifiedDate":"2021-11-07"},{"lineNumber":52,"author":{"gitId":"justinfidelis"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":53,"author":{"gitId":"justinfidelis"},"content":"    public static String getEditAppointmentHelpMessage() {","lastModifiedDate":"2021-11-07"},{"lineNumber":54,"author":{"gitId":"Kureans"},"content":"        return \"Edit an appointment’s information. MedBot will check if the edited appointment clashes with \"","lastModifiedDate":"2021-10-29"},{"lineNumber":55,"author":{"gitId":"Kureans"},"content":"                + \"others and display an error message if it does.\" + END_LINE","lastModifiedDate":"2021-10-29"},{"lineNumber":56,"author":{"gitId":"Kureans"},"content":"                + \"Format: edit APPOINTMENT_ID [p/PATIENT_ID] [s/STAFF_ID] [d/DATE_TIME]\" + END_LINE;","lastModifiedDate":"2021-10-29"},{"lineNumber":57,"author":{"gitId":"jushg"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":58,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":59,"author":{"gitId":"justinfidelis"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":60,"author":{"gitId":"justinfidelis"},"content":"     * Returns a message String with help about the find appointment command.","lastModifiedDate":"2021-11-07"},{"lineNumber":61,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-11-07"},{"lineNumber":62,"author":{"gitId":"justinfidelis"},"content":"     * @return String with help about the find appointment command","lastModifiedDate":"2021-11-07"},{"lineNumber":63,"author":{"gitId":"justinfidelis"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":64,"author":{"gitId":"justinfidelis"},"content":"    public static String getFindAppointmentHelpMessage() {","lastModifiedDate":"2021-11-07"},{"lineNumber":65,"author":{"gitId":"Kureans"},"content":"        return \"Finds a person’s list of appointments. The list can be filtered by date-time to\"","lastModifiedDate":"2021-10-29"},{"lineNumber":66,"author":{"gitId":"Kureans"},"content":"                + \" display the list of appointments before/after a certain date.\" + END_LINE","lastModifiedDate":"2021-10-29"},{"lineNumber":67,"author":{"gitId":"Kureans"},"content":"                + \"Format: find PERSON_TYPE/PERSON_ID [FILTER_TYPE/DATE_TIME]\" + END_LINE","lastModifiedDate":"2021-10-29"},{"lineNumber":68,"author":{"gitId":"Kureans"},"content":"                + \"The format for DATE_TIME is DDMMYY hhmm. I.e. 9 February 2021, \"","lastModifiedDate":"2021-10-29"},{"lineNumber":69,"author":{"gitId":"Kureans"},"content":"                + \"0800HRS should be written as 090221 0800\" + END_LINE","lastModifiedDate":"2021-10-29"},{"lineNumber":70,"author":{"gitId":"Kureans"},"content":"                + \"PERSON_TYPE is p (patient) or s (staff)\" + END_LINE","lastModifiedDate":"2021-10-29"},{"lineNumber":71,"author":{"gitId":"Kureans"},"content":"                + \"FILTER_TYPE is b (before) or a (after)\" + END_LINE;","lastModifiedDate":"2021-10-29"},{"lineNumber":72,"author":{"gitId":"jushg"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":73,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":74,"author":{"gitId":"justinfidelis"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":75,"author":{"gitId":"justinfidelis"},"content":"     * Returns a message String with help about the view appointment command.","lastModifiedDate":"2021-11-07"},{"lineNumber":76,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-11-07"},{"lineNumber":77,"author":{"gitId":"justinfidelis"},"content":"     * @return String with help about the view appointment command","lastModifiedDate":"2021-11-07"},{"lineNumber":78,"author":{"gitId":"justinfidelis"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":79,"author":{"gitId":"justinfidelis"},"content":"    public static String getViewAppointmentHelpMessage() {","lastModifiedDate":"2021-11-07"},{"lineNumber":80,"author":{"gitId":"Kureans"},"content":"        return \"View the information of an appointment.\" + END_LINE","lastModifiedDate":"2021-10-29"},{"lineNumber":81,"author":{"gitId":"Kureans"},"content":"                + \"Format: view APPOINTMENT_ID\" + END_LINE;","lastModifiedDate":"2021-10-29"},{"lineNumber":82,"author":{"gitId":"jushg"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":83,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":84,"author":{"gitId":"justinfidelis"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":85,"author":{"gitId":"justinfidelis"},"content":"     * Returns a message String with help about the list appointment command.","lastModifiedDate":"2021-11-07"},{"lineNumber":86,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-11-07"},{"lineNumber":87,"author":{"gitId":"justinfidelis"},"content":"     * @return String with help about the list appointment command","lastModifiedDate":"2021-11-07"},{"lineNumber":88,"author":{"gitId":"justinfidelis"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":89,"author":{"gitId":"justinfidelis"},"content":"    public static String getListAppointmentHelpMessage() {","lastModifiedDate":"2021-11-07"},{"lineNumber":90,"author":{"gitId":"EricBryann"},"content":"        return \"List the information of all appointments, including those of hidden patients.\" + END_LINE","lastModifiedDate":"2021-11-02"},{"lineNumber":91,"author":{"gitId":"Kureans"},"content":"                + \"Format: list \" + END_LINE;","lastModifiedDate":"2021-10-29"},{"lineNumber":92,"author":{"gitId":"jushg"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":93,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":94,"author":{"gitId":"justinfidelis"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":95,"author":{"gitId":"justinfidelis"},"content":"     * Returns a message String with help about the delete appointment command.","lastModifiedDate":"2021-11-07"},{"lineNumber":96,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-11-07"},{"lineNumber":97,"author":{"gitId":"justinfidelis"},"content":"     * @return String with help about the delete appointment command","lastModifiedDate":"2021-11-07"},{"lineNumber":98,"author":{"gitId":"justinfidelis"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":99,"author":{"gitId":"justinfidelis"},"content":"    public static String getDeleteAppointmentHelpMessage() {","lastModifiedDate":"2021-11-07"},{"lineNumber":100,"author":{"gitId":"justinfidelis"},"content":"        return \"Delete an appointment from the list.\" + END_LINE","lastModifiedDate":"2021-11-07"},{"lineNumber":101,"author":{"gitId":"justinfidelis"},"content":"                + \"Format: delete APPOINTMENT_ID\" + END_LINE;","lastModifiedDate":"2021-11-07"},{"lineNumber":102,"author":{"gitId":"jushg"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":103,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":104,"author":{"gitId":"justinfidelis"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":105,"author":{"gitId":"justinfidelis"},"content":"     * Returns a message String indicating that there are no appointments which match the given criteria.","lastModifiedDate":"2021-11-07"},{"lineNumber":106,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-11-07"},{"lineNumber":107,"author":{"gitId":"justinfidelis"},"content":"     * @return String indicating that there are no appointments which match the given criteria.","lastModifiedDate":"2021-11-07"},{"lineNumber":108,"author":{"gitId":"justinfidelis"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":109,"author":{"gitId":"justinfidelis"},"content":"    public static String getNoAppointmentsFoundMessage() {","lastModifiedDate":"2021-10-26"},{"lineNumber":110,"author":{"gitId":"justinfidelis"},"content":"        return \"Sorry, no appointments meeting that criteria were found!\";","lastModifiedDate":"2021-10-26"},{"lineNumber":111,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":112,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":113,"author":{"gitId":"justinfidelis"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":114,"author":{"gitId":"justinfidelis"},"content":"     * Returns a message String indicating that there are no appointments in the system.","lastModifiedDate":"2021-11-07"},{"lineNumber":115,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-11-07"},{"lineNumber":116,"author":{"gitId":"justinfidelis"},"content":"     * @return String indicating that there are no appointments in the system.","lastModifiedDate":"2021-11-07"},{"lineNumber":117,"author":{"gitId":"justinfidelis"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":118,"author":{"gitId":"justinfidelis"},"content":"    public static String getNoAppointmentsMessage() {","lastModifiedDate":"2021-10-26"},{"lineNumber":119,"author":{"gitId":"justinfidelis"},"content":"        return \"Sorry, there are no appointments found.\";","lastModifiedDate":"2021-10-26"},{"lineNumber":120,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":121,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":122,"author":{"gitId":"justinfidelis"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":123,"author":{"gitId":"justinfidelis"},"content":"     * Returns a String containing the information of appointments that match the given criteria.","lastModifiedDate":"2021-11-07"},{"lineNumber":124,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-11-07"},{"lineNumber":125,"author":{"gitId":"justinfidelis"},"content":"     * @return String containing the information of appointments that match the given criteria","lastModifiedDate":"2021-11-07"},{"lineNumber":126,"author":{"gitId":"justinfidelis"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":127,"author":{"gitId":"justinfidelis"},"content":"    public static String getFindAppointmentListMessage(String appointmentString) {","lastModifiedDate":"2021-10-26"},{"lineNumber":128,"author":{"gitId":"justinfidelis"},"content":"        return \"Here is a list of matched appointments:\" + END_LINE","lastModifiedDate":"2021-10-26"},{"lineNumber":129,"author":{"gitId":"justinfidelis"},"content":"                + TABLE_ROW_SEPARATOR","lastModifiedDate":"2021-10-26"},{"lineNumber":130,"author":{"gitId":"justinfidelis"},"content":"                + APPOINTMENT_TABLE_HEADER","lastModifiedDate":"2021-10-26"},{"lineNumber":131,"author":{"gitId":"justinfidelis"},"content":"                + TABLE_ROW_SEPARATOR","lastModifiedDate":"2021-10-26"},{"lineNumber":132,"author":{"gitId":"justinfidelis"},"content":"                + appointmentString","lastModifiedDate":"2021-10-27"},{"lineNumber":133,"author":{"gitId":"justinfidelis"},"content":"                + TABLE_ROW_SEPARATOR;","lastModifiedDate":"2021-10-27"},{"lineNumber":134,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":135,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":136,"author":{"gitId":"justinfidelis"},"content":"    public static String getViewAppointmentMessage(String appointmentInfo) {","lastModifiedDate":"2021-11-07"},{"lineNumber":137,"author":{"gitId":"justinfidelis"},"content":"        return \"Here is the requested appointment information:\" + END_LINE + END_LINE","lastModifiedDate":"2021-11-08"},{"lineNumber":138,"author":{"gitId":"justinfidelis"},"content":"                + appointmentInfo;","lastModifiedDate":"2021-11-07"},{"lineNumber":139,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-11-07"},{"lineNumber":140,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":141,"author":{"gitId":"justinfidelis"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":142,"author":{"gitId":"justinfidelis"},"content":"     * Returns a String containing information of all appointments in a table.","lastModifiedDate":"2021-11-07"},{"lineNumber":143,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-11-07"},{"lineNumber":144,"author":{"gitId":"justinfidelis"},"content":"     * @return String containing information of all appointments in a table","lastModifiedDate":"2021-11-07"},{"lineNumber":145,"author":{"gitId":"justinfidelis"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":146,"author":{"gitId":"justinfidelis"},"content":"    public static String getListAppointmentListMessage(String appointmentString) {","lastModifiedDate":"2021-10-26"},{"lineNumber":147,"author":{"gitId":"justinfidelis"},"content":"        return \"Here is a list of all appointments:\" + END_LINE","lastModifiedDate":"2021-10-26"},{"lineNumber":148,"author":{"gitId":"justinfidelis"},"content":"                + TABLE_ROW_SEPARATOR","lastModifiedDate":"2021-10-26"},{"lineNumber":149,"author":{"gitId":"justinfidelis"},"content":"                + APPOINTMENT_TABLE_HEADER","lastModifiedDate":"2021-10-26"},{"lineNumber":150,"author":{"gitId":"justinfidelis"},"content":"                + TABLE_ROW_SEPARATOR","lastModifiedDate":"2021-10-26"},{"lineNumber":151,"author":{"gitId":"justinfidelis"},"content":"                + appointmentString","lastModifiedDate":"2021-10-27"},{"lineNumber":152,"author":{"gitId":"justinfidelis"},"content":"                + TABLE_ROW_SEPARATOR;","lastModifiedDate":"2021-10-27"},{"lineNumber":153,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":154,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":155,"author":{"gitId":"justinfidelis"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":156,"author":{"gitId":"justinfidelis"},"content":"     * Returns a message String indicating that the appointment with the specified information has been added","lastModifiedDate":"2021-11-07"},{"lineNumber":157,"author":{"gitId":"justinfidelis"},"content":"     * to the system.","lastModifiedDate":"2021-11-07"},{"lineNumber":158,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-11-07"},{"lineNumber":159,"author":{"gitId":"justinfidelis"},"content":"     * @param appointmentInfo String containing the information about the appointment","lastModifiedDate":"2021-11-07"},{"lineNumber":160,"author":{"gitId":"justinfidelis"},"content":"     * @return String indicating that the specified appointment has been added to the system","lastModifiedDate":"2021-11-07"},{"lineNumber":161,"author":{"gitId":"justinfidelis"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":162,"author":{"gitId":"justinfidelis"},"content":"    public static String getAddAppointmentMessage(String appointmentInfo) {","lastModifiedDate":"2021-11-02"},{"lineNumber":163,"author":{"gitId":"justinfidelis"},"content":"        return \"Added appointment with \" + appointmentInfo;","lastModifiedDate":"2021-11-02"},{"lineNumber":164,"author":{"gitId":"EricBryann"},"content":"    }","lastModifiedDate":"2021-11-01"},{"lineNumber":165,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":166,"author":{"gitId":"justinfidelis"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":167,"author":{"gitId":"justinfidelis"},"content":"     * Returns a message String indicating that the appointment with the specified ID has been deleted from the system.","lastModifiedDate":"2021-11-07"},{"lineNumber":168,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-11-07"},{"lineNumber":169,"author":{"gitId":"justinfidelis"},"content":"     * @param id ID of the appointment who was removed from the system","lastModifiedDate":"2021-11-07"},{"lineNumber":170,"author":{"gitId":"justinfidelis"},"content":"     * @return String indicating that the specified appointment has been deleted from the system","lastModifiedDate":"2021-11-07"},{"lineNumber":171,"author":{"gitId":"justinfidelis"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":172,"author":{"gitId":"justinfidelis"},"content":"    public static String getDeleteAppointmentMessage(int id) {","lastModifiedDate":"2021-11-02"},{"lineNumber":173,"author":{"gitId":"justinfidelis"},"content":"        return \"Appointment with ID \" + id + \" deleted from system.\" + END_LINE;","lastModifiedDate":"2021-11-07"},{"lineNumber":174,"author":{"gitId":"EricBryann"},"content":"    }","lastModifiedDate":"2021-11-01"},{"lineNumber":175,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":176,"author":{"gitId":"justinfidelis"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":177,"author":{"gitId":"justinfidelis"},"content":"     * Returns a message String indicating that the appointment with the specified ID has had their information edited","lastModifiedDate":"2021-11-07"},{"lineNumber":178,"author":{"gitId":"justinfidelis"},"content":"     * to the specified information.","lastModifiedDate":"2021-11-07"},{"lineNumber":179,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-11-07"},{"lineNumber":180,"author":{"gitId":"justinfidelis"},"content":"     * @param id ID of the patient whose information was edited","lastModifiedDate":"2021-11-07"},{"lineNumber":181,"author":{"gitId":"justinfidelis"},"content":"     * @param appointmentInfo String containing the new information of the patient","lastModifiedDate":"2021-11-07"},{"lineNumber":182,"author":{"gitId":"justinfidelis"},"content":"     * @return String indicating that the specified patient\u0027s information has been edited","lastModifiedDate":"2021-11-07"},{"lineNumber":183,"author":{"gitId":"justinfidelis"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":184,"author":{"gitId":"justinfidelis"},"content":"    public static String getEditAppointmentMessage(int id, String appointmentInfo) {","lastModifiedDate":"2021-11-07"},{"lineNumber":185,"author":{"gitId":"justinfidelis"},"content":"        return \"The information of appointment with ID \" + id + \" has been edited to:\" + END_LINE + END_LINE","lastModifiedDate":"2021-11-02"},{"lineNumber":186,"author":{"gitId":"justinfidelis"},"content":"                + appointmentInfo + END_LINE;","lastModifiedDate":"2021-11-07"},{"lineNumber":187,"author":{"gitId":"EricBryann"},"content":"    }","lastModifiedDate":"2021-11-01"},{"lineNumber":188,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":189,"author":{"gitId":"justinfidelis"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":190,"author":{"gitId":"justinfidelis"},"content":"     * Returns a message String indicating the current view.","lastModifiedDate":"2021-11-07"},{"lineNumber":191,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-11-07"},{"lineNumber":192,"author":{"gitId":"justinfidelis"},"content":"     * @return String indicating the current view.","lastModifiedDate":"2021-11-07"},{"lineNumber":193,"author":{"gitId":"justinfidelis"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":194,"author":{"gitId":"EricBryann"},"content":"    public static String getCurrentViewMessage() {","lastModifiedDate":"2021-11-01"},{"lineNumber":195,"author":{"gitId":"justinfidelis"},"content":"        return \"You are currently in the Scheduler view.\";","lastModifiedDate":"2021-11-07"},{"lineNumber":196,"author":{"gitId":"EricBryann"},"content":"    }","lastModifiedDate":"2021-11-01"},{"lineNumber":197,"author":{"gitId":"jushg"},"content":"}","lastModifiedDate":"2021-10-22"}],"authorContributionMap":{"justinfidelis":131,"jushg":18,"Kureans":39,"EricBryann":9}},{"path":"src/main/java/medbot/ui/StaffUi.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jushg"},"content":"package medbot.ui;","lastModifiedDate":"2021-10-22"},{"lineNumber":2,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":3,"author":{"gitId":"EricBryann"},"content":"public class StaffUi extends PersonUi {","lastModifiedDate":"2021-10-26"},{"lineNumber":4,"author":{"gitId":"EricBryann"},"content":"    private static final String STAFF \u003d \"staff\";","lastModifiedDate":"2021-10-26"},{"lineNumber":5,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":6,"author":{"gitId":"justinfidelis"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":7,"author":{"gitId":"justinfidelis"},"content":"     * Returns a list of valid commands.","lastModifiedDate":"2021-11-07"},{"lineNumber":8,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-11-07"},{"lineNumber":9,"author":{"gitId":"justinfidelis"},"content":"     * @return String containing a list of valid commands","lastModifiedDate":"2021-11-07"},{"lineNumber":10,"author":{"gitId":"justinfidelis"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":11,"author":{"gitId":"justinfidelis"},"content":"    public static String getStaffCommandList() {","lastModifiedDate":"2021-10-25"},{"lineNumber":12,"author":{"gitId":"EricBryann"},"content":"        return getCommandList();","lastModifiedDate":"2021-10-26"},{"lineNumber":13,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":14,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":15,"author":{"gitId":"justinfidelis"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":16,"author":{"gitId":"justinfidelis"},"content":"     * Returns a message String with help about the list command.","lastModifiedDate":"2021-11-07"},{"lineNumber":17,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-11-07"},{"lineNumber":18,"author":{"gitId":"justinfidelis"},"content":"     * @return String with help about the list command","lastModifiedDate":"2021-11-07"},{"lineNumber":19,"author":{"gitId":"justinfidelis"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":20,"author":{"gitId":"jushg"},"content":"    public static String getAddStaffHelpMessage() {","lastModifiedDate":"2021-10-22"},{"lineNumber":21,"author":{"gitId":"EricBryann"},"content":"        return getAddHelpMessage(STAFF);","lastModifiedDate":"2021-10-26"},{"lineNumber":22,"author":{"gitId":"jushg"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":23,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":24,"author":{"gitId":"justinfidelis"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":25,"author":{"gitId":"justinfidelis"},"content":"     * Returns a message String with help about the delete command.","lastModifiedDate":"2021-11-07"},{"lineNumber":26,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-11-07"},{"lineNumber":27,"author":{"gitId":"justinfidelis"},"content":"     * @return String with help about the delete command","lastModifiedDate":"2021-11-07"},{"lineNumber":28,"author":{"gitId":"justinfidelis"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":29,"author":{"gitId":"justinfidelis"},"content":"    public static String getDeleteStaffHelpMessage() {","lastModifiedDate":"2021-11-07"},{"lineNumber":30,"author":{"gitId":"justinfidelis"},"content":"        return getDeleteHelpMessage(STAFF);","lastModifiedDate":"2021-11-07"},{"lineNumber":31,"author":{"gitId":"jushg"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":32,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":33,"author":{"gitId":"justinfidelis"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":34,"author":{"gitId":"justinfidelis"},"content":"     * Returns a message String with help about the edit command.","lastModifiedDate":"2021-11-07"},{"lineNumber":35,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-11-07"},{"lineNumber":36,"author":{"gitId":"justinfidelis"},"content":"     * @return String with help about the edit command","lastModifiedDate":"2021-11-07"},{"lineNumber":37,"author":{"gitId":"justinfidelis"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":38,"author":{"gitId":"justinfidelis"},"content":"    public static String getEditStaffHelpMessage() {","lastModifiedDate":"2021-11-07"},{"lineNumber":39,"author":{"gitId":"justinfidelis"},"content":"        return getEditHelpMessage(STAFF);","lastModifiedDate":"2021-11-07"},{"lineNumber":40,"author":{"gitId":"jushg"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":41,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":42,"author":{"gitId":"justinfidelis"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":43,"author":{"gitId":"justinfidelis"},"content":"     * Returns a message String with help about the view command.","lastModifiedDate":"2021-11-07"},{"lineNumber":44,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-11-07"},{"lineNumber":45,"author":{"gitId":"justinfidelis"},"content":"     * @return String with help about the view command","lastModifiedDate":"2021-11-07"},{"lineNumber":46,"author":{"gitId":"justinfidelis"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":47,"author":{"gitId":"jushg"},"content":"    public static String getViewStaffHelpMessage() {","lastModifiedDate":"2021-10-22"},{"lineNumber":48,"author":{"gitId":"EricBryann"},"content":"        return getViewHelpMessage(STAFF);","lastModifiedDate":"2021-10-26"},{"lineNumber":49,"author":{"gitId":"jushg"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":50,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":51,"author":{"gitId":"justinfidelis"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":52,"author":{"gitId":"justinfidelis"},"content":"     * Returns a message String with help about the view command.","lastModifiedDate":"2021-11-07"},{"lineNumber":53,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-11-07"},{"lineNumber":54,"author":{"gitId":"justinfidelis"},"content":"     * @return String with help about the view command","lastModifiedDate":"2021-11-07"},{"lineNumber":55,"author":{"gitId":"justinfidelis"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":56,"author":{"gitId":"jushg"},"content":"    public static String getListStaffHelpMessage() {","lastModifiedDate":"2021-10-22"},{"lineNumber":57,"author":{"gitId":"EricBryann"},"content":"        return getListHelpMessage(STAFF);","lastModifiedDate":"2021-10-26"},{"lineNumber":58,"author":{"gitId":"jushg"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":59,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":60,"author":{"gitId":"justinfidelis"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":61,"author":{"gitId":"justinfidelis"},"content":"     * Returns a message String with help about the find command.","lastModifiedDate":"2021-11-07"},{"lineNumber":62,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-11-07"},{"lineNumber":63,"author":{"gitId":"justinfidelis"},"content":"     * @return String with help about the find command","lastModifiedDate":"2021-11-07"},{"lineNumber":64,"author":{"gitId":"justinfidelis"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":65,"author":{"gitId":"justinfidelis"},"content":"    public static String getFindStaffHelpMessage() {","lastModifiedDate":"2021-11-07"},{"lineNumber":66,"author":{"gitId":"justinfidelis"},"content":"        return getFindHelpMessage(STAFF);","lastModifiedDate":"2021-11-07"},{"lineNumber":67,"author":{"gitId":"jushg"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":68,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":69,"author":{"gitId":"justinfidelis"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":70,"author":{"gitId":"justinfidelis"},"content":"     * Returns a message String with help about the hide command.","lastModifiedDate":"2021-11-07"},{"lineNumber":71,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-11-07"},{"lineNumber":72,"author":{"gitId":"justinfidelis"},"content":"     * @return String with help about the hide command","lastModifiedDate":"2021-11-07"},{"lineNumber":73,"author":{"gitId":"justinfidelis"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":74,"author":{"gitId":"EricBryann"},"content":"    public static String getHideStaffHelpMessage() {","lastModifiedDate":"2021-11-02"},{"lineNumber":75,"author":{"gitId":"EricBryann"},"content":"        return getHideHelpMessage(STAFF);","lastModifiedDate":"2021-11-02"},{"lineNumber":76,"author":{"gitId":"EricBryann"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":77,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":78,"author":{"gitId":"justinfidelis"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":79,"author":{"gitId":"justinfidelis"},"content":"     * Returns a message String with help about the show command.","lastModifiedDate":"2021-11-07"},{"lineNumber":80,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-11-07"},{"lineNumber":81,"author":{"gitId":"justinfidelis"},"content":"     * @return String with help about the show command","lastModifiedDate":"2021-11-07"},{"lineNumber":82,"author":{"gitId":"justinfidelis"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":83,"author":{"gitId":"EricBryann"},"content":"    public static String getShowStaffHelpMessage() {","lastModifiedDate":"2021-11-02"},{"lineNumber":84,"author":{"gitId":"EricBryann"},"content":"        return getShowHelpMessage(STAFF);","lastModifiedDate":"2021-11-02"},{"lineNumber":85,"author":{"gitId":"EricBryann"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":86,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":87,"author":{"gitId":"justinfidelis"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":88,"author":{"gitId":"justinfidelis"},"content":"     * Returns a message String indicating that the staff with the specified information has been added","lastModifiedDate":"2021-11-07"},{"lineNumber":89,"author":{"gitId":"justinfidelis"},"content":"     * to the system.","lastModifiedDate":"2021-11-07"},{"lineNumber":90,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-11-07"},{"lineNumber":91,"author":{"gitId":"justinfidelis"},"content":"     * @param staffInfo String containing the information about the staff","lastModifiedDate":"2021-11-07"},{"lineNumber":92,"author":{"gitId":"justinfidelis"},"content":"     * @return String indicating that the specified staff has been added to the system","lastModifiedDate":"2021-11-07"},{"lineNumber":93,"author":{"gitId":"justinfidelis"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":94,"author":{"gitId":"justinfidelis"},"content":"    public static String getAddStaffMessage(String staffInfo) {","lastModifiedDate":"2021-11-02"},{"lineNumber":95,"author":{"gitId":"justinfidelis"},"content":"        return getAddPersonMessage(STAFF, staffInfo);","lastModifiedDate":"2021-11-02"},{"lineNumber":96,"author":{"gitId":"EricBryann"},"content":"    }","lastModifiedDate":"2021-11-01"},{"lineNumber":97,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":98,"author":{"gitId":"justinfidelis"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":99,"author":{"gitId":"justinfidelis"},"content":"     * Returns a message String indicating that the staff with the specified ID has been deleted from the system.","lastModifiedDate":"2021-11-07"},{"lineNumber":100,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-11-07"},{"lineNumber":101,"author":{"gitId":"justinfidelis"},"content":"     * @param id ID of the staff who was removed from the system","lastModifiedDate":"2021-11-07"},{"lineNumber":102,"author":{"gitId":"justinfidelis"},"content":"     * @return String indicating that the specified staff has been deleted from the system","lastModifiedDate":"2021-11-07"},{"lineNumber":103,"author":{"gitId":"justinfidelis"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":104,"author":{"gitId":"EricBryann"},"content":"    public static String getDeleteStaffMessage(int id) {","lastModifiedDate":"2021-11-01"},{"lineNumber":105,"author":{"gitId":"EricBryann"},"content":"        return getDeletePersonMessage(STAFF, id);","lastModifiedDate":"2021-11-01"},{"lineNumber":106,"author":{"gitId":"EricBryann"},"content":"    }","lastModifiedDate":"2021-11-01"},{"lineNumber":107,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":108,"author":{"gitId":"justinfidelis"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":109,"author":{"gitId":"justinfidelis"},"content":"     * Returns a message String indicating that the staff with the specified ID has had their information edited","lastModifiedDate":"2021-11-07"},{"lineNumber":110,"author":{"gitId":"justinfidelis"},"content":"     * to the specified information.","lastModifiedDate":"2021-11-07"},{"lineNumber":111,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-11-07"},{"lineNumber":112,"author":{"gitId":"justinfidelis"},"content":"     * @param id ID of the staff whose information was edited","lastModifiedDate":"2021-11-07"},{"lineNumber":113,"author":{"gitId":"justinfidelis"},"content":"     * @param staffInfo String containing the new information of the staff","lastModifiedDate":"2021-11-07"},{"lineNumber":114,"author":{"gitId":"justinfidelis"},"content":"     * @return String indicating that the specified staff\u0027s information has been edited","lastModifiedDate":"2021-11-07"},{"lineNumber":115,"author":{"gitId":"justinfidelis"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":116,"author":{"gitId":"justinfidelis"},"content":"    public static String getEditStaffMessage(int id, String staffInfo) {","lastModifiedDate":"2021-11-07"},{"lineNumber":117,"author":{"gitId":"justinfidelis"},"content":"        return getEditPersonMessage(STAFF, id, staffInfo);","lastModifiedDate":"2021-11-07"},{"lineNumber":118,"author":{"gitId":"EricBryann"},"content":"    }","lastModifiedDate":"2021-11-01"},{"lineNumber":119,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":120,"author":{"gitId":"justinfidelis"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":121,"author":{"gitId":"justinfidelis"},"content":"     * Returns a message String indicating that the staff with the specified ID is now set to hidden.","lastModifiedDate":"2021-11-07"},{"lineNumber":122,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-11-07"},{"lineNumber":123,"author":{"gitId":"justinfidelis"},"content":"     * @param id ID of the staff who was set to shown","lastModifiedDate":"2021-11-07"},{"lineNumber":124,"author":{"gitId":"justinfidelis"},"content":"     * @return String indicating that the staff with the specified ID is now set to hidden","lastModifiedDate":"2021-11-07"},{"lineNumber":125,"author":{"gitId":"justinfidelis"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":126,"author":{"gitId":"EricBryann"},"content":"    public static String getHideStaffMessage(int id) {","lastModifiedDate":"2021-11-02"},{"lineNumber":127,"author":{"gitId":"EricBryann"},"content":"        return getHidePersonMessage(STAFF, id);","lastModifiedDate":"2021-11-02"},{"lineNumber":128,"author":{"gitId":"EricBryann"},"content":"    }","lastModifiedDate":"2021-11-01"},{"lineNumber":129,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":130,"author":{"gitId":"justinfidelis"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":131,"author":{"gitId":"justinfidelis"},"content":"     * Returns a message String indicating that the staff with the specified ID is now set to shown.","lastModifiedDate":"2021-11-07"},{"lineNumber":132,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-11-07"},{"lineNumber":133,"author":{"gitId":"justinfidelis"},"content":"     * @param id ID of the staff who was set to shown","lastModifiedDate":"2021-11-07"},{"lineNumber":134,"author":{"gitId":"justinfidelis"},"content":"     * @return String indicating that the staff with the specified ID is now shown","lastModifiedDate":"2021-11-07"},{"lineNumber":135,"author":{"gitId":"justinfidelis"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":136,"author":{"gitId":"EricBryann"},"content":"    public static String getShowStaffMessage(int id) {","lastModifiedDate":"2021-11-02"},{"lineNumber":137,"author":{"gitId":"EricBryann"},"content":"        return getShowPersonMessage(STAFF, id);","lastModifiedDate":"2021-11-02"},{"lineNumber":138,"author":{"gitId":"EricBryann"},"content":"    }","lastModifiedDate":"2021-11-01"},{"lineNumber":139,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":140,"author":{"gitId":"justinfidelis"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":141,"author":{"gitId":"justinfidelis"},"content":"     * Returns a message String indicating the current view.","lastModifiedDate":"2021-11-07"},{"lineNumber":142,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-11-07"},{"lineNumber":143,"author":{"gitId":"justinfidelis"},"content":"     * @return String indicating the current view.","lastModifiedDate":"2021-11-07"},{"lineNumber":144,"author":{"gitId":"justinfidelis"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":145,"author":{"gitId":"EricBryann"},"content":"    public static String getCurrentViewStaffMessage() {","lastModifiedDate":"2021-11-01"},{"lineNumber":146,"author":{"gitId":"EricBryann"},"content":"        return getCurrentViewPersonMessage(STAFF);","lastModifiedDate":"2021-11-01"},{"lineNumber":147,"author":{"gitId":"EricBryann"},"content":"    }","lastModifiedDate":"2021-11-01"},{"lineNumber":148,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":149,"author":{"gitId":"jushg"},"content":"    /**","lastModifiedDate":"2021-10-22"},{"lineNumber":150,"author":{"gitId":"justinfidelis"},"content":"     * Returns a message String containing the information of the staff.","lastModifiedDate":"2021-11-07"},{"lineNumber":151,"author":{"gitId":"jushg"},"content":"     *","lastModifiedDate":"2021-10-22"},{"lineNumber":152,"author":{"gitId":"justinfidelis"},"content":"     * @param staffInfo the info of the staff to be printed.","lastModifiedDate":"2021-11-07"},{"lineNumber":153,"author":{"gitId":"justinfidelis"},"content":"     * @return String containing the information of the staff","lastModifiedDate":"2021-11-07"},{"lineNumber":154,"author":{"gitId":"jushg"},"content":"     */","lastModifiedDate":"2021-10-22"},{"lineNumber":155,"author":{"gitId":"justinfidelis"},"content":"    public static String getViewStaffMessage(String staffInfo) {","lastModifiedDate":"2021-11-07"},{"lineNumber":156,"author":{"gitId":"justinfidelis"},"content":"        return getViewPersonMessage(STAFF, staffInfo);","lastModifiedDate":"2021-11-07"},{"lineNumber":157,"author":{"gitId":"jushg"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":158,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":159,"author":{"gitId":"jushg"},"content":"    /**","lastModifiedDate":"2021-10-22"},{"lineNumber":160,"author":{"gitId":"justinfidelis"},"content":"     * Returns a String containing all staff information in a table.","lastModifiedDate":"2021-11-07"},{"lineNumber":161,"author":{"gitId":"jushg"},"content":"     *","lastModifiedDate":"2021-10-22"},{"lineNumber":162,"author":{"gitId":"justinfidelis"},"content":"     * @param staffListString String containing information of all staff.","lastModifiedDate":"2021-10-24"},{"lineNumber":163,"author":{"gitId":"justinfidelis"},"content":"     * @return String containing all staff information in a table","lastModifiedDate":"2021-11-07"},{"lineNumber":164,"author":{"gitId":"jushg"},"content":"     */","lastModifiedDate":"2021-10-22"},{"lineNumber":165,"author":{"gitId":"justinfidelis"},"content":"    public static String getAllStaffsString(String staffListString) {","lastModifiedDate":"2021-10-24"},{"lineNumber":166,"author":{"gitId":"EricBryann"},"content":"        return getAllPersonsString(STAFF, staffListString);","lastModifiedDate":"2021-10-26"},{"lineNumber":167,"author":{"gitId":"jushg"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":168,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":169,"author":{"gitId":"jushg"},"content":"    /**","lastModifiedDate":"2021-10-25"},{"lineNumber":170,"author":{"gitId":"justinfidelis"},"content":"     * Returns a String containing the header of the staff information table.","lastModifiedDate":"2021-11-07"},{"lineNumber":171,"author":{"gitId":"jushg"},"content":"     *","lastModifiedDate":"2021-10-25"},{"lineNumber":172,"author":{"gitId":"justinfidelis"},"content":"     * @return String containing the header of the staff information table.","lastModifiedDate":"2021-11-07"},{"lineNumber":173,"author":{"gitId":"jushg"},"content":"     */","lastModifiedDate":"2021-10-25"},{"lineNumber":174,"author":{"gitId":"jushg"},"content":"    public static String getStaffTableHeader() {","lastModifiedDate":"2021-10-22"},{"lineNumber":175,"author":{"gitId":"EricBryann"},"content":"        return getTableHeader(STAFF);","lastModifiedDate":"2021-10-26"},{"lineNumber":176,"author":{"gitId":"jushg"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":177,"author":{"gitId":"jushg"},"content":"}","lastModifiedDate":"2021-10-22"}],"authorContributionMap":{"justinfidelis":107,"jushg":34,"EricBryann":36}},{"path":"src/main/java/medbot/ui/Ui.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jushg"},"content":"package medbot.ui;","lastModifiedDate":"2021-10-22"},{"lineNumber":2,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":3,"author":{"gitId":"jushg"},"content":"import medbot.exceptions.MedBotException;","lastModifiedDate":"2021-10-22"},{"lineNumber":4,"author":{"gitId":"jushg"},"content":"import medbot.utilities.ViewType;","lastModifiedDate":"2021-10-22"},{"lineNumber":5,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":6,"author":{"gitId":"jushg"},"content":"import java.util.List;","lastModifiedDate":"2021-10-22"},{"lineNumber":7,"author":{"gitId":"jushg"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-10-22"},{"lineNumber":8,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":9,"author":{"gitId":"jushg"},"content":"/**","lastModifiedDate":"2021-10-22"},{"lineNumber":10,"author":{"gitId":"jushg"},"content":" * Represents a UI class that interacts with User","lastModifiedDate":"2021-10-22"},{"lineNumber":11,"author":{"gitId":"jushg"},"content":" * (Reading user input and printing message to users).","lastModifiedDate":"2021-10-22"},{"lineNumber":12,"author":{"gitId":"jushg"},"content":" */","lastModifiedDate":"2021-10-22"},{"lineNumber":13,"author":{"gitId":"jushg"},"content":"public class Ui {","lastModifiedDate":"2021-10-22"},{"lineNumber":14,"author":{"gitId":"jushg"},"content":"    public static final String VERTICAL_LINE_SPACED_ESCAPED \u003d \" \\\\| \";","lastModifiedDate":"2021-10-22"},{"lineNumber":15,"author":{"gitId":"jushg"},"content":"    public static final String VERTICAL_LINE_SPACED \u003d \" | \";","lastModifiedDate":"2021-10-22"},{"lineNumber":16,"author":{"gitId":"jushg"},"content":"    public static final String END_LINE \u003d System.lineSeparator();","lastModifiedDate":"2021-10-22"},{"lineNumber":17,"author":{"gitId":"jushg"},"content":"    private static final String ERROR_VIEW_CONTEXT_NOT_FOUND \u003d \"Cannot identify the current view type\" + END_LINE;","lastModifiedDate":"2021-10-22"},{"lineNumber":18,"author":{"gitId":"EricBryann"},"content":"    private static final String NO_PERSON_MESSAGE \u003d \"There is no person with such attributes in this list.\" + END_LINE;","lastModifiedDate":"2021-11-01"},{"lineNumber":19,"author":{"gitId":"jushg"},"content":"    private static final String TABLE_ROW_SEPARATOR \u003d \" ------------------------------------------------\"","lastModifiedDate":"2021-10-22"},{"lineNumber":20,"author":{"gitId":"jushg"},"content":"            + \"----------------------------------------------------- \" + END_LINE;","lastModifiedDate":"2021-10-22"},{"lineNumber":21,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":22,"author":{"gitId":"justinfidelis"},"content":"    private final Scanner inputScanner \u003d new Scanner(System.in);","lastModifiedDate":"2021-11-07"},{"lineNumber":23,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":24,"author":{"gitId":"jushg"},"content":"    /**","lastModifiedDate":"2021-10-22"},{"lineNumber":25,"author":{"gitId":"jushg"},"content":"     * Gets user input from terminal and returns it as a String.","lastModifiedDate":"2021-10-22"},{"lineNumber":26,"author":{"gitId":"jushg"},"content":"     *","lastModifiedDate":"2021-10-22"},{"lineNumber":27,"author":{"gitId":"jushg"},"content":"     * @return the String containing the user input.","lastModifiedDate":"2021-10-22"},{"lineNumber":28,"author":{"gitId":"jushg"},"content":"     */","lastModifiedDate":"2021-10-22"},{"lineNumber":29,"author":{"gitId":"jushg"},"content":"    public String readInput() {","lastModifiedDate":"2021-10-22"},{"lineNumber":30,"author":{"gitId":"jushg"},"content":"        String line;","lastModifiedDate":"2021-10-22"},{"lineNumber":31,"author":{"gitId":"jushg"},"content":"        line \u003d inputScanner.nextLine();","lastModifiedDate":"2021-10-22"},{"lineNumber":32,"author":{"gitId":"jushg"},"content":"        return line;","lastModifiedDate":"2021-10-22"},{"lineNumber":33,"author":{"gitId":"jushg"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":34,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":35,"author":{"gitId":"jushg"},"content":"    /**","lastModifiedDate":"2021-10-22"},{"lineNumber":36,"author":{"gitId":"jushg"},"content":"     * Prints a message.","lastModifiedDate":"2021-10-22"},{"lineNumber":37,"author":{"gitId":"jushg"},"content":"     *","lastModifiedDate":"2021-10-22"},{"lineNumber":38,"author":{"gitId":"jushg"},"content":"     * @param outputMessage the message to be printed","lastModifiedDate":"2021-10-22"},{"lineNumber":39,"author":{"gitId":"jushg"},"content":"     */","lastModifiedDate":"2021-10-22"},{"lineNumber":40,"author":{"gitId":"jushg"},"content":"    public void printOutput(String outputMessage) {","lastModifiedDate":"2021-10-22"},{"lineNumber":41,"author":{"gitId":"jushg"},"content":"        System.out.println(outputMessage);","lastModifiedDate":"2021-10-22"},{"lineNumber":42,"author":{"gitId":"jushg"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":43,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":44,"author":{"gitId":"jushg"},"content":"    /**","lastModifiedDate":"2021-10-22"},{"lineNumber":45,"author":{"gitId":"jushg"},"content":"     * Prints a welcome message when MedBot is first loaded.","lastModifiedDate":"2021-10-22"},{"lineNumber":46,"author":{"gitId":"jushg"},"content":"     */","lastModifiedDate":"2021-10-22"},{"lineNumber":47,"author":{"gitId":"jushg"},"content":"    public void printWelcomeMessageOne() {","lastModifiedDate":"2021-10-22"},{"lineNumber":48,"author":{"gitId":"jushg"},"content":"        printOutput(\"Hello, I\u0027m MedBot!\");","lastModifiedDate":"2021-10-22"},{"lineNumber":49,"author":{"gitId":"jushg"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":50,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":51,"author":{"gitId":"jushg"},"content":"    /**","lastModifiedDate":"2021-10-22"},{"lineNumber":52,"author":{"gitId":"jushg"},"content":"     * Prints a welcome message when MedBot file storage is successfully loaded.","lastModifiedDate":"2021-10-22"},{"lineNumber":53,"author":{"gitId":"jushg"},"content":"     */","lastModifiedDate":"2021-10-22"},{"lineNumber":54,"author":{"gitId":"jushg"},"content":"    public void printWelcomeMessageTwo() {","lastModifiedDate":"2021-10-22"},{"lineNumber":55,"author":{"gitId":"jushg"},"content":"        printOutput(\"How can I help you today?\" + END_LINE);","lastModifiedDate":"2021-10-22"},{"lineNumber":56,"author":{"gitId":"jushg"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":57,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":58,"author":{"gitId":"jushg"},"content":"    /**","lastModifiedDate":"2021-10-22"},{"lineNumber":59,"author":{"gitId":"jushg"},"content":"     * Returns a message when successfully add to a list.","lastModifiedDate":"2021-10-22"},{"lineNumber":60,"author":{"gitId":"jushg"},"content":"     *","lastModifiedDate":"2021-10-22"},{"lineNumber":61,"author":{"gitId":"jushg"},"content":"     * @param viewType the viewType context of the command","lastModifiedDate":"2021-10-22"},{"lineNumber":62,"author":{"gitId":"jushg"},"content":"     * @return the Successful Message","lastModifiedDate":"2021-10-22"},{"lineNumber":63,"author":{"gitId":"jushg"},"content":"     */","lastModifiedDate":"2021-10-22"},{"lineNumber":64,"author":{"gitId":"justinfidelis"},"content":"    public static String getAddMessage(String info, ViewType viewType) throws MedBotException {","lastModifiedDate":"2021-11-07"},{"lineNumber":65,"author":{"gitId":"jushg"},"content":"        switch (viewType) {","lastModifiedDate":"2021-10-22"},{"lineNumber":66,"author":{"gitId":"jushg"},"content":"        case PATIENT_INFO:","lastModifiedDate":"2021-10-22"},{"lineNumber":67,"author":{"gitId":"justinfidelis"},"content":"            return PatientUi.getAddPatientMessage(info);","lastModifiedDate":"2021-11-02"},{"lineNumber":68,"author":{"gitId":"jushg"},"content":"        case SCHEDULER:","lastModifiedDate":"2021-10-22"},{"lineNumber":69,"author":{"gitId":"justinfidelis"},"content":"            return SchedulerUi.getAddAppointmentMessage(info);","lastModifiedDate":"2021-11-02"},{"lineNumber":70,"author":{"gitId":"jushg"},"content":"        case MEDICAL_STAFF_INFO:","lastModifiedDate":"2021-10-22"},{"lineNumber":71,"author":{"gitId":"justinfidelis"},"content":"            return StaffUi.getAddStaffMessage(info);","lastModifiedDate":"2021-11-02"},{"lineNumber":72,"author":{"gitId":"jushg"},"content":"        default:","lastModifiedDate":"2021-10-22"},{"lineNumber":73,"author":{"gitId":"jushg"},"content":"            assert false;","lastModifiedDate":"2021-10-22"},{"lineNumber":74,"author":{"gitId":"jushg"},"content":"            throw new MedBotException(ERROR_VIEW_CONTEXT_NOT_FOUND);","lastModifiedDate":"2021-10-22"},{"lineNumber":75,"author":{"gitId":"jushg"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":76,"author":{"gitId":"jushg"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":77,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":78,"author":{"gitId":"jushg"},"content":"    /**","lastModifiedDate":"2021-10-22"},{"lineNumber":79,"author":{"gitId":"jushg"},"content":"     * Returns a message when successfully delete an object from a list.","lastModifiedDate":"2021-10-22"},{"lineNumber":80,"author":{"gitId":"jushg"},"content":"     *","lastModifiedDate":"2021-10-22"},{"lineNumber":81,"author":{"gitId":"jushg"},"content":"     * @param id       the ID of the object to be deleted.","lastModifiedDate":"2021-10-22"},{"lineNumber":82,"author":{"gitId":"jushg"},"content":"     * @param viewType the viewType context of the command.","lastModifiedDate":"2021-10-22"},{"lineNumber":83,"author":{"gitId":"jushg"},"content":"     * @return the Successful Message","lastModifiedDate":"2021-10-22"},{"lineNumber":84,"author":{"gitId":"jushg"},"content":"     */","lastModifiedDate":"2021-10-22"},{"lineNumber":85,"author":{"gitId":"jushg"},"content":"    public static String getDeleteMessage(int id, ViewType viewType) throws MedBotException {","lastModifiedDate":"2021-10-22"},{"lineNumber":86,"author":{"gitId":"jushg"},"content":"        assert id \u003e 0;","lastModifiedDate":"2021-10-22"},{"lineNumber":87,"author":{"gitId":"jushg"},"content":"        switch (viewType) {","lastModifiedDate":"2021-10-22"},{"lineNumber":88,"author":{"gitId":"jushg"},"content":"        case PATIENT_INFO:","lastModifiedDate":"2021-10-22"},{"lineNumber":89,"author":{"gitId":"EricBryann"},"content":"            return PatientUi.getDeletePatientMessage(id);","lastModifiedDate":"2021-11-01"},{"lineNumber":90,"author":{"gitId":"jushg"},"content":"        case SCHEDULER:","lastModifiedDate":"2021-10-22"},{"lineNumber":91,"author":{"gitId":"justinfidelis"},"content":"            return SchedulerUi.getDeleteAppointmentMessage(id);","lastModifiedDate":"2021-11-02"},{"lineNumber":92,"author":{"gitId":"jushg"},"content":"        case MEDICAL_STAFF_INFO:","lastModifiedDate":"2021-10-22"},{"lineNumber":93,"author":{"gitId":"EricBryann"},"content":"            return StaffUi.getDeleteStaffMessage(id);","lastModifiedDate":"2021-11-01"},{"lineNumber":94,"author":{"gitId":"jushg"},"content":"        default:","lastModifiedDate":"2021-10-22"},{"lineNumber":95,"author":{"gitId":"jushg"},"content":"            assert false;","lastModifiedDate":"2021-10-22"},{"lineNumber":96,"author":{"gitId":"jushg"},"content":"            throw new MedBotException(ERROR_VIEW_CONTEXT_NOT_FOUND);","lastModifiedDate":"2021-10-22"},{"lineNumber":97,"author":{"gitId":"jushg"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":98,"author":{"gitId":"jushg"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":99,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":100,"author":{"gitId":"jushg"},"content":"    /**","lastModifiedDate":"2021-10-22"},{"lineNumber":101,"author":{"gitId":"jushg"},"content":"     * Returns a message when successfully edit an object in a list.","lastModifiedDate":"2021-10-22"},{"lineNumber":102,"author":{"gitId":"jushg"},"content":"     *","lastModifiedDate":"2021-10-22"},{"lineNumber":103,"author":{"gitId":"jushg"},"content":"     * @param id       the ID of the object to be edited.","lastModifiedDate":"2021-10-22"},{"lineNumber":104,"author":{"gitId":"jushg"},"content":"     * @param info     the information of the new object","lastModifiedDate":"2021-10-22"},{"lineNumber":105,"author":{"gitId":"jushg"},"content":"     * @param viewType the viewType context of the command.","lastModifiedDate":"2021-10-22"},{"lineNumber":106,"author":{"gitId":"jushg"},"content":"     * @return the Successful Message","lastModifiedDate":"2021-10-22"},{"lineNumber":107,"author":{"gitId":"jushg"},"content":"     */","lastModifiedDate":"2021-10-22"},{"lineNumber":108,"author":{"gitId":"jushg"},"content":"    public static String getEditMessage(int id, String info, ViewType viewType) throws MedBotException {","lastModifiedDate":"2021-10-22"},{"lineNumber":109,"author":{"gitId":"jushg"},"content":"        assert id \u003e 0;","lastModifiedDate":"2021-10-22"},{"lineNumber":110,"author":{"gitId":"jushg"},"content":"        switch (viewType) {","lastModifiedDate":"2021-10-22"},{"lineNumber":111,"author":{"gitId":"jushg"},"content":"        case PATIENT_INFO:","lastModifiedDate":"2021-10-22"},{"lineNumber":112,"author":{"gitId":"EricBryann"},"content":"            return PatientUi.getEditPatientMessage(id, info);","lastModifiedDate":"2021-11-01"},{"lineNumber":113,"author":{"gitId":"jushg"},"content":"        case SCHEDULER:","lastModifiedDate":"2021-10-22"},{"lineNumber":114,"author":{"gitId":"justinfidelis"},"content":"            return SchedulerUi.getEditAppointmentMessage(id, info);","lastModifiedDate":"2021-11-02"},{"lineNumber":115,"author":{"gitId":"jushg"},"content":"        case MEDICAL_STAFF_INFO:","lastModifiedDate":"2021-10-22"},{"lineNumber":116,"author":{"gitId":"EricBryann"},"content":"            return StaffUi.getEditStaffMessage(id, info);","lastModifiedDate":"2021-11-01"},{"lineNumber":117,"author":{"gitId":"jushg"},"content":"        default:","lastModifiedDate":"2021-10-22"},{"lineNumber":118,"author":{"gitId":"jushg"},"content":"            assert false;","lastModifiedDate":"2021-10-22"},{"lineNumber":119,"author":{"gitId":"jushg"},"content":"            throw new MedBotException(ERROR_VIEW_CONTEXT_NOT_FOUND);","lastModifiedDate":"2021-10-22"},{"lineNumber":120,"author":{"gitId":"jushg"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":121,"author":{"gitId":"jushg"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":122,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":123,"author":{"gitId":"justinfidelis"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":124,"author":{"gitId":"justinfidelis"},"content":"     * Returns a message String containing the information of the object.","lastModifiedDate":"2021-11-07"},{"lineNumber":125,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-11-07"},{"lineNumber":126,"author":{"gitId":"justinfidelis"},"content":"     * @param info the information of the object","lastModifiedDate":"2021-11-07"},{"lineNumber":127,"author":{"gitId":"justinfidelis"},"content":"     * @param viewType the viewType context of the command.","lastModifiedDate":"2021-11-07"},{"lineNumber":128,"author":{"gitId":"justinfidelis"},"content":"     * @return message String containing the information of the object","lastModifiedDate":"2021-11-07"},{"lineNumber":129,"author":{"gitId":"justinfidelis"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":130,"author":{"gitId":"justinfidelis"},"content":"    public static String getViewMessage(String info, ViewType viewType) throws MedBotException {","lastModifiedDate":"2021-11-07"},{"lineNumber":131,"author":{"gitId":"justinfidelis"},"content":"        switch (viewType) {","lastModifiedDate":"2021-11-07"},{"lineNumber":132,"author":{"gitId":"justinfidelis"},"content":"        case PATIENT_INFO:","lastModifiedDate":"2021-11-07"},{"lineNumber":133,"author":{"gitId":"justinfidelis"},"content":"            return PatientUi.getViewPatientMessage(info);","lastModifiedDate":"2021-11-07"},{"lineNumber":134,"author":{"gitId":"justinfidelis"},"content":"        case SCHEDULER:","lastModifiedDate":"2021-11-07"},{"lineNumber":135,"author":{"gitId":"justinfidelis"},"content":"            return SchedulerUi.getViewAppointmentMessage(info);","lastModifiedDate":"2021-11-07"},{"lineNumber":136,"author":{"gitId":"justinfidelis"},"content":"        case MEDICAL_STAFF_INFO:","lastModifiedDate":"2021-11-07"},{"lineNumber":137,"author":{"gitId":"justinfidelis"},"content":"            return StaffUi.getViewStaffMessage(info);","lastModifiedDate":"2021-11-07"},{"lineNumber":138,"author":{"gitId":"justinfidelis"},"content":"        default:","lastModifiedDate":"2021-11-07"},{"lineNumber":139,"author":{"gitId":"justinfidelis"},"content":"            assert false;","lastModifiedDate":"2021-11-07"},{"lineNumber":140,"author":{"gitId":"justinfidelis"},"content":"            throw new MedBotException(ERROR_VIEW_CONTEXT_NOT_FOUND);","lastModifiedDate":"2021-11-07"},{"lineNumber":141,"author":{"gitId":"justinfidelis"},"content":"        }","lastModifiedDate":"2021-11-07"},{"lineNumber":142,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-11-07"},{"lineNumber":143,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":144,"author":{"gitId":"jushg"},"content":"    /**","lastModifiedDate":"2021-10-22"},{"lineNumber":145,"author":{"gitId":"jushg"},"content":"     * Returns the information of the filtered patients.","lastModifiedDate":"2021-10-22"},{"lineNumber":146,"author":{"gitId":"jushg"},"content":"     *","lastModifiedDate":"2021-10-22"},{"lineNumber":147,"author":{"gitId":"jushg"},"content":"     * @param persons  the filtered patients to be printed.","lastModifiedDate":"2021-10-22"},{"lineNumber":148,"author":{"gitId":"jushg"},"content":"     * @param viewType the viewType context of the command.","lastModifiedDate":"2021-10-22"},{"lineNumber":149,"author":{"gitId":"jushg"},"content":"     * @return The information of the filtered patients","lastModifiedDate":"2021-10-22"},{"lineNumber":150,"author":{"gitId":"jushg"},"content":"     */","lastModifiedDate":"2021-10-22"},{"lineNumber":151,"author":{"gitId":"jushg"},"content":"    public static String getFindPersonsMessage(List\u003cString\u003e persons, ViewType viewType) throws MedBotException {","lastModifiedDate":"2021-10-22"},{"lineNumber":152,"author":{"gitId":"jushg"},"content":"        if (persons.size() \u003d\u003d 0) {","lastModifiedDate":"2021-10-22"},{"lineNumber":153,"author":{"gitId":"EricBryann"},"content":"            return NO_PERSON_MESSAGE;","lastModifiedDate":"2021-11-01"},{"lineNumber":154,"author":{"gitId":"jushg"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":155,"author":{"gitId":"jushg"},"content":"        String output;","lastModifiedDate":"2021-10-22"},{"lineNumber":156,"author":{"gitId":"jushg"},"content":"        switch (viewType) {","lastModifiedDate":"2021-10-22"},{"lineNumber":157,"author":{"gitId":"jushg"},"content":"        case PATIENT_INFO:","lastModifiedDate":"2021-10-22"},{"lineNumber":158,"author":{"gitId":"jushg"},"content":"            output \u003d PatientUi.getPatientTableHeader();","lastModifiedDate":"2021-10-22"},{"lineNumber":159,"author":{"gitId":"jushg"},"content":"            break;","lastModifiedDate":"2021-10-22"},{"lineNumber":160,"author":{"gitId":"jushg"},"content":"        case MEDICAL_STAFF_INFO:","lastModifiedDate":"2021-10-22"},{"lineNumber":161,"author":{"gitId":"jushg"},"content":"            output \u003d StaffUi.getStaffTableHeader();","lastModifiedDate":"2021-10-22"},{"lineNumber":162,"author":{"gitId":"jushg"},"content":"            break;","lastModifiedDate":"2021-10-22"},{"lineNumber":163,"author":{"gitId":"jushg"},"content":"        default:","lastModifiedDate":"2021-10-22"},{"lineNumber":164,"author":{"gitId":"jushg"},"content":"            assert false;","lastModifiedDate":"2021-10-22"},{"lineNumber":165,"author":{"gitId":"jushg"},"content":"            throw new MedBotException(ERROR_VIEW_CONTEXT_NOT_FOUND);","lastModifiedDate":"2021-10-22"},{"lineNumber":166,"author":{"gitId":"jushg"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":167,"author":{"gitId":"jushg"},"content":"        for (String person : persons) {","lastModifiedDate":"2021-10-22"},{"lineNumber":168,"author":{"gitId":"jushg"},"content":"            output +\u003d person;","lastModifiedDate":"2021-10-22"},{"lineNumber":169,"author":{"gitId":"jushg"},"content":"            output +\u003d END_LINE;","lastModifiedDate":"2021-10-22"},{"lineNumber":170,"author":{"gitId":"CrimsonTitan79"},"content":"        }","lastModifiedDate":"2021-10-27"},{"lineNumber":171,"author":{"gitId":"jushg"},"content":"        output +\u003d TABLE_ROW_SEPARATOR;","lastModifiedDate":"2021-10-22"},{"lineNumber":172,"author":{"gitId":"jushg"},"content":"        return output;","lastModifiedDate":"2021-10-22"},{"lineNumber":173,"author":{"gitId":"jushg"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":174,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":175,"author":{"gitId":"EricBryann"},"content":"    /**","lastModifiedDate":"2021-10-25"},{"lineNumber":176,"author":{"gitId":"EricBryann"},"content":"     * Returns the successful message of archiving a person.","lastModifiedDate":"2021-10-25"},{"lineNumber":177,"author":{"gitId":"EricBryann"},"content":"     *","lastModifiedDate":"2021-10-25"},{"lineNumber":178,"author":{"gitId":"EricBryann"},"content":"     * @param personId the ID of the person to be hidden.","lastModifiedDate":"2021-11-02"},{"lineNumber":179,"author":{"gitId":"EricBryann"},"content":"     * @param viewType the viewType context of the command.","lastModifiedDate":"2021-10-25"},{"lineNumber":180,"author":{"gitId":"EricBryann"},"content":"     * @return The successful message of archiving the person","lastModifiedDate":"2021-10-25"},{"lineNumber":181,"author":{"gitId":"EricBryann"},"content":"     */","lastModifiedDate":"2021-10-25"},{"lineNumber":182,"author":{"gitId":"EricBryann"},"content":"    public static String getHidePersonMessage(int personId, ViewType viewType) throws MedBotException {","lastModifiedDate":"2021-11-02"},{"lineNumber":183,"author":{"gitId":"EricBryann"},"content":"        String output;","lastModifiedDate":"2021-10-25"},{"lineNumber":184,"author":{"gitId":"EricBryann"},"content":"        switch (viewType) {","lastModifiedDate":"2021-10-25"},{"lineNumber":185,"author":{"gitId":"EricBryann"},"content":"        case PATIENT_INFO:","lastModifiedDate":"2021-10-25"},{"lineNumber":186,"author":{"gitId":"EricBryann"},"content":"            output \u003d PatientUi.getHidePatientMessage(personId);","lastModifiedDate":"2021-11-02"},{"lineNumber":187,"author":{"gitId":"EricBryann"},"content":"            break;","lastModifiedDate":"2021-10-25"},{"lineNumber":188,"author":{"gitId":"EricBryann"},"content":"        case MEDICAL_STAFF_INFO:","lastModifiedDate":"2021-10-25"},{"lineNumber":189,"author":{"gitId":"EricBryann"},"content":"            output \u003d StaffUi.getHideStaffMessage(personId);","lastModifiedDate":"2021-11-02"},{"lineNumber":190,"author":{"gitId":"EricBryann"},"content":"            break;","lastModifiedDate":"2021-10-25"},{"lineNumber":191,"author":{"gitId":"EricBryann"},"content":"        default:","lastModifiedDate":"2021-10-25"},{"lineNumber":192,"author":{"gitId":"EricBryann"},"content":"            assert false;","lastModifiedDate":"2021-10-25"},{"lineNumber":193,"author":{"gitId":"EricBryann"},"content":"            throw new MedBotException(ERROR_VIEW_CONTEXT_NOT_FOUND);","lastModifiedDate":"2021-10-25"},{"lineNumber":194,"author":{"gitId":"EricBryann"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":195,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":196,"author":{"gitId":"EricBryann"},"content":"        return output;","lastModifiedDate":"2021-10-25"},{"lineNumber":197,"author":{"gitId":"EricBryann"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":198,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":199,"author":{"gitId":"EricBryann"},"content":"    /**","lastModifiedDate":"2021-10-25"},{"lineNumber":200,"author":{"gitId":"EricBryann"},"content":"     * Returns the successful message of un-archiving a person.","lastModifiedDate":"2021-10-25"},{"lineNumber":201,"author":{"gitId":"EricBryann"},"content":"     *","lastModifiedDate":"2021-10-25"},{"lineNumber":202,"author":{"gitId":"EricBryann"},"content":"     * @param personId the ID of the person to be shown.","lastModifiedDate":"2021-11-02"},{"lineNumber":203,"author":{"gitId":"EricBryann"},"content":"     * @param viewType the viewType context of the command.","lastModifiedDate":"2021-10-25"},{"lineNumber":204,"author":{"gitId":"EricBryann"},"content":"     * @return The successful message of un-archiving the person","lastModifiedDate":"2021-10-25"},{"lineNumber":205,"author":{"gitId":"EricBryann"},"content":"     */","lastModifiedDate":"2021-10-25"},{"lineNumber":206,"author":{"gitId":"EricBryann"},"content":"    public static String getShowPersonMessage(int personId, ViewType viewType) throws MedBotException {","lastModifiedDate":"2021-11-02"},{"lineNumber":207,"author":{"gitId":"EricBryann"},"content":"        String output;","lastModifiedDate":"2021-10-25"},{"lineNumber":208,"author":{"gitId":"EricBryann"},"content":"        switch (viewType) {","lastModifiedDate":"2021-10-25"},{"lineNumber":209,"author":{"gitId":"EricBryann"},"content":"        case PATIENT_INFO:","lastModifiedDate":"2021-10-25"},{"lineNumber":210,"author":{"gitId":"EricBryann"},"content":"            output \u003d PatientUi.getShowPatientMessage(personId);","lastModifiedDate":"2021-11-02"},{"lineNumber":211,"author":{"gitId":"EricBryann"},"content":"            break;","lastModifiedDate":"2021-10-25"},{"lineNumber":212,"author":{"gitId":"EricBryann"},"content":"        case MEDICAL_STAFF_INFO:","lastModifiedDate":"2021-10-25"},{"lineNumber":213,"author":{"gitId":"EricBryann"},"content":"            output \u003d StaffUi.getShowStaffMessage(personId);","lastModifiedDate":"2021-11-02"},{"lineNumber":214,"author":{"gitId":"EricBryann"},"content":"            break;","lastModifiedDate":"2021-10-25"},{"lineNumber":215,"author":{"gitId":"EricBryann"},"content":"        default:","lastModifiedDate":"2021-10-25"},{"lineNumber":216,"author":{"gitId":"EricBryann"},"content":"            assert false;","lastModifiedDate":"2021-10-25"},{"lineNumber":217,"author":{"gitId":"EricBryann"},"content":"            throw new MedBotException(ERROR_VIEW_CONTEXT_NOT_FOUND);","lastModifiedDate":"2021-10-25"},{"lineNumber":218,"author":{"gitId":"EricBryann"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":219,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":220,"author":{"gitId":"EricBryann"},"content":"        return output;","lastModifiedDate":"2021-10-25"},{"lineNumber":221,"author":{"gitId":"EricBryann"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":222,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":223,"author":{"gitId":"jushg"},"content":"    /**","lastModifiedDate":"2021-10-25"},{"lineNumber":224,"author":{"gitId":"jushg"},"content":"     * Returns the message indicate the current viewType.","lastModifiedDate":"2021-10-25"},{"lineNumber":225,"author":{"gitId":"jushg"},"content":"     *","lastModifiedDate":"2021-10-25"},{"lineNumber":226,"author":{"gitId":"jushg"},"content":"     * @param viewType the viewType context of the command.","lastModifiedDate":"2021-10-25"},{"lineNumber":227,"author":{"gitId":"jushg"},"content":"     * @return The current view message","lastModifiedDate":"2021-10-25"},{"lineNumber":228,"author":{"gitId":"jushg"},"content":"     * @throws MedBotException when the current view is unidentifiable","lastModifiedDate":"2021-10-25"},{"lineNumber":229,"author":{"gitId":"jushg"},"content":"     */","lastModifiedDate":"2021-10-25"},{"lineNumber":230,"author":{"gitId":"jushg"},"content":"    public static String getCurrentViewMessage(ViewType viewType) throws MedBotException {","lastModifiedDate":"2021-10-25"},{"lineNumber":231,"author":{"gitId":"jushg"},"content":"        String output;","lastModifiedDate":"2021-10-25"},{"lineNumber":232,"author":{"gitId":"jushg"},"content":"        switch (viewType) {","lastModifiedDate":"2021-10-25"},{"lineNumber":233,"author":{"gitId":"jushg"},"content":"        case PATIENT_INFO:","lastModifiedDate":"2021-10-25"},{"lineNumber":234,"author":{"gitId":"EricBryann"},"content":"            output \u003d PatientUi.getCurrentViewPatientMessage();","lastModifiedDate":"2021-11-01"},{"lineNumber":235,"author":{"gitId":"jushg"},"content":"            break;","lastModifiedDate":"2021-10-25"},{"lineNumber":236,"author":{"gitId":"jushg"},"content":"        case MEDICAL_STAFF_INFO:","lastModifiedDate":"2021-10-25"},{"lineNumber":237,"author":{"gitId":"EricBryann"},"content":"            output \u003d StaffUi.getCurrentViewStaffMessage();","lastModifiedDate":"2021-11-01"},{"lineNumber":238,"author":{"gitId":"jushg"},"content":"            break;","lastModifiedDate":"2021-10-25"},{"lineNumber":239,"author":{"gitId":"jushg"},"content":"        case SCHEDULER:","lastModifiedDate":"2021-10-25"},{"lineNumber":240,"author":{"gitId":"EricBryann"},"content":"            output \u003d SchedulerUi.getCurrentViewMessage();","lastModifiedDate":"2021-11-01"},{"lineNumber":241,"author":{"gitId":"jushg"},"content":"            break;","lastModifiedDate":"2021-10-25"},{"lineNumber":242,"author":{"gitId":"jushg"},"content":"        default:","lastModifiedDate":"2021-10-25"},{"lineNumber":243,"author":{"gitId":"jushg"},"content":"            assert false;","lastModifiedDate":"2021-10-25"},{"lineNumber":244,"author":{"gitId":"jushg"},"content":"            throw new MedBotException(ERROR_VIEW_CONTEXT_NOT_FOUND);","lastModifiedDate":"2021-10-25"},{"lineNumber":245,"author":{"gitId":"jushg"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":246,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":247,"author":{"gitId":"jushg"},"content":"        return output;","lastModifiedDate":"2021-10-25"},{"lineNumber":248,"author":{"gitId":"jushg"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":249,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":250,"author":{"gitId":"jushg"},"content":"    /**","lastModifiedDate":"2021-10-22"},{"lineNumber":251,"author":{"gitId":"jushg"},"content":"     * Prints an exit message when MedBot is exiting.","lastModifiedDate":"2021-10-22"},{"lineNumber":252,"author":{"gitId":"jushg"},"content":"     *","lastModifiedDate":"2021-10-22"},{"lineNumber":253,"author":{"gitId":"jushg"},"content":"     * @return the exit Message","lastModifiedDate":"2021-10-22"},{"lineNumber":254,"author":{"gitId":"jushg"},"content":"     */","lastModifiedDate":"2021-10-22"},{"lineNumber":255,"author":{"gitId":"jushg"},"content":"    public static String getExitMessage() {","lastModifiedDate":"2021-10-25"},{"lineNumber":256,"author":{"gitId":"jushg"},"content":"        return \"Thank you for using MedBot!\" + END_LINE + \"See you again!\";","lastModifiedDate":"2021-10-22"},{"lineNumber":257,"author":{"gitId":"jushg"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":258,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":259,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":260,"author":{"gitId":"jushg"},"content":"    /**","lastModifiedDate":"2021-10-22"},{"lineNumber":261,"author":{"gitId":"jushg"},"content":"     * Prints a list of all available commands.","lastModifiedDate":"2021-10-22"},{"lineNumber":262,"author":{"gitId":"jushg"},"content":"     *","lastModifiedDate":"2021-10-22"},{"lineNumber":263,"author":{"gitId":"justinfidelis"},"content":"     * @param viewType the viewType context of the command.","lastModifiedDate":"2021-10-25"},{"lineNumber":264,"author":{"gitId":"jushg"},"content":"     * @return all supported commands.","lastModifiedDate":"2021-10-22"},{"lineNumber":265,"author":{"gitId":"jushg"},"content":"     */","lastModifiedDate":"2021-10-22"},{"lineNumber":266,"author":{"gitId":"justinfidelis"},"content":"    public static String getCommandList(ViewType viewType) throws MedBotException {","lastModifiedDate":"2021-10-25"},{"lineNumber":267,"author":{"gitId":"justinfidelis"},"content":"        switch (viewType) {","lastModifiedDate":"2021-10-25"},{"lineNumber":268,"author":{"gitId":"justinfidelis"},"content":"        case PATIENT_INFO:","lastModifiedDate":"2021-10-25"},{"lineNumber":269,"author":{"gitId":"justinfidelis"},"content":"            return PatientUi.getPatientCommandList();","lastModifiedDate":"2021-10-25"},{"lineNumber":270,"author":{"gitId":"justinfidelis"},"content":"        case MEDICAL_STAFF_INFO:","lastModifiedDate":"2021-10-25"},{"lineNumber":271,"author":{"gitId":"justinfidelis"},"content":"            return StaffUi.getStaffCommandList();","lastModifiedDate":"2021-10-25"},{"lineNumber":272,"author":{"gitId":"justinfidelis"},"content":"        case SCHEDULER:","lastModifiedDate":"2021-10-25"},{"lineNumber":273,"author":{"gitId":"justinfidelis"},"content":"            return SchedulerUi.getSchedulerCommandList();","lastModifiedDate":"2021-10-25"},{"lineNumber":274,"author":{"gitId":"justinfidelis"},"content":"        default:","lastModifiedDate":"2021-10-25"},{"lineNumber":275,"author":{"gitId":"justinfidelis"},"content":"            assert false;","lastModifiedDate":"2021-10-25"},{"lineNumber":276,"author":{"gitId":"justinfidelis"},"content":"            throw new MedBotException(ERROR_VIEW_CONTEXT_NOT_FOUND);","lastModifiedDate":"2021-10-25"},{"lineNumber":277,"author":{"gitId":"justinfidelis"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":278,"author":{"gitId":"jushg"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":279,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":280,"author":{"gitId":"jushg"},"content":"    /**","lastModifiedDate":"2021-10-22"},{"lineNumber":281,"author":{"gitId":"jushg"},"content":"     * Prints information about list command.","lastModifiedDate":"2021-10-22"},{"lineNumber":282,"author":{"gitId":"jushg"},"content":"     *","lastModifiedDate":"2021-10-22"},{"lineNumber":283,"author":{"gitId":"jushg"},"content":"     * @param viewType the viewType context of the command.","lastModifiedDate":"2021-10-22"},{"lineNumber":284,"author":{"gitId":"jushg"},"content":"     * @return the information on list command.","lastModifiedDate":"2021-10-22"},{"lineNumber":285,"author":{"gitId":"jushg"},"content":"     */","lastModifiedDate":"2021-10-22"},{"lineNumber":286,"author":{"gitId":"jushg"},"content":"    public String getListHelpMessage(ViewType viewType) throws MedBotException {","lastModifiedDate":"2021-10-22"},{"lineNumber":287,"author":{"gitId":"jushg"},"content":"        switch (viewType) {","lastModifiedDate":"2021-10-22"},{"lineNumber":288,"author":{"gitId":"jushg"},"content":"        case PATIENT_INFO:","lastModifiedDate":"2021-10-22"},{"lineNumber":289,"author":{"gitId":"jushg"},"content":"            return PatientUi.getListPatientHelpMessage();","lastModifiedDate":"2021-10-22"},{"lineNumber":290,"author":{"gitId":"jushg"},"content":"        case MEDICAL_STAFF_INFO:","lastModifiedDate":"2021-10-22"},{"lineNumber":291,"author":{"gitId":"jushg"},"content":"            return StaffUi.getListStaffHelpMessage();","lastModifiedDate":"2021-10-22"},{"lineNumber":292,"author":{"gitId":"jushg"},"content":"        case SCHEDULER:","lastModifiedDate":"2021-10-22"},{"lineNumber":293,"author":{"gitId":"justinfidelis"},"content":"            return SchedulerUi.getListAppointmentHelpMessage();","lastModifiedDate":"2021-11-07"},{"lineNumber":294,"author":{"gitId":"jushg"},"content":"        default:","lastModifiedDate":"2021-10-22"},{"lineNumber":295,"author":{"gitId":"jushg"},"content":"            assert false;","lastModifiedDate":"2021-10-22"},{"lineNumber":296,"author":{"gitId":"jushg"},"content":"            throw new MedBotException(ERROR_VIEW_CONTEXT_NOT_FOUND);","lastModifiedDate":"2021-10-22"},{"lineNumber":297,"author":{"gitId":"jushg"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":298,"author":{"gitId":"jushg"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":299,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":300,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":301,"author":{"gitId":"jushg"},"content":"    /**","lastModifiedDate":"2021-10-22"},{"lineNumber":302,"author":{"gitId":"jushg"},"content":"     * Prints information about view command.","lastModifiedDate":"2021-10-22"},{"lineNumber":303,"author":{"gitId":"jushg"},"content":"     *","lastModifiedDate":"2021-10-22"},{"lineNumber":304,"author":{"gitId":"jushg"},"content":"     * @param viewType the viewType context of the command.","lastModifiedDate":"2021-10-22"},{"lineNumber":305,"author":{"gitId":"jushg"},"content":"     * @return the information on view command.","lastModifiedDate":"2021-10-22"},{"lineNumber":306,"author":{"gitId":"jushg"},"content":"     */","lastModifiedDate":"2021-10-22"},{"lineNumber":307,"author":{"gitId":"jushg"},"content":"    public String getViewHelpMessage(ViewType viewType) throws MedBotException {","lastModifiedDate":"2021-10-22"},{"lineNumber":308,"author":{"gitId":"jushg"},"content":"        switch (viewType) {","lastModifiedDate":"2021-10-22"},{"lineNumber":309,"author":{"gitId":"jushg"},"content":"        case PATIENT_INFO:","lastModifiedDate":"2021-10-22"},{"lineNumber":310,"author":{"gitId":"jushg"},"content":"            return PatientUi.getViewPatientHelpMessage();","lastModifiedDate":"2021-10-22"},{"lineNumber":311,"author":{"gitId":"jushg"},"content":"        case MEDICAL_STAFF_INFO:","lastModifiedDate":"2021-10-22"},{"lineNumber":312,"author":{"gitId":"jushg"},"content":"            return StaffUi.getViewStaffHelpMessage();","lastModifiedDate":"2021-10-22"},{"lineNumber":313,"author":{"gitId":"jushg"},"content":"        case SCHEDULER:","lastModifiedDate":"2021-10-22"},{"lineNumber":314,"author":{"gitId":"justinfidelis"},"content":"            return SchedulerUi.getViewAppointmentHelpMessage();","lastModifiedDate":"2021-11-07"},{"lineNumber":315,"author":{"gitId":"jushg"},"content":"        default:","lastModifiedDate":"2021-10-22"},{"lineNumber":316,"author":{"gitId":"jushg"},"content":"            assert false;","lastModifiedDate":"2021-10-22"},{"lineNumber":317,"author":{"gitId":"jushg"},"content":"            throw new MedBotException(ERROR_VIEW_CONTEXT_NOT_FOUND);","lastModifiedDate":"2021-10-22"},{"lineNumber":318,"author":{"gitId":"jushg"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":319,"author":{"gitId":"jushg"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":320,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":321,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":322,"author":{"gitId":"jushg"},"content":"    /**","lastModifiedDate":"2021-10-22"},{"lineNumber":323,"author":{"gitId":"jushg"},"content":"     * Prints information about add command.","lastModifiedDate":"2021-10-22"},{"lineNumber":324,"author":{"gitId":"jushg"},"content":"     *","lastModifiedDate":"2021-10-22"},{"lineNumber":325,"author":{"gitId":"jushg"},"content":"     * @param viewType the viewType context of the command.","lastModifiedDate":"2021-10-22"},{"lineNumber":326,"author":{"gitId":"jushg"},"content":"     * @return the information on add command.","lastModifiedDate":"2021-10-22"},{"lineNumber":327,"author":{"gitId":"jushg"},"content":"     */","lastModifiedDate":"2021-10-22"},{"lineNumber":328,"author":{"gitId":"jushg"},"content":"    public String getAddHelpMessage(ViewType viewType) throws MedBotException {","lastModifiedDate":"2021-10-22"},{"lineNumber":329,"author":{"gitId":"jushg"},"content":"        switch (viewType) {","lastModifiedDate":"2021-10-22"},{"lineNumber":330,"author":{"gitId":"jushg"},"content":"        case PATIENT_INFO:","lastModifiedDate":"2021-10-22"},{"lineNumber":331,"author":{"gitId":"jushg"},"content":"            return PatientUi.getAddPatientHelpMessage();","lastModifiedDate":"2021-10-22"},{"lineNumber":332,"author":{"gitId":"jushg"},"content":"        case MEDICAL_STAFF_INFO:","lastModifiedDate":"2021-10-22"},{"lineNumber":333,"author":{"gitId":"jushg"},"content":"            return StaffUi.getAddStaffHelpMessage();","lastModifiedDate":"2021-10-22"},{"lineNumber":334,"author":{"gitId":"jushg"},"content":"        case SCHEDULER:","lastModifiedDate":"2021-10-22"},{"lineNumber":335,"author":{"gitId":"justinfidelis"},"content":"            return SchedulerUi.getAddAppointmentHelpMessage();","lastModifiedDate":"2021-11-07"},{"lineNumber":336,"author":{"gitId":"jushg"},"content":"        default:","lastModifiedDate":"2021-10-22"},{"lineNumber":337,"author":{"gitId":"jushg"},"content":"            assert false;","lastModifiedDate":"2021-10-22"},{"lineNumber":338,"author":{"gitId":"jushg"},"content":"            throw new MedBotException(ERROR_VIEW_CONTEXT_NOT_FOUND);","lastModifiedDate":"2021-10-22"},{"lineNumber":339,"author":{"gitId":"jushg"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":340,"author":{"gitId":"jushg"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":341,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":342,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":343,"author":{"gitId":"jushg"},"content":"    /**","lastModifiedDate":"2021-10-22"},{"lineNumber":344,"author":{"gitId":"jushg"},"content":"     * Prints information about edit command.","lastModifiedDate":"2021-10-22"},{"lineNumber":345,"author":{"gitId":"jushg"},"content":"     *","lastModifiedDate":"2021-10-22"},{"lineNumber":346,"author":{"gitId":"jushg"},"content":"     * @param viewType the viewType context of the command.","lastModifiedDate":"2021-10-22"},{"lineNumber":347,"author":{"gitId":"jushg"},"content":"     * @return the information on edit command.","lastModifiedDate":"2021-10-22"},{"lineNumber":348,"author":{"gitId":"jushg"},"content":"     */","lastModifiedDate":"2021-10-22"},{"lineNumber":349,"author":{"gitId":"jushg"},"content":"    public String getEditHelpMessage(ViewType viewType) throws MedBotException {","lastModifiedDate":"2021-10-22"},{"lineNumber":350,"author":{"gitId":"jushg"},"content":"        switch (viewType) {","lastModifiedDate":"2021-10-22"},{"lineNumber":351,"author":{"gitId":"jushg"},"content":"        case PATIENT_INFO:","lastModifiedDate":"2021-10-22"},{"lineNumber":352,"author":{"gitId":"jushg"},"content":"            return PatientUi.getEditPatientHelpMessage();","lastModifiedDate":"2021-10-22"},{"lineNumber":353,"author":{"gitId":"jushg"},"content":"        case MEDICAL_STAFF_INFO:","lastModifiedDate":"2021-10-22"},{"lineNumber":354,"author":{"gitId":"jushg"},"content":"            return StaffUi.getEditStaffHelpMessage();","lastModifiedDate":"2021-10-22"},{"lineNumber":355,"author":{"gitId":"jushg"},"content":"        case SCHEDULER:","lastModifiedDate":"2021-10-22"},{"lineNumber":356,"author":{"gitId":"justinfidelis"},"content":"            return SchedulerUi.getEditAppointmentHelpMessage();","lastModifiedDate":"2021-11-07"},{"lineNumber":357,"author":{"gitId":"jushg"},"content":"        default:","lastModifiedDate":"2021-10-22"},{"lineNumber":358,"author":{"gitId":"jushg"},"content":"            assert false;","lastModifiedDate":"2021-10-22"},{"lineNumber":359,"author":{"gitId":"jushg"},"content":"            throw new MedBotException(ERROR_VIEW_CONTEXT_NOT_FOUND);","lastModifiedDate":"2021-10-22"},{"lineNumber":360,"author":{"gitId":"jushg"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":361,"author":{"gitId":"jushg"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":362,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":363,"author":{"gitId":"jushg"},"content":"    /**","lastModifiedDate":"2021-10-22"},{"lineNumber":364,"author":{"gitId":"jushg"},"content":"     * Prints information about delete command.","lastModifiedDate":"2021-10-22"},{"lineNumber":365,"author":{"gitId":"jushg"},"content":"     *","lastModifiedDate":"2021-10-22"},{"lineNumber":366,"author":{"gitId":"jushg"},"content":"     * @param viewType the viewType context of the command.","lastModifiedDate":"2021-10-22"},{"lineNumber":367,"author":{"gitId":"jushg"},"content":"     * @return the information on delete command.","lastModifiedDate":"2021-10-22"},{"lineNumber":368,"author":{"gitId":"jushg"},"content":"     */","lastModifiedDate":"2021-10-22"},{"lineNumber":369,"author":{"gitId":"jushg"},"content":"    public String getDeleteHelpMessage(ViewType viewType) throws MedBotException {","lastModifiedDate":"2021-10-22"},{"lineNumber":370,"author":{"gitId":"jushg"},"content":"        switch (viewType) {","lastModifiedDate":"2021-10-22"},{"lineNumber":371,"author":{"gitId":"jushg"},"content":"        case PATIENT_INFO:","lastModifiedDate":"2021-10-22"},{"lineNumber":372,"author":{"gitId":"jushg"},"content":"            return PatientUi.getDeletePatientHelpMessage();","lastModifiedDate":"2021-10-22"},{"lineNumber":373,"author":{"gitId":"jushg"},"content":"        case MEDICAL_STAFF_INFO:","lastModifiedDate":"2021-10-22"},{"lineNumber":374,"author":{"gitId":"jushg"},"content":"            return StaffUi.getDeleteStaffHelpMessage();","lastModifiedDate":"2021-10-22"},{"lineNumber":375,"author":{"gitId":"jushg"},"content":"        case SCHEDULER:","lastModifiedDate":"2021-10-22"},{"lineNumber":376,"author":{"gitId":"justinfidelis"},"content":"            return SchedulerUi.getDeleteAppointmentHelpMessage();","lastModifiedDate":"2021-11-07"},{"lineNumber":377,"author":{"gitId":"jushg"},"content":"        default:","lastModifiedDate":"2021-10-22"},{"lineNumber":378,"author":{"gitId":"jushg"},"content":"            assert false;","lastModifiedDate":"2021-10-22"},{"lineNumber":379,"author":{"gitId":"jushg"},"content":"            throw new MedBotException(ERROR_VIEW_CONTEXT_NOT_FOUND);","lastModifiedDate":"2021-10-22"},{"lineNumber":380,"author":{"gitId":"jushg"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":381,"author":{"gitId":"jushg"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":382,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":383,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":384,"author":{"gitId":"jushg"},"content":"    /**","lastModifiedDate":"2021-10-22"},{"lineNumber":385,"author":{"gitId":"jushg"},"content":"     * Prints information about find command.","lastModifiedDate":"2021-10-22"},{"lineNumber":386,"author":{"gitId":"jushg"},"content":"     *","lastModifiedDate":"2021-10-22"},{"lineNumber":387,"author":{"gitId":"jushg"},"content":"     * @param viewType the viewType context of the command.","lastModifiedDate":"2021-10-22"},{"lineNumber":388,"author":{"gitId":"jushg"},"content":"     * @return the information on find command.","lastModifiedDate":"2021-10-22"},{"lineNumber":389,"author":{"gitId":"jushg"},"content":"     */","lastModifiedDate":"2021-10-22"},{"lineNumber":390,"author":{"gitId":"jushg"},"content":"    public String getFindHelpMessage(ViewType viewType) throws MedBotException {","lastModifiedDate":"2021-10-22"},{"lineNumber":391,"author":{"gitId":"jushg"},"content":"        switch (viewType) {","lastModifiedDate":"2021-10-22"},{"lineNumber":392,"author":{"gitId":"jushg"},"content":"        case PATIENT_INFO:","lastModifiedDate":"2021-10-22"},{"lineNumber":393,"author":{"gitId":"jushg"},"content":"            return PatientUi.getFindPatientHelpMessage();","lastModifiedDate":"2021-10-22"},{"lineNumber":394,"author":{"gitId":"jushg"},"content":"        case MEDICAL_STAFF_INFO:","lastModifiedDate":"2021-10-22"},{"lineNumber":395,"author":{"gitId":"jushg"},"content":"            return StaffUi.getFindStaffHelpMessage();","lastModifiedDate":"2021-10-22"},{"lineNumber":396,"author":{"gitId":"jushg"},"content":"        case SCHEDULER:","lastModifiedDate":"2021-10-22"},{"lineNumber":397,"author":{"gitId":"justinfidelis"},"content":"            return SchedulerUi.getFindAppointmentHelpMessage();","lastModifiedDate":"2021-11-07"},{"lineNumber":398,"author":{"gitId":"jushg"},"content":"        default:","lastModifiedDate":"2021-10-22"},{"lineNumber":399,"author":{"gitId":"jushg"},"content":"            assert false;","lastModifiedDate":"2021-10-22"},{"lineNumber":400,"author":{"gitId":"jushg"},"content":"            throw new MedBotException(ERROR_VIEW_CONTEXT_NOT_FOUND);","lastModifiedDate":"2021-10-22"},{"lineNumber":401,"author":{"gitId":"jushg"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":402,"author":{"gitId":"jushg"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":403,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":404,"author":{"gitId":"jushg"},"content":"    /**","lastModifiedDate":"2021-10-22"},{"lineNumber":405,"author":{"gitId":"jushg"},"content":"     * Prints information about switch command.","lastModifiedDate":"2021-10-22"},{"lineNumber":406,"author":{"gitId":"jushg"},"content":"     *","lastModifiedDate":"2021-10-22"},{"lineNumber":407,"author":{"gitId":"jushg"},"content":"     * @return the information on switch command.","lastModifiedDate":"2021-10-22"},{"lineNumber":408,"author":{"gitId":"jushg"},"content":"     */","lastModifiedDate":"2021-10-22"},{"lineNumber":409,"author":{"gitId":"jushg"},"content":"    public String getSwitchHelpMessage() {","lastModifiedDate":"2021-10-22"},{"lineNumber":410,"author":{"gitId":"Kureans"},"content":"        return \"Switches between the different views of MedBot.\" + END_LINE","lastModifiedDate":"2021-10-24"},{"lineNumber":411,"author":{"gitId":"Kureans"},"content":"                + \"Format: switch [VIEW_TYPE]\" + END_LINE","lastModifiedDate":"2021-10-24"},{"lineNumber":412,"author":{"gitId":"Kureans"},"content":"                + \"If the switch command is called without any parameters,\" + END_LINE","lastModifiedDate":"2021-10-24"},{"lineNumber":413,"author":{"gitId":"Kureans"},"content":"                + \"the view that is switched to will depend on the current view.\" + END_LINE","lastModifiedDate":"2021-10-24"},{"lineNumber":414,"author":{"gitId":"Kureans"},"content":"                + \"(PATIENT_INFO --\u003e MEDICAL_STAFF_INFO --\u003e SCHEDULER --\u003e PATIENT_INFO)\" + END_LINE","lastModifiedDate":"2021-10-24"},{"lineNumber":415,"author":{"gitId":"Kureans"},"content":"                + \"Expected Output:\" + END_LINE","lastModifiedDate":"2021-10-24"},{"lineNumber":416,"author":{"gitId":"Kureans"},"content":"                + \"[VIEW_TYPE_ASCI_TEXT_BANNER]\" + END_LINE + END_LINE","lastModifiedDate":"2021-10-24"},{"lineNumber":417,"author":{"gitId":"Kureans"},"content":"                + \"View has been switched to [VIEW_TYPE]\" + END_LINE;","lastModifiedDate":"2021-10-24"},{"lineNumber":418,"author":{"gitId":"jushg"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":419,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":420,"author":{"gitId":"EricBryann"},"content":"    /**","lastModifiedDate":"2021-10-25"},{"lineNumber":421,"author":{"gitId":"EricBryann"},"content":"     * Prints information about hide command.","lastModifiedDate":"2021-11-02"},{"lineNumber":422,"author":{"gitId":"EricBryann"},"content":"     *","lastModifiedDate":"2021-10-25"},{"lineNumber":423,"author":{"gitId":"EricBryann"},"content":"     * @return the information on hide command.","lastModifiedDate":"2021-11-02"},{"lineNumber":424,"author":{"gitId":"EricBryann"},"content":"     */","lastModifiedDate":"2021-10-25"},{"lineNumber":425,"author":{"gitId":"EricBryann"},"content":"    public String getHideHelpMessage(ViewType viewType) throws MedBotException {","lastModifiedDate":"2021-11-02"},{"lineNumber":426,"author":{"gitId":"EricBryann"},"content":"        switch (viewType) {","lastModifiedDate":"2021-10-25"},{"lineNumber":427,"author":{"gitId":"EricBryann"},"content":"        case PATIENT_INFO:","lastModifiedDate":"2021-10-25"},{"lineNumber":428,"author":{"gitId":"EricBryann"},"content":"            return PatientUi.getHidePatientHelpMessage();","lastModifiedDate":"2021-11-02"},{"lineNumber":429,"author":{"gitId":"EricBryann"},"content":"        case MEDICAL_STAFF_INFO:","lastModifiedDate":"2021-10-25"},{"lineNumber":430,"author":{"gitId":"EricBryann"},"content":"            return StaffUi.getHideStaffHelpMessage();","lastModifiedDate":"2021-11-02"},{"lineNumber":431,"author":{"gitId":"EricBryann"},"content":"        default:","lastModifiedDate":"2021-10-25"},{"lineNumber":432,"author":{"gitId":"EricBryann"},"content":"            assert false;","lastModifiedDate":"2021-10-25"},{"lineNumber":433,"author":{"gitId":"EricBryann"},"content":"            throw new MedBotException(ERROR_VIEW_CONTEXT_NOT_FOUND);","lastModifiedDate":"2021-10-25"},{"lineNumber":434,"author":{"gitId":"EricBryann"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":435,"author":{"gitId":"EricBryann"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":436,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":437,"author":{"gitId":"EricBryann"},"content":"    /**","lastModifiedDate":"2021-10-25"},{"lineNumber":438,"author":{"gitId":"EricBryann"},"content":"     * Prints information about hide command.","lastModifiedDate":"2021-11-02"},{"lineNumber":439,"author":{"gitId":"EricBryann"},"content":"     *","lastModifiedDate":"2021-10-25"},{"lineNumber":440,"author":{"gitId":"EricBryann"},"content":"     * @return the information on hide command.","lastModifiedDate":"2021-11-02"},{"lineNumber":441,"author":{"gitId":"EricBryann"},"content":"     */","lastModifiedDate":"2021-10-25"},{"lineNumber":442,"author":{"gitId":"EricBryann"},"content":"    public String getShowHelpMessage(ViewType viewType) throws MedBotException {","lastModifiedDate":"2021-11-02"},{"lineNumber":443,"author":{"gitId":"EricBryann"},"content":"        switch (viewType) {","lastModifiedDate":"2021-10-25"},{"lineNumber":444,"author":{"gitId":"EricBryann"},"content":"        case PATIENT_INFO:","lastModifiedDate":"2021-10-25"},{"lineNumber":445,"author":{"gitId":"EricBryann"},"content":"            return PatientUi.getShowPatientHelpMessage();","lastModifiedDate":"2021-11-02"},{"lineNumber":446,"author":{"gitId":"EricBryann"},"content":"        case MEDICAL_STAFF_INFO:","lastModifiedDate":"2021-10-25"},{"lineNumber":447,"author":{"gitId":"EricBryann"},"content":"            return StaffUi.getShowStaffHelpMessage();","lastModifiedDate":"2021-11-02"},{"lineNumber":448,"author":{"gitId":"EricBryann"},"content":"        default:","lastModifiedDate":"2021-10-25"},{"lineNumber":449,"author":{"gitId":"EricBryann"},"content":"            assert false;","lastModifiedDate":"2021-10-25"},{"lineNumber":450,"author":{"gitId":"EricBryann"},"content":"            throw new MedBotException(ERROR_VIEW_CONTEXT_NOT_FOUND);","lastModifiedDate":"2021-10-25"},{"lineNumber":451,"author":{"gitId":"EricBryann"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":452,"author":{"gitId":"EricBryann"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":453,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":454,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":455,"author":{"gitId":"jushg"},"content":"    /**","lastModifiedDate":"2021-10-22"},{"lineNumber":456,"author":{"gitId":"jushg"},"content":"     * Prints information about exit command.","lastModifiedDate":"2021-10-22"},{"lineNumber":457,"author":{"gitId":"jushg"},"content":"     *","lastModifiedDate":"2021-10-22"},{"lineNumber":458,"author":{"gitId":"jushg"},"content":"     * @return the information on exit command.","lastModifiedDate":"2021-10-22"},{"lineNumber":459,"author":{"gitId":"jushg"},"content":"     */","lastModifiedDate":"2021-10-22"},{"lineNumber":460,"author":{"gitId":"jushg"},"content":"    public String getExitHelpMessage() {","lastModifiedDate":"2021-10-22"},{"lineNumber":461,"author":{"gitId":"jushg"},"content":"        return \"Exits the program.\" + END_LINE + \"Format: exit\" + END_LINE;","lastModifiedDate":"2021-10-22"},{"lineNumber":462,"author":{"gitId":"jushg"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":463,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":464,"author":{"gitId":"jushg"},"content":"    /**","lastModifiedDate":"2021-10-26"},{"lineNumber":465,"author":{"gitId":"jushg"},"content":"     * Prints information about get View command.","lastModifiedDate":"2021-10-26"},{"lineNumber":466,"author":{"gitId":"jushg"},"content":"     *","lastModifiedDate":"2021-10-26"},{"lineNumber":467,"author":{"gitId":"jushg"},"content":"     * @return the information on get View command.","lastModifiedDate":"2021-10-26"},{"lineNumber":468,"author":{"gitId":"jushg"},"content":"     */","lastModifiedDate":"2021-10-26"},{"lineNumber":469,"author":{"gitId":"jushg"},"content":"    public String getGetCurrentViewHelpMessage() {","lastModifiedDate":"2021-10-26"},{"lineNumber":470,"author":{"gitId":"jushg"},"content":"        return \"Get the current viewType.\" + END_LINE + \"Format: get view\" + END_LINE;","lastModifiedDate":"2021-10-26"},{"lineNumber":471,"author":{"gitId":"jushg"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":472,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":473,"author":{"gitId":"Kureans"},"content":"    //@@author Kureans","lastModifiedDate":"2021-10-29"},{"lineNumber":474,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":475,"author":{"gitId":"Kureans"},"content":"    /**","lastModifiedDate":"2021-10-22"},{"lineNumber":476,"author":{"gitId":"Kureans"},"content":"     * Utility function that performs a pseudo-clear of the console.","lastModifiedDate":"2021-10-29"},{"lineNumber":477,"author":{"gitId":"Kureans"},"content":"     */","lastModifiedDate":"2021-10-22"},{"lineNumber":478,"author":{"gitId":"Kureans"},"content":"    public static void clearConsoleFromIde() {","lastModifiedDate":"2021-10-22"},{"lineNumber":479,"author":{"gitId":"Kureans"},"content":"        System.out.print(END_LINE + END_LINE + END_LINE + END_LINE + END_LINE);","lastModifiedDate":"2021-10-22"},{"lineNumber":480,"author":{"gitId":"Kureans"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":481,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":482,"author":{"gitId":"Kureans"},"content":"    /**","lastModifiedDate":"2021-10-22"},{"lineNumber":483,"author":{"gitId":"Kureans"},"content":"     * Prints the switched view message if the view is switched to the given viewType.","lastModifiedDate":"2021-11-02"},{"lineNumber":484,"author":{"gitId":"Kureans"},"content":"     *","lastModifiedDate":"2021-11-02"},{"lineNumber":485,"author":{"gitId":"Kureans"},"content":"     * @param viewType the ViewType that is switched to","lastModifiedDate":"2021-11-02"},{"lineNumber":486,"author":{"gitId":"Kureans"},"content":"     */","lastModifiedDate":"2021-10-22"},{"lineNumber":487,"author":{"gitId":"Kureans"},"content":"    public void printSwitchedViewMessage(ViewType viewType) {","lastModifiedDate":"2021-10-22"},{"lineNumber":488,"author":{"gitId":"Kureans"},"content":"        switch (viewType) {","lastModifiedDate":"2021-10-22"},{"lineNumber":489,"author":{"gitId":"Kureans"},"content":"        case PATIENT_INFO:","lastModifiedDate":"2021-10-22"},{"lineNumber":490,"author":{"gitId":"Kureans"},"content":"            printOutput(\"  ___  _ _____ ___ ___ _  _ _____ \\n\"","lastModifiedDate":"2021-11-02"},{"lineNumber":491,"author":{"gitId":"Kureans"},"content":"                    + \" | _ \\\\/_\\\\_   _|_ _| __| \\\\| |_   _|\\n\"","lastModifiedDate":"2021-10-22"},{"lineNumber":492,"author":{"gitId":"Kureans"},"content":"                    + \" |  _/ _ \\\\| |  | || _|| .` | | |  \\n\"","lastModifiedDate":"2021-10-22"},{"lineNumber":493,"author":{"gitId":"Kureans"},"content":"                    + \" |_|/_/ \\\\_\\\\_|_|___|___|_|\\\\_| |_|  \\n\"","lastModifiedDate":"2021-10-22"},{"lineNumber":494,"author":{"gitId":"Kureans"},"content":"                    + \" |_ _| \\\\| | __/ _ \\\\               \\n\"","lastModifiedDate":"2021-10-22"},{"lineNumber":495,"author":{"gitId":"Kureans"},"content":"                    + \"  | || .` | _| (_) |              \\n\"","lastModifiedDate":"2021-10-22"},{"lineNumber":496,"author":{"gitId":"Kureans"},"content":"                    + \" |___|_|\\\\_|_|_\\\\___/    __         \\n\"","lastModifiedDate":"2021-10-22"},{"lineNumber":497,"author":{"gitId":"Kureans"},"content":"                    + \" \\\\ \\\\ / /_ _| __\\\\ \\\\    / /         \\n\"","lastModifiedDate":"2021-10-22"},{"lineNumber":498,"author":{"gitId":"Kureans"},"content":"                    + \"  \\\\ V / | || _| \\\\ \\\\/\\\\/ /          \\n\"","lastModifiedDate":"2021-10-22"},{"lineNumber":499,"author":{"gitId":"Kureans"},"content":"                    + \"   \\\\_/ |___|___| \\\\_/\\\\_/           \\n\"","lastModifiedDate":"2021-10-22"},{"lineNumber":500,"author":{"gitId":"Kureans"},"content":"                    + \"                                  \");","lastModifiedDate":"2021-10-22"},{"lineNumber":501,"author":{"gitId":"Kureans"},"content":"            break;","lastModifiedDate":"2021-10-22"},{"lineNumber":502,"author":{"gitId":"Kureans"},"content":"        case SCHEDULER:","lastModifiedDate":"2021-10-22"},{"lineNumber":503,"author":{"gitId":"Kureans"},"content":"            printOutput(\"  ___  ___ _  _ ___ ___  _   _ _    ___ ___ \\n\"","lastModifiedDate":"2021-11-02"},{"lineNumber":504,"author":{"gitId":"Kureans"},"content":"                    + \" / __|/ __| || | __|   \\\\| | | | |  | __| _ \\\\\\n\"","lastModifiedDate":"2021-10-22"},{"lineNumber":505,"author":{"gitId":"Kureans"},"content":"                    + \" \\\\__ \\\\ (__| __ | _|| |) | |_| | |__| _||   /\\n\"","lastModifiedDate":"2021-10-22"},{"lineNumber":506,"author":{"gitId":"Kureans"},"content":"                    + \" |___/\\\\___|_||_|___|___/_\\\\___/|____|___|_|_\\\\\\n\"","lastModifiedDate":"2021-10-22"},{"lineNumber":507,"author":{"gitId":"Kureans"},"content":"                    + \" \\\\ \\\\ / /_ _| __\\\\ \\\\    / /                   \\n\"","lastModifiedDate":"2021-10-22"},{"lineNumber":508,"author":{"gitId":"Kureans"},"content":"                    + \"  \\\\ V / | || _| \\\\ \\\\/\\\\/ /                    \\n\"","lastModifiedDate":"2021-10-22"},{"lineNumber":509,"author":{"gitId":"Kureans"},"content":"                    + \"   \\\\_/ |___|___| \\\\_/\\\\_/                     \\n\"","lastModifiedDate":"2021-10-22"},{"lineNumber":510,"author":{"gitId":"Kureans"},"content":"                    + \"                                            \");","lastModifiedDate":"2021-10-22"},{"lineNumber":511,"author":{"gitId":"Kureans"},"content":"            break;","lastModifiedDate":"2021-10-22"},{"lineNumber":512,"author":{"gitId":"Kureans"},"content":"        case MEDICAL_STAFF_INFO:","lastModifiedDate":"2021-10-22"},{"lineNumber":513,"author":{"gitId":"Kureans"},"content":"            printOutput(\"  ___ _____ _   ___ ___  \\n\"","lastModifiedDate":"2021-11-02"},{"lineNumber":514,"author":{"gitId":"Kureans"},"content":"                    + \" / __|_   _/_\\\\ | __| __| \\n\"","lastModifiedDate":"2021-10-22"},{"lineNumber":515,"author":{"gitId":"Kureans"},"content":"                    + \" \\\\__ \\\\ | |/ _ \\\\| _|| _|  \\n\"","lastModifiedDate":"2021-10-22"},{"lineNumber":516,"author":{"gitId":"Kureans"},"content":"                    + \" |___/_|_/_/_\\\\_\\\\_| |_|   \\n\"","lastModifiedDate":"2021-10-22"},{"lineNumber":517,"author":{"gitId":"Kureans"},"content":"                    + \" |_ _| \\\\| | __/ _ \\\\      \\n\"","lastModifiedDate":"2021-10-22"},{"lineNumber":518,"author":{"gitId":"Kureans"},"content":"                    + \"  | || .` | _| (_) |     \\n\"","lastModifiedDate":"2021-10-22"},{"lineNumber":519,"author":{"gitId":"Kureans"},"content":"                    + \" |___|_|\\\\_|_|_\\\\___/    __\\n\"","lastModifiedDate":"2021-10-22"},{"lineNumber":520,"author":{"gitId":"Kureans"},"content":"                    + \" \\\\ \\\\ / /_ _| __\\\\ \\\\    / /\\n\"","lastModifiedDate":"2021-10-22"},{"lineNumber":521,"author":{"gitId":"Kureans"},"content":"                    + \"  \\\\ V / | || _| \\\\ \\\\/\\\\/ / \\n\"","lastModifiedDate":"2021-10-22"},{"lineNumber":522,"author":{"gitId":"Kureans"},"content":"                    + \"   \\\\_/ |___|___| \\\\_/\\\\_/  \\n\"","lastModifiedDate":"2021-10-22"},{"lineNumber":523,"author":{"gitId":"Kureans"},"content":"                    + \"                         \");","lastModifiedDate":"2021-10-22"},{"lineNumber":524,"author":{"gitId":"Kureans"},"content":"            break;","lastModifiedDate":"2021-10-22"},{"lineNumber":525,"author":{"gitId":"Kureans"},"content":"        default:","lastModifiedDate":"2021-10-22"},{"lineNumber":526,"author":{"gitId":"Kureans"},"content":"            break;","lastModifiedDate":"2021-10-22"},{"lineNumber":527,"author":{"gitId":"Kureans"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":528,"author":{"gitId":"Kureans"},"content":"        printOutput(\"View has been switched to \" + viewType);","lastModifiedDate":"2021-11-02"},{"lineNumber":529,"author":{"gitId":"Kureans"},"content":"    }","lastModifiedDate":"2021-11-02"},{"lineNumber":530,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":531,"author":{"gitId":"Kureans"},"content":"    /**","lastModifiedDate":"2021-11-02"},{"lineNumber":532,"author":{"gitId":"Kureans"},"content":"     * Prints the switched view message if the view is already at the given viewType.","lastModifiedDate":"2021-11-02"},{"lineNumber":533,"author":{"gitId":"Kureans"},"content":"     *","lastModifiedDate":"2021-11-02"},{"lineNumber":534,"author":{"gitId":"Kureans"},"content":"     * @param viewType the ViewType that the application is already at","lastModifiedDate":"2021-11-02"},{"lineNumber":535,"author":{"gitId":"Kureans"},"content":"     */","lastModifiedDate":"2021-11-02"},{"lineNumber":536,"author":{"gitId":"Kureans"},"content":"    public void printUnchangedViewMessage(ViewType viewType) {","lastModifiedDate":"2021-11-02"},{"lineNumber":537,"author":{"gitId":"Kureans"},"content":"        switch (viewType) {","lastModifiedDate":"2021-11-02"},{"lineNumber":538,"author":{"gitId":"Kureans"},"content":"        case PATIENT_INFO:","lastModifiedDate":"2021-11-02"},{"lineNumber":539,"author":{"gitId":"Kureans"},"content":"            printOutput(\"You are already in the Patient Management view.\");","lastModifiedDate":"2021-11-02"},{"lineNumber":540,"author":{"gitId":"Kureans"},"content":"            break;","lastModifiedDate":"2021-11-02"},{"lineNumber":541,"author":{"gitId":"Kureans"},"content":"        case MEDICAL_STAFF_INFO:","lastModifiedDate":"2021-11-02"},{"lineNumber":542,"author":{"gitId":"Kureans"},"content":"            printOutput(\"You are already in the Staff Management view.\");","lastModifiedDate":"2021-11-02"},{"lineNumber":543,"author":{"gitId":"Kureans"},"content":"            break;","lastModifiedDate":"2021-11-02"},{"lineNumber":544,"author":{"gitId":"Kureans"},"content":"        case SCHEDULER:","lastModifiedDate":"2021-11-02"},{"lineNumber":545,"author":{"gitId":"Kureans"},"content":"            printOutput(\"You are already in the Scheduler view.\");","lastModifiedDate":"2021-11-02"},{"lineNumber":546,"author":{"gitId":"Kureans"},"content":"            break;","lastModifiedDate":"2021-11-02"},{"lineNumber":547,"author":{"gitId":"Kureans"},"content":"        default:","lastModifiedDate":"2021-11-02"},{"lineNumber":548,"author":{"gitId":"Kureans"},"content":"            break;","lastModifiedDate":"2021-11-02"},{"lineNumber":549,"author":{"gitId":"Kureans"},"content":"        }","lastModifiedDate":"2021-11-02"},{"lineNumber":550,"author":{"gitId":"Kureans"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":551,"author":{"gitId":"Kureans"},"content":"}","lastModifiedDate":"2021-10-22"}],"authorContributionMap":{"justinfidelis":47,"CrimsonTitan79":1,"jushg":325,"EricBryann":91,"Kureans":87}},{"path":"src/main/java/medbot/utilities/FilterType.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Kureans"},"content":"package medbot.utilities;","lastModifiedDate":"2021-10-25"},{"lineNumber":2,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":3,"author":{"gitId":"Kureans"},"content":"public enum FilterType {","lastModifiedDate":"2021-10-25"},{"lineNumber":4,"author":{"gitId":"Kureans"},"content":"    NONE, BEFORE, AFTER","lastModifiedDate":"2021-10-25"},{"lineNumber":5,"author":{"gitId":"Kureans"},"content":"}","lastModifiedDate":"2021-10-25"}],"authorContributionMap":{"Kureans":5}},{"path":"src/main/java/medbot/utilities/Pair.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"CrimsonTitan79"},"content":"package medbot.utilities;","lastModifiedDate":"2021-10-13"},{"lineNumber":2,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":3,"author":{"gitId":"CrimsonTitan79"},"content":"public class Pair\u003cX, Y\u003e {","lastModifiedDate":"2021-10-13"},{"lineNumber":4,"author":{"gitId":"CrimsonTitan79"},"content":"    public final X first;","lastModifiedDate":"2021-10-13"},{"lineNumber":5,"author":{"gitId":"CrimsonTitan79"},"content":"    public final Y second;","lastModifiedDate":"2021-10-13"},{"lineNumber":6,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":7,"author":{"gitId":"CrimsonTitan79"},"content":"    public Pair(X x, Y y) {","lastModifiedDate":"2021-10-13"},{"lineNumber":8,"author":{"gitId":"CrimsonTitan79"},"content":"        this.first \u003d x;","lastModifiedDate":"2021-10-13"},{"lineNumber":9,"author":{"gitId":"CrimsonTitan79"},"content":"        this.second \u003d y;","lastModifiedDate":"2021-10-13"},{"lineNumber":10,"author":{"gitId":"CrimsonTitan79"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":11,"author":{"gitId":"CrimsonTitan79"},"content":"}","lastModifiedDate":"2021-10-13"}],"authorContributionMap":{"CrimsonTitan79":11}},{"path":"src/main/java/medbot/utilities/Triple.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"CrimsonTitan79"},"content":"package medbot.utilities;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":3,"author":{"gitId":"justinfidelis"},"content":"public class Triple\u003cX, Y, Z\u003e {","lastModifiedDate":"2021-11-02"},{"lineNumber":4,"author":{"gitId":"CrimsonTitan79"},"content":"    public final X first;","lastModifiedDate":"2021-10-29"},{"lineNumber":5,"author":{"gitId":"CrimsonTitan79"},"content":"    public final Y second;","lastModifiedDate":"2021-10-29"},{"lineNumber":6,"author":{"gitId":"CrimsonTitan79"},"content":"    public final Z third;","lastModifiedDate":"2021-10-29"},{"lineNumber":7,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":8,"author":{"gitId":"justinfidelis"},"content":"    public Triple(X x, Y y, Z z) {","lastModifiedDate":"2021-11-02"},{"lineNumber":9,"author":{"gitId":"CrimsonTitan79"},"content":"        this.first \u003d x;","lastModifiedDate":"2021-10-29"},{"lineNumber":10,"author":{"gitId":"CrimsonTitan79"},"content":"        this.second \u003d y;","lastModifiedDate":"2021-10-29"},{"lineNumber":11,"author":{"gitId":"CrimsonTitan79"},"content":"        this.third \u003d z;","lastModifiedDate":"2021-10-29"},{"lineNumber":12,"author":{"gitId":"CrimsonTitan79"},"content":"    }","lastModifiedDate":"2021-10-29"},{"lineNumber":13,"author":{"gitId":"CrimsonTitan79"},"content":"}","lastModifiedDate":"2021-10-29"}],"authorContributionMap":{"justinfidelis":2,"CrimsonTitan79":11}},{"path":"src/main/java/medbot/utilities/ViewType.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Kureans"},"content":"package medbot.utilities;","lastModifiedDate":"2021-10-16"},{"lineNumber":2,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":3,"author":{"gitId":"Kureans"},"content":"public enum ViewType {","lastModifiedDate":"2021-10-16"},{"lineNumber":4,"author":{"gitId":"justinfidelis"},"content":"    PATIENT_INFO, SCHEDULER, MEDICAL_STAFF_INFO;","lastModifiedDate":"2021-10-20"},{"lineNumber":5,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":6,"author":{"gitId":"justinfidelis"},"content":"    /**","lastModifiedDate":"2021-10-22"},{"lineNumber":7,"author":{"gitId":"justinfidelis"},"content":"     * Returns the next ViewType based on the given viewType.","lastModifiedDate":"2021-10-22"},{"lineNumber":8,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-10-22"},{"lineNumber":9,"author":{"gitId":"justinfidelis"},"content":"     * \u003cp\u003eOrder is fixed at PATIENT_INFO, SCHEDULER, MEDICAL_STAFF_INFO","lastModifiedDate":"2021-10-22"},{"lineNumber":10,"author":{"gitId":"justinfidelis"},"content":"     *","lastModifiedDate":"2021-10-22"},{"lineNumber":11,"author":{"gitId":"justinfidelis"},"content":"     * @param viewType a certain ViewType value","lastModifiedDate":"2021-10-22"},{"lineNumber":12,"author":{"gitId":"justinfidelis"},"content":"     * @return the next viewType","lastModifiedDate":"2021-10-22"},{"lineNumber":13,"author":{"gitId":"justinfidelis"},"content":"     */","lastModifiedDate":"2021-10-22"},{"lineNumber":14,"author":{"gitId":"justinfidelis"},"content":"    public static ViewType getNextView(ViewType viewType) {","lastModifiedDate":"2021-10-20"},{"lineNumber":15,"author":{"gitId":"justinfidelis"},"content":"        switch (viewType) {","lastModifiedDate":"2021-10-20"},{"lineNumber":16,"author":{"gitId":"justinfidelis"},"content":"        case PATIENT_INFO:","lastModifiedDate":"2021-10-20"},{"lineNumber":17,"author":{"gitId":"justinfidelis"},"content":"            return ViewType.MEDICAL_STAFF_INFO;","lastModifiedDate":"2021-10-20"},{"lineNumber":18,"author":{"gitId":"justinfidelis"},"content":"        case MEDICAL_STAFF_INFO:","lastModifiedDate":"2021-10-20"},{"lineNumber":19,"author":{"gitId":"justinfidelis"},"content":"            return ViewType.SCHEDULER;","lastModifiedDate":"2021-10-20"},{"lineNumber":20,"author":{"gitId":"justinfidelis"},"content":"        default:","lastModifiedDate":"2021-10-20"},{"lineNumber":21,"author":{"gitId":"justinfidelis"},"content":"            return ViewType.PATIENT_INFO;","lastModifiedDate":"2021-10-20"},{"lineNumber":22,"author":{"gitId":"justinfidelis"},"content":"        }","lastModifiedDate":"2021-10-20"},{"lineNumber":23,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":24,"author":{"gitId":"Kureans"},"content":"}","lastModifiedDate":"2021-10-16"}],"authorContributionMap":{"justinfidelis":20,"Kureans":4}},{"path":"src/test/java/medbot/ListTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Kureans"},"content":"package medbot;","lastModifiedDate":"2021-11-02"},{"lineNumber":2,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":3,"author":{"gitId":"Kureans"},"content":"import medbot.exceptions.MedBotException;","lastModifiedDate":"2021-11-02"},{"lineNumber":4,"author":{"gitId":"Kureans"},"content":"import medbot.list.PatientList;","lastModifiedDate":"2021-11-02"},{"lineNumber":5,"author":{"gitId":"Kureans"},"content":"import medbot.person.Patient;","lastModifiedDate":"2021-11-02"},{"lineNumber":6,"author":{"gitId":"Kureans"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2021-11-02"},{"lineNumber":7,"author":{"gitId":"Kureans"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-11-02"},{"lineNumber":8,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":9,"author":{"gitId":"Kureans"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-11-02"},{"lineNumber":10,"author":{"gitId":"Kureans"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2021-11-02"},{"lineNumber":11,"author":{"gitId":"jushg"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2021-11-03"},{"lineNumber":12,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":13,"author":{"gitId":"Kureans"},"content":"public class ListTest {","lastModifiedDate":"2021-11-02"},{"lineNumber":14,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":15,"author":{"gitId":"Kureans"},"content":"    private PatientList patientList \u003d new PatientList();","lastModifiedDate":"2021-11-02"},{"lineNumber":16,"author":{"gitId":"Kureans"},"content":"    private static final String END_LINE \u003d System.lineSeparator();","lastModifiedDate":"2021-11-02"},{"lineNumber":17,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":18,"author":{"gitId":"Kureans"},"content":"    @BeforeEach","lastModifiedDate":"2021-11-02"},{"lineNumber":19,"author":{"gitId":"Kureans"},"content":"    public void init() {","lastModifiedDate":"2021-11-02"},{"lineNumber":20,"author":{"gitId":"Kureans"},"content":"        Patient patient \u003d new Patient();","lastModifiedDate":"2021-11-02"},{"lineNumber":21,"author":{"gitId":"Kureans"},"content":"        patient.setName(\"Adam\");","lastModifiedDate":"2021-11-02"},{"lineNumber":22,"author":{"gitId":"Kureans"},"content":"        patient.setIcNumber(\"S1234567A\");","lastModifiedDate":"2021-11-02"},{"lineNumber":23,"author":{"gitId":"Kureans"},"content":"        patient.setPhoneNumber(\"98765432\");","lastModifiedDate":"2021-11-02"},{"lineNumber":24,"author":{"gitId":"Kureans"},"content":"        patient.setEmailAddress(\"adam@example.com\");","lastModifiedDate":"2021-11-02"},{"lineNumber":25,"author":{"gitId":"Kureans"},"content":"        patient.setResidentialAddress(\"ABC Street 123\");","lastModifiedDate":"2021-11-02"},{"lineNumber":26,"author":{"gitId":"Kureans"},"content":"        try {","lastModifiedDate":"2021-11-02"},{"lineNumber":27,"author":{"gitId":"Kureans"},"content":"            patientList.addPerson(patient);","lastModifiedDate":"2021-11-02"},{"lineNumber":28,"author":{"gitId":"Kureans"},"content":"        } catch (Exception e) {","lastModifiedDate":"2021-11-02"},{"lineNumber":29,"author":{"gitId":"jushg"},"content":"            fail(\"Cannot add the person to the list\");","lastModifiedDate":"2021-11-03"},{"lineNumber":30,"author":{"gitId":"Kureans"},"content":"        }","lastModifiedDate":"2021-11-02"},{"lineNumber":31,"author":{"gitId":"Kureans"},"content":"    }","lastModifiedDate":"2021-11-02"},{"lineNumber":32,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":33,"author":{"gitId":"Kureans"},"content":"    @Test","lastModifiedDate":"2021-11-02"},{"lineNumber":34,"author":{"gitId":"Kureans"},"content":"    public void testAddPerson_personIcAlreadyExists_ExceptionThrown() {","lastModifiedDate":"2021-11-02"},{"lineNumber":35,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":36,"author":{"gitId":"Kureans"},"content":"        Patient patientWithSameId \u003d new Patient();","lastModifiedDate":"2021-11-02"},{"lineNumber":37,"author":{"gitId":"Kureans"},"content":"        patientWithSameId.setName(\"Bob\");","lastModifiedDate":"2021-11-02"},{"lineNumber":38,"author":{"gitId":"Kureans"},"content":"        patientWithSameId.setIcNumber(\"S1234567A\");","lastModifiedDate":"2021-11-02"},{"lineNumber":39,"author":{"gitId":"Kureans"},"content":"        MedBotException medBotException \u003d assertThrows(MedBotException.class, () -\u003e {","lastModifiedDate":"2021-11-02"},{"lineNumber":40,"author":{"gitId":"Kureans"},"content":"            patientList.addPerson(patientWithSameId);","lastModifiedDate":"2021-11-02"},{"lineNumber":41,"author":{"gitId":"Kureans"},"content":"        });","lastModifiedDate":"2021-11-02"},{"lineNumber":42,"author":{"gitId":"Kureans"},"content":"        String expectedMessage \u003d \"The patient with IC S1234567A is already in the record.\" + END_LINE;","lastModifiedDate":"2021-11-02"},{"lineNumber":43,"author":{"gitId":"Kureans"},"content":"        String actualMessage \u003d medBotException.getMessage();","lastModifiedDate":"2021-11-02"},{"lineNumber":44,"author":{"gitId":"Kureans"},"content":"        assertEquals(expectedMessage, actualMessage);","lastModifiedDate":"2021-11-02"},{"lineNumber":45,"author":{"gitId":"Kureans"},"content":"    }","lastModifiedDate":"2021-11-02"},{"lineNumber":46,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":47,"author":{"gitId":"Kureans"},"content":"    @Test","lastModifiedDate":"2021-11-02"},{"lineNumber":48,"author":{"gitId":"Kureans"},"content":"    public void testAddPerson_personIcDoesNotExist_Success() {","lastModifiedDate":"2021-11-02"},{"lineNumber":49,"author":{"gitId":"Kureans"},"content":"        Patient patientWithDiffId \u003d new Patient();","lastModifiedDate":"2021-11-02"},{"lineNumber":50,"author":{"gitId":"Kureans"},"content":"        patientWithDiffId.setName(\"Charlie\");","lastModifiedDate":"2021-11-02"},{"lineNumber":51,"author":{"gitId":"Kureans"},"content":"        patientWithDiffId.setIcNumber(\"S1231231B\");","lastModifiedDate":"2021-11-02"},{"lineNumber":52,"author":{"gitId":"Kureans"},"content":"        int actualPatientId \u003d 0;","lastModifiedDate":"2021-11-02"},{"lineNumber":53,"author":{"gitId":"Kureans"},"content":"        int expectedPatientId \u003d 2;","lastModifiedDate":"2021-11-02"},{"lineNumber":54,"author":{"gitId":"Kureans"},"content":"        try {","lastModifiedDate":"2021-11-02"},{"lineNumber":55,"author":{"gitId":"Kureans"},"content":"            actualPatientId \u003d patientList.addPerson(patientWithDiffId);","lastModifiedDate":"2021-11-02"},{"lineNumber":56,"author":{"gitId":"Kureans"},"content":"        } catch (Exception e) {","lastModifiedDate":"2021-11-02"},{"lineNumber":57,"author":{"gitId":"jushg"},"content":"            fail(\"Cannot add the person to the list\");","lastModifiedDate":"2021-11-03"},{"lineNumber":58,"author":{"gitId":"Kureans"},"content":"        }","lastModifiedDate":"2021-11-02"},{"lineNumber":59,"author":{"gitId":"Kureans"},"content":"        //Should be second patient in the list","lastModifiedDate":"2021-11-02"},{"lineNumber":60,"author":{"gitId":"Kureans"},"content":"        assertEquals(expectedPatientId, actualPatientId);","lastModifiedDate":"2021-11-02"},{"lineNumber":61,"author":{"gitId":"Kureans"},"content":"    }","lastModifiedDate":"2021-11-02"},{"lineNumber":62,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":63,"author":{"gitId":"Kureans"},"content":"    @Test","lastModifiedDate":"2021-11-02"},{"lineNumber":64,"author":{"gitId":"Kureans"},"content":"    public void testGetPersonInfo_personDoesNotExist_ExceptionThrown() {","lastModifiedDate":"2021-11-02"},{"lineNumber":65,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":66,"author":{"gitId":"Kureans"},"content":"        int nonExistentPatientId \u003d 2;","lastModifiedDate":"2021-11-02"},{"lineNumber":67,"author":{"gitId":"Kureans"},"content":"        MedBotException medBotException \u003d assertThrows(MedBotException.class, () -\u003e {","lastModifiedDate":"2021-11-02"},{"lineNumber":68,"author":{"gitId":"Kureans"},"content":"            patientList.getPersonInfo(nonExistentPatientId);","lastModifiedDate":"2021-11-02"},{"lineNumber":69,"author":{"gitId":"Kureans"},"content":"        });","lastModifiedDate":"2021-11-02"},{"lineNumber":70,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":71,"author":{"gitId":"justinfidelis"},"content":"        String expectedMessage \u003d \"No patient with ID \" + nonExistentPatientId + \" found.\" + END_LINE;","lastModifiedDate":"2021-11-07"},{"lineNumber":72,"author":{"gitId":"Kureans"},"content":"        String actualMessage \u003d medBotException.getMessage();","lastModifiedDate":"2021-11-02"},{"lineNumber":73,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":74,"author":{"gitId":"Kureans"},"content":"        assertEquals(expectedMessage, actualMessage);","lastModifiedDate":"2021-11-02"},{"lineNumber":75,"author":{"gitId":"Kureans"},"content":"    }","lastModifiedDate":"2021-11-02"},{"lineNumber":76,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":77,"author":{"gitId":"Kureans"},"content":"    @Test","lastModifiedDate":"2021-11-02"},{"lineNumber":78,"author":{"gitId":"Kureans"},"content":"    public void testGetPersonInfo_personExists_Success() {","lastModifiedDate":"2021-11-02"},{"lineNumber":79,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":80,"author":{"gitId":"Kureans"},"content":"        int existingPatientId \u003d 1;","lastModifiedDate":"2021-11-02"},{"lineNumber":81,"author":{"gitId":"Kureans"},"content":"        String actualMessage \u003d \"\";","lastModifiedDate":"2021-11-02"},{"lineNumber":82,"author":{"gitId":"Kureans"},"content":"        try {","lastModifiedDate":"2021-11-02"},{"lineNumber":83,"author":{"gitId":"Kureans"},"content":"            actualMessage \u003d patientList.getPersonInfo(existingPatientId);","lastModifiedDate":"2021-11-02"},{"lineNumber":84,"author":{"gitId":"Kureans"},"content":"        } catch (Exception e) {","lastModifiedDate":"2021-11-02"},{"lineNumber":85,"author":{"gitId":"jushg"},"content":"            fail(\"No person with that Id\");","lastModifiedDate":"2021-11-03"},{"lineNumber":86,"author":{"gitId":"Kureans"},"content":"        }","lastModifiedDate":"2021-11-02"},{"lineNumber":87,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":88,"author":{"gitId":"Kureans"},"content":"        String name \u003d \"Adam\";","lastModifiedDate":"2021-11-02"},{"lineNumber":89,"author":{"gitId":"Kureans"},"content":"        String icNumber \u003d \"S1234567A\";","lastModifiedDate":"2021-11-02"},{"lineNumber":90,"author":{"gitId":"Kureans"},"content":"        String phoneNumber \u003d \"98765432\";","lastModifiedDate":"2021-11-02"},{"lineNumber":91,"author":{"gitId":"Kureans"},"content":"        String emailAddress \u003d \"adam@example.com\";","lastModifiedDate":"2021-11-02"},{"lineNumber":92,"author":{"gitId":"Kureans"},"content":"        String residentialAddress \u003d \"ABC Street 123\";","lastModifiedDate":"2021-11-02"},{"lineNumber":93,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":94,"author":{"gitId":"Kureans"},"content":"        String expectedMessage \u003d \"Patient ID: 1\" + END_LINE","lastModifiedDate":"2021-11-02"},{"lineNumber":95,"author":{"gitId":"Kureans"},"content":"                + \"IC: \" + icNumber + END_LINE","lastModifiedDate":"2021-11-02"},{"lineNumber":96,"author":{"gitId":"Kureans"},"content":"                + \"Name: \" + name + END_LINE","lastModifiedDate":"2021-11-02"},{"lineNumber":97,"author":{"gitId":"Kureans"},"content":"                + \"H/P: \" + phoneNumber + END_LINE","lastModifiedDate":"2021-11-02"},{"lineNumber":98,"author":{"gitId":"Kureans"},"content":"                + \"Email: \" + emailAddress + END_LINE","lastModifiedDate":"2021-11-02"},{"lineNumber":99,"author":{"gitId":"Kureans"},"content":"                + \"Address: \" + residentialAddress;","lastModifiedDate":"2021-11-02"},{"lineNumber":100,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":101,"author":{"gitId":"Kureans"},"content":"        assertEquals(expectedMessage, actualMessage);","lastModifiedDate":"2021-11-02"},{"lineNumber":102,"author":{"gitId":"Kureans"},"content":"    }","lastModifiedDate":"2021-11-02"},{"lineNumber":103,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":104,"author":{"gitId":"Kureans"},"content":"    @Test","lastModifiedDate":"2021-11-02"},{"lineNumber":105,"author":{"gitId":"Kureans"},"content":"    public void testHidePerson_personDoesNotExist_ExceptionThrown() {","lastModifiedDate":"2021-11-02"},{"lineNumber":106,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":107,"author":{"gitId":"Kureans"},"content":"        int nonExistentPatientId \u003d 2;","lastModifiedDate":"2021-11-02"},{"lineNumber":108,"author":{"gitId":"Kureans"},"content":"        MedBotException medBotException \u003d assertThrows(MedBotException.class, () -\u003e {","lastModifiedDate":"2021-11-02"},{"lineNumber":109,"author":{"gitId":"Kureans"},"content":"            patientList.hidePerson(nonExistentPatientId);","lastModifiedDate":"2021-11-02"},{"lineNumber":110,"author":{"gitId":"Kureans"},"content":"        });","lastModifiedDate":"2021-11-02"},{"lineNumber":111,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":112,"author":{"gitId":"justinfidelis"},"content":"        String expectedMessage \u003d \"No patient with ID \" + nonExistentPatientId + \" found.\" + END_LINE;","lastModifiedDate":"2021-11-07"},{"lineNumber":113,"author":{"gitId":"Kureans"},"content":"        String actualMessage \u003d medBotException.getMessage();","lastModifiedDate":"2021-11-02"},{"lineNumber":114,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":115,"author":{"gitId":"Kureans"},"content":"        assertEquals(expectedMessage, actualMessage);","lastModifiedDate":"2021-11-02"},{"lineNumber":116,"author":{"gitId":"Kureans"},"content":"    }","lastModifiedDate":"2021-11-02"},{"lineNumber":117,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":118,"author":{"gitId":"Kureans"},"content":"    @Test","lastModifiedDate":"2021-11-02"},{"lineNumber":119,"author":{"gitId":"Kureans"},"content":"    public void testHidePerson_personExistsButAlreadyHidden_ExceptionThrown() {","lastModifiedDate":"2021-11-02"},{"lineNumber":120,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":121,"author":{"gitId":"Kureans"},"content":"        int existingPatientId \u003d 1;","lastModifiedDate":"2021-11-02"},{"lineNumber":122,"author":{"gitId":"Kureans"},"content":"        try {","lastModifiedDate":"2021-11-02"},{"lineNumber":123,"author":{"gitId":"Kureans"},"content":"            patientList.hidePerson(existingPatientId);","lastModifiedDate":"2021-11-02"},{"lineNumber":124,"author":{"gitId":"Kureans"},"content":"        } catch (Exception e) {","lastModifiedDate":"2021-11-02"},{"lineNumber":125,"author":{"gitId":"jushg"},"content":"            fail(\"Person have already been hidden\");","lastModifiedDate":"2021-11-03"},{"lineNumber":126,"author":{"gitId":"Kureans"},"content":"        }","lastModifiedDate":"2021-11-02"},{"lineNumber":127,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":128,"author":{"gitId":"Kureans"},"content":"        MedBotException medBotException \u003d assertThrows(MedBotException.class, () -\u003e {","lastModifiedDate":"2021-11-02"},{"lineNumber":129,"author":{"gitId":"Kureans"},"content":"            patientList.hidePerson(existingPatientId);","lastModifiedDate":"2021-11-02"},{"lineNumber":130,"author":{"gitId":"Kureans"},"content":"        });","lastModifiedDate":"2021-11-02"},{"lineNumber":131,"author":{"gitId":"Kureans"},"content":"        String expectedMessage \u003d \"The patient with ID \" + existingPatientId + \" is already hidden.\" + END_LINE;","lastModifiedDate":"2021-11-02"},{"lineNumber":132,"author":{"gitId":"Kureans"},"content":"        String actualMessage \u003d medBotException.getMessage();","lastModifiedDate":"2021-11-02"},{"lineNumber":133,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":134,"author":{"gitId":"Kureans"},"content":"        assertEquals(expectedMessage, actualMessage);","lastModifiedDate":"2021-11-02"},{"lineNumber":135,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":136,"author":{"gitId":"Kureans"},"content":"    }","lastModifiedDate":"2021-11-02"},{"lineNumber":137,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":138,"author":{"gitId":"Kureans"},"content":"    @Test","lastModifiedDate":"2021-11-02"},{"lineNumber":139,"author":{"gitId":"Kureans"},"content":"    public void testShowPerson_personDoesNotExist_ExceptionThrown() {","lastModifiedDate":"2021-11-02"},{"lineNumber":140,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":141,"author":{"gitId":"Kureans"},"content":"        int nonExistentPatientId \u003d 2;","lastModifiedDate":"2021-11-02"},{"lineNumber":142,"author":{"gitId":"Kureans"},"content":"        MedBotException medBotException \u003d assertThrows(MedBotException.class, () -\u003e {","lastModifiedDate":"2021-11-02"},{"lineNumber":143,"author":{"gitId":"Kureans"},"content":"            patientList.showPerson(nonExistentPatientId);","lastModifiedDate":"2021-11-02"},{"lineNumber":144,"author":{"gitId":"Kureans"},"content":"        });","lastModifiedDate":"2021-11-02"},{"lineNumber":145,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":146,"author":{"gitId":"justinfidelis"},"content":"        String expectedMessage \u003d \"No patient with ID \" + nonExistentPatientId + \" found.\" + END_LINE;","lastModifiedDate":"2021-11-07"},{"lineNumber":147,"author":{"gitId":"Kureans"},"content":"        String actualMessage \u003d medBotException.getMessage();","lastModifiedDate":"2021-11-02"},{"lineNumber":148,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":149,"author":{"gitId":"Kureans"},"content":"        assertEquals(expectedMessage, actualMessage);","lastModifiedDate":"2021-11-02"},{"lineNumber":150,"author":{"gitId":"Kureans"},"content":"    }","lastModifiedDate":"2021-11-02"},{"lineNumber":151,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":152,"author":{"gitId":"Kureans"},"content":"    @Test","lastModifiedDate":"2021-11-02"},{"lineNumber":153,"author":{"gitId":"Kureans"},"content":"    public void testShowPerson_personExistsButNotHidden_ExceptionThrown() {","lastModifiedDate":"2021-11-02"},{"lineNumber":154,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":155,"author":{"gitId":"Kureans"},"content":"        int existingPatientId \u003d 1;","lastModifiedDate":"2021-11-02"},{"lineNumber":156,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":157,"author":{"gitId":"Kureans"},"content":"        MedBotException medBotException \u003d assertThrows(MedBotException.class, () -\u003e {","lastModifiedDate":"2021-11-02"},{"lineNumber":158,"author":{"gitId":"Kureans"},"content":"            patientList.showPerson(existingPatientId);","lastModifiedDate":"2021-11-02"},{"lineNumber":159,"author":{"gitId":"Kureans"},"content":"        });","lastModifiedDate":"2021-11-02"},{"lineNumber":160,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":161,"author":{"gitId":"Kureans"},"content":"        String expectedMessage \u003d \"The patient with ID \" + existingPatientId + \" is already not-hidden.\" + END_LINE;","lastModifiedDate":"2021-11-02"},{"lineNumber":162,"author":{"gitId":"Kureans"},"content":"        String actualMessage \u003d medBotException.getMessage();","lastModifiedDate":"2021-11-02"},{"lineNumber":163,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":164,"author":{"gitId":"Kureans"},"content":"        assertEquals(expectedMessage, actualMessage);","lastModifiedDate":"2021-11-02"},{"lineNumber":165,"author":{"gitId":"Kureans"},"content":"    }","lastModifiedDate":"2021-11-02"},{"lineNumber":166,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":167,"author":{"gitId":"Kureans"},"content":"    @Test","lastModifiedDate":"2021-11-02"},{"lineNumber":168,"author":{"gitId":"Kureans"},"content":"    public void testShowPerson_personExistsAndHidden_Success() {","lastModifiedDate":"2021-11-02"},{"lineNumber":169,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":170,"author":{"gitId":"Kureans"},"content":"        int existingPatientId \u003d 1;","lastModifiedDate":"2021-11-02"},{"lineNumber":171,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":172,"author":{"gitId":"Kureans"},"content":"        //driver code to hide patient first","lastModifiedDate":"2021-11-02"},{"lineNumber":173,"author":{"gitId":"Kureans"},"content":"        try {","lastModifiedDate":"2021-11-02"},{"lineNumber":174,"author":{"gitId":"Kureans"},"content":"            patientList.hidePerson(existingPatientId);","lastModifiedDate":"2021-11-02"},{"lineNumber":175,"author":{"gitId":"Kureans"},"content":"        } catch (Exception e) {","lastModifiedDate":"2021-11-02"},{"lineNumber":176,"author":{"gitId":"jushg"},"content":"            fail(\"Person have already been hidden\");","lastModifiedDate":"2021-11-03"},{"lineNumber":177,"author":{"gitId":"Kureans"},"content":"        }","lastModifiedDate":"2021-11-02"},{"lineNumber":178,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":179,"author":{"gitId":"Kureans"},"content":"        try {","lastModifiedDate":"2021-11-02"},{"lineNumber":180,"author":{"gitId":"Kureans"},"content":"            patientList.showPerson(existingPatientId);","lastModifiedDate":"2021-11-02"},{"lineNumber":181,"author":{"gitId":"Kureans"},"content":"        } catch (Exception e) {","lastModifiedDate":"2021-11-02"},{"lineNumber":182,"author":{"gitId":"jushg"},"content":"            fail(\"Person have already been shown\");","lastModifiedDate":"2021-11-03"},{"lineNumber":183,"author":{"gitId":"Kureans"},"content":"        }","lastModifiedDate":"2021-11-02"},{"lineNumber":184,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":185,"author":{"gitId":"Kureans"},"content":"        boolean isHidden \u003d patientList.getPersonIsHidden(existingPatientId);","lastModifiedDate":"2021-11-02"},{"lineNumber":186,"author":{"gitId":"Kureans"},"content":"        assertEquals(false, isHidden);","lastModifiedDate":"2021-11-02"},{"lineNumber":187,"author":{"gitId":"Kureans"},"content":"    }","lastModifiedDate":"2021-11-02"},{"lineNumber":188,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":189,"author":{"gitId":"Kureans"},"content":"}","lastModifiedDate":"2021-11-02"}],"authorContributionMap":{"justinfidelis":3,"jushg":7,"Kureans":179}},{"path":"src/test/java/medbot/MedBotTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"justinfidelis"},"content":"package medbot;","lastModifiedDate":"2021-09-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2020-05-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":5,"author":{"gitId":"EricBryann"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-06"},{"lineNumber":6,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":7,"author":{"gitId":"justinfidelis"},"content":"class MedBotTest {","lastModifiedDate":"2021-10-06"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2020-05-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public void sampleTest() {","lastModifiedDate":"2020-05-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"        assertTrue(true);","lastModifiedDate":"2020-05-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-24"}],"authorContributionMap":{"justinfidelis":2,"-":8,"EricBryann":2}},{"path":"src/test/java/medbot/ParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"justinfidelis"},"content":"package medbot;","lastModifiedDate":"2021-10-06"},{"lineNumber":2,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":3,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":4,"author":{"gitId":"jushg"},"content":"import medbot.command.Command;","lastModifiedDate":"2021-10-21"},{"lineNumber":5,"author":{"gitId":"jushg"},"content":"import medbot.command.ExitCommand;","lastModifiedDate":"2021-10-21"},{"lineNumber":6,"author":{"gitId":"jushg"},"content":"import medbot.command.HelpCommand;","lastModifiedDate":"2021-10-21"},{"lineNumber":7,"author":{"gitId":"jushg"},"content":"import medbot.command.SwitchCommand;","lastModifiedDate":"2021-10-21"},{"lineNumber":8,"author":{"gitId":"jushg"},"content":"import medbot.command.appointmentcommand.AddAppointmentCommand;","lastModifiedDate":"2021-10-22"},{"lineNumber":9,"author":{"gitId":"jushg"},"content":"import medbot.command.appointmentcommand.DeleteAppointmentCommand;","lastModifiedDate":"2021-10-22"},{"lineNumber":10,"author":{"gitId":"jushg"},"content":"import medbot.command.appointmentcommand.EditAppointmentCommand;","lastModifiedDate":"2021-10-22"},{"lineNumber":11,"author":{"gitId":"jushg"},"content":"import medbot.command.appointmentcommand.ListAppointmentCommand;","lastModifiedDate":"2021-10-22"},{"lineNumber":12,"author":{"gitId":"justinfidelis"},"content":"import medbot.command.personcommand.patientcommand.AddPatientCommand;","lastModifiedDate":"2021-10-21"},{"lineNumber":13,"author":{"gitId":"justinfidelis"},"content":"import medbot.command.personcommand.patientcommand.DeletePatientCommand;","lastModifiedDate":"2021-10-21"},{"lineNumber":14,"author":{"gitId":"justinfidelis"},"content":"import medbot.command.personcommand.patientcommand.EditPatientCommand;","lastModifiedDate":"2021-10-21"},{"lineNumber":15,"author":{"gitId":"justinfidelis"},"content":"import medbot.command.personcommand.patientcommand.FindPatientCommand;","lastModifiedDate":"2021-10-21"},{"lineNumber":16,"author":{"gitId":"EricBryann"},"content":"import medbot.command.personcommand.patientcommand.HidePatientCommand;","lastModifiedDate":"2021-11-02"},{"lineNumber":17,"author":{"gitId":"justinfidelis"},"content":"import medbot.command.personcommand.patientcommand.ListPatientCommand;","lastModifiedDate":"2021-10-21"},{"lineNumber":18,"author":{"gitId":"EricBryann"},"content":"import medbot.command.personcommand.patientcommand.ShowPatientCommand;","lastModifiedDate":"2021-11-02"},{"lineNumber":19,"author":{"gitId":"justinfidelis"},"content":"import medbot.command.personcommand.patientcommand.ViewPatientCommand;","lastModifiedDate":"2021-10-21"},{"lineNumber":20,"author":{"gitId":"jushg"},"content":"import medbot.command.personcommand.staffcommand.AddStaffCommand;","lastModifiedDate":"2021-10-22"},{"lineNumber":21,"author":{"gitId":"jushg"},"content":"import medbot.command.personcommand.staffcommand.DeleteStaffCommand;","lastModifiedDate":"2021-10-22"},{"lineNumber":22,"author":{"gitId":"EricBryann"},"content":"import medbot.command.personcommand.staffcommand.EditStaffCommand;","lastModifiedDate":"2021-11-01"},{"lineNumber":23,"author":{"gitId":"jushg"},"content":"import medbot.command.personcommand.staffcommand.FindStaffCommand;","lastModifiedDate":"2021-10-22"},{"lineNumber":24,"author":{"gitId":"EricBryann"},"content":"import medbot.command.personcommand.staffcommand.HideStaffCommand;","lastModifiedDate":"2021-11-02"},{"lineNumber":25,"author":{"gitId":"jushg"},"content":"import medbot.command.personcommand.staffcommand.ListStaffCommand;","lastModifiedDate":"2021-10-22"},{"lineNumber":26,"author":{"gitId":"EricBryann"},"content":"import medbot.command.personcommand.staffcommand.ShowStaffCommand;","lastModifiedDate":"2021-11-02"},{"lineNumber":27,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":28,"author":{"gitId":"EricBryann"},"content":"import medbot.command.personcommand.staffcommand.ViewStaffCommand;","lastModifiedDate":"2021-11-02"},{"lineNumber":29,"author":{"gitId":"jushg"},"content":"import medbot.exceptions.MedBotParserException;","lastModifiedDate":"2021-10-21"},{"lineNumber":30,"author":{"gitId":"justinfidelis"},"content":"import medbot.parser.Parser;","lastModifiedDate":"2021-10-22"},{"lineNumber":31,"author":{"gitId":"justinfidelis"},"content":"import medbot.parser.ParserUtils;","lastModifiedDate":"2021-10-22"},{"lineNumber":32,"author":{"gitId":"EricBryann"},"content":"import medbot.person.Patient;","lastModifiedDate":"2021-10-19"},{"lineNumber":33,"author":{"gitId":"EricBryann"},"content":"import medbot.person.Person;","lastModifiedDate":"2021-10-19"},{"lineNumber":34,"author":{"gitId":"jushg"},"content":"import medbot.utilities.ViewType;","lastModifiedDate":"2021-10-21"},{"lineNumber":35,"author":{"gitId":"justinfidelis"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-06"},{"lineNumber":36,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":37,"author":{"gitId":"justinfidelis"},"content":"import java.lang.reflect.InvocationTargetException;","lastModifiedDate":"2021-10-06"},{"lineNumber":38,"author":{"gitId":"justinfidelis"},"content":"import java.lang.reflect.Method;","lastModifiedDate":"2021-10-06"},{"lineNumber":39,"author":{"gitId":"jushg"},"content":"import java.util.HashMap;","lastModifiedDate":"2021-10-21"},{"lineNumber":40,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":41,"author":{"gitId":"EricBryann"},"content":"import static org.junit.jupiter.api.Assertions.assertArrayEquals;","lastModifiedDate":"2021-11-01"},{"lineNumber":42,"author":{"gitId":"EricBryann"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-11-01"},{"lineNumber":43,"author":{"gitId":"EricBryann"},"content":"import static org.junit.jupiter.api.Assertions.assertSame;","lastModifiedDate":"2021-11-01"},{"lineNumber":44,"author":{"gitId":"EricBryann"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2021-11-01"},{"lineNumber":45,"author":{"gitId":"EricBryann"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-11-01"},{"lineNumber":46,"author":{"gitId":"EricBryann"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2021-11-01"},{"lineNumber":47,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":48,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":49,"author":{"gitId":"justinfidelis"},"content":"class ParserTest {","lastModifiedDate":"2021-10-06"},{"lineNumber":50,"author":{"gitId":"jushg"},"content":"    private static final String END_LINE \u003d System.lineSeparator();","lastModifiedDate":"2021-10-21"},{"lineNumber":51,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":52,"author":{"gitId":"justinfidelis"},"content":"    @Test","lastModifiedDate":"2021-10-06"},{"lineNumber":53,"author":{"gitId":"justinfidelis"},"content":"    public void testParseEmailAddress_correctFormat() {","lastModifiedDate":"2021-10-24"},{"lineNumber":54,"author":{"gitId":"justinfidelis"},"content":"        try {","lastModifiedDate":"2021-10-06"},{"lineNumber":55,"author":{"gitId":"justinfidelis"},"content":"            assertEquals(\"johntan@example.com\",","lastModifiedDate":"2021-10-24"},{"lineNumber":56,"author":{"gitId":"justinfidelis"},"content":"                    ParserUtils.parseEmailAddress(\"johntan@example.com\"));","lastModifiedDate":"2021-10-24"},{"lineNumber":57,"author":{"gitId":"justinfidelis"},"content":"            assertEquals(\"johntan@example.com.sg\",","lastModifiedDate":"2021-10-24"},{"lineNumber":58,"author":{"gitId":"justinfidelis"},"content":"                    ParserUtils.parseEmailAddress(\"johntan@example.com.sg\"));","lastModifiedDate":"2021-10-24"},{"lineNumber":59,"author":{"gitId":"justinfidelis"},"content":"            assertEquals(\"john.tan_2@example.com\",","lastModifiedDate":"2021-10-24"},{"lineNumber":60,"author":{"gitId":"justinfidelis"},"content":"                    ParserUtils.parseEmailAddress(\"john.tan_2@example.com\"));","lastModifiedDate":"2021-10-24"},{"lineNumber":61,"author":{"gitId":"justinfidelis"},"content":"            assertEquals(\"johntan@example.com\",","lastModifiedDate":"2021-10-24"},{"lineNumber":62,"author":{"gitId":"justinfidelis"},"content":"                    ParserUtils.parseEmailAddress(\" johntan@example.com \"));","lastModifiedDate":"2021-10-24"},{"lineNumber":63,"author":{"gitId":"justinfidelis"},"content":"        } catch (MedBotParserException me) {","lastModifiedDate":"2021-10-24"},{"lineNumber":64,"author":{"gitId":"justinfidelis"},"content":"            fail();","lastModifiedDate":"2021-10-24"},{"lineNumber":65,"author":{"gitId":"justinfidelis"},"content":"        }","lastModifiedDate":"2021-10-06"},{"lineNumber":66,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":67,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":68,"author":{"gitId":"justinfidelis"},"content":"    @Test","lastModifiedDate":"2021-10-06"},{"lineNumber":69,"author":{"gitId":"justinfidelis"},"content":"    public void testParseEmailAddress_exceptionThrown() {","lastModifiedDate":"2021-10-24"},{"lineNumber":70,"author":{"gitId":"justinfidelis"},"content":"        assertThrows(MedBotParserException.class, () -\u003e ParserUtils.parseEmailAddress(\"   \"),","lastModifiedDate":"2021-10-24"},{"lineNumber":71,"author":{"gitId":"justinfidelis"},"content":"                \"Email address not specified.\");","lastModifiedDate":"2021-10-24"},{"lineNumber":72,"author":{"gitId":"justinfidelis"},"content":"        assertThrows(MedBotParserException.class, () -\u003e ParserUtils.parseEmailAddress(\"johntan_@example.com\"),","lastModifiedDate":"2021-10-24"},{"lineNumber":73,"author":{"gitId":"justinfidelis"},"content":"                \"Incorrect email address format.\");","lastModifiedDate":"2021-10-24"},{"lineNumber":74,"author":{"gitId":"justinfidelis"},"content":"        assertThrows(MedBotParserException.class, () -\u003e ParserUtils.parseEmailAddress(\"_johntan@example.com\"),","lastModifiedDate":"2021-10-24"},{"lineNumber":75,"author":{"gitId":"justinfidelis"},"content":"                \"Incorrect email address format.\");","lastModifiedDate":"2021-10-24"},{"lineNumber":76,"author":{"gitId":"justinfidelis"},"content":"        assertThrows(MedBotParserException.class, () -\u003e ParserUtils.parseEmailAddress(\"johntan@example\"),","lastModifiedDate":"2021-10-24"},{"lineNumber":77,"author":{"gitId":"justinfidelis"},"content":"                \"Incorrect email address format.\");","lastModifiedDate":"2021-10-24"},{"lineNumber":78,"author":{"gitId":"justinfidelis"},"content":"        assertThrows(MedBotParserException.class, () -\u003e ParserUtils.parseEmailAddress(\"johntanexample,com\"),","lastModifiedDate":"2021-10-24"},{"lineNumber":79,"author":{"gitId":"justinfidelis"},"content":"                \"Incorrect email address format.\");","lastModifiedDate":"2021-10-24"},{"lineNumber":80,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":81,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":82,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":83,"author":{"gitId":"justinfidelis"},"content":"    @Test","lastModifiedDate":"2021-10-24"},{"lineNumber":84,"author":{"gitId":"justinfidelis"},"content":"    public void testParsePhoneNumber_correctFormat() {","lastModifiedDate":"2021-10-24"},{"lineNumber":85,"author":{"gitId":"justinfidelis"},"content":"        try {","lastModifiedDate":"2021-10-06"},{"lineNumber":86,"author":{"gitId":"justinfidelis"},"content":"            assertEquals(\"81234567\",","lastModifiedDate":"2021-10-24"},{"lineNumber":87,"author":{"gitId":"justinfidelis"},"content":"                    ParserUtils.parsePhoneNumber(\"81234567\"));","lastModifiedDate":"2021-10-24"},{"lineNumber":88,"author":{"gitId":"justinfidelis"},"content":"            assertEquals(\"81234567\",","lastModifiedDate":"2021-10-24"},{"lineNumber":89,"author":{"gitId":"justinfidelis"},"content":"                    ParserUtils.parsePhoneNumber(\"  81234567\"));","lastModifiedDate":"2021-10-24"},{"lineNumber":90,"author":{"gitId":"justinfidelis"},"content":"            assertEquals(\"81234567\",","lastModifiedDate":"2021-10-24"},{"lineNumber":91,"author":{"gitId":"justinfidelis"},"content":"                    ParserUtils.parsePhoneNumber(\"8123   4567\"));","lastModifiedDate":"2021-10-24"},{"lineNumber":92,"author":{"gitId":"justinfidelis"},"content":"            assertEquals(\"81234567\",","lastModifiedDate":"2021-10-24"},{"lineNumber":93,"author":{"gitId":"justinfidelis"},"content":"                    ParserUtils.parsePhoneNumber(\"8123_4567\"));","lastModifiedDate":"2021-10-24"},{"lineNumber":94,"author":{"gitId":"justinfidelis"},"content":"        } catch (MedBotParserException me) {","lastModifiedDate":"2021-10-24"},{"lineNumber":95,"author":{"gitId":"justinfidelis"},"content":"            fail();","lastModifiedDate":"2021-10-24"},{"lineNumber":96,"author":{"gitId":"justinfidelis"},"content":"        }","lastModifiedDate":"2021-10-06"},{"lineNumber":97,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":98,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":99,"author":{"gitId":"justinfidelis"},"content":"    @Test","lastModifiedDate":"2021-10-06"},{"lineNumber":100,"author":{"gitId":"justinfidelis"},"content":"    public void testParsePhoneNumber_exceptionThrown() {","lastModifiedDate":"2021-10-24"},{"lineNumber":101,"author":{"gitId":"justinfidelis"},"content":"        assertThrows(MedBotParserException.class, () -\u003e ParserUtils.parsePhoneNumber(\"8123456\"),","lastModifiedDate":"2021-10-24"},{"lineNumber":102,"author":{"gitId":"justinfidelis"},"content":"                \"Phone number has too few digits.\");","lastModifiedDate":"2021-10-24"},{"lineNumber":103,"author":{"gitId":"justinfidelis"},"content":"        assertThrows(MedBotParserException.class, () -\u003e ParserUtils.parsePhoneNumber(\"812345678\"),","lastModifiedDate":"2021-10-24"},{"lineNumber":104,"author":{"gitId":"justinfidelis"},"content":"                \"Phone number has too many digits.\");","lastModifiedDate":"2021-10-24"},{"lineNumber":105,"author":{"gitId":"justinfidelis"},"content":"        assertThrows(MedBotParserException.class, () -\u003e ParserUtils.parsePhoneNumber(\"   \"),","lastModifiedDate":"2021-10-24"},{"lineNumber":106,"author":{"gitId":"justinfidelis"},"content":"                \"Phone number not specified.\");","lastModifiedDate":"2021-10-24"},{"lineNumber":107,"author":{"gitId":"justinfidelis"},"content":"        assertThrows(MedBotParserException.class, () -\u003e ParserUtils.parsePhoneNumber(\"8123456A\"),","lastModifiedDate":"2021-10-24"},{"lineNumber":108,"author":{"gitId":"justinfidelis"},"content":"                \"Phone number contains unexpected characters.\");","lastModifiedDate":"2021-10-24"},{"lineNumber":109,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":110,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":111,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":112,"author":{"gitId":"justinfidelis"},"content":"    @Test","lastModifiedDate":"2021-10-24"},{"lineNumber":113,"author":{"gitId":"justinfidelis"},"content":"    public void testParseName_validFormat() {","lastModifiedDate":"2021-10-24"},{"lineNumber":114,"author":{"gitId":"justinfidelis"},"content":"        try {","lastModifiedDate":"2021-10-06"},{"lineNumber":115,"author":{"gitId":"justinfidelis"},"content":"            assertEquals(\"John Tan\", ParserUtils.parseName(\"John Tan\"));","lastModifiedDate":"2021-10-24"},{"lineNumber":116,"author":{"gitId":"justinfidelis"},"content":"            assertEquals(\"John Tan\", ParserUtils.parseName(\"john tan\"));","lastModifiedDate":"2021-10-24"},{"lineNumber":117,"author":{"gitId":"justinfidelis"},"content":"            assertEquals(\"John Tan\", ParserUtils.parseName(\"JOHN TAN\"));","lastModifiedDate":"2021-10-24"},{"lineNumber":118,"author":{"gitId":"justinfidelis"},"content":"            assertEquals(\"John-Tan\", ParserUtils.parseName(\"john-tan\"));","lastModifiedDate":"2021-10-24"},{"lineNumber":119,"author":{"gitId":"justinfidelis"},"content":"            assertEquals(\"John+tan\", ParserUtils.parseName(\"john+tan\"));","lastModifiedDate":"2021-10-24"},{"lineNumber":120,"author":{"gitId":"justinfidelis"},"content":"        } catch (MedBotParserException me) {","lastModifiedDate":"2021-10-24"},{"lineNumber":121,"author":{"gitId":"justinfidelis"},"content":"            fail();","lastModifiedDate":"2021-10-24"},{"lineNumber":122,"author":{"gitId":"justinfidelis"},"content":"        }","lastModifiedDate":"2021-10-06"},{"lineNumber":123,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":124,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":125,"author":{"gitId":"justinfidelis"},"content":"    @Test","lastModifiedDate":"2021-10-24"},{"lineNumber":126,"author":{"gitId":"justinfidelis"},"content":"    public void testParseName_exceptionThrown() {","lastModifiedDate":"2021-10-24"},{"lineNumber":127,"author":{"gitId":"justinfidelis"},"content":"        assertThrows(MedBotParserException.class, () -\u003e ParserUtils.parseName(\"  \"), \"Name not specified.\");","lastModifiedDate":"2021-10-24"},{"lineNumber":128,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":129,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":130,"author":{"gitId":"jushg"},"content":"    @Test","lastModifiedDate":"2021-10-07"},{"lineNumber":131,"author":{"gitId":"justinfidelis"},"content":"    public void testParseIcNumber_validFormat() {","lastModifiedDate":"2021-10-24"},{"lineNumber":132,"author":{"gitId":"jushg"},"content":"        try {","lastModifiedDate":"2021-10-07"},{"lineNumber":133,"author":{"gitId":"justinfidelis"},"content":"            assertEquals(\"S1234567A\", ParserUtils.parseIcNumber(\"S1234567A\"));","lastModifiedDate":"2021-10-24"},{"lineNumber":134,"author":{"gitId":"justinfidelis"},"content":"            assertEquals(\"F1234567A\", ParserUtils.parseIcNumber(\"f1234567a\"));","lastModifiedDate":"2021-10-24"},{"lineNumber":135,"author":{"gitId":"justinfidelis"},"content":"        } catch (MedBotParserException me) {","lastModifiedDate":"2021-10-24"},{"lineNumber":136,"author":{"gitId":"justinfidelis"},"content":"            fail();","lastModifiedDate":"2021-10-24"},{"lineNumber":137,"author":{"gitId":"jushg"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":138,"author":{"gitId":"jushg"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":139,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":140,"author":{"gitId":"justinfidelis"},"content":"    @Test","lastModifiedDate":"2021-10-24"},{"lineNumber":141,"author":{"gitId":"justinfidelis"},"content":"    public void testParseIcNumber_exceptionThrown() {","lastModifiedDate":"2021-10-24"},{"lineNumber":142,"author":{"gitId":"justinfidelis"},"content":"        assertThrows(MedBotParserException.class, () -\u003e ParserUtils.parseIcNumber(\"Z1234567A\"),","lastModifiedDate":"2021-10-24"},{"lineNumber":143,"author":{"gitId":"justinfidelis"},"content":"                \"Incorrect IC number format.\");","lastModifiedDate":"2021-10-24"},{"lineNumber":144,"author":{"gitId":"justinfidelis"},"content":"        assertThrows(MedBotParserException.class, () -\u003e ParserUtils.parseIcNumber(\"F1234567\"),","lastModifiedDate":"2021-10-24"},{"lineNumber":145,"author":{"gitId":"justinfidelis"},"content":"                \"Incorrect IC number format.\");","lastModifiedDate":"2021-10-24"},{"lineNumber":146,"author":{"gitId":"justinfidelis"},"content":"        assertThrows(MedBotParserException.class, () -\u003e ParserUtils.parseIcNumber(\"1234567A\"),","lastModifiedDate":"2021-10-24"},{"lineNumber":147,"author":{"gitId":"justinfidelis"},"content":"                \"Incorrect IC number format.\");","lastModifiedDate":"2021-10-24"},{"lineNumber":148,"author":{"gitId":"justinfidelis"},"content":"        assertThrows(MedBotParserException.class, () -\u003e ParserUtils.parseIcNumber(\"S1234 567A\"),","lastModifiedDate":"2021-10-24"},{"lineNumber":149,"author":{"gitId":"justinfidelis"},"content":"                \"Incorrect IC number format.\");","lastModifiedDate":"2021-10-24"},{"lineNumber":150,"author":{"gitId":"justinfidelis"},"content":"        assertThrows(MedBotParserException.class, () -\u003e ParserUtils.parseIcNumber(\"1234567A\"),","lastModifiedDate":"2021-10-24"},{"lineNumber":151,"author":{"gitId":"justinfidelis"},"content":"                \"Incorrect IC number format.\");","lastModifiedDate":"2021-10-24"},{"lineNumber":152,"author":{"gitId":"justinfidelis"},"content":"        assertThrows(MedBotParserException.class, () -\u003e ParserUtils.parseIcNumber(\"  \"),","lastModifiedDate":"2021-10-24"},{"lineNumber":153,"author":{"gitId":"justinfidelis"},"content":"                \"IC number not specified.\");","lastModifiedDate":"2021-10-24"},{"lineNumber":154,"author":{"gitId":"jushg"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":155,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":156,"author":{"gitId":"jushg"},"content":"    @Test","lastModifiedDate":"2021-10-07"},{"lineNumber":157,"author":{"gitId":"justinfidelis"},"content":"    void testParseResidentialAddress_correctFormat() {","lastModifiedDate":"2021-10-24"},{"lineNumber":158,"author":{"gitId":"jushg"},"content":"        try {","lastModifiedDate":"2021-10-07"},{"lineNumber":159,"author":{"gitId":"justinfidelis"},"content":"            assertEquals(\"12 Lower Kent Ridge\", ParserUtils.parseResidentialAddress(\"12 Lower Kent Ridge\"));","lastModifiedDate":"2021-10-24"},{"lineNumber":160,"author":{"gitId":"justinfidelis"},"content":"            assertEquals(\"12 Lower Kent Ridge\", ParserUtils.parseResidentialAddress(\"12 lower kent ridge\"));","lastModifiedDate":"2021-10-24"},{"lineNumber":161,"author":{"gitId":"justinfidelis"},"content":"            assertEquals(\"12 Lower Kent Ridge\", ParserUtils.parseResidentialAddress(\"12 LOWER KENT RIDGE\"));","lastModifiedDate":"2021-10-24"},{"lineNumber":162,"author":{"gitId":"justinfidelis"},"content":"        } catch (MedBotParserException me) {","lastModifiedDate":"2021-10-24"},{"lineNumber":163,"author":{"gitId":"justinfidelis"},"content":"            fail();","lastModifiedDate":"2021-10-24"},{"lineNumber":164,"author":{"gitId":"jushg"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":165,"author":{"gitId":"jushg"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":166,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":167,"author":{"gitId":"justinfidelis"},"content":"    @Test","lastModifiedDate":"2021-10-24"},{"lineNumber":168,"author":{"gitId":"justinfidelis"},"content":"    public void testParseResidentialAddress_exceptionThrown() {","lastModifiedDate":"2021-10-24"},{"lineNumber":169,"author":{"gitId":"justinfidelis"},"content":"        assertThrows(MedBotParserException.class, () -\u003e ParserUtils.parseName(\"  \"), \"Address not specified.\");","lastModifiedDate":"2021-10-24"},{"lineNumber":170,"author":{"gitId":"jushg"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":171,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":172,"author":{"gitId":"justinfidelis"},"content":"    @Test","lastModifiedDate":"2021-10-13"},{"lineNumber":173,"author":{"gitId":"justinfidelis"},"content":"    void testPreprocessMultiAttributeInput() throws Exception {","lastModifiedDate":"2021-10-13"},{"lineNumber":174,"author":{"gitId":"justinfidelis"},"content":"        Method method \u003d ParserUtils.class.getDeclaredMethod(\"preprocessMultiAttributeInput\", String.class);","lastModifiedDate":"2021-10-22"},{"lineNumber":175,"author":{"gitId":"justinfidelis"},"content":"        method.setAccessible(true);","lastModifiedDate":"2021-10-13"},{"lineNumber":176,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":177,"author":{"gitId":"justinfidelis"},"content":"        String testInput0 \u003d \"add n/John Tan i/S8712345G e/john@gmail.com p/8123 4567 a/123 bishan st 24 #05-19\";","lastModifiedDate":"2021-10-24"},{"lineNumber":178,"author":{"gitId":"justinfidelis"},"content":"        String testOutput0 \u003d \"add |n/John Tan |i/S8712345G |e/john@gmail.com |p/8123 4567 |a/123 bishan st 24 #05-19\";","lastModifiedDate":"2021-10-24"},{"lineNumber":179,"author":{"gitId":"justinfidelis"},"content":"        assertEquals(testOutput0, method.invoke(method, testInput0));","lastModifiedDate":"2021-10-24"},{"lineNumber":180,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":181,"author":{"gitId":"justinfidelis"},"content":"        String testInput1 \u003d \"add n/joe ong e/joe@gmail.com a/123 Bishan st 24 #05-19 \";","lastModifiedDate":"2021-10-24"},{"lineNumber":182,"author":{"gitId":"justinfidelis"},"content":"        String testOutput1 \u003d \"add |n/joe ong |e/joe@gmail.com |a/123 Bishan st 24 #05-19 \";","lastModifiedDate":"2021-10-24"},{"lineNumber":183,"author":{"gitId":"justinfidelis"},"content":"        assertEquals(testOutput1, method.invoke(method, testInput1));","lastModifiedDate":"2021-10-24"},{"lineNumber":184,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":185,"author":{"gitId":"justinfidelis"},"content":"        String testInput2 \u003d \"add   n/Tim lee   e/tim_lee@gmail.com.sg   a/123 queenstown ave 6 #05-19 \";","lastModifiedDate":"2021-10-24"},{"lineNumber":186,"author":{"gitId":"justinfidelis"},"content":"        String testOutput2 \u003d \"add   |n/Tim lee   |e/tim_lee@gmail.com.sg   |a/123 queenstown ave 6 #05-19 \";","lastModifiedDate":"2021-10-24"},{"lineNumber":187,"author":{"gitId":"justinfidelis"},"content":"        assertEquals(testOutput2, method.invoke(method, testInput2));","lastModifiedDate":"2021-10-24"},{"lineNumber":188,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":189,"author":{"gitId":"justinfidelis"},"content":"        String testInput3 \u003d \"addn/Tim leee/tim_lee@gmail.com.sga/123 queenstown ave 6 #05-19 \";","lastModifiedDate":"2021-10-24"},{"lineNumber":190,"author":{"gitId":"justinfidelis"},"content":"        String testOutput3 \u003d \"add|n/Tim lee|e/tim_lee@gmail.com.sg|a/123 queenstown ave 6 #05-19 \";","lastModifiedDate":"2021-10-24"},{"lineNumber":191,"author":{"gitId":"justinfidelis"},"content":"        assertEquals(testOutput3, method.invoke(method, testInput3));","lastModifiedDate":"2021-10-24"},{"lineNumber":192,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":193,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":194,"author":{"gitId":"justinfidelis"},"content":"    @Test","lastModifiedDate":"2021-10-13"},{"lineNumber":195,"author":{"gitId":"justinfidelis"},"content":"    void testUpdateMultiplePersonalInformation() throws Exception {","lastModifiedDate":"2021-10-13"},{"lineNumber":196,"author":{"gitId":"justinfidelis"},"content":"        Method method \u003d ParserUtils.class.getDeclaredMethod(\"updateMultiplePersonalInformation\", Person.class,","lastModifiedDate":"2021-10-22"},{"lineNumber":197,"author":{"gitId":"justinfidelis"},"content":"                String[].class);","lastModifiedDate":"2021-10-13"},{"lineNumber":198,"author":{"gitId":"justinfidelis"},"content":"        method.setAccessible(true);","lastModifiedDate":"2021-10-13"},{"lineNumber":199,"author":{"gitId":"justinfidelis"},"content":"        Patient patient \u003d new Patient();","lastModifiedDate":"2021-10-13"},{"lineNumber":200,"author":{"gitId":"justinfidelis"},"content":"        String[] attributeStrings \u003d {\"n/John tan  \", \"i/S8712345G  \", \"e/john_tan@gmail.com \", \"p/8123 4567\",","lastModifiedDate":"2021-10-13"},{"lineNumber":201,"author":{"gitId":"justinfidelis"},"content":"                                     \"a/123 bishan st 24 #05-19  \"};","lastModifiedDate":"2021-10-13"},{"lineNumber":202,"author":{"gitId":"justinfidelis"},"content":"        method.invoke(method, patient, attributeStrings);","lastModifiedDate":"2021-10-13"},{"lineNumber":203,"author":{"gitId":"justinfidelis"},"content":"        assertEquals(patient.getName(), \"John Tan\");","lastModifiedDate":"2021-10-13"},{"lineNumber":204,"author":{"gitId":"justinfidelis"},"content":"        assertEquals(patient.getIcNumber(), \"S8712345G\");","lastModifiedDate":"2021-10-13"},{"lineNumber":205,"author":{"gitId":"justinfidelis"},"content":"        assertEquals(patient.getEmailAddress(), \"john_tan@gmail.com\");","lastModifiedDate":"2021-10-13"},{"lineNumber":206,"author":{"gitId":"justinfidelis"},"content":"        assertEquals(patient.getPhoneNumber(), \"81234567\");","lastModifiedDate":"2021-10-13"},{"lineNumber":207,"author":{"gitId":"justinfidelis"},"content":"        assertEquals(patient.getResidentialAddress(), \"123 Bishan St 24 #05-19\");","lastModifiedDate":"2021-10-13"},{"lineNumber":208,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":209,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":210,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":211,"author":{"gitId":"jushg"},"content":"    @Test","lastModifiedDate":"2021-10-21"},{"lineNumber":212,"author":{"gitId":"jushg"},"content":"    void testPreprocessInput() throws Exception {","lastModifiedDate":"2021-10-21"},{"lineNumber":213,"author":{"gitId":"justinfidelis"},"content":"        Method method \u003d ParserUtils.class.getDeclaredMethod(\"preprocessInput\", String.class);","lastModifiedDate":"2021-10-22"},{"lineNumber":214,"author":{"gitId":"jushg"},"content":"        method.setAccessible(true);","lastModifiedDate":"2021-10-21"},{"lineNumber":215,"author":{"gitId":"justinfidelis"},"content":"        assertEquals(\"add n/John Tan\", method.invoke(method, \"  add n/John Tan   \"));","lastModifiedDate":"2021-10-24"},{"lineNumber":216,"author":{"gitId":"justinfidelis"},"content":"        assertEquals(\"add n/John Tan\", method.invoke(method, \"add n/John Tan\"));","lastModifiedDate":"2021-10-24"},{"lineNumber":217,"author":{"gitId":"justinfidelis"},"content":"        assertEquals(\"add n/Tim lee\", method.invoke(method, \"add n/Tim| lee \"));","lastModifiedDate":"2021-10-24"},{"lineNumber":218,"author":{"gitId":"justinfidelis"},"content":"        assertEquals(\"add i/S8712345G\", method.invoke(method, \"add i/S8712345G||\"));","lastModifiedDate":"2021-10-24"},{"lineNumber":219,"author":{"gitId":"jushg"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":220,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":221,"author":{"gitId":"jushg"},"content":"    @Test","lastModifiedDate":"2021-10-21"},{"lineNumber":222,"author":{"gitId":"justinfidelis"},"content":"    void testParseId() throws Exception {","lastModifiedDate":"2021-10-22"},{"lineNumber":223,"author":{"gitId":"justinfidelis"},"content":"        Method method \u003d ParserUtils.class.getDeclaredMethod(\"parseId\", String.class);","lastModifiedDate":"2021-10-22"},{"lineNumber":224,"author":{"gitId":"jushg"},"content":"        method.setAccessible(true);","lastModifiedDate":"2021-10-21"},{"lineNumber":225,"author":{"gitId":"jushg"},"content":"        HashMap\u003cString, Integer\u003e testCases \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2021-10-21"},{"lineNumber":226,"author":{"gitId":"jushg"},"content":"        testCases.put(\"5\", 5);","lastModifiedDate":"2021-10-21"},{"lineNumber":227,"author":{"gitId":"jushg"},"content":"        testCases.put(\"  5   \", 5);","lastModifiedDate":"2021-10-21"},{"lineNumber":228,"author":{"gitId":"jushg"},"content":"        testCases.put(\"35\", 35);","lastModifiedDate":"2021-10-21"},{"lineNumber":229,"author":{"gitId":"jushg"},"content":"        for (String key : testCases.keySet()) {","lastModifiedDate":"2021-10-21"},{"lineNumber":230,"author":{"gitId":"jushg"},"content":"            assertEquals(testCases.get(key), method.invoke(method, key));","lastModifiedDate":"2021-10-21"},{"lineNumber":231,"author":{"gitId":"jushg"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":232,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":233,"author":{"gitId":"jushg"},"content":"        String[][] testInputExceptions \u003d {","lastModifiedDate":"2021-10-21"},{"lineNumber":234,"author":{"gitId":"justinfidelis"},"content":"                {\"     \", \"ID not specified or not a number.\"},","lastModifiedDate":"2021-10-24"},{"lineNumber":235,"author":{"gitId":"justinfidelis"},"content":"                {\"hi\", \"ID not specified or not a number.\"},","lastModifiedDate":"2021-10-24"},{"lineNumber":236,"author":{"gitId":"justinfidelis"},"content":"                {\"13hi \", \"ID not specified or not a number.\"},","lastModifiedDate":"2021-10-24"},{"lineNumber":237,"author":{"gitId":"justinfidelis"},"content":"                {\"hi13\", \"ID not specified or not a number.\"}","lastModifiedDate":"2021-10-24"},{"lineNumber":238,"author":{"gitId":"jushg"},"content":"        };","lastModifiedDate":"2021-10-21"},{"lineNumber":239,"author":{"gitId":"jushg"},"content":"        for (String[] testInputException : testInputExceptions) {","lastModifiedDate":"2021-10-21"},{"lineNumber":240,"author":{"gitId":"jushg"},"content":"            try {","lastModifiedDate":"2021-10-21"},{"lineNumber":241,"author":{"gitId":"jushg"},"content":"                assertEquals(testInputException[1], method.invoke(method, testInputException[0]));","lastModifiedDate":"2021-10-21"},{"lineNumber":242,"author":{"gitId":"jushg"},"content":"            } catch (InvocationTargetException e) {","lastModifiedDate":"2021-10-21"},{"lineNumber":243,"author":{"gitId":"jushg"},"content":"                assertEquals(testInputException[1], e.getTargetException().getMessage());","lastModifiedDate":"2021-10-21"},{"lineNumber":244,"author":{"gitId":"jushg"},"content":"            }","lastModifiedDate":"2021-10-21"},{"lineNumber":245,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":246,"author":{"gitId":"jushg"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":247,"author":{"gitId":"jushg"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":248,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":249,"author":{"gitId":"jushg"},"content":"    @Test","lastModifiedDate":"2021-10-21"},{"lineNumber":250,"author":{"gitId":"jushg"},"content":"    void testGetParameters() throws Exception {","lastModifiedDate":"2021-10-21"},{"lineNumber":251,"author":{"gitId":"justinfidelis"},"content":"        Method method \u003d ParserUtils.class.getDeclaredMethod(\"getParameters\", String.class);","lastModifiedDate":"2021-10-22"},{"lineNumber":252,"author":{"gitId":"jushg"},"content":"        method.setAccessible(true);","lastModifiedDate":"2021-10-21"},{"lineNumber":253,"author":{"gitId":"jushg"},"content":"        String[] resultParameters \u003d {\"n/John Tan \", \"i/S8712345G \", \"e/john_tan@gmail.com \", \"p/8123 4567\"};","lastModifiedDate":"2021-10-21"},{"lineNumber":254,"author":{"gitId":"justinfidelis"},"content":"        String[] inputCommands \u003d {\"add n/John Tan i/S8712345G e/john_tan@gmail.com p/8123 4567\",","lastModifiedDate":"2021-10-24"},{"lineNumber":255,"author":{"gitId":"jushg"},"content":"                                  \"edit n/John Tan i/S8712345G e/john_tan@gmail.com p/8123 4567\",","lastModifiedDate":"2021-10-21"},{"lineNumber":256,"author":{"gitId":"jushg"},"content":"                                  \"add         n/John Tan i/S8712345G e/john_tan@gmail.com p/8123 4567\",","lastModifiedDate":"2021-10-21"},{"lineNumber":257,"author":{"gitId":"justinfidelis"},"content":"                                  \"edit          n/John Tan i/S8712345G e/john_tan@gmail.com p/8123 4567\"};","lastModifiedDate":"2021-10-24"},{"lineNumber":258,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":259,"author":{"gitId":"jushg"},"content":"        for (String inputCommand : inputCommands) {","lastModifiedDate":"2021-10-21"},{"lineNumber":260,"author":{"gitId":"jushg"},"content":"            assertArrayEquals(resultParameters, (Object[]) method.invoke(method, inputCommand));","lastModifiedDate":"2021-10-21"},{"lineNumber":261,"author":{"gitId":"jushg"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":262,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":263,"author":{"gitId":"jushg"},"content":"        String[][] testInputExceptions \u003d {","lastModifiedDate":"2021-10-21"},{"lineNumber":264,"author":{"gitId":"Kureans"},"content":"                {\"add    \", \"No parameters given.\"},","lastModifiedDate":"2021-11-04"},{"lineNumber":265,"author":{"gitId":"Kureans"},"content":"                {\"edit    \", \"No parameters given.\"},","lastModifiedDate":"2021-11-04"},{"lineNumber":266,"author":{"gitId":"Kureans"},"content":"                {\"add John  john@email\", \"No parameters given.\"},","lastModifiedDate":"2021-11-04"},{"lineNumber":267,"author":{"gitId":"Kureans"},"content":"                {\"edit John john@email\", \"No parameters given.\"}","lastModifiedDate":"2021-11-04"},{"lineNumber":268,"author":{"gitId":"jushg"},"content":"        };","lastModifiedDate":"2021-10-21"},{"lineNumber":269,"author":{"gitId":"jushg"},"content":"        for (String[] testInputException : testInputExceptions) {","lastModifiedDate":"2021-10-21"},{"lineNumber":270,"author":{"gitId":"jushg"},"content":"            try {","lastModifiedDate":"2021-10-21"},{"lineNumber":271,"author":{"gitId":"jushg"},"content":"                assertEquals(testInputException[1], method.invoke(method, testInputException[0]));","lastModifiedDate":"2021-10-21"},{"lineNumber":272,"author":{"gitId":"jushg"},"content":"            } catch (InvocationTargetException e) {","lastModifiedDate":"2021-10-21"},{"lineNumber":273,"author":{"gitId":"jushg"},"content":"                assertEquals(testInputException[1], e.getTargetException().getMessage());","lastModifiedDate":"2021-10-21"},{"lineNumber":274,"author":{"gitId":"jushg"},"content":"            }","lastModifiedDate":"2021-10-21"},{"lineNumber":275,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":276,"author":{"gitId":"jushg"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":277,"author":{"gitId":"jushg"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":278,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":279,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":280,"author":{"gitId":"jushg"},"content":"    /**","lastModifiedDate":"2021-11-02"},{"lineNumber":281,"author":{"gitId":"jushg"},"content":"     * Check if the parser for patient return the correct type of command.","lastModifiedDate":"2021-11-02"},{"lineNumber":282,"author":{"gitId":"jushg"},"content":"     */","lastModifiedDate":"2021-11-02"},{"lineNumber":283,"author":{"gitId":"jushg"},"content":"    @Test","lastModifiedDate":"2021-10-21"},{"lineNumber":284,"author":{"gitId":"jushg"},"content":"    void testParseCommandForPatient() {","lastModifiedDate":"2021-10-22"},{"lineNumber":285,"author":{"gitId":"jushg"},"content":"        Parser.setViewType(ViewType.PATIENT_INFO);","lastModifiedDate":"2021-10-21"},{"lineNumber":286,"author":{"gitId":"jushg"},"content":"        assertSame(Parser.getViewType(), ViewType.PATIENT_INFO);","lastModifiedDate":"2021-10-21"},{"lineNumber":287,"author":{"gitId":"jushg"},"content":"        HashMap\u003cString, Command\u003e testCases \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2021-10-21"},{"lineNumber":288,"author":{"gitId":"jushg"},"content":"        testCases.put(\"exit\", new ExitCommand());","lastModifiedDate":"2021-10-21"},{"lineNumber":289,"author":{"gitId":"jushg"},"content":"        testCases.put(\"help \", new HelpCommand(ViewType.PATIENT_INFO));","lastModifiedDate":"2021-10-22"},{"lineNumber":290,"author":{"gitId":"justinfidelis"},"content":"        testCases.put(\"switch 2\", new SwitchCommand(null, true));","lastModifiedDate":"2021-11-02"},{"lineNumber":291,"author":{"gitId":"jushg"},"content":"        testCases.put(\"add n/John Tan \", new AddPatientCommand(null));","lastModifiedDate":"2021-10-21"},{"lineNumber":292,"author":{"gitId":"jushg"},"content":"        testCases.put(\"edit 1 n/John Tan \", new EditPatientCommand(1, null));","lastModifiedDate":"2021-10-21"},{"lineNumber":293,"author":{"gitId":"jushg"},"content":"        testCases.put(\"delete 1\", new DeletePatientCommand(1));","lastModifiedDate":"2021-10-21"},{"lineNumber":294,"author":{"gitId":"jushg"},"content":"        testCases.put(\"find n/name\", new FindPatientCommand(new String[]{\"name\"}));","lastModifiedDate":"2021-10-21"},{"lineNumber":295,"author":{"gitId":"jushg"},"content":"        testCases.put(\"view 1\", new ViewPatientCommand(1));","lastModifiedDate":"2021-10-21"},{"lineNumber":296,"author":{"gitId":"EricBryann"},"content":"        testCases.put(\"list\", new ListPatientCommand(false));","lastModifiedDate":"2021-10-25"},{"lineNumber":297,"author":{"gitId":"EricBryann"},"content":"        testCases.put(\"hide 1\", new HidePatientCommand(1));","lastModifiedDate":"2021-11-02"},{"lineNumber":298,"author":{"gitId":"EricBryann"},"content":"        testCases.put(\"show 1\", new ShowPatientCommand(1));","lastModifiedDate":"2021-11-02"},{"lineNumber":299,"author":{"gitId":"jushg"},"content":"        testCases.put(\" hello\", null);","lastModifiedDate":"2021-10-21"},{"lineNumber":300,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":301,"author":{"gitId":"jushg"},"content":"        for (String testCase : testCases.keySet()) {","lastModifiedDate":"2021-10-21"},{"lineNumber":302,"author":{"gitId":"jushg"},"content":"            try {","lastModifiedDate":"2021-10-21"},{"lineNumber":303,"author":{"gitId":"jushg"},"content":"                Command command \u003d Parser.parseCommand(testCase);","lastModifiedDate":"2021-10-21"},{"lineNumber":304,"author":{"gitId":"jushg"},"content":"                assertTrue(testCases.get(testCase).getClass().isAssignableFrom(command.getClass()));","lastModifiedDate":"2021-10-21"},{"lineNumber":305,"author":{"gitId":"jushg"},"content":"            } catch (MedBotParserException e) {","lastModifiedDate":"2021-10-21"},{"lineNumber":306,"author":{"gitId":"jushg"},"content":"                assertEquals(\"Unable to parse command.\" + END_LINE, e.getMessage());","lastModifiedDate":"2021-10-21"},{"lineNumber":307,"author":{"gitId":"jushg"},"content":"            }","lastModifiedDate":"2021-10-21"},{"lineNumber":308,"author":{"gitId":"jushg"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":309,"author":{"gitId":"jushg"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":310,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":311,"author":{"gitId":"jushg"},"content":"    /**","lastModifiedDate":"2021-11-02"},{"lineNumber":312,"author":{"gitId":"jushg"},"content":"     * Check if the parser for staff return the correct type of command.","lastModifiedDate":"2021-11-02"},{"lineNumber":313,"author":{"gitId":"jushg"},"content":"     */","lastModifiedDate":"2021-11-02"},{"lineNumber":314,"author":{"gitId":"jushg"},"content":"    @Test","lastModifiedDate":"2021-10-22"},{"lineNumber":315,"author":{"gitId":"jushg"},"content":"    void testParseCommandForStaff() {","lastModifiedDate":"2021-10-22"},{"lineNumber":316,"author":{"gitId":"jushg"},"content":"        Parser.setViewType(ViewType.MEDICAL_STAFF_INFO);","lastModifiedDate":"2021-10-22"},{"lineNumber":317,"author":{"gitId":"jushg"},"content":"        assertSame(Parser.getViewType(), ViewType.MEDICAL_STAFF_INFO);","lastModifiedDate":"2021-10-22"},{"lineNumber":318,"author":{"gitId":"jushg"},"content":"        HashMap\u003cString, Command\u003e testCases \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2021-10-22"},{"lineNumber":319,"author":{"gitId":"jushg"},"content":"        testCases.put(\"exit\", new ExitCommand());","lastModifiedDate":"2021-10-22"},{"lineNumber":320,"author":{"gitId":"jushg"},"content":"        testCases.put(\"help \", new HelpCommand(ViewType.MEDICAL_STAFF_INFO));","lastModifiedDate":"2021-10-22"},{"lineNumber":321,"author":{"gitId":"justinfidelis"},"content":"        testCases.put(\"switch 3\", new SwitchCommand(null, true));","lastModifiedDate":"2021-11-02"},{"lineNumber":322,"author":{"gitId":"jushg"},"content":"        testCases.put(\"add n/John Tan \", new AddStaffCommand(null));","lastModifiedDate":"2021-10-22"},{"lineNumber":323,"author":{"gitId":"jushg"},"content":"        testCases.put(\"edit 1 n/John Tan \", new EditStaffCommand(1, null));","lastModifiedDate":"2021-10-22"},{"lineNumber":324,"author":{"gitId":"jushg"},"content":"        testCases.put(\"delete 1\", new DeleteStaffCommand(1));","lastModifiedDate":"2021-10-22"},{"lineNumber":325,"author":{"gitId":"jushg"},"content":"        testCases.put(\"find n/name\", new FindStaffCommand(new String[]{\"name\"}));","lastModifiedDate":"2021-10-22"},{"lineNumber":326,"author":{"gitId":"jushg"},"content":"        testCases.put(\"view 1\", new ViewStaffCommand(1));","lastModifiedDate":"2021-10-22"},{"lineNumber":327,"author":{"gitId":"EricBryann"},"content":"        testCases.put(\"list\", new ListStaffCommand(false));","lastModifiedDate":"2021-10-25"},{"lineNumber":328,"author":{"gitId":"EricBryann"},"content":"        testCases.put(\"hide 1\", new HideStaffCommand(1));","lastModifiedDate":"2021-11-02"},{"lineNumber":329,"author":{"gitId":"EricBryann"},"content":"        testCases.put(\"show 1\", new ShowStaffCommand(1));","lastModifiedDate":"2021-11-02"},{"lineNumber":330,"author":{"gitId":"jushg"},"content":"        testCases.put(\" hello\", null);","lastModifiedDate":"2021-10-22"},{"lineNumber":331,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":332,"author":{"gitId":"jushg"},"content":"        for (String testCase : testCases.keySet()) {","lastModifiedDate":"2021-10-22"},{"lineNumber":333,"author":{"gitId":"jushg"},"content":"            try {","lastModifiedDate":"2021-10-22"},{"lineNumber":334,"author":{"gitId":"jushg"},"content":"                Command command \u003d Parser.parseCommand(testCase);","lastModifiedDate":"2021-10-22"},{"lineNumber":335,"author":{"gitId":"jushg"},"content":"                assertTrue(testCases.get(testCase).getClass().isAssignableFrom(command.getClass()));","lastModifiedDate":"2021-10-22"},{"lineNumber":336,"author":{"gitId":"jushg"},"content":"            } catch (MedBotParserException e) {","lastModifiedDate":"2021-10-22"},{"lineNumber":337,"author":{"gitId":"jushg"},"content":"                assertEquals(\"Unable to parse command.\" + END_LINE, e.getMessage());","lastModifiedDate":"2021-10-22"},{"lineNumber":338,"author":{"gitId":"jushg"},"content":"            }","lastModifiedDate":"2021-10-22"},{"lineNumber":339,"author":{"gitId":"jushg"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":340,"author":{"gitId":"jushg"},"content":"        Parser.setViewType(ViewType.PATIENT_INFO);","lastModifiedDate":"2021-10-22"},{"lineNumber":341,"author":{"gitId":"jushg"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":342,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":343,"author":{"gitId":"jushg"},"content":"    /**","lastModifiedDate":"2021-11-02"},{"lineNumber":344,"author":{"gitId":"jushg"},"content":"     * Check if the parser for appointment return the correct type of command.","lastModifiedDate":"2021-11-02"},{"lineNumber":345,"author":{"gitId":"jushg"},"content":"     */","lastModifiedDate":"2021-11-02"},{"lineNumber":346,"author":{"gitId":"jushg"},"content":"    @Test","lastModifiedDate":"2021-10-22"},{"lineNumber":347,"author":{"gitId":"jushg"},"content":"    void testParseCommandForAppointment() {","lastModifiedDate":"2021-10-22"},{"lineNumber":348,"author":{"gitId":"jushg"},"content":"        Parser.setViewType(ViewType.SCHEDULER);","lastModifiedDate":"2021-10-22"},{"lineNumber":349,"author":{"gitId":"jushg"},"content":"        assertSame(Parser.getViewType(), ViewType.SCHEDULER);","lastModifiedDate":"2021-10-22"},{"lineNumber":350,"author":{"gitId":"jushg"},"content":"        HashMap\u003cString, Command\u003e testCases \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2021-10-22"},{"lineNumber":351,"author":{"gitId":"jushg"},"content":"        testCases.put(\"exit\", new ExitCommand());","lastModifiedDate":"2021-10-22"},{"lineNumber":352,"author":{"gitId":"jushg"},"content":"        testCases.put(\"help \", new HelpCommand(ViewType.SCHEDULER));","lastModifiedDate":"2021-10-22"},{"lineNumber":353,"author":{"gitId":"justinfidelis"},"content":"        testCases.put(\"switch 1\", new SwitchCommand(null, true));","lastModifiedDate":"2021-11-02"},{"lineNumber":354,"author":{"gitId":"justinfidelis"},"content":"        testCases.put(\"add p/1 s/1 d/181021 1800 \", new AddAppointmentCommand(null));","lastModifiedDate":"2021-10-25"},{"lineNumber":355,"author":{"gitId":"justinfidelis"},"content":"        testCases.put(\"add 1 p/1 s/1 d/181021 1800 \", new AddAppointmentCommand(null));","lastModifiedDate":"2021-10-25"},{"lineNumber":356,"author":{"gitId":"justinfidelis"},"content":"        testCases.put(\"edit 1 p/1 s/1 d/181021 1800 \", new EditAppointmentCommand(1, null));","lastModifiedDate":"2021-10-25"},{"lineNumber":357,"author":{"gitId":"jushg"},"content":"        testCases.put(\"delete 1\", new DeleteAppointmentCommand(1));","lastModifiedDate":"2021-10-22"},{"lineNumber":358,"author":{"gitId":"jushg"},"content":"        testCases.put(\"list\", new ListAppointmentCommand());","lastModifiedDate":"2021-10-22"},{"lineNumber":359,"author":{"gitId":"jushg"},"content":"        testCases.put(\" hello\", null);","lastModifiedDate":"2021-10-22"},{"lineNumber":360,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":361,"author":{"gitId":"jushg"},"content":"        for (String testCase : testCases.keySet()) {","lastModifiedDate":"2021-10-22"},{"lineNumber":362,"author":{"gitId":"jushg"},"content":"            try {","lastModifiedDate":"2021-10-22"},{"lineNumber":363,"author":{"gitId":"jushg"},"content":"                Command command \u003d Parser.parseCommand(testCase);","lastModifiedDate":"2021-10-22"},{"lineNumber":364,"author":{"gitId":"jushg"},"content":"                assertTrue(testCases.get(testCase).getClass().isAssignableFrom(command.getClass()));","lastModifiedDate":"2021-10-22"},{"lineNumber":365,"author":{"gitId":"jushg"},"content":"            } catch (MedBotParserException e) {","lastModifiedDate":"2021-10-22"},{"lineNumber":366,"author":{"gitId":"jushg"},"content":"                assertEquals(\"Unable to parse command.\" + END_LINE, e.getMessage());","lastModifiedDate":"2021-10-22"},{"lineNumber":367,"author":{"gitId":"jushg"},"content":"            }","lastModifiedDate":"2021-10-22"},{"lineNumber":368,"author":{"gitId":"jushg"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":369,"author":{"gitId":"jushg"},"content":"        Parser.setViewType(ViewType.PATIENT_INFO);","lastModifiedDate":"2021-10-22"},{"lineNumber":370,"author":{"gitId":"jushg"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":371,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":372,"author":{"gitId":"justinfidelis"},"content":"}","lastModifiedDate":"2021-10-06"}],"authorContributionMap":{"justinfidelis":184,"jushg":162,"EricBryann":22,"Kureans":4}},{"path":"src/test/java/medbot/PersonTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"justinfidelis"},"content":"package medbot;","lastModifiedDate":"2021-10-24"},{"lineNumber":2,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":3,"author":{"gitId":"justinfidelis"},"content":"import medbot.person.Patient;","lastModifiedDate":"2021-10-24"},{"lineNumber":4,"author":{"gitId":"CrimsonTitan79"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-26"},{"lineNumber":5,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":6,"author":{"gitId":"justinfidelis"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-24"},{"lineNumber":7,"author":{"gitId":"CrimsonTitan79"},"content":"import static org.junit.jupiter.api.Assertions.assertNull;","lastModifiedDate":"2021-10-26"},{"lineNumber":8,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":9,"author":{"gitId":"justinfidelis"},"content":"class PersonTest {","lastModifiedDate":"2021-10-24"},{"lineNumber":10,"author":{"gitId":"justinfidelis"},"content":"    private static final String END_LINE \u003d System.lineSeparator();","lastModifiedDate":"2021-10-24"},{"lineNumber":11,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":12,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":13,"author":{"gitId":"justinfidelis"},"content":"    @Test","lastModifiedDate":"2021-10-24"},{"lineNumber":14,"author":{"gitId":"justinfidelis"},"content":"    public void testStringConversion() {","lastModifiedDate":"2021-10-24"},{"lineNumber":15,"author":{"gitId":"justinfidelis"},"content":"        String correctString \u003d \"Patient ID: 0\" + END_LINE","lastModifiedDate":"2021-10-24"},{"lineNumber":16,"author":{"gitId":"justinfidelis"},"content":"                + \"IC: \" + END_LINE","lastModifiedDate":"2021-10-24"},{"lineNumber":17,"author":{"gitId":"justinfidelis"},"content":"                + \"Name: \" + END_LINE","lastModifiedDate":"2021-10-24"},{"lineNumber":18,"author":{"gitId":"justinfidelis"},"content":"                + \"H/P: \" + END_LINE","lastModifiedDate":"2021-10-24"},{"lineNumber":19,"author":{"gitId":"justinfidelis"},"content":"                + \"Email: \" + END_LINE","lastModifiedDate":"2021-10-24"},{"lineNumber":20,"author":{"gitId":"justinfidelis"},"content":"                + \"Address: \";","lastModifiedDate":"2021-10-24"},{"lineNumber":21,"author":{"gitId":"justinfidelis"},"content":"        Patient patient \u003d new Patient();","lastModifiedDate":"2021-10-24"},{"lineNumber":22,"author":{"gitId":"justinfidelis"},"content":"        assertEquals(patient.toString(), correctString);","lastModifiedDate":"2021-10-24"},{"lineNumber":23,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":24,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":25,"author":{"gitId":"justinfidelis"},"content":"    @Test","lastModifiedDate":"2021-10-24"},{"lineNumber":26,"author":{"gitId":"justinfidelis"},"content":"    public void testStringConversionFilled() {","lastModifiedDate":"2021-10-24"},{"lineNumber":27,"author":{"gitId":"justinfidelis"},"content":"        Patient patient \u003d new Patient();","lastModifiedDate":"2021-10-24"},{"lineNumber":28,"author":{"gitId":"justinfidelis"},"content":"        patient.setIcNumber(\"S8712345G\");","lastModifiedDate":"2021-10-24"},{"lineNumber":29,"author":{"gitId":"justinfidelis"},"content":"        patient.setName(\"Alice Tan\");","lastModifiedDate":"2021-10-24"},{"lineNumber":30,"author":{"gitId":"justinfidelis"},"content":"        patient.setPhoneNumber(\"81234567\");","lastModifiedDate":"2021-10-24"},{"lineNumber":31,"author":{"gitId":"justinfidelis"},"content":"        patient.setEmailAddress(\"alicetan@example.com\");","lastModifiedDate":"2021-10-24"},{"lineNumber":32,"author":{"gitId":"justinfidelis"},"content":"        patient.setResidentialAddress(\"Blk 123 Bishan St 12 #05-39\");","lastModifiedDate":"2021-10-24"},{"lineNumber":33,"author":{"gitId":"justinfidelis"},"content":"        String correctString \u003d \"Patient ID: 0\" + END_LINE","lastModifiedDate":"2021-10-24"},{"lineNumber":34,"author":{"gitId":"justinfidelis"},"content":"                + \"IC: \" + \"S8712345G\" + END_LINE","lastModifiedDate":"2021-10-24"},{"lineNumber":35,"author":{"gitId":"justinfidelis"},"content":"                + \"Name: \" + \"Alice Tan\" + END_LINE","lastModifiedDate":"2021-10-24"},{"lineNumber":36,"author":{"gitId":"justinfidelis"},"content":"                + \"H/P: \" + \"81234567\" + END_LINE","lastModifiedDate":"2021-10-24"},{"lineNumber":37,"author":{"gitId":"justinfidelis"},"content":"                + \"Email: \" + \"alicetan@example.com\" + END_LINE","lastModifiedDate":"2021-10-24"},{"lineNumber":38,"author":{"gitId":"justinfidelis"},"content":"                + \"Address: \" + \"Blk 123 Bishan St 12 #05-39\";","lastModifiedDate":"2021-10-24"},{"lineNumber":39,"author":{"gitId":"justinfidelis"},"content":"        assertEquals(correctString, patient.toString());","lastModifiedDate":"2021-10-24"},{"lineNumber":40,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":41,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":42,"author":{"gitId":"justinfidelis"},"content":"    @Test","lastModifiedDate":"2021-10-24"},{"lineNumber":43,"author":{"gitId":"justinfidelis"},"content":"    public void testSetNull() {","lastModifiedDate":"2021-10-24"},{"lineNumber":44,"author":{"gitId":"justinfidelis"},"content":"        Patient patient \u003d new Patient();","lastModifiedDate":"2021-10-24"},{"lineNumber":45,"author":{"gitId":"justinfidelis"},"content":"        patient.setId(123);","lastModifiedDate":"2021-10-27"},{"lineNumber":46,"author":{"gitId":"justinfidelis"},"content":"        patient.setName(\"Ben\");","lastModifiedDate":"2021-10-24"},{"lineNumber":47,"author":{"gitId":"justinfidelis"},"content":"        patient.setNull();","lastModifiedDate":"2021-10-24"},{"lineNumber":48,"author":{"gitId":"justinfidelis"},"content":"        assertEquals(patient.getId(), 123);","lastModifiedDate":"2021-10-27"},{"lineNumber":49,"author":{"gitId":"justinfidelis"},"content":"        assertNull(patient.getName());","lastModifiedDate":"2021-10-24"},{"lineNumber":50,"author":{"gitId":"justinfidelis"},"content":"        assertNull(patient.getEmailAddress());","lastModifiedDate":"2021-10-24"},{"lineNumber":51,"author":{"gitId":"justinfidelis"},"content":"        assertNull(patient.getResidentialAddress());","lastModifiedDate":"2021-10-24"},{"lineNumber":52,"author":{"gitId":"justinfidelis"},"content":"        assertNull(patient.getIcNumber());","lastModifiedDate":"2021-10-24"},{"lineNumber":53,"author":{"gitId":"justinfidelis"},"content":"        assertNull(patient.getPhoneNumber());","lastModifiedDate":"2021-10-24"},{"lineNumber":54,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":55,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":56,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":57,"author":{"gitId":"justinfidelis"},"content":"}","lastModifiedDate":"2021-10-24"}],"authorContributionMap":{"justinfidelis":55,"CrimsonTitan79":2}},{"path":"src/test/java/medbot/SchedulerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"justinfidelis"},"content":"package medbot;","lastModifiedDate":"2021-10-24"},{"lineNumber":2,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":3,"author":{"gitId":"justinfidelis"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-24"},{"lineNumber":4,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":5,"author":{"gitId":"Kureans"},"content":"import medbot.person.Person;","lastModifiedDate":"2021-10-29"},{"lineNumber":6,"author":{"gitId":"Kureans"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2021-10-29"},{"lineNumber":7,"author":{"gitId":"justinfidelis"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-24"},{"lineNumber":8,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":9,"author":{"gitId":"justinfidelis"},"content":"import medbot.person.Patient;","lastModifiedDate":"2021-10-24"},{"lineNumber":10,"author":{"gitId":"justinfidelis"},"content":"import medbot.person.Staff;","lastModifiedDate":"2021-10-24"},{"lineNumber":11,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":12,"author":{"gitId":"Kureans"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-29"},{"lineNumber":13,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":14,"author":{"gitId":"Kureans"},"content":"// class SchedulerTest {","lastModifiedDate":"2021-10-29"},{"lineNumber":15,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":16,"author":{"gitId":"Kureans"},"content":"//        private Scheduler scheduler;","lastModifiedDate":"2021-10-29"},{"lineNumber":17,"author":{"gitId":"Kureans"},"content":"//        private ArrayList\u003cPerson\u003e personList;","lastModifiedDate":"2021-10-29"},{"lineNumber":18,"author":{"gitId":"Kureans"},"content":"//","lastModifiedDate":"2021-10-29"},{"lineNumber":19,"author":{"gitId":"Kureans"},"content":"//        @BeforeEach","lastModifiedDate":"2021-10-29"},{"lineNumber":20,"author":{"gitId":"Kureans"},"content":"//        void init() {","lastModifiedDate":"2021-10-29"},{"lineNumber":21,"author":{"gitId":"Kureans"},"content":"//            Patient patient \u003d new Patient();","lastModifiedDate":"2021-10-29"},{"lineNumber":22,"author":{"gitId":"Kureans"},"content":"//            patient.setName(\"Bob Smith\");","lastModifiedDate":"2021-10-29"},{"lineNumber":23,"author":{"gitId":"Kureans"},"content":"//            Staff staff \u003d new Staff();","lastModifiedDate":"2021-10-29"},{"lineNumber":24,"author":{"gitId":"Kureans"},"content":"//            staff.setName(\"Dr Wong\");","lastModifiedDate":"2021-10-29"},{"lineNumber":25,"author":{"gitId":"Kureans"},"content":"//            personList.add(patient);","lastModifiedDate":"2021-10-29"},{"lineNumber":26,"author":{"gitId":"Kureans"},"content":"//            personList.add(staff);","lastModifiedDate":"2021-10-29"},{"lineNumber":27,"author":{"gitId":"Kureans"},"content":"//        }","lastModifiedDate":"2021-10-29"},{"lineNumber":28,"author":{"gitId":"Kureans"},"content":"//","lastModifiedDate":"2021-10-29"},{"lineNumber":29,"author":{"gitId":"Kureans"},"content":"//        private Patient intialisePatientWithName(String name) {","lastModifiedDate":"2021-10-29"},{"lineNumber":30,"author":{"gitId":"Kureans"},"content":"//            Patient patient \u003d new Patient();","lastModifiedDate":"2021-10-29"},{"lineNumber":31,"author":{"gitId":"Kureans"},"content":"//            patient.setName(name);","lastModifiedDate":"2021-10-29"},{"lineNumber":32,"author":{"gitId":"Kureans"},"content":"//            return patient;","lastModifiedDate":"2021-10-29"},{"lineNumber":33,"author":{"gitId":"Kureans"},"content":"//        }","lastModifiedDate":"2021-10-29"},{"lineNumber":34,"author":{"gitId":"justinfidelis"},"content":"    /*","lastModifiedDate":"2021-10-24"},{"lineNumber":35,"author":{"gitId":"justinfidelis"},"content":"        Scheduler scheduler1 \u003d new Scheduler();","lastModifiedDate":"2021-10-24"},{"lineNumber":36,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":37,"author":{"gitId":"justinfidelis"},"content":"        private void initialiseScheduler() {","lastModifiedDate":"2021-10-24"},{"lineNumber":38,"author":{"gitId":"justinfidelis"},"content":"            Patient patient1 \u003d new Patient();","lastModifiedDate":"2021-10-24"},{"lineNumber":39,"author":{"gitId":"justinfidelis"},"content":"            patient1.setName(\"Abby\");","lastModifiedDate":"2021-10-24"},{"lineNumber":40,"author":{"gitId":"justinfidelis"},"content":"            Patient patient2 \u003d new Patient();","lastModifiedDate":"2021-10-24"},{"lineNumber":41,"author":{"gitId":"justinfidelis"},"content":"            patient2.setName(\"Ben\");","lastModifiedDate":"2021-10-24"},{"lineNumber":42,"author":{"gitId":"justinfidelis"},"content":"            Patient patient3 \u003d new Patient();","lastModifiedDate":"2021-10-24"},{"lineNumber":43,"author":{"gitId":"justinfidelis"},"content":"            patient3.setName(\"Claire\");","lastModifiedDate":"2021-10-24"},{"lineNumber":44,"author":{"gitId":"justinfidelis"},"content":"            Staff staff1 \u003d new Staff();","lastModifiedDate":"2021-10-24"},{"lineNumber":45,"author":{"gitId":"justinfidelis"},"content":"            staff1.setName(\"Dr Tan\");","lastModifiedDate":"2021-10-24"},{"lineNumber":46,"author":{"gitId":"justinfidelis"},"content":"            Staff staff2 \u003d new Staff();","lastModifiedDate":"2021-10-24"},{"lineNumber":47,"author":{"gitId":"justinfidelis"},"content":"            staff2.setName(\"Dr Ong\");","lastModifiedDate":"2021-10-24"},{"lineNumber":48,"author":{"gitId":"justinfidelis"},"content":"            Staff staff3 \u003d new Staff();","lastModifiedDate":"2021-10-24"},{"lineNumber":49,"author":{"gitId":"justinfidelis"},"content":"            staff3.setName(\"Dr Lim\");","lastModifiedDate":"2021-10-24"},{"lineNumber":50,"author":{"gitId":"justinfidelis"},"content":"            scheduler.getPatientList().addPerson(patient1);","lastModifiedDate":"2021-10-24"},{"lineNumber":51,"author":{"gitId":"justinfidelis"},"content":"            scheduler.getPatientList().addPerson(patient2);","lastModifiedDate":"2021-10-24"},{"lineNumber":52,"author":{"gitId":"justinfidelis"},"content":"            scheduler.getPatientList().addPerson(patient3);","lastModifiedDate":"2021-10-24"},{"lineNumber":53,"author":{"gitId":"justinfidelis"},"content":"            scheduler.getMedicalStaffList().addPerson(patient1);","lastModifiedDate":"2021-10-24"},{"lineNumber":54,"author":{"gitId":"justinfidelis"},"content":"            scheduler.getMedicalStaffList().addPerson(patient2);","lastModifiedDate":"2021-10-24"},{"lineNumber":55,"author":{"gitId":"justinfidelis"},"content":"            scheduler.getMedicalStaffList().addPerson(patient3);","lastModifiedDate":"2021-10-24"},{"lineNumber":56,"author":{"gitId":"justinfidelis"},"content":"        }","lastModifiedDate":"2021-10-24"},{"lineNumber":57,"author":{"gitId":"justinfidelis"},"content":"    */","lastModifiedDate":"2021-10-24"},{"lineNumber":58,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":59,"author":{"gitId":"Kureans"},"content":"//    @Test","lastModifiedDate":"2021-10-29"},{"lineNumber":60,"author":{"gitId":"Kureans"},"content":"//    public void testAddPatient_success() {","lastModifiedDate":"2021-10-29"},{"lineNumber":61,"author":{"gitId":"Kureans"},"content":"//        Scheduler scheduler \u003d new Scheduler();","lastModifiedDate":"2021-10-29"},{"lineNumber":62,"author":{"gitId":"Kureans"},"content":"//        Patient patient \u003d new Patient();","lastModifiedDate":"2021-10-29"},{"lineNumber":63,"author":{"gitId":"Kureans"},"content":"//    }","lastModifiedDate":"2021-10-29"},{"lineNumber":64,"author":{"gitId":"Kureans"},"content":"//","lastModifiedDate":"2021-10-29"},{"lineNumber":65,"author":{"gitId":"Kureans"},"content":"//    @Test","lastModifiedDate":"2021-10-29"},{"lineNumber":66,"author":{"gitId":"Kureans"},"content":"//    public void testAddPatient_failure() {","lastModifiedDate":"2021-10-29"},{"lineNumber":67,"author":{"gitId":"Kureans"},"content":"//","lastModifiedDate":"2021-10-29"},{"lineNumber":68,"author":{"gitId":"Kureans"},"content":"//    }","lastModifiedDate":"2021-10-29"},{"lineNumber":69,"author":{"gitId":"Kureans"},"content":"//","lastModifiedDate":"2021-10-29"},{"lineNumber":70,"author":{"gitId":"Kureans"},"content":"//    @Test","lastModifiedDate":"2021-10-29"},{"lineNumber":71,"author":{"gitId":"Kureans"},"content":"//    public void testEditPatient_Success() {","lastModifiedDate":"2021-10-29"},{"lineNumber":72,"author":{"gitId":"Kureans"},"content":"//","lastModifiedDate":"2021-10-29"},{"lineNumber":73,"author":{"gitId":"Kureans"},"content":"//    }","lastModifiedDate":"2021-10-29"},{"lineNumber":74,"author":{"gitId":"Kureans"},"content":"//","lastModifiedDate":"2021-10-29"},{"lineNumber":75,"author":{"gitId":"Kureans"},"content":"//    @Test","lastModifiedDate":"2021-10-29"},{"lineNumber":76,"author":{"gitId":"Kureans"},"content":"//    public void testEditPatient_Failure() {","lastModifiedDate":"2021-10-29"},{"lineNumber":77,"author":{"gitId":"Kureans"},"content":"//","lastModifiedDate":"2021-10-29"},{"lineNumber":78,"author":{"gitId":"Kureans"},"content":"//    }","lastModifiedDate":"2021-10-29"},{"lineNumber":79,"author":{"gitId":"Kureans"},"content":"//","lastModifiedDate":"2021-10-29"},{"lineNumber":80,"author":{"gitId":"Kureans"},"content":"//    @Test","lastModifiedDate":"2021-10-29"},{"lineNumber":81,"author":{"gitId":"Kureans"},"content":"//    public void testDeletePatient_Success() {","lastModifiedDate":"2021-10-29"},{"lineNumber":82,"author":{"gitId":"Kureans"},"content":"//","lastModifiedDate":"2021-10-29"},{"lineNumber":83,"author":{"gitId":"Kureans"},"content":"//    }","lastModifiedDate":"2021-10-29"},{"lineNumber":84,"author":{"gitId":"Kureans"},"content":"//","lastModifiedDate":"2021-10-29"},{"lineNumber":85,"author":{"gitId":"Kureans"},"content":"//    @Test","lastModifiedDate":"2021-10-29"},{"lineNumber":86,"author":{"gitId":"Kureans"},"content":"//    public void testDeletePatient_Failure() {","lastModifiedDate":"2021-10-29"},{"lineNumber":87,"author":{"gitId":"Kureans"},"content":"//","lastModifiedDate":"2021-10-29"},{"lineNumber":88,"author":{"gitId":"Kureans"},"content":"//    }","lastModifiedDate":"2021-10-29"},{"lineNumber":89,"author":{"gitId":"Kureans"},"content":"//","lastModifiedDate":"2021-10-29"},{"lineNumber":90,"author":{"gitId":"Kureans"},"content":"//    @Test","lastModifiedDate":"2021-10-29"},{"lineNumber":91,"author":{"gitId":"Kureans"},"content":"//    public void testGetPatientInfo_Success() {","lastModifiedDate":"2021-10-29"},{"lineNumber":92,"author":{"gitId":"Kureans"},"content":"//","lastModifiedDate":"2021-10-29"},{"lineNumber":93,"author":{"gitId":"Kureans"},"content":"//    }","lastModifiedDate":"2021-10-29"},{"lineNumber":94,"author":{"gitId":"Kureans"},"content":"//    @Test","lastModifiedDate":"2021-10-29"},{"lineNumber":95,"author":{"gitId":"Kureans"},"content":"//    public void testAddStaff_success() {","lastModifiedDate":"2021-10-29"},{"lineNumber":96,"author":{"gitId":"Kureans"},"content":"//","lastModifiedDate":"2021-10-29"},{"lineNumber":97,"author":{"gitId":"Kureans"},"content":"//    }","lastModifiedDate":"2021-10-29"},{"lineNumber":98,"author":{"gitId":"Kureans"},"content":"//","lastModifiedDate":"2021-10-29"},{"lineNumber":99,"author":{"gitId":"Kureans"},"content":"//    @Test","lastModifiedDate":"2021-10-29"},{"lineNumber":100,"author":{"gitId":"Kureans"},"content":"//    public void testAddStaff_failure() {","lastModifiedDate":"2021-10-29"},{"lineNumber":101,"author":{"gitId":"Kureans"},"content":"//","lastModifiedDate":"2021-10-29"},{"lineNumber":102,"author":{"gitId":"Kureans"},"content":"//    }","lastModifiedDate":"2021-10-29"},{"lineNumber":103,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":104,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":105,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":106,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":107,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":108,"author":{"gitId":"Kureans"},"content":"//}","lastModifiedDate":"2021-10-29"}],"authorContributionMap":{"justinfidelis":37,"Kureans":71}},{"path":"src/test/java/medbot/UiTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"EricBryann"},"content":"package medbot;","lastModifiedDate":"2021-10-06"},{"lineNumber":2,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":3,"author":{"gitId":"jushg"},"content":"import medbot.exceptions.MedBotException;","lastModifiedDate":"2021-10-22"},{"lineNumber":4,"author":{"gitId":"EricBryann"},"content":"import medbot.list.MedicalStaffList;","lastModifiedDate":"2021-11-01"},{"lineNumber":5,"author":{"gitId":"jushg"},"content":"import medbot.list.PatientList;","lastModifiedDate":"2021-10-18"},{"lineNumber":6,"author":{"gitId":"EricBryann"},"content":"import medbot.person.Patient;","lastModifiedDate":"2021-10-06"},{"lineNumber":7,"author":{"gitId":"EricBryann"},"content":"import medbot.person.Staff;","lastModifiedDate":"2021-11-01"},{"lineNumber":8,"author":{"gitId":"jushg"},"content":"import medbot.ui.PatientUi;","lastModifiedDate":"2021-10-22"},{"lineNumber":9,"author":{"gitId":"EricBryann"},"content":"import medbot.ui.StaffUi;","lastModifiedDate":"2021-11-01"},{"lineNumber":10,"author":{"gitId":"jushg"},"content":"import medbot.ui.Ui;","lastModifiedDate":"2021-10-22"},{"lineNumber":11,"author":{"gitId":"jushg"},"content":"import medbot.utilities.ViewType;","lastModifiedDate":"2021-10-22"},{"lineNumber":12,"author":{"gitId":"EricBryann"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-06"},{"lineNumber":13,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":14,"author":{"gitId":"EricBryann"},"content":"import java.util.List;","lastModifiedDate":"2021-11-01"},{"lineNumber":15,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":16,"author":{"gitId":"EricBryann"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-06"},{"lineNumber":17,"author":{"gitId":"EricBryann"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2021-11-03"},{"lineNumber":18,"author":{"gitId":"justinfidelis"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2021-10-25"},{"lineNumber":19,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":20,"author":{"gitId":"EricBryann"},"content":"class UiTest {","lastModifiedDate":"2021-10-06"},{"lineNumber":21,"author":{"gitId":"jushg"},"content":"    public static final String END_LINE \u003d System.lineSeparator();","lastModifiedDate":"2021-10-22"},{"lineNumber":22,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":23,"author":{"gitId":"EricBryann"},"content":"    @Test","lastModifiedDate":"2021-10-06"},{"lineNumber":24,"author":{"gitId":"EricBryann"},"content":"    public void testPrintAddPatientMessage_viewTypeExists_Success() {","lastModifiedDate":"2021-11-03"},{"lineNumber":25,"author":{"gitId":"justinfidelis"},"content":"        String expectedPatientOutput \u003d \"Added patient with Patient ID: 1 \" + END_LINE","lastModifiedDate":"2021-11-02"},{"lineNumber":26,"author":{"gitId":"justinfidelis"},"content":"                + \"IC: \" + \"S8712345G\" + END_LINE","lastModifiedDate":"2021-11-02"},{"lineNumber":27,"author":{"gitId":"justinfidelis"},"content":"                + \"Name: \" + \"Alice Tan\" + END_LINE","lastModifiedDate":"2021-11-02"},{"lineNumber":28,"author":{"gitId":"justinfidelis"},"content":"                + \"H/P: \" + \"81234567\" + END_LINE","lastModifiedDate":"2021-11-02"},{"lineNumber":29,"author":{"gitId":"justinfidelis"},"content":"                + \"Email: \" + \"alicetan@example.com\" + END_LINE","lastModifiedDate":"2021-11-02"},{"lineNumber":30,"author":{"gitId":"justinfidelis"},"content":"                + \"Address: \" + \"Blk 123 Bishan St 12 #05-39\" + END_LINE;","lastModifiedDate":"2021-11-02"},{"lineNumber":31,"author":{"gitId":"justinfidelis"},"content":"        String patientInfo \u003d \"Patient ID: 1 \" + END_LINE","lastModifiedDate":"2021-11-02"},{"lineNumber":32,"author":{"gitId":"justinfidelis"},"content":"                + \"IC: \" + \"S8712345G\" + END_LINE","lastModifiedDate":"2021-11-02"},{"lineNumber":33,"author":{"gitId":"justinfidelis"},"content":"                + \"Name: \" + \"Alice Tan\" + END_LINE","lastModifiedDate":"2021-11-02"},{"lineNumber":34,"author":{"gitId":"justinfidelis"},"content":"                + \"H/P: \" + \"81234567\" + END_LINE","lastModifiedDate":"2021-11-02"},{"lineNumber":35,"author":{"gitId":"justinfidelis"},"content":"                + \"Email: \" + \"alicetan@example.com\" + END_LINE","lastModifiedDate":"2021-11-02"},{"lineNumber":36,"author":{"gitId":"justinfidelis"},"content":"                + \"Address: \" + \"Blk 123 Bishan St 12 #05-39\";","lastModifiedDate":"2021-11-02"},{"lineNumber":37,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":38,"author":{"gitId":"jushg"},"content":"        try {","lastModifiedDate":"2021-10-22"},{"lineNumber":39,"author":{"gitId":"justinfidelis"},"content":"            String actualPatientOutput \u003d Ui.getAddMessage(patientInfo, ViewType.PATIENT_INFO);","lastModifiedDate":"2021-11-07"},{"lineNumber":40,"author":{"gitId":"justinfidelis"},"content":"            assertEquals(expectedPatientOutput, actualPatientOutput);","lastModifiedDate":"2021-11-02"},{"lineNumber":41,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":42,"author":{"gitId":"EricBryann"},"content":"        } catch (MedBotException e) {","lastModifiedDate":"2021-11-01"},{"lineNumber":43,"author":{"gitId":"EricBryann"},"content":"            assertEquals(\"Cannot identify the current view type\" + END_LINE, e.getMessage());","lastModifiedDate":"2021-11-01"},{"lineNumber":44,"author":{"gitId":"EricBryann"},"content":"        }","lastModifiedDate":"2021-11-01"},{"lineNumber":45,"author":{"gitId":"EricBryann"},"content":"    }","lastModifiedDate":"2021-11-01"},{"lineNumber":46,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":47,"author":{"gitId":"EricBryann"},"content":"    @Test","lastModifiedDate":"2021-11-01"},{"lineNumber":48,"author":{"gitId":"EricBryann"},"content":"    public void testPrintAddStaffMessage_viewTypeExists_Success() {","lastModifiedDate":"2021-11-03"},{"lineNumber":49,"author":{"gitId":"justinfidelis"},"content":"        String expectedStaffOutput \u003d \"Added staff with Staff ID: 3 \" + END_LINE","lastModifiedDate":"2021-11-02"},{"lineNumber":50,"author":{"gitId":"justinfidelis"},"content":"                + \"IC: \" + \"S8712345G\" + END_LINE","lastModifiedDate":"2021-11-02"},{"lineNumber":51,"author":{"gitId":"justinfidelis"},"content":"                + \"Name: \" + \"Alice Tan\" + END_LINE","lastModifiedDate":"2021-11-02"},{"lineNumber":52,"author":{"gitId":"justinfidelis"},"content":"                + \"H/P: \" + \"81234567\" + END_LINE","lastModifiedDate":"2021-11-02"},{"lineNumber":53,"author":{"gitId":"justinfidelis"},"content":"                + \"Email: \" + \"alicetan@example.com\" + END_LINE","lastModifiedDate":"2021-11-02"},{"lineNumber":54,"author":{"gitId":"justinfidelis"},"content":"                + \"Address: \" + \"Blk 123 Bishan St 12 #05-39\" + END_LINE;","lastModifiedDate":"2021-11-02"},{"lineNumber":55,"author":{"gitId":"justinfidelis"},"content":"        String staffInfo \u003d \"Staff ID: 3 \" + END_LINE","lastModifiedDate":"2021-11-02"},{"lineNumber":56,"author":{"gitId":"justinfidelis"},"content":"                + \"IC: \" + \"S8712345G\" + END_LINE","lastModifiedDate":"2021-11-02"},{"lineNumber":57,"author":{"gitId":"justinfidelis"},"content":"                + \"Name: \" + \"Alice Tan\" + END_LINE","lastModifiedDate":"2021-11-02"},{"lineNumber":58,"author":{"gitId":"justinfidelis"},"content":"                + \"H/P: \" + \"81234567\" + END_LINE","lastModifiedDate":"2021-11-02"},{"lineNumber":59,"author":{"gitId":"justinfidelis"},"content":"                + \"Email: \" + \"alicetan@example.com\" + END_LINE","lastModifiedDate":"2021-11-02"},{"lineNumber":60,"author":{"gitId":"justinfidelis"},"content":"                + \"Address: \" + \"Blk 123 Bishan St 12 #05-39\";","lastModifiedDate":"2021-11-02"},{"lineNumber":61,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":62,"author":{"gitId":"EricBryann"},"content":"        try {","lastModifiedDate":"2021-11-01"},{"lineNumber":63,"author":{"gitId":"justinfidelis"},"content":"            String actualStaffOutput \u003d Ui.getAddMessage(staffInfo, ViewType.MEDICAL_STAFF_INFO);","lastModifiedDate":"2021-11-07"},{"lineNumber":64,"author":{"gitId":"justinfidelis"},"content":"            assertEquals(expectedStaffOutput, actualStaffOutput);","lastModifiedDate":"2021-11-02"},{"lineNumber":65,"author":{"gitId":"EricBryann"},"content":"        } catch (MedBotException e) {","lastModifiedDate":"2021-11-01"},{"lineNumber":66,"author":{"gitId":"EricBryann"},"content":"            assertEquals(\"Cannot identify the current view type\" + END_LINE, e.getMessage());","lastModifiedDate":"2021-11-01"},{"lineNumber":67,"author":{"gitId":"EricBryann"},"content":"        }","lastModifiedDate":"2021-11-01"},{"lineNumber":68,"author":{"gitId":"EricBryann"},"content":"    }","lastModifiedDate":"2021-11-01"},{"lineNumber":69,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":70,"author":{"gitId":"EricBryann"},"content":"    @Test","lastModifiedDate":"2021-11-01"},{"lineNumber":71,"author":{"gitId":"EricBryann"},"content":"    public void testPrintAddScheduleMessage_viewTypeExists_Success() {","lastModifiedDate":"2021-11-03"},{"lineNumber":72,"author":{"gitId":"justinfidelis"},"content":"        String expectedScheduleOutput \u003d \"Added appointment with Appointment Id: 3\" + END_LINE","lastModifiedDate":"2021-11-02"},{"lineNumber":73,"author":{"gitId":"justinfidelis"},"content":"                + \"Patient ID: 1\" + END_LINE","lastModifiedDate":"2021-11-02"},{"lineNumber":74,"author":{"gitId":"justinfidelis"},"content":"                + \"Staff ID: 2\" + END_LINE","lastModifiedDate":"2021-11-02"},{"lineNumber":75,"author":{"gitId":"justinfidelis"},"content":"                + \"Date/Time: 11 Dec 21 1400HRS\" + END_LINE;","lastModifiedDate":"2021-11-02"},{"lineNumber":76,"author":{"gitId":"justinfidelis"},"content":"        String appointmentInfo \u003d \"Appointment Id: 3\" + END_LINE","lastModifiedDate":"2021-11-02"},{"lineNumber":77,"author":{"gitId":"justinfidelis"},"content":"                + \"Patient ID: 1\" + END_LINE","lastModifiedDate":"2021-11-02"},{"lineNumber":78,"author":{"gitId":"justinfidelis"},"content":"                + \"Staff ID: 2\" + END_LINE","lastModifiedDate":"2021-11-02"},{"lineNumber":79,"author":{"gitId":"justinfidelis"},"content":"                + \"Date/Time: 11 Dec 21 1400HRS\" + END_LINE;","lastModifiedDate":"2021-11-02"},{"lineNumber":80,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":81,"author":{"gitId":"EricBryann"},"content":"        try {","lastModifiedDate":"2021-11-01"},{"lineNumber":82,"author":{"gitId":"justinfidelis"},"content":"            String actualScheduleOutput \u003d Ui.getAddMessage(appointmentInfo, ViewType.SCHEDULER);","lastModifiedDate":"2021-11-07"},{"lineNumber":83,"author":{"gitId":"justinfidelis"},"content":"            assertEquals(expectedScheduleOutput, actualScheduleOutput);","lastModifiedDate":"2021-11-02"},{"lineNumber":84,"author":{"gitId":"jushg"},"content":"        } catch (MedBotException e) {","lastModifiedDate":"2021-10-22"},{"lineNumber":85,"author":{"gitId":"EricBryann"},"content":"            assertEquals(\"Cannot identify the current view type\" + END_LINE, e.getMessage());","lastModifiedDate":"2021-11-01"},{"lineNumber":86,"author":{"gitId":"jushg"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":87,"author":{"gitId":"EricBryann"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":88,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":89,"author":{"gitId":"EricBryann"},"content":"    @Test","lastModifiedDate":"2021-10-06"},{"lineNumber":90,"author":{"gitId":"EricBryann"},"content":"    public void testPrintDeletePersonMessage_personDoesNotExist_Fail() {","lastModifiedDate":"2021-11-03"},{"lineNumber":91,"author":{"gitId":"EricBryann"},"content":"        MedicalStaffList staffList \u003d new MedicalStaffList();","lastModifiedDate":"2021-11-03"},{"lineNumber":92,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":93,"author":{"gitId":"EricBryann"},"content":"        int id \u003d 2;","lastModifiedDate":"2021-11-03"},{"lineNumber":94,"author":{"gitId":"EricBryann"},"content":"        MedBotException medBotException \u003d assertThrows(MedBotException.class, () -\u003e {","lastModifiedDate":"2021-11-03"},{"lineNumber":95,"author":{"gitId":"EricBryann"},"content":"            staffList.deletePerson(id);","lastModifiedDate":"2021-11-03"},{"lineNumber":96,"author":{"gitId":"EricBryann"},"content":"        });","lastModifiedDate":"2021-11-03"},{"lineNumber":97,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":98,"author":{"gitId":"justinfidelis"},"content":"        String expectedOutput \u003d \"No staff with ID 2 found.\" + END_LINE;","lastModifiedDate":"2021-11-07"},{"lineNumber":99,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":100,"author":{"gitId":"EricBryann"},"content":"        assertEquals(expectedOutput, medBotException.getMessage());","lastModifiedDate":"2021-11-03"},{"lineNumber":101,"author":{"gitId":"EricBryann"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":102,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":103,"author":{"gitId":"EricBryann"},"content":"    @Test","lastModifiedDate":"2021-11-03"},{"lineNumber":104,"author":{"gitId":"EricBryann"},"content":"    public void testPrintDeletePatientMessage_patientExists_Success() {","lastModifiedDate":"2021-11-03"},{"lineNumber":105,"author":{"gitId":"EricBryann"},"content":"        int id \u003d 2;","lastModifiedDate":"2021-11-01"},{"lineNumber":106,"author":{"gitId":"justinfidelis"},"content":"        String expectedPatientOutput \u003d \"Patient with ID 2 deleted from system.\" + END_LINE;","lastModifiedDate":"2021-11-07"},{"lineNumber":107,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":108,"author":{"gitId":"jushg"},"content":"        try {","lastModifiedDate":"2021-10-22"},{"lineNumber":109,"author":{"gitId":"EricBryann"},"content":"            String actualPatientOutput \u003d Ui.getDeleteMessage(id, ViewType.PATIENT_INFO);","lastModifiedDate":"2021-11-01"},{"lineNumber":110,"author":{"gitId":"EricBryann"},"content":"            assertEquals(actualPatientOutput, expectedPatientOutput);","lastModifiedDate":"2021-11-01"},{"lineNumber":111,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":112,"author":{"gitId":"jushg"},"content":"        } catch (MedBotException e) {","lastModifiedDate":"2021-10-22"},{"lineNumber":113,"author":{"gitId":"EricBryann"},"content":"            assertEquals(\"Cannot identify the current view type\" + END_LINE, e.getMessage());","lastModifiedDate":"2021-11-01"},{"lineNumber":114,"author":{"gitId":"jushg"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":115,"author":{"gitId":"EricBryann"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":116,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":117,"author":{"gitId":"EricBryann"},"content":"    @Test","lastModifiedDate":"2021-10-06"},{"lineNumber":118,"author":{"gitId":"EricBryann"},"content":"    public void testPrintDeleteStaffMessage_staffExists_Success() {","lastModifiedDate":"2021-11-03"},{"lineNumber":119,"author":{"gitId":"EricBryann"},"content":"        int id \u003d 2;","lastModifiedDate":"2021-11-01"},{"lineNumber":120,"author":{"gitId":"justinfidelis"},"content":"        String expectedStaffOutput \u003d \"Staff with ID 2 deleted from system.\" + END_LINE;","lastModifiedDate":"2021-11-07"},{"lineNumber":121,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":122,"author":{"gitId":"EricBryann"},"content":"        try {","lastModifiedDate":"2021-11-01"},{"lineNumber":123,"author":{"gitId":"EricBryann"},"content":"            String actualStaffOutput \u003d Ui.getDeleteMessage(id, ViewType.MEDICAL_STAFF_INFO);","lastModifiedDate":"2021-11-01"},{"lineNumber":124,"author":{"gitId":"EricBryann"},"content":"            assertEquals(actualStaffOutput, expectedStaffOutput);","lastModifiedDate":"2021-11-01"},{"lineNumber":125,"author":{"gitId":"EricBryann"},"content":"        } catch (MedBotException e) {","lastModifiedDate":"2021-11-01"},{"lineNumber":126,"author":{"gitId":"EricBryann"},"content":"            assertEquals(\"Cannot identify the current view type\" + END_LINE, e.getMessage());","lastModifiedDate":"2021-11-01"},{"lineNumber":127,"author":{"gitId":"EricBryann"},"content":"        }","lastModifiedDate":"2021-11-01"},{"lineNumber":128,"author":{"gitId":"EricBryann"},"content":"    }","lastModifiedDate":"2021-11-01"},{"lineNumber":129,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":130,"author":{"gitId":"EricBryann"},"content":"    @Test","lastModifiedDate":"2021-11-01"},{"lineNumber":131,"author":{"gitId":"EricBryann"},"content":"    public void testPrintDeleteScheduleMessage_scheduleDoesNotExist_Fail() {","lastModifiedDate":"2021-11-03"},{"lineNumber":132,"author":{"gitId":"EricBryann"},"content":"        Scheduler scheduler \u003d new Scheduler();","lastModifiedDate":"2021-11-03"},{"lineNumber":133,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":134,"author":{"gitId":"EricBryann"},"content":"        int id \u003d 2;","lastModifiedDate":"2021-11-03"},{"lineNumber":135,"author":{"gitId":"EricBryann"},"content":"        MedBotException medBotException \u003d assertThrows(MedBotException.class, () -\u003e {","lastModifiedDate":"2021-11-03"},{"lineNumber":136,"author":{"gitId":"EricBryann"},"content":"            scheduler.deleteAppointment(id);","lastModifiedDate":"2021-11-03"},{"lineNumber":137,"author":{"gitId":"EricBryann"},"content":"        });","lastModifiedDate":"2021-11-03"},{"lineNumber":138,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":139,"author":{"gitId":"EricBryann"},"content":"        String expectedOutput \u003d \"No appointment with ID 2 found.\";","lastModifiedDate":"2021-11-03"},{"lineNumber":140,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":141,"author":{"gitId":"EricBryann"},"content":"        assertEquals(expectedOutput, medBotException.getMessage());","lastModifiedDate":"2021-11-03"},{"lineNumber":142,"author":{"gitId":"EricBryann"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":143,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":144,"author":{"gitId":"EricBryann"},"content":"    @Test","lastModifiedDate":"2021-11-03"},{"lineNumber":145,"author":{"gitId":"EricBryann"},"content":"    public void testPrintDeleteScheduleMessage_scheduleExists_Success() {","lastModifiedDate":"2021-11-03"},{"lineNumber":146,"author":{"gitId":"EricBryann"},"content":"        int id \u003d 2;","lastModifiedDate":"2021-11-01"},{"lineNumber":147,"author":{"gitId":"justinfidelis"},"content":"        String expectedScheduleOutput \u003d \"Appointment with ID 2 deleted from system.\" + END_LINE;","lastModifiedDate":"2021-11-07"},{"lineNumber":148,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":149,"author":{"gitId":"EricBryann"},"content":"        try {","lastModifiedDate":"2021-11-01"},{"lineNumber":150,"author":{"gitId":"EricBryann"},"content":"            String actualScheduleOutput \u003d Ui.getDeleteMessage(id, ViewType.SCHEDULER);","lastModifiedDate":"2021-11-01"},{"lineNumber":151,"author":{"gitId":"EricBryann"},"content":"            assertEquals(actualScheduleOutput, expectedScheduleOutput);","lastModifiedDate":"2021-11-01"},{"lineNumber":152,"author":{"gitId":"EricBryann"},"content":"        } catch (MedBotException e) {","lastModifiedDate":"2021-11-01"},{"lineNumber":153,"author":{"gitId":"EricBryann"},"content":"            assertEquals(\"Cannot identify the current view type\" + END_LINE, e.getMessage());","lastModifiedDate":"2021-11-01"},{"lineNumber":154,"author":{"gitId":"EricBryann"},"content":"        }","lastModifiedDate":"2021-11-01"},{"lineNumber":155,"author":{"gitId":"EricBryann"},"content":"    }","lastModifiedDate":"2021-11-01"},{"lineNumber":156,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":157,"author":{"gitId":"EricBryann"},"content":"    @Test","lastModifiedDate":"2021-11-01"},{"lineNumber":158,"author":{"gitId":"EricBryann"},"content":"    public void testEditPersonMessage_personDoesNotExist_Fail() {","lastModifiedDate":"2021-11-03"},{"lineNumber":159,"author":{"gitId":"EricBryann"},"content":"        MedicalStaffList staffList \u003d new MedicalStaffList();","lastModifiedDate":"2021-11-03"},{"lineNumber":160,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":161,"author":{"gitId":"EricBryann"},"content":"        int id \u003d 2;","lastModifiedDate":"2021-11-03"},{"lineNumber":162,"author":{"gitId":"EricBryann"},"content":"        MedBotException medBotException \u003d assertThrows(MedBotException.class, () -\u003e {","lastModifiedDate":"2021-11-03"},{"lineNumber":163,"author":{"gitId":"EricBryann"},"content":"            staffList.editPerson(id, new Staff());","lastModifiedDate":"2021-11-03"},{"lineNumber":164,"author":{"gitId":"EricBryann"},"content":"        });","lastModifiedDate":"2021-11-03"},{"lineNumber":165,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":166,"author":{"gitId":"justinfidelis"},"content":"        String expectedOutput \u003d \"No staff with ID 2 found.\" + END_LINE;","lastModifiedDate":"2021-11-07"},{"lineNumber":167,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":168,"author":{"gitId":"EricBryann"},"content":"        assertEquals(expectedOutput, medBotException.getMessage());","lastModifiedDate":"2021-11-03"},{"lineNumber":169,"author":{"gitId":"EricBryann"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":170,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":171,"author":{"gitId":"EricBryann"},"content":"    @Test","lastModifiedDate":"2021-11-03"},{"lineNumber":172,"author":{"gitId":"EricBryann"},"content":"    public void testEditPatientMessage_patientExists_Success() {","lastModifiedDate":"2021-11-03"},{"lineNumber":173,"author":{"gitId":"EricBryann"},"content":"        PatientList patientList \u003d new PatientList();","lastModifiedDate":"2021-10-06"},{"lineNumber":174,"author":{"gitId":"EricBryann"},"content":"        Patient patient \u003d new Patient();","lastModifiedDate":"2021-10-06"},{"lineNumber":175,"author":{"gitId":"EricBryann"},"content":"        patient.setName(\"John Doe\");","lastModifiedDate":"2021-10-06"},{"lineNumber":176,"author":{"gitId":"EricBryann"},"content":"        patient.setEmailAddress(\"John@gmail.com\");","lastModifiedDate":"2021-10-06"},{"lineNumber":177,"author":{"gitId":"EricBryann"},"content":"        String expectedOutput \u003d","lastModifiedDate":"2021-10-19"},{"lineNumber":178,"author":{"gitId":"justinfidelis"},"content":"                \"The information of the patient with ID 1 has been edited to:\" + END_LINE + END_LINE","lastModifiedDate":"2021-11-07"},{"lineNumber":179,"author":{"gitId":"jushg"},"content":"                + \"Patient ID: 1\" + END_LINE","lastModifiedDate":"2021-10-22"},{"lineNumber":180,"author":{"gitId":"jushg"},"content":"                + \"IC: \" + END_LINE","lastModifiedDate":"2021-10-22"},{"lineNumber":181,"author":{"gitId":"jushg"},"content":"                + \"Name: Bob\" + END_LINE","lastModifiedDate":"2021-10-22"},{"lineNumber":182,"author":{"gitId":"jushg"},"content":"                + \"H/P: \" + END_LINE","lastModifiedDate":"2021-10-22"},{"lineNumber":183,"author":{"gitId":"jushg"},"content":"                + \"Email: John@gmail.com\" + END_LINE","lastModifiedDate":"2021-10-22"},{"lineNumber":184,"author":{"gitId":"jushg"},"content":"                + \"Address: \" + END_LINE;","lastModifiedDate":"2021-10-22"},{"lineNumber":185,"author":{"gitId":"EricBryann"},"content":"        int patientId \u003d 1;","lastModifiedDate":"2021-10-06"},{"lineNumber":186,"author":{"gitId":"jushg"},"content":"        try {","lastModifiedDate":"2021-10-22"},{"lineNumber":187,"author":{"gitId":"jushg"},"content":"            patientList.addPerson(patient);","lastModifiedDate":"2021-11-02"},{"lineNumber":188,"author":{"gitId":"jushg"},"content":"            patient.setName(\"Bob\");","lastModifiedDate":"2021-11-02"},{"lineNumber":189,"author":{"gitId":"jushg"},"content":"            String patientInfo \u003d patient.toString();","lastModifiedDate":"2021-11-02"},{"lineNumber":190,"author":{"gitId":"jushg"},"content":"            String actualOutput \u003d Ui.getEditMessage(patientId, patientInfo, ViewType.PATIENT_INFO);","lastModifiedDate":"2021-10-22"},{"lineNumber":191,"author":{"gitId":"jushg"},"content":"            assertEquals(actualOutput, expectedOutput);","lastModifiedDate":"2021-10-22"},{"lineNumber":192,"author":{"gitId":"jushg"},"content":"        } catch (MedBotException e) {","lastModifiedDate":"2021-10-22"},{"lineNumber":193,"author":{"gitId":"jushg"},"content":"            fail();","lastModifiedDate":"2021-11-02"},{"lineNumber":194,"author":{"gitId":"jushg"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":195,"author":{"gitId":"EricBryann"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":196,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":197,"author":{"gitId":"EricBryann"},"content":"    @Test","lastModifiedDate":"2021-11-01"},{"lineNumber":198,"author":{"gitId":"EricBryann"},"content":"    public void testEditStaffMessage_staffExists_Success() {","lastModifiedDate":"2021-11-03"},{"lineNumber":199,"author":{"gitId":"EricBryann"},"content":"        Staff staff \u003d new Staff();","lastModifiedDate":"2021-11-01"},{"lineNumber":200,"author":{"gitId":"EricBryann"},"content":"        staff.setName(\"Dr Tan\");","lastModifiedDate":"2021-11-01"},{"lineNumber":201,"author":{"gitId":"EricBryann"},"content":"        staff.setIcNumber(\"S1459203K\");","lastModifiedDate":"2021-11-01"},{"lineNumber":202,"author":{"gitId":"EricBryann"},"content":"        staff.setEmailAddress(\"tan@gmail.com\");","lastModifiedDate":"2021-11-01"},{"lineNumber":203,"author":{"gitId":"EricBryann"},"content":"        staff.setPhoneNumber(\"91238456\");","lastModifiedDate":"2021-11-01"},{"lineNumber":204,"author":{"gitId":"EricBryann"},"content":"        staff.setResidentialAddress(\"25 Dover Road\");","lastModifiedDate":"2021-11-01"},{"lineNumber":205,"author":{"gitId":"EricBryann"},"content":"        MedicalStaffList staffList \u003d new MedicalStaffList();","lastModifiedDate":"2021-11-01"},{"lineNumber":206,"author":{"gitId":"EricBryann"},"content":"        String expectedOutput \u003d","lastModifiedDate":"2021-11-01"},{"lineNumber":207,"author":{"gitId":"justinfidelis"},"content":"                \"The information of the staff with ID 1 has been edited to:\" + END_LINE + END_LINE","lastModifiedDate":"2021-11-07"},{"lineNumber":208,"author":{"gitId":"EricBryann"},"content":"                        + \"Staff ID: 1 \" + END_LINE","lastModifiedDate":"2021-11-01"},{"lineNumber":209,"author":{"gitId":"EricBryann"},"content":"                        + \"IC: S1459203K\" + END_LINE","lastModifiedDate":"2021-11-01"},{"lineNumber":210,"author":{"gitId":"EricBryann"},"content":"                        + \"Name: Dr Tan\" + END_LINE","lastModifiedDate":"2021-11-01"},{"lineNumber":211,"author":{"gitId":"EricBryann"},"content":"                        + \"H/P: 91238456\" + END_LINE","lastModifiedDate":"2021-11-01"},{"lineNumber":212,"author":{"gitId":"EricBryann"},"content":"                        + \"Email: tan@gmail.com\" + END_LINE","lastModifiedDate":"2021-11-01"},{"lineNumber":213,"author":{"gitId":"EricBryann"},"content":"                        + \"Address: 25 Dover Road\" + END_LINE;","lastModifiedDate":"2021-11-01"},{"lineNumber":214,"author":{"gitId":"EricBryann"},"content":"        int staffId \u003d 1;","lastModifiedDate":"2021-11-01"},{"lineNumber":215,"author":{"gitId":"EricBryann"},"content":"        try {","lastModifiedDate":"2021-11-01"},{"lineNumber":216,"author":{"gitId":"jushg"},"content":"            staffList.addPerson(staff);","lastModifiedDate":"2021-11-02"},{"lineNumber":217,"author":{"gitId":"jushg"},"content":"            String staffInfo \u003d staff.toString();","lastModifiedDate":"2021-11-02"},{"lineNumber":218,"author":{"gitId":"EricBryann"},"content":"            String actualOutput \u003d Ui.getEditMessage(staffId, staffInfo, ViewType.MEDICAL_STAFF_INFO);","lastModifiedDate":"2021-11-01"},{"lineNumber":219,"author":{"gitId":"EricBryann"},"content":"            assertEquals(actualOutput, expectedOutput);","lastModifiedDate":"2021-11-01"},{"lineNumber":220,"author":{"gitId":"EricBryann"},"content":"        } catch (MedBotException e) {","lastModifiedDate":"2021-11-01"},{"lineNumber":221,"author":{"gitId":"jushg"},"content":"            fail();","lastModifiedDate":"2021-11-02"},{"lineNumber":222,"author":{"gitId":"EricBryann"},"content":"        }","lastModifiedDate":"2021-11-01"},{"lineNumber":223,"author":{"gitId":"EricBryann"},"content":"    }","lastModifiedDate":"2021-11-01"},{"lineNumber":224,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":225,"author":{"gitId":"EricBryann"},"content":"    @Test","lastModifiedDate":"2021-11-01"},{"lineNumber":226,"author":{"gitId":"EricBryann"},"content":"    public void testEditAppointmentMessage_appointmentDoesNotExist_Fail() {","lastModifiedDate":"2021-11-03"},{"lineNumber":227,"author":{"gitId":"EricBryann"},"content":"        Scheduler scheduler \u003d new Scheduler();","lastModifiedDate":"2021-11-03"},{"lineNumber":228,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":229,"author":{"gitId":"EricBryann"},"content":"        int id \u003d 2;","lastModifiedDate":"2021-11-03"},{"lineNumber":230,"author":{"gitId":"EricBryann"},"content":"        MedBotException medBotException \u003d assertThrows(MedBotException.class, () -\u003e {","lastModifiedDate":"2021-11-03"},{"lineNumber":231,"author":{"gitId":"EricBryann"},"content":"            scheduler.deleteAppointment(id);","lastModifiedDate":"2021-11-03"},{"lineNumber":232,"author":{"gitId":"EricBryann"},"content":"        });","lastModifiedDate":"2021-11-03"},{"lineNumber":233,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":234,"author":{"gitId":"EricBryann"},"content":"        String expectedOutput \u003d \"No appointment with ID 2 found.\";","lastModifiedDate":"2021-11-03"},{"lineNumber":235,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":236,"author":{"gitId":"EricBryann"},"content":"        assertEquals(expectedOutput, medBotException.getMessage());","lastModifiedDate":"2021-11-03"},{"lineNumber":237,"author":{"gitId":"EricBryann"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":238,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":239,"author":{"gitId":"EricBryann"},"content":"    @Test","lastModifiedDate":"2021-11-03"},{"lineNumber":240,"author":{"gitId":"EricBryann"},"content":"    public void testEditAppointmentMessage_appointmentExists_Success() {","lastModifiedDate":"2021-11-03"},{"lineNumber":241,"author":{"gitId":"EricBryann"},"content":"        Patient patient \u003d new Patient();","lastModifiedDate":"2021-11-01"},{"lineNumber":242,"author":{"gitId":"EricBryann"},"content":"        patient.setId(2);","lastModifiedDate":"2021-11-01"},{"lineNumber":243,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":244,"author":{"gitId":"EricBryann"},"content":"        Staff staff \u003d new Staff();","lastModifiedDate":"2021-11-01"},{"lineNumber":245,"author":{"gitId":"EricBryann"},"content":"        staff.setId(1);","lastModifiedDate":"2021-11-01"},{"lineNumber":246,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":247,"author":{"gitId":"EricBryann"},"content":"        Appointment appointment \u003d new Appointment();","lastModifiedDate":"2021-11-01"},{"lineNumber":248,"author":{"gitId":"EricBryann"},"content":"        appointment.setPatientId(2);","lastModifiedDate":"2021-11-01"},{"lineNumber":249,"author":{"gitId":"EricBryann"},"content":"        appointment.setMedicalStaffId(1);","lastModifiedDate":"2021-11-01"},{"lineNumber":250,"author":{"gitId":"EricBryann"},"content":"        appointment.setId(1);","lastModifiedDate":"2021-11-01"},{"lineNumber":251,"author":{"gitId":"EricBryann"},"content":"        appointment.setDateTimeCode(27262080); //1 November 2021, 0800","lastModifiedDate":"2021-11-01"},{"lineNumber":252,"author":{"gitId":"EricBryann"},"content":"        Scheduler scheduler \u003d new Scheduler();","lastModifiedDate":"2021-11-01"},{"lineNumber":253,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":254,"author":{"gitId":"justinfidelis"},"content":"        String expectedOutput \u003d \"The information of appointment with ID 1 has been edited to:\" + END_LINE + END_LINE","lastModifiedDate":"2021-11-02"},{"lineNumber":255,"author":{"gitId":"justinfidelis"},"content":"                + \"Appointment ID: 1\" + END_LINE","lastModifiedDate":"2021-11-08"},{"lineNumber":256,"author":{"gitId":"justinfidelis"},"content":"                + \"Patient ID: 2\" + END_LINE","lastModifiedDate":"2021-11-02"},{"lineNumber":257,"author":{"gitId":"justinfidelis"},"content":"                + \"Staff ID: 1\" + END_LINE","lastModifiedDate":"2021-11-02"},{"lineNumber":258,"author":{"gitId":"justinfidelis"},"content":"                + \"Date/Time: 01 Nov 21 0800HRS\" + END_LINE","lastModifiedDate":"2021-11-02"},{"lineNumber":259,"author":{"gitId":"EricBryann"},"content":"                + END_LINE;","lastModifiedDate":"2021-11-01"},{"lineNumber":260,"author":{"gitId":"EricBryann"},"content":"        try {","lastModifiedDate":"2021-11-01"},{"lineNumber":261,"author":{"gitId":"jushg"},"content":"            scheduler.addPatient(patient);","lastModifiedDate":"2021-11-02"},{"lineNumber":262,"author":{"gitId":"jushg"},"content":"            scheduler.addStaff(staff);","lastModifiedDate":"2021-11-02"},{"lineNumber":263,"author":{"gitId":"EricBryann"},"content":"            scheduler.addAppointment(appointment);","lastModifiedDate":"2021-11-01"},{"lineNumber":264,"author":{"gitId":"EricBryann"},"content":"            String actualOutput \u003d Ui.getEditMessage(1, appointment.toString(),ViewType.SCHEDULER);","lastModifiedDate":"2021-11-01"},{"lineNumber":265,"author":{"gitId":"EricBryann"},"content":"            assertEquals(expectedOutput, actualOutput);","lastModifiedDate":"2021-11-01"},{"lineNumber":266,"author":{"gitId":"EricBryann"},"content":"        } catch (MedBotException e) {","lastModifiedDate":"2021-11-01"},{"lineNumber":267,"author":{"gitId":"jushg"},"content":"            fail();","lastModifiedDate":"2021-11-02"},{"lineNumber":268,"author":{"gitId":"EricBryann"},"content":"        }","lastModifiedDate":"2021-11-01"},{"lineNumber":269,"author":{"gitId":"EricBryann"},"content":"    }","lastModifiedDate":"2021-11-01"},{"lineNumber":270,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":271,"author":{"gitId":"EricBryann"},"content":"    @Test","lastModifiedDate":"2021-10-06"},{"lineNumber":272,"author":{"gitId":"EricBryann"},"content":"    public void testGetPersonInfoMessage_personDoesNotExist_Fail() {","lastModifiedDate":"2021-11-03"},{"lineNumber":273,"author":{"gitId":"EricBryann"},"content":"        MedicalStaffList staffList \u003d new MedicalStaffList();","lastModifiedDate":"2021-11-03"},{"lineNumber":274,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":275,"author":{"gitId":"EricBryann"},"content":"        int id \u003d 2;","lastModifiedDate":"2021-11-03"},{"lineNumber":276,"author":{"gitId":"EricBryann"},"content":"        MedBotException medBotException \u003d assertThrows(MedBotException.class, () -\u003e {","lastModifiedDate":"2021-11-03"},{"lineNumber":277,"author":{"gitId":"EricBryann"},"content":"            staffList.getPersonInfo(id);","lastModifiedDate":"2021-11-03"},{"lineNumber":278,"author":{"gitId":"EricBryann"},"content":"        });","lastModifiedDate":"2021-11-03"},{"lineNumber":279,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":280,"author":{"gitId":"justinfidelis"},"content":"        String expectedOutput \u003d \"No staff with ID 2 found.\" + END_LINE;","lastModifiedDate":"2021-11-07"},{"lineNumber":281,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":282,"author":{"gitId":"EricBryann"},"content":"        assertEquals(expectedOutput, medBotException.getMessage());","lastModifiedDate":"2021-11-03"},{"lineNumber":283,"author":{"gitId":"EricBryann"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":284,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":285,"author":{"gitId":"EricBryann"},"content":"    @Test","lastModifiedDate":"2021-11-03"},{"lineNumber":286,"author":{"gitId":"EricBryann"},"content":"    public void testGetPatientInfoMessage_patientExists_Success() {","lastModifiedDate":"2021-11-03"},{"lineNumber":287,"author":{"gitId":"EricBryann"},"content":"        PatientList patientList \u003d new PatientList();","lastModifiedDate":"2021-10-06"},{"lineNumber":288,"author":{"gitId":"EricBryann"},"content":"        Patient patient \u003d new Patient();","lastModifiedDate":"2021-10-06"},{"lineNumber":289,"author":{"gitId":"EricBryann"},"content":"        patient.setName(\"John Doe\");","lastModifiedDate":"2021-10-06"},{"lineNumber":290,"author":{"gitId":"EricBryann"},"content":"        patient.setEmailAddress(\"John@gmail.com\");","lastModifiedDate":"2021-10-06"},{"lineNumber":291,"author":{"gitId":"justinfidelis"},"content":"        String expectedOutput \u003d \"Here\u0027s the requested patient information:\" + END_LINE + END_LINE","lastModifiedDate":"2021-11-08"},{"lineNumber":292,"author":{"gitId":"jushg"},"content":"                + \"Patient ID: 1\" + END_LINE","lastModifiedDate":"2021-10-22"},{"lineNumber":293,"author":{"gitId":"jushg"},"content":"                + \"IC: \" + END_LINE","lastModifiedDate":"2021-10-22"},{"lineNumber":294,"author":{"gitId":"jushg"},"content":"                + \"Name: John Doe\" + END_LINE","lastModifiedDate":"2021-10-22"},{"lineNumber":295,"author":{"gitId":"jushg"},"content":"                + \"H/P: \" + END_LINE","lastModifiedDate":"2021-10-22"},{"lineNumber":296,"author":{"gitId":"jushg"},"content":"                + \"Email: John@gmail.com\" + END_LINE","lastModifiedDate":"2021-10-22"},{"lineNumber":297,"author":{"gitId":"jushg"},"content":"                + \"Address: \" + END_LINE;","lastModifiedDate":"2021-10-22"},{"lineNumber":298,"author":{"gitId":"jushg"},"content":"        try {","lastModifiedDate":"2021-11-02"},{"lineNumber":299,"author":{"gitId":"jushg"},"content":"            patientList.addPerson(patient);","lastModifiedDate":"2021-11-02"},{"lineNumber":300,"author":{"gitId":"jushg"},"content":"            String patientInfo \u003d patient.toString();","lastModifiedDate":"2021-11-02"},{"lineNumber":301,"author":{"gitId":"justinfidelis"},"content":"            assertEquals(expectedOutput, PatientUi.getViewPatientMessage(patientInfo));","lastModifiedDate":"2021-11-07"},{"lineNumber":302,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":303,"author":{"gitId":"jushg"},"content":"        } catch (MedBotException e) {","lastModifiedDate":"2021-11-02"},{"lineNumber":304,"author":{"gitId":"jushg"},"content":"            fail();","lastModifiedDate":"2021-11-02"},{"lineNumber":305,"author":{"gitId":"jushg"},"content":"        }","lastModifiedDate":"2021-11-02"},{"lineNumber":306,"author":{"gitId":"EricBryann"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":307,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":308,"author":{"gitId":"EricBryann"},"content":"    @Test","lastModifiedDate":"2021-11-01"},{"lineNumber":309,"author":{"gitId":"EricBryann"},"content":"    public void testGetStaffInfoMessage_staffExists_Success() {","lastModifiedDate":"2021-11-03"},{"lineNumber":310,"author":{"gitId":"EricBryann"},"content":"        MedicalStaffList staffList \u003d new MedicalStaffList();","lastModifiedDate":"2021-11-01"},{"lineNumber":311,"author":{"gitId":"EricBryann"},"content":"        Staff staff \u003d new Staff();","lastModifiedDate":"2021-11-01"},{"lineNumber":312,"author":{"gitId":"EricBryann"},"content":"        staff.setName(\"John Doe\");","lastModifiedDate":"2021-11-01"},{"lineNumber":313,"author":{"gitId":"EricBryann"},"content":"        staff.setEmailAddress(\"John@gmail.com\");","lastModifiedDate":"2021-11-01"},{"lineNumber":314,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":315,"author":{"gitId":"justinfidelis"},"content":"        String expectedOutput \u003d \"Here\u0027s the requested staff information:\" + END_LINE + END_LINE","lastModifiedDate":"2021-11-08"},{"lineNumber":316,"author":{"gitId":"EricBryann"},"content":"                + \"Staff ID: 1 \" + END_LINE","lastModifiedDate":"2021-11-01"},{"lineNumber":317,"author":{"gitId":"EricBryann"},"content":"                + \"IC: \" + END_LINE","lastModifiedDate":"2021-11-01"},{"lineNumber":318,"author":{"gitId":"EricBryann"},"content":"                + \"Name: John Doe\" + END_LINE","lastModifiedDate":"2021-11-01"},{"lineNumber":319,"author":{"gitId":"EricBryann"},"content":"                + \"H/P: \" + END_LINE","lastModifiedDate":"2021-11-01"},{"lineNumber":320,"author":{"gitId":"EricBryann"},"content":"                + \"Email: John@gmail.com\" + END_LINE","lastModifiedDate":"2021-11-01"},{"lineNumber":321,"author":{"gitId":"EricBryann"},"content":"                + \"Address: \" + END_LINE;","lastModifiedDate":"2021-11-01"},{"lineNumber":322,"author":{"gitId":"jushg"},"content":"        try {","lastModifiedDate":"2021-11-02"},{"lineNumber":323,"author":{"gitId":"jushg"},"content":"            staffList.addPerson(staff);","lastModifiedDate":"2021-11-02"},{"lineNumber":324,"author":{"gitId":"jushg"},"content":"            String staffInfo \u003d staff.toString();","lastModifiedDate":"2021-11-02"},{"lineNumber":325,"author":{"gitId":"justinfidelis"},"content":"            assertEquals(expectedOutput, StaffUi.getViewStaffMessage(staffInfo));","lastModifiedDate":"2021-11-07"},{"lineNumber":326,"author":{"gitId":"jushg"},"content":"        } catch (MedBotException e) {","lastModifiedDate":"2021-11-02"},{"lineNumber":327,"author":{"gitId":"jushg"},"content":"            fail();","lastModifiedDate":"2021-11-02"},{"lineNumber":328,"author":{"gitId":"jushg"},"content":"        }","lastModifiedDate":"2021-11-02"},{"lineNumber":329,"author":{"gitId":"EricBryann"},"content":"    }","lastModifiedDate":"2021-11-01"},{"lineNumber":330,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":331,"author":{"gitId":"EricBryann"},"content":"    @Test","lastModifiedDate":"2021-10-06"},{"lineNumber":332,"author":{"gitId":"EricBryann"},"content":"    public void testGetAllPatientsMessage() {","lastModifiedDate":"2021-10-06"},{"lineNumber":333,"author":{"gitId":"EricBryann"},"content":"        PatientList patientList \u003d new PatientList();","lastModifiedDate":"2021-10-06"},{"lineNumber":334,"author":{"gitId":"Kureans"},"content":"        Patient patient1 \u003d new Patient();","lastModifiedDate":"2021-10-07"},{"lineNumber":335,"author":{"gitId":"Kureans"},"content":"        patient1.setName(\"John Doe\");","lastModifiedDate":"2021-10-07"},{"lineNumber":336,"author":{"gitId":"Kureans"},"content":"        patient1.setEmailAddress(\"John@gmail.com\");","lastModifiedDate":"2021-10-07"},{"lineNumber":337,"author":{"gitId":"EricBryann"},"content":"        Patient patient2 \u003d new Patient();","lastModifiedDate":"2021-10-06"},{"lineNumber":338,"author":{"gitId":"Kureans"},"content":"        patient2.setName(\"Bob\");","lastModifiedDate":"2021-10-07"},{"lineNumber":339,"author":{"gitId":"Kureans"},"content":"        patient2.setPhoneNumber(\"88889999\");","lastModifiedDate":"2021-10-07"},{"lineNumber":340,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":341,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":342,"author":{"gitId":"EricBryann"},"content":"        String expectedOutput \u003d","lastModifiedDate":"2021-10-19"},{"lineNumber":343,"author":{"gitId":"jushg"},"content":"            \"Here is a list of all patients:\" + END_LINE","lastModifiedDate":"2021-10-22"},{"lineNumber":344,"author":{"gitId":"jushg"},"content":"            + \"For full details of each patient, please use the command \\\"view PATIENT_ID\\\"\" + END_LINE","lastModifiedDate":"2021-10-22"},{"lineNumber":345,"author":{"gitId":"EricBryann"},"content":"            + \" ----------------------------------------------------------------------------------------------------- \"","lastModifiedDate":"2021-10-19"},{"lineNumber":346,"author":{"gitId":"jushg"},"content":"            + END_LINE","lastModifiedDate":"2021-10-22"},{"lineNumber":347,"author":{"gitId":"EricBryann"},"content":"            + \" |  ID  | IC Number |         Name         | Phone No. |        Email         |       Address        | \"","lastModifiedDate":"2021-10-19"},{"lineNumber":348,"author":{"gitId":"jushg"},"content":"            + END_LINE","lastModifiedDate":"2021-10-22"},{"lineNumber":349,"author":{"gitId":"EricBryann"},"content":"            + \" ----------------------------------------------------------------------------------------------------- \"","lastModifiedDate":"2021-10-19"},{"lineNumber":350,"author":{"gitId":"jushg"},"content":"            + END_LINE","lastModifiedDate":"2021-10-22"},{"lineNumber":351,"author":{"gitId":"EricBryann"},"content":"            + \" | 1    |           | John Doe             |           | John@gmail.com       |                      | \"","lastModifiedDate":"2021-10-19"},{"lineNumber":352,"author":{"gitId":"jushg"},"content":"            + END_LINE","lastModifiedDate":"2021-10-22"},{"lineNumber":353,"author":{"gitId":"EricBryann"},"content":"            + \" | 2    |           | Bob                  | 88889999  |                      |                      | \"","lastModifiedDate":"2021-10-19"},{"lineNumber":354,"author":{"gitId":"jushg"},"content":"            + END_LINE","lastModifiedDate":"2021-10-22"},{"lineNumber":355,"author":{"gitId":"EricBryann"},"content":"            + \" ----------------------------------------------------------------------------------------------------- \"","lastModifiedDate":"2021-10-19"},{"lineNumber":356,"author":{"gitId":"jushg"},"content":"            + END_LINE;","lastModifiedDate":"2021-10-22"},{"lineNumber":357,"author":{"gitId":"jushg"},"content":"        try {","lastModifiedDate":"2021-11-02"},{"lineNumber":358,"author":{"gitId":"jushg"},"content":"            patientList.addPerson(patient1);","lastModifiedDate":"2021-11-02"},{"lineNumber":359,"author":{"gitId":"jushg"},"content":"            patientList.addPerson(patient2);","lastModifiedDate":"2021-11-02"},{"lineNumber":360,"author":{"gitId":"EricBryann"},"content":"            assertEquals(expectedOutput, PatientUi.getAllPatientsString(patientList.listPersons(false)));","lastModifiedDate":"2021-11-01"},{"lineNumber":361,"author":{"gitId":"jushg"},"content":"        } catch (MedBotException e) {","lastModifiedDate":"2021-11-02"},{"lineNumber":362,"author":{"gitId":"jushg"},"content":"            fail();","lastModifiedDate":"2021-11-02"},{"lineNumber":363,"author":{"gitId":"jushg"},"content":"        }","lastModifiedDate":"2021-11-02"},{"lineNumber":364,"author":{"gitId":"EricBryann"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":365,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":366,"author":{"gitId":"EricBryann"},"content":"    @Test","lastModifiedDate":"2021-11-01"},{"lineNumber":367,"author":{"gitId":"EricBryann"},"content":"    public void testGetAllStaffsMessage() {","lastModifiedDate":"2021-11-01"},{"lineNumber":368,"author":{"gitId":"EricBryann"},"content":"        MedicalStaffList staffList \u003d new MedicalStaffList();","lastModifiedDate":"2021-11-01"},{"lineNumber":369,"author":{"gitId":"EricBryann"},"content":"        Staff staff1 \u003d new Staff();","lastModifiedDate":"2021-11-01"},{"lineNumber":370,"author":{"gitId":"EricBryann"},"content":"        staff1.setName(\"John Doe\");","lastModifiedDate":"2021-11-01"},{"lineNumber":371,"author":{"gitId":"EricBryann"},"content":"        staff1.setEmailAddress(\"John@gmail.com\");","lastModifiedDate":"2021-11-01"},{"lineNumber":372,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":373,"author":{"gitId":"EricBryann"},"content":"        Staff staff2 \u003d new Staff();","lastModifiedDate":"2021-11-01"},{"lineNumber":374,"author":{"gitId":"EricBryann"},"content":"        staff2.setName(\"Bob\");","lastModifiedDate":"2021-11-01"},{"lineNumber":375,"author":{"gitId":"EricBryann"},"content":"        staff2.setPhoneNumber(\"88889999\");","lastModifiedDate":"2021-11-01"},{"lineNumber":376,"author":{"gitId":"EricBryann"},"content":"        String expectedOutput \u003d","lastModifiedDate":"2021-11-01"},{"lineNumber":377,"author":{"gitId":"EricBryann"},"content":"            \"Here is a list of all staffs:\" + END_LINE","lastModifiedDate":"2021-11-01"},{"lineNumber":378,"author":{"gitId":"EricBryann"},"content":"                    + \"For full details of each staff, please use the command \\\"view STAFF_ID\\\"\" + END_LINE","lastModifiedDate":"2021-11-01"},{"lineNumber":379,"author":{"gitId":"EricBryann"},"content":"                    + \" -------------------------------------------------------------\"","lastModifiedDate":"2021-11-01"},{"lineNumber":380,"author":{"gitId":"EricBryann"},"content":"                    + \"---------------------------------------- \"","lastModifiedDate":"2021-11-01"},{"lineNumber":381,"author":{"gitId":"EricBryann"},"content":"                    + END_LINE","lastModifiedDate":"2021-11-01"},{"lineNumber":382,"author":{"gitId":"EricBryann"},"content":"                    + \" |  ID  | IC Number |         Name         | Phone No. |    \"","lastModifiedDate":"2021-11-01"},{"lineNumber":383,"author":{"gitId":"EricBryann"},"content":"                    + \"    Email         |       Address        | \"","lastModifiedDate":"2021-11-01"},{"lineNumber":384,"author":{"gitId":"EricBryann"},"content":"                    + END_LINE","lastModifiedDate":"2021-11-01"},{"lineNumber":385,"author":{"gitId":"EricBryann"},"content":"                    + \" --------------------------------------------------------------\"","lastModifiedDate":"2021-11-01"},{"lineNumber":386,"author":{"gitId":"EricBryann"},"content":"                    + \"--------------------------------------- \"","lastModifiedDate":"2021-11-01"},{"lineNumber":387,"author":{"gitId":"EricBryann"},"content":"                    + END_LINE","lastModifiedDate":"2021-11-01"},{"lineNumber":388,"author":{"gitId":"EricBryann"},"content":"                    + \" | 1    |           | John Doe             |           | \"","lastModifiedDate":"2021-11-01"},{"lineNumber":389,"author":{"gitId":"EricBryann"},"content":"                    + \"John@gmail.com       |                      | \"","lastModifiedDate":"2021-11-01"},{"lineNumber":390,"author":{"gitId":"EricBryann"},"content":"                    + END_LINE","lastModifiedDate":"2021-11-01"},{"lineNumber":391,"author":{"gitId":"EricBryann"},"content":"                    + \" | 2    |           | Bob                  | 88889999  |      \"","lastModifiedDate":"2021-11-01"},{"lineNumber":392,"author":{"gitId":"EricBryann"},"content":"                    + \"                |                      | \"","lastModifiedDate":"2021-11-01"},{"lineNumber":393,"author":{"gitId":"EricBryann"},"content":"                    + END_LINE","lastModifiedDate":"2021-11-01"},{"lineNumber":394,"author":{"gitId":"EricBryann"},"content":"                    + \" ------------------------------------------------------\"","lastModifiedDate":"2021-11-01"},{"lineNumber":395,"author":{"gitId":"EricBryann"},"content":"                    + \"----------------------------------------------- \"","lastModifiedDate":"2021-11-01"},{"lineNumber":396,"author":{"gitId":"EricBryann"},"content":"                    + END_LINE;","lastModifiedDate":"2021-11-01"},{"lineNumber":397,"author":{"gitId":"jushg"},"content":"        try {","lastModifiedDate":"2021-11-02"},{"lineNumber":398,"author":{"gitId":"jushg"},"content":"            staffList.addPerson(staff1);","lastModifiedDate":"2021-11-02"},{"lineNumber":399,"author":{"gitId":"jushg"},"content":"            staffList.addPerson(staff2);","lastModifiedDate":"2021-11-02"},{"lineNumber":400,"author":{"gitId":"EricBryann"},"content":"            assertEquals(expectedOutput, StaffUi.getAllStaffsString(staffList.listPersons(false)));","lastModifiedDate":"2021-11-01"},{"lineNumber":401,"author":{"gitId":"jushg"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":402,"author":{"gitId":"jushg"},"content":"        } catch (MedBotException e) {","lastModifiedDate":"2021-11-02"},{"lineNumber":403,"author":{"gitId":"jushg"},"content":"            fail();","lastModifiedDate":"2021-11-02"},{"lineNumber":404,"author":{"gitId":"jushg"},"content":"        }","lastModifiedDate":"2021-11-02"},{"lineNumber":405,"author":{"gitId":"EricBryann"},"content":"    }","lastModifiedDate":"2021-11-01"},{"lineNumber":406,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":407,"author":{"gitId":"Kureans"},"content":"    @Test","lastModifiedDate":"2021-10-07"},{"lineNumber":408,"author":{"gitId":"justinfidelis"},"content":"    public void testGetPatientCommandListMessage() {","lastModifiedDate":"2021-10-25"},{"lineNumber":409,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":410,"author":{"gitId":"justinfidelis"},"content":"        String expectedOutput \u003d \"Here is the list of commands:\" + END_LINE + END_LINE","lastModifiedDate":"2021-11-07"},{"lineNumber":411,"author":{"gitId":"justinfidelis"},"content":"                + \"help\" + END_LINE","lastModifiedDate":"2021-11-07"},{"lineNumber":412,"author":{"gitId":"justinfidelis"},"content":"                + \"add\" + END_LINE","lastModifiedDate":"2021-11-07"},{"lineNumber":413,"author":{"gitId":"justinfidelis"},"content":"                + \"delete\" + END_LINE","lastModifiedDate":"2021-11-07"},{"lineNumber":414,"author":{"gitId":"justinfidelis"},"content":"                + \"edit\" + END_LINE","lastModifiedDate":"2021-11-07"},{"lineNumber":415,"author":{"gitId":"justinfidelis"},"content":"                + \"view\" + END_LINE","lastModifiedDate":"2021-11-07"},{"lineNumber":416,"author":{"gitId":"justinfidelis"},"content":"                + \"list\" + END_LINE","lastModifiedDate":"2021-11-07"},{"lineNumber":417,"author":{"gitId":"justinfidelis"},"content":"                + \"find\" + END_LINE","lastModifiedDate":"2021-11-07"},{"lineNumber":418,"author":{"gitId":"justinfidelis"},"content":"                + \"hide\" + END_LINE","lastModifiedDate":"2021-11-07"},{"lineNumber":419,"author":{"gitId":"justinfidelis"},"content":"                + \"show\" + END_LINE","lastModifiedDate":"2021-11-07"},{"lineNumber":420,"author":{"gitId":"justinfidelis"},"content":"                + \"switch\" + END_LINE","lastModifiedDate":"2021-11-07"},{"lineNumber":421,"author":{"gitId":"justinfidelis"},"content":"                + \"get view\" + END_LINE","lastModifiedDate":"2021-11-07"},{"lineNumber":422,"author":{"gitId":"justinfidelis"},"content":"                + \"exit\" + END_LINE + END_LINE","lastModifiedDate":"2021-11-07"},{"lineNumber":423,"author":{"gitId":"justinfidelis"},"content":"                + \"To view more information about each command and their respective command formats, type:\" + END_LINE","lastModifiedDate":"2021-11-07"},{"lineNumber":424,"author":{"gitId":"jushg"},"content":"                + \"help [COMMAND]\" + END_LINE + END_LINE","lastModifiedDate":"2021-10-22"},{"lineNumber":425,"author":{"gitId":"justinfidelis"},"content":"                + \"*Note that all commands will remove any \u0027|\u0027 inputs for format parsing purposes.\" + END_LINE","lastModifiedDate":"2021-11-07"},{"lineNumber":426,"author":{"gitId":"justinfidelis"},"content":"                + \"For expected output examples, please refer to the User Guide.\" + END_LINE;","lastModifiedDate":"2021-11-07"},{"lineNumber":427,"author":{"gitId":"Kureans"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":428,"author":{"gitId":"justinfidelis"},"content":"        try {","lastModifiedDate":"2021-10-25"},{"lineNumber":429,"author":{"gitId":"EricBryann"},"content":"            assertEquals(expectedOutput, Ui.getCommandList(ViewType.PATIENT_INFO));","lastModifiedDate":"2021-11-01"},{"lineNumber":430,"author":{"gitId":"justinfidelis"},"content":"        } catch (MedBotException mbe) {","lastModifiedDate":"2021-10-25"},{"lineNumber":431,"author":{"gitId":"justinfidelis"},"content":"            fail();","lastModifiedDate":"2021-10-25"},{"lineNumber":432,"author":{"gitId":"justinfidelis"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":433,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":434,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":435,"author":{"gitId":"justinfidelis"},"content":"    @Test","lastModifiedDate":"2021-10-25"},{"lineNumber":436,"author":{"gitId":"justinfidelis"},"content":"    public void testGetStaffCommandListMessage() {","lastModifiedDate":"2021-10-25"},{"lineNumber":437,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":438,"author":{"gitId":"justinfidelis"},"content":"        String expectedOutput \u003d \"Here is the list of commands:\" + END_LINE + END_LINE","lastModifiedDate":"2021-11-07"},{"lineNumber":439,"author":{"gitId":"justinfidelis"},"content":"                + \"help\" + END_LINE","lastModifiedDate":"2021-11-07"},{"lineNumber":440,"author":{"gitId":"justinfidelis"},"content":"                + \"add\" + END_LINE","lastModifiedDate":"2021-11-07"},{"lineNumber":441,"author":{"gitId":"justinfidelis"},"content":"                + \"delete\" + END_LINE","lastModifiedDate":"2021-11-07"},{"lineNumber":442,"author":{"gitId":"justinfidelis"},"content":"                + \"edit\" + END_LINE","lastModifiedDate":"2021-11-07"},{"lineNumber":443,"author":{"gitId":"justinfidelis"},"content":"                + \"view\" + END_LINE","lastModifiedDate":"2021-11-07"},{"lineNumber":444,"author":{"gitId":"justinfidelis"},"content":"                + \"list\" + END_LINE","lastModifiedDate":"2021-11-07"},{"lineNumber":445,"author":{"gitId":"justinfidelis"},"content":"                + \"find\" + END_LINE","lastModifiedDate":"2021-11-07"},{"lineNumber":446,"author":{"gitId":"justinfidelis"},"content":"                + \"hide\" + END_LINE","lastModifiedDate":"2021-11-07"},{"lineNumber":447,"author":{"gitId":"justinfidelis"},"content":"                + \"show\" + END_LINE","lastModifiedDate":"2021-11-07"},{"lineNumber":448,"author":{"gitId":"justinfidelis"},"content":"                + \"switch\" + END_LINE","lastModifiedDate":"2021-11-07"},{"lineNumber":449,"author":{"gitId":"justinfidelis"},"content":"                + \"get view\" + END_LINE","lastModifiedDate":"2021-11-07"},{"lineNumber":450,"author":{"gitId":"justinfidelis"},"content":"                + \"exit\" + END_LINE + END_LINE","lastModifiedDate":"2021-11-07"},{"lineNumber":451,"author":{"gitId":"justinfidelis"},"content":"                + \"To view more information about each command and their respective command formats, type:\" + END_LINE","lastModifiedDate":"2021-11-07"},{"lineNumber":452,"author":{"gitId":"justinfidelis"},"content":"                + \"help [COMMAND]\" + END_LINE + END_LINE","lastModifiedDate":"2021-10-25"},{"lineNumber":453,"author":{"gitId":"justinfidelis"},"content":"                + \"*Note that all commands will remove any \u0027|\u0027 inputs for format parsing purposes.\" + END_LINE","lastModifiedDate":"2021-11-07"},{"lineNumber":454,"author":{"gitId":"justinfidelis"},"content":"                + \"For expected output examples, please refer to the User Guide.\" + END_LINE;","lastModifiedDate":"2021-11-07"},{"lineNumber":455,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":456,"author":{"gitId":"justinfidelis"},"content":"        try {","lastModifiedDate":"2021-10-25"},{"lineNumber":457,"author":{"gitId":"EricBryann"},"content":"            assertEquals(expectedOutput, Ui.getCommandList(ViewType.MEDICAL_STAFF_INFO));","lastModifiedDate":"2021-11-01"},{"lineNumber":458,"author":{"gitId":"justinfidelis"},"content":"        } catch (MedBotException mbe) {","lastModifiedDate":"2021-10-25"},{"lineNumber":459,"author":{"gitId":"justinfidelis"},"content":"            fail();","lastModifiedDate":"2021-10-25"},{"lineNumber":460,"author":{"gitId":"justinfidelis"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":461,"author":{"gitId":"justinfidelis"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":462,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":463,"author":{"gitId":"justinfidelis"},"content":"    @Test","lastModifiedDate":"2021-10-25"},{"lineNumber":464,"author":{"gitId":"justinfidelis"},"content":"    public void testGetSchedulerCommandListMessage() {","lastModifiedDate":"2021-10-25"},{"lineNumber":465,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":466,"author":{"gitId":"justinfidelis"},"content":"        String expectedOutput \u003d \"Here is the list of commands:\" + END_LINE + END_LINE","lastModifiedDate":"2021-11-07"},{"lineNumber":467,"author":{"gitId":"justinfidelis"},"content":"                + \"help\" + END_LINE","lastModifiedDate":"2021-11-07"},{"lineNumber":468,"author":{"gitId":"justinfidelis"},"content":"                + \"add\" + END_LINE","lastModifiedDate":"2021-11-07"},{"lineNumber":469,"author":{"gitId":"justinfidelis"},"content":"                + \"delete\" + END_LINE","lastModifiedDate":"2021-11-07"},{"lineNumber":470,"author":{"gitId":"justinfidelis"},"content":"                + \"edit\" + END_LINE","lastModifiedDate":"2021-11-07"},{"lineNumber":471,"author":{"gitId":"justinfidelis"},"content":"                + \"view\" + END_LINE","lastModifiedDate":"2021-11-07"},{"lineNumber":472,"author":{"gitId":"justinfidelis"},"content":"                + \"list\" + END_LINE","lastModifiedDate":"2021-11-07"},{"lineNumber":473,"author":{"gitId":"justinfidelis"},"content":"                + \"find\" + END_LINE","lastModifiedDate":"2021-11-07"},{"lineNumber":474,"author":{"gitId":"justinfidelis"},"content":"                + \"switch\" + END_LINE","lastModifiedDate":"2021-11-07"},{"lineNumber":475,"author":{"gitId":"justinfidelis"},"content":"                + \"get view\" + END_LINE","lastModifiedDate":"2021-11-07"},{"lineNumber":476,"author":{"gitId":"justinfidelis"},"content":"                + \"exit\" + END_LINE + END_LINE","lastModifiedDate":"2021-11-07"},{"lineNumber":477,"author":{"gitId":"justinfidelis"},"content":"                + \"To view more information about each command and their respective command formats, type:\" + END_LINE","lastModifiedDate":"2021-11-07"},{"lineNumber":478,"author":{"gitId":"justinfidelis"},"content":"                + \"help [COMMAND]\" + END_LINE + END_LINE","lastModifiedDate":"2021-11-07"},{"lineNumber":479,"author":{"gitId":"justinfidelis"},"content":"                + \"*Note that all commands will remove any \u0027|\u0027 inputs for format parsing purposes.\" + END_LINE","lastModifiedDate":"2021-11-07"},{"lineNumber":480,"author":{"gitId":"justinfidelis"},"content":"                + \"For expected output examples, please refer to the actual user guide.\" + END_LINE;","lastModifiedDate":"2021-11-07"},{"lineNumber":481,"author":{"gitId":"justinfidelis"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":482,"author":{"gitId":"justinfidelis"},"content":"        try {","lastModifiedDate":"2021-10-25"},{"lineNumber":483,"author":{"gitId":"EricBryann"},"content":"            assertEquals(expectedOutput, Ui.getCommandList(ViewType.SCHEDULER));","lastModifiedDate":"2021-11-01"},{"lineNumber":484,"author":{"gitId":"justinfidelis"},"content":"        } catch (MedBotException mbe) {","lastModifiedDate":"2021-10-25"},{"lineNumber":485,"author":{"gitId":"jushg"},"content":"            fail(\"Can\u0027t get the command list\");","lastModifiedDate":"2021-11-03"},{"lineNumber":486,"author":{"gitId":"justinfidelis"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":487,"author":{"gitId":"Kureans"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":488,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":489,"author":{"gitId":"EricBryann"},"content":"    @Test","lastModifiedDate":"2021-11-01"},{"lineNumber":490,"author":{"gitId":"EricBryann"},"content":"    public void testGetFindCommandPatientMessage() {","lastModifiedDate":"2021-11-01"},{"lineNumber":491,"author":{"gitId":"EricBryann"},"content":"        PatientList patientList \u003d new PatientList();","lastModifiedDate":"2021-11-01"},{"lineNumber":492,"author":{"gitId":"EricBryann"},"content":"        Patient patient1 \u003d new Patient();","lastModifiedDate":"2021-11-01"},{"lineNumber":493,"author":{"gitId":"EricBryann"},"content":"        patient1.setName(\"John Doe\");","lastModifiedDate":"2021-11-01"},{"lineNumber":494,"author":{"gitId":"EricBryann"},"content":"        patient1.setEmailAddress(\"John@gmail.com\");","lastModifiedDate":"2021-11-01"},{"lineNumber":495,"author":{"gitId":"EricBryann"},"content":"        Patient patient2 \u003d new Patient();","lastModifiedDate":"2021-11-01"},{"lineNumber":496,"author":{"gitId":"EricBryann"},"content":"        patient2.setName(\"Bob\");","lastModifiedDate":"2021-11-01"},{"lineNumber":497,"author":{"gitId":"EricBryann"},"content":"        patient2.setPhoneNumber(\"88889999\");","lastModifiedDate":"2021-11-01"},{"lineNumber":498,"author":{"gitId":"EricBryann"},"content":"        String expectedOutput \u003d","lastModifiedDate":"2021-11-01"},{"lineNumber":499,"author":{"gitId":"EricBryann"},"content":"            \"Here is a list of all patients:\" + END_LINE","lastModifiedDate":"2021-11-01"},{"lineNumber":500,"author":{"gitId":"EricBryann"},"content":"            + \"For full details of each patient, please use the command \\\"view PATIENT_ID\\\"\" + END_LINE","lastModifiedDate":"2021-11-01"},{"lineNumber":501,"author":{"gitId":"EricBryann"},"content":"            + \" ----------------------------------------------------------------------------------------------------- \"","lastModifiedDate":"2021-11-01"},{"lineNumber":502,"author":{"gitId":"EricBryann"},"content":"            + END_LINE","lastModifiedDate":"2021-11-01"},{"lineNumber":503,"author":{"gitId":"EricBryann"},"content":"            + \" |  ID  | IC Number |         Name         | Phone No. |        Email         |       Address        | \"","lastModifiedDate":"2021-11-01"},{"lineNumber":504,"author":{"gitId":"EricBryann"},"content":"            + END_LINE","lastModifiedDate":"2021-11-01"},{"lineNumber":505,"author":{"gitId":"EricBryann"},"content":"            + \" ----------------------------------------------------------------------------------------------------- \"","lastModifiedDate":"2021-11-01"},{"lineNumber":506,"author":{"gitId":"EricBryann"},"content":"            + END_LINE","lastModifiedDate":"2021-11-01"},{"lineNumber":507,"author":{"gitId":"EricBryann"},"content":"            + \" | 2    |           | Bob                  | 88889999  |                      |                      | \"","lastModifiedDate":"2021-11-01"},{"lineNumber":508,"author":{"gitId":"EricBryann"},"content":"            + END_LINE","lastModifiedDate":"2021-11-01"},{"lineNumber":509,"author":{"gitId":"EricBryann"},"content":"            + \" ----------------------------------------------------------------------------------------------------- \"","lastModifiedDate":"2021-11-01"},{"lineNumber":510,"author":{"gitId":"EricBryann"},"content":"            + END_LINE;","lastModifiedDate":"2021-11-01"},{"lineNumber":511,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":512,"author":{"gitId":"EricBryann"},"content":"        String[] parameters \u003d {\"n/Bob\"};","lastModifiedDate":"2021-11-01"},{"lineNumber":513,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":514,"author":{"gitId":"EricBryann"},"content":"        try {","lastModifiedDate":"2021-11-01"},{"lineNumber":515,"author":{"gitId":"jushg"},"content":"            patientList.addPerson(patient1);","lastModifiedDate":"2021-11-02"},{"lineNumber":516,"author":{"gitId":"jushg"},"content":"            patientList.addPerson(patient2);","lastModifiedDate":"2021-11-02"},{"lineNumber":517,"author":{"gitId":"EricBryann"},"content":"            List\u003cString\u003e params \u003d patientList.findPersons(parameters);","lastModifiedDate":"2021-11-02"},{"lineNumber":518,"author":{"gitId":"EricBryann"},"content":"            assertEquals(Ui.getFindPersonsMessage(params, ViewType.PATIENT_INFO), expectedOutput);","lastModifiedDate":"2021-11-01"},{"lineNumber":519,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":520,"author":{"gitId":"jushg"},"content":"        } catch (MedBotException e) {","lastModifiedDate":"2021-11-02"},{"lineNumber":521,"author":{"gitId":"jushg"},"content":"            fail(\"Can\u0027t add the person to the list\");","lastModifiedDate":"2021-11-03"},{"lineNumber":522,"author":{"gitId":"jushg"},"content":"        }","lastModifiedDate":"2021-11-02"},{"lineNumber":523,"author":{"gitId":"jushg"},"content":"        try {","lastModifiedDate":"2021-11-02"},{"lineNumber":524,"author":{"gitId":"EricBryann"},"content":"            String[] newParameters \u003d {\"n/Bob\", \"z/test\"};","lastModifiedDate":"2021-11-02"},{"lineNumber":525,"author":{"gitId":"EricBryann"},"content":"            patientList.findPersons(newParameters);","lastModifiedDate":"2021-11-02"},{"lineNumber":526,"author":{"gitId":"EricBryann"},"content":"        } catch (MedBotException e) {","lastModifiedDate":"2021-11-01"},{"lineNumber":527,"author":{"gitId":"EricBryann"},"content":"            assertEquals(\"The specifier z/ is invalid.\", e.getMessage());","lastModifiedDate":"2021-11-02"},{"lineNumber":528,"author":{"gitId":"EricBryann"},"content":"        }","lastModifiedDate":"2021-11-01"},{"lineNumber":529,"author":{"gitId":"EricBryann"},"content":"    }","lastModifiedDate":"2021-11-01"},{"lineNumber":530,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":531,"author":{"gitId":"EricBryann"},"content":"    @Test","lastModifiedDate":"2021-11-01"},{"lineNumber":532,"author":{"gitId":"EricBryann"},"content":"    public void testGetFindCommandStaffMessage() {","lastModifiedDate":"2021-11-01"},{"lineNumber":533,"author":{"gitId":"EricBryann"},"content":"        MedicalStaffList staffList \u003d new MedicalStaffList();","lastModifiedDate":"2021-11-01"},{"lineNumber":534,"author":{"gitId":"EricBryann"},"content":"        Staff staff1 \u003d new Staff();","lastModifiedDate":"2021-11-01"},{"lineNumber":535,"author":{"gitId":"EricBryann"},"content":"        staff1.setName(\"John Doe\");","lastModifiedDate":"2021-11-01"},{"lineNumber":536,"author":{"gitId":"EricBryann"},"content":"        staff1.setEmailAddress(\"John@gmail.com\");","lastModifiedDate":"2021-11-01"},{"lineNumber":537,"author":{"gitId":"EricBryann"},"content":"        Staff staff2 \u003d new Staff();","lastModifiedDate":"2021-11-01"},{"lineNumber":538,"author":{"gitId":"EricBryann"},"content":"        staff2.setName(\"Bob\");","lastModifiedDate":"2021-11-01"},{"lineNumber":539,"author":{"gitId":"EricBryann"},"content":"        staff2.setPhoneNumber(\"88889999\");","lastModifiedDate":"2021-11-01"},{"lineNumber":540,"author":{"gitId":"EricBryann"},"content":"        String expectedOutput \u003d","lastModifiedDate":"2021-11-01"},{"lineNumber":541,"author":{"gitId":"EricBryann"},"content":"                \"Here is a list of all staffs:\" + END_LINE","lastModifiedDate":"2021-11-01"},{"lineNumber":542,"author":{"gitId":"EricBryann"},"content":"                        + \"For full details of each staff, please use the command \\\"view STAFF_ID\\\"\" + END_LINE","lastModifiedDate":"2021-11-01"},{"lineNumber":543,"author":{"gitId":"EricBryann"},"content":"                        + \" -----------------------------------------\"","lastModifiedDate":"2021-11-01"},{"lineNumber":544,"author":{"gitId":"EricBryann"},"content":"                        + \"------------------------------------------------------------ \"","lastModifiedDate":"2021-11-01"},{"lineNumber":545,"author":{"gitId":"EricBryann"},"content":"                        + END_LINE","lastModifiedDate":"2021-11-01"},{"lineNumber":546,"author":{"gitId":"EricBryann"},"content":"                        + \" |  ID  | IC Number |         Name         \"","lastModifiedDate":"2021-11-01"},{"lineNumber":547,"author":{"gitId":"EricBryann"},"content":"                        + \"| Phone No. |        Email         |       Address        | \"","lastModifiedDate":"2021-11-01"},{"lineNumber":548,"author":{"gitId":"EricBryann"},"content":"                        + END_LINE","lastModifiedDate":"2021-11-01"},{"lineNumber":549,"author":{"gitId":"EricBryann"},"content":"                        + \" --------------------------------------------------\"","lastModifiedDate":"2021-11-01"},{"lineNumber":550,"author":{"gitId":"EricBryann"},"content":"                        + \"--------------------------------------------------- \"","lastModifiedDate":"2021-11-01"},{"lineNumber":551,"author":{"gitId":"EricBryann"},"content":"                        + END_LINE","lastModifiedDate":"2021-11-01"},{"lineNumber":552,"author":{"gitId":"EricBryann"},"content":"                        + \" | 2    |           | Bob                  | 88889999  \"","lastModifiedDate":"2021-11-01"},{"lineNumber":553,"author":{"gitId":"EricBryann"},"content":"                        + \"|                      |                      | \"","lastModifiedDate":"2021-11-01"},{"lineNumber":554,"author":{"gitId":"EricBryann"},"content":"                        + END_LINE","lastModifiedDate":"2021-11-01"},{"lineNumber":555,"author":{"gitId":"EricBryann"},"content":"                        + \" -----------------------------------------------\"","lastModifiedDate":"2021-11-01"},{"lineNumber":556,"author":{"gitId":"EricBryann"},"content":"                        + \"------------------------------------------------------ \"","lastModifiedDate":"2021-11-01"},{"lineNumber":557,"author":{"gitId":"EricBryann"},"content":"                        + END_LINE;","lastModifiedDate":"2021-11-01"},{"lineNumber":558,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":559,"author":{"gitId":"EricBryann"},"content":"        String[] parameters \u003d {\"n/Bob\"};","lastModifiedDate":"2021-11-01"},{"lineNumber":560,"author":{"gitId":"EricBryann"},"content":"        try {","lastModifiedDate":"2021-11-01"},{"lineNumber":561,"author":{"gitId":"jushg"},"content":"            staffList.addPerson(staff1);","lastModifiedDate":"2021-11-02"},{"lineNumber":562,"author":{"gitId":"jushg"},"content":"            staffList.addPerson(staff2);","lastModifiedDate":"2021-11-02"},{"lineNumber":563,"author":{"gitId":"EricBryann"},"content":"            List\u003cString\u003e params \u003d staffList.findPersons(parameters);","lastModifiedDate":"2021-11-02"},{"lineNumber":564,"author":{"gitId":"EricBryann"},"content":"            assertEquals(Ui.getFindPersonsMessage(params, ViewType.MEDICAL_STAFF_INFO), expectedOutput);","lastModifiedDate":"2021-11-01"},{"lineNumber":565,"author":{"gitId":"jushg"},"content":"        } catch (MedBotException e) {","lastModifiedDate":"2021-11-02"},{"lineNumber":566,"author":{"gitId":"jushg"},"content":"            fail();","lastModifiedDate":"2021-11-02"},{"lineNumber":567,"author":{"gitId":"jushg"},"content":"        }","lastModifiedDate":"2021-11-02"},{"lineNumber":568,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":569,"author":{"gitId":"jushg"},"content":"        try {","lastModifiedDate":"2021-11-02"},{"lineNumber":570,"author":{"gitId":"EricBryann"},"content":"            String[] newParameters \u003d {\"n/Bob\", \"z/test\"};","lastModifiedDate":"2021-11-02"},{"lineNumber":571,"author":{"gitId":"EricBryann"},"content":"            staffList.findPersons(newParameters);","lastModifiedDate":"2021-11-02"},{"lineNumber":572,"author":{"gitId":"EricBryann"},"content":"        } catch (MedBotException e) {","lastModifiedDate":"2021-11-01"},{"lineNumber":573,"author":{"gitId":"EricBryann"},"content":"            assertEquals(\"The specifier z/ is invalid.\", e.getMessage());","lastModifiedDate":"2021-11-02"},{"lineNumber":574,"author":{"gitId":"EricBryann"},"content":"        }","lastModifiedDate":"2021-11-01"},{"lineNumber":575,"author":{"gitId":"EricBryann"},"content":"    }","lastModifiedDate":"2021-11-01"},{"lineNumber":576,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":577,"author":{"gitId":"EricBryann"},"content":"    @Test","lastModifiedDate":"2021-11-01"},{"lineNumber":578,"author":{"gitId":"EricBryann"},"content":"    public void testGetHidePatientMessage() {","lastModifiedDate":"2021-11-02"},{"lineNumber":579,"author":{"gitId":"EricBryann"},"content":"        int patientId \u003d 1;","lastModifiedDate":"2021-11-01"},{"lineNumber":580,"author":{"gitId":"justinfidelis"},"content":"        String expectedOutput \u003d \"The patient with ID \" + patientId + \" is now hidden.\" + END_LINE;","lastModifiedDate":"2021-11-08"},{"lineNumber":581,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":582,"author":{"gitId":"EricBryann"},"content":"        try {","lastModifiedDate":"2021-11-01"},{"lineNumber":583,"author":{"gitId":"EricBryann"},"content":"            assertEquals(expectedOutput, Ui.getHidePersonMessage(patientId, ViewType.PATIENT_INFO));","lastModifiedDate":"2021-11-02"},{"lineNumber":584,"author":{"gitId":"EricBryann"},"content":"        } catch (MedBotException e) {","lastModifiedDate":"2021-11-01"},{"lineNumber":585,"author":{"gitId":"EricBryann"},"content":"            assertEquals(\"Cannot identify the current view type\" + END_LINE, e.getMessage());","lastModifiedDate":"2021-11-01"},{"lineNumber":586,"author":{"gitId":"EricBryann"},"content":"        }","lastModifiedDate":"2021-11-01"},{"lineNumber":587,"author":{"gitId":"EricBryann"},"content":"    }","lastModifiedDate":"2021-11-01"},{"lineNumber":588,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":589,"author":{"gitId":"EricBryann"},"content":"    @Test","lastModifiedDate":"2021-11-01"},{"lineNumber":590,"author":{"gitId":"EricBryann"},"content":"    public void testGetShowStaffMessage() {","lastModifiedDate":"2021-11-02"},{"lineNumber":591,"author":{"gitId":"EricBryann"},"content":"        int staffId \u003d 1;","lastModifiedDate":"2021-11-01"},{"lineNumber":592,"author":{"gitId":"justinfidelis"},"content":"        String expectedOutput \u003d \"The staff with ID \" + staffId + \" is now not hidden.\" + END_LINE;","lastModifiedDate":"2021-11-08"},{"lineNumber":593,"author":{"gitId":"EricBryann"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":594,"author":{"gitId":"EricBryann"},"content":"        try {","lastModifiedDate":"2021-11-01"},{"lineNumber":595,"author":{"gitId":"EricBryann"},"content":"            assertEquals(expectedOutput, Ui.getShowPersonMessage(staffId, ViewType.MEDICAL_STAFF_INFO));","lastModifiedDate":"2021-11-02"},{"lineNumber":596,"author":{"gitId":"EricBryann"},"content":"        } catch (MedBotException e) {","lastModifiedDate":"2021-11-01"},{"lineNumber":597,"author":{"gitId":"EricBryann"},"content":"            assertEquals(\"Cannot identify the current view type\" + END_LINE, e.getMessage());","lastModifiedDate":"2021-11-01"},{"lineNumber":598,"author":{"gitId":"EricBryann"},"content":"        }","lastModifiedDate":"2021-11-01"},{"lineNumber":599,"author":{"gitId":"EricBryann"},"content":"    }","lastModifiedDate":"2021-11-01"},{"lineNumber":600,"author":{"gitId":"EricBryann"},"content":"}","lastModifiedDate":"2021-10-06"}],"authorContributionMap":{"justinfidelis":131,"jushg":91,"EricBryann":368,"Kureans":10}},{"path":"src/test/java/medbot/storagetests/AppointmentStorageStub.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"CrimsonTitan79"},"content":"package medbot.storagetests;","lastModifiedDate":"2021-11-03"},{"lineNumber":2,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":3,"author":{"gitId":"CrimsonTitan79"},"content":"import medbot.exceptions.MedBotException;","lastModifiedDate":"2021-11-03"},{"lineNumber":4,"author":{"gitId":"CrimsonTitan79"},"content":"import medbot.storage.AppointmentStorage;","lastModifiedDate":"2021-11-03"},{"lineNumber":5,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":6,"author":{"gitId":"CrimsonTitan79"},"content":"public class AppointmentStorageStub extends AppointmentStorage {","lastModifiedDate":"2021-11-03"},{"lineNumber":7,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":8,"author":{"gitId":"CrimsonTitan79"},"content":"    public AppointmentStorageStub(String testDataPath) throws MedBotException {","lastModifiedDate":"2021-11-03"},{"lineNumber":9,"author":{"gitId":"CrimsonTitan79"},"content":"        super(testDataPath);","lastModifiedDate":"2021-11-03"},{"lineNumber":10,"author":{"gitId":"CrimsonTitan79"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":11,"author":{"gitId":"CrimsonTitan79"},"content":"}","lastModifiedDate":"2021-11-03"}],"authorContributionMap":{"CrimsonTitan79":11}},{"path":"src/test/java/medbot/storagetests/PatientStorageStub.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"CrimsonTitan79"},"content":"package medbot.storagetests;","lastModifiedDate":"2021-11-03"},{"lineNumber":2,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":3,"author":{"gitId":"CrimsonTitan79"},"content":"import medbot.exceptions.MedBotException;","lastModifiedDate":"2021-11-03"},{"lineNumber":4,"author":{"gitId":"CrimsonTitan79"},"content":"import medbot.storage.PatientStorage;","lastModifiedDate":"2021-11-03"},{"lineNumber":5,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":6,"author":{"gitId":"CrimsonTitan79"},"content":"public class PatientStorageStub extends PatientStorage {","lastModifiedDate":"2021-11-03"},{"lineNumber":7,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":8,"author":{"gitId":"CrimsonTitan79"},"content":"    public PatientStorageStub(String testDataPath) throws MedBotException {","lastModifiedDate":"2021-11-03"},{"lineNumber":9,"author":{"gitId":"CrimsonTitan79"},"content":"        super(testDataPath);","lastModifiedDate":"2021-11-03"},{"lineNumber":10,"author":{"gitId":"CrimsonTitan79"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":11,"author":{"gitId":"CrimsonTitan79"},"content":"}","lastModifiedDate":"2021-11-03"}],"authorContributionMap":{"CrimsonTitan79":11}},{"path":"src/test/java/medbot/storagetests/StaffStorageStub.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"CrimsonTitan79"},"content":"package medbot.storagetests;","lastModifiedDate":"2021-11-03"},{"lineNumber":2,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":3,"author":{"gitId":"CrimsonTitan79"},"content":"import medbot.exceptions.MedBotException;","lastModifiedDate":"2021-11-03"},{"lineNumber":4,"author":{"gitId":"CrimsonTitan79"},"content":"import medbot.storage.StaffStorage;","lastModifiedDate":"2021-11-03"},{"lineNumber":5,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":6,"author":{"gitId":"CrimsonTitan79"},"content":"public class StaffStorageStub extends StaffStorage {","lastModifiedDate":"2021-11-03"},{"lineNumber":7,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":8,"author":{"gitId":"CrimsonTitan79"},"content":"    public StaffStorageStub(String testDataPath) throws MedBotException {","lastModifiedDate":"2021-11-03"},{"lineNumber":9,"author":{"gitId":"CrimsonTitan79"},"content":"        super(testDataPath);","lastModifiedDate":"2021-11-03"},{"lineNumber":10,"author":{"gitId":"CrimsonTitan79"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":11,"author":{"gitId":"CrimsonTitan79"},"content":"}","lastModifiedDate":"2021-11-03"}],"authorContributionMap":{"CrimsonTitan79":11}},{"path":"src/test/java/medbot/storagetests/StorageTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"CrimsonTitan79"},"content":"package medbot.storagetests;","lastModifiedDate":"2021-11-03"},{"lineNumber":2,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":3,"author":{"gitId":"CrimsonTitan79"},"content":"import medbot.Appointment;","lastModifiedDate":"2021-11-03"},{"lineNumber":4,"author":{"gitId":"CrimsonTitan79"},"content":"import medbot.Scheduler;","lastModifiedDate":"2021-11-03"},{"lineNumber":5,"author":{"gitId":"CrimsonTitan79"},"content":"import medbot.exceptions.MedBotException;","lastModifiedDate":"2021-10-27"},{"lineNumber":6,"author":{"gitId":"CrimsonTitan79"},"content":"import medbot.list.ListItemType;","lastModifiedDate":"2021-10-27"},{"lineNumber":7,"author":{"gitId":"CrimsonTitan79"},"content":"import medbot.list.MedicalStaffList;","lastModifiedDate":"2021-10-27"},{"lineNumber":8,"author":{"gitId":"CrimsonTitan79"},"content":"import medbot.list.PatientList;","lastModifiedDate":"2021-10-27"},{"lineNumber":9,"author":{"gitId":"CrimsonTitan79"},"content":"import medbot.list.SchedulerAppointmentList;","lastModifiedDate":"2021-10-27"},{"lineNumber":10,"author":{"gitId":"CrimsonTitan79"},"content":"import medbot.person.Patient;","lastModifiedDate":"2021-10-27"},{"lineNumber":11,"author":{"gitId":"CrimsonTitan79"},"content":"import medbot.person.Person;","lastModifiedDate":"2021-10-27"},{"lineNumber":12,"author":{"gitId":"CrimsonTitan79"},"content":"import medbot.person.PersonType;","lastModifiedDate":"2021-10-27"},{"lineNumber":13,"author":{"gitId":"CrimsonTitan79"},"content":"import medbot.person.Staff;","lastModifiedDate":"2021-10-27"},{"lineNumber":14,"author":{"gitId":"CrimsonTitan79"},"content":"import medbot.storage.AppointmentStorage;","lastModifiedDate":"2021-10-27"},{"lineNumber":15,"author":{"gitId":"CrimsonTitan79"},"content":"import medbot.storage.PatientStorage;","lastModifiedDate":"2021-10-27"},{"lineNumber":16,"author":{"gitId":"CrimsonTitan79"},"content":"import medbot.storage.StaffStorage;","lastModifiedDate":"2021-10-27"},{"lineNumber":17,"author":{"gitId":"CrimsonTitan79"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-27"},{"lineNumber":18,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":19,"author":{"gitId":"CrimsonTitan79"},"content":"import java.io.File;","lastModifiedDate":"2021-10-27"},{"lineNumber":20,"author":{"gitId":"CrimsonTitan79"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2021-10-27"},{"lineNumber":21,"author":{"gitId":"CrimsonTitan79"},"content":"import java.io.IOException;","lastModifiedDate":"2021-11-02"},{"lineNumber":22,"author":{"gitId":"CrimsonTitan79"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-27"},{"lineNumber":23,"author":{"gitId":"CrimsonTitan79"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-10-27"},{"lineNumber":24,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":25,"author":{"gitId":"CrimsonTitan79"},"content":"import static medbot.parser.ParserUtils.updateAppointmentInformation;","lastModifiedDate":"2021-10-27"},{"lineNumber":26,"author":{"gitId":"CrimsonTitan79"},"content":"import static medbot.parser.ParserUtils.updatePersonalInformation;","lastModifiedDate":"2021-10-27"},{"lineNumber":27,"author":{"gitId":"CrimsonTitan79"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-27"},{"lineNumber":28,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":29,"author":{"gitId":"CrimsonTitan79"},"content":"class StorageTest {","lastModifiedDate":"2021-10-27"},{"lineNumber":30,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":31,"author":{"gitId":"CrimsonTitan79"},"content":"    private static final String PATIENT_DATA_INVALID \u003d \"src/test/data/StorageTest/patientData-invalid.txt\";","lastModifiedDate":"2021-10-27"},{"lineNumber":32,"author":{"gitId":"CrimsonTitan79"},"content":"    private static final String PATIENT_DATA_VALID \u003d \"src/test/data/StorageTest/patientData-valid.txt\";","lastModifiedDate":"2021-10-27"},{"lineNumber":33,"author":{"gitId":"CrimsonTitan79"},"content":"    private static final String PATIENT_DATA_SAVED \u003d \"src/test/data/StorageTest/patientData-saved.txt\";","lastModifiedDate":"2021-10-27"},{"lineNumber":34,"author":{"gitId":"CrimsonTitan79"},"content":"    private static final String STAFF_DATA_INVALID \u003d \"src/test/data/StorageTest/staffData-invalid.txt\";","lastModifiedDate":"2021-10-27"},{"lineNumber":35,"author":{"gitId":"CrimsonTitan79"},"content":"    private static final String STAFF_DATA_VALID \u003d \"src/test/data/StorageTest/staffData-valid.txt\";","lastModifiedDate":"2021-10-27"},{"lineNumber":36,"author":{"gitId":"CrimsonTitan79"},"content":"    private static final String STAFF_DATA_SAVED \u003d \"src/test/data/StorageTest/staffData-saved.txt\";","lastModifiedDate":"2021-10-27"},{"lineNumber":37,"author":{"gitId":"CrimsonTitan79"},"content":"    private static final String APPOINTMENT_DATA_INVALID \u003d \"src/test/data/StorageTest/appointmentData-invalid.txt\";","lastModifiedDate":"2021-10-27"},{"lineNumber":38,"author":{"gitId":"CrimsonTitan79"},"content":"    private static final String APPOINTMENT_DATA_VALID \u003d \"src/test/data/StorageTest/appointmentData-valid.txt\";","lastModifiedDate":"2021-10-27"},{"lineNumber":39,"author":{"gitId":"CrimsonTitan79"},"content":"    private static final String APPOINTMENT_DATA_SAVED \u003d \"src/test/data/StorageTest/appointmentData-saved.txt\";","lastModifiedDate":"2021-10-27"},{"lineNumber":40,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":41,"author":{"gitId":"CrimsonTitan79"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":42,"author":{"gitId":"CrimsonTitan79"},"content":"     * Loads Patient Storage with a mix of valid storage lines and invalid storage lines.","lastModifiedDate":"2021-11-07"},{"lineNumber":43,"author":{"gitId":"CrimsonTitan79"},"content":"     * Tests for both correct error message and correct loading of storage.","lastModifiedDate":"2021-11-07"},{"lineNumber":44,"author":{"gitId":"CrimsonTitan79"},"content":"     *","lastModifiedDate":"2021-11-07"},{"lineNumber":45,"author":{"gitId":"CrimsonTitan79"},"content":"     * \u003cp\u003eExpected: patients added through the program","lastModifiedDate":"2021-11-07"},{"lineNumber":46,"author":{"gitId":"CrimsonTitan79"},"content":"     * Actual: Patients added through loading storage","lastModifiedDate":"2021-11-07"},{"lineNumber":47,"author":{"gitId":"CrimsonTitan79"},"content":"     *","lastModifiedDate":"2021-11-07"},{"lineNumber":48,"author":{"gitId":"CrimsonTitan79"},"content":"     * @throws MedBotException       if unable to initialize PatientStorageStub or","lastModifiedDate":"2021-11-07"},{"lineNumber":49,"author":{"gitId":"CrimsonTitan79"},"content":"     *                               getTestPatientListStorageString() fails.","lastModifiedDate":"2021-11-07"},{"lineNumber":50,"author":{"gitId":"CrimsonTitan79"},"content":"     * @throws FileNotFoundException if unable to load patient storage.","lastModifiedDate":"2021-11-07"},{"lineNumber":51,"author":{"gitId":"CrimsonTitan79"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":52,"author":{"gitId":"CrimsonTitan79"},"content":"    @Test","lastModifiedDate":"2021-10-27"},{"lineNumber":53,"author":{"gitId":"CrimsonTitan79"},"content":"    public void testLoadPatientStorage_partialInvalidFormat()","lastModifiedDate":"2021-10-27"},{"lineNumber":54,"author":{"gitId":"CrimsonTitan79"},"content":"            throws MedBotException, FileNotFoundException {","lastModifiedDate":"2021-10-27"},{"lineNumber":55,"author":{"gitId":"CrimsonTitan79"},"content":"        PatientStorage patientStorage \u003d new PatientStorageStub(PATIENT_DATA_INVALID);","lastModifiedDate":"2021-11-03"},{"lineNumber":56,"author":{"gitId":"CrimsonTitan79"},"content":"        Scheduler actualScheduler \u003d new Scheduler();","lastModifiedDate":"2021-10-27"},{"lineNumber":57,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":58,"author":{"gitId":"CrimsonTitan79"},"content":"        String actualLoadStorageErrorMessage \u003d patientStorage.loadStorage(ListItemType.PATIENT, actualScheduler);","lastModifiedDate":"2021-10-27"},{"lineNumber":59,"author":{"gitId":"CrimsonTitan79"},"content":"        String expectedLoadStorageErrorMessage \u003d","lastModifiedDate":"2021-10-27"},{"lineNumber":60,"author":{"gitId":"CrimsonTitan79"},"content":"                \"Error: Line 8 of src/test/data/StorageTest/patientData-invalid.txt is invalid!\\n\"","lastModifiedDate":"2021-10-27"},{"lineNumber":61,"author":{"gitId":"CrimsonTitan79"},"content":"                        + \"Error: Line 9 of src/test/data/StorageTest/patientData-invalid.txt is invalid!\\n\"","lastModifiedDate":"2021-10-27"},{"lineNumber":62,"author":{"gitId":"CrimsonTitan79"},"content":"                        + \"Error: Line 10 of src/test/data/StorageTest/patientData-invalid.txt is invalid!\\n\"","lastModifiedDate":"2021-10-27"},{"lineNumber":63,"author":{"gitId":"CrimsonTitan79"},"content":"                        + \"Error: Line 11 of src/test/data/StorageTest/patientData-invalid.txt is invalid!\\n\";","lastModifiedDate":"2021-10-27"},{"lineNumber":64,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":65,"author":{"gitId":"CrimsonTitan79"},"content":"        String expectedStorageString \u003d getTestPatientListStorageString();","lastModifiedDate":"2021-10-27"},{"lineNumber":66,"author":{"gitId":"CrimsonTitan79"},"content":"        String actualStorageString \u003d actualScheduler.getPatientStorageString();","lastModifiedDate":"2021-10-27"},{"lineNumber":67,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":68,"author":{"gitId":"CrimsonTitan79"},"content":"        assertEquals(expectedLoadStorageErrorMessage, actualLoadStorageErrorMessage);","lastModifiedDate":"2021-10-27"},{"lineNumber":69,"author":{"gitId":"CrimsonTitan79"},"content":"        assertEquals(expectedStorageString, actualStorageString);","lastModifiedDate":"2021-10-27"},{"lineNumber":70,"author":{"gitId":"CrimsonTitan79"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":71,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":72,"author":{"gitId":"CrimsonTitan79"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":73,"author":{"gitId":"CrimsonTitan79"},"content":"     * Loads Patient Storage with only valid storage lines.","lastModifiedDate":"2021-11-07"},{"lineNumber":74,"author":{"gitId":"CrimsonTitan79"},"content":"     * Tests for both correct error message (none here) and correct loading of storage.","lastModifiedDate":"2021-11-07"},{"lineNumber":75,"author":{"gitId":"CrimsonTitan79"},"content":"     *","lastModifiedDate":"2021-11-07"},{"lineNumber":76,"author":{"gitId":"CrimsonTitan79"},"content":"     * \u003cp\u003eExpected: patients added through the program","lastModifiedDate":"2021-11-07"},{"lineNumber":77,"author":{"gitId":"CrimsonTitan79"},"content":"     * Actual: Patients added through loading storage","lastModifiedDate":"2021-11-07"},{"lineNumber":78,"author":{"gitId":"CrimsonTitan79"},"content":"     *","lastModifiedDate":"2021-11-07"},{"lineNumber":79,"author":{"gitId":"CrimsonTitan79"},"content":"     * @throws FileNotFoundException if unable to load patient storage.","lastModifiedDate":"2021-11-07"},{"lineNumber":80,"author":{"gitId":"CrimsonTitan79"},"content":"     * @throws MedBotException       if unable to initialize PatientStorageStub or","lastModifiedDate":"2021-11-07"},{"lineNumber":81,"author":{"gitId":"CrimsonTitan79"},"content":"     *                               getTestPatientListStorageString() fails.","lastModifiedDate":"2021-11-07"},{"lineNumber":82,"author":{"gitId":"CrimsonTitan79"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":83,"author":{"gitId":"CrimsonTitan79"},"content":"    @Test","lastModifiedDate":"2021-10-27"},{"lineNumber":84,"author":{"gitId":"CrimsonTitan79"},"content":"    public void testLoadPatientStorage_validFormat() throws FileNotFoundException, MedBotException {","lastModifiedDate":"2021-10-27"},{"lineNumber":85,"author":{"gitId":"CrimsonTitan79"},"content":"        PatientStorage patientStorage \u003d new PatientStorageStub(PATIENT_DATA_VALID);","lastModifiedDate":"2021-11-03"},{"lineNumber":86,"author":{"gitId":"CrimsonTitan79"},"content":"        Scheduler actualScheduler \u003d new Scheduler();","lastModifiedDate":"2021-10-27"},{"lineNumber":87,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":88,"author":{"gitId":"CrimsonTitan79"},"content":"        String actualLoadStorageErrorMessage \u003d patientStorage.loadStorage(ListItemType.PATIENT, actualScheduler);","lastModifiedDate":"2021-10-27"},{"lineNumber":89,"author":{"gitId":"CrimsonTitan79"},"content":"        String expectedLoadStorageErrorMessage \u003d \"\";","lastModifiedDate":"2021-10-27"},{"lineNumber":90,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":91,"author":{"gitId":"CrimsonTitan79"},"content":"        String expectedStorageString \u003d getTestPatientListStorageString();","lastModifiedDate":"2021-10-27"},{"lineNumber":92,"author":{"gitId":"CrimsonTitan79"},"content":"        String actualStorageString \u003d actualScheduler.getPatientStorageString();","lastModifiedDate":"2021-10-27"},{"lineNumber":93,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":94,"author":{"gitId":"CrimsonTitan79"},"content":"        assertEquals(expectedLoadStorageErrorMessage, actualLoadStorageErrorMessage);","lastModifiedDate":"2021-10-27"},{"lineNumber":95,"author":{"gitId":"CrimsonTitan79"},"content":"        assertEquals(expectedStorageString, actualStorageString);","lastModifiedDate":"2021-10-27"},{"lineNumber":96,"author":{"gitId":"CrimsonTitan79"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":97,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":98,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":99,"author":{"gitId":"CrimsonTitan79"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":100,"author":{"gitId":"CrimsonTitan79"},"content":"     * Loads Staff Storage with a mix of valid storage lines and invalid storage lines.","lastModifiedDate":"2021-11-07"},{"lineNumber":101,"author":{"gitId":"CrimsonTitan79"},"content":"     * Tests for both correct error message and correct loading of storage.","lastModifiedDate":"2021-11-07"},{"lineNumber":102,"author":{"gitId":"CrimsonTitan79"},"content":"     *","lastModifiedDate":"2021-11-07"},{"lineNumber":103,"author":{"gitId":"CrimsonTitan79"},"content":"     * \u003cp\u003eExpected: staff added through the program","lastModifiedDate":"2021-11-07"},{"lineNumber":104,"author":{"gitId":"CrimsonTitan79"},"content":"     * Actual: staff added through loading storage","lastModifiedDate":"2021-11-07"},{"lineNumber":105,"author":{"gitId":"CrimsonTitan79"},"content":"     *","lastModifiedDate":"2021-11-07"},{"lineNumber":106,"author":{"gitId":"CrimsonTitan79"},"content":"     * @throws MedBotException       if unable to initialize StaffStorageStub or","lastModifiedDate":"2021-11-07"},{"lineNumber":107,"author":{"gitId":"CrimsonTitan79"},"content":"     *                               getTestStaffListStorageString() fails.","lastModifiedDate":"2021-11-07"},{"lineNumber":108,"author":{"gitId":"CrimsonTitan79"},"content":"     * @throws FileNotFoundException if unable to load staff storage.","lastModifiedDate":"2021-11-07"},{"lineNumber":109,"author":{"gitId":"CrimsonTitan79"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":110,"author":{"gitId":"CrimsonTitan79"},"content":"    @Test","lastModifiedDate":"2021-10-27"},{"lineNumber":111,"author":{"gitId":"CrimsonTitan79"},"content":"    public void testLoadStaffStorage_partialInvalidFormat() throws MedBotException, FileNotFoundException {","lastModifiedDate":"2021-10-27"},{"lineNumber":112,"author":{"gitId":"CrimsonTitan79"},"content":"        StaffStorage staffStorage \u003d new StaffStorageStub(STAFF_DATA_INVALID);","lastModifiedDate":"2021-11-03"},{"lineNumber":113,"author":{"gitId":"CrimsonTitan79"},"content":"        Scheduler actualScheduler \u003d new Scheduler();","lastModifiedDate":"2021-10-27"},{"lineNumber":114,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":115,"author":{"gitId":"CrimsonTitan79"},"content":"        String actualLoadStorageErrorMessage \u003d staffStorage.loadStorage(ListItemType.STAFF, actualScheduler);","lastModifiedDate":"2021-10-27"},{"lineNumber":116,"author":{"gitId":"CrimsonTitan79"},"content":"        String expectedLoadStorageErrorMessage \u003d","lastModifiedDate":"2021-10-27"},{"lineNumber":117,"author":{"gitId":"CrimsonTitan79"},"content":"                \"Error: Line 5 of src/test/data/StorageTest/staffData-invalid.txt is invalid!\\n\"","lastModifiedDate":"2021-10-27"},{"lineNumber":118,"author":{"gitId":"CrimsonTitan79"},"content":"                        + \"Error: Line 6 of src/test/data/StorageTest/staffData-invalid.txt is invalid!\\n\"","lastModifiedDate":"2021-10-27"},{"lineNumber":119,"author":{"gitId":"CrimsonTitan79"},"content":"                        + \"Error: Line 7 of src/test/data/StorageTest/staffData-invalid.txt is invalid!\\n\"","lastModifiedDate":"2021-10-27"},{"lineNumber":120,"author":{"gitId":"CrimsonTitan79"},"content":"                        + \"Error: Line 8 of src/test/data/StorageTest/staffData-invalid.txt is invalid!\\n\";","lastModifiedDate":"2021-10-27"},{"lineNumber":121,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":122,"author":{"gitId":"CrimsonTitan79"},"content":"        String expectedStorageString \u003d getTestStaffListStorageString();","lastModifiedDate":"2021-10-27"},{"lineNumber":123,"author":{"gitId":"CrimsonTitan79"},"content":"        String actualStorageString \u003d actualScheduler.getStaffStorageString();","lastModifiedDate":"2021-10-27"},{"lineNumber":124,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":125,"author":{"gitId":"CrimsonTitan79"},"content":"        assertEquals(expectedLoadStorageErrorMessage, actualLoadStorageErrorMessage);","lastModifiedDate":"2021-10-27"},{"lineNumber":126,"author":{"gitId":"CrimsonTitan79"},"content":"        assertEquals(expectedStorageString, actualStorageString);","lastModifiedDate":"2021-10-27"},{"lineNumber":127,"author":{"gitId":"CrimsonTitan79"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":128,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":129,"author":{"gitId":"CrimsonTitan79"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":130,"author":{"gitId":"CrimsonTitan79"},"content":"     * Loads Staff Storage with only valid storage lines.","lastModifiedDate":"2021-11-07"},{"lineNumber":131,"author":{"gitId":"CrimsonTitan79"},"content":"     * Tests for both correct error message (none) and correct loading of storage.","lastModifiedDate":"2021-11-07"},{"lineNumber":132,"author":{"gitId":"CrimsonTitan79"},"content":"     *","lastModifiedDate":"2021-11-07"},{"lineNumber":133,"author":{"gitId":"CrimsonTitan79"},"content":"     * \u003cp\u003eExpected: staff added through the program","lastModifiedDate":"2021-11-07"},{"lineNumber":134,"author":{"gitId":"CrimsonTitan79"},"content":"     * Actual: staff added through loading storage","lastModifiedDate":"2021-11-07"},{"lineNumber":135,"author":{"gitId":"CrimsonTitan79"},"content":"     *","lastModifiedDate":"2021-11-07"},{"lineNumber":136,"author":{"gitId":"CrimsonTitan79"},"content":"     * @throws MedBotException       if unable to initialize StaffStorageStub or","lastModifiedDate":"2021-11-07"},{"lineNumber":137,"author":{"gitId":"CrimsonTitan79"},"content":"     *                               getTestStaffListStorageString() fails.","lastModifiedDate":"2021-11-07"},{"lineNumber":138,"author":{"gitId":"CrimsonTitan79"},"content":"     * @throws FileNotFoundException if unable to load staff storage.","lastModifiedDate":"2021-11-07"},{"lineNumber":139,"author":{"gitId":"CrimsonTitan79"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":140,"author":{"gitId":"CrimsonTitan79"},"content":"    @Test","lastModifiedDate":"2021-10-27"},{"lineNumber":141,"author":{"gitId":"CrimsonTitan79"},"content":"    public void testLoadStaffStorage_validFormat() throws MedBotException, FileNotFoundException {","lastModifiedDate":"2021-10-27"},{"lineNumber":142,"author":{"gitId":"CrimsonTitan79"},"content":"        StaffStorage staffStorage \u003d new StaffStorageStub(STAFF_DATA_VALID);","lastModifiedDate":"2021-11-03"},{"lineNumber":143,"author":{"gitId":"CrimsonTitan79"},"content":"        Scheduler actualScheduler \u003d new Scheduler();","lastModifiedDate":"2021-10-27"},{"lineNumber":144,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":145,"author":{"gitId":"CrimsonTitan79"},"content":"        String actualLoadStorageErrorMessage \u003d staffStorage.loadStorage(ListItemType.STAFF, actualScheduler);","lastModifiedDate":"2021-10-27"},{"lineNumber":146,"author":{"gitId":"CrimsonTitan79"},"content":"        String expectedLoadStorageErrorMessage \u003d \"\";","lastModifiedDate":"2021-10-27"},{"lineNumber":147,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":148,"author":{"gitId":"CrimsonTitan79"},"content":"        String expectedStorageString \u003d getTestStaffListStorageString();","lastModifiedDate":"2021-10-27"},{"lineNumber":149,"author":{"gitId":"CrimsonTitan79"},"content":"        String actualStorageString \u003d actualScheduler.getStaffStorageString();","lastModifiedDate":"2021-10-27"},{"lineNumber":150,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":151,"author":{"gitId":"CrimsonTitan79"},"content":"        assertEquals(expectedLoadStorageErrorMessage, actualLoadStorageErrorMessage);","lastModifiedDate":"2021-10-27"},{"lineNumber":152,"author":{"gitId":"CrimsonTitan79"},"content":"        assertEquals(expectedStorageString, actualStorageString);","lastModifiedDate":"2021-10-27"},{"lineNumber":153,"author":{"gitId":"CrimsonTitan79"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":154,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":155,"author":{"gitId":"CrimsonTitan79"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":156,"author":{"gitId":"CrimsonTitan79"},"content":"     * Loads Appointment Storage with a mix of valid storage lines and invalid storage lines.","lastModifiedDate":"2021-11-07"},{"lineNumber":157,"author":{"gitId":"CrimsonTitan79"},"content":"     * Tests for both correct error message and correct loading of storage.","lastModifiedDate":"2021-11-07"},{"lineNumber":158,"author":{"gitId":"CrimsonTitan79"},"content":"     *","lastModifiedDate":"2021-11-07"},{"lineNumber":159,"author":{"gitId":"CrimsonTitan79"},"content":"     * \u003cp\u003eExpected: appointment added through the program","lastModifiedDate":"2021-11-07"},{"lineNumber":160,"author":{"gitId":"CrimsonTitan79"},"content":"     * Actual: appointment added through loading storage","lastModifiedDate":"2021-11-07"},{"lineNumber":161,"author":{"gitId":"CrimsonTitan79"},"content":"     *","lastModifiedDate":"2021-11-07"},{"lineNumber":162,"author":{"gitId":"CrimsonTitan79"},"content":"     * @throws MedBotException       if unable to initialize StaffStorageStub or","lastModifiedDate":"2021-11-07"},{"lineNumber":163,"author":{"gitId":"CrimsonTitan79"},"content":"     *                               getTestAppointmentListStorageString() fails.","lastModifiedDate":"2021-11-07"},{"lineNumber":164,"author":{"gitId":"CrimsonTitan79"},"content":"     * @throws FileNotFoundException if unable to load appointment storage.","lastModifiedDate":"2021-11-07"},{"lineNumber":165,"author":{"gitId":"CrimsonTitan79"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":166,"author":{"gitId":"CrimsonTitan79"},"content":"    @Test","lastModifiedDate":"2021-10-27"},{"lineNumber":167,"author":{"gitId":"CrimsonTitan79"},"content":"    public void testLoadAppointmentStorage_partialInvalidFormat() throws MedBotException, FileNotFoundException {","lastModifiedDate":"2021-10-27"},{"lineNumber":168,"author":{"gitId":"CrimsonTitan79"},"content":"        PatientStorage patientStorage \u003d new PatientStorageStub(PATIENT_DATA_VALID);","lastModifiedDate":"2021-11-03"},{"lineNumber":169,"author":{"gitId":"CrimsonTitan79"},"content":"        StaffStorage staffStorage \u003d new StaffStorageStub(STAFF_DATA_VALID);","lastModifiedDate":"2021-11-03"},{"lineNumber":170,"author":{"gitId":"CrimsonTitan79"},"content":"        AppointmentStorage appointmentStorage \u003d new AppointmentStorageStub(APPOINTMENT_DATA_INVALID);","lastModifiedDate":"2021-11-03"},{"lineNumber":171,"author":{"gitId":"CrimsonTitan79"},"content":"        Scheduler actualScheduler \u003d new Scheduler();","lastModifiedDate":"2021-10-27"},{"lineNumber":172,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":173,"author":{"gitId":"CrimsonTitan79"},"content":"        patientStorage.loadStorage(ListItemType.PATIENT, actualScheduler);","lastModifiedDate":"2021-10-27"},{"lineNumber":174,"author":{"gitId":"CrimsonTitan79"},"content":"        staffStorage.loadStorage(ListItemType.STAFF, actualScheduler);","lastModifiedDate":"2021-10-27"},{"lineNumber":175,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":176,"author":{"gitId":"CrimsonTitan79"},"content":"        String actualLoadStorageErrorMessage \u003d appointmentStorage.loadStorage(","lastModifiedDate":"2021-10-27"},{"lineNumber":177,"author":{"gitId":"CrimsonTitan79"},"content":"                ListItemType.APPOINTMENT, actualScheduler);","lastModifiedDate":"2021-10-27"},{"lineNumber":178,"author":{"gitId":"CrimsonTitan79"},"content":"        String expectedLoadStorageErrorMessage \u003d","lastModifiedDate":"2021-10-27"},{"lineNumber":179,"author":{"gitId":"CrimsonTitan79"},"content":"                \"Error: Line 7 of src/test/data/StorageTest/appointmentData-invalid.txt is invalid!\\n\"","lastModifiedDate":"2021-10-27"},{"lineNumber":180,"author":{"gitId":"CrimsonTitan79"},"content":"                        + \"Error: Line 8 of src/test/data/StorageTest/appointmentData-invalid.txt is invalid!\\n\"","lastModifiedDate":"2021-10-27"},{"lineNumber":181,"author":{"gitId":"CrimsonTitan79"},"content":"                        + \"Error: Line 9 of src/test/data/StorageTest/appointmentData-invalid.txt is invalid!\\n\"","lastModifiedDate":"2021-10-27"},{"lineNumber":182,"author":{"gitId":"CrimsonTitan79"},"content":"                        + \"Error: Line 10 of src/test/data/StorageTest/appointmentData-invalid.txt is invalid!\\n\"","lastModifiedDate":"2021-10-27"},{"lineNumber":183,"author":{"gitId":"CrimsonTitan79"},"content":"                        + \"Error: Line 11 of src/test/data/StorageTest/appointmentData-invalid.txt is invalid!\\n\";","lastModifiedDate":"2021-10-27"},{"lineNumber":184,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":185,"author":{"gitId":"CrimsonTitan79"},"content":"        String expectedStorageString \u003d getTestAppointmentListStorageString();","lastModifiedDate":"2021-10-27"},{"lineNumber":186,"author":{"gitId":"CrimsonTitan79"},"content":"        String actualStorageString \u003d actualScheduler.getAppointmentStorageString();","lastModifiedDate":"2021-10-27"},{"lineNumber":187,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":188,"author":{"gitId":"CrimsonTitan79"},"content":"        //Test for both correct error message and correct loading of storage","lastModifiedDate":"2021-10-27"},{"lineNumber":189,"author":{"gitId":"CrimsonTitan79"},"content":"        assertEquals(expectedLoadStorageErrorMessage, actualLoadStorageErrorMessage);","lastModifiedDate":"2021-10-27"},{"lineNumber":190,"author":{"gitId":"CrimsonTitan79"},"content":"        assertEquals(expectedStorageString, actualStorageString);","lastModifiedDate":"2021-10-27"},{"lineNumber":191,"author":{"gitId":"CrimsonTitan79"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":192,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":193,"author":{"gitId":"CrimsonTitan79"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":194,"author":{"gitId":"CrimsonTitan79"},"content":"     * Loads Appointment Storage with only valid storage lines.","lastModifiedDate":"2021-11-07"},{"lineNumber":195,"author":{"gitId":"CrimsonTitan79"},"content":"     * Tests for both correct error message (none) and correct loading of storage.","lastModifiedDate":"2021-11-07"},{"lineNumber":196,"author":{"gitId":"CrimsonTitan79"},"content":"     *","lastModifiedDate":"2021-11-07"},{"lineNumber":197,"author":{"gitId":"CrimsonTitan79"},"content":"     * \u003cp\u003eExpected: appointment added through the program","lastModifiedDate":"2021-11-07"},{"lineNumber":198,"author":{"gitId":"CrimsonTitan79"},"content":"     * Actual: appointment added through loading storage","lastModifiedDate":"2021-11-07"},{"lineNumber":199,"author":{"gitId":"CrimsonTitan79"},"content":"     *","lastModifiedDate":"2021-11-07"},{"lineNumber":200,"author":{"gitId":"CrimsonTitan79"},"content":"     * @throws MedBotException       if unable to initialize StaffStorageStub or","lastModifiedDate":"2021-11-07"},{"lineNumber":201,"author":{"gitId":"CrimsonTitan79"},"content":"     *                               getTestAppointmentListStorageString() fails.","lastModifiedDate":"2021-11-07"},{"lineNumber":202,"author":{"gitId":"CrimsonTitan79"},"content":"     * @throws FileNotFoundException if unable to load appointment storage.","lastModifiedDate":"2021-11-07"},{"lineNumber":203,"author":{"gitId":"CrimsonTitan79"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":204,"author":{"gitId":"CrimsonTitan79"},"content":"    @Test","lastModifiedDate":"2021-10-27"},{"lineNumber":205,"author":{"gitId":"CrimsonTitan79"},"content":"    public void testLoadAppointmentStorage_validFormat() throws MedBotException, FileNotFoundException {","lastModifiedDate":"2021-10-27"},{"lineNumber":206,"author":{"gitId":"CrimsonTitan79"},"content":"        PatientStorage patientStorage \u003d new PatientStorageStub(PATIENT_DATA_VALID);","lastModifiedDate":"2021-11-03"},{"lineNumber":207,"author":{"gitId":"CrimsonTitan79"},"content":"        StaffStorage staffStorage \u003d new StaffStorageStub(STAFF_DATA_VALID);","lastModifiedDate":"2021-11-03"},{"lineNumber":208,"author":{"gitId":"CrimsonTitan79"},"content":"        AppointmentStorage appointmentStorage \u003d new AppointmentStorageStub(APPOINTMENT_DATA_VALID);","lastModifiedDate":"2021-11-03"},{"lineNumber":209,"author":{"gitId":"CrimsonTitan79"},"content":"        Scheduler actualScheduler \u003d new Scheduler();","lastModifiedDate":"2021-10-27"},{"lineNumber":210,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":211,"author":{"gitId":"CrimsonTitan79"},"content":"        patientStorage.loadStorage(ListItemType.PATIENT, actualScheduler);","lastModifiedDate":"2021-10-27"},{"lineNumber":212,"author":{"gitId":"CrimsonTitan79"},"content":"        staffStorage.loadStorage(ListItemType.STAFF, actualScheduler);","lastModifiedDate":"2021-10-27"},{"lineNumber":213,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":214,"author":{"gitId":"CrimsonTitan79"},"content":"        String actualLoadStorageErrorMessage \u003d appointmentStorage.loadStorage(","lastModifiedDate":"2021-10-27"},{"lineNumber":215,"author":{"gitId":"CrimsonTitan79"},"content":"                ListItemType.APPOINTMENT, actualScheduler);","lastModifiedDate":"2021-10-27"},{"lineNumber":216,"author":{"gitId":"CrimsonTitan79"},"content":"        String expectedLoadStorageErrorMessage \u003d \"\";","lastModifiedDate":"2021-10-27"},{"lineNumber":217,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":218,"author":{"gitId":"CrimsonTitan79"},"content":"        String expectedStorageString \u003d getTestAppointmentListStorageString();","lastModifiedDate":"2021-10-27"},{"lineNumber":219,"author":{"gitId":"CrimsonTitan79"},"content":"        String actualStorageString \u003d actualScheduler.getAppointmentStorageString();","lastModifiedDate":"2021-10-27"},{"lineNumber":220,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":221,"author":{"gitId":"CrimsonTitan79"},"content":"        //Test for both correct error message and correct loading of storage","lastModifiedDate":"2021-10-27"},{"lineNumber":222,"author":{"gitId":"CrimsonTitan79"},"content":"        assertEquals(expectedLoadStorageErrorMessage, actualLoadStorageErrorMessage);","lastModifiedDate":"2021-10-27"},{"lineNumber":223,"author":{"gitId":"CrimsonTitan79"},"content":"        assertEquals(expectedStorageString, actualStorageString);","lastModifiedDate":"2021-10-27"},{"lineNumber":224,"author":{"gitId":"CrimsonTitan79"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":225,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":226,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":227,"author":{"gitId":"CrimsonTitan79"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":228,"author":{"gitId":"CrimsonTitan79"},"content":"     * Test the saving of data of to all three storage files.","lastModifiedDate":"2021-11-07"},{"lineNumber":229,"author":{"gitId":"CrimsonTitan79"},"content":"     *","lastModifiedDate":"2021-11-07"},{"lineNumber":230,"author":{"gitId":"CrimsonTitan79"},"content":"     * \u003cp\u003eExpected: Scanned contents from storage files with the expected contents.","lastModifiedDate":"2021-11-07"},{"lineNumber":231,"author":{"gitId":"CrimsonTitan79"},"content":"     * Actual: Scanned contents from the storage files that were created from this test.","lastModifiedDate":"2021-11-07"},{"lineNumber":232,"author":{"gitId":"CrimsonTitan79"},"content":"     *","lastModifiedDate":"2021-11-07"},{"lineNumber":233,"author":{"gitId":"CrimsonTitan79"},"content":"     * @throws MedBotException if unable to initialize any of the StorageStubs or any","lastModifiedDate":"2021-11-07"},{"lineNumber":234,"author":{"gitId":"CrimsonTitan79"},"content":"     *                         getTest(*)ListStorageString() fails.","lastModifiedDate":"2021-11-07"},{"lineNumber":235,"author":{"gitId":"CrimsonTitan79"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":236,"author":{"gitId":"CrimsonTitan79"},"content":"    @Test","lastModifiedDate":"2021-10-27"},{"lineNumber":237,"author":{"gitId":"CrimsonTitan79"},"content":"    public void testSaveData() throws MedBotException {","lastModifiedDate":"2021-10-27"},{"lineNumber":238,"author":{"gitId":"CrimsonTitan79"},"content":"        PatientStorage patientStorage \u003d new PatientStorageStub(PATIENT_DATA_SAVED);","lastModifiedDate":"2021-11-03"},{"lineNumber":239,"author":{"gitId":"CrimsonTitan79"},"content":"        StaffStorage staffStorage \u003d new StaffStorageStub(STAFF_DATA_SAVED);","lastModifiedDate":"2021-11-03"},{"lineNumber":240,"author":{"gitId":"CrimsonTitan79"},"content":"        AppointmentStorage appointmentStorage \u003d new AppointmentStorageStub(APPOINTMENT_DATA_SAVED);","lastModifiedDate":"2021-11-03"},{"lineNumber":241,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":242,"author":{"gitId":"CrimsonTitan79"},"content":"        String expectedPatientStorageString \u003d getTestPatientListStorageString();","lastModifiedDate":"2021-10-27"},{"lineNumber":243,"author":{"gitId":"CrimsonTitan79"},"content":"        String expectedStaffStorageString \u003d getTestStaffListStorageString();","lastModifiedDate":"2021-10-27"},{"lineNumber":244,"author":{"gitId":"CrimsonTitan79"},"content":"        String expectedTestAppointmentString \u003d getTestAppointmentListStorageString();","lastModifiedDate":"2021-10-27"},{"lineNumber":245,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":246,"author":{"gitId":"CrimsonTitan79"},"content":"        try {","lastModifiedDate":"2021-11-02"},{"lineNumber":247,"author":{"gitId":"CrimsonTitan79"},"content":"            patientStorage.saveData(expectedPatientStorageString);","lastModifiedDate":"2021-10-27"},{"lineNumber":248,"author":{"gitId":"CrimsonTitan79"},"content":"            staffStorage.saveData(expectedStaffStorageString);","lastModifiedDate":"2021-10-27"},{"lineNumber":249,"author":{"gitId":"CrimsonTitan79"},"content":"            appointmentStorage.saveData(expectedTestAppointmentString);","lastModifiedDate":"2021-10-27"},{"lineNumber":250,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":251,"author":{"gitId":"CrimsonTitan79"},"content":"            String actualPatientFileString \u003d scanFileToString(PATIENT_DATA_SAVED);","lastModifiedDate":"2021-10-27"},{"lineNumber":252,"author":{"gitId":"CrimsonTitan79"},"content":"            String actualStaffFileString \u003d scanFileToString(STAFF_DATA_SAVED);","lastModifiedDate":"2021-10-27"},{"lineNumber":253,"author":{"gitId":"CrimsonTitan79"},"content":"            String actualAppointmentFileString \u003d scanFileToString(APPOINTMENT_DATA_SAVED);","lastModifiedDate":"2021-10-27"},{"lineNumber":254,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":255,"author":{"gitId":"CrimsonTitan79"},"content":"            String expectedPatientFileString \u003d scanFileToString(PATIENT_DATA_VALID);","lastModifiedDate":"2021-10-27"},{"lineNumber":256,"author":{"gitId":"CrimsonTitan79"},"content":"            String expectedStaffFileString \u003d scanFileToString(STAFF_DATA_VALID);","lastModifiedDate":"2021-10-27"},{"lineNumber":257,"author":{"gitId":"CrimsonTitan79"},"content":"            String expectedAppointmentFileString \u003d scanFileToString(APPOINTMENT_DATA_VALID);","lastModifiedDate":"2021-10-27"},{"lineNumber":258,"author":{"gitId":"CrimsonTitan79"},"content":"            assertEquals(expectedPatientFileString, actualPatientFileString);","lastModifiedDate":"2021-10-27"},{"lineNumber":259,"author":{"gitId":"CrimsonTitan79"},"content":"            assertEquals(expectedStaffFileString, actualStaffFileString);","lastModifiedDate":"2021-10-27"},{"lineNumber":260,"author":{"gitId":"CrimsonTitan79"},"content":"            assertEquals(expectedAppointmentFileString, actualAppointmentFileString);","lastModifiedDate":"2021-10-27"},{"lineNumber":261,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":262,"author":{"gitId":"CrimsonTitan79"},"content":"            deleteSavedData();","lastModifiedDate":"2021-10-27"},{"lineNumber":263,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":264,"author":{"gitId":"CrimsonTitan79"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-11-02"},{"lineNumber":265,"author":{"gitId":"CrimsonTitan79"},"content":"            throw new MedBotException(\"FILE ERROR\");","lastModifiedDate":"2021-10-27"},{"lineNumber":266,"author":{"gitId":"CrimsonTitan79"},"content":"        }","lastModifiedDate":"2021-10-27"},{"lineNumber":267,"author":{"gitId":"CrimsonTitan79"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":268,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":269,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":270,"author":{"gitId":"CrimsonTitan79"},"content":"    /**","lastModifiedDate":"2021-10-27"},{"lineNumber":271,"author":{"gitId":"CrimsonTitan79"},"content":"     * Create a test PatientList containing Patient objects.","lastModifiedDate":"2021-10-27"},{"lineNumber":272,"author":{"gitId":"CrimsonTitan79"},"content":"     *","lastModifiedDate":"2021-10-27"},{"lineNumber":273,"author":{"gitId":"CrimsonTitan79"},"content":"     * @return a test PatientList","lastModifiedDate":"2021-10-27"},{"lineNumber":274,"author":{"gitId":"CrimsonTitan79"},"content":"     * @throws MedBotException if any patient instantiation fails","lastModifiedDate":"2021-10-27"},{"lineNumber":275,"author":{"gitId":"CrimsonTitan79"},"content":"     */","lastModifiedDate":"2021-10-27"},{"lineNumber":276,"author":{"gitId":"CrimsonTitan79"},"content":"    private String getTestPatientListStorageString() throws MedBotException {","lastModifiedDate":"2021-10-27"},{"lineNumber":277,"author":{"gitId":"CrimsonTitan79"},"content":"        PatientList testPatientList \u003d new PatientList();","lastModifiedDate":"2021-10-27"},{"lineNumber":278,"author":{"gitId":"CrimsonTitan79"},"content":"        Patient patient1 \u003d (Patient) createPerson(PersonType.PATIENT, 1, \"S7912345A\", \"Doge\",","lastModifiedDate":"2021-10-27"},{"lineNumber":279,"author":{"gitId":"CrimsonTitan79"},"content":"                \"91234567\", \"doge@mail.com\",","lastModifiedDate":"2021-10-27"},{"lineNumber":280,"author":{"gitId":"CrimsonTitan79"},"content":"                \"Doge Town 2nd Street\");","lastModifiedDate":"2021-10-27"},{"lineNumber":281,"author":{"gitId":"CrimsonTitan79"},"content":"        Patient patient2 \u003d (Patient) createPerson(PersonType.PATIENT, 2, \"\", \"Cheems\",","lastModifiedDate":"2021-10-27"},{"lineNumber":282,"author":{"gitId":"CrimsonTitan79"},"content":"                \"\", \"cheems@mail.com\",","lastModifiedDate":"2021-10-27"},{"lineNumber":283,"author":{"gitId":"CrimsonTitan79"},"content":"                \"Doge County\");","lastModifiedDate":"2021-10-27"},{"lineNumber":284,"author":{"gitId":"CrimsonTitan79"},"content":"        Patient patient3 \u003d (Patient) createPerson(PersonType.PATIENT, 4, \"S2312345A\", \"\",","lastModifiedDate":"2021-10-27"},{"lineNumber":285,"author":{"gitId":"CrimsonTitan79"},"content":"                \"81234567\", \"cheems@mail.com\",","lastModifiedDate":"2021-10-27"},{"lineNumber":286,"author":{"gitId":"CrimsonTitan79"},"content":"                \"Arken Street\");","lastModifiedDate":"2021-10-27"},{"lineNumber":287,"author":{"gitId":"CrimsonTitan79"},"content":"        Patient patient4 \u003d (Patient) createPerson(PersonType.PATIENT, 6, \"F9123456X\", \"Emma\",","lastModifiedDate":"2021-10-27"},{"lineNumber":288,"author":{"gitId":"CrimsonTitan79"},"content":"                \"\", \"emma@mail.com\",","lastModifiedDate":"2021-10-27"},{"lineNumber":289,"author":{"gitId":"CrimsonTitan79"},"content":"                \"Greensville County\");","lastModifiedDate":"2021-10-27"},{"lineNumber":290,"author":{"gitId":"CrimsonTitan79"},"content":"        Patient patient5 \u003d (Patient) createPerson(PersonType.PATIENT, 7, \"F3232145B\", \"Norman\",","lastModifiedDate":"2021-10-27"},{"lineNumber":291,"author":{"gitId":"CrimsonTitan79"},"content":"                \"\", \"norman@mail.com\",","lastModifiedDate":"2021-10-27"},{"lineNumber":292,"author":{"gitId":"CrimsonTitan79"},"content":"                \"Petalburg City\");","lastModifiedDate":"2021-10-27"},{"lineNumber":293,"author":{"gitId":"CrimsonTitan79"},"content":"        Patient patient6 \u003d (Patient) createPerson(PersonType.PATIENT, 9, \"S9145645C\", \"Arthur\",","lastModifiedDate":"2021-10-27"},{"lineNumber":294,"author":{"gitId":"CrimsonTitan79"},"content":"                \"67654321\", \"\",","lastModifiedDate":"2021-10-27"},{"lineNumber":295,"author":{"gitId":"CrimsonTitan79"},"content":"                \"Evergrande District\");","lastModifiedDate":"2021-10-27"},{"lineNumber":296,"author":{"gitId":"CrimsonTitan79"},"content":"        Patient patient7 \u003d (Patient) createPerson(PersonType.PATIENT, 10, \"T0123463X\", \"William\",","lastModifiedDate":"2021-10-27"},{"lineNumber":297,"author":{"gitId":"CrimsonTitan79"},"content":"                \"\", \"will@mail.com\",","lastModifiedDate":"2021-10-27"},{"lineNumber":298,"author":{"gitId":"CrimsonTitan79"},"content":"                \"Doge County\");","lastModifiedDate":"2021-10-27"},{"lineNumber":299,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":300,"author":{"gitId":"CrimsonTitan79"},"content":"        Patient[] patients \u003d {patient1, patient2, patient3, patient4, patient5, patient6, patient7};","lastModifiedDate":"2021-10-27"},{"lineNumber":301,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":302,"author":{"gitId":"CrimsonTitan79"},"content":"        for (Patient p : patients) {","lastModifiedDate":"2021-10-27"},{"lineNumber":303,"author":{"gitId":"CrimsonTitan79"},"content":"            testPatientList.setLastId(p.getId());","lastModifiedDate":"2021-10-27"},{"lineNumber":304,"author":{"gitId":"CrimsonTitan79"},"content":"            testPatientList.addPerson(p);","lastModifiedDate":"2021-10-27"},{"lineNumber":305,"author":{"gitId":"CrimsonTitan79"},"content":"        }","lastModifiedDate":"2021-10-27"},{"lineNumber":306,"author":{"gitId":"CrimsonTitan79"},"content":"        return testPatientList.getStorageString();","lastModifiedDate":"2021-10-27"},{"lineNumber":307,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":308,"author":{"gitId":"CrimsonTitan79"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":309,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":310,"author":{"gitId":"CrimsonTitan79"},"content":"    /**","lastModifiedDate":"2021-10-27"},{"lineNumber":311,"author":{"gitId":"CrimsonTitan79"},"content":"     * Create a test PatientList containing Patient objects.","lastModifiedDate":"2021-10-27"},{"lineNumber":312,"author":{"gitId":"CrimsonTitan79"},"content":"     *","lastModifiedDate":"2021-10-27"},{"lineNumber":313,"author":{"gitId":"CrimsonTitan79"},"content":"     * @return a test PatientList","lastModifiedDate":"2021-10-27"},{"lineNumber":314,"author":{"gitId":"CrimsonTitan79"},"content":"     * @throws MedBotException if any patient instantiation fails","lastModifiedDate":"2021-10-27"},{"lineNumber":315,"author":{"gitId":"CrimsonTitan79"},"content":"     */","lastModifiedDate":"2021-10-27"},{"lineNumber":316,"author":{"gitId":"CrimsonTitan79"},"content":"    private String getTestStaffListStorageString() throws MedBotException {","lastModifiedDate":"2021-10-27"},{"lineNumber":317,"author":{"gitId":"CrimsonTitan79"},"content":"        MedicalStaffList testStaffList \u003d new MedicalStaffList();","lastModifiedDate":"2021-10-27"},{"lineNumber":318,"author":{"gitId":"CrimsonTitan79"},"content":"        Staff staff1 \u003d (Staff) createPerson(PersonType.STAFF, 1, \"S5123123A\", \"Doctor One\",","lastModifiedDate":"2021-10-27"},{"lineNumber":319,"author":{"gitId":"CrimsonTitan79"},"content":"                \"81818181\", \"doctor1@mail.com\",","lastModifiedDate":"2021-10-27"},{"lineNumber":320,"author":{"gitId":"CrimsonTitan79"},"content":"                \"American Gardens Building\");","lastModifiedDate":"2021-10-27"},{"lineNumber":321,"author":{"gitId":"CrimsonTitan79"},"content":"        Staff staff2 \u003d (Staff) createPerson(PersonType.STAFF, 2, \"\", \"Doctor Two\",","lastModifiedDate":"2021-10-27"},{"lineNumber":322,"author":{"gitId":"CrimsonTitan79"},"content":"                \"91919191\", \"herrdoktor@mail.com\",","lastModifiedDate":"2021-10-27"},{"lineNumber":323,"author":{"gitId":"CrimsonTitan79"},"content":"                \"Gotham Street\");","lastModifiedDate":"2021-10-27"},{"lineNumber":324,"author":{"gitId":"CrimsonTitan79"},"content":"        Staff staff3 \u003d (Staff) createPerson(PersonType.STAFF, 6, \"F6123123C\", \"Nurse One\",","lastModifiedDate":"2021-10-27"},{"lineNumber":325,"author":{"gitId":"CrimsonTitan79"},"content":"                \"\", \"\",","lastModifiedDate":"2021-10-27"},{"lineNumber":326,"author":{"gitId":"CrimsonTitan79"},"content":"                \"Little Root County\");","lastModifiedDate":"2021-10-27"},{"lineNumber":327,"author":{"gitId":"CrimsonTitan79"},"content":"        Staff staff4 \u003d (Staff) createPerson(PersonType.STAFF, 7, \"F2123123D\", \"Nurse Two\",","lastModifiedDate":"2021-10-27"},{"lineNumber":328,"author":{"gitId":"CrimsonTitan79"},"content":"                \"\", \"nurse2@mail.com\",","lastModifiedDate":"2021-10-27"},{"lineNumber":329,"author":{"gitId":"CrimsonTitan79"},"content":"                \"Petalburg City\");","lastModifiedDate":"2021-10-27"},{"lineNumber":330,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":331,"author":{"gitId":"CrimsonTitan79"},"content":"        Staff[] staff \u003d {staff1, staff2, staff3, staff4};","lastModifiedDate":"2021-10-27"},{"lineNumber":332,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":333,"author":{"gitId":"CrimsonTitan79"},"content":"        for (Staff s : staff) {","lastModifiedDate":"2021-10-27"},{"lineNumber":334,"author":{"gitId":"CrimsonTitan79"},"content":"            testStaffList.setLastId(s.getId());","lastModifiedDate":"2021-10-27"},{"lineNumber":335,"author":{"gitId":"CrimsonTitan79"},"content":"            testStaffList.addPerson(s);","lastModifiedDate":"2021-10-27"},{"lineNumber":336,"author":{"gitId":"CrimsonTitan79"},"content":"        }","lastModifiedDate":"2021-10-27"},{"lineNumber":337,"author":{"gitId":"CrimsonTitan79"},"content":"        return testStaffList.getStorageString();","lastModifiedDate":"2021-10-27"},{"lineNumber":338,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":339,"author":{"gitId":"CrimsonTitan79"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":340,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":341,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":342,"author":{"gitId":"CrimsonTitan79"},"content":"    /**","lastModifiedDate":"2021-10-27"},{"lineNumber":343,"author":{"gitId":"CrimsonTitan79"},"content":"     * Create a test PatientList containing Patient objects.","lastModifiedDate":"2021-10-27"},{"lineNumber":344,"author":{"gitId":"CrimsonTitan79"},"content":"     *","lastModifiedDate":"2021-10-27"},{"lineNumber":345,"author":{"gitId":"CrimsonTitan79"},"content":"     * @return a test PatientList","lastModifiedDate":"2021-10-27"},{"lineNumber":346,"author":{"gitId":"CrimsonTitan79"},"content":"     * @throws MedBotException if any patient instantiation fails","lastModifiedDate":"2021-10-27"},{"lineNumber":347,"author":{"gitId":"CrimsonTitan79"},"content":"     */","lastModifiedDate":"2021-10-27"},{"lineNumber":348,"author":{"gitId":"CrimsonTitan79"},"content":"    private String getTestAppointmentListStorageString() throws MedBotException {","lastModifiedDate":"2021-10-27"},{"lineNumber":349,"author":{"gitId":"CrimsonTitan79"},"content":"        SchedulerAppointmentList testAppointmentList \u003d new SchedulerAppointmentList();","lastModifiedDate":"2021-10-27"},{"lineNumber":350,"author":{"gitId":"CrimsonTitan79"},"content":"        Appointment appointment1 \u003d createAppointment(\"1\", \"1\", \"1\", \"010122 1000\");","lastModifiedDate":"2021-10-27"},{"lineNumber":351,"author":{"gitId":"CrimsonTitan79"},"content":"        Appointment appointment2 \u003d createAppointment(\"2\", \"2\", \"1\", \"020122 1100\");","lastModifiedDate":"2021-10-27"},{"lineNumber":352,"author":{"gitId":"CrimsonTitan79"},"content":"        Appointment appointment3 \u003d createAppointment(\"3\", \"4\", \"2\", \"030122 1200\");","lastModifiedDate":"2021-10-27"},{"lineNumber":353,"author":{"gitId":"CrimsonTitan79"},"content":"        Appointment appointment4 \u003d createAppointment(\"6\", \"6\", \"2\", \"040122 1300\");","lastModifiedDate":"2021-10-27"},{"lineNumber":354,"author":{"gitId":"CrimsonTitan79"},"content":"        Appointment appointment5 \u003d createAppointment(\"8\", \"7\", \"6\", \"050122 1400\");","lastModifiedDate":"2021-10-27"},{"lineNumber":355,"author":{"gitId":"CrimsonTitan79"},"content":"        Appointment appointment6 \u003d createAppointment(\"9\", \"10\", \"7\", \"060122 1500\");","lastModifiedDate":"2021-10-27"},{"lineNumber":356,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":357,"author":{"gitId":"CrimsonTitan79"},"content":"        Appointment[] appointments \u003d {appointment1, appointment2, appointment3, appointment4, appointment5, appointment6","lastModifiedDate":"2021-10-27"},{"lineNumber":358,"author":{"gitId":"CrimsonTitan79"},"content":"        };","lastModifiedDate":"2021-10-27"},{"lineNumber":359,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":360,"author":{"gitId":"CrimsonTitan79"},"content":"        for (Appointment a : appointments) {","lastModifiedDate":"2021-10-27"},{"lineNumber":361,"author":{"gitId":"CrimsonTitan79"},"content":"            testAppointmentList.setLastId(a.getId());","lastModifiedDate":"2021-10-27"},{"lineNumber":362,"author":{"gitId":"CrimsonTitan79"},"content":"            testAppointmentList.addAppointment(a);","lastModifiedDate":"2021-10-27"},{"lineNumber":363,"author":{"gitId":"CrimsonTitan79"},"content":"        }","lastModifiedDate":"2021-10-27"},{"lineNumber":364,"author":{"gitId":"CrimsonTitan79"},"content":"        return testAppointmentList.getStorageString();","lastModifiedDate":"2021-10-27"},{"lineNumber":365,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":366,"author":{"gitId":"CrimsonTitan79"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":367,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":368,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":369,"author":{"gitId":"CrimsonTitan79"},"content":"    /**","lastModifiedDate":"2021-10-27"},{"lineNumber":370,"author":{"gitId":"CrimsonTitan79"},"content":"     * Instantiate a patient object with the given parameters.","lastModifiedDate":"2021-10-27"},{"lineNumber":371,"author":{"gitId":"CrimsonTitan79"},"content":"     *","lastModifiedDate":"2021-10-27"},{"lineNumber":372,"author":{"gitId":"CrimsonTitan79"},"content":"     * @param id                 patientId","lastModifiedDate":"2021-10-27"},{"lineNumber":373,"author":{"gitId":"CrimsonTitan79"},"content":"     * @param icNumber           I/C number of patient","lastModifiedDate":"2021-10-27"},{"lineNumber":374,"author":{"gitId":"CrimsonTitan79"},"content":"     * @param name               name of patient","lastModifiedDate":"2021-10-27"},{"lineNumber":375,"author":{"gitId":"CrimsonTitan79"},"content":"     * @param phoneNumber        phone number of patient","lastModifiedDate":"2021-10-27"},{"lineNumber":376,"author":{"gitId":"CrimsonTitan79"},"content":"     * @param emailAddress       email address of patient","lastModifiedDate":"2021-10-27"},{"lineNumber":377,"author":{"gitId":"CrimsonTitan79"},"content":"     * @param residentialAddress residential address of patient","lastModifiedDate":"2021-10-27"},{"lineNumber":378,"author":{"gitId":"CrimsonTitan79"},"content":"     * @return a patient object","lastModifiedDate":"2021-10-27"},{"lineNumber":379,"author":{"gitId":"CrimsonTitan79"},"content":"     * @throws MedBotException if fail to update any patient parameters","lastModifiedDate":"2021-10-27"},{"lineNumber":380,"author":{"gitId":"CrimsonTitan79"},"content":"     */","lastModifiedDate":"2021-10-27"},{"lineNumber":381,"author":{"gitId":"CrimsonTitan79"},"content":"    private Person createPerson(PersonType personType, int id, String icNumber, String name,","lastModifiedDate":"2021-10-27"},{"lineNumber":382,"author":{"gitId":"CrimsonTitan79"},"content":"                                String phoneNumber, String emailAddress,","lastModifiedDate":"2021-10-27"},{"lineNumber":383,"author":{"gitId":"CrimsonTitan79"},"content":"                                String residentialAddress)","lastModifiedDate":"2021-10-27"},{"lineNumber":384,"author":{"gitId":"CrimsonTitan79"},"content":"            throws MedBotException {","lastModifiedDate":"2021-10-27"},{"lineNumber":385,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":386,"author":{"gitId":"CrimsonTitan79"},"content":"        Person person;","lastModifiedDate":"2021-11-07"},{"lineNumber":387,"author":{"gitId":"CrimsonTitan79"},"content":"        switch (personType) {","lastModifiedDate":"2021-10-27"},{"lineNumber":388,"author":{"gitId":"CrimsonTitan79"},"content":"        case PATIENT:","lastModifiedDate":"2021-10-27"},{"lineNumber":389,"author":{"gitId":"CrimsonTitan79"},"content":"            person \u003d new Patient();","lastModifiedDate":"2021-10-27"},{"lineNumber":390,"author":{"gitId":"CrimsonTitan79"},"content":"            break;","lastModifiedDate":"2021-10-27"},{"lineNumber":391,"author":{"gitId":"CrimsonTitan79"},"content":"        case STAFF:","lastModifiedDate":"2021-10-27"},{"lineNumber":392,"author":{"gitId":"CrimsonTitan79"},"content":"            person \u003d new Staff();","lastModifiedDate":"2021-10-27"},{"lineNumber":393,"author":{"gitId":"CrimsonTitan79"},"content":"            break;","lastModifiedDate":"2021-10-27"},{"lineNumber":394,"author":{"gitId":"CrimsonTitan79"},"content":"        default:","lastModifiedDate":"2021-10-27"},{"lineNumber":395,"author":{"gitId":"CrimsonTitan79"},"content":"            throw new MedBotException(\"Invalid personType\");","lastModifiedDate":"2021-10-27"},{"lineNumber":396,"author":{"gitId":"CrimsonTitan79"},"content":"        }","lastModifiedDate":"2021-10-27"},{"lineNumber":397,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":398,"author":{"gitId":"CrimsonTitan79"},"content":"        person.setId(id);","lastModifiedDate":"2021-10-27"},{"lineNumber":399,"author":{"gitId":"CrimsonTitan79"},"content":"        String[] parameterPrefixes \u003d {\"i/\", \"n/\", \"p/\", \"e/\", \"a/\"};","lastModifiedDate":"2021-10-27"},{"lineNumber":400,"author":{"gitId":"CrimsonTitan79"},"content":"        String[] parameters \u003d {icNumber, name, phoneNumber, emailAddress, residentialAddress};","lastModifiedDate":"2021-10-27"},{"lineNumber":401,"author":{"gitId":"CrimsonTitan79"},"content":"        ArrayList\u003cString\u003e prefixPlusPersonParameters \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-27"},{"lineNumber":402,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":403,"author":{"gitId":"CrimsonTitan79"},"content":"        for (int i \u003d 0; i \u003c parameterPrefixes.length; i++) {","lastModifiedDate":"2021-10-27"},{"lineNumber":404,"author":{"gitId":"CrimsonTitan79"},"content":"            if (parameters[i].isBlank()) {","lastModifiedDate":"2021-10-27"},{"lineNumber":405,"author":{"gitId":"CrimsonTitan79"},"content":"                continue;","lastModifiedDate":"2021-10-27"},{"lineNumber":406,"author":{"gitId":"CrimsonTitan79"},"content":"            }","lastModifiedDate":"2021-10-27"},{"lineNumber":407,"author":{"gitId":"CrimsonTitan79"},"content":"            String prefixPlusPersonParameter \u003d parameterPrefixes[i] + parameters[i];","lastModifiedDate":"2021-10-27"},{"lineNumber":408,"author":{"gitId":"CrimsonTitan79"},"content":"            prefixPlusPersonParameters.add(prefixPlusPersonParameter);","lastModifiedDate":"2021-10-27"},{"lineNumber":409,"author":{"gitId":"CrimsonTitan79"},"content":"        }","lastModifiedDate":"2021-10-27"},{"lineNumber":410,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":411,"author":{"gitId":"CrimsonTitan79"},"content":"        for (String prefixPlusPersonParameter : prefixPlusPersonParameters) {","lastModifiedDate":"2021-10-27"},{"lineNumber":412,"author":{"gitId":"CrimsonTitan79"},"content":"            updatePersonalInformation(person, prefixPlusPersonParameter);","lastModifiedDate":"2021-10-27"},{"lineNumber":413,"author":{"gitId":"CrimsonTitan79"},"content":"        }","lastModifiedDate":"2021-10-27"},{"lineNumber":414,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":415,"author":{"gitId":"CrimsonTitan79"},"content":"        return person;","lastModifiedDate":"2021-10-27"},{"lineNumber":416,"author":{"gitId":"CrimsonTitan79"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":417,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":418,"author":{"gitId":"CrimsonTitan79"},"content":"    private Appointment createAppointment(String id, String patientId, String staffId, String dateTimeString)","lastModifiedDate":"2021-10-27"},{"lineNumber":419,"author":{"gitId":"CrimsonTitan79"},"content":"            throws MedBotException {","lastModifiedDate":"2021-10-27"},{"lineNumber":420,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":421,"author":{"gitId":"CrimsonTitan79"},"content":"        String[] parameterPrefixes \u003d {\"d/\", \"p/\", \"s/\"};","lastModifiedDate":"2021-10-27"},{"lineNumber":422,"author":{"gitId":"CrimsonTitan79"},"content":"        String[] parameters \u003d {dateTimeString, patientId, staffId};","lastModifiedDate":"2021-10-27"},{"lineNumber":423,"author":{"gitId":"CrimsonTitan79"},"content":"        ArrayList\u003cString\u003e prefixPlusAppointmentParameters \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-27"},{"lineNumber":424,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":425,"author":{"gitId":"CrimsonTitan79"},"content":"        for (int i \u003d 0; i \u003c parameterPrefixes.length; i++) {","lastModifiedDate":"2021-10-27"},{"lineNumber":426,"author":{"gitId":"CrimsonTitan79"},"content":"            String prefixPlusPersonParameter \u003d parameterPrefixes[i] + parameters[i];","lastModifiedDate":"2021-10-27"},{"lineNumber":427,"author":{"gitId":"CrimsonTitan79"},"content":"            prefixPlusAppointmentParameters.add(prefixPlusPersonParameter);","lastModifiedDate":"2021-10-27"},{"lineNumber":428,"author":{"gitId":"CrimsonTitan79"},"content":"        }","lastModifiedDate":"2021-10-27"},{"lineNumber":429,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":430,"author":{"gitId":"CrimsonTitan79"},"content":"        Appointment appointment \u003d new Appointment();","lastModifiedDate":"2021-10-27"},{"lineNumber":431,"author":{"gitId":"CrimsonTitan79"},"content":"        appointment.setId(Integer.parseInt(id));","lastModifiedDate":"2021-10-27"},{"lineNumber":432,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":433,"author":{"gitId":"CrimsonTitan79"},"content":"        for (String prefixPlusAppointmentParameter : prefixPlusAppointmentParameters) {","lastModifiedDate":"2021-10-27"},{"lineNumber":434,"author":{"gitId":"CrimsonTitan79"},"content":"            updateAppointmentInformation(appointment, prefixPlusAppointmentParameter);","lastModifiedDate":"2021-10-27"},{"lineNumber":435,"author":{"gitId":"CrimsonTitan79"},"content":"        }","lastModifiedDate":"2021-10-27"},{"lineNumber":436,"author":{"gitId":"CrimsonTitan79"},"content":"        return appointment;","lastModifiedDate":"2021-10-27"},{"lineNumber":437,"author":{"gitId":"CrimsonTitan79"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":438,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":439,"author":{"gitId":"CrimsonTitan79"},"content":"    /**","lastModifiedDate":"2021-10-27"},{"lineNumber":440,"author":{"gitId":"CrimsonTitan79"},"content":"     * Scans a text file and converts it to a String.","lastModifiedDate":"2021-10-27"},{"lineNumber":441,"author":{"gitId":"CrimsonTitan79"},"content":"     *","lastModifiedDate":"2021-10-27"},{"lineNumber":442,"author":{"gitId":"CrimsonTitan79"},"content":"     * @param filePath path of the text file","lastModifiedDate":"2021-10-27"},{"lineNumber":443,"author":{"gitId":"CrimsonTitan79"},"content":"     * @return String of the contents of the text file","lastModifiedDate":"2021-10-27"},{"lineNumber":444,"author":{"gitId":"CrimsonTitan79"},"content":"     * @throws FileNotFoundException if text file does not exist of path invalid","lastModifiedDate":"2021-10-27"},{"lineNumber":445,"author":{"gitId":"CrimsonTitan79"},"content":"     */","lastModifiedDate":"2021-10-27"},{"lineNumber":446,"author":{"gitId":"CrimsonTitan79"},"content":"    private String scanFileToString(String filePath) throws FileNotFoundException {","lastModifiedDate":"2021-10-27"},{"lineNumber":447,"author":{"gitId":"CrimsonTitan79"},"content":"        File file \u003d new File(filePath);","lastModifiedDate":"2021-10-27"},{"lineNumber":448,"author":{"gitId":"CrimsonTitan79"},"content":"        Scanner s \u003d new Scanner(file);","lastModifiedDate":"2021-10-27"},{"lineNumber":449,"author":{"gitId":"CrimsonTitan79"},"content":"        String output \u003d \"\";","lastModifiedDate":"2021-10-27"},{"lineNumber":450,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":451,"author":{"gitId":"CrimsonTitan79"},"content":"        while (s.hasNext()) {","lastModifiedDate":"2021-10-27"},{"lineNumber":452,"author":{"gitId":"CrimsonTitan79"},"content":"            output +\u003d s.nextLine();","lastModifiedDate":"2021-10-27"},{"lineNumber":453,"author":{"gitId":"CrimsonTitan79"},"content":"        }","lastModifiedDate":"2021-10-27"},{"lineNumber":454,"author":{"gitId":"CrimsonTitan79"},"content":"        return output;","lastModifiedDate":"2021-10-27"},{"lineNumber":455,"author":{"gitId":"CrimsonTitan79"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":456,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":457,"author":{"gitId":"CrimsonTitan79"},"content":"    /**","lastModifiedDate":"2021-10-27"},{"lineNumber":458,"author":{"gitId":"CrimsonTitan79"},"content":"     * Delete saved test data text file from the JUNIT testing.","lastModifiedDate":"2021-10-27"},{"lineNumber":459,"author":{"gitId":"CrimsonTitan79"},"content":"     */","lastModifiedDate":"2021-10-27"},{"lineNumber":460,"author":{"gitId":"CrimsonTitan79"},"content":"    private void deleteSavedData() {","lastModifiedDate":"2021-10-27"},{"lineNumber":461,"author":{"gitId":"CrimsonTitan79"},"content":"        File savedPatientDataFile \u003d new File(PATIENT_DATA_SAVED);","lastModifiedDate":"2021-10-27"},{"lineNumber":462,"author":{"gitId":"CrimsonTitan79"},"content":"        File savedStaffDataFile \u003d new File(STAFF_DATA_SAVED);","lastModifiedDate":"2021-10-27"},{"lineNumber":463,"author":{"gitId":"CrimsonTitan79"},"content":"        File savedAppointmentDataFile \u003d new File(APPOINTMENT_DATA_SAVED);","lastModifiedDate":"2021-10-27"},{"lineNumber":464,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":465,"author":{"gitId":"CrimsonTitan79"},"content":"        savedPatientDataFile.delete();","lastModifiedDate":"2021-10-27"},{"lineNumber":466,"author":{"gitId":"CrimsonTitan79"},"content":"        savedStaffDataFile.delete();","lastModifiedDate":"2021-10-27"},{"lineNumber":467,"author":{"gitId":"CrimsonTitan79"},"content":"        savedAppointmentDataFile.delete();","lastModifiedDate":"2021-10-27"},{"lineNumber":468,"author":{"gitId":"CrimsonTitan79"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":469,"author":{"gitId":"CrimsonTitan79"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":470,"author":{"gitId":"CrimsonTitan79"},"content":"}","lastModifiedDate":"2021-10-27"}],"authorContributionMap":{"CrimsonTitan79":470}},{"path":"text-ui-test/runtest.sh","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# change to script directory","lastModifiedDate":"2020-05-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"cd \"${0%/*}\"","lastModifiedDate":"2020-05-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"cd ..","lastModifiedDate":"2020-05-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"./gradlew clean shadowJar","lastModifiedDate":"2020-05-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"cd text-ui-test","lastModifiedDate":"2020-05-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"java  -jar $(find ../build/libs/ -mindepth 1 -print -quit) \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2020-05-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"CrimsonTitan79"},"content":"diff EXPECTED.TXT ACTUAL.TXT","lastModifiedDate":"2021-10-10"},{"lineNumber":14,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    echo \"Test passed!\"","lastModifiedDate":"2020-05-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    echo \"Test failed!\"","lastModifiedDate":"2020-05-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"CrimsonTitan79":1,"-":20}}]
