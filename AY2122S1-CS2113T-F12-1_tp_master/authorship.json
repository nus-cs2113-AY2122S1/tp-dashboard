[{"path":"build.gradle","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"astralum"},"content":"    // https://mvnrepository.com/artifact/org.fusesource.jansi/jansi","lastModifiedDate":"2021-10-26"},{"lineNumber":14,"author":{"gitId":"astralum"},"content":"    implementation group: \u0027org.fusesource.jansi\u0027, name: \u0027jansi\u0027, version: \u00272.4.0\u0027","lastModifiedDate":"2021-10-26"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"xRossKoh"},"content":"    // https://mvnrepository.com/artifact/com.googlecode.json-simple/json-simple","lastModifiedDate":"2021-11-01"},{"lineNumber":18,"author":{"gitId":"xRossKoh"},"content":"    implementation group: \u0027com.googlecode.json-simple\u0027, name: \u0027json-simple\u0027, version: \u00271.1.1\u0027","lastModifiedDate":"2021-11-01"},{"lineNumber":19,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":33,"author":{"gitId":"astralum"},"content":"        systemProperty(\"junit.platform.output.capture.stdout\", true);","lastModifiedDate":"2021-10-14"},{"lineNumber":34,"author":{"gitId":"astralum"},"content":"        systemProperty(\"junit.platform.output.capture.stderr\", true);","lastModifiedDate":"2021-10-14"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"xRossKoh"},"content":"    mainClassName \u003d \"seedu.cardli.CardLI\"","lastModifiedDate":"2021-10-26"},{"lineNumber":40,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"xRossKoh"},"content":"    archiveBaseName \u003d \"cardli\"","lastModifiedDate":"2021-10-26"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"checkstyle {","lastModifiedDate":"2020-05-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.23\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":53,"author":{"gitId":"xkisxk"},"content":"    enableAssertions \u003d true","lastModifiedDate":"2021-10-10"},{"lineNumber":54,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"astralum":5,"xRossKoh":4,"xkisxk":1,"-":44}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# About us","lastModifiedDate":"2020-05-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"Display | Name | Github Profile | Portfolio ","lastModifiedDate":"2020-05-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"--------|:----:|:--------------:|:---------:","lastModifiedDate":"2020-05-24"},{"lineNumber":5,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":6,"author":{"gitId":"xRossKoh"},"content":"![](https://via.placeholder.com/100.png?text\u003dPhoto) | Koh Meng Kiat, Kenneth | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)","lastModifiedDate":"2021-10-01"},{"lineNumber":7,"author":{"gitId":"JWweiyin"},"content":"![](https://via.placeholder.com/100.png?text\u003dPhoto) | Joanne Wong Wei Yin | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)","lastModifiedDate":"2021-10-01"},{"lineNumber":8,"author":{"gitId":"ThaddeusLim99"},"content":"![](https://via.placeholder.com/100.png?text\u003dPhoto) | Thaddeus Lim | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)","lastModifiedDate":"2021-10-01"},{"lineNumber":9,"author":{"gitId":"xkisxk"},"content":"![](https://via.placeholder.com/100.png?text\u003dPhoto) | Jiang Xing Kai | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)","lastModifiedDate":"2021-10-01"},{"lineNumber":10,"author":{"gitId":"astralum"},"content":"![](https://via.placeholder.com/100.png?text\u003dPhoto) | Jin Minyue | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)","lastModifiedDate":"2021-10-01"}],"authorContributionMap":{"JWweiyin":1,"ThaddeusLim99":1,"astralum":1,"xRossKoh":2,"xkisxk":1,"-":4}},{"path":"docs/DeveloperGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# Developer Guide","lastModifiedDate":"2020-05-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":3,"author":{"gitId":"ThaddeusLim99"},"content":"![](assets/logo.png)","lastModifiedDate":"2021-11-03"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":5,"author":{"gitId":"ThaddeusLim99"},"content":"## Content","lastModifiedDate":"2021-11-07"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":7,"author":{"gitId":"ThaddeusLim99"},"content":"1. [Introduction](#1-introduction)\u003cbr/\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":8,"author":{"gitId":"ThaddeusLim99"},"content":"2. [Acknowledgements](#2-acknowledgements)\u003cbr/\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":9,"author":{"gitId":"ThaddeusLim99"},"content":"3. [Design](#3-design)\u003cbr/\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":10,"author":{"gitId":"ThaddeusLim99"},"content":"   3.1. [Model Component](#31-model-component)\u003cbr/\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":11,"author":{"gitId":"ThaddeusLim99"},"content":"   3.2. [UI Component](#32-ui-component)\u003cbr/\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":12,"author":{"gitId":"ThaddeusLim99"},"content":"   3.3. [Logic Component](#33-logic-component)\u003cbr/\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":13,"author":{"gitId":"ThaddeusLim99"},"content":"   3.4. [Storage Component](#34-storage-component)\u003cbr/\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":14,"author":{"gitId":"ThaddeusLim99"},"content":"4. [Implementation](#4-implementation)\u003cbr/\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":15,"author":{"gitId":"ThaddeusLim99"},"content":"   4.1. [Edit](#41-edit)\u003cbr/\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":16,"author":{"gitId":"ThaddeusLim99"},"content":"   \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.1.1 [EditDeckCommand](#411-editdeckcommand)\u003cbr/\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":17,"author":{"gitId":"ThaddeusLim99"},"content":"   \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.1.2 [EditCardCommand](#412-editcardcommand)\u003cbr/\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":18,"author":{"gitId":"ThaddeusLim99"},"content":"   4.2. [Move](#42-move)\u003cbr/\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":19,"author":{"gitId":"ThaddeusLim99"},"content":"   4.3. [Find](#43-find)\u003cbr/\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":20,"author":{"gitId":"ThaddeusLim99"},"content":"   4.4. [Test Feature](#44-test-feature)\u003cbr/\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":21,"author":{"gitId":"ThaddeusLim99"},"content":"   \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.4.1 [Test Setup](#441-test-setup)\u003cbr/\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":22,"author":{"gitId":"ThaddeusLim99"},"content":"   \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.4.2 [Testing Process](#442-testing-process)\u003cbr/\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":23,"author":{"gitId":"ThaddeusLim99"},"content":"   4.5. [Storage](#45-storage)\u003cbr/\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":24,"author":{"gitId":"JWweiyin"},"content":"   \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.5.1. [Writing to JSON files](#451-writing-to-json-files)\u003cbr/\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":25,"author":{"gitId":"JWweiyin"},"content":"   \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.5.2. [Reading from JSON files](#452-reading-from-json-files)\u003cbr/\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":26,"author":{"gitId":"ThaddeusLim99"},"content":"   \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.5.2.1. [ReadCardsFromFile](#4521-readcardsfromfile)\u003cbr/\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":27,"author":{"gitId":"ThaddeusLim99"},"content":"   \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.5.2.2. [ReadTestFromFile](#4522-readtestfromfile)\u003cbr/\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":28,"author":{"gitId":"ThaddeusLim99"},"content":"5. [Product Scope](#5-product-scope)\u003cbr/\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":29,"author":{"gitId":"ThaddeusLim99"},"content":"   5.1 [Target User Profile](#51-target-user-profile)\u003cbr/\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":30,"author":{"gitId":"ThaddeusLim99"},"content":"   5.2 [Value Proposition](#52-value-proposition)\u003cbr/\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":31,"author":{"gitId":"ThaddeusLim99"},"content":"6. [User Stories](#6-user-stories)\u003cbr/\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":32,"author":{"gitId":"ThaddeusLim99"},"content":"7. [Non-Functional Requirements](#7-non-functional-requirements)\u003cbr/\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":33,"author":{"gitId":"ThaddeusLim99"},"content":"8. [Glossary](#8-glossary)\u003cbr/\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":34,"author":{"gitId":"ThaddeusLim99"},"content":"9. [Instructions for Manual Mesting](#9-instructions-for-manual-testing)","lastModifiedDate":"2021-11-07"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":36,"author":{"gitId":"ThaddeusLim99"},"content":"## [1. Introduction](#content)","lastModifiedDate":"2021-11-07"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":38,"author":{"gitId":"JWweiyin"},"content":"CardLI is a Command Line Interface (CLI) desktop app that helps students manage their flashcards. It also allows","lastModifiedDate":"2021-11-07"},{"lineNumber":39,"author":{"gitId":"JWweiyin"},"content":"students to test and review their knowledge. All of this in one single platform.","lastModifiedDate":"2021-11-07"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":41,"author":{"gitId":"ThaddeusLim99"},"content":"## [2. Acknowledgements](#content)","lastModifiedDate":"2021-11-07"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":43,"author":{"gitId":"ThaddeusLim99"},"content":"* [__AB3:__](https://se-education.org/addressbook-level3/) For reference regarding the user guide and developer guide","lastModifiedDate":"2021-11-07"},{"lineNumber":44,"author":{"gitId":"JWweiyin"},"content":"* [__Jansi:__](https://mvnrepository.com/artifact/org.fusesource.jansi/jansi) For its ANSI escape sequence library,","lastModifiedDate":"2021-11-07"},{"lineNumber":45,"author":{"gitId":"JWweiyin"},"content":"  currently used in flashcard testing","lastModifiedDate":"2021-11-07"},{"lineNumber":46,"author":{"gitId":"JWweiyin"},"content":"* [__JSON.simple__](https://mvnrepository.com/artifact/com.googlecode.json-simple/json-simple) For saving and storing","lastModifiedDate":"2021-11-07"},{"lineNumber":47,"author":{"gitId":"JWweiyin"},"content":"  JSON objects.","lastModifiedDate":"2021-11-07"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":49,"author":{"gitId":"ThaddeusLim99"},"content":"## [3. Design](#content)","lastModifiedDate":"2021-11-07"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":51,"author":{"gitId":"JWweiyin"},"content":"CardLi has one main component, ```Main```, consisting of one class `CardLi`. It is responsible for:","lastModifiedDate":"2021-10-26"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":53,"author":{"gitId":"JWweiyin"},"content":"\u003cli\u003e At app launch: initializing the components in the correct sequence, and connecting them up with each other\u003c/li\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":54,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":55,"author":{"gitId":"JWweiyin"},"content":"![](assets/overallArchitectureDiagram.png)","lastModifiedDate":"2021-10-26"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":57,"author":{"gitId":"astralum"},"content":"The rest of the App consists of the following components:","lastModifiedDate":"2021-10-21"},{"lineNumber":58,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":59,"author":{"gitId":"JWweiyin"},"content":"* ```Model```: Holds the data of the App in memory.","lastModifiedDate":"2021-10-26"},{"lineNumber":60,"author":{"gitId":"astralum"},"content":"* ```UI```: The UI of the App","lastModifiedDate":"2021-10-21"},{"lineNumber":61,"author":{"gitId":"astralum"},"content":"* ```Logic```: The command executor","lastModifiedDate":"2021-10-21"},{"lineNumber":62,"author":{"gitId":"JWweiyin"},"content":"* ```Storage```: Reads and writes data from and to external files","lastModifiedDate":"2021-11-07"},{"lineNumber":63,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":64,"author":{"gitId":"astralum"},"content":"Each component is explained in the sections below.","lastModifiedDate":"2021-10-21"},{"lineNumber":65,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":66,"author":{"gitId":"ThaddeusLim99"},"content":"### [3.1. Model Component](#content)","lastModifiedDate":"2021-11-07"},{"lineNumber":67,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":68,"author":{"gitId":"JWweiyin"},"content":"![](assets/modelArchitectureDiagram2.png)","lastModifiedDate":"2021-11-06"},{"lineNumber":69,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":70,"author":{"gitId":"JWweiyin"},"content":"The `Model` component consists of two packages, `flashcard` and `testing`.","lastModifiedDate":"2021-11-07"},{"lineNumber":71,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":72,"author":{"gitId":"JWweiyin"},"content":"The `flashcard` package contains:","lastModifiedDate":"2021-11-07"},{"lineNumber":73,"author":{"gitId":"JWweiyin"},"content":"\u003cli\u003e DeckManager\u003c/li\u003e","lastModifiedDate":"2021-10-27"},{"lineNumber":74,"author":{"gitId":"JWweiyin"},"content":"\u003cli\u003e Deck \u003c/li\u003e","lastModifiedDate":"2021-10-27"},{"lineNumber":75,"author":{"gitId":"JWweiyin"},"content":"\u003cli\u003e FlashCard\u003c/li\u003e","lastModifiedDate":"2021-10-27"},{"lineNumber":76,"author":{"gitId":"JWweiyin"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-10-27"},{"lineNumber":77,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":78,"author":{"gitId":"JWweiyin"},"content":"The `testing` package contains:","lastModifiedDate":"2021-11-07"},{"lineNumber":79,"author":{"gitId":"JWweiyin"},"content":"\u003cli\u003e Answer\u003c/li\u003e","lastModifiedDate":"2021-10-27"},{"lineNumber":80,"author":{"gitId":"JWweiyin"},"content":"\u003cli\u003e TestManager\u003c/li\u003e","lastModifiedDate":"2021-10-27"},{"lineNumber":81,"author":{"gitId":"JWweiyin"},"content":"\u003cli\u003e TestHistory\u003c/li\u003e","lastModifiedDate":"2021-10-27"},{"lineNumber":82,"author":{"gitId":"JWweiyin"},"content":"\u003cli\u003e TestManager\u003c/li\u003e","lastModifiedDate":"2021-10-27"},{"lineNumber":83,"author":{"gitId":"JWweiyin"},"content":"\u003cli\u003e Countdown\u003c/li\u003e","lastModifiedDate":"2021-10-27"},{"lineNumber":84,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":85,"author":{"gitId":"JWweiyin"},"content":"A `Deck` contains a private ArrayList of `FlashCards`, and `DeckManager` contains a private ArrayList of `Decks`.","lastModifiedDate":"2021-11-07"},{"lineNumber":86,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":87,"author":{"gitId":"JWweiyin"},"content":"An `AnswerList` contains a private ArrayList of `Answers`, which is created by `TestManager` when the commands for the","lastModifiedDate":"2021-11-07"},{"lineNumber":88,"author":{"gitId":"JWweiyin"},"content":"test functions are executed (`ReviewCommand`, `TestCommand`).","lastModifiedDate":"2021-11-07"},{"lineNumber":89,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":90,"author":{"gitId":"JWweiyin"},"content":"The `Countdown` class creates a timer that displays the time left for a question during a Test or Review.","lastModifiedDate":"2021-11-06"},{"lineNumber":91,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":92,"author":{"gitId":"ThaddeusLim99"},"content":"### [3.2. UI Component](#content)","lastModifiedDate":"2021-11-07"},{"lineNumber":93,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":94,"author":{"gitId":"JWweiyin"},"content":"The UI component consists of two classes, ```CardLiUi``` and ```TestUi```.","lastModifiedDate":"2021-11-07"},{"lineNumber":95,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":96,"author":{"gitId":"JWweiyin"},"content":"` CardLiUi` outputs greeting messages, exit messages, help messages and command results to the user on command. It takes","lastModifiedDate":"2021-11-07"},{"lineNumber":97,"author":{"gitId":"JWweiyin"},"content":"in input from the user when the program is not in Test or Review.","lastModifiedDate":"2021-11-07"},{"lineNumber":98,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":99,"author":{"gitId":"JWweiyin"},"content":"`TestUi` handles the input and output for the Test and Review functions. More details are explained in the","lastModifiedDate":"2021-11-07"},{"lineNumber":100,"author":{"gitId":"JWweiyin"},"content":"implementation section for Test.","lastModifiedDate":"2021-11-07"},{"lineNumber":101,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":102,"author":{"gitId":"ThaddeusLim99"},"content":"### [3.3. Logic Component](#content)","lastModifiedDate":"2021-11-07"},{"lineNumber":103,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":104,"author":{"gitId":"JWweiyin"},"content":"![](assets/logicArchitectureDiagram.png)","lastModifiedDate":"2021-10-26"},{"lineNumber":105,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":106,"author":{"gitId":"JWweiyin"},"content":"\u003e ℹ️  `XYZCommand` is a placeholder name for subclasses of the abstract `Command` class (e.g. `AddCardsCommand`, `DeleteDeckCommand`, `TestCommand`, etc.)","lastModifiedDate":"2021-11-07"},{"lineNumber":107,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":108,"author":{"gitId":"JWweiyin"},"content":"The above diagram is a partial architecture diagram of the `Logic` component. It executes user commands via Command","lastModifiedDate":"2021-11-07"},{"lineNumber":109,"author":{"gitId":"JWweiyin"},"content":"classes with the appropriate arguments as given by the Parser classes.","lastModifiedDate":"2021-11-07"},{"lineNumber":110,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":111,"author":{"gitId":"JWweiyin"},"content":"CardLi’s user commands operate on a 2-tier structure: a Systemwide level and a Deck level. The Systemwide level commands","lastModifiedDate":"2021-11-07"},{"lineNumber":112,"author":{"gitId":"JWweiyin"},"content":"execute commands related to the management of decks, testing and reviewing, while the Deck level commands execute","lastModifiedDate":"2021-11-07"},{"lineNumber":113,"author":{"gitId":"JWweiyin"},"content":"commands related to flashcards in a specific deck. The specific implementations are elaborated on in the *","lastModifiedDate":"2021-11-07"},{"lineNumber":114,"author":{"gitId":"JWweiyin"},"content":"Implementation* section.","lastModifiedDate":"2021-11-07"},{"lineNumber":115,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":116,"author":{"gitId":"JWweiyin"},"content":"How the `Logic` component works:","lastModifiedDate":"2021-10-25"},{"lineNumber":117,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":118,"author":{"gitId":"JWweiyin"},"content":"1. When `Main` is called upon to execute a command, `Inner Parser` or `Outer Parser` parses the user input to get the","lastModifiedDate":"2021-11-07"},{"lineNumber":119,"author":{"gitId":"JWweiyin"},"content":"   command word.","lastModifiedDate":"2021-11-07"},{"lineNumber":120,"author":{"gitId":"JWweiyin"},"content":"2. According to the command word, a subclass of the `Command` object (e.g. `AddCardsCommand`, `DeleteDeckCommand`, etc.)","lastModifiedDate":"2021-11-07"},{"lineNumber":121,"author":{"gitId":"JWweiyin"},"content":"   is created.","lastModifiedDate":"2021-11-07"},{"lineNumber":122,"author":{"gitId":"JWweiyin"},"content":"3. The command communicates with the `Model` when it is executed (e.g. to add a flashcard).","lastModifiedDate":"2021-11-07"},{"lineNumber":123,"author":{"gitId":"JWweiyin"},"content":"4. The result of the command execution is encapsulated as a `CommandResult` object which is returned to the `UI`","lastModifiedDate":"2021-11-07"},{"lineNumber":124,"author":{"gitId":"JWweiyin"},"content":"   from `Logic` to be processed.","lastModifiedDate":"2021-11-07"},{"lineNumber":125,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":126,"author":{"gitId":"JWweiyin"},"content":"![](assets/parserArchitectureDiagram.png)","lastModifiedDate":"2021-10-26"},{"lineNumber":127,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":128,"author":{"gitId":"JWweiyin"},"content":"The architecture diagram above contains the parser classes in `Logic` that are used for parsing a user command.","lastModifiedDate":"2021-11-07"},{"lineNumber":129,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":130,"author":{"gitId":"JWweiyin"},"content":"How the parsing works:","lastModifiedDate":"2021-10-25"},{"lineNumber":131,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":132,"author":{"gitId":"JWweiyin"},"content":"`Inner Parser` or `Outer Parser` creates a `XYZCommand` which in turn creates its corresponding `XYZCommandParser`","lastModifiedDate":"2021-11-07"},{"lineNumber":133,"author":{"gitId":"JWweiyin"},"content":"(e.g. when `InnerParser` creates a `EditCardCommand`, `EditCardCommand` creates a `EditCardParser`.)","lastModifiedDate":"2021-11-07"},{"lineNumber":134,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":135,"author":{"gitId":"JWweiyin"},"content":"All `XYZCommandParser` classes implement the `CommandArgumentParser` interface.","lastModifiedDate":"2021-10-25"},{"lineNumber":136,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":137,"author":{"gitId":"ThaddeusLim99"},"content":"### [3.4. Storage Component](#content)","lastModifiedDate":"2021-11-07"},{"lineNumber":138,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":139,"author":{"gitId":"JWweiyin"},"content":"The `Storage` component:","lastModifiedDate":"2021-11-06"},{"lineNumber":140,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":141,"author":{"gitId":"astralum"},"content":"* Saves all the decks","lastModifiedDate":"2021-10-21"},{"lineNumber":142,"author":{"gitId":"astralum"},"content":"* Saves all the flashcards","lastModifiedDate":"2021-10-21"},{"lineNumber":143,"author":{"gitId":"JWweiyin"},"content":"* Saves all the flashcard scores","lastModifiedDate":"2021-11-07"},{"lineNumber":144,"author":{"gitId":"astralum"},"content":"* Remembers which deck each flashcard belongs to","lastModifiedDate":"2021-10-21"},{"lineNumber":145,"author":{"gitId":"astralum"},"content":"* Saves the results of each test","lastModifiedDate":"2021-10-21"},{"lineNumber":146,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":147,"author":{"gitId":"JWweiyin"},"content":"All app data is saved as JSON files.","lastModifiedDate":"2021-11-06"},{"lineNumber":148,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":149,"author":{"gitId":"ThaddeusLim99"},"content":"## [4. Implementation](#content)","lastModifiedDate":"2021-11-07"},{"lineNumber":150,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":151,"author":{"gitId":"ThaddeusLim99"},"content":"\u003e ℹ️ Note: In the sequence diagrams below, the lifeline for objects should end at the destroy marker (X) but due","lastModifiedDate":"2021-11-07"},{"lineNumber":152,"author":{"gitId":"ThaddeusLim99"},"content":"\u003e to a limitation of PLANTUML, the lifeline reaches the end of the diagram.","lastModifiedDate":"2021-11-07"},{"lineNumber":153,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":154,"author":{"gitId":"ThaddeusLim99"},"content":"### [4.1. Edit](#content)","lastModifiedDate":"2021-11-07"},{"lineNumber":155,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":156,"author":{"gitId":"JWweiyin"},"content":"This subsection provides details on the implementation of the commands that enable the editing of the `Deck`","lastModifiedDate":"2021-11-07"},{"lineNumber":157,"author":{"gitId":"JWweiyin"},"content":"and `FlashCard` objects.","lastModifiedDate":"2021-11-07"},{"lineNumber":158,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":159,"author":{"gitId":"ThaddeusLim99"},"content":"#### [4.1.1. `EditDeckCommand`](#content)","lastModifiedDate":"2021-11-07"},{"lineNumber":160,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":161,"author":{"gitId":"JWweiyin"},"content":"Given below is the sequence diagram for `edit` (Deck):","lastModifiedDate":"2021-10-25"},{"lineNumber":162,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":163,"author":{"gitId":"ThaddeusLim99"},"content":"![](assets/editDeckCommandSeqDiagram.png)","lastModifiedDate":"2021-10-26"},{"lineNumber":164,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":165,"author":{"gitId":"JWweiyin"},"content":"The `EditDeckCommand` allows the changing of the name of the `Deck`. The user can only edit the `name` attribute of the","lastModifiedDate":"2021-11-07"},{"lineNumber":166,"author":{"gitId":"JWweiyin"},"content":"`Deck` object, which represents the name of the deck.","lastModifiedDate":"2021-11-07"},{"lineNumber":167,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":168,"author":{"gitId":"JWweiyin"},"content":"By entering the `edit` command in the `OuterParser` class, an `EditDeckCommand` object is created and its constructor is","lastModifiedDate":"2021-11-07"},{"lineNumber":169,"author":{"gitId":"JWweiyin"},"content":"called. This object is returned to `CardLi` class, which then calls the `execute()` method of the `EditDeckCommand`","lastModifiedDate":"2021-11-07"},{"lineNumber":170,"author":{"gitId":"JWweiyin"},"content":"object.","lastModifiedDate":"2021-11-07"},{"lineNumber":171,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":172,"author":{"gitId":"ThaddeusLim99"},"content":"The `execute()` method in the `EditDeckCommand` class self-invokes the `prepareEditDeckCommand()` method, which helps","lastModifiedDate":"2021-10-26"},{"lineNumber":173,"author":{"gitId":"ThaddeusLim99"},"content":"the handling of edge cases as well as format the method arguments. In turn, `prepareEditDeckCommand()` self-invokes the","lastModifiedDate":"2021-10-26"},{"lineNumber":174,"author":{"gitId":"ThaddeusLim99"},"content":"`prepareDeckIndex` method, which handles the formatting of the deck index specified by the user. `prepareDeckIndex()`","lastModifiedDate":"2021-10-26"},{"lineNumber":175,"author":{"gitId":"ThaddeusLim99"},"content":"returns `deck`, of string type, which represents the index of the deck to be edited. `prepareEditDeckCommand()` will then return a","lastModifiedDate":"2021-11-08"},{"lineNumber":176,"author":{"gitId":"JWweiyin"},"content":"string array, `preparedArguments`, which represents the arguments for the next method call.","lastModifiedDate":"2021-11-07"},{"lineNumber":177,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":178,"author":{"gitId":"ThaddeusLim99"},"content":"The `execute()` method will then call the `editDeck()` method of the `DeckManager` class, which in turn calls the","lastModifiedDate":"2021-10-26"},{"lineNumber":179,"author":{"gitId":"ThaddeusLim99"},"content":"`setName()` method of the `Deck` class. Once `editDeck()` is completed, a message of string type is returned to the","lastModifiedDate":"2021-10-26"},{"lineNumber":180,"author":{"gitId":"ThaddeusLim99"},"content":"`execute()` method. The message is stored in a `CommandResult` class, which is then returned to `CardLi`.","lastModifiedDate":"2021-10-26"},{"lineNumber":181,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":182,"author":{"gitId":"JWweiyin"},"content":"`CardLi` then calls upon the `printResult()` method of the `CardLiUi` class to print the message to the user.","lastModifiedDate":"2021-11-07"},{"lineNumber":183,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":184,"author":{"gitId":"ThaddeusLim99"},"content":"#### [4.1.2. `EditCardCommand`](#content)","lastModifiedDate":"2021-11-07"},{"lineNumber":185,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":186,"author":{"gitId":"ThaddeusLim99"},"content":"![](assets/editCardCommandSeqDiagram.png)","lastModifiedDate":"2021-10-26"},{"lineNumber":187,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":188,"author":{"gitId":"JWweiyin"},"content":"The `EditCardCommand` allows the changing of the content of the `FlashCard`. The user can decide to change either","lastModifiedDate":"2021-11-07"},{"lineNumber":189,"author":{"gitId":"JWweiyin"},"content":"the `front`","lastModifiedDate":"2021-11-07"},{"lineNumber":190,"author":{"gitId":"ThaddeusLim99"},"content":"or `back` attributes of the `FlashCard`object, which represents the front and back side of the card.","lastModifiedDate":"2021-10-21"},{"lineNumber":191,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":192,"author":{"gitId":"ThaddeusLim99"},"content":"By entering the edit command in the `InnerParser` class, an `EditCardCommand` object is created and its constructor is","lastModifiedDate":"2021-10-26"},{"lineNumber":193,"author":{"gitId":"JWweiyin"},"content":"called. This object is returned to `CardLi` class, which then calls the `execute()` method of the `EditCardCommand`","lastModifiedDate":"2021-11-07"},{"lineNumber":194,"author":{"gitId":"JWweiyin"},"content":"object.","lastModifiedDate":"2021-11-07"},{"lineNumber":195,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":196,"author":{"gitId":"ThaddeusLim99"},"content":"The `execute()` method in the `EditCardCommand` class self-invokes the `prepareEditCardCommand()` method, which helps","lastModifiedDate":"2021-10-26"},{"lineNumber":197,"author":{"gitId":"JWweiyin"},"content":"the handling of edge cases as well as format the method arguments. In turn, `prepareEditCardCommand()` self-invokes the","lastModifiedDate":"2021-11-07"},{"lineNumber":198,"author":{"gitId":"ThaddeusLim99"},"content":"`prepareCardIndex` method, which handles the formatting of the card index specified by the user. `prepareCardIndex()`","lastModifiedDate":"2021-10-26"},{"lineNumber":199,"author":{"gitId":"ThaddeusLim99"},"content":"returns the index of the card to be edited as a string. `prepareEditCardCommand()` will then return a string array, ","lastModifiedDate":"2021-11-08"},{"lineNumber":200,"author":{"gitId":"ThaddeusLim99"},"content":"`preparedArguments`, which represents the arguments for the next method call.","lastModifiedDate":"2021-11-08"},{"lineNumber":201,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":202,"author":{"gitId":"ThaddeusLim99"},"content":"The `execute()` method will then call the `editCard()` method of the `Deck` class, which in turn calls the","lastModifiedDate":"2021-10-26"},{"lineNumber":203,"author":{"gitId":"JWweiyin"},"content":"`setFront()` or `setBack()` method of the `FlashCard` class. Once `editCard()` is completed, a message of string type is","lastModifiedDate":"2021-11-07"},{"lineNumber":204,"author":{"gitId":"ThaddeusLim99"},"content":"returned to the `execute()` method. The message is stored in a `CommandResult` class, which is then returned to ","lastModifiedDate":"2021-11-08"},{"lineNumber":205,"author":{"gitId":"ThaddeusLim99"},"content":"`CardLi`.","lastModifiedDate":"2021-11-08"},{"lineNumber":206,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":207,"author":{"gitId":"JWweiyin"},"content":"`CardLi` then calls upon the `printResult()` method of the `CardLiUi` class to print the message to the user.","lastModifiedDate":"2021-11-07"},{"lineNumber":208,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":209,"author":{"gitId":"ThaddeusLim99"},"content":"### [4.2. Move](#content)","lastModifiedDate":"2021-11-07"},{"lineNumber":210,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":211,"author":{"gitId":"ThaddeusLim99"},"content":"![](assets/moveCardCommandSeqDiagram.png)","lastModifiedDate":"2021-10-26"},{"lineNumber":212,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":213,"author":{"gitId":"JWweiyin"},"content":"This subsection provides details on the implementation of the `moveCardCommand`. This command enables moving of a card ","lastModifiedDate":"2021-11-07"},{"lineNumber":214,"author":{"gitId":"JWweiyin"},"content":"in a deck the user is currently in to another deck.","lastModifiedDate":"2021-11-07"},{"lineNumber":215,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":216,"author":{"gitId":"ThaddeusLim99"},"content":"By entering the move command in the `InnerParser` class, an `MoveCardCommand` object is created and its constructor is","lastModifiedDate":"2021-11-07"},{"lineNumber":217,"author":{"gitId":"JWweiyin"},"content":"called. This object is returned to `CardLi` class, which then calls the `execute()` method of the `MoveCardCommand` ","lastModifiedDate":"2021-11-07"},{"lineNumber":218,"author":{"gitId":"JWweiyin"},"content":"object.","lastModifiedDate":"2021-11-07"},{"lineNumber":219,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":220,"author":{"gitId":"ThaddeusLim99"},"content":"The `execute()` method in the `MoveCardCommand` class self-invokes the `prepareMoveCardCommand()` method, which helps","lastModifiedDate":"2021-10-26"},{"lineNumber":221,"author":{"gitId":"ThaddeusLim99"},"content":"the handling of edge cases as well as format the method arguments. In turn, `prepareMoveCardCommand()` self-invokes the","lastModifiedDate":"2021-10-26"},{"lineNumber":222,"author":{"gitId":"ThaddeusLim99"},"content":"`prepareCardIndex` method, which handles the formatting of the card index specified by the user. After this,","lastModifiedDate":"2021-11-08"},{"lineNumber":223,"author":{"gitId":"ThaddeusLim99"},"content":"`prepareMoveCardCommand()` self invokes the `prepareDeckIndex` method, which handles the formatting of the deck index ","lastModifiedDate":"2021-11-08"},{"lineNumber":224,"author":{"gitId":"ThaddeusLim99"},"content":"specified by the user.`prepareCardIndex()` returns `card`, of string type, which represents the index of the card to be ","lastModifiedDate":"2021-11-08"},{"lineNumber":225,"author":{"gitId":"ThaddeusLim99"},"content":"edited. `prepareDeckIndex()`returns `deck`, of string type, which represents the index of the deck to be edited.","lastModifiedDate":"2021-11-08"},{"lineNumber":226,"author":{"gitId":"ThaddeusLim99"},"content":"`prepareMoveCommand()` will then return a string array, `preparedArguments`, which represents the arguments for the next ","lastModifiedDate":"2021-11-08"},{"lineNumber":227,"author":{"gitId":"ThaddeusLim99"},"content":"method call.","lastModifiedDate":"2021-11-08"},{"lineNumber":228,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":229,"author":{"gitId":"ThaddeusLim99"},"content":"The `execute()` method will then call the `moveCard()` method of the `DeckManager` class, which in turn calls the","lastModifiedDate":"2021-10-26"},{"lineNumber":230,"author":{"gitId":"ThaddeusLim99"},"content":"`getCard()` method of the `Deck` class to get a copy of the card to be moved. `DeckManager` then calls the ","lastModifiedDate":"2021-11-08"},{"lineNumber":231,"author":{"gitId":"ThaddeusLim99"},"content":"`addFlashCard()` method of the `Deck` class to add the card to the deck specified by the user. Next, `DeckManager` calls","lastModifiedDate":"2021-11-08"},{"lineNumber":232,"author":{"gitId":"ThaddeusLim99"},"content":"the `deleteFlashCard()` method of the `Deck` class to delete the card from the deck it was from. Once `moveCard()` is ","lastModifiedDate":"2021-11-08"},{"lineNumber":233,"author":{"gitId":"ThaddeusLim99"},"content":"completed, a message of string type is returned to the `execute()` method. The message is stored in a `CommandResult` ","lastModifiedDate":"2021-11-08"},{"lineNumber":234,"author":{"gitId":"ThaddeusLim99"},"content":"class, which is then returned to `CardLi`.","lastModifiedDate":"2021-11-08"},{"lineNumber":235,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":236,"author":{"gitId":"JWweiyin"},"content":"`CardLi` then calls upon the `printResult()` method of the `CardLiUi` class to print the message to the user.","lastModifiedDate":"2021-11-07"},{"lineNumber":237,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":238,"author":{"gitId":"ThaddeusLim99"},"content":"### [4.3. Find](#content)","lastModifiedDate":"2021-11-07"},{"lineNumber":239,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":240,"author":{"gitId":"JWweiyin"},"content":"![](assets/findSeqDiagram.png)","lastModifiedDate":"2021-11-07"},{"lineNumber":241,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":242,"author":{"gitId":"JWweiyin"},"content":"Given above is the sequence diagram of the `find` function. This feature allows users of CardLI to find a","lastModifiedDate":"2021-11-07"},{"lineNumber":243,"author":{"gitId":"JWweiyin"},"content":"`FlashCard` by providing a search term to the input following the command term `find`. By invoking this function the","lastModifiedDate":"2021-11-07"},{"lineNumber":244,"author":{"gitId":"JWweiyin"},"content":"user can view specific `FlashCards` matching the search term from the main menu, instead of entering each `Deck` and","lastModifiedDate":"2021-11-07"},{"lineNumber":245,"author":{"gitId":"JWweiyin"},"content":"manually looking through the list of `FlashCards` for the desired ones.","lastModifiedDate":"2021-11-07"},{"lineNumber":246,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":247,"author":{"gitId":"JWweiyin"},"content":"Currently, `find` is implemented at the Systemwide level. After the `CardLiUi` handles the user input,","lastModifiedDate":"2021-11-07"},{"lineNumber":248,"author":{"gitId":"JWweiyin"},"content":"`OuterParser` formats the user input and creates a `FindCardsCommand` object which is returned.","lastModifiedDate":"2021-11-07"},{"lineNumber":249,"author":{"gitId":"JWweiyin"},"content":"`CardLi` calls the `execute()` method of the `FindCardsCommand` object. The `FindCardsParser` extracts the search term(","lastModifiedDate":"2021-11-07"},{"lineNumber":250,"author":{"gitId":"JWweiyin"},"content":"s) and passes them to `CommandResult` which invokes the  `findCards()`","lastModifiedDate":"2021-11-07"},{"lineNumber":251,"author":{"gitId":"JWweiyin"},"content":"method of `DeckManager` that repeatedly calls the `returnMatchingFlashCards()` method that iterates once for each","lastModifiedDate":"2021-11-07"},{"lineNumber":252,"author":{"gitId":"JWweiyin"},"content":"instance of a `Deck`.","lastModifiedDate":"2021-11-07"},{"lineNumber":253,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":254,"author":{"gitId":"JWweiyin"},"content":"`returnMatchingFlashCards()` is implemented by creating a stream that consists of all the `FlashCards` from one deck,","lastModifiedDate":"2021-11-07"},{"lineNumber":255,"author":{"gitId":"JWweiyin"},"content":"and filters them based on whether they contain the search term given. This method is not case-sensitive. Finally all","lastModifiedDate":"2021-11-07"},{"lineNumber":256,"author":{"gitId":"JWweiyin"},"content":"the `FlashCards` that contain the search term are collected in an ArrayList and their console outputs are returned in","lastModifiedDate":"2021-11-07"},{"lineNumber":257,"author":{"gitId":"JWweiyin"},"content":"string format for `CardLiUi` to display to the user.","lastModifiedDate":"2021-11-07"},{"lineNumber":258,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":259,"author":{"gitId":"ThaddeusLim99"},"content":"### [4.4. Test Feature](#content)","lastModifiedDate":"2021-11-07"},{"lineNumber":260,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":261,"author":{"gitId":"xkisxk"},"content":"![class diagram](assets/testClassDiagram.png)","lastModifiedDate":"2021-10-31"},{"lineNumber":262,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":263,"author":{"gitId":"JWweiyin"},"content":"Currently, test feature is implemented at the systemwide level and is handled by `TestManager`.","lastModifiedDate":"2021-11-07"},{"lineNumber":264,"author":{"gitId":"JWweiyin"},"content":"`TestManager` will call on `TestUi` and `TestParser` to handle the inputs and outputs with the user and the parsing","lastModifiedDate":"2021-11-07"},{"lineNumber":265,"author":{"gitId":"JWweiyin"},"content":"respectively during the test.","lastModifiedDate":"2021-11-07"},{"lineNumber":266,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":267,"author":{"gitId":"ThaddeusLim99"},"content":"#### [4.4.1. Test Setup](#content)","lastModifiedDate":"2021-11-07"},{"lineNumber":268,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":269,"author":{"gitId":"xkisxk"},"content":"![sequence diagram](assets/TestSequenceDiagram.png)","lastModifiedDate":"2021-10-31"},{"lineNumber":270,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":271,"author":{"gitId":"JWweiyin"},"content":"As shown in the sequence diagram above, to enter into test mode, the user needs to enter `test` in the main menu from","lastModifiedDate":"2021-11-07"},{"lineNumber":272,"author":{"gitId":"JWweiyin"},"content":"which the program will prompt the user to input a number (done in `startTest()`) corresponding to the index of the deck","lastModifiedDate":"2021-11-07"},{"lineNumber":273,"author":{"gitId":"JWweiyin"},"content":"that they want to be tested on or \"all\" to test all decks.","lastModifiedDate":"2021-11-07"},{"lineNumber":274,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":275,"author":{"gitId":"xkisxk"},"content":"![sequence diagram](assets/getTestDeckSequenceDiagram.png)","lastModifiedDate":"2021-10-31"},{"lineNumber":276,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":277,"author":{"gitId":"xkisxk"},"content":"In both cases, `TestManager` will create an `AnswerList` using a `Deck` that it creates or gets from","lastModifiedDate":"2021-10-25"},{"lineNumber":278,"author":{"gitId":"JWweiyin"},"content":"`DeckManager` depending on the condition which is shown by the sequence diagram above. If the user decides to test all","lastModifiedDate":"2021-11-07"},{"lineNumber":279,"author":{"gitId":"JWweiyin"},"content":"decks, the program will compile all `FlashCards` into a `Deck`. If the user decides to test a single deck, the program","lastModifiedDate":"2021-11-07"},{"lineNumber":280,"author":{"gitId":"JWweiyin"},"content":"will get that deck instance from `DeckManager`. The `AnswerList` consists of an ArrayList of `Answers` and is where the","lastModifiedDate":"2021-11-07"},{"lineNumber":281,"author":{"gitId":"JWweiyin"},"content":"user\u0027s test responses are stored. The `Deck` to be tested is stored within `AnswerList`.","lastModifiedDate":"2021-11-07"},{"lineNumber":282,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":283,"author":{"gitId":"xkisxk"},"content":"![sequence diagram](assets/prepareTestDeckSeqDiagram.png)","lastModifiedDate":"2021-11-03"},{"lineNumber":284,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":285,"author":{"gitId":"JWweiyin"},"content":"After constructing the `AnswerList`, the preparation begins. The `Deck` that is attached to the `AnswerList` gets","lastModifiedDate":"2021-11-07"},{"lineNumber":286,"author":{"gitId":"JWweiyin"},"content":"duplicated, then shuffled. Afterwards, for each question in the test, an `Answer` is initialised with an empty string","lastModifiedDate":"2021-11-07"},{"lineNumber":287,"author":{"gitId":"JWweiyin"},"content":"and added to `AnswerList`.","lastModifiedDate":"2021-11-07"},{"lineNumber":288,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":289,"author":{"gitId":"ThaddeusLim99"},"content":"#### [4.4.2. Testing Process](#content)","lastModifiedDate":"2021-11-07"},{"lineNumber":290,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":291,"author":{"gitId":"xkisxk"},"content":"![sequence diagram](assets/testInProgressSeqDiagram.png)","lastModifiedDate":"2021-11-03"},{"lineNumber":292,"author":{"gitId":"JWweiyin"},"content":"//TODO: change This is where the actual test starts. The test will keep looping until every card in the `Deck` to test","lastModifiedDate":"2021-11-07"},{"lineNumber":293,"author":{"gitId":"xkisxk"},"content":"is answered. And there is another loop within that loops until the `currentQuestion`, which is an `int`","lastModifiedDate":"2021-11-03"},{"lineNumber":294,"author":{"gitId":"JWweiyin"},"content":"representing the question number, goes out of bounds. Inside the inner loop, `testCard` is called to test an individual","lastModifiedDate":"2021-11-07"},{"lineNumber":295,"author":{"gitId":"JWweiyin"},"content":"card. The resulting `nextQuestionFlag` decides whether to proceed to the next question","lastModifiedDate":"2021-11-07"},{"lineNumber":296,"author":{"gitId":"xkisxk"},"content":"(if it equals to \u00270\u0027) or go back to a previous question (if it equals to \u00271\u0027). If this results in","lastModifiedDate":"2021-11-03"},{"lineNumber":297,"author":{"gitId":"JWweiyin"},"content":"`currentQuestion` going out of bounds and if every question is not answered, currentQuestion will get reset to either","lastModifiedDate":"2021-11-07"},{"lineNumber":298,"author":{"gitId":"JWweiyin"},"content":"the lowest or highest question number that is not answered.","lastModifiedDate":"2021-11-07"},{"lineNumber":299,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":300,"author":{"gitId":"xkisxk"},"content":"![sequence diagram](assets/testCardSeqDiagram.png)","lastModifiedDate":"2021-11-03"},{"lineNumber":301,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":302,"author":{"gitId":"JWweiyin"},"content":"The question is printed for the user to answer. The user\u0027s answer is then parsed and checked if it is `/Next` or `/Back`","lastModifiedDate":"2021-11-07"},{"lineNumber":303,"author":{"gitId":"JWweiyin"},"content":". If it is neither, the user\u0027s answer is added into `AnswerList`. If it is","lastModifiedDate":"2021-11-07"},{"lineNumber":304,"author":{"gitId":"xkisxk"},"content":"`/Next`, nextQuestionFlag is set to 0 and if it is `/Back`, nextQuestionFlag is set to 1.","lastModifiedDate":"2021-11-03"},{"lineNumber":305,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":306,"author":{"gitId":"xkisxk"},"content":"![sequence diagram](assets/markTestSequenceDiagram.png)","lastModifiedDate":"2021-10-31"},{"lineNumber":307,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":308,"author":{"gitId":"JWweiyin"},"content":"After all cards have been tested, the marking process begins as shown by the sequence diagram above. The program prints","lastModifiedDate":"2021-11-07"},{"lineNumber":309,"author":{"gitId":"JWweiyin"},"content":"the question, followed by the actual answer, followed by the user\u0027s answer.","lastModifiedDate":"2021-11-07"},{"lineNumber":310,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":311,"author":{"gitId":"JWweiyin"},"content":"For every correct answer, the `userScore`","lastModifiedDate":"2021-11-07"},{"lineNumber":312,"author":{"gitId":"JWweiyin"},"content":"and `totalScore` for the `FlashCard` and the `userScore` for the `AnswerList` increments; `TestUi` prints a correct","lastModifiedDate":"2021-11-07"},{"lineNumber":313,"author":{"gitId":"JWweiyin"},"content":"answer message.","lastModifiedDate":"2021-11-07"},{"lineNumber":314,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":315,"author":{"gitId":"JWweiyin"},"content":"For every wrong answer, the `userScore` for the `FlashCard` and `AnswerList` does not change but the `totalScore` for","lastModifiedDate":"2021-11-07"},{"lineNumber":316,"author":{"gitId":"JWweiyin"},"content":"the `FlashCard` increments; `TestUi` prints an incorrect answer message.","lastModifiedDate":"2021-11-07"},{"lineNumber":317,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":318,"author":{"gitId":"JWweiyin"},"content":"After all the questions are marked, the user\u0027s results are printed and saved in `TestHistory`. This concludes the","lastModifiedDate":"2021-11-07"},{"lineNumber":319,"author":{"gitId":"JWweiyin"},"content":"entire `startTest()` process.","lastModifiedDate":"2021-11-07"},{"lineNumber":320,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":321,"author":{"gitId":"JWweiyin"},"content":"The `startReview()` process is similar to `startTest()`, except the `getTestDeck()` function has an additional condition","lastModifiedDate":"2021-11-07"},{"lineNumber":322,"author":{"gitId":"JWweiyin"},"content":"in which only `FlashCards` with `userScore` being strictly less than 50% of `totalScore` are added to the `Deck` to be","lastModifiedDate":"2021-11-07"},{"lineNumber":323,"author":{"gitId":"JWweiyin"},"content":"reviewed.","lastModifiedDate":"2021-11-07"},{"lineNumber":324,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":325,"author":{"gitId":"xkisxk"},"content":"\u003cdetails\u003e","lastModifiedDate":"2021-11-03"},{"lineNumber":326,"author":{"gitId":"xkisxk"},"content":"\u003csummary\u003eRemark\u003c/summary\u003e","lastModifiedDate":"2021-11-03"},{"lineNumber":327,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":328,"author":{"gitId":"xkisxk"},"content":"\u003e `TestCommand` and `ReviewCommand` is executed quite differently compared to the other features.","lastModifiedDate":"2021-11-03"},{"lineNumber":329,"author":{"gitId":"JWweiyin"},"content":"\u003e The other commands return the resulting string of the `execute()` method but ` test` and `review` only return the end","lastModifiedDate":"2021-11-07"},{"lineNumber":330,"author":{"gitId":"xkisxk"},"content":"\u003e test/review message.","lastModifiedDate":"2021-11-03"},{"lineNumber":331,"author":{"gitId":"JWweiyin"},"content":"\u003e This is because, unlike the others, `test` and `review` need to constantly interact with the user,","lastModifiedDate":"2021-11-07"},{"lineNumber":332,"author":{"gitId":"JWweiyin"},"content":"\u003e which means that the feature needs to print out a response message after the user\u0027s input. Furthermore, it needs to ","lastModifiedDate":"2021-11-07"},{"lineNumber":333,"author":{"gitId":"JWweiyin"},"content":"\u003e also update the timer live, which makes storing the entire process as a string","lastModifiedDate":"2021-11-07"},{"lineNumber":334,"author":{"gitId":"xkisxk"},"content":"\u003e when `Command.execute()` is called not really feasible.","lastModifiedDate":"2021-11-03"},{"lineNumber":335,"author":{"gitId":"xkisxk"},"content":"\u003c/details\u003e","lastModifiedDate":"2021-11-03"},{"lineNumber":336,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":337,"author":{"gitId":"ThaddeusLim99"},"content":"### [4.5. Storage](#content)","lastModifiedDate":"2021-11-07"},{"lineNumber":338,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":339,"author":{"gitId":"JWweiyin"},"content":"This feature allows users of CardLI to save data on their current `Decks` of `FlashCards` as well as the tests that they","lastModifiedDate":"2021-11-07"},{"lineNumber":340,"author":{"gitId":"JWweiyin"},"content":"have completed thus far. This will also allow users to re-access the data when they re-enter the application. This way,","lastModifiedDate":"2021-11-07"},{"lineNumber":341,"author":{"gitId":"JWweiyin"},"content":"they will not have to keep re-adding the same flashcards, while also being able to review tests that they had previously","lastModifiedDate":"2021-11-07"},{"lineNumber":342,"author":{"gitId":"JWweiyin"},"content":"done on the application.","lastModifiedDate":"2021-11-07"},{"lineNumber":343,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":344,"author":{"gitId":"JWweiyin"},"content":"This feature is implemented by saving the user’s data into two separate JSON files, which is saved into a","lastModifiedDate":"2021-11-07"},{"lineNumber":345,"author":{"gitId":"JWweiyin"},"content":"new `data` directory created upon first start up of the application if it does not yet exist. This new directory is","lastModifiedDate":"2021-11-07"},{"lineNumber":346,"author":{"gitId":"JWweiyin"},"content":"created within the current directory from which the `CardLI.jar` file is run in the CLI. The file paths of the two JSON","lastModifiedDate":"2021-11-07"},{"lineNumber":347,"author":{"gitId":"JWweiyin"},"content":"files are hard coded as `Cards_CardLI.json` and `Tests_CardLI.json`, which will save data on the user\u0027s decks of","lastModifiedDate":"2021-11-07"},{"lineNumber":348,"author":{"gitId":"JWweiyin"},"content":"flashcards and test history respectively. Whenever the user inputs a new command, the application will execute the save","lastModifiedDate":"2021-11-07"},{"lineNumber":349,"author":{"gitId":"JWweiyin"},"content":"functions after the actions corresponding to the command are completed. This is done in order to maintain data integrity","lastModifiedDate":"2021-11-07"},{"lineNumber":350,"author":{"gitId":"JWweiyin"},"content":"and accuracy in case of technical malfunctions that may cause the application to terminate prematurely. When the user","lastModifiedDate":"2021-11-07"},{"lineNumber":351,"author":{"gitId":"JWweiyin"},"content":"restarts or re-enters the application, the application will parse the JSON files and convert them into the relevant","lastModifiedDate":"2021-11-07"},{"lineNumber":352,"author":{"gitId":"JWweiyin"},"content":"data. The format of how the data is saved into the JSON files are specified during the development process in order to","lastModifiedDate":"2021-11-07"},{"lineNumber":353,"author":{"gitId":"JWweiyin"},"content":"reduce the risk of bugs arising when they are being parsed, which will be explained in the following paragraphs.","lastModifiedDate":"2021-11-07"},{"lineNumber":354,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":355,"author":{"gitId":"JWweiyin"},"content":"The `Storage` class contains all the methods to execute the save and parse functions to and from the","lastModifiedDate":"2021-11-07"},{"lineNumber":356,"author":{"gitId":"JWweiyin"},"content":"relevant JSON files. This `Storage` object is created upon first starting up the application to handle all the method","lastModifiedDate":"2021-11-07"},{"lineNumber":357,"author":{"gitId":"JWweiyin"},"content":"calls. The respective methods will be explained in more detail in the following paragraphs.","lastModifiedDate":"2021-11-07"},{"lineNumber":358,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":359,"author":{"gitId":"JWweiyin"},"content":"#### [4.5.1. Writing to JSON files](#content)","lastModifiedDate":"2021-11-07"},{"lineNumber":360,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":361,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":362,"author":{"gitId":"JWweiyin"},"content":"Two separate methods are used for this feature, namely the ` writeCardsToFile()` and the `writeTestsToFile()` methods.","lastModifiedDate":"2021-11-07"},{"lineNumber":363,"author":{"gitId":"JWweiyin"},"content":"The two methods save the user\u0027s `Decks` of `FlashCards` and `TestHistory` to the JSON files respectively.","lastModifiedDate":"2021-11-07"},{"lineNumber":364,"author":{"gitId":"JWweiyin"},"content":"Since the two methods are effectively similar in their","lastModifiedDate":"2021-11-07"},{"lineNumber":365,"author":{"gitId":"xRossKoh"},"content":"implementation, the sequence diagram below will suffice in depicting their execution. For all labels that include","lastModifiedDate":"2021-11-07"},{"lineNumber":366,"author":{"gitId":"xRossKoh"},"content":"a \"/\", the text before the \"/\" applies for the `writeCardsToFile()` method while the text after the \"/\" applies for the","lastModifiedDate":"2021-11-07"},{"lineNumber":367,"author":{"gitId":"xRossKoh"},"content":"`writeTestsToFile()` method.","lastModifiedDate":"2021-11-07"},{"lineNumber":368,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":369,"author":{"gitId":"xRossKoh"},"content":"![](assets/writeToFileSeqDiagram.png)","lastModifiedDate":"2021-11-07"},{"lineNumber":370,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":371,"author":{"gitId":"xRossKoh"},"content":"`writeCardsToFile(ArrayList\u003cDeck\u003e decks)`","lastModifiedDate":"2021-11-07"},{"lineNumber":372,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":373,"author":{"gitId":"JWweiyin"},"content":"For the saving of the user\u0027s `Decks` of `FlashCards`, the method call will expect an `ArrayList` of `Deck` objects.","lastModifiedDate":"2021-11-07"},{"lineNumber":374,"author":{"gitId":"JWweiyin"},"content":"The `toJSONObject()` methods within the `Deck`and `FlashCard` classes have been written as per the specified format of","lastModifiedDate":"2021-11-07"},{"lineNumber":375,"author":{"gitId":"JWweiyin"},"content":"saving the `Decks` of `FlashCards` to the `json` file. Each of the `toJSONObject()` methods returns a formatted JSON Object","lastModifiedDate":"2021-11-07"},{"lineNumber":376,"author":{"gitId":"JWweiyin"},"content":"containing information about the attributes in each instance of each class, in the form of a map. A combination","lastModifiedDate":"2021-11-07"},{"lineNumber":377,"author":{"gitId":"JWweiyin"},"content":"of `JSONObject` and `JSONArray` instances are used to format each of the individual attributes, before they are combined","lastModifiedDate":"2021-11-07"},{"lineNumber":378,"author":{"gitId":"JWweiyin"},"content":"into a single `JSONObject` instance and returned from the method. An example of the format of the `Cards_CardLI.json`","lastModifiedDate":"2021-11-07"},{"lineNumber":379,"author":{"gitId":"JWweiyin"},"content":"where the `Decks` of `FlashCards` are saved is shown in the image below.","lastModifiedDate":"2021-11-07"},{"lineNumber":380,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":381,"author":{"gitId":"xRossKoh"},"content":"![](assets/Cards_CardLI Example.png)","lastModifiedDate":"2021-11-08"},{"lineNumber":382,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":383,"author":{"gitId":"xRossKoh"},"content":"`writeTestsToFile(ArrayList\u003cAnswerList\u003e testHistory)`","lastModifiedDate":"2021-11-07"},{"lineNumber":384,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":385,"author":{"gitId":"xRossKoh"},"content":"For the saving of the user\u0027s test history, the method call will expect an `ArrayList` of `AnswerList` objects.","lastModifiedDate":"2021-11-07"},{"lineNumber":386,"author":{"gitId":"xRossKoh"},"content":"The `toJSONObject()` methods within the `AnswerList`and `Answer` classes have been written as per the specified format","lastModifiedDate":"2021-11-07"},{"lineNumber":387,"author":{"gitId":"JWweiyin"},"content":"of saving the `TestHistory` to the `json` file. The concept behind the formatting of the returned JSON Object is the same","lastModifiedDate":"2021-11-07"},{"lineNumber":388,"author":{"gitId":"JWweiyin"},"content":"as that explained under the `writeCardsToFile()` method. An example of the format of the `Tests_CardLI.json` where the","lastModifiedDate":"2021-11-07"},{"lineNumber":389,"author":{"gitId":"JWweiyin"},"content":"test data is saved is shown in the screenshot below.","lastModifiedDate":"2021-11-07"},{"lineNumber":390,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":391,"author":{"gitId":"xRossKoh"},"content":"![](assets/Tests_CardLI Example.png)","lastModifiedDate":"2021-11-08"},{"lineNumber":392,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":393,"author":{"gitId":"JWweiyin"},"content":"#### [4.5.2. Reading from JSON files](#content)","lastModifiedDate":"2021-11-07"},{"lineNumber":394,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":395,"author":{"gitId":"JWweiyin"},"content":"The methods for reading from the JSON files are executed once upon each startup of the CardLI application. The methods","lastModifiedDate":"2021-11-07"},{"lineNumber":396,"author":{"gitId":"JWweiyin"},"content":"use an instance of the `Scanner` class to parse through the JSON files, before using an instance of the","lastModifiedDate":"2021-11-07"},{"lineNumber":397,"author":{"gitId":"xRossKoh"},"content":"`JSONParser` class to parse through the scanned `String` instances and convert them into the relevant `JSONObject`","lastModifiedDate":"2021-11-07"},{"lineNumber":398,"author":{"gitId":"JWweiyin"},"content":"instances. As per the saving format explained in the \"Writing to JSON files\" section above, the methods then reverse","lastModifiedDate":"2021-11-07"},{"lineNumber":399,"author":{"gitId":"JWweiyin"},"content":"engineer the process to convert and add the user\u0027s stored data into the application before any commands are given from","lastModifiedDate":"2021-11-07"},{"lineNumber":400,"author":{"gitId":"JWweiyin"},"content":"the user. Since the implementation of the two methods, namely","lastModifiedDate":"2021-11-07"},{"lineNumber":401,"author":{"gitId":"xRossKoh"},"content":"`readCardsFromFile()` and `readTestsFromFile()`, are effectively similar in their implementation, the sequence diagram","lastModifiedDate":"2021-11-07"},{"lineNumber":402,"author":{"gitId":"JWweiyin"},"content":"below will suffice in depicting their execution. For all labels that include a \"/\", the text before the \"/\" applies for","lastModifiedDate":"2021-11-07"},{"lineNumber":403,"author":{"gitId":"JWweiyin"},"content":"the `readCardsFromFile()` method while the text after the \"/\" applies for the","lastModifiedDate":"2021-11-07"},{"lineNumber":404,"author":{"gitId":"xRossKoh"},"content":"`readTestsFromFile()` method. The extension to the \"ref\" box within the sequence diagram will be shown in a separate","lastModifiedDate":"2021-11-07"},{"lineNumber":405,"author":{"gitId":"xRossKoh"},"content":"sequence diagram in the following sections.","lastModifiedDate":"2021-11-07"},{"lineNumber":406,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":407,"author":{"gitId":"xRossKoh"},"content":"![](assets/readFromFileSeqDiagram.png)","lastModifiedDate":"2021-11-07"},{"lineNumber":408,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":409,"author":{"gitId":"ThaddeusLim99"},"content":"##### [4.5.2.1 `readCardsFromFile`](#content)","lastModifiedDate":"2021-11-07"},{"lineNumber":410,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":411,"author":{"gitId":"xRossKoh"},"content":"The `readCardsFromFile()` method reads from the `Cards_CardLI.json` file. As per the sequence diagram under the ","lastModifiedDate":"2021-11-08"},{"lineNumber":412,"author":{"gitId":"xRossKoh"},"content":"\"Reading from JSON files\" header, this method calls the `parseDeck(JSONObject jsonDeck)` method iteratively to convert ","lastModifiedDate":"2021-11-08"},{"lineNumber":413,"author":{"gitId":"xRossKoh"},"content":"the saved data into individual `Deck` instances to be added into the application. The sequence diagram depicting the ","lastModifiedDate":"2021-11-08"},{"lineNumber":414,"author":{"gitId":"xRossKoh"},"content":"exact implementation and execute of the `parseDeck(JSONObject jsonDeck)` method is shown below.","lastModifiedDate":"2021-11-08"},{"lineNumber":415,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":416,"author":{"gitId":"xRossKoh"},"content":"![](assets/parseDeckSeqDiagram.png)","lastModifiedDate":"2021-11-07"},{"lineNumber":417,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":418,"author":{"gitId":"ThaddeusLim99"},"content":"##### [4.5.2.2 `readTestFromFile`](#content)","lastModifiedDate":"2021-11-07"},{"lineNumber":419,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":420,"author":{"gitId":"xRossKoh"},"content":"The `readTestsFromFile()` method reads from the `Tests_CardLI.json` file. As per the sequence diagram under the","lastModifiedDate":"2021-11-08"},{"lineNumber":421,"author":{"gitId":"xRossKoh"},"content":"\"Reading from JSON files\" header, this method calls the `parseAnswerList(JSONObject jsonTestHistory)` method iteratively ","lastModifiedDate":"2021-11-08"},{"lineNumber":422,"author":{"gitId":"xRossKoh"},"content":"to convert the saved data into individual `AnswerList` instances to be added into the application. The sequence diagram ","lastModifiedDate":"2021-11-08"},{"lineNumber":423,"author":{"gitId":"xRossKoh"},"content":"depicting the exact implementation and execute of the `parseDeck(JSONObject jsonTestHistory)` method is shown below.","lastModifiedDate":"2021-11-08"},{"lineNumber":424,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":425,"author":{"gitId":"xRossKoh"},"content":"![](assets/parseAnswerListSeqDiagram.png)","lastModifiedDate":"2021-11-07"},{"lineNumber":426,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":427,"author":{"gitId":"ThaddeusLim99"},"content":"## [5. Product scope](#content)","lastModifiedDate":"2021-11-07"},{"lineNumber":428,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":429,"author":{"gitId":"ThaddeusLim99"},"content":"### [5.1. Target user profile](#content)","lastModifiedDate":"2021-11-07"},{"lineNumber":430,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":431,"author":{"gitId":"ThaddeusLim99"},"content":"* Pre-University/University/Polytechnic students","lastModifiedDate":"2021-10-21"},{"lineNumber":432,"author":{"gitId":"ThaddeusLim99"},"content":"* Reasonably comfortable using CLI apps","lastModifiedDate":"2021-10-21"},{"lineNumber":433,"author":{"gitId":"ThaddeusLim99"},"content":"* Types fast","lastModifiedDate":"2021-10-21"},{"lineNumber":434,"author":{"gitId":"ThaddeusLim99"},"content":"* Prefers to store their information online rather than physically","lastModifiedDate":"2021-10-21"},{"lineNumber":435,"author":{"gitId":"ThaddeusLim99"},"content":"* Has a lot of flashcards","lastModifiedDate":"2021-10-21"},{"lineNumber":436,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":437,"author":{"gitId":"ThaddeusLim99"},"content":"### [5.2. Value Proposition](#content)","lastModifiedDate":"2021-11-07"},{"lineNumber":438,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":439,"author":{"gitId":"JWweiyin"},"content":"CardLI provides a:","lastModifiedDate":"2021-10-20"},{"lineNumber":440,"author":{"gitId":"JWweiyin"},"content":"\u003cli\u003e User-friendly \u003c/li\u003e","lastModifiedDate":"2021-10-20"},{"lineNumber":441,"author":{"gitId":"JWweiyin"},"content":"\u003cli\u003e Storage efficient\u003c/li\u003e","lastModifiedDate":"2021-10-20"},{"lineNumber":442,"author":{"gitId":"ThaddeusLim99"},"content":"\u003cli\u003e Internet connection independent flashcard experience. \u003c/li\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":443,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":444,"author":{"gitId":"ThaddeusLim99"},"content":"## [6. User Stories](#content)","lastModifiedDate":"2021-11-07"},{"lineNumber":445,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":446,"author":{"gitId":"-"},"content":"|Version| As a ... | I want to ... | So that I can ...|","lastModifiedDate":"2020-05-24"},{"lineNumber":447,"author":{"gitId":"-"},"content":"|--------|----------|---------------|------------------|","lastModifiedDate":"2020-05-24"},{"lineNumber":448,"author":{"gitId":"-"},"content":"|v1.0|new user|see usage instructions|refer to them when I forget how to use the application|","lastModifiedDate":"2020-05-24"},{"lineNumber":449,"author":{"gitId":"JWweiyin"},"content":"| |user| add flashcards|","lastModifiedDate":"2021-10-20"},{"lineNumber":450,"author":{"gitId":"JWweiyin"},"content":"| |user| delete flashcards|","lastModifiedDate":"2021-10-20"},{"lineNumber":451,"author":{"gitId":"JWweiyin"},"content":"| |user| view my flashcards|know what cards I currently have in the deck|","lastModifiedDate":"2021-11-07"},{"lineNumber":452,"author":{"gitId":"JWweiyin"},"content":"| |user| test myself with my flashcards|know if I have memorised the flashcards correctly|","lastModifiedDate":"2021-10-20"},{"lineNumber":453,"author":{"gitId":"JWweiyin"},"content":"| |student preparing for their exam|see a list of the flashcards I got wrong|know which concepts I do not know|","lastModifiedDate":"2021-10-20"},{"lineNumber":454,"author":{"gitId":"JWweiyin"},"content":"|v2.0|user|shuffle my flashcards|test myself with a different order of flashcards each time|","lastModifiedDate":"2021-10-20"},{"lineNumber":455,"author":{"gitId":"JWweiyin"},"content":"| |student in a hurry|edit my flashcards|change the front or back of a flashcard without deleting and adding it again","lastModifiedDate":"2021-10-20"},{"lineNumber":456,"author":{"gitId":"JWweiyin"},"content":"| |student who studies multiple subjects|organise my flashcards into different decks|keep flashcards with related topics in the same set|","lastModifiedDate":"2021-10-20"},{"lineNumber":457,"author":{"gitId":"JWweiyin"},"content":"| |student preparing for their exam|see a timer when in test mode|keep track of how much time I have spent on each question","lastModifiedDate":"2021-10-20"},{"lineNumber":458,"author":{"gitId":"JWweiyin"},"content":"| |student who wants to test themself|to see the percentage of correct answers for each flashcard|know which cards I am less proficient in","lastModifiedDate":"2021-11-07"},{"lineNumber":459,"author":{"gitId":"JWweiyin"},"content":"| |student in a hurry|test myself with the flashcards I have answered wrongly for more than half the time|get more proficient at the concepts I am not familiar with","lastModifiedDate":"2021-10-20"},{"lineNumber":460,"author":{"gitId":"JWweiyin"},"content":"| |student with many flashcards and decks|find a flashcard by searching for a term matching it|find the flashcard without looking through all my decks","lastModifiedDate":"2021-10-20"},{"lineNumber":461,"author":{"gitId":"JWweiyin"},"content":"| |student with little time|save my flashcards|I do not have to add my flashcards to the app every time I use it","lastModifiedDate":"2021-10-20"},{"lineNumber":462,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":463,"author":{"gitId":"ThaddeusLim99"},"content":"## [7. Non-Functional Requirements](#content)","lastModifiedDate":"2021-11-07"},{"lineNumber":464,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":465,"author":{"gitId":"JWweiyin"},"content":"\u003cli\u003e The app should be usable by someone who is reasonably comfortable using Command Line Interface.\u003c/li\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":466,"author":{"gitId":"JWweiyin"},"content":"\u003cli\u003e The app should be able to handle at least 25 flashcard decks of at least 25 cards each.\u003c/li\u003e","lastModifiedDate":"2021-11-06"},{"lineNumber":467,"author":{"gitId":"JWweiyin"},"content":"\u003cli\u003e The app should work on a computer that has Java 11 or above installed.\u003c/li\u003e","lastModifiedDate":"2021-11-06"},{"lineNumber":468,"author":{"gitId":"JWweiyin"},"content":"\u003cli\u003e The app should store data in a format that is readable by humans, and easy for machines to parse and generate.\u003c/li\u003e","lastModifiedDate":"2021-11-06"},{"lineNumber":469,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":470,"author":{"gitId":"ThaddeusLim99"},"content":"## [8. Glossary](#content)","lastModifiedDate":"2021-11-07"},{"lineNumber":471,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":472,"author":{"gitId":"ThaddeusLim99"},"content":"* *CLI* - Command Line Interface","lastModifiedDate":"2021-11-07"},{"lineNumber":473,"author":{"gitId":"JWweiyin"},"content":"* *JSON* - JavaScript Object Notation, a lightweight data-interchange format.","lastModifiedDate":"2021-11-07"},{"lineNumber":474,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":475,"author":{"gitId":"ThaddeusLim99"},"content":"## [9. Instructions for Manual Testing](#content)","lastModifiedDate":"2021-11-07"},{"lineNumber":476,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":477,"author":{"gitId":"xRossKoh"},"content":"### Storage testing","lastModifiedDate":"2021-11-08"}],"authorContributionMap":{"JWweiyin":239,"ThaddeusLim99":125,"astralum":15,"xRossKoh":41,"xkisxk":31,"-":26}},{"path":"docs/README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"ThaddeusLim99"},"content":"![](assets/logo.png)","lastModifiedDate":"2021-11-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":3,"author":{"gitId":"ThaddeusLim99"},"content":"CardLI is a Command Line Interface (CLI) desktop app designed to help students manage their flashcards. CardLI can help","lastModifiedDate":"2021-11-03"},{"lineNumber":4,"author":{"gitId":"ThaddeusLim99"},"content":"students keep track of all their flashcards. It also allows students to test their knowledge. All of this in one","lastModifiedDate":"2021-11-03"},{"lineNumber":5,"author":{"gitId":"ThaddeusLim99"},"content":"single platform.","lastModifiedDate":"2021-11-03"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Useful links:","lastModifiedDate":"2020-05-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"* [User Guide](UserGuide.md)","lastModifiedDate":"2020-05-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"* [Developer Guide](DeveloperGuide.md)","lastModifiedDate":"2020-05-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"* [About Us](AboutUs.md)","lastModifiedDate":"2020-05-24"}],"authorContributionMap":{"ThaddeusLim99":4,"-":6}},{"path":"docs/UserGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide","lastModifiedDate":"2020-05-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":3,"author":{"gitId":"JWweiyin"},"content":"![](assets/logo.png)","lastModifiedDate":"2021-11-07"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Introduction","lastModifiedDate":"2021-11-07"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":7,"author":{"gitId":"JWweiyin"},"content":"CardLI is a desktop app that helps you create, organise, and review flashcards via a Command Line Interface. As students","lastModifiedDate":"2021-11-07"},{"lineNumber":8,"author":{"gitId":"JWweiyin"},"content":"ourselves, we find that studying through the use of flashcards can greatly increase the efficacy of our study sessions","lastModifiedDate":"2021-11-07"},{"lineNumber":9,"author":{"gitId":"JWweiyin"},"content":"as they break down large chapters and concepts into easy-to-understand segments. Hence, CardLI was designed in order to","lastModifiedDate":"2021-11-07"},{"lineNumber":10,"author":{"gitId":"JWweiyin"},"content":"help students study better through the use of flashcards, while also reducing the paper waste that goes into writing","lastModifiedDate":"2021-11-07"},{"lineNumber":11,"author":{"gitId":"JWweiyin"},"content":"physical flashcards. The interfacing within the application is designed to be interactive and functional, while the","lastModifiedDate":"2021-11-07"},{"lineNumber":12,"author":{"gitId":"JWweiyin"},"content":"commands are designed to be intuitive to use.","lastModifiedDate":"2021-11-07"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":14,"author":{"gitId":"xkisxk"},"content":"## How To Use","lastModifiedDate":"2021-11-07"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":16,"author":{"gitId":"JWweiyin"},"content":"This guide helps you to get familiarised with all the features of CardLI. The [Quick Start](#quick-start)","lastModifiedDate":"2021-11-07"},{"lineNumber":17,"author":{"gitId":"JWweiyin"},"content":"section tells you how to download and get CardLI set up. The [Features](#features) section provides an in-depth","lastModifiedDate":"2021-11-07"},{"lineNumber":18,"author":{"gitId":"JWweiyin"},"content":"description of all available features, which you can refer to for the exact definitions.","lastModifiedDate":"2021-11-07"},{"lineNumber":19,"author":{"gitId":"JWweiyin"},"content":"The [Command Summary](#4-command-summarycontent) section gives you a brief overview of the format of all commands in","lastModifiedDate":"2021-11-07"},{"lineNumber":20,"author":{"gitId":"JWweiyin"},"content":"table format to let you check the format of commands at glance. To make it easier for you to navigate,","lastModifiedDate":"2021-11-07"},{"lineNumber":21,"author":{"gitId":"JWweiyin"},"content":"the [contents](#content) is linked to their respective sections.","lastModifiedDate":"2021-11-07"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"## Quick Start","lastModifiedDate":"2020-05-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"1. Ensure that you have Java 11 or above installed.","lastModifiedDate":"2020-05-24"},{"lineNumber":26,"author":{"gitId":"JWweiyin"},"content":"2. Download the latest version of `CardLI.jar` from [here](http://link.to/duke).","lastModifiedDate":"2021-11-07"},{"lineNumber":27,"author":{"gitId":"xRossKoh"},"content":"3. Take note of the full filepath of directory in which `CardLI.jar` is saved.","lastModifiedDate":"2021-10-24"},{"lineNumber":28,"author":{"gitId":"JWweiyin"},"content":"4. Open the command prompt by searching `cmd` in the search bar.","lastModifiedDate":"2021-10-24"},{"lineNumber":29,"author":{"gitId":"xRossKoh"},"content":"5. Navigate to the file directory containing `CardLI.jar` using the command `cd \u003cfilepath\u003e`.","lastModifiedDate":"2021-10-24"},{"lineNumber":30,"author":{"gitId":"xRossKoh"},"content":"6. Start up CardLI using the command``java -jar CardLI.jar`.","lastModifiedDate":"2021-10-24"},{"lineNumber":31,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":32,"author":{"gitId":"JWweiyin"},"content":"\u003e ❗ The above steps are for users who are running CardLI on a Windows device. If you are using a macOS or Linux device, you will have to open the command prompt equivalent on your operating system in step 4. Subsequently, you will also have to use the equivalent command on your operating system for navigation to a file directory in step 5. The remaining steps are the same across all operating systems.","lastModifiedDate":"2021-11-07"},{"lineNumber":33,"author":{"gitId":"JWweiyin"},"content":"\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":34,"author":{"gitId":"JWweiyin"},"content":"\u003e ❗ The timer feature is not supported on macOS or other environments that do not support ANSI.","lastModifiedDate":"2021-11-07"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":36,"author":{"gitId":"JWweiyin"},"content":"The expected output upon startup of the app is shown below:","lastModifiedDate":"2021-11-07"},{"lineNumber":37,"author":{"gitId":"JWweiyin"},"content":"![](assets/ug/CardLiStartup.png)","lastModifiedDate":"2021-11-07"},{"lineNumber":38,"author":{"gitId":"-"},"content":"## Features","lastModifiedDate":"2020-05-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":40,"author":{"gitId":"JWweiyin"},"content":"The current version of CardLI has two menus: main and deck. In the main menu, you are working with all the decks, so","lastModifiedDate":"2021-11-07"},{"lineNumber":41,"author":{"gitId":"JWweiyin"},"content":"commands only apply to the decks and not the individual flashcards. Enter the deck menu to work with the flashcards.","lastModifiedDate":"2021-11-07"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":43,"author":{"gitId":"xkisxk"},"content":"### Content","lastModifiedDate":"2021-10-24"},{"lineNumber":44,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":45,"author":{"gitId":"xkisxk"},"content":"1. [Main Menu](#1-main-menu)\u003cbr/\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":46,"author":{"gitId":"xkisxk"},"content":"   1.1 [Add Deck](#11-adding-a-deck-add)\u003cbr/\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":47,"author":{"gitId":"xkisxk"},"content":"   1.2 [Edit Deck](#12-editing-a-deck-edit)\u003cbr/\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":48,"author":{"gitId":"xkisxk"},"content":"   1.3 [Delete Deck](#13-deleting-a-deck-delete)\u003cbr/\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":49,"author":{"gitId":"xkisxk"},"content":"   1.4 [Enter Deck](#14-entering-a-deck-enter)\u003cbr/\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":50,"author":{"gitId":"xkisxk"},"content":"   1.5 [Test](#15-test-flashcards-test)\u003cbr/\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":51,"author":{"gitId":"xkisxk"},"content":"   1.6 [Review](#16-review-flashcards-review)\u003cbr/\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":52,"author":{"gitId":"xkisxk"},"content":"   1.7 [View Decks](#17-viewing-all-decks-view)\u003cbr/\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":53,"author":{"gitId":"xkisxk"},"content":"   1.8 [View Flashcard Stats](#18-view-flashcard-statistics-viewfc)\u003cbr/\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":54,"author":{"gitId":"xkisxk"},"content":"   1.9 [View Test Stats](#19-view-test-statistics-viewtest)\u003cbr/\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":55,"author":{"gitId":"xkisxk"},"content":"   1.10 [Find Flashcard](#110-finding-a-flashcard-find)\u003cbr/\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":56,"author":{"gitId":"xkisxk"},"content":"   1.11 [Help](#111-listing-all-commands-help)\u003cbr/\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":57,"author":{"gitId":"xkisxk"},"content":"   1.12 [Exit App](#112-exiting-the-app-bye)\u003cbr/\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":58,"author":{"gitId":"xkisxk"},"content":"2. [Deck Menu](#2-deck-menu)\u003cbr/\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":59,"author":{"gitId":"xkisxk"},"content":"   2.1 [Add Flashcard](#21-adding-a-flashcard-add)\u003cbr/\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":60,"author":{"gitId":"xkisxk"},"content":"   2.2 [Edit Flashcard](#22-editing-a-flashcard-edit)\u003cbr/\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":61,"author":{"gitId":"xkisxk"},"content":"   2.3 [Delete Flashcard](#23-deleting-a-flashcard-delete)\u003cbr/\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":62,"author":{"gitId":"xkisxk"},"content":"   2.4 [Move Flashcard](#24-moving-a-flashcard-move)\u003cbr/\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":63,"author":{"gitId":"xkisxk"},"content":"   2.5 [View Flashcard](#25-viewing-flashcards-view)\u003cbr/\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":64,"author":{"gitId":"xkisxk"},"content":"   2.6 [Help](#26-listing-all-commands-in-deck-mode-help)\u003cbr/\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":65,"author":{"gitId":"xkisxk"},"content":"   2.7 [Exit Deck Mode](#27-exiting-deck-mode-exit)\u003cbr/\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":66,"author":{"gitId":"xkisxk"},"content":"3. [FAQ](#3-faqs)\u003cbr/\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":67,"author":{"gitId":"xkisxk"},"content":"4. [Command Summary](#4-command-summary)\u003cbr/\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":68,"author":{"gitId":"xkisxk"},"content":"   4.1 [Main Menu](#41-main-menu)\u003cbr/\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":69,"author":{"gitId":"xkisxk"},"content":"   4.2 [Deck Menu](#42-deck-menu)\u003cbr/\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":71,"author":{"gitId":"xkisxk"},"content":"---","lastModifiedDate":"2021-10-24"},{"lineNumber":72,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":73,"author":{"gitId":"xkisxk"},"content":"## [1. Main Menu](#content)","lastModifiedDate":"2021-11-07"},{"lineNumber":74,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":75,"author":{"gitId":"JWweiyin"},"content":"\u003e 💾 Your decks are saved after each command.","lastModifiedDate":"2021-11-04"},{"lineNumber":76,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":77,"author":{"gitId":"xkisxk"},"content":"### [1.1 Adding a deck: `add`](#content)","lastModifiedDate":"2021-11-07"},{"lineNumber":78,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":79,"author":{"gitId":"JWweiyin"},"content":"Begin your CardLI journey with `add`. With `add`, create a new deck with the given name, if it does not already exist.","lastModifiedDate":"2021-11-07"},{"lineNumber":80,"author":{"gitId":"JWweiyin"},"content":"\u003e ❗ Names of decks are case-sensitive.","lastModifiedDate":"2021-11-07"},{"lineNumber":81,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":82,"author":{"gitId":"astralum"},"content":"Format: `add \u003cname of deck\u003e`","lastModifiedDate":"2021-10-24"},{"lineNumber":83,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":84,"author":{"gitId":"astralum"},"content":"Example of Usage:","lastModifiedDate":"2021-10-24"},{"lineNumber":85,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":86,"author":{"gitId":"astralum"},"content":"`add English vocab`","lastModifiedDate":"2021-10-24"},{"lineNumber":87,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":88,"author":{"gitId":"JWweiyin"},"content":"Expected outcome:","lastModifiedDate":"2021-10-24"},{"lineNumber":89,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":90,"author":{"gitId":"JWweiyin"},"content":"![](assets/ug/adddeck.png)","lastModifiedDate":"2021-10-24"},{"lineNumber":91,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":92,"author":{"gitId":"xkisxk"},"content":"### [1.2 Editing a deck: `edit`](#content)","lastModifiedDate":"2021-11-07"},{"lineNumber":93,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":94,"author":{"gitId":"JWweiyin"},"content":"If you ever find a better name for your deck, `edit` allows you to modify the name of your deck. A deck can be chosen","lastModifiedDate":"2021-11-07"},{"lineNumber":95,"author":{"gitId":"JWweiyin"},"content":"through its index.","lastModifiedDate":"2021-11-07"},{"lineNumber":96,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":97,"author":{"gitId":"JWweiyin"},"content":"In the command, `/d` denotes the index of the deck to be edited and `/n` denotes the new name of the deck.","lastModifiedDate":"2021-11-07"},{"lineNumber":98,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":99,"author":{"gitId":"JWweiyin"},"content":"Format: `edit /d \u003cindex of deck\u003e /n \u003cname\u003e`","lastModifiedDate":"2021-11-04"},{"lineNumber":100,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":101,"author":{"gitId":"JWweiyin"},"content":"Example of Usage:","lastModifiedDate":"2021-10-24"},{"lineNumber":102,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":103,"author":{"gitId":"ThaddeusLim99"},"content":"`edit /d 1 /n mathematics`","lastModifiedDate":"2021-10-25"},{"lineNumber":104,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":105,"author":{"gitId":"JWweiyin"},"content":"Expected outcome:","lastModifiedDate":"2021-10-24"},{"lineNumber":106,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":107,"author":{"gitId":"ThaddeusLim99"},"content":"![](assets/ug/editdeck.png)","lastModifiedDate":"2021-10-25"},{"lineNumber":108,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":109,"author":{"gitId":"xkisxk"},"content":"### [1.3 Deleting a deck: `delete`](#content)","lastModifiedDate":"2021-11-07"},{"lineNumber":110,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":111,"author":{"gitId":"JWweiyin"},"content":"If you no longer need a deck, `delete` allows you to delete the deck indicated by the index.","lastModifiedDate":"2021-11-07"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":113,"author":{"gitId":"JWweiyin"},"content":"Format: `delete \u003cindex of deck\u003e`","lastModifiedDate":"2021-11-04"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":115,"author":{"gitId":"xkisxk"},"content":"Example of Usage:","lastModifiedDate":"2021-10-24"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":117,"author":{"gitId":"xkisxk"},"content":"`delete 1`","lastModifiedDate":"2021-10-24"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":119,"author":{"gitId":"xkisxk"},"content":"Expected outcome:","lastModifiedDate":"2021-10-24"},{"lineNumber":120,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":121,"author":{"gitId":"JWweiyin"},"content":"![](assets/ug/deleteDeck.png)","lastModifiedDate":"2021-11-04"},{"lineNumber":122,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":123,"author":{"gitId":"xkisxk"},"content":"### [1.4 Entering a deck: `enter`](#content)","lastModifiedDate":"2021-11-07"},{"lineNumber":124,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":125,"author":{"gitId":"JWweiyin"},"content":"If you wish to add, delete, edit or view flashcards, `enter` allows you to select a deck to perform these actions on.","lastModifiedDate":"2021-11-07"},{"lineNumber":126,"author":{"gitId":"JWweiyin"},"content":"Details on Deck Mode can be found [here](#2-deck-menu).","lastModifiedDate":"2021-11-07"},{"lineNumber":127,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":128,"author":{"gitId":"JWweiyin"},"content":"Format:","lastModifiedDate":"2021-11-04"},{"lineNumber":129,"author":{"gitId":"JWweiyin"},"content":"`enter \u003cindex of deck\u003e`","lastModifiedDate":"2021-11-04"},{"lineNumber":130,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":131,"author":{"gitId":"JWweiyin"},"content":"Expected outcome:","lastModifiedDate":"2021-10-24"},{"lineNumber":132,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":133,"author":{"gitId":"JWweiyin"},"content":"![](assets/ug/enter.png)","lastModifiedDate":"2021-10-24"},{"lineNumber":134,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":135,"author":{"gitId":"xkisxk"},"content":"### [1.5 Test flashcards: `test`](#content)","lastModifiedDate":"2021-11-07"},{"lineNumber":136,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":137,"author":{"gitId":"JWweiyin"},"content":"If you wish to test your knowledge on your flashcards, use `test` to enter test mode. The program will ask you to input","lastModifiedDate":"2021-11-07"},{"lineNumber":138,"author":{"gitId":"JWweiyin"},"content":"the index for the deck that is to be tested. The word to be tested will be displayed in the console. Typing the exact","lastModifiedDate":"2021-11-07"},{"lineNumber":139,"author":{"gitId":"JWweiyin"},"content":"character-for-character definition for the word will result in a correct answer. Otherwise, the response will be marked","lastModifiedDate":"2021-11-07"},{"lineNumber":140,"author":{"gitId":"JWweiyin"},"content":"as incorrect. Regardless of whether the answer is correct or incorrect, the console will then display the next word to","lastModifiedDate":"2021-11-07"},{"lineNumber":141,"author":{"gitId":"JWweiyin"},"content":"be tested. When all cards in the deck have been tested, the percentage of correct answers will be displayed in the","lastModifiedDate":"2021-11-07"},{"lineNumber":142,"author":{"gitId":"JWweiyin"},"content":"console, as well as the cards which received incorrect responses.","lastModifiedDate":"2021-11-07"},{"lineNumber":143,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":144,"author":{"gitId":"JWweiyin"},"content":"If you do not know the answer to the current question being tested, and you want to skip to another question, you can do","lastModifiedDate":"2021-11-07"},{"lineNumber":145,"author":{"gitId":"JWweiyin"},"content":"so by typing `/NEXT` or `/BACK` when prompted with the test question.","lastModifiedDate":"2021-11-07"},{"lineNumber":146,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":147,"author":{"gitId":"ThaddeusLim99"},"content":"`/NEXT` will skip to the next question while `/BACK` will go back to the previous question tested.","lastModifiedDate":"2021-10-26"},{"lineNumber":148,"author":{"gitId":"JWweiyin"},"content":"\u003e ❗ Test data is not saved until a test is complete. If the program crashes mid-test, the data for that test will not be saved.","lastModifiedDate":"2021-11-04"},{"lineNumber":149,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":150,"author":{"gitId":"xRossKoh"},"content":"Format: `test`","lastModifiedDate":"2021-10-24"},{"lineNumber":151,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":152,"author":{"gitId":"xkisxk"},"content":"Expected outcome:","lastModifiedDate":"2021-10-24"},{"lineNumber":153,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":154,"author":{"gitId":"JWweiyin"},"content":"![](assets/ug/test.png)","lastModifiedDate":"2021-11-04"},{"lineNumber":155,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":156,"author":{"gitId":"xkisxk"},"content":"### [1.6 Review flashcards: `review`](#content)","lastModifiedDate":"2021-11-07"},{"lineNumber":157,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":158,"author":{"gitId":"JWweiyin"},"content":"If you wish to review the flashcards you are scoring wrongly more often, use `review` to enter review mode, which is the","lastModifiedDate":"2021-11-07"},{"lineNumber":159,"author":{"gitId":"JWweiyin"},"content":"same as test mode except that the cards tested will be the cards that you got wrong on more than 50% of the tests.","lastModifiedDate":"2021-11-07"},{"lineNumber":160,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":161,"author":{"gitId":"JWweiyin"},"content":"Format: `review`","lastModifiedDate":"2021-11-06"},{"lineNumber":162,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":163,"author":{"gitId":"JWweiyin"},"content":"Expected outcome:","lastModifiedDate":"2021-11-06"},{"lineNumber":164,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":165,"author":{"gitId":"JWweiyin"},"content":"![](assets/ug/review.png)","lastModifiedDate":"2021-11-06"},{"lineNumber":166,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":167,"author":{"gitId":"xkisxk"},"content":"### [1.7 Viewing all decks: `view`](#content)","lastModifiedDate":"2021-11-07"},{"lineNumber":168,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":169,"author":{"gitId":"JWweiyin"},"content":"If you wish to see all your decks at a glance, use `view` to display the names of all decks.","lastModifiedDate":"2021-11-07"},{"lineNumber":170,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":171,"author":{"gitId":"JWweiyin"},"content":"Format: `view`","lastModifiedDate":"2021-11-06"},{"lineNumber":172,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":173,"author":{"gitId":"JWweiyin"},"content":"Expected outcome:","lastModifiedDate":"2021-11-06"},{"lineNumber":174,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":175,"author":{"gitId":"JWweiyin"},"content":"![](assets/ug/viewdeck.png)","lastModifiedDate":"2021-11-06"},{"lineNumber":176,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":177,"author":{"gitId":"xkisxk"},"content":"### [1.8 View flashcard statistics: `viewfc`](#content)","lastModifiedDate":"2021-11-07"},{"lineNumber":178,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":179,"author":{"gitId":"JWweiyin"},"content":"If you wish to know the overall scores of your flashcards, `viewfc`  displays all flashcards that have been added up to","lastModifiedDate":"2021-11-07"},{"lineNumber":180,"author":{"gitId":"JWweiyin"},"content":"this point, including the cumulative score of all tests done for each of the flashcards.","lastModifiedDate":"2021-11-07"},{"lineNumber":181,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":182,"author":{"gitId":"xRossKoh"},"content":"Format: `viewfc`","lastModifiedDate":"2021-10-24"},{"lineNumber":183,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":184,"author":{"gitId":"xRossKoh"},"content":"Expected outcome:","lastModifiedDate":"2021-10-24"},{"lineNumber":185,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":186,"author":{"gitId":"JWweiyin"},"content":"![](assets/ug/viewfc.png)","lastModifiedDate":"2021-11-04"},{"lineNumber":187,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":188,"author":{"gitId":"xkisxk"},"content":"### [1.9 View test statistics: `viewtest`](#content)","lastModifiedDate":"2021-11-07"},{"lineNumber":189,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":190,"author":{"gitId":"JWweiyin"},"content":"If you wish to know how well you did on each of your tests, `viewtest` displays the results for a particular test index","lastModifiedDate":"2021-11-07"},{"lineNumber":191,"author":{"gitId":"JWweiyin"},"content":"or for all tests, depending on the argument that follows the `viewtest`command.","lastModifiedDate":"2021-11-07"},{"lineNumber":192,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":193,"author":{"gitId":"JWweiyin"},"content":"Format: `viewtest \u003cindex of test\u003e` or `viewtest all`","lastModifiedDate":"2021-11-04"},{"lineNumber":194,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":195,"author":{"gitId":"xRossKoh"},"content":"Expected outcome:","lastModifiedDate":"2021-10-24"},{"lineNumber":196,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":197,"author":{"gitId":"JWweiyin"},"content":"![](assets/ug/viewtestIndex.png)","lastModifiedDate":"2021-11-04"},{"lineNumber":198,"author":{"gitId":"JWweiyin"},"content":"![](assets/ug/viewtestAll.png)","lastModifiedDate":"2021-11-04"},{"lineNumber":199,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":200,"author":{"gitId":"xkisxk"},"content":"### [1.10 Finding a flashcard: `find`](#content)","lastModifiedDate":"2021-11-07"},{"lineNumber":201,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":202,"author":{"gitId":"JWweiyin"},"content":"If you wish to find a certain flashcard, `find` returns all flashcards with descriptions containing the search terms are","lastModifiedDate":"2021-11-07"},{"lineNumber":203,"author":{"gitId":"JWweiyin"},"content":"displayed on the screen.","lastModifiedDate":"2021-11-07"},{"lineNumber":204,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":205,"author":{"gitId":"JWweiyin"},"content":"\u003e ℹ️ Search terms are not case-sensitive.","lastModifiedDate":"2021-11-07"},{"lineNumber":206,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":207,"author":{"gitId":"JWweiyin"},"content":"Format: `find \u003csearch terms\u003e`","lastModifiedDate":"2021-10-24"},{"lineNumber":208,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":209,"author":{"gitId":"JWweiyin"},"content":"Expected outcome:","lastModifiedDate":"2021-10-24"},{"lineNumber":210,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":211,"author":{"gitId":"JWweiyin"},"content":"![](assets/ug/find.png)","lastModifiedDate":"2021-10-24"},{"lineNumber":212,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":213,"author":{"gitId":"xkisxk"},"content":"### [1.11 Listing all commands: `help`](#content)","lastModifiedDate":"2021-11-07"},{"lineNumber":214,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":215,"author":{"gitId":"JWweiyin"},"content":"If you wish to check the format of a command, `help` lists all commands within the main menu.","lastModifiedDate":"2021-11-07"},{"lineNumber":216,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":217,"author":{"gitId":"JWweiyin"},"content":"Format: `help`","lastModifiedDate":"2021-11-04"},{"lineNumber":218,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":219,"author":{"gitId":"JWweiyin"},"content":"Expected outcome:","lastModifiedDate":"2021-11-04"},{"lineNumber":220,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":221,"author":{"gitId":"JWweiyin"},"content":"![](assets/ug/help1.png)","lastModifiedDate":"2021-11-04"},{"lineNumber":222,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":223,"author":{"gitId":"JWweiyin"},"content":"![](assets/ug/help2.png)","lastModifiedDate":"2021-11-04"},{"lineNumber":224,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":225,"author":{"gitId":"xkisxk"},"content":"### [1.12 Exiting the app: `bye`](#content)","lastModifiedDate":"2021-11-07"},{"lineNumber":226,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":227,"author":{"gitId":"JWweiyin"},"content":"When you are done using CardLI, `bye` exits the CardLI application within the Command Line Interface.","lastModifiedDate":"2021-11-07"},{"lineNumber":228,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":229,"author":{"gitId":"xRossKoh"},"content":"Format: `bye`","lastModifiedDate":"2021-10-24"},{"lineNumber":230,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":231,"author":{"gitId":"JWweiyin"},"content":"Expected outcome:","lastModifiedDate":"2021-10-24"},{"lineNumber":232,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":233,"author":{"gitId":"JWweiyin"},"content":"![](assets/ug/bye.png)","lastModifiedDate":"2021-10-24"},{"lineNumber":234,"author":{"gitId":"xkisxk"},"content":"---","lastModifiedDate":"2021-10-24"},{"lineNumber":235,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":236,"author":{"gitId":"xkisxk"},"content":"## [2. Deck Menu](#content)","lastModifiedDate":"2021-11-07"},{"lineNumber":237,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":238,"author":{"gitId":"JWweiyin"},"content":"\u003e 💾 Your flashcards are saved after each command.","lastModifiedDate":"2021-11-04"},{"lineNumber":239,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":240,"author":{"gitId":"xkisxk"},"content":"### [2.1 Adding a flashcard `add`](#content)","lastModifiedDate":"2021-11-07"},{"lineNumber":241,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":242,"author":{"gitId":"JWweiyin"},"content":"Begin your flashcard journey with `add`. Adds a flashcard with the given front and back to the current deck.","lastModifiedDate":"2021-11-07"},{"lineNumber":243,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":244,"author":{"gitId":"JWweiyin"},"content":"\u003e ❗ You cannot add a flashcard if the content on its front matches the front of an existing flashcard anywhere in the app character-for-character.","lastModifiedDate":"2021-11-07"},{"lineNumber":245,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":246,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":247,"author":{"gitId":"JWweiyin"},"content":"Format: `add /f \u003cword/phrase on front of flashcard\u003e /b \u003cword/phrase on back of flashcard\u003e`","lastModifiedDate":"2021-11-04"},{"lineNumber":248,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":249,"author":{"gitId":"astralum"},"content":"Example of usage:","lastModifiedDate":"2021-10-24"},{"lineNumber":250,"author":{"gitId":"astralum"},"content":"` add /f glycerol /b C3H8O3`","lastModifiedDate":"2021-10-24"},{"lineNumber":251,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":252,"author":{"gitId":"JWweiyin"},"content":"Expected outcome:","lastModifiedDate":"2021-10-24"},{"lineNumber":253,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":254,"author":{"gitId":"JWweiyin"},"content":"![](assets/ug/addflash.png)","lastModifiedDate":"2021-10-24"},{"lineNumber":255,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":256,"author":{"gitId":"xkisxk"},"content":"### [2.2 Editing a flashcard: `edit`](#content)","lastModifiedDate":"2021-11-07"},{"lineNumber":257,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":258,"author":{"gitId":"JWweiyin"},"content":"Did you accidentally make a mistake in the content of a flashcard? `edit` allows you to modify either the front or back","lastModifiedDate":"2021-11-07"},{"lineNumber":259,"author":{"gitId":"JWweiyin"},"content":"side of a flashcard. This is so that you do not have to resort to deleting and adding a new flashcard.","lastModifiedDate":"2021-11-07"},{"lineNumber":260,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":261,"author":{"gitId":"JWweiyin"},"content":"In the `edit` command, `/c` denotes the card index, `/s` denotes the side of the flashcard to edit and`/i` denotes the","lastModifiedDate":"2021-11-07"},{"lineNumber":262,"author":{"gitId":"JWweiyin"},"content":"content you want to change the flashcard to.","lastModifiedDate":"2021-11-07"},{"lineNumber":263,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":264,"author":{"gitId":"JWweiyin"},"content":"\u003e ❗ You cannot edit the front of a flashcard if the resulting flashcard front matches the front of an existing flashcard anywhere in the app character-for-character.","lastModifiedDate":"2021-11-07"},{"lineNumber":265,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":266,"author":{"gitId":"JWweiyin"},"content":"Format: `edit /c \u003cindex of card\u003e /s \u003cfront or back\u003e /i \u003cinput\u003e`","lastModifiedDate":"2021-11-04"},{"lineNumber":267,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":268,"author":{"gitId":"-"},"content":"Example of usage:","lastModifiedDate":"2020-05-24"},{"lineNumber":269,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":270,"author":{"gitId":"ThaddeusLim99"},"content":"`edit /c 1 /s front /i 1 + 1`","lastModifiedDate":"2021-10-25"},{"lineNumber":271,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":272,"author":{"gitId":"ThaddeusLim99"},"content":"Expected outcome:","lastModifiedDate":"2021-10-24"},{"lineNumber":273,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":274,"author":{"gitId":"ThaddeusLim99"},"content":"![](assets/ug/editcard.png)","lastModifiedDate":"2021-10-25"},{"lineNumber":275,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":276,"author":{"gitId":"xkisxk"},"content":"### [2.3 Deleting a flashcard: `delete`](#content)","lastModifiedDate":"2021-11-07"},{"lineNumber":277,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":278,"author":{"gitId":"JWweiyin"},"content":"No longer need a flashcard? `delete` removes the flashcard indicated by the index.","lastModifiedDate":"2021-11-07"},{"lineNumber":279,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":280,"author":{"gitId":"JWweiyin"},"content":"Format: `delete \u003cindex of card\u003e`","lastModifiedDate":"2021-11-06"},{"lineNumber":281,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":282,"author":{"gitId":"JWweiyin"},"content":"Example of usage:","lastModifiedDate":"2021-11-06"},{"lineNumber":283,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":284,"author":{"gitId":"JWweiyin"},"content":"`delete 1`","lastModifiedDate":"2021-11-06"},{"lineNumber":285,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":286,"author":{"gitId":"JWweiyin"},"content":"Expected outcome:","lastModifiedDate":"2021-11-06"},{"lineNumber":287,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":288,"author":{"gitId":"JWweiyin"},"content":"![](assets/ug/deleteindexflash.png)","lastModifiedDate":"2021-11-06"},{"lineNumber":289,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":290,"author":{"gitId":"xkisxk"},"content":"### [2.4 Moving a flashcard: `move`](#content)","lastModifiedDate":"2021-11-07"},{"lineNumber":291,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":292,"author":{"gitId":"JWweiyin"},"content":"`move` is useful when you accidentally added a flashcard to the wrong deck. You can transfer the card to another deck","lastModifiedDate":"2021-11-07"},{"lineNumber":293,"author":{"gitId":"JWweiyin"},"content":"without going through the hassle of deleting the card and adding the same card to another deck.","lastModifiedDate":"2021-11-07"},{"lineNumber":294,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":295,"author":{"gitId":"JWweiyin"},"content":"`move ` moves a flashcard from the deck you are currently in to a deck of your choice, if it exists.","lastModifiedDate":"2021-11-07"},{"lineNumber":296,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":297,"author":{"gitId":"JWweiyin"},"content":"In this command, `/c` denotes the card index and `/d` denotes the deck index or the name of the deck you want to move","lastModifiedDate":"2021-11-07"},{"lineNumber":298,"author":{"gitId":"JWweiyin"},"content":"the card to.","lastModifiedDate":"2021-11-07"},{"lineNumber":299,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":300,"author":{"gitId":"JWweiyin"},"content":"Format: `move /c \u003cindex of card\u003e /d \u003cindex of deck\u003e`","lastModifiedDate":"2021-11-04"},{"lineNumber":301,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":302,"author":{"gitId":"ThaddeusLim99"},"content":"Example of usage:","lastModifiedDate":"2021-10-26"},{"lineNumber":303,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":304,"author":{"gitId":"JWweiyin"},"content":"`move /c 1 /d 2`","lastModifiedDate":"2021-11-04"},{"lineNumber":305,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":306,"author":{"gitId":"ThaddeusLim99"},"content":"Expected outcome:","lastModifiedDate":"2021-10-26"},{"lineNumber":307,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":308,"author":{"gitId":"ThaddeusLim99"},"content":"* Deck 2 before moving","lastModifiedDate":"2021-10-26"},{"lineNumber":309,"author":{"gitId":"ThaddeusLim99"},"content":"  ![](assets/ug/move2.png)","lastModifiedDate":"2021-10-26"},{"lineNumber":310,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":311,"author":{"gitId":"ThaddeusLim99"},"content":"* Deck 1 before and after moving; Deck 2 after moving","lastModifiedDate":"2021-10-26"},{"lineNumber":312,"author":{"gitId":"ThaddeusLim99"},"content":"  ![](assets/ug/move4.png)","lastModifiedDate":"2021-10-26"},{"lineNumber":313,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":314,"author":{"gitId":"xkisxk"},"content":"### [2.5 Viewing flashcards: `view`](#content)","lastModifiedDate":"2021-11-07"},{"lineNumber":315,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":316,"author":{"gitId":"JWweiyin"},"content":"`view` lets you look at all the flashcards in the current deck at a glance. Displays all the flashcards in the current","lastModifiedDate":"2021-11-07"},{"lineNumber":317,"author":{"gitId":"JWweiyin"},"content":"deck.","lastModifiedDate":"2021-11-07"},{"lineNumber":318,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":319,"author":{"gitId":"astralum"},"content":"Format: `view`","lastModifiedDate":"2021-10-24"},{"lineNumber":320,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":321,"author":{"gitId":"astralum"},"content":"Expected outcome:","lastModifiedDate":"2021-10-24"},{"lineNumber":322,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":323,"author":{"gitId":"JWweiyin"},"content":"![](assets/ug/viewcard.png)","lastModifiedDate":"2021-11-04"},{"lineNumber":324,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":325,"author":{"gitId":"xkisxk"},"content":"### [2.6 Listing all commands in deck mode: `help`](#content)","lastModifiedDate":"2021-11-07"},{"lineNumber":326,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":327,"author":{"gitId":"JWweiyin"},"content":"Did you forget the format of a command? `help` lists all commands within Deck Mode.","lastModifiedDate":"2021-11-07"},{"lineNumber":328,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":329,"author":{"gitId":"JWweiyin"},"content":"Format: `help`","lastModifiedDate":"2021-11-04"},{"lineNumber":330,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":331,"author":{"gitId":"JWweiyin"},"content":"Expected outcome:","lastModifiedDate":"2021-10-24"},{"lineNumber":332,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":333,"author":{"gitId":"JWweiyin"},"content":"![](assets/ug/helpdeck.png)","lastModifiedDate":"2021-11-04"},{"lineNumber":334,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":335,"author":{"gitId":"xkisxk"},"content":"### [2.7 Exiting deck mode: `exit`](#content)","lastModifiedDate":"2021-11-07"},{"lineNumber":336,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":337,"author":{"gitId":"JWweiyin"},"content":"When you are done taking actions within a deck, `exit` lets you exit deck mode and returns you to the main menu.","lastModifiedDate":"2021-11-07"},{"lineNumber":338,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":339,"author":{"gitId":"xRossKoh"},"content":"Format: ``exit``","lastModifiedDate":"2021-10-24"},{"lineNumber":340,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":341,"author":{"gitId":"JWweiyin"},"content":"Expected outcome:","lastModifiedDate":"2021-10-24"},{"lineNumber":342,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":343,"author":{"gitId":"JWweiyin"},"content":"![](assets/ug/exit.png)","lastModifiedDate":"2021-10-24"},{"lineNumber":344,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":345,"author":{"gitId":"xkisxk"},"content":"## [3. FAQs](#content)","lastModifiedDate":"2021-11-07"},{"lineNumber":346,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":347,"author":{"gitId":"-"},"content":"**Q**: How do I transfer my data to another computer?","lastModifiedDate":"2020-05-24"},{"lineNumber":348,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":349,"author":{"gitId":"JWweiyin"},"content":"**A**: In order to transfer your app data to another computer, simply transfer the `data` file directory to your other","lastModifiedDate":"2021-11-07"},{"lineNumber":350,"author":{"gitId":"JWweiyin"},"content":"computer, and download the latest version of CardLI there. The `data` file directory should contain both","lastModifiedDate":"2021-11-07"},{"lineNumber":351,"author":{"gitId":"JWweiyin"},"content":"the `Cards_CardLI.json` and `Tests_CardLI.json` files. Ensure that both the `data` file directory and `CardLI.jar` file","lastModifiedDate":"2021-11-07"},{"lineNumber":352,"author":{"gitId":"JWweiyin"},"content":"are in the **same directory** before running the CardLI application in the command prompt as instructed under the Quick","lastModifiedDate":"2021-11-07"},{"lineNumber":353,"author":{"gitId":"JWweiyin"},"content":"Start section.","lastModifiedDate":"2021-11-07"},{"lineNumber":354,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":355,"author":{"gitId":"xRossKoh"},"content":"**Q**: Can I directly edit the storage JSON files to make changes to my saved data?","lastModifiedDate":"2021-11-07"},{"lineNumber":356,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":357,"author":{"gitId":"JWweiyin"},"content":"**A**: We highly recommend that users who are unfamiliar with the workings of JSON and the format of the saved data do","lastModifiedDate":"2021-11-07"},{"lineNumber":358,"author":{"gitId":"JWweiyin"},"content":"not attempt to directly edit the storage JSON files. This is because the CardLI application has been programmed to read","lastModifiedDate":"2021-11-07"},{"lineNumber":359,"author":{"gitId":"JWweiyin"},"content":"a specified format from the JSON files. Any inaccuracies arising from the direct editing of the files will likely lead","lastModifiedDate":"2021-11-07"},{"lineNumber":360,"author":{"gitId":"JWweiyin"},"content":"to undesirable consequences such as bugs and possible loss of your saved data if the files cannot be reverted to their","lastModifiedDate":"2021-11-07"},{"lineNumber":361,"author":{"gitId":"JWweiyin"},"content":"original format. Nonetheless, it is still possible to directly make edits to the storage JSON files if you are confidant","lastModifiedDate":"2021-11-07"},{"lineNumber":362,"author":{"gitId":"JWweiyin"},"content":"in maintaining the format integrity of the files.","lastModifiedDate":"2021-11-07"},{"lineNumber":363,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":364,"author":{"gitId":"xkisxk"},"content":"## [4. Command Summary](#content)","lastModifiedDate":"2021-11-07"},{"lineNumber":365,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":366,"author":{"gitId":"xkisxk"},"content":"### [4.1 Main Menu:](#content)","lastModifiedDate":"2021-11-07"},{"lineNumber":367,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":368,"author":{"gitId":"JWweiyin"},"content":"|Action|Format|","lastModifiedDate":"2021-10-24"},{"lineNumber":369,"author":{"gitId":"JWweiyin"},"content":"|-------|------|","lastModifiedDate":"2021-10-24"},{"lineNumber":370,"author":{"gitId":"JWweiyin"},"content":"|add deck|`add \u003cname of deck\u003e`|","lastModifiedDate":"2021-10-24"},{"lineNumber":371,"author":{"gitId":"ThaddeusLim99"},"content":"|edit deck|`edit /d \u003cindex of deck\u003e /n \u003cname\u003e`|","lastModifiedDate":"2021-11-07"},{"lineNumber":372,"author":{"gitId":"JWweiyin"},"content":"|delete deck|`delete \u003cindex\u003e`|","lastModifiedDate":"2021-11-04"},{"lineNumber":373,"author":{"gitId":"JWweiyin"},"content":"|enter deck|`enter \u003cindex of deck\u003e`|","lastModifiedDate":"2021-10-24"},{"lineNumber":374,"author":{"gitId":"JWweiyin"},"content":"|test|`test`|","lastModifiedDate":"2021-10-24"},{"lineNumber":375,"author":{"gitId":"JWweiyin"},"content":"|review|`review`|","lastModifiedDate":"2021-11-06"},{"lineNumber":376,"author":{"gitId":"JWweiyin"},"content":"|view decks|`view`|","lastModifiedDate":"2021-11-06"},{"lineNumber":377,"author":{"gitId":"JWweiyin"},"content":"|view overall statistics for flashcards|`viewfc`|","lastModifiedDate":"2021-10-24"},{"lineNumber":378,"author":{"gitId":"xRossKoh"},"content":"|view test statistics|`viewtest \u003cindex of test\u003e` prints the result of the test indicated by the index.\u003cbr\u003e`viewtest all` prints the results for all tests.|","lastModifiedDate":"2021-10-24"},{"lineNumber":379,"author":{"gitId":"JWweiyin"},"content":"|find flashcard|`find \u003cword/phrase\u003e`|","lastModifiedDate":"2021-10-24"},{"lineNumber":380,"author":{"gitId":"JWweiyin"},"content":"|lists all commands in main menu|`help`|","lastModifiedDate":"2021-11-04"},{"lineNumber":381,"author":{"gitId":"JWweiyin"},"content":"|exiting program|`bye`|","lastModifiedDate":"2021-10-24"},{"lineNumber":382,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":383,"author":{"gitId":"xkisxk"},"content":"### [4.2 Deck Menu:](#content)","lastModifiedDate":"2021-11-07"},{"lineNumber":384,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":385,"author":{"gitId":"JWweiyin"},"content":"|Action|Format|","lastModifiedDate":"2021-10-24"},{"lineNumber":386,"author":{"gitId":"JWweiyin"},"content":"|------|------|","lastModifiedDate":"2021-10-24"},{"lineNumber":387,"author":{"gitId":"JWweiyin"},"content":"|add flashcard|`add /f \u003cword\u003e /b \u003cdefinition\u003e`|","lastModifiedDate":"2021-10-24"},{"lineNumber":388,"author":{"gitId":"ThaddeusLim99"},"content":"|editing a flashcard|`edit /c \u003cindex of card\u003e /s \u003cfront or back\u003e /i \u003cinput\u003e`|","lastModifiedDate":"2021-11-07"},{"lineNumber":389,"author":{"gitId":"JWweiyin"},"content":"|deleting a flashcard|`delete \u003cindex of card\u003e`|","lastModifiedDate":"2021-11-06"},{"lineNumber":390,"author":{"gitId":"JWweiyin"},"content":"|moving a flashcard| `move /c \u003cindex of card\u003e /d \u003cindex of deck\u003e`|","lastModifiedDate":"2021-11-04"},{"lineNumber":391,"author":{"gitId":"JWweiyin"},"content":"|viewing flashcards|`view`|","lastModifiedDate":"2021-10-24"},{"lineNumber":392,"author":{"gitId":"JWweiyin"},"content":"|lists all commands in deck mode|`help`|","lastModifiedDate":"2021-11-04"},{"lineNumber":393,"author":{"gitId":"JWweiyin"},"content":"|exiting deck mode|`exit`|","lastModifiedDate":"2021-10-24"},{"lineNumber":394,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-24"}],"authorContributionMap":{"JWweiyin":223,"astralum":17,"ThaddeusLim99":32,"xRossKoh":17,"xkisxk":64,"-":41}},{"path":"docs/team/astralum.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"astralum"},"content":"# Jin Minyue  - Project Portfolio Page","lastModifiedDate":"2021-11-04"},{"lineNumber":2,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":3,"author":{"gitId":"astralum"},"content":"## Project: CardLI","lastModifiedDate":"2021-11-04"},{"lineNumber":4,"author":{"gitId":"astralum"},"content":"CardLI is a desktop Command Line Interface (CLI) application that allows users to create, organise, test and ","lastModifiedDate":"2021-11-04"},{"lineNumber":5,"author":{"gitId":"astralum"},"content":"review their flashcards. It is written in java and has about 4kLoC.","lastModifiedDate":"2021-11-04"},{"lineNumber":6,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":7,"author":{"gitId":"astralum"},"content":"Below are my contributions to the project.","lastModifiedDate":"2021-11-04"},{"lineNumber":8,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":9,"author":{"gitId":"astralum"},"content":"### Summary of Contributions","lastModifiedDate":"2021-11-04"},{"lineNumber":10,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":11,"author":{"gitId":"astralum"},"content":"#### Features Implemented","lastModifiedDate":"2021-11-04"},{"lineNumber":12,"author":{"gitId":"astralum"},"content":"* **View flashcards**","lastModifiedDate":"2021-11-04"},{"lineNumber":13,"author":{"gitId":"astralum"},"content":"  * What it does: Prints all the flashcards in the current deck to the standard output. Each flashcard is formatted","lastModifiedDate":"2021-11-04"},{"lineNumber":14,"author":{"gitId":"astralum"},"content":"such that the front and back are printed side by side, with centered-justification and line-wrapping.","lastModifiedDate":"2021-11-04"},{"lineNumber":15,"author":{"gitId":"astralum"},"content":"  * Highlights: It required the creation of several helper methods to split the lines of the front and back, pad ","lastModifiedDate":"2021-11-04"},{"lineNumber":16,"author":{"gitId":"astralum"},"content":"the one with fewer lines with empty lines, pad the last line with whitespaces to center it, and finally join each","lastModifiedDate":"2021-11-04"},{"lineNumber":17,"author":{"gitId":"astralum"},"content":"line of front and back to be displayed on the same line.","lastModifiedDate":"2021-11-04"},{"lineNumber":18,"author":{"gitId":"astralum"},"content":"* **Countdown timer**","lastModifiedDate":"2021-11-04"},{"lineNumber":19,"author":{"gitId":"astralum"},"content":"  * What it does: Prints a countdown timer to the standard output, starting from the given time. When used while ","lastModifiedDate":"2021-11-04"},{"lineNumber":20,"author":{"gitId":"astralum"},"content":"testing, ends the test prematurely if the user hasn\u0027t finished it, and will reject the answer for the current ","lastModifiedDate":"2021-11-04"},{"lineNumber":21,"author":{"gitId":"astralum"},"content":"question the user is at when the timer runs out.","lastModifiedDate":"2021-11-04"},{"lineNumber":22,"author":{"gitId":"astralum"},"content":"  * Justification: It simulates the time-limited testing conditions users undergo when preparing for tests.","lastModifiedDate":"2021-11-04"},{"lineNumber":23,"author":{"gitId":"astralum"},"content":"  * Highlights: It was difficult and complicated to implement. It relies on the relative position of the user\u0027s cursor ","lastModifiedDate":"2021-11-04"},{"lineNumber":24,"author":{"gitId":"astralum"},"content":"to clear the current timer line and print the new timer line with the updated time. Since it is updated and prints in ","lastModifiedDate":"2021-11-04"},{"lineNumber":25,"author":{"gitId":"astralum"},"content":"the background asynchronously, it might not always appear in the correct location. A workaround had to be implemented ","lastModifiedDate":"2021-11-04"},{"lineNumber":26,"author":{"gitId":"astralum"},"content":"to allow it to start printing after a certain amount of time has elapsed so that the other synchronous printing tasks ","lastModifiedDate":"2021-11-04"},{"lineNumber":27,"author":{"gitId":"astralum"},"content":"will be completed first.","lastModifiedDate":"2021-11-04"},{"lineNumber":28,"author":{"gitId":"astralum"},"content":"  * Credits: Jansi, a library that enables ANSI escape sequences to be used","lastModifiedDate":"2021-11-04"},{"lineNumber":29,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":30,"author":{"gitId":"astralum"},"content":"#### Code Contributed","lastModifiedDate":"2021-11-04"},{"lineNumber":31,"author":{"gitId":"astralum"},"content":"[tP Code Dashboard](https://nus-cs2113-ay2122s1.github.io/tp-dashboard/?search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2021-09-25\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dastralum\u0026tabRepo\u003dAY2122S1-CS2113T-F12-1%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs~functional-code~test-code~other\u0026authorshipIsBinaryFileTypeChecked\u003dfalse)","lastModifiedDate":"2021-11-04"},{"lineNumber":32,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":33,"author":{"gitId":"astralum"},"content":"#### Enhancements Implemented","lastModifiedDate":"2021-11-04"},{"lineNumber":34,"author":{"gitId":"astralum"},"content":"* Implemented timer feature in the testing mode","lastModifiedDate":"2021-11-04"},{"lineNumber":35,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":36,"author":{"gitId":"astralum"},"content":"#### Contributions to the UG","lastModifiedDate":"2021-11-04"},{"lineNumber":37,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":38,"author":{"gitId":"astralum"},"content":"#### Contributions to the DG","lastModifiedDate":"2021-11-04"},{"lineNumber":39,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":40,"author":{"gitId":"astralum"},"content":"#### Contributions to team-based tasks","lastModifiedDate":"2021-11-04"}],"authorContributionMap":{"astralum":40}},{"path":"docs/team/jwweiyin.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"JWweiyin"},"content":"# Joanne Wong  - Project Portfolio Page","lastModifiedDate":"2021-11-04"},{"lineNumber":2,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":3,"author":{"gitId":"JWweiyin"},"content":"## Overview","lastModifiedDate":"2021-11-04"},{"lineNumber":4,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":5,"author":{"gitId":"JWweiyin"},"content":"CardLI is a Command Line Interface app that helps students manage their flashcards. Students can organise their flashcards and test their knowledge of them with CardLI. ","lastModifiedDate":"2021-11-04"},{"lineNumber":6,"author":{"gitId":"JWweiyin"},"content":"### Summary of Contributions","lastModifiedDate":"2021-11-04"},{"lineNumber":7,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":8,"author":{"gitId":"JWweiyin"},"content":"#### Code Contributed","lastModifiedDate":"2021-11-04"},{"lineNumber":9,"author":{"gitId":"JWweiyin"},"content":"My RepoSense Link can be found [here](https://nus-cs2113-ay2122s1.github.io/tp-dashboard/?search\u003djwweiyin\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dtrue\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026since\u003d2021-09-25\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dJWweiyin\u0026tabRepo\u003dAY2122S1-CS2113T-F12-1%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs~functional-code~test-code\u0026authorshipIsBinaryFileTypeChecked\u003dfalse)","lastModifiedDate":"2021-11-04"},{"lineNumber":10,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":11,"author":{"gitId":"JWweiyin"},"content":"#### Enhancements Implemented","lastModifiedDate":"2021-11-04"},{"lineNumber":12,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":13,"author":{"gitId":"JWweiyin"},"content":"1. Adding and deleting of flashcards (Pull requests [#7](https://github.com/AY2122S1-CS2113T-F12-1/tp/pull/7), [#19](https://github.com/AY2122S1-CS2113T-F12-1/tp/pull/19))","lastModifiedDate":"2021-11-06"},{"lineNumber":14,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":15,"author":{"gitId":"JWweiyin"},"content":"These functions add and delete flashcards from the deck.","lastModifiedDate":"2021-11-04"},{"lineNumber":16,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":17,"author":{"gitId":"JWweiyin"},"content":"Initially, we allowed the user to delete flashcards by providing the **index of card** or the **content on the front of the flashcard**. However, this led to unexpected outcomes when users added cards which front only contained a positive integer. Hence we discarded the delete by content method as there was insufficient time to design an elegant implementation to handle such cases.","lastModifiedDate":"2021-11-06"},{"lineNumber":18,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":19,"author":{"gitId":"JWweiyin"},"content":"2. Adding of decks (Pull requests [#49](https://github.com/AY2122S1-CS2113T-F12-1/tp/pull/49))","lastModifiedDate":"2021-11-06"},{"lineNumber":20,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":21,"author":{"gitId":"JWweiyin"},"content":"This function allows multiple decks to be managed by the program.","lastModifiedDate":"2021-11-04"},{"lineNumber":22,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":23,"author":{"gitId":"JWweiyin"},"content":"3. Inner Parser (Pull requests [#60](https://github.com/AY2122S1-CS2113T-F12-1/tp/pull/60), [#61](https://github.com/AY2122S1-CS2113T-F12-1/tp/pull/61))","lastModifiedDate":"2021-11-06"},{"lineNumber":24,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":25,"author":{"gitId":"JWweiyin"},"content":"The inner parser handles all commands in deck mode, separate from the parser handling the commands in the main menu.","lastModifiedDate":"2021-11-04"},{"lineNumber":26,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":27,"author":{"gitId":"JWweiyin"},"content":"Initially, both deck mode and main menu commands were handled within one parser, but doing so required more commands and flags (*add* was used to add flashcards to a deck, *adddeck* was used to add a deck). To make the usage of the app more intuitive, the deck mode commands were extracted and placed in their own parser.","lastModifiedDate":"2021-11-06"},{"lineNumber":28,"author":{"gitId":"JWweiyin"},"content":"4. Flashcard search (Pull request [#81](https://github.com/AY2122S1-CS2113T-F12-1/tp/pull/81))","lastModifiedDate":"2021-11-06"},{"lineNumber":29,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":30,"author":{"gitId":"JWweiyin"},"content":"This function searches for and displays flashcards matching the search term input by the user. It allows the user to find certain flashcards without entering each deck and manually looking through all the flashcards. The function is not case-sensitive.","lastModifiedDate":"2021-11-04"},{"lineNumber":31,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":32,"author":{"gitId":"JWweiyin"},"content":"5. JUnit Testing","lastModifiedDate":"2021-11-04"},{"lineNumber":33,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":34,"author":{"gitId":"JWweiyin"},"content":"Wrote tests for JUnit for add and delete flashcard functions","lastModifiedDate":"2021-11-04"},{"lineNumber":35,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":36,"author":{"gitId":"JWweiyin"},"content":"6. Bug fixes for v2.1 (Pull requests [#164](https://github.com/AY2122S1-CS2113T-F12-1/tp/pull/164), [#172](https://github.com/AY2122S1-CS2113T-F12-1/tp/pull/172) )","lastModifiedDate":"2021-11-06"},{"lineNumber":37,"author":{"gitId":"JWweiyin"},"content":"#### Contributions to the UG","lastModifiedDate":"2021-11-04"},{"lineNumber":38,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":39,"author":{"gitId":"JWweiyin"},"content":"Added screenshots to show sample output of the commands. Wrote `find`, `help` and `bye` sections. Wrote command summary. Edited descriptions and format of commands for consistency. ([#179](https://github.com/AY2122S1-CS2113T-F12-1/tp/pull/179))","lastModifiedDate":"2021-11-06"},{"lineNumber":40,"author":{"gitId":"JWweiyin"},"content":"#### Contributions to the DG","lastModifiedDate":"2021-11-04"},{"lineNumber":41,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":42,"author":{"gitId":"JWweiyin"},"content":"Wrote and constructed architecture diagrams for overall architecture, model component, logic component. Wrote design details and constructed sequence diagram under `find`.","lastModifiedDate":"2021-11-04"},{"lineNumber":43,"author":{"gitId":"JWweiyin"},"content":"#### Contributions to team-based tasks","lastModifiedDate":"2021-11-04"},{"lineNumber":44,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":45,"author":{"gitId":"JWweiyin"},"content":"Documented user stories and non-functional requirements in DG.","lastModifiedDate":"2021-11-06"},{"lineNumber":46,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":47,"author":{"gitId":"JWweiyin"},"content":"Tested and reported bugs for other team\u0027s apps. (Examples: [1](https://github.com/JWweiyin/ped/issues/4), [2](https://github.com/JWweiyin/ped/issues/5), [3](https://github.com/JWweiyin/ped/issues/7))","lastModifiedDate":"2021-11-06"}],"authorContributionMap":{"JWweiyin":47}},{"path":"docs/team/thaddeuslim99.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"ThaddeusLim99"},"content":"# Thaddeus Lim - Project Portfolio Page","lastModifiedDate":"2021-11-03"},{"lineNumber":2,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":3,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":4,"author":{"gitId":"ThaddeusLim99"},"content":"### Project: CardLI","lastModifiedDate":"2021-11-03"},{"lineNumber":5,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":6,"author":{"gitId":"ThaddeusLim99"},"content":"CardLI is a desktop app that helps you create, organise, and review flashcards via a Command Line","lastModifiedDate":"2021-11-03"},{"lineNumber":7,"author":{"gitId":"ThaddeusLim99"},"content":"Interface. It is written in Java.","lastModifiedDate":"2021-11-03"},{"lineNumber":8,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":9,"author":{"gitId":"ThaddeusLim99"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2021-11-03"},{"lineNumber":10,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":11,"author":{"gitId":"ThaddeusLim99"},"content":"* **New Feature**: Added the ability to edit card content and deck name.","lastModifiedDate":"2021-11-03"},{"lineNumber":12,"author":{"gitId":"ThaddeusLim99"},"content":"    * What it does: Allows the user to change the front and back of a card, as well as the name of decks.","lastModifiedDate":"2021-11-03"},{"lineNumber":13,"author":{"gitId":"ThaddeusLim99"},"content":"    * Justification: This feature improves the product significantly because a user can make mistakes in commands ","lastModifiedDate":"2021-11-03"},{"lineNumber":14,"author":{"gitId":"ThaddeusLim99"},"content":"  and the app should provide a convenient way to rectify them.","lastModifiedDate":"2021-11-03"},{"lineNumber":15,"author":{"gitId":"ThaddeusLim99"},"content":"    ","lastModifiedDate":"2021-11-03"},{"lineNumber":16,"author":{"gitId":"ThaddeusLim99"},"content":"* **New Feature**: Added the ability to move a card from one deck to another.","lastModifiedDate":"2021-11-03"},{"lineNumber":17,"author":{"gitId":"ThaddeusLim99"},"content":"  * What it does: Allows the user to transfer a card from one deck to another.","lastModifiedDate":"2021-11-03"},{"lineNumber":18,"author":{"gitId":"ThaddeusLim99"},"content":"  * Justification: This feature improves the product significantly because a user can make mistakes in placing a card in","lastModifiedDate":"2021-11-03"},{"lineNumber":19,"author":{"gitId":"ThaddeusLim99"},"content":"    a certain deck and may wish to move it to another deck in a convenient way rather than having to delete the card and","lastModifiedDate":"2021-11-06"},{"lineNumber":20,"author":{"gitId":"ThaddeusLim99"},"content":"  add the card in another deck.","lastModifiedDate":"2021-11-03"},{"lineNumber":21,"author":{"gitId":"ThaddeusLim99"},"content":"  * Comments: This feature was slightly harder to implement compared to the `edit` feature as it needed access to ","lastModifiedDate":"2021-11-06"},{"lineNumber":22,"author":{"gitId":"ThaddeusLim99"},"content":"  both the system level and the deck level, whereas `edit` either used the system level or the deck level but not both","lastModifiedDate":"2021-11-06"},{"lineNumber":23,"author":{"gitId":"ThaddeusLim99"},"content":"  at the same time","lastModifiedDate":"2021-11-06"},{"lineNumber":24,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":25,"author":{"gitId":"ThaddeusLim99"},"content":"* **New Feature**: FlashCard Testing.","lastModifiedDate":"2021-11-06"},{"lineNumber":26,"author":{"gitId":"ThaddeusLim99"},"content":"  * What it does: Through creating the initial Answer, AnswerList and TestManager classes, users can test his/her","lastModifiedDate":"2021-11-03"},{"lineNumber":27,"author":{"gitId":"ThaddeusLim99"},"content":"  knowledge with the flashcards.","lastModifiedDate":"2021-11-03"},{"lineNumber":28,"author":{"gitId":"ThaddeusLim99"},"content":"  * Justification: This feature is essential to the product as the purpose of flashcards is to test oneself with them.","lastModifiedDate":"2021-11-03"},{"lineNumber":29,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":30,"author":{"gitId":"ThaddeusLim99"},"content":"* **New Feature**: Capability to skip questions during tests.","lastModifiedDate":"2021-11-06"},{"lineNumber":31,"author":{"gitId":"ThaddeusLim99"},"content":"  * What it does: Added the ability to skip a question during tests.","lastModifiedDate":"2021-11-03"},{"lineNumber":32,"author":{"gitId":"ThaddeusLim99"},"content":"  * Justification: This feature improves the product significantly as a user may not know the answer to a flashcard","lastModifiedDate":"2021-11-03"},{"lineNumber":33,"author":{"gitId":"ThaddeusLim99"},"content":"  and may want to come back to the question later.","lastModifiedDate":"2021-11-03"},{"lineNumber":34,"author":{"gitId":"ThaddeusLim99"},"content":"  * Comments: This feature was more of a challenge than initially thought. There were many bugs to take care of and the","lastModifiedDate":"2021-11-06"},{"lineNumber":35,"author":{"gitId":"ThaddeusLim99"},"content":"  underlying method of testing had to be changed to enable this feature. Instead of a for loop testing all the ","lastModifiedDate":"2021-11-06"},{"lineNumber":36,"author":{"gitId":"ThaddeusLim99"},"content":"  flashcards in a deck, the use of a counter variable to keep track of the current question being tested and a flag","lastModifiedDate":"2021-11-06"},{"lineNumber":37,"author":{"gitId":"ThaddeusLim99"},"content":"  to check if a question has already been answered had to be developed.","lastModifiedDate":"2021-11-06"},{"lineNumber":38,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":39,"author":{"gitId":"ThaddeusLim99"},"content":"* **New Feature**: Added help command.","lastModifiedDate":"2021-11-03"},{"lineNumber":40,"author":{"gitId":"ThaddeusLim99"},"content":"  * What it does: Added the ability to ask for the list of commands.","lastModifiedDate":"2021-11-03"},{"lineNumber":41,"author":{"gitId":"ThaddeusLim99"},"content":"  * Justification: This feature improves the product significantly as a user may not want to refer to the user guide","lastModifiedDate":"2021-11-03"},{"lineNumber":42,"author":{"gitId":"ThaddeusLim99"},"content":"  for instructions.","lastModifiedDate":"2021-11-03"},{"lineNumber":43,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":44,"author":{"gitId":"ThaddeusLim99"},"content":"* **Code contributed**: [RepoSense link](https://nus-cs2113-ay2122s1.github.io/tp-dashboard/?search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dtrue\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026since\u003d2021-09-25\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dThaddeusLim99\u0026tabRepo\u003dAY2122S1-CS2113T-F12-1%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs~functional-code~test-code\u0026authorshipIsBinaryFileTypeChecked\u003dfalse\u0026zFR\u003dfalse)","lastModifiedDate":"2021-11-06"},{"lineNumber":45,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":46,"author":{"gitId":"ThaddeusLim99"},"content":"* **Project management**:","lastModifiedDate":"2021-11-03"},{"lineNumber":47,"author":{"gitId":"ThaddeusLim99"},"content":"    * Managed milestone V1.0 and V2.1","lastModifiedDate":"2021-11-03"},{"lineNumber":48,"author":{"gitId":"ThaddeusLim99"},"content":"    * Ensured tracker progress for V2.0 and V2.1","lastModifiedDate":"2021-11-03"},{"lineNumber":49,"author":{"gitId":"ThaddeusLim99"},"content":"    * Reviewed team\u0027s PR. Example: [\\#188](https://github.com/AY2122S1-CS2113T-F12-1/tp/pull/188)","lastModifiedDate":"2021-11-07"},{"lineNumber":50,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":51,"author":{"gitId":"ThaddeusLim99"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2021-11-03"},{"lineNumber":52,"author":{"gitId":"ThaddeusLim99"},"content":"    * Created CardLI logo","lastModifiedDate":"2021-11-03"},{"lineNumber":53,"author":{"gitId":"ThaddeusLim99"},"content":"    * Fixed some PED bugs and wrote additional tests for existing features to increase test coverage: [\\#173](https://github.com/AY2122S1-CS2113T-F12-1/tp/pull/173), [\\#176](https://github.com/AY2122S1-CS2113T-F12-1/tp/pull/176/commits/4a65edacd11031aa9171799af420bb412d415ddb)","lastModifiedDate":"2021-11-06"},{"lineNumber":54,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":55,"author":{"gitId":"ThaddeusLim99"},"content":"* **Documentation**:","lastModifiedDate":"2021-11-03"},{"lineNumber":56,"author":{"gitId":"ThaddeusLim99"},"content":"    * User Guide:","lastModifiedDate":"2021-11-03"},{"lineNumber":57,"author":{"gitId":"ThaddeusLim99"},"content":"        * Added logo: [\\#176](https://github.com/AY2122S1-CS2113T-F12-1/tp/pull/176/commits/4a65edacd11031aa9171799af420bb412d415ddb)","lastModifiedDate":"2021-11-06"},{"lineNumber":58,"author":{"gitId":"ThaddeusLim99"},"content":"        * Added documentation for the features `edit` (both card and deck): [\\#76](https://github.com/AY2122S1-CS2113T-F12-1/tp/pull/76/commits/3b7d831011e154f6b354cf6f130344fb7f947b60), [\\#87](https://github.com/AY2122S1-CS2113T-F12-1/tp/pull/87/commits/be81fd470d6bb00ae978f801be4b194aa8dffeb7)","lastModifiedDate":"2021-11-06"},{"lineNumber":59,"author":{"gitId":"ThaddeusLim99"},"content":"            * Including Sequence diagrams for `edit`","lastModifiedDate":"2021-11-06"},{"lineNumber":60,"author":{"gitId":"ThaddeusLim99"},"content":"        * Added documentation for the features `move`: [\\#92](https://github.com/AY2122S1-CS2113T-F12-1/tp/pull/92/commits/c22db9da9d6b8532e5f78b5759969e74bf468a86)","lastModifiedDate":"2021-11-06"},{"lineNumber":61,"author":{"gitId":"ThaddeusLim99"},"content":"            * Including Sequence diagrams for `move`","lastModifiedDate":"2021-11-06"},{"lineNumber":62,"author":{"gitId":"ThaddeusLim99"},"content":"    * Developer Guide:","lastModifiedDate":"2021-11-03"},{"lineNumber":63,"author":{"gitId":"ThaddeusLim99"},"content":"        * Added logo: [\\#176](https://github.com/AY2122S1-CS2113T-F12-1/tp/pull/176/commits/4a65edacd11031aa9171799af420bb412d415ddb)","lastModifiedDate":"2021-11-06"},{"lineNumber":64,"author":{"gitId":"ThaddeusLim99"},"content":"        * Added implementation details of the `edit` feature (for both cards and deck): [\\#65](https://github.com/AY2122S1-CS2113T-F12-1/tp/pull/65/commits/f996afecdada4c5118fba93f1a43893fed89c2ed)","lastModifiedDate":"2021-11-06"},{"lineNumber":65,"author":{"gitId":"ThaddeusLim99"},"content":"        * Added implementation details of the `move` feature: [\\#92](https://github.com/AY2122S1-CS2113T-F12-1/tp/pull/92/commits/7580984d8ec14af1bca8d4f213ff4e6b30e79074)","lastModifiedDate":"2021-11-07"},{"lineNumber":66,"author":{"gitId":"ThaddeusLim99"},"content":"        * Added table of content and enabled anchor links: [\\#191](https://github.com/AY2122S1-CS2113T-F12-1/tp/pull/191) ","lastModifiedDate":"2021-11-07"},{"lineNumber":67,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":68,"author":{"gitId":"ThaddeusLim99"},"content":"* **Community**:","lastModifiedDate":"2021-11-03"},{"lineNumber":69,"author":{"gitId":"ThaddeusLim99"},"content":"    * Reported bugs and suggestions for other teams\u0027 [developer guide](https://github.com/nus-cs2113-AY2122S1/tp/pull/33#pullrequestreview-792605786))","lastModifiedDate":"2021-11-06"},{"lineNumber":70,"author":{"gitId":"ThaddeusLim99"},"content":"    * Tested and reported bugs for other team\u0027s program.","lastModifiedDate":"2021-11-06"},{"lineNumber":71,"author":{"gitId":"ThaddeusLim99"},"content":"      Examples: [1](https://github.com/ThaddeusLim99/ped/issues/1) ,[5](https://github.com/ThaddeusLim99/ped/issues/5)","lastModifiedDate":"2021-11-06"},{"lineNumber":72,"author":{"gitId":"ThaddeusLim99"},"content":"      , [6](https://github.com/ThaddeusLim99/ped/issues/6)","lastModifiedDate":"2021-11-06"}],"authorContributionMap":{"ThaddeusLim99":72}},{"path":"docs/team/xkisxk.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"xkisxk"},"content":"# Jiang Xing Kai - Project Portfolio Page","lastModifiedDate":"2021-11-03"},{"lineNumber":2,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":3,"author":{"gitId":"xkisxk"},"content":"## Project: CardLi","lastModifiedDate":"2021-11-03"},{"lineNumber":4,"author":{"gitId":"xkisxk"},"content":"CardLI is a Command Line Interface (CLI) desktop app designed to help users manage and test their flashcards. ","lastModifiedDate":"2021-11-03"},{"lineNumber":5,"author":{"gitId":"xkisxk"},"content":"CardLI can help users keep track of all their flashcards and to test their knowledge. ","lastModifiedDate":"2021-11-03"},{"lineNumber":6,"author":{"gitId":"xkisxk"},"content":"It is written in Java and contains about 6kLoC.","lastModifiedDate":"2021-11-07"},{"lineNumber":7,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":8,"author":{"gitId":"xkisxk"},"content":"Given below are my contributions to the project. ","lastModifiedDate":"2021-11-03"},{"lineNumber":9,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":10,"author":{"gitId":"xkisxk"},"content":"## Summary of Contributions","lastModifiedDate":"2021-11-04"},{"lineNumber":11,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":12,"author":{"gitId":"xkisxk"},"content":"---","lastModifiedDate":"2021-11-04"},{"lineNumber":13,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":14,"author":{"gitId":"xkisxk"},"content":"### Features Implemented","lastModifiedDate":"2021-11-04"},{"lineNumber":15,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":16,"author":{"gitId":"xkisxk"},"content":"- Review Feature:","lastModifiedDate":"2021-11-03"},{"lineNumber":17,"author":{"gitId":"xkisxk"},"content":"  - Tests all cards that scored less than 50% across all tests combined.","lastModifiedDate":"2021-11-03"},{"lineNumber":18,"author":{"gitId":"xkisxk"},"content":"  - This feature allows users to test themselves on cards that they need help with, increasing the efficiency","lastModifiedDate":"2021-11-03"},{"lineNumber":19,"author":{"gitId":"xkisxk"},"content":"  of their studying.","lastModifiedDate":"2021-11-03"},{"lineNumber":20,"author":{"gitId":"xkisxk"},"content":"  - The implementation was challenging due to the need of keeping track of ","lastModifiedDate":"2021-11-07"},{"lineNumber":21,"author":{"gitId":"xkisxk"},"content":"  the user score and total score of each flashcard, which led to the addition of view flashcard statistics","lastModifiedDate":"2021-11-03"},{"lineNumber":22,"author":{"gitId":"xkisxk"},"content":"  feature. Another reason is that the review feature, like test feature, works quite differently compared","lastModifiedDate":"2021-11-03"},{"lineNumber":23,"author":{"gitId":"xkisxk"},"content":"  to the other features, so the implementation of the command needed multiple revisions to get it working.","lastModifiedDate":"2021-11-07"},{"lineNumber":24,"author":{"gitId":"xkisxk"},"content":"  ","lastModifiedDate":"2021-11-03"},{"lineNumber":25,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":26,"author":{"gitId":"xkisxk"},"content":"- View Statistics Feature:","lastModifiedDate":"2021-11-03"},{"lineNumber":27,"author":{"gitId":"xkisxk"},"content":"  - Allows users to view a single of all previous test scores and all accumulated flashcard scores.","lastModifiedDate":"2021-11-03"},{"lineNumber":28,"author":{"gitId":"xkisxk"},"content":"  - This feature allows users to keep track of their previous tests, and focus on the tests that","lastModifiedDate":"2021-11-03"},{"lineNumber":29,"author":{"gitId":"xkisxk"},"content":"  require more work.","lastModifiedDate":"2021-11-03"},{"lineNumber":30,"author":{"gitId":"xkisxk"},"content":"  - This required an `AnswerList` and `TestHistory` class that keeps track of the compiled answers","lastModifiedDate":"2021-11-07"},{"lineNumber":31,"author":{"gitId":"xkisxk"},"content":"  for each test, and as mentioned in the Review Feature, expanded the `Flashcard` class to keep ","lastModifiedDate":"2021-11-07"},{"lineNumber":32,"author":{"gitId":"xkisxk"},"content":"  track of the user score and total score. ","lastModifiedDate":"2021-11-07"},{"lineNumber":33,"author":{"gitId":"xkisxk"},"content":"  ","lastModifiedDate":"2021-11-03"},{"lineNumber":34,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":35,"author":{"gitId":"xkisxk"},"content":"### Feature Enhancements:","lastModifiedDate":"2021-11-04"},{"lineNumber":36,"author":{"gitId":"xkisxk"},"content":" - Wrote Junit tests to existing features, mainly `TestManager`, `TestUi` and `TestHistory`","lastModifiedDate":"2021-11-04"},{"lineNumber":37,"author":{"gitId":"xkisxk"},"content":" - Allow testing for individual decks or all decks, and repackaged it","lastModifiedDate":"2021-11-04"},{"lineNumber":38,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":39,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":40,"author":{"gitId":"xkisxk"},"content":"### Code Contributed: ","lastModifiedDate":"2021-11-04"},{"lineNumber":41,"author":{"gitId":"xkisxk"},"content":"Code contribution can be found at the","lastModifiedDate":"2021-11-04"},{"lineNumber":42,"author":{"gitId":"xkisxk"},"content":"[RepoSense Link](https://nus-cs2113-ay2122s1.github.io/tp-dashboard/?search\u003dxkisxk\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2021-09-25\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dxkisxk\u0026tabRepo\u003dAY2122S1-CS2113T-F12-1%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs~functional-code~test-code~other\u0026authorshipIsBinaryFileTypeChecked\u003dfalse)","lastModifiedDate":"2021-11-04"},{"lineNumber":43,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":44,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":45,"author":{"gitId":"xkisxk"},"content":"### Documentation:","lastModifiedDate":"2021-11-04"},{"lineNumber":46,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":47,"author":{"gitId":"xkisxk"},"content":"- User Guide: ","lastModifiedDate":"2021-11-03"},{"lineNumber":48,"author":{"gitId":"xkisxk"},"content":"  - Added documentation features for features `viewtest`, `viewfc`, `review`, `delete`","lastModifiedDate":"2021-11-03"},{"lineNumber":49,"author":{"gitId":"xkisxk"},"content":"  [#75](https://github.com/AY2122S1-CS2113T-F12-1/tp/commit/a1d5f600678dce14bbf3438fbfbe8e78641ef377)","lastModifiedDate":"2021-11-03"},{"lineNumber":50,"author":{"gitId":"xkisxk"},"content":"  - Wrote ","lastModifiedDate":"2021-11-07"},{"lineNumber":51,"author":{"gitId":"xkisxk"},"content":"- Developer Guide: ","lastModifiedDate":"2021-11-03"},{"lineNumber":52,"author":{"gitId":"xkisxk"},"content":"  - Wrote implementation details of `test` feature including the UML diagrams. ","lastModifiedDate":"2021-11-03"},{"lineNumber":53,"author":{"gitId":"xkisxk"},"content":"  [#89](https://github.com/AY2122S1-CS2113T-F12-1/tp/commit/1c3adf0706446b7a775c1ba744394abfbf5edba8)","lastModifiedDate":"2021-11-03"},{"lineNumber":54,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":55,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":56,"author":{"gitId":"xkisxk"},"content":"### Community:","lastModifiedDate":"2021-11-04"},{"lineNumber":57,"author":{"gitId":"xkisxk"},"content":"- Reported bugs and suggestions to improve other team\u0027s ","lastModifiedDate":"2021-11-03"},{"lineNumber":58,"author":{"gitId":"xkisxk"},"content":"[developer guide](https://github.com/nus-cs2113-AY2122S1/tp/pull/1/files)","lastModifiedDate":"2021-11-03"},{"lineNumber":59,"author":{"gitId":"xkisxk"},"content":"- Tested and reported bugs for other team\u0027s program: [1](https://github.com/xkisxk/ped/issues/1), [2](https://github.com/xkisxk/ped/issues/2),","lastModifiedDate":"2021-11-07"},{"lineNumber":60,"author":{"gitId":"xkisxk"},"content":"[3](https://github.com/xkisxk/ped/issues/3)","lastModifiedDate":"2021-11-07"},{"lineNumber":61,"author":{"gitId":"xkisxk"},"content":"- Reviewed teammate\u0027s code: [1](https://github.com/AY2122S1-CS2113T-F12-1/tp/pull/191)","lastModifiedDate":"2021-11-07"},{"lineNumber":62,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":63,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-11-03"}],"authorContributionMap":{"xkisxk":63}},{"path":"docs/team/xrosskoh.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"xRossKoh"},"content":"# Koh Meng Kiat, Kenneth - Project Portfolio Page","lastModifiedDate":"2021-11-04"},{"lineNumber":2,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":3,"author":{"gitId":"xRossKoh"},"content":"## Overview","lastModifiedDate":"2021-11-04"},{"lineNumber":4,"author":{"gitId":"xRossKoh"},"content":"CardLI is a desktop app that helps you create, organise, and review flashcards via a Command Line","lastModifiedDate":"2021-11-04"},{"lineNumber":5,"author":{"gitId":"xRossKoh"},"content":"Interface. It is written in Java.","lastModifiedDate":"2021-11-04"},{"lineNumber":6,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":7,"author":{"gitId":"xRossKoh"},"content":"### Summary of Contributions","lastModifiedDate":"2021-11-04"},{"lineNumber":8,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":9,"author":{"gitId":"xRossKoh"},"content":"#### Implemented features","lastModifiedDate":"2021-11-04"},{"lineNumber":10,"author":{"gitId":"xRossKoh"},"content":"1. Added marking and scoring of tests","lastModifiedDate":"2021-11-04"},{"lineNumber":11,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":12,"author":{"gitId":"xRossKoh"},"content":"This feature marks a user\u0027s test and outputs the test score to the system output.","lastModifiedDate":"2021-11-04"},{"lineNumber":13,"author":{"gitId":"xRossKoh"},"content":"This feature will let users know the questions on which they have made errors, and use ","lastModifiedDate":"2021-11-04"},{"lineNumber":14,"author":{"gitId":"xRossKoh"},"content":"the test score to gauge their overall competency with the content on the flashcards.","lastModifiedDate":"2021-11-04"},{"lineNumber":15,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":16,"author":{"gitId":"xRossKoh"},"content":"2. Flashcard storage","lastModifiedDate":"2021-11-04"},{"lineNumber":17,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":18,"author":{"gitId":"xRossKoh"},"content":"This feature saves a user\u0027s decks of flashcards into an external `json` file after","lastModifiedDate":"2021-11-04"},{"lineNumber":19,"author":{"gitId":"xRossKoh"},"content":"each command. It also reads from the `json` file upon each startup of CardLI to","lastModifiedDate":"2021-11-04"},{"lineNumber":20,"author":{"gitId":"xRossKoh"},"content":"initialize the user\u0027s saved deck of flashcards. ","lastModifiedDate":"2021-11-04"},{"lineNumber":21,"author":{"gitId":"xRossKoh"},"content":"This feature provides users with access to decks of flashcards added in earlier","lastModifiedDate":"2021-11-04"},{"lineNumber":22,"author":{"gitId":"xRossKoh"},"content":"sessions without having to re-add then upon every startup of the application. ","lastModifiedDate":"2021-11-04"},{"lineNumber":23,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":24,"author":{"gitId":"xRossKoh"},"content":"3. Test history storage","lastModifiedDate":"2021-11-04"},{"lineNumber":25,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":26,"author":{"gitId":"xRossKoh"},"content":"This feature saves a user\u0027s test history into an external `json` file after each ","lastModifiedDate":"2021-11-04"},{"lineNumber":27,"author":{"gitId":"xRossKoh"},"content":"command. It also reads from the same `json` file upon each startup of CardLI to ","lastModifiedDate":"2021-11-04"},{"lineNumber":28,"author":{"gitId":"xRossKoh"},"content":"initialize the user\u0027s test history.","lastModifiedDate":"2021-11-04"},{"lineNumber":29,"author":{"gitId":"xRossKoh"},"content":"This feature allows users to view tests that they had previously done, including","lastModifiedDate":"2021-11-04"},{"lineNumber":30,"author":{"gitId":"xRossKoh"},"content":"tests that were completed during an earlier session. This can help them revise ","lastModifiedDate":"2021-11-04"},{"lineNumber":31,"author":{"gitId":"xRossKoh"},"content":"better by learning from mistakes made in past tests. ","lastModifiedDate":"2021-11-04"},{"lineNumber":32,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":33,"author":{"gitId":"xRossKoh"},"content":"#### Code Contributions","lastModifiedDate":"2021-11-04"},{"lineNumber":34,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":35,"author":{"gitId":"xRossKoh"},"content":"My RepoSense Link can be found [here](https://nus-cs2113-ay2122s1.github.io/tp-dashboard/?search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2021-09-25\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dxRossKoh\u0026tabRepo\u003dAY2122S1-CS2113T-F12-1%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs~functional-code~test-code~other\u0026authorshipIsBinaryFileTypeChecked\u003dfalse).","lastModifiedDate":"2021-11-04"},{"lineNumber":36,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":37,"author":{"gitId":"xRossKoh"},"content":"#### Documentation Contributions","lastModifiedDate":"2021-11-04"},{"lineNumber":38,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":39,"author":{"gitId":"xRossKoh"},"content":"**User Guide**","lastModifiedDate":"2021-11-04"},{"lineNumber":40,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":41,"author":{"gitId":"xRossKoh"},"content":"Contributed to the `Introduction`, `Quick Start` and `FAQs` sections.","lastModifiedDate":"2021-11-08"},{"lineNumber":42,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":43,"author":{"gitId":"xRossKoh"},"content":"**Developer Guide** ","lastModifiedDate":"2021-11-04"},{"lineNumber":44,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":45,"author":{"gitId":"xRossKoh"},"content":"Contributed to the `Storage` section.","lastModifiedDate":"2021-11-08"},{"lineNumber":46,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":47,"author":{"gitId":"xRossKoh"},"content":"#### Project Management","lastModifiedDate":"2021-11-04"},{"lineNumber":48,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":49,"author":{"gitId":"xRossKoh"},"content":"1. Managed PRs for milestone v1.0","lastModifiedDate":"2021-11-04"},{"lineNumber":50,"author":{"gitId":"xRossKoh"},"content":"2. Managed Github issues for milestone v2.0","lastModifiedDate":"2021-11-04"},{"lineNumber":51,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-04"}],"authorContributionMap":{"xRossKoh":51}},{"path":"docs/uml/EditCardCommandSeqDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"ThaddeusLim99"},"content":"@startuml","lastModifiedDate":"2021-10-21"},{"lineNumber":2,"author":{"gitId":"ThaddeusLim99"},"content":"!include style.puml","lastModifiedDate":"2021-11-07"},{"lineNumber":3,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":4,"author":{"gitId":"ThaddeusLim99"},"content":"hide footbox","lastModifiedDate":"2021-10-21"},{"lineNumber":5,"author":{"gitId":"ThaddeusLim99"},"content":"autonumber","lastModifiedDate":"2021-11-07"},{"lineNumber":6,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":7,"author":{"gitId":"ThaddeusLim99"},"content":"participant \":CardLI\" as CardLI mainCOLOUR","lastModifiedDate":"2021-11-07"},{"lineNumber":8,"author":{"gitId":"ThaddeusLim99"},"content":"participant \"innerParser:InnerParser\" as InnerParser logicCOLOUR","lastModifiedDate":"2021-11-07"},{"lineNumber":9,"author":{"gitId":"ThaddeusLim99"},"content":"participant \"command:EditCardCommand\" as EditCardCommand logicCOLOUR","lastModifiedDate":"2021-11-07"},{"lineNumber":10,"author":{"gitId":"ThaddeusLim99"},"content":"participant \":Deck\" as Deck modelCOLOUR","lastModifiedDate":"2021-11-07"},{"lineNumber":11,"author":{"gitId":"ThaddeusLim99"},"content":"participant \":FlashCard\" as FlashCard modelCOLOUR","lastModifiedDate":"2021-11-07"},{"lineNumber":12,"author":{"gitId":"ThaddeusLim99"},"content":"participant \"ui:CardLiUI\" as CardLiUI uiCOLOUR","lastModifiedDate":"2021-11-07"},{"lineNumber":13,"author":{"gitId":"ThaddeusLim99"},"content":"actor \"User\" as User","lastModifiedDate":"2021-10-26"},{"lineNumber":14,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":15,"author":{"gitId":"ThaddeusLim99"},"content":"CardLI -\u003e InnerParser: parseCommand(input)","lastModifiedDate":"2021-11-07"},{"lineNumber":16,"author":{"gitId":"ThaddeusLim99"},"content":"activate InnerParser","lastModifiedDate":"2021-11-07"},{"lineNumber":17,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":18,"author":{"gitId":"ThaddeusLim99"},"content":"ref over InnerParser","lastModifiedDate":"2021-11-08"},{"lineNumber":19,"author":{"gitId":"ThaddeusLim99"},"content":"getCommandArguments(commandType,input)","lastModifiedDate":"2021-11-08"},{"lineNumber":20,"author":{"gitId":"ThaddeusLim99"},"content":"end ref","lastModifiedDate":"2021-11-08"},{"lineNumber":21,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":22,"author":{"gitId":"ThaddeusLim99"},"content":"InnerParser -\u003e EditCardCommand** : new EditCardCommand(arguments)","lastModifiedDate":"2021-11-07"},{"lineNumber":23,"author":{"gitId":"ThaddeusLim99"},"content":"activate EditCardCommand","lastModifiedDate":"2021-10-26"},{"lineNumber":24,"author":{"gitId":"ThaddeusLim99"},"content":"InnerParser \u003c-- EditCardCommand : command","lastModifiedDate":"2021-11-07"},{"lineNumber":25,"author":{"gitId":"ThaddeusLim99"},"content":"deactivate EditCardCommand","lastModifiedDate":"2021-11-07"},{"lineNumber":26,"author":{"gitId":"ThaddeusLim99"},"content":"InnerParser --\u003e CardLI: command","lastModifiedDate":"2021-11-07"},{"lineNumber":27,"author":{"gitId":"ThaddeusLim99"},"content":"deactivate InnerParser","lastModifiedDate":"2021-11-07"},{"lineNumber":28,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":29,"author":{"gitId":"ThaddeusLim99"},"content":"CardLI -\u003e EditCardCommand : execute()","lastModifiedDate":"2021-11-07"},{"lineNumber":30,"author":{"gitId":"ThaddeusLim99"},"content":"activate EditCardCommand","lastModifiedDate":"2021-10-21"},{"lineNumber":31,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":32,"author":{"gitId":"ThaddeusLim99"},"content":"ref over EditCardCommand","lastModifiedDate":"2021-11-07"},{"lineNumber":33,"author":{"gitId":"ThaddeusLim99"},"content":"    prepareEditCardCommand()","lastModifiedDate":"2021-11-07"},{"lineNumber":34,"author":{"gitId":"ThaddeusLim99"},"content":"end ref","lastModifiedDate":"2021-11-07"},{"lineNumber":35,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":36,"author":{"gitId":"ThaddeusLim99"},"content":"EditCardCommand -\u003e Deck: editCard(parameters)","lastModifiedDate":"2021-10-26"},{"lineNumber":37,"author":{"gitId":"ThaddeusLim99"},"content":"activate Deck","lastModifiedDate":"2021-10-21"},{"lineNumber":38,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":39,"author":{"gitId":"ThaddeusLim99"},"content":"alt front","lastModifiedDate":"2021-10-26"},{"lineNumber":40,"author":{"gitId":"ThaddeusLim99"},"content":"    Deck -\u003e FlashCard: setFront(changeTo)","lastModifiedDate":"2021-10-26"},{"lineNumber":41,"author":{"gitId":"ThaddeusLim99"},"content":"    activate FlashCard","lastModifiedDate":"2021-10-21"},{"lineNumber":42,"author":{"gitId":"ThaddeusLim99"},"content":"    deactivate FlashCard","lastModifiedDate":"2021-10-21"},{"lineNumber":43,"author":{"gitId":"ThaddeusLim99"},"content":"else back","lastModifiedDate":"2021-10-26"},{"lineNumber":44,"author":{"gitId":"ThaddeusLim99"},"content":"    Deck -\u003e FlashCard: setBack(changeTo)","lastModifiedDate":"2021-10-26"},{"lineNumber":45,"author":{"gitId":"ThaddeusLim99"},"content":"    activate FlashCard","lastModifiedDate":"2021-10-26"},{"lineNumber":46,"author":{"gitId":"ThaddeusLim99"},"content":"    deactivate FlashCard","lastModifiedDate":"2021-10-26"},{"lineNumber":47,"author":{"gitId":"ThaddeusLim99"},"content":"end","lastModifiedDate":"2021-10-26"},{"lineNumber":48,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":49,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":50,"author":{"gitId":"ThaddeusLim99"},"content":"Deck --\u003e EditCardCommand: message","lastModifiedDate":"2021-10-26"},{"lineNumber":51,"author":{"gitId":"ThaddeusLim99"},"content":"deactivate Deck","lastModifiedDate":"2021-10-26"},{"lineNumber":52,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":53,"author":{"gitId":"ThaddeusLim99"},"content":"CardLI\u003c-- EditCardCommand: result","lastModifiedDate":"2021-11-07"},{"lineNumber":54,"author":{"gitId":"ThaddeusLim99"},"content":"deactivate EditCardCommand","lastModifiedDate":"2021-10-21"},{"lineNumber":55,"author":{"gitId":"ThaddeusLim99"},"content":"destroy EditCardCommand","lastModifiedDate":"2021-10-26"},{"lineNumber":56,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":57,"author":{"gitId":"ThaddeusLim99"},"content":"CardLI -\u003e CardLiUI: printResult(result)","lastModifiedDate":"2021-11-07"},{"lineNumber":58,"author":{"gitId":"ThaddeusLim99"},"content":"activate CardLiUI","lastModifiedDate":"2021-10-26"},{"lineNumber":59,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":60,"author":{"gitId":"ThaddeusLim99"},"content":"CardLiUI -\u003e User","lastModifiedDate":"2021-10-26"},{"lineNumber":61,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":62,"author":{"gitId":"ThaddeusLim99"},"content":"deactivate CardLiUI","lastModifiedDate":"2021-10-26"},{"lineNumber":63,"author":{"gitId":"ThaddeusLim99"},"content":"@enduml","lastModifiedDate":"2021-10-21"}],"authorContributionMap":{"ThaddeusLim99":63}},{"path":"docs/uml/EditDeckCommandSeqDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"ThaddeusLim99"},"content":"@startuml","lastModifiedDate":"2021-10-21"},{"lineNumber":2,"author":{"gitId":"ThaddeusLim99"},"content":"!include style.puml","lastModifiedDate":"2021-11-07"},{"lineNumber":3,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":4,"author":{"gitId":"ThaddeusLim99"},"content":"hide footbox","lastModifiedDate":"2021-10-21"},{"lineNumber":5,"author":{"gitId":"ThaddeusLim99"},"content":"autonumber","lastModifiedDate":"2021-11-07"},{"lineNumber":6,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":7,"author":{"gitId":"ThaddeusLim99"},"content":"participant \":CardLI\" as CardLI mainCOLOUR","lastModifiedDate":"2021-11-07"},{"lineNumber":8,"author":{"gitId":"ThaddeusLim99"},"content":"participant \"outerParser:OuterParser\" as OuterParser logicCOLOUR","lastModifiedDate":"2021-11-07"},{"lineNumber":9,"author":{"gitId":"ThaddeusLim99"},"content":"participant \"command:EditDeckCommand\" as EditDeckCommand logicCOLOUR","lastModifiedDate":"2021-11-07"},{"lineNumber":10,"author":{"gitId":"ThaddeusLim99"},"content":"participant \"deckManager:DeckManager\" as DeckManager modelCOLOUR","lastModifiedDate":"2021-11-08"},{"lineNumber":11,"author":{"gitId":"ThaddeusLim99"},"content":"participant \":Deck\" as Deck modelCOLOUR","lastModifiedDate":"2021-11-07"},{"lineNumber":12,"author":{"gitId":"ThaddeusLim99"},"content":"participant \"ui:CardLiUI\" as CardLiUI uiCOLOUR","lastModifiedDate":"2021-11-07"},{"lineNumber":13,"author":{"gitId":"ThaddeusLim99"},"content":"actor \"User\" as User","lastModifiedDate":"2021-10-26"},{"lineNumber":14,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":15,"author":{"gitId":"ThaddeusLim99"},"content":"CardLI-\u003e OuterParser : parseCommand(input)","lastModifiedDate":"2021-11-07"},{"lineNumber":16,"author":{"gitId":"ThaddeusLim99"},"content":"activate OuterParser","lastModifiedDate":"2021-11-07"},{"lineNumber":17,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":18,"author":{"gitId":"ThaddeusLim99"},"content":"ref over OuterParser","lastModifiedDate":"2021-11-08"},{"lineNumber":19,"author":{"gitId":"ThaddeusLim99"},"content":"getCommandArguments(commandType,input)","lastModifiedDate":"2021-11-08"},{"lineNumber":20,"author":{"gitId":"ThaddeusLim99"},"content":"end ref","lastModifiedDate":"2021-11-08"},{"lineNumber":21,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":22,"author":{"gitId":"ThaddeusLim99"},"content":"OuterParser -\u003e EditDeckCommand**: new EditDeckCommand(arguments)","lastModifiedDate":"2021-11-07"},{"lineNumber":23,"author":{"gitId":"ThaddeusLim99"},"content":"activate EditDeckCommand","lastModifiedDate":"2021-10-26"},{"lineNumber":24,"author":{"gitId":"ThaddeusLim99"},"content":"EditDeckCommand --\u003e OuterParser: command","lastModifiedDate":"2021-11-07"},{"lineNumber":25,"author":{"gitId":"ThaddeusLim99"},"content":"deactivate EditDeckCommand","lastModifiedDate":"2021-10-26"},{"lineNumber":26,"author":{"gitId":"ThaddeusLim99"},"content":"OuterParser --\u003e CardLI: command","lastModifiedDate":"2021-11-07"},{"lineNumber":27,"author":{"gitId":"ThaddeusLim99"},"content":"deactivate OuterParser","lastModifiedDate":"2021-11-07"},{"lineNumber":28,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":29,"author":{"gitId":"ThaddeusLim99"},"content":"CardLI -\u003eEditDeckCommand : execute()","lastModifiedDate":"2021-11-07"},{"lineNumber":30,"author":{"gitId":"ThaddeusLim99"},"content":"activate EditDeckCommand","lastModifiedDate":"2021-10-26"},{"lineNumber":31,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":32,"author":{"gitId":"ThaddeusLim99"},"content":"ref over EditDeckCommand","lastModifiedDate":"2021-11-07"},{"lineNumber":33,"author":{"gitId":"ThaddeusLim99"},"content":"prepareEditDeckCommand()","lastModifiedDate":"2021-11-07"},{"lineNumber":34,"author":{"gitId":"ThaddeusLim99"},"content":"end ref","lastModifiedDate":"2021-11-07"},{"lineNumber":35,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":36,"author":{"gitId":"ThaddeusLim99"},"content":"EditDeckCommand -\u003e DeckManager: editDeck(parameters)","lastModifiedDate":"2021-10-26"},{"lineNumber":37,"author":{"gitId":"ThaddeusLim99"},"content":"activate DeckManager","lastModifiedDate":"2021-10-26"},{"lineNumber":38,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":39,"author":{"gitId":"ThaddeusLim99"},"content":"DeckManager -\u003e Deck: setName(deckName)","lastModifiedDate":"2021-10-26"},{"lineNumber":40,"author":{"gitId":"ThaddeusLim99"},"content":"activate Deck","lastModifiedDate":"2021-10-26"},{"lineNumber":41,"author":{"gitId":"ThaddeusLim99"},"content":"deactivate Deck","lastModifiedDate":"2021-10-21"},{"lineNumber":42,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":43,"author":{"gitId":"ThaddeusLim99"},"content":"DeckManager --\u003e EditDeckCommand: message","lastModifiedDate":"2021-10-26"},{"lineNumber":44,"author":{"gitId":"ThaddeusLim99"},"content":"deactivate DeckManager","lastModifiedDate":"2021-10-26"},{"lineNumber":45,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":46,"author":{"gitId":"ThaddeusLim99"},"content":"CardLI\u003c-- EditDeckCommand: result","lastModifiedDate":"2021-11-07"},{"lineNumber":47,"author":{"gitId":"ThaddeusLim99"},"content":"deactivate EditDeckCommand","lastModifiedDate":"2021-10-21"},{"lineNumber":48,"author":{"gitId":"ThaddeusLim99"},"content":"destroy EditDeckCommand","lastModifiedDate":"2021-10-26"},{"lineNumber":49,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":50,"author":{"gitId":"ThaddeusLim99"},"content":"CardLI-\u003e CardLiUI: printResult(result)","lastModifiedDate":"2021-11-07"},{"lineNumber":51,"author":{"gitId":"ThaddeusLim99"},"content":"activate CardLiUI","lastModifiedDate":"2021-10-26"},{"lineNumber":52,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":53,"author":{"gitId":"ThaddeusLim99"},"content":"CardLiUI -\u003e User","lastModifiedDate":"2021-10-26"},{"lineNumber":54,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":55,"author":{"gitId":"ThaddeusLim99"},"content":"deactivate CardLiUI","lastModifiedDate":"2021-10-26"},{"lineNumber":56,"author":{"gitId":"ThaddeusLim99"},"content":"@enduml","lastModifiedDate":"2021-10-21"}],"authorContributionMap":{"ThaddeusLim99":56}},{"path":"docs/uml/MoveCommandSeqDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"ThaddeusLim99"},"content":"@startuml","lastModifiedDate":"2021-10-26"},{"lineNumber":2,"author":{"gitId":"ThaddeusLim99"},"content":"!include style.puml","lastModifiedDate":"2021-11-07"},{"lineNumber":3,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":4,"author":{"gitId":"ThaddeusLim99"},"content":"hide footbox","lastModifiedDate":"2021-11-07"},{"lineNumber":5,"author":{"gitId":"ThaddeusLim99"},"content":"autonumber","lastModifiedDate":"2021-11-07"},{"lineNumber":6,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":7,"author":{"gitId":"ThaddeusLim99"},"content":"participant \":CardLI\" as CardLI mainCOLOUR","lastModifiedDate":"2021-11-07"},{"lineNumber":8,"author":{"gitId":"ThaddeusLim99"},"content":"participant \"innerParser:InnerParser\" as InnerParser logicCOLOUR","lastModifiedDate":"2021-11-07"},{"lineNumber":9,"author":{"gitId":"ThaddeusLim99"},"content":"participant \"command:MoveCardCommand\" as MoveCardCommand logicCOLOUR","lastModifiedDate":"2021-11-07"},{"lineNumber":10,"author":{"gitId":"ThaddeusLim99"},"content":"participant \"deckManager:DeckManager\" as DeckManager modelCOLOUR","lastModifiedDate":"2021-11-08"},{"lineNumber":11,"author":{"gitId":"ThaddeusLim99"},"content":"participant \":Deck\" as Deck modelCOLOUR","lastModifiedDate":"2021-11-07"},{"lineNumber":12,"author":{"gitId":"ThaddeusLim99"},"content":"participant \"ui:CardLiUI\" as CardLiUI uiCOLOUR","lastModifiedDate":"2021-11-07"},{"lineNumber":13,"author":{"gitId":"ThaddeusLim99"},"content":"actor \"User\" as User","lastModifiedDate":"2021-10-26"},{"lineNumber":14,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":15,"author":{"gitId":"ThaddeusLim99"},"content":"CardLI -\u003e InnerParser: parseCommand(input)","lastModifiedDate":"2021-11-07"},{"lineNumber":16,"author":{"gitId":"ThaddeusLim99"},"content":"activate InnerParser","lastModifiedDate":"2021-11-07"},{"lineNumber":17,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":18,"author":{"gitId":"ThaddeusLim99"},"content":"ref over InnerParser","lastModifiedDate":"2021-11-08"},{"lineNumber":19,"author":{"gitId":"ThaddeusLim99"},"content":"getCommandArguments(commandType,input)","lastModifiedDate":"2021-11-08"},{"lineNumber":20,"author":{"gitId":"ThaddeusLim99"},"content":"end ref","lastModifiedDate":"2021-11-08"},{"lineNumber":21,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":22,"author":{"gitId":"ThaddeusLim99"},"content":"InnerParser -\u003e MoveCardCommand**: new MoveCardCommand(arguments)","lastModifiedDate":"2021-11-07"},{"lineNumber":23,"author":{"gitId":"ThaddeusLim99"},"content":"activate MoveCardCommand","lastModifiedDate":"2021-10-26"},{"lineNumber":24,"author":{"gitId":"ThaddeusLim99"},"content":"MoveCardCommand --\u003e InnerParser: \"command:MoveCardCommand","lastModifiedDate":"2021-11-07"},{"lineNumber":25,"author":{"gitId":"ThaddeusLim99"},"content":"deactivate MoveCardCommand","lastModifiedDate":"2021-11-07"},{"lineNumber":26,"author":{"gitId":"ThaddeusLim99"},"content":"InnerParser --\u003e CardLI: command","lastModifiedDate":"2021-11-07"},{"lineNumber":27,"author":{"gitId":"ThaddeusLim99"},"content":"deactivate InnerParser","lastModifiedDate":"2021-11-07"},{"lineNumber":28,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":29,"author":{"gitId":"ThaddeusLim99"},"content":"CardLI-\u003eMoveCardCommand : execute()","lastModifiedDate":"2021-11-07"},{"lineNumber":30,"author":{"gitId":"ThaddeusLim99"},"content":"activate MoveCardCommand","lastModifiedDate":"2021-10-26"},{"lineNumber":31,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":32,"author":{"gitId":"ThaddeusLim99"},"content":"ref over MoveCardCommand","lastModifiedDate":"2021-11-07"},{"lineNumber":33,"author":{"gitId":"ThaddeusLim99"},"content":"prepareMoveCardCommand()","lastModifiedDate":"2021-11-07"},{"lineNumber":34,"author":{"gitId":"ThaddeusLim99"},"content":"end ref","lastModifiedDate":"2021-11-07"},{"lineNumber":35,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":36,"author":{"gitId":"ThaddeusLim99"},"content":"MoveCardCommand -\u003e DeckManager: moveCard(parameters)","lastModifiedDate":"2021-10-26"},{"lineNumber":37,"author":{"gitId":"ThaddeusLim99"},"content":"activate DeckManager","lastModifiedDate":"2021-10-26"},{"lineNumber":38,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":39,"author":{"gitId":"ThaddeusLim99"},"content":"DeckManager -\u003e Deck: getCard(cardIndex)","lastModifiedDate":"2021-10-26"},{"lineNumber":40,"author":{"gitId":"ThaddeusLim99"},"content":"activate Deck","lastModifiedDate":"2021-10-26"},{"lineNumber":41,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":42,"author":{"gitId":"ThaddeusLim99"},"content":"Deck --\u003e DeckManager: cardCopy","lastModifiedDate":"2021-11-07"},{"lineNumber":43,"author":{"gitId":"ThaddeusLim99"},"content":"deactivate Deck","lastModifiedDate":"2021-10-26"},{"lineNumber":44,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":45,"author":{"gitId":"ThaddeusLim99"},"content":"DeckManager -\u003e Deck: addFlashCard(cardCopy)","lastModifiedDate":"2021-10-26"},{"lineNumber":46,"author":{"gitId":"ThaddeusLim99"},"content":"activate Deck","lastModifiedDate":"2021-10-26"},{"lineNumber":47,"author":{"gitId":"ThaddeusLim99"},"content":"deactivate Deck","lastModifiedDate":"2021-10-26"},{"lineNumber":48,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":49,"author":{"gitId":"ThaddeusLim99"},"content":"DeckManager -\u003e Deck: deleteFlashCard(enteredCardIndex)","lastModifiedDate":"2021-10-26"},{"lineNumber":50,"author":{"gitId":"ThaddeusLim99"},"content":"activate Deck","lastModifiedDate":"2021-10-26"},{"lineNumber":51,"author":{"gitId":"ThaddeusLim99"},"content":"deactivate Deck","lastModifiedDate":"2021-10-26"},{"lineNumber":52,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":53,"author":{"gitId":"ThaddeusLim99"},"content":"DeckManager --\u003e MoveCardCommand: message","lastModifiedDate":"2021-10-26"},{"lineNumber":54,"author":{"gitId":"ThaddeusLim99"},"content":"deactivate DeckManager","lastModifiedDate":"2021-10-26"},{"lineNumber":55,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":56,"author":{"gitId":"ThaddeusLim99"},"content":"CardLI\u003c-- MoveCardCommand: result","lastModifiedDate":"2021-11-07"},{"lineNumber":57,"author":{"gitId":"ThaddeusLim99"},"content":"deactivate MoveCardCommand","lastModifiedDate":"2021-10-26"},{"lineNumber":58,"author":{"gitId":"ThaddeusLim99"},"content":"destroy MoveCardCommand","lastModifiedDate":"2021-10-26"},{"lineNumber":59,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":60,"author":{"gitId":"ThaddeusLim99"},"content":"CardLI-\u003e CardLiUI: printResult(result)","lastModifiedDate":"2021-11-07"},{"lineNumber":61,"author":{"gitId":"ThaddeusLim99"},"content":"activate CardLiUI","lastModifiedDate":"2021-10-26"},{"lineNumber":62,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":63,"author":{"gitId":"ThaddeusLim99"},"content":"CardLiUI -\u003e User","lastModifiedDate":"2021-10-26"},{"lineNumber":64,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":65,"author":{"gitId":"ThaddeusLim99"},"content":"deactivate CardLiUI","lastModifiedDate":"2021-10-26"},{"lineNumber":66,"author":{"gitId":"ThaddeusLim99"},"content":"@enduml","lastModifiedDate":"2021-10-26"}],"authorContributionMap":{"ThaddeusLim99":66}},{"path":"docs/uml/TestSequenceDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"xkisxk"},"content":"@startuml","lastModifiedDate":"2021-10-25"},{"lineNumber":2,"author":{"gitId":"xkisxk"},"content":"!include style.puml","lastModifiedDate":"2021-11-07"},{"lineNumber":3,"author":{"gitId":"xkisxk"},"content":"autonumber","lastModifiedDate":"2021-11-07"},{"lineNumber":4,"author":{"gitId":"xkisxk"},"content":"hide footbox","lastModifiedDate":"2021-11-07"},{"lineNumber":5,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":6,"author":{"gitId":"xkisxk"},"content":"actor \"User\" as User","lastModifiedDate":"2021-10-25"},{"lineNumber":7,"author":{"gitId":"xkisxk"},"content":"participant \":Ui\" as Ui uiCOLOUR","lastModifiedDate":"2021-11-07"},{"lineNumber":8,"author":{"gitId":"xkisxk"},"content":"participant \":Logic\" as Logic logicCOLOUR","lastModifiedDate":"2021-11-07"},{"lineNumber":9,"author":{"gitId":"xkisxk"},"content":"participant \":Model\" as Model modelCOLOUR","lastModifiedDate":"2021-11-07"},{"lineNumber":10,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":11,"author":{"gitId":"xkisxk"},"content":"User -\u003e Ui : \"test\"","lastModifiedDate":"2021-10-25"},{"lineNumber":12,"author":{"gitId":"xkisxk"},"content":"activate Ui","lastModifiedDate":"2021-10-25"},{"lineNumber":13,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":14,"author":{"gitId":"xkisxk"},"content":"Ui -\u003e Logic : execute()","lastModifiedDate":"2021-10-25"},{"lineNumber":15,"author":{"gitId":"xkisxk"},"content":"activate Logic","lastModifiedDate":"2021-10-25"},{"lineNumber":16,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":17,"author":{"gitId":"xkisxk"},"content":"Logic -\u003e Model : startTest()","lastModifiedDate":"2021-10-25"},{"lineNumber":18,"author":{"gitId":"xkisxk"},"content":"activate Model","lastModifiedDate":"2021-10-25"},{"lineNumber":19,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":20,"author":{"gitId":"xkisxk"},"content":"Model --\u003e Logic","lastModifiedDate":"2021-10-25"},{"lineNumber":21,"author":{"gitId":"xkisxk"},"content":"deactivate Model","lastModifiedDate":"2021-10-25"},{"lineNumber":22,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":23,"author":{"gitId":"xkisxk"},"content":"Logic --\u003e Ui","lastModifiedDate":"2021-10-25"},{"lineNumber":24,"author":{"gitId":"xkisxk"},"content":"deactivate Logic","lastModifiedDate":"2021-10-25"},{"lineNumber":25,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":26,"author":{"gitId":"xkisxk"},"content":"Ui --\u003e User : endTestMessage","lastModifiedDate":"2021-10-25"},{"lineNumber":27,"author":{"gitId":"xkisxk"},"content":"deactivate Ui","lastModifiedDate":"2021-10-25"},{"lineNumber":28,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":29,"author":{"gitId":"xkisxk"},"content":"@enduml","lastModifiedDate":"2021-10-25"}],"authorContributionMap":{"xkisxk":29}},{"path":"docs/uml/findSeqDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"JWweiyin"},"content":"@startuml","lastModifiedDate":"2021-11-06"},{"lineNumber":2,"author":{"gitId":"JWweiyin"},"content":"\u0027https://plantuml.com/sequence-diagram","lastModifiedDate":"2021-11-06"},{"lineNumber":3,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":4,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":5,"author":{"gitId":"JWweiyin"},"content":"!include style.puml","lastModifiedDate":"2021-11-06"},{"lineNumber":6,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":7,"author":{"gitId":"JWweiyin"},"content":"participant \":OuterParser\" as Parser logicCOLOUR","lastModifiedDate":"2021-11-06"},{"lineNumber":8,"author":{"gitId":"JWweiyin"},"content":"participant \"FindCardsCommand\" as FindCardsCommand  logicCOLOUR","lastModifiedDate":"2021-11-06"},{"lineNumber":9,"author":{"gitId":"JWweiyin"},"content":"participant \"FindCardsParser\" as FindCardsParser logicCOLOUR","lastModifiedDate":"2021-11-06"},{"lineNumber":10,"author":{"gitId":"JWweiyin"},"content":"participant \"CommandResult\" as CommandResult logicCOLOUR","lastModifiedDate":"2021-11-06"},{"lineNumber":11,"author":{"gitId":"JWweiyin"},"content":"participant \":DeckManager\" as Dm modelCOLOUR","lastModifiedDate":"2021-11-06"},{"lineNumber":12,"author":{"gitId":"JWweiyin"},"content":"participant \":Deck\" as deck modelCOLOUR","lastModifiedDate":"2021-11-06"},{"lineNumber":13,"author":{"gitId":"JWweiyin"},"content":"autonumber","lastModifiedDate":"2021-11-06"},{"lineNumber":14,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":15,"author":{"gitId":"JWweiyin"},"content":"hide footbox","lastModifiedDate":"2021-11-07"},{"lineNumber":16,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":17,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":18,"author":{"gitId":"JWweiyin"},"content":"        [-\u003e Parser: parseCommand(input)","lastModifiedDate":"2021-11-06"},{"lineNumber":19,"author":{"gitId":"JWweiyin"},"content":"            activate Parser","lastModifiedDate":"2021-11-06"},{"lineNumber":20,"author":{"gitId":"JWweiyin"},"content":"            ref over Parser","lastModifiedDate":"2021-11-06"},{"lineNumber":21,"author":{"gitId":"JWweiyin"},"content":"            parsing","lastModifiedDate":"2021-11-06"},{"lineNumber":22,"author":{"gitId":"JWweiyin"},"content":"            arguments","lastModifiedDate":"2021-11-06"},{"lineNumber":23,"author":{"gitId":"JWweiyin"},"content":"            end ref","lastModifiedDate":"2021-11-06"},{"lineNumber":24,"author":{"gitId":"JWweiyin"},"content":"             create FindCardsCommand","lastModifiedDate":"2021-11-06"},{"lineNumber":25,"author":{"gitId":"JWweiyin"},"content":"                    Parser -\u003e FindCardsCommand","lastModifiedDate":"2021-11-06"},{"lineNumber":26,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":27,"author":{"gitId":"JWweiyin"},"content":"                    activate FindCardsCommand","lastModifiedDate":"2021-11-06"},{"lineNumber":28,"author":{"gitId":"JWweiyin"},"content":"                    create FindCardsParser","lastModifiedDate":"2021-11-06"},{"lineNumber":29,"author":{"gitId":"JWweiyin"},"content":"                    FindCardsCommand-\u003eFindCardsParser","lastModifiedDate":"2021-11-06"},{"lineNumber":30,"author":{"gitId":"JWweiyin"},"content":"                            activate FindCardsParser","lastModifiedDate":"2021-11-06"},{"lineNumber":31,"author":{"gitId":"JWweiyin"},"content":"                            FindCardsParser --\u003e FindCardsCommand","lastModifiedDate":"2021-11-06"},{"lineNumber":32,"author":{"gitId":"JWweiyin"},"content":"                            deactivate FindCardsParser","lastModifiedDate":"2021-11-06"},{"lineNumber":33,"author":{"gitId":"JWweiyin"},"content":"                            Parser \u003c--FindCardsCommand : command:Command","lastModifiedDate":"2021-11-06"},{"lineNumber":34,"author":{"gitId":"JWweiyin"},"content":"                            deactivate FindCardsCommand","lastModifiedDate":"2021-11-06"},{"lineNumber":35,"author":{"gitId":"JWweiyin"},"content":"                                    [\u003c--Parser : command:Command","lastModifiedDate":"2021-11-06"},{"lineNumber":36,"author":{"gitId":"JWweiyin"},"content":"                                    deactivate Parser","lastModifiedDate":"2021-11-06"},{"lineNumber":37,"author":{"gitId":"JWweiyin"},"content":"        [-\u003e FindCardsCommand: execute()","lastModifiedDate":"2021-11-06"},{"lineNumber":38,"author":{"gitId":"JWweiyin"},"content":"        activate FindCardsCommand","lastModifiedDate":"2021-11-06"},{"lineNumber":39,"author":{"gitId":"JWweiyin"},"content":"        FindCardsCommand-\u003eFindCardsParser: parseArguments(arguments)","lastModifiedDate":"2021-11-06"},{"lineNumber":40,"author":{"gitId":"JWweiyin"},"content":"        activate FindCardsParser","lastModifiedDate":"2021-11-06"},{"lineNumber":41,"author":{"gitId":"JWweiyin"},"content":"        FindCardsParser--\u003eFindCardsCommand: parameters:String[]","lastModifiedDate":"2021-11-06"},{"lineNumber":42,"author":{"gitId":"JWweiyin"},"content":"        deactivate FindCardsParser","lastModifiedDate":"2021-11-06"},{"lineNumber":43,"author":{"gitId":"JWweiyin"},"content":"        destroy FindCardsParser","lastModifiedDate":"2021-11-06"},{"lineNumber":44,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":45,"author":{"gitId":"JWweiyin"},"content":"        alt !findInput.isEmpty()","lastModifiedDate":"2021-11-06"},{"lineNumber":46,"author":{"gitId":"JWweiyin"},"content":"            create CommandResult","lastModifiedDate":"2021-11-06"},{"lineNumber":47,"author":{"gitId":"JWweiyin"},"content":"            FindCardsCommand -\u003e CommandResult","lastModifiedDate":"2021-11-06"},{"lineNumber":48,"author":{"gitId":"JWweiyin"},"content":"            activate CommandResult","lastModifiedDate":"2021-11-06"},{"lineNumber":49,"author":{"gitId":"JWweiyin"},"content":"            CommandResult -\u003e Dm: findCards(searchInput)","lastModifiedDate":"2021-11-06"},{"lineNumber":50,"author":{"gitId":"JWweiyin"},"content":"            activate Dm","lastModifiedDate":"2021-11-06"},{"lineNumber":51,"author":{"gitId":"JWweiyin"},"content":"            loop all decks","lastModifiedDate":"2021-11-06"},{"lineNumber":52,"author":{"gitId":"JWweiyin"},"content":"                Dm -\u003e deck: returnMatchingFlashCards(searchInput)","lastModifiedDate":"2021-11-06"},{"lineNumber":53,"author":{"gitId":"JWweiyin"},"content":"                activate deck","lastModifiedDate":"2021-11-06"},{"lineNumber":54,"author":{"gitId":"JWweiyin"},"content":"                deck --\u003e Dm: result:String","lastModifiedDate":"2021-11-06"},{"lineNumber":55,"author":{"gitId":"JWweiyin"},"content":"                deactivate deck","lastModifiedDate":"2021-11-06"},{"lineNumber":56,"author":{"gitId":"JWweiyin"},"content":"            end","lastModifiedDate":"2021-11-06"},{"lineNumber":57,"author":{"gitId":"JWweiyin"},"content":"            Dm --\u003e CommandResult: result:String","lastModifiedDate":"2021-11-06"},{"lineNumber":58,"author":{"gitId":"JWweiyin"},"content":"            deactivate Dm","lastModifiedDate":"2021-11-06"},{"lineNumber":59,"author":{"gitId":"JWweiyin"},"content":"            CommandResult --\u003e FindCardsCommand: result:CommandResult","lastModifiedDate":"2021-11-06"},{"lineNumber":60,"author":{"gitId":"JWweiyin"},"content":"            deactivate CommandResult","lastModifiedDate":"2021-11-06"},{"lineNumber":61,"author":{"gitId":"JWweiyin"},"content":"            destroy CommandResult","lastModifiedDate":"2021-11-06"},{"lineNumber":62,"author":{"gitId":"JWweiyin"},"content":"        end","lastModifiedDate":"2021-11-06"},{"lineNumber":63,"author":{"gitId":"JWweiyin"},"content":"        [\u003c--FindCardsCommand: result: CommandResult","lastModifiedDate":"2021-11-06"},{"lineNumber":64,"author":{"gitId":"JWweiyin"},"content":"        deactivate FindCardsCommand","lastModifiedDate":"2021-11-06"},{"lineNumber":65,"author":{"gitId":"JWweiyin"},"content":"        destroy FindCardsCommand","lastModifiedDate":"2021-11-06"},{"lineNumber":66,"author":{"gitId":"JWweiyin"},"content":"@enduml","lastModifiedDate":"2021-11-06"}],"authorContributionMap":{"JWweiyin":66}},{"path":"docs/uml/getTestDeckSequenceDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"xkisxk"},"content":"@startuml","lastModifiedDate":"2021-10-21"},{"lineNumber":2,"author":{"gitId":"xkisxk"},"content":"!include style.puml","lastModifiedDate":"2021-11-07"},{"lineNumber":3,"author":{"gitId":"xkisxk"},"content":"autonumber","lastModifiedDate":"2021-11-07"},{"lineNumber":4,"author":{"gitId":"xkisxk"},"content":"hide footbox","lastModifiedDate":"2021-11-07"},{"lineNumber":5,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":6,"author":{"gitId":"xkisxk"},"content":"participant \":TestManager\" as TestManager modelCOLOUR","lastModifiedDate":"2021-11-07"},{"lineNumber":7,"author":{"gitId":"xkisxk"},"content":"participant \":AnswerList\" as AnswerList modelCOLOUR","lastModifiedDate":"2021-11-07"},{"lineNumber":8,"author":{"gitId":"xkisxk"},"content":"participant \":DeckManager\" as DeckManager modelCOLOUR","lastModifiedDate":"2021-11-07"},{"lineNumber":9,"author":{"gitId":"xkisxk"},"content":"participant \"deckToTest:Deck\" as Deck modelCOLOUR","lastModifiedDate":"2021-11-07"},{"lineNumber":10,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":11,"author":{"gitId":"xkisxk"},"content":"activate TestManager","lastModifiedDate":"2021-10-21"},{"lineNumber":12,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":13,"author":{"gitId":"xkisxk"},"content":"TestManager -\u003e DeckManager : getTestDeck(deckIndex:int)","lastModifiedDate":"2021-10-21"},{"lineNumber":14,"author":{"gitId":"xkisxk"},"content":"activate DeckManager","lastModifiedDate":"2021-10-21"},{"lineNumber":15,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":16,"author":{"gitId":"xkisxk"},"content":"alt test all decks","lastModifiedDate":"2021-10-22"},{"lineNumber":17,"author":{"gitId":"xkisxk"},"content":"DeckManager -\u003e Deck **: Deck()","lastModifiedDate":"2021-10-26"},{"lineNumber":18,"author":{"gitId":"xkisxk"},"content":"activate Deck","lastModifiedDate":"2021-10-21"},{"lineNumber":19,"author":{"gitId":"xkisxk"},"content":"loop every Deck in DeckManager","lastModifiedDate":"2021-10-21"},{"lineNumber":20,"author":{"gitId":"xkisxk"},"content":"loop every FlashCard in Deck","lastModifiedDate":"2021-10-21"},{"lineNumber":21,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":22,"author":{"gitId":"xkisxk"},"content":"Deck -\u003e Deck : addFlashCard()","lastModifiedDate":"2021-10-22"},{"lineNumber":23,"author":{"gitId":"xkisxk"},"content":"activate Deck","lastModifiedDate":"2021-10-22"},{"lineNumber":24,"author":{"gitId":"xkisxk"},"content":"Deck --\u003e Deck","lastModifiedDate":"2021-10-22"},{"lineNumber":25,"author":{"gitId":"xkisxk"},"content":"deactivate Deck","lastModifiedDate":"2021-10-22"},{"lineNumber":26,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":27,"author":{"gitId":"xkisxk"},"content":"end","lastModifiedDate":"2021-10-21"},{"lineNumber":28,"author":{"gitId":"xkisxk"},"content":"end","lastModifiedDate":"2021-10-21"},{"lineNumber":29,"author":{"gitId":"xkisxk"},"content":"Deck --\u003e DeckManager","lastModifiedDate":"2021-10-22"},{"lineNumber":30,"author":{"gitId":"xkisxk"},"content":"deactivate Deck","lastModifiedDate":"2021-10-22"},{"lineNumber":31,"author":{"gitId":"xkisxk"},"content":"DeckManager --\u003e TestManager : deckToTest","lastModifiedDate":"2021-10-21"},{"lineNumber":32,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":33,"author":{"gitId":"xkisxk"},"content":"else test single deck","lastModifiedDate":"2021-10-22"},{"lineNumber":34,"author":{"gitId":"xkisxk"},"content":"TestManager -\u003e DeckManager : get(deckIndex)","lastModifiedDate":"2021-10-21"},{"lineNumber":35,"author":{"gitId":"xkisxk"},"content":"DeckManager --\u003e TestManager : deckToTest","lastModifiedDate":"2021-10-21"},{"lineNumber":36,"author":{"gitId":"xkisxk"},"content":"end","lastModifiedDate":"2021-10-21"},{"lineNumber":37,"author":{"gitId":"xkisxk"},"content":"deactivate DeckManager","lastModifiedDate":"2021-10-22"},{"lineNumber":38,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":39,"author":{"gitId":"xkisxk"},"content":"TestManager -\u003e AnswerList **: AnswerList(deckToTest)","lastModifiedDate":"2021-11-03"},{"lineNumber":40,"author":{"gitId":"xkisxk"},"content":"activate AnswerList","lastModifiedDate":"2021-10-21"},{"lineNumber":41,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":42,"author":{"gitId":"xkisxk"},"content":"TestManager \u003c-- AnswerList : userAnswers","lastModifiedDate":"2021-10-21"},{"lineNumber":43,"author":{"gitId":"xkisxk"},"content":"deactivate AnswerList","lastModifiedDate":"2021-10-21"},{"lineNumber":44,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":45,"author":{"gitId":"xkisxk"},"content":"@enduml","lastModifiedDate":"2021-10-21"}],"authorContributionMap":{"xkisxk":45}},{"path":"docs/uml/logicArchitecture.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"JWweiyin"},"content":"@startuml","lastModifiedDate":"2021-11-06"},{"lineNumber":2,"author":{"gitId":"JWweiyin"},"content":"\u0027https://plantuml.com/sequence-diagram","lastModifiedDate":"2021-11-06"},{"lineNumber":3,"author":{"gitId":"JWweiyin"},"content":"!define logicCOLOUR #a6f0ff","lastModifiedDate":"2021-11-06"},{"lineNumber":4,"author":{"gitId":"JWweiyin"},"content":"!define boxCOLOUR #86b1db","lastModifiedDate":"2021-11-06"},{"lineNumber":5,"author":{"gitId":"JWweiyin"},"content":"!define uiCOLOUR #88fca7","lastModifiedDate":"2021-11-06"},{"lineNumber":6,"author":{"gitId":"JWweiyin"},"content":"!define storageCOLOUR #fc9e88","lastModifiedDate":"2021-11-06"},{"lineNumber":7,"author":{"gitId":"JWweiyin"},"content":"!define modelCOLOUR #c088fc","lastModifiedDate":"2021-11-06"},{"lineNumber":8,"author":{"gitId":"JWweiyin"},"content":"!define mainCOLOUR #b5b5b5","lastModifiedDate":"2021-11-06"},{"lineNumber":9,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":10,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":11,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":12,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":13,"author":{"gitId":"JWweiyin"},"content":"rectangle Main as Main mainCOLOUR","lastModifiedDate":"2021-11-06"},{"lineNumber":14,"author":{"gitId":"JWweiyin"},"content":"rectangle logic  as \"Logic\" boxCOLOUR{","lastModifiedDate":"2021-11-06"},{"lineNumber":15,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":16,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":17,"author":{"gitId":"JWweiyin"},"content":"rectangle InnerParser as iParser logicCOLOUR","lastModifiedDate":"2021-11-06"},{"lineNumber":18,"author":{"gitId":"JWweiyin"},"content":"rectangle OuterParser as oParser logicCOLOUR","lastModifiedDate":"2021-11-06"},{"lineNumber":19,"author":{"gitId":"JWweiyin"},"content":"rectangle CommandResult as CommandResult logicCOLOUR","lastModifiedDate":"2021-11-06"},{"lineNumber":20,"author":{"gitId":"JWweiyin"},"content":"rectangle \"{abstract}\\nCommand \" as Command logicCOLOUR","lastModifiedDate":"2021-11-06"},{"lineNumber":21,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":22,"author":{"gitId":"JWweiyin"},"content":"rectangle XYZCommand as XYZCommand logicCOLOUR","lastModifiedDate":"2021-11-06"},{"lineNumber":23,"author":{"gitId":"JWweiyin"},"content":"}","lastModifiedDate":"2021-11-06"},{"lineNumber":24,"author":{"gitId":"JWweiyin"},"content":" model \u003c-[dashed]- XYZCommand","lastModifiedDate":"2021-11-06"},{"lineNumber":25,"author":{"gitId":"JWweiyin"},"content":"User -[dashed]-\u003e UI","lastModifiedDate":"2021-11-06"},{"lineNumber":26,"author":{"gitId":"JWweiyin"},"content":"Main --\u003e \"1\"iParser","lastModifiedDate":"2021-11-06"},{"lineNumber":27,"author":{"gitId":"JWweiyin"},"content":"Main --\u003e \"1\"oParser","lastModifiedDate":"2021-11-06"},{"lineNumber":28,"author":{"gitId":"JWweiyin"},"content":"iParser -[dashed]-\u003eXYZCommand: \u003e creates","lastModifiedDate":"2021-11-06"},{"lineNumber":29,"author":{"gitId":"JWweiyin"},"content":"oParser -[dashed]-\u003eXYZCommand: \u003e creates","lastModifiedDate":"2021-11-06"},{"lineNumber":30,"author":{"gitId":"JWweiyin"},"content":"XYZCommand --|\u003e Command","lastModifiedDate":"2021-11-06"},{"lineNumber":31,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":32,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":33,"author":{"gitId":"JWweiyin"},"content":"Command -[dashed]-\u003eCommandResult: \u003e produces","lastModifiedDate":"2021-11-06"},{"lineNumber":34,"author":{"gitId":"JWweiyin"},"content":"Main -[dashed]-\u003eCommandResult","lastModifiedDate":"2021-11-06"},{"lineNumber":35,"author":{"gitId":"JWweiyin"},"content":"Main --\u003e storage","lastModifiedDate":"2021-11-06"},{"lineNumber":36,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":37,"author":{"gitId":"JWweiyin"},"content":"UI \u003c-[dashed]-\u003e Main","lastModifiedDate":"2021-11-06"},{"lineNumber":38,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":39,"author":{"gitId":"JWweiyin"},"content":"rectangle storage as \"Storage\" storageCOLOUR {","lastModifiedDate":"2021-11-06"},{"lineNumber":40,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":41,"author":{"gitId":"JWweiyin"},"content":"}","lastModifiedDate":"2021-11-06"},{"lineNumber":42,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":43,"author":{"gitId":"JWweiyin"},"content":"rectangle model as \"Model\" modelCOLOUR {","lastModifiedDate":"2021-11-06"},{"lineNumber":44,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":45,"author":{"gitId":"JWweiyin"},"content":"}","lastModifiedDate":"2021-11-06"},{"lineNumber":46,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":47,"author":{"gitId":"JWweiyin"},"content":"rectangle UI as \"UI\" uiCOLOUR {","lastModifiedDate":"2021-11-06"},{"lineNumber":48,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":49,"author":{"gitId":"JWweiyin"},"content":"}","lastModifiedDate":"2021-11-06"},{"lineNumber":50,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":51,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":52,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":53,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":54,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":55,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":56,"author":{"gitId":"JWweiyin"},"content":"@enduml","lastModifiedDate":"2021-11-06"}],"authorContributionMap":{"JWweiyin":56}},{"path":"docs/uml/markTestSequenceDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"xkisxk"},"content":"@startuml","lastModifiedDate":"2021-10-21"},{"lineNumber":2,"author":{"gitId":"xkisxk"},"content":"!include style.puml","lastModifiedDate":"2021-11-07"},{"lineNumber":3,"author":{"gitId":"xkisxk"},"content":"autonumber","lastModifiedDate":"2021-11-07"},{"lineNumber":4,"author":{"gitId":"xkisxk"},"content":"hide footbox","lastModifiedDate":"2021-11-07"},{"lineNumber":5,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":6,"author":{"gitId":"xkisxk"},"content":"participant \":TestManager\" as TestManager modelCOLOUR","lastModifiedDate":"2021-11-07"},{"lineNumber":7,"author":{"gitId":"xkisxk"},"content":"participant \":AnswerList\" as AnswerList modelCOLOUR","lastModifiedDate":"2021-11-07"},{"lineNumber":8,"author":{"gitId":"xkisxk"},"content":"participant \":TestHistory\" as TestHistory modelCOLOUR","lastModifiedDate":"2021-11-07"},{"lineNumber":9,"author":{"gitId":"xkisxk"},"content":"participant \":TestUi\" as TestUi uiCOLOUR","lastModifiedDate":"2021-11-07"},{"lineNumber":10,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":11,"author":{"gitId":"xkisxk"},"content":"activate TestManager","lastModifiedDate":"2021-10-21"},{"lineNumber":12,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":13,"author":{"gitId":"xkisxk"},"content":"TestManager -\u003e TestManager : markTest(userAnswers)","lastModifiedDate":"2021-10-21"},{"lineNumber":14,"author":{"gitId":"xkisxk"},"content":"activate TestManager","lastModifiedDate":"2021-10-21"},{"lineNumber":15,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":16,"author":{"gitId":"xkisxk"},"content":"loop every answer in (userAnswers)","lastModifiedDate":"2021-10-21"},{"lineNumber":17,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":18,"author":{"gitId":"xkisxk"},"content":"TestManager -\u003e TestManager : markQuestion(userAnswers, answer)","lastModifiedDate":"2021-10-21"},{"lineNumber":19,"author":{"gitId":"xkisxk"},"content":"activate TestManager","lastModifiedDate":"2021-10-21"},{"lineNumber":20,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":21,"author":{"gitId":"xkisxk"},"content":"TestManager -\u003e TestUi : printQuestion()","lastModifiedDate":"2021-10-25"},{"lineNumber":22,"author":{"gitId":"xkisxk"},"content":"activate TestUi","lastModifiedDate":"2021-10-25"},{"lineNumber":23,"author":{"gitId":"xkisxk"},"content":"TestUi --\u003e TestManager","lastModifiedDate":"2021-10-25"},{"lineNumber":24,"author":{"gitId":"xkisxk"},"content":"deactivate TestUi","lastModifiedDate":"2021-10-25"},{"lineNumber":25,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":26,"author":{"gitId":"xkisxk"},"content":"TestManager -\u003e TestUi : printCorrectAnswer()","lastModifiedDate":"2021-10-25"},{"lineNumber":27,"author":{"gitId":"xkisxk"},"content":"activate TestUi","lastModifiedDate":"2021-10-25"},{"lineNumber":28,"author":{"gitId":"xkisxk"},"content":"TestUi --\u003e TestManager","lastModifiedDate":"2021-10-25"},{"lineNumber":29,"author":{"gitId":"xkisxk"},"content":"deactivate TestUi","lastModifiedDate":"2021-10-25"},{"lineNumber":30,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":31,"author":{"gitId":"xkisxk"},"content":"TestManager -\u003e TestUi : printUserAnswer()","lastModifiedDate":"2021-10-25"},{"lineNumber":32,"author":{"gitId":"xkisxk"},"content":"activate TestUi","lastModifiedDate":"2021-10-25"},{"lineNumber":33,"author":{"gitId":"xkisxk"},"content":"TestUi --\u003e TestManager","lastModifiedDate":"2021-10-25"},{"lineNumber":34,"author":{"gitId":"xkisxk"},"content":"deactivate TestUi","lastModifiedDate":"2021-10-25"},{"lineNumber":35,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":36,"author":{"gitId":"xkisxk"},"content":"alt answer is correct","lastModifiedDate":"2021-10-21"},{"lineNumber":37,"author":{"gitId":"xkisxk"},"content":"TestManager -\u003e AnswerList : incrementUserScore()","lastModifiedDate":"2021-10-21"},{"lineNumber":38,"author":{"gitId":"xkisxk"},"content":"activate AnswerList","lastModifiedDate":"2021-10-21"},{"lineNumber":39,"author":{"gitId":"xkisxk"},"content":"AnswerList --\u003e TestManager","lastModifiedDate":"2021-10-21"},{"lineNumber":40,"author":{"gitId":"xkisxk"},"content":"deactivate AnswerList","lastModifiedDate":"2021-10-21"},{"lineNumber":41,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":42,"author":{"gitId":"xkisxk"},"content":"TestManager -\u003e TestUi : printCorrectAnsMessage()","lastModifiedDate":"2021-10-21"},{"lineNumber":43,"author":{"gitId":"xkisxk"},"content":"activate TestUi","lastModifiedDate":"2021-10-21"},{"lineNumber":44,"author":{"gitId":"xkisxk"},"content":"TestUi --\u003e TestManager","lastModifiedDate":"2021-10-21"},{"lineNumber":45,"author":{"gitId":"xkisxk"},"content":"deactivate TestUi","lastModifiedDate":"2021-10-21"},{"lineNumber":46,"author":{"gitId":"xkisxk"},"content":"else answer is wrong","lastModifiedDate":"2021-10-22"},{"lineNumber":47,"author":{"gitId":"xkisxk"},"content":"TestManager -\u003e TestUi : printIncorrectAnsMessage()","lastModifiedDate":"2021-10-21"},{"lineNumber":48,"author":{"gitId":"xkisxk"},"content":"activate TestUi","lastModifiedDate":"2021-10-21"},{"lineNumber":49,"author":{"gitId":"xkisxk"},"content":"TestUi --\u003e TestManager","lastModifiedDate":"2021-10-21"},{"lineNumber":50,"author":{"gitId":"xkisxk"},"content":"deactivate TestUi","lastModifiedDate":"2021-10-21"},{"lineNumber":51,"author":{"gitId":"xkisxk"},"content":"end","lastModifiedDate":"2021-10-21"},{"lineNumber":52,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":53,"author":{"gitId":"xkisxk"},"content":"TestManager --\u003e TestManager","lastModifiedDate":"2021-10-21"},{"lineNumber":54,"author":{"gitId":"xkisxk"},"content":"deactivate TestManager","lastModifiedDate":"2021-10-21"},{"lineNumber":55,"author":{"gitId":"xkisxk"},"content":"end","lastModifiedDate":"2021-10-21"},{"lineNumber":56,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":57,"author":{"gitId":"xkisxk"},"content":"TestManager -\u003e TestUi : printResult(score, totalScore)","lastModifiedDate":"2021-10-21"},{"lineNumber":58,"author":{"gitId":"xkisxk"},"content":"activate TestUi","lastModifiedDate":"2021-10-21"},{"lineNumber":59,"author":{"gitId":"xkisxk"},"content":"TestUi --\u003e TestManager","lastModifiedDate":"2021-10-21"},{"lineNumber":60,"author":{"gitId":"xkisxk"},"content":"deactivate TestUi","lastModifiedDate":"2021-10-21"},{"lineNumber":61,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":62,"author":{"gitId":"xkisxk"},"content":"TestManager --\u003e TestManager","lastModifiedDate":"2021-10-21"},{"lineNumber":63,"author":{"gitId":"xkisxk"},"content":"deactivate TestManager","lastModifiedDate":"2021-10-21"},{"lineNumber":64,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":65,"author":{"gitId":"xkisxk"},"content":"TestManager -\u003e TestHistory : addAnswerList(userAnswers)","lastModifiedDate":"2021-10-21"},{"lineNumber":66,"author":{"gitId":"xkisxk"},"content":"activate TestHistory","lastModifiedDate":"2021-10-21"},{"lineNumber":67,"author":{"gitId":"xkisxk"},"content":"TestHistory --\u003e TestManager","lastModifiedDate":"2021-10-21"},{"lineNumber":68,"author":{"gitId":"xkisxk"},"content":"deactivate TestHistory","lastModifiedDate":"2021-10-21"},{"lineNumber":69,"author":{"gitId":"xkisxk"},"content":"deactivate TestManager","lastModifiedDate":"2021-10-21"},{"lineNumber":70,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":71,"author":{"gitId":"xkisxk"},"content":"@enduml","lastModifiedDate":"2021-10-21"}],"authorContributionMap":{"xkisxk":71}},{"path":"docs/uml/modelArchitecture.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"JWweiyin"},"content":"@startuml","lastModifiedDate":"2021-11-06"},{"lineNumber":2,"author":{"gitId":"JWweiyin"},"content":"\u0027https://plantuml.com/deployment-diagram","lastModifiedDate":"2021-11-06"},{"lineNumber":3,"author":{"gitId":"JWweiyin"},"content":"!define logicCOLOUR #a6f0ff","lastModifiedDate":"2021-11-06"},{"lineNumber":4,"author":{"gitId":"JWweiyin"},"content":"!define storageCOLOUR #fc9e88","lastModifiedDate":"2021-11-06"},{"lineNumber":5,"author":{"gitId":"JWweiyin"},"content":"!define modelCOLOUR #c088fc","lastModifiedDate":"2021-11-06"},{"lineNumber":6,"author":{"gitId":"JWweiyin"},"content":"!define boxCOLOUR #a08dc7","lastModifiedDate":"2021-11-06"},{"lineNumber":7,"author":{"gitId":"JWweiyin"},"content":"!define boxCOLOUR1 #dac0eb","lastModifiedDate":"2021-11-06"},{"lineNumber":8,"author":{"gitId":"JWweiyin"},"content":"!define mainCOLOUR #b5b5b5","lastModifiedDate":"2021-11-06"},{"lineNumber":9,"author":{"gitId":"JWweiyin"},"content":"!define uiCOLOUR #88fca7","lastModifiedDate":"2021-11-06"},{"lineNumber":10,"author":{"gitId":"JWweiyin"},"content":"!define dataCOLOUR #e34668","lastModifiedDate":"2021-11-06"},{"lineNumber":11,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":12,"author":{"gitId":"JWweiyin"},"content":"rectangle \"Main\" as main mainCOLOUR","lastModifiedDate":"2021-11-06"},{"lineNumber":13,"author":{"gitId":"JWweiyin"},"content":"rectangle \"Storage\" as storage storageCOLOUR","lastModifiedDate":"2021-11-06"},{"lineNumber":14,"author":{"gitId":"JWweiyin"},"content":"rectangle \"XYZCommand\" as command logicCOLOUR","lastModifiedDate":"2021-11-06"},{"lineNumber":15,"author":{"gitId":"JWweiyin"},"content":"rectangle \"TestUi\" as tui uiCOLOUR","lastModifiedDate":"2021-11-06"},{"lineNumber":16,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":17,"author":{"gitId":"JWweiyin"},"content":"rectangle \"Model\" as model boxCOLOUR {","lastModifiedDate":"2021-11-06"},{"lineNumber":18,"author":{"gitId":"JWweiyin"},"content":"rectangle \"flashcard\" boxCOLOUR1 {","lastModifiedDate":"2021-11-06"},{"lineNumber":19,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":20,"author":{"gitId":"JWweiyin"},"content":"    rectangle \"Deck\" as deck modelCOLOUR","lastModifiedDate":"2021-11-06"},{"lineNumber":21,"author":{"gitId":"JWweiyin"},"content":"    rectangle \"DeckManager\" as dm modelCOLOUR","lastModifiedDate":"2021-11-06"},{"lineNumber":22,"author":{"gitId":"JWweiyin"},"content":"    rectangle \"FlashCard\" as fc modelCOLOUR","lastModifiedDate":"2021-11-06"},{"lineNumber":23,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":24,"author":{"gitId":"JWweiyin"},"content":"}","lastModifiedDate":"2021-11-06"},{"lineNumber":25,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":26,"author":{"gitId":"JWweiyin"},"content":"rectangle \"testing\" boxCOLOUR1 {","lastModifiedDate":"2021-11-06"},{"lineNumber":27,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":28,"author":{"gitId":"JWweiyin"},"content":"    rectangle \"Answer\" as answer modelCOLOUR","lastModifiedDate":"2021-11-06"},{"lineNumber":29,"author":{"gitId":"JWweiyin"},"content":"    rectangle \"AnswerList\" as al modelCOLOUR","lastModifiedDate":"2021-11-06"},{"lineNumber":30,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":31,"author":{"gitId":"JWweiyin"},"content":"    rectangle \"TestHistory\" as th modelCOLOUR","lastModifiedDate":"2021-11-06"},{"lineNumber":32,"author":{"gitId":"JWweiyin"},"content":"    rectangle \"TestManager\" as tm modelCOLOUR","lastModifiedDate":"2021-11-06"},{"lineNumber":33,"author":{"gitId":"JWweiyin"},"content":"    rectangle \"Countdown\" as cd modelCOLOUR","lastModifiedDate":"2021-11-06"},{"lineNumber":34,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":35,"author":{"gitId":"JWweiyin"},"content":"}","lastModifiedDate":"2021-11-06"},{"lineNumber":36,"author":{"gitId":"JWweiyin"},"content":"}","lastModifiedDate":"2021-11-06"},{"lineNumber":37,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":38,"author":{"gitId":"JWweiyin"},"content":"main -\u003e storage","lastModifiedDate":"2021-11-06"},{"lineNumber":39,"author":{"gitId":"JWweiyin"},"content":"main -[dashed]-\u003e command: \u003e calls execute()","lastModifiedDate":"2021-11-06"},{"lineNumber":40,"author":{"gitId":"JWweiyin"},"content":"main --\u003e \"1\" dm","lastModifiedDate":"2021-11-06"},{"lineNumber":41,"author":{"gitId":"JWweiyin"},"content":"main --\u003e \"1\" th","lastModifiedDate":"2021-11-06"},{"lineNumber":42,"author":{"gitId":"JWweiyin"},"content":"dm --\u003e \"*\" deck","lastModifiedDate":"2021-11-06"},{"lineNumber":43,"author":{"gitId":"JWweiyin"},"content":"deck --\u003e \"*\" fc","lastModifiedDate":"2021-11-06"},{"lineNumber":44,"author":{"gitId":"JWweiyin"},"content":"command -[dashed]-\u003e dm: \u003e accesses","lastModifiedDate":"2021-11-06"},{"lineNumber":45,"author":{"gitId":"JWweiyin"},"content":"command --[dashed]-\u003e deck: \u003e accesses","lastModifiedDate":"2021-11-06"},{"lineNumber":46,"author":{"gitId":"JWweiyin"},"content":"command -[dashed]-\u003e tm: \u003e accesses","lastModifiedDate":"2021-11-06"},{"lineNumber":47,"author":{"gitId":"JWweiyin"},"content":"command -[dashed]-\u003e th : \u003e accesses","lastModifiedDate":"2021-11-06"},{"lineNumber":48,"author":{"gitId":"JWweiyin"},"content":"tm -left-\u003e \"1\" tui","lastModifiedDate":"2021-11-06"},{"lineNumber":49,"author":{"gitId":"JWweiyin"},"content":"tm --\u003e dm","lastModifiedDate":"2021-11-06"},{"lineNumber":50,"author":{"gitId":"JWweiyin"},"content":"tm -\u003e th","lastModifiedDate":"2021-11-06"},{"lineNumber":51,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":52,"author":{"gitId":"JWweiyin"},"content":"al -\u003e \"*\" answer","lastModifiedDate":"2021-11-06"},{"lineNumber":53,"author":{"gitId":"JWweiyin"},"content":"al -\u003e \"1\" deck","lastModifiedDate":"2021-11-06"},{"lineNumber":54,"author":{"gitId":"JWweiyin"},"content":"tm -[dashed]-\u003e al: \u003e creates","lastModifiedDate":"2021-11-06"},{"lineNumber":55,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":56,"author":{"gitId":"JWweiyin"},"content":"tm -[dashed]-\u003e cd","lastModifiedDate":"2021-11-06"},{"lineNumber":57,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":58,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":59,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":60,"author":{"gitId":"JWweiyin"},"content":"@enduml","lastModifiedDate":"2021-11-06"}],"authorContributionMap":{"JWweiyin":60}},{"path":"docs/uml/overallArchitectureDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"JWweiyin"},"content":"@startuml","lastModifiedDate":"2021-11-06"},{"lineNumber":2,"author":{"gitId":"JWweiyin"},"content":"\u0027https://plantuml.com/deployment-diagram","lastModifiedDate":"2021-11-06"},{"lineNumber":3,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":4,"author":{"gitId":"JWweiyin"},"content":"!define logicCOLOUR #a6f0ff","lastModifiedDate":"2021-11-06"},{"lineNumber":5,"author":{"gitId":"JWweiyin"},"content":"!define storageCOLOUR #fc9e88","lastModifiedDate":"2021-11-06"},{"lineNumber":6,"author":{"gitId":"JWweiyin"},"content":"!define modelCOLOUR #c088fc","lastModifiedDate":"2021-11-06"},{"lineNumber":7,"author":{"gitId":"JWweiyin"},"content":"!define mainCOLOUR #b5b5b5","lastModifiedDate":"2021-11-06"},{"lineNumber":8,"author":{"gitId":"JWweiyin"},"content":"!define uiCOLOUR #88fca7","lastModifiedDate":"2021-11-06"},{"lineNumber":9,"author":{"gitId":"JWweiyin"},"content":"!define dataCOLOUR #e34668","lastModifiedDate":"2021-11-06"},{"lineNumber":10,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":11,"author":{"gitId":"JWweiyin"},"content":"actor \"User\" as user","lastModifiedDate":"2021-11-06"},{"lineNumber":12,"author":{"gitId":"JWweiyin"},"content":"file \"data/CardLi.txt\" as data dataCOLOUR","lastModifiedDate":"2021-11-06"},{"lineNumber":13,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":14,"author":{"gitId":"JWweiyin"},"content":"rectangle \"CardLI\" as CLI {","lastModifiedDate":"2021-11-06"},{"lineNumber":15,"author":{"gitId":"JWweiyin"},"content":"rectangle \"UI\" as UI uiCOLOUR","lastModifiedDate":"2021-11-06"},{"lineNumber":16,"author":{"gitId":"JWweiyin"},"content":"rectangle \"Main\" as main mainCOLOUR","lastModifiedDate":"2021-11-06"},{"lineNumber":17,"author":{"gitId":"JWweiyin"},"content":"rectangle \"Logic\" as logic logicCOLOUR","lastModifiedDate":"2021-11-06"},{"lineNumber":18,"author":{"gitId":"JWweiyin"},"content":"rectangle \"Storage\" as storage storageCOLOUR","lastModifiedDate":"2021-11-06"},{"lineNumber":19,"author":{"gitId":"JWweiyin"},"content":"rectangle \"Model\" as model modelCOLOUR","lastModifiedDate":"2021-11-06"},{"lineNumber":20,"author":{"gitId":"JWweiyin"},"content":"}","lastModifiedDate":"2021-11-06"},{"lineNumber":21,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":22,"author":{"gitId":"JWweiyin"},"content":"user -down-\u003e  UI","lastModifiedDate":"2021-11-06"},{"lineNumber":23,"author":{"gitId":"JWweiyin"},"content":"main -right-\u003e UI","lastModifiedDate":"2021-11-06"},{"lineNumber":24,"author":{"gitId":"JWweiyin"},"content":"main -down-\u003e  logic","lastModifiedDate":"2021-11-06"},{"lineNumber":25,"author":{"gitId":"JWweiyin"},"content":"main -down-\u003e  model","lastModifiedDate":"2021-11-06"},{"lineNumber":26,"author":{"gitId":"JWweiyin"},"content":"main -left-\u003e storage","lastModifiedDate":"2021-11-06"},{"lineNumber":27,"author":{"gitId":"JWweiyin"},"content":"storage -left-\u003e data","lastModifiedDate":"2021-11-06"},{"lineNumber":28,"author":{"gitId":"JWweiyin"},"content":"storage -[dashed]-\u003e model","lastModifiedDate":"2021-11-06"},{"lineNumber":29,"author":{"gitId":"JWweiyin"},"content":"logic -\u003e model","lastModifiedDate":"2021-11-06"},{"lineNumber":30,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":31,"author":{"gitId":"JWweiyin"},"content":"@enduml","lastModifiedDate":"2021-11-06"}],"authorContributionMap":{"JWweiyin":31}},{"path":"docs/uml/parseAnswerListSeqDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"xRossKoh"},"content":"@startuml","lastModifiedDate":"2021-11-07"},{"lineNumber":2,"author":{"gitId":"xRossKoh"},"content":"\u0027https://plantuml.com/sequence-diagram","lastModifiedDate":"2021-11-07"},{"lineNumber":3,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":4,"author":{"gitId":"xRossKoh"},"content":"!include style.puml","lastModifiedDate":"2021-11-07"},{"lineNumber":5,"author":{"gitId":"xRossKoh"},"content":"participant \": Storage\" as Store storageCOLOUR","lastModifiedDate":"2021-11-07"},{"lineNumber":6,"author":{"gitId":"xRossKoh"},"content":"participant \"jsonAnswerList: JSONObject\" as jsonAL","lastModifiedDate":"2021-11-07"},{"lineNumber":7,"author":{"gitId":"xRossKoh"},"content":"participant \"newAnswerList: AnswerList\" as AL modelCOLOUR","lastModifiedDate":"2021-11-07"},{"lineNumber":8,"author":{"gitId":"xRossKoh"},"content":"participant \"jsonAnswer: JSONObject\" as jsonAns","lastModifiedDate":"2021-11-07"},{"lineNumber":9,"author":{"gitId":"xRossKoh"},"content":"participant \"newAnswer: Answer\" as Ans modelCOLOUR","lastModifiedDate":"2021-11-07"},{"lineNumber":10,"author":{"gitId":"xRossKoh"},"content":"autonumber","lastModifiedDate":"2021-11-07"},{"lineNumber":11,"author":{"gitId":"xRossKoh"},"content":"hide footbox","lastModifiedDate":"2021-11-07"},{"lineNumber":12,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":13,"author":{"gitId":"xRossKoh"},"content":"mainframe **ref** parseAnswerList","lastModifiedDate":"2021-11-07"},{"lineNumber":14,"author":{"gitId":"xRossKoh"},"content":"activate Store","lastModifiedDate":"2021-11-07"},{"lineNumber":15,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":16,"author":{"gitId":"xRossKoh"},"content":"Store-\u003eStore: parseAnswerList(jsonAnswerList: JSONObject)","lastModifiedDate":"2021-11-07"},{"lineNumber":17,"author":{"gitId":"xRossKoh"},"content":"activate Store","lastModifiedDate":"2021-11-07"},{"lineNumber":18,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":19,"author":{"gitId":"xRossKoh"},"content":"Store-\u003ejsonAL: get(\"deck\")","lastModifiedDate":"2021-11-07"},{"lineNumber":20,"author":{"gitId":"xRossKoh"},"content":"activate jsonAL","lastModifiedDate":"2021-11-07"},{"lineNumber":21,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":22,"author":{"gitId":"xRossKoh"},"content":"Store\u003c--jsonAL: jsonDeck: Object","lastModifiedDate":"2021-11-07"},{"lineNumber":23,"author":{"gitId":"xRossKoh"},"content":"deactivate jsonAL","lastModifiedDate":"2021-11-07"},{"lineNumber":24,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":25,"author":{"gitId":"xRossKoh"},"content":"Store-\u003eStore: parseDeck\\n((JSONObject) jsonDeck)","lastModifiedDate":"2021-11-07"},{"lineNumber":26,"author":{"gitId":"xRossKoh"},"content":"activate Store","lastModifiedDate":"2021-11-07"},{"lineNumber":27,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":28,"author":{"gitId":"xRossKoh"},"content":"Store--\u003eStore: newDeck: Deck","lastModifiedDate":"2021-11-07"},{"lineNumber":29,"author":{"gitId":"xRossKoh"},"content":"deactivate Store","lastModifiedDate":"2021-11-07"},{"lineNumber":30,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":31,"author":{"gitId":"xRossKoh"},"content":"Store-\u003eAL**:new AnswerList(newDeck)","lastModifiedDate":"2021-11-07"},{"lineNumber":32,"author":{"gitId":"xRossKoh"},"content":"activate AL","lastModifiedDate":"2021-11-07"},{"lineNumber":33,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":34,"author":{"gitId":"xRossKoh"},"content":"Store\u003c--AL","lastModifiedDate":"2021-11-07"},{"lineNumber":35,"author":{"gitId":"xRossKoh"},"content":"deactivate AL","lastModifiedDate":"2021-11-07"},{"lineNumber":36,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":37,"author":{"gitId":"xRossKoh"},"content":"Store-\u003ejsonAL: get(\"answerList\")","lastModifiedDate":"2021-11-07"},{"lineNumber":38,"author":{"gitId":"xRossKoh"},"content":"activate jsonAL","lastModifiedDate":"2021-11-07"},{"lineNumber":39,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":40,"author":{"gitId":"xRossKoh"},"content":"Store\u003c--jsonAL: JSONArray jsonAnswers\\n \u003d ((JSONArray) answerList:\\n Object)","lastModifiedDate":"2021-11-07"},{"lineNumber":41,"author":{"gitId":"xRossKoh"},"content":"deactivate jsonAL","lastModifiedDate":"2021-11-07"},{"lineNumber":42,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":43,"author":{"gitId":"xRossKoh"},"content":"loop (JSONObject) jsonAnswer in jsonAnswers","lastModifiedDate":"2021-11-07"},{"lineNumber":44,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":45,"author":{"gitId":"xRossKoh"},"content":"Store-\u003ejsonAns: get(\"answer\")","lastModifiedDate":"2021-11-07"},{"lineNumber":46,"author":{"gitId":"xRossKoh"},"content":"activate jsonAns","lastModifiedDate":"2021-11-07"},{"lineNumber":47,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":48,"author":{"gitId":"xRossKoh"},"content":"Store\u003c--jsonAns: answer: Object","lastModifiedDate":"2021-11-07"},{"lineNumber":49,"author":{"gitId":"xRossKoh"},"content":"deactivate jsonAns","lastModifiedDate":"2021-11-07"},{"lineNumber":50,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":51,"author":{"gitId":"xRossKoh"},"content":"Store-\u003ejsonAns: get(\"questionIndex\")","lastModifiedDate":"2021-11-07"},{"lineNumber":52,"author":{"gitId":"xRossKoh"},"content":"activate jsonAns","lastModifiedDate":"2021-11-07"},{"lineNumber":53,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":54,"author":{"gitId":"xRossKoh"},"content":"Store\u003c--jsonAns: questionIndex: Object","lastModifiedDate":"2021-11-07"},{"lineNumber":55,"author":{"gitId":"xRossKoh"},"content":"deactivate jsonAns","lastModifiedDate":"2021-11-07"},{"lineNumber":56,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":57,"author":{"gitId":"xRossKoh"},"content":"Store-\u003eAns**: new Answer((String) answer, (int)(long) questionIndex)","lastModifiedDate":"2021-11-07"},{"lineNumber":58,"author":{"gitId":"xRossKoh"},"content":"activate Ans","lastModifiedDate":"2021-11-07"},{"lineNumber":59,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":60,"author":{"gitId":"xRossKoh"},"content":"Store\u003c--Ans","lastModifiedDate":"2021-11-07"},{"lineNumber":61,"author":{"gitId":"xRossKoh"},"content":"deactivate Ans","lastModifiedDate":"2021-11-07"},{"lineNumber":62,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":63,"author":{"gitId":"xRossKoh"},"content":"Store-\u003eAL: add(newAnswer)","lastModifiedDate":"2021-11-07"},{"lineNumber":64,"author":{"gitId":"xRossKoh"},"content":"activate AL","lastModifiedDate":"2021-11-07"},{"lineNumber":65,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":66,"author":{"gitId":"xRossKoh"},"content":"Store\u003c--AL","lastModifiedDate":"2021-11-07"},{"lineNumber":67,"author":{"gitId":"xRossKoh"},"content":"deactivate AL","lastModifiedDate":"2021-11-07"},{"lineNumber":68,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":69,"author":{"gitId":"xRossKoh"},"content":"end","lastModifiedDate":"2021-11-07"},{"lineNumber":70,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":71,"author":{"gitId":"xRossKoh"},"content":"Store-\u003ejsonAL: get(\"userScore\")","lastModifiedDate":"2021-11-07"},{"lineNumber":72,"author":{"gitId":"xRossKoh"},"content":"activate jsonAL","lastModifiedDate":"2021-11-07"},{"lineNumber":73,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":74,"author":{"gitId":"xRossKoh"},"content":"Store\u003c--jsonAL: userScore: Object","lastModifiedDate":"2021-11-07"},{"lineNumber":75,"author":{"gitId":"xRossKoh"},"content":"deactivate jsonAL","lastModifiedDate":"2021-11-07"},{"lineNumber":76,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":77,"author":{"gitId":"xRossKoh"},"content":"Store-\u003eAL: setUserScore((int)(long) userScore)","lastModifiedDate":"2021-11-07"},{"lineNumber":78,"author":{"gitId":"xRossKoh"},"content":"activate AL","lastModifiedDate":"2021-11-07"},{"lineNumber":79,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":80,"author":{"gitId":"xRossKoh"},"content":"Store\u003c--AL","lastModifiedDate":"2021-11-07"},{"lineNumber":81,"author":{"gitId":"xRossKoh"},"content":"deactivate AL","lastModifiedDate":"2021-11-07"},{"lineNumber":82,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":83,"author":{"gitId":"xRossKoh"},"content":"Store--\u003eStore: newAnswerList","lastModifiedDate":"2021-11-07"},{"lineNumber":84,"author":{"gitId":"xRossKoh"},"content":"deactivate Store","lastModifiedDate":"2021-11-07"},{"lineNumber":85,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":86,"author":{"gitId":"xRossKoh"},"content":"@enduml","lastModifiedDate":"2021-11-07"}],"authorContributionMap":{"xRossKoh":86}},{"path":"docs/uml/parseDeckSeqDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"xRossKoh"},"content":"@startuml","lastModifiedDate":"2021-11-07"},{"lineNumber":2,"author":{"gitId":"xRossKoh"},"content":"\u0027https://plantuml.com/sequence-diagram","lastModifiedDate":"2021-11-07"},{"lineNumber":3,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":4,"author":{"gitId":"xRossKoh"},"content":"!include style.puml","lastModifiedDate":"2021-11-07"},{"lineNumber":5,"author":{"gitId":"xRossKoh"},"content":"participant \": Storage\" as Store storageCOLOUR","lastModifiedDate":"2021-11-07"},{"lineNumber":6,"author":{"gitId":"xRossKoh"},"content":"participant \"jsonDeck: JSONObject\" as jsonDeck","lastModifiedDate":"2021-11-07"},{"lineNumber":7,"author":{"gitId":"xRossKoh"},"content":"participant \"newDeck: Deck\" as Deck modelCOLOUR","lastModifiedDate":"2021-11-07"},{"lineNumber":8,"author":{"gitId":"xRossKoh"},"content":"participant \"jsonCard: JSONObject\" as jsonCard","lastModifiedDate":"2021-11-07"},{"lineNumber":9,"author":{"gitId":"xRossKoh"},"content":"participant \"newFlashCard: FlashCard\" as Card modelCOLOUR","lastModifiedDate":"2021-11-07"},{"lineNumber":10,"author":{"gitId":"xRossKoh"},"content":"autonumber","lastModifiedDate":"2021-11-07"},{"lineNumber":11,"author":{"gitId":"xRossKoh"},"content":"hide footbox","lastModifiedDate":"2021-11-07"},{"lineNumber":12,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":13,"author":{"gitId":"xRossKoh"},"content":"mainframe **ref** parseDeck","lastModifiedDate":"2021-11-07"},{"lineNumber":14,"author":{"gitId":"xRossKoh"},"content":"activate Store","lastModifiedDate":"2021-11-07"},{"lineNumber":15,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":16,"author":{"gitId":"xRossKoh"},"content":"Store-\u003eStore: parseDeck(jsonDeck: JSONObject)","lastModifiedDate":"2021-11-07"},{"lineNumber":17,"author":{"gitId":"xRossKoh"},"content":"activate Store","lastModifiedDate":"2021-11-07"},{"lineNumber":18,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":19,"author":{"gitId":"xRossKoh"},"content":"Store-\u003ejsonDeck: get(\"deckName\")","lastModifiedDate":"2021-11-07"},{"lineNumber":20,"author":{"gitId":"xRossKoh"},"content":"activate jsonDeck","lastModifiedDate":"2021-11-07"},{"lineNumber":21,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":22,"author":{"gitId":"xRossKoh"},"content":"Store\u003c--jsonDeck: deckName: Object","lastModifiedDate":"2021-11-07"},{"lineNumber":23,"author":{"gitId":"xRossKoh"},"content":"deactivate jsonDeck","lastModifiedDate":"2021-11-07"},{"lineNumber":24,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":25,"author":{"gitId":"xRossKoh"},"content":"Store-\u003eDeck**: new Deck((String) deckName)","lastModifiedDate":"2021-11-07"},{"lineNumber":26,"author":{"gitId":"xRossKoh"},"content":"activate Deck","lastModifiedDate":"2021-11-07"},{"lineNumber":27,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":28,"author":{"gitId":"xRossKoh"},"content":"Store\u003c--Deck","lastModifiedDate":"2021-11-07"},{"lineNumber":29,"author":{"gitId":"xRossKoh"},"content":"deactivate Deck","lastModifiedDate":"2021-11-07"},{"lineNumber":30,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":31,"author":{"gitId":"xRossKoh"},"content":"Store-\u003ejsonDeck: get(\"cards\")","lastModifiedDate":"2021-11-07"},{"lineNumber":32,"author":{"gitId":"xRossKoh"},"content":"activate jsonDeck","lastModifiedDate":"2021-11-07"},{"lineNumber":33,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":34,"author":{"gitId":"xRossKoh"},"content":"Store\u003c--jsonDeck: JSONArray jsonCards\\n \u003d ((JSONArray) cards:\\n Object)","lastModifiedDate":"2021-11-07"},{"lineNumber":35,"author":{"gitId":"xRossKoh"},"content":"deactivate jsonDeck","lastModifiedDate":"2021-11-07"},{"lineNumber":36,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":37,"author":{"gitId":"xRossKoh"},"content":"loop (JSONObject) jsonCard in jsonCards","lastModifiedDate":"2021-11-07"},{"lineNumber":38,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":39,"author":{"gitId":"xRossKoh"},"content":"Store-\u003ejsonCard: get(\"front\")","lastModifiedDate":"2021-11-07"},{"lineNumber":40,"author":{"gitId":"xRossKoh"},"content":"activate jsonCard","lastModifiedDate":"2021-11-07"},{"lineNumber":41,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":42,"author":{"gitId":"xRossKoh"},"content":"Store\u003c--jsonCard: front: Object","lastModifiedDate":"2021-11-07"},{"lineNumber":43,"author":{"gitId":"xRossKoh"},"content":"deactivate jsonCard","lastModifiedDate":"2021-11-07"},{"lineNumber":44,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":45,"author":{"gitId":"xRossKoh"},"content":"Store-\u003ejsonCard: get(\"back\")","lastModifiedDate":"2021-11-07"},{"lineNumber":46,"author":{"gitId":"xRossKoh"},"content":"activate jsonCard","lastModifiedDate":"2021-11-07"},{"lineNumber":47,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":48,"author":{"gitId":"xRossKoh"},"content":"Store\u003c--jsonCard: back: Object","lastModifiedDate":"2021-11-07"},{"lineNumber":49,"author":{"gitId":"xRossKoh"},"content":"deactivate jsonCard","lastModifiedDate":"2021-11-07"},{"lineNumber":50,"author":{"gitId":"xRossKoh"},"content":"Store-\u003ejsonCard: get(\"userScore\")","lastModifiedDate":"2021-11-07"},{"lineNumber":51,"author":{"gitId":"xRossKoh"},"content":"activate jsonCard","lastModifiedDate":"2021-11-07"},{"lineNumber":52,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":53,"author":{"gitId":"xRossKoh"},"content":"Store\u003c--jsonCard: userScore: Object","lastModifiedDate":"2021-11-07"},{"lineNumber":54,"author":{"gitId":"xRossKoh"},"content":"deactivate jsonCard","lastModifiedDate":"2021-11-07"},{"lineNumber":55,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":56,"author":{"gitId":"xRossKoh"},"content":"Store-\u003ejsonCard: get(\"totalScore\")","lastModifiedDate":"2021-11-07"},{"lineNumber":57,"author":{"gitId":"xRossKoh"},"content":"activate jsonCard","lastModifiedDate":"2021-11-07"},{"lineNumber":58,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":59,"author":{"gitId":"xRossKoh"},"content":"Store\u003c--jsonCard: totalScore: Object","lastModifiedDate":"2021-11-07"},{"lineNumber":60,"author":{"gitId":"xRossKoh"},"content":"deactivate jsonCard","lastModifiedDate":"2021-11-07"},{"lineNumber":61,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":62,"author":{"gitId":"xRossKoh"},"content":"Store-\u003eCard**: new FlashCard((String) front, (String) back, (int)(long) userScore, (int)(long) totalScore)","lastModifiedDate":"2021-11-07"},{"lineNumber":63,"author":{"gitId":"xRossKoh"},"content":"activate Card","lastModifiedDate":"2021-11-07"},{"lineNumber":64,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":65,"author":{"gitId":"xRossKoh"},"content":"Store\u003c--Card","lastModifiedDate":"2021-11-07"},{"lineNumber":66,"author":{"gitId":"xRossKoh"},"content":"deactivate Card","lastModifiedDate":"2021-11-07"},{"lineNumber":67,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":68,"author":{"gitId":"xRossKoh"},"content":"Store-\u003eDeck: addFlashCard(newFlashCard)","lastModifiedDate":"2021-11-07"},{"lineNumber":69,"author":{"gitId":"xRossKoh"},"content":"activate Deck","lastModifiedDate":"2021-11-07"},{"lineNumber":70,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":71,"author":{"gitId":"xRossKoh"},"content":"Store\u003c--Deck","lastModifiedDate":"2021-11-07"},{"lineNumber":72,"author":{"gitId":"xRossKoh"},"content":"deactivate Deck","lastModifiedDate":"2021-11-07"},{"lineNumber":73,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":74,"author":{"gitId":"xRossKoh"},"content":"end","lastModifiedDate":"2021-11-07"},{"lineNumber":75,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":76,"author":{"gitId":"xRossKoh"},"content":"Store--\u003eStore: newDeck","lastModifiedDate":"2021-11-07"},{"lineNumber":77,"author":{"gitId":"xRossKoh"},"content":"deactivate Store","lastModifiedDate":"2021-11-07"},{"lineNumber":78,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":79,"author":{"gitId":"xRossKoh"},"content":"@enduml","lastModifiedDate":"2021-11-07"}],"authorContributionMap":{"xRossKoh":79}},{"path":"docs/uml/parserArchitecture.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"JWweiyin"},"content":"@startuml","lastModifiedDate":"2021-11-06"},{"lineNumber":2,"author":{"gitId":"JWweiyin"},"content":"\u0027https://plantuml.com/deployment-diagram","lastModifiedDate":"2021-11-06"},{"lineNumber":3,"author":{"gitId":"JWweiyin"},"content":"!define logicCOLOUR #a6f0ff","lastModifiedDate":"2021-11-06"},{"lineNumber":4,"author":{"gitId":"JWweiyin"},"content":"!define boxCOLOUR #86b1db","lastModifiedDate":"2021-11-06"},{"lineNumber":5,"author":{"gitId":"JWweiyin"},"content":"!define mainCOLOUR #b5b5b5","lastModifiedDate":"2021-11-06"},{"lineNumber":6,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":7,"author":{"gitId":"JWweiyin"},"content":"rectangle parser as \"Parser\" boxCOLOUR{","lastModifiedDate":"2021-11-06"},{"lineNumber":8,"author":{"gitId":"JWweiyin"},"content":"rectangle \"InnerParser\" as iParser logicCOLOUR","lastModifiedDate":"2021-11-06"},{"lineNumber":9,"author":{"gitId":"JWweiyin"},"content":"rectangle \"OuterParser\" as oParser logicCOLOUR","lastModifiedDate":"2021-11-06"},{"lineNumber":10,"author":{"gitId":"JWweiyin"},"content":"rectangle \"\u003c\u003cinterface\u003e\u003e\\nCommandArgumentParser\" as CAP logicCOLOUR","lastModifiedDate":"2021-11-06"},{"lineNumber":11,"author":{"gitId":"JWweiyin"},"content":"rectangle \"XYZCommandParser\" as XYZCP logicCOLOUR","lastModifiedDate":"2021-11-06"},{"lineNumber":12,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":13,"author":{"gitId":"JWweiyin"},"content":"}","lastModifiedDate":"2021-11-06"},{"lineNumber":14,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":15,"author":{"gitId":"JWweiyin"},"content":"rectangle \"{abstract}\\nCommand\" as Command logicCOLOUR","lastModifiedDate":"2021-11-06"},{"lineNumber":16,"author":{"gitId":"JWweiyin"},"content":"rectangle \"XYZCommand\" as XYZCommand logicCOLOUR","lastModifiedDate":"2021-11-06"},{"lineNumber":17,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":18,"author":{"gitId":"JWweiyin"},"content":"rectangle \"Main\" as Main mainCOLOUR","lastModifiedDate":"2021-11-06"},{"lineNumber":19,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":20,"author":{"gitId":"JWweiyin"},"content":"XYZCP -up-|\u003e CAP","lastModifiedDate":"2021-11-06"},{"lineNumber":21,"author":{"gitId":"JWweiyin"},"content":"iParser -[dashed]-\u003eXYZCommand: \u003e creates","lastModifiedDate":"2021-11-06"},{"lineNumber":22,"author":{"gitId":"JWweiyin"},"content":"oParser -[dashed]-\u003eXYZCommand: \u003e creates","lastModifiedDate":"2021-11-06"},{"lineNumber":23,"author":{"gitId":"JWweiyin"},"content":"XYZCommand-[dashed]-\u003eXYZCP: \u003e creates","lastModifiedDate":"2021-11-06"},{"lineNumber":24,"author":{"gitId":"JWweiyin"},"content":"XYZCommand-up-|\u003eCommand","lastModifiedDate":"2021-11-06"},{"lineNumber":25,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":26,"author":{"gitId":"JWweiyin"},"content":"Main -down-\u003e iParser","lastModifiedDate":"2021-11-06"},{"lineNumber":27,"author":{"gitId":"JWweiyin"},"content":"Main -down-\u003e oParser","lastModifiedDate":"2021-11-06"},{"lineNumber":28,"author":{"gitId":"JWweiyin"},"content":"@enduml","lastModifiedDate":"2021-11-06"}],"authorContributionMap":{"JWweiyin":28}},{"path":"docs/uml/prepareTestDeckSeqDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"xkisxk"},"content":"@startuml","lastModifiedDate":"2021-11-03"},{"lineNumber":2,"author":{"gitId":"xkisxk"},"content":"!include style.puml","lastModifiedDate":"2021-11-07"},{"lineNumber":3,"author":{"gitId":"xkisxk"},"content":"autonumber","lastModifiedDate":"2021-11-07"},{"lineNumber":4,"author":{"gitId":"xkisxk"},"content":"hide footbox","lastModifiedDate":"2021-11-07"},{"lineNumber":5,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":6,"author":{"gitId":"xkisxk"},"content":"participant \":TestManager\" as TestManager modelCOLOUR","lastModifiedDate":"2021-11-07"},{"lineNumber":7,"author":{"gitId":"xkisxk"},"content":"participant \":AnswerList\" as AnswerList modelCOLOUR","lastModifiedDate":"2021-11-07"},{"lineNumber":8,"author":{"gitId":"xkisxk"},"content":"participant \":Collections\" as Collections","lastModifiedDate":"2021-11-03"},{"lineNumber":9,"author":{"gitId":"xkisxk"},"content":"participant \"ShuffledDeck:Deck\" as Deck modelCOLOUR","lastModifiedDate":"2021-11-07"},{"lineNumber":10,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":11,"author":{"gitId":"xkisxk"},"content":"activate TestManager","lastModifiedDate":"2021-11-03"},{"lineNumber":12,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":13,"author":{"gitId":"xkisxk"},"content":"TestManager -\u003e TestManager : prepareTestDeck(userAnswers)","lastModifiedDate":"2021-11-03"},{"lineNumber":14,"author":{"gitId":"xkisxk"},"content":"activate TestManager","lastModifiedDate":"2021-11-03"},{"lineNumber":15,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":16,"author":{"gitId":"xkisxk"},"content":"TestManager -\u003e Collections : shuffle(deckToTest)","lastModifiedDate":"2021-11-03"},{"lineNumber":17,"author":{"gitId":"xkisxk"},"content":"activate Collections","lastModifiedDate":"2021-11-03"},{"lineNumber":18,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":19,"author":{"gitId":"xkisxk"},"content":"Collections --\u003e TestManager : ShuffledDeck","lastModifiedDate":"2021-11-03"},{"lineNumber":20,"author":{"gitId":"xkisxk"},"content":"deactivate Collections","lastModifiedDate":"2021-11-03"},{"lineNumber":21,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":22,"author":{"gitId":"xkisxk"},"content":"loop every card in deckToTest","lastModifiedDate":"2021-11-03"},{"lineNumber":23,"author":{"gitId":"xkisxk"},"content":"TestManager -\u003e AnswerList : getDeck()","lastModifiedDate":"2021-11-03"},{"lineNumber":24,"author":{"gitId":"xkisxk"},"content":"activate AnswerList","lastModifiedDate":"2021-11-03"},{"lineNumber":25,"author":{"gitId":"xkisxk"},"content":"AnswerList -\u003e Deck : getQuestionNumber(question:FlashCard)","lastModifiedDate":"2021-11-03"},{"lineNumber":26,"author":{"gitId":"xkisxk"},"content":"activate Deck","lastModifiedDate":"2021-11-03"},{"lineNumber":27,"author":{"gitId":"xkisxk"},"content":"Deck --\u003e AnswerList : questionNumber:Int","lastModifiedDate":"2021-11-03"},{"lineNumber":28,"author":{"gitId":"xkisxk"},"content":"deactivate Deck","lastModifiedDate":"2021-11-03"},{"lineNumber":29,"author":{"gitId":"xkisxk"},"content":"AnswerList --\u003e TestManager : questionNumber:Int","lastModifiedDate":"2021-11-03"},{"lineNumber":30,"author":{"gitId":"xkisxk"},"content":"deactivate AnswerList","lastModifiedDate":"2021-11-03"},{"lineNumber":31,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":32,"author":{"gitId":"xkisxk"},"content":"TestManager -\u003e AnswerList : addAnswer(\"NIL\", questionNumber)","lastModifiedDate":"2021-11-03"},{"lineNumber":33,"author":{"gitId":"xkisxk"},"content":"activate AnswerList","lastModifiedDate":"2021-11-03"},{"lineNumber":34,"author":{"gitId":"xkisxk"},"content":"AnswerList --\u003e TestManager","lastModifiedDate":"2021-11-03"},{"lineNumber":35,"author":{"gitId":"xkisxk"},"content":"deactivate AnswerList","lastModifiedDate":"2021-11-03"},{"lineNumber":36,"author":{"gitId":"xkisxk"},"content":"end","lastModifiedDate":"2021-11-03"},{"lineNumber":37,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":38,"author":{"gitId":"xkisxk"},"content":"TestManager --\u003e TestManager","lastModifiedDate":"2021-11-03"},{"lineNumber":39,"author":{"gitId":"xkisxk"},"content":"deactivate TestManager","lastModifiedDate":"2021-11-03"},{"lineNumber":40,"author":{"gitId":"xkisxk"},"content":"@enduml","lastModifiedDate":"2021-11-03"}],"authorContributionMap":{"xkisxk":40}},{"path":"docs/uml/readFromFileSeqDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"xRossKoh"},"content":"@startuml","lastModifiedDate":"2021-11-07"},{"lineNumber":2,"author":{"gitId":"xRossKoh"},"content":"\u0027https://plantuml.com/sequence-diagram","lastModifiedDate":"2021-11-07"},{"lineNumber":3,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":4,"author":{"gitId":"xRossKoh"},"content":"!include style.puml","lastModifiedDate":"2021-11-07"},{"lineNumber":5,"author":{"gitId":"xRossKoh"},"content":"hide footbox","lastModifiedDate":"2021-11-07"},{"lineNumber":6,"author":{"gitId":"xRossKoh"},"content":"autonumber","lastModifiedDate":"2021-11-07"},{"lineNumber":7,"author":{"gitId":"xRossKoh"},"content":"participant \": Storage\" as Store storageCOLOUR","lastModifiedDate":"2021-11-07"},{"lineNumber":8,"author":{"gitId":"xRossKoh"},"content":"participant \"decks: ArrayList\u003cDeck\u003e /\\ntestHistory: ArrayList\u003cAnswerList\u003e\" as ArrayList modelCOLOUR","lastModifiedDate":"2021-11-07"},{"lineNumber":9,"author":{"gitId":"xRossKoh"},"content":"participant \"s: Scanner\" as Scan uiCOLOUR","lastModifiedDate":"2021-11-07"},{"lineNumber":10,"author":{"gitId":"xRossKoh"},"content":"participant \"parser: JSONParser\" as Parser","lastModifiedDate":"2021-11-07"},{"lineNumber":11,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":12,"author":{"gitId":"xRossKoh"},"content":"[-\u003eStore: readCardsFromFile() /\\nreadTestsFromFile()","lastModifiedDate":"2021-11-07"},{"lineNumber":13,"author":{"gitId":"xRossKoh"},"content":"activate Store","lastModifiedDate":"2021-11-07"},{"lineNumber":14,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":15,"author":{"gitId":"xRossKoh"},"content":"Store-\u003eArrayList**: new ArrayList\u003c\u003e()","lastModifiedDate":"2021-11-07"},{"lineNumber":16,"author":{"gitId":"xRossKoh"},"content":"activate ArrayList","lastModifiedDate":"2021-11-07"},{"lineNumber":17,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":18,"author":{"gitId":"xRossKoh"},"content":"Store\u003c--ArrayList","lastModifiedDate":"2021-11-07"},{"lineNumber":19,"author":{"gitId":"xRossKoh"},"content":"deactivate ArrayList","lastModifiedDate":"2021-11-07"},{"lineNumber":20,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":21,"author":{"gitId":"xRossKoh"},"content":"Store-\u003eScan**: new Scanner(filepath: String)","lastModifiedDate":"2021-11-07"},{"lineNumber":22,"author":{"gitId":"xRossKoh"},"content":"activate Scan","lastModifiedDate":"2021-11-07"},{"lineNumber":23,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":24,"author":{"gitId":"xRossKoh"},"content":"Store\u003c--Scan","lastModifiedDate":"2021-11-07"},{"lineNumber":25,"author":{"gitId":"xRossKoh"},"content":"deactivate Scan","lastModifiedDate":"2021-11-07"},{"lineNumber":26,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":27,"author":{"gitId":"xRossKoh"},"content":"Store-\u003eParser**: new JSONParser()","lastModifiedDate":"2021-11-07"},{"lineNumber":28,"author":{"gitId":"xRossKoh"},"content":"activate Parser","lastModifiedDate":"2021-11-07"},{"lineNumber":29,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":30,"author":{"gitId":"xRossKoh"},"content":"Store\u003c--Parser","lastModifiedDate":"2021-11-07"},{"lineNumber":31,"author":{"gitId":"xRossKoh"},"content":"deactivate Parser","lastModifiedDate":"2021-11-07"},{"lineNumber":32,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":33,"author":{"gitId":"xRossKoh"},"content":"Store-\u003eScan: nextLine()","lastModifiedDate":"2021-11-07"},{"lineNumber":34,"author":{"gitId":"xRossKoh"},"content":"activate Scan","lastModifiedDate":"2021-11-07"},{"lineNumber":35,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":36,"author":{"gitId":"xRossKoh"},"content":"Store\u003c--Scan: scannedString: String","lastModifiedDate":"2021-11-07"},{"lineNumber":37,"author":{"gitId":"xRossKoh"},"content":"destroy Scan","lastModifiedDate":"2021-11-07"},{"lineNumber":38,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":39,"author":{"gitId":"xRossKoh"},"content":"Store-\u003eParser: parse(scannedString)","lastModifiedDate":"2021-11-07"},{"lineNumber":40,"author":{"gitId":"xRossKoh"},"content":"activate Parser","lastModifiedDate":"2021-11-07"},{"lineNumber":41,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":42,"author":{"gitId":"xRossKoh"},"content":"Store\u003c--Parser: JSONArray jsonDecks / jsonTestHistory\\n \u003d ((JSONArray) scannedObject: Object)","lastModifiedDate":"2021-11-07"},{"lineNumber":43,"author":{"gitId":"xRossKoh"},"content":"deactivate Parser","lastModifiedDate":"2021-11-07"},{"lineNumber":44,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":45,"author":{"gitId":"xRossKoh"},"content":"loop (JSONObject) object in jsonDecks / jsonTestHistory","lastModifiedDate":"2021-11-07"},{"lineNumber":46,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":47,"author":{"gitId":"xRossKoh"},"content":"Store-\u003eStore: parseDeck / parseAnswerList(object)","lastModifiedDate":"2021-11-07"},{"lineNumber":48,"author":{"gitId":"xRossKoh"},"content":"activate Store","lastModifiedDate":"2021-11-07"},{"lineNumber":49,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":50,"author":{"gitId":"xRossKoh"},"content":"ref over Store","lastModifiedDate":"2021-11-07"},{"lineNumber":51,"author":{"gitId":"xRossKoh"},"content":"parseDeck / parseAnswerList","lastModifiedDate":"2021-11-07"},{"lineNumber":52,"author":{"gitId":"xRossKoh"},"content":"end ref","lastModifiedDate":"2021-11-07"},{"lineNumber":53,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":54,"author":{"gitId":"xRossKoh"},"content":"Store--\u003eStore: deck: Deck / answerList: AnswerList","lastModifiedDate":"2021-11-07"},{"lineNumber":55,"author":{"gitId":"xRossKoh"},"content":"deactivate Store","lastModifiedDate":"2021-11-07"},{"lineNumber":56,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":57,"author":{"gitId":"xRossKoh"},"content":"Store-\u003eArrayList: add(deck / answerList)","lastModifiedDate":"2021-11-07"},{"lineNumber":58,"author":{"gitId":"xRossKoh"},"content":"activate ArrayList","lastModifiedDate":"2021-11-07"},{"lineNumber":59,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":60,"author":{"gitId":"xRossKoh"},"content":"Store\u003c--ArrayList","lastModifiedDate":"2021-11-07"},{"lineNumber":61,"author":{"gitId":"xRossKoh"},"content":"deactivate ArrayList","lastModifiedDate":"2021-11-07"},{"lineNumber":62,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":63,"author":{"gitId":"xRossKoh"},"content":"end","lastModifiedDate":"2021-11-07"},{"lineNumber":64,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":65,"author":{"gitId":"xRossKoh"},"content":"[\u003c--Store: decks / testHistory","lastModifiedDate":"2021-11-07"},{"lineNumber":66,"author":{"gitId":"xRossKoh"},"content":"destroy Store","lastModifiedDate":"2021-11-07"},{"lineNumber":67,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":68,"author":{"gitId":"xRossKoh"},"content":"@enduml","lastModifiedDate":"2021-11-07"}],"authorContributionMap":{"xRossKoh":68}},{"path":"docs/uml/style.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"JWweiyin"},"content":"!define logicCOLOUR #a6f0ff","lastModifiedDate":"2021-11-06"},{"lineNumber":2,"author":{"gitId":"JWweiyin"},"content":"!define storageCOLOUR #fc9e88","lastModifiedDate":"2021-11-06"},{"lineNumber":3,"author":{"gitId":"JWweiyin"},"content":"!define modelCOLOUR #c088fc","lastModifiedDate":"2021-11-06"},{"lineNumber":4,"author":{"gitId":"JWweiyin"},"content":"!define mainCOLOUR #b5b5b5","lastModifiedDate":"2021-11-06"},{"lineNumber":5,"author":{"gitId":"JWweiyin"},"content":"!define uiCOLOUR #88fca7","lastModifiedDate":"2021-11-06"},{"lineNumber":6,"author":{"gitId":"JWweiyin"},"content":"!define dataCOLOUR #e34668","lastModifiedDate":"2021-11-06"}],"authorContributionMap":{"JWweiyin":6}},{"path":"docs/uml/testCardSeqDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"xkisxk"},"content":"@startuml","lastModifiedDate":"2021-10-21"},{"lineNumber":2,"author":{"gitId":"xkisxk"},"content":"!include style.puml","lastModifiedDate":"2021-11-07"},{"lineNumber":3,"author":{"gitId":"xkisxk"},"content":"autonumber","lastModifiedDate":"2021-11-07"},{"lineNumber":4,"author":{"gitId":"xkisxk"},"content":"hide footbox","lastModifiedDate":"2021-11-07"},{"lineNumber":5,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":6,"author":{"gitId":"xkisxk"},"content":"participant \":TestManager\" as TestManager modelCOLOUR","lastModifiedDate":"2021-11-07"},{"lineNumber":7,"author":{"gitId":"xkisxk"},"content":"participant \":AnswerList\" as AnswerList modelCOLOUR","lastModifiedDate":"2021-11-07"},{"lineNumber":8,"author":{"gitId":"xkisxk"},"content":"participant \"TestParser\" as TestParser modelCOLOUR","lastModifiedDate":"2021-11-07"},{"lineNumber":9,"author":{"gitId":"xkisxk"},"content":"participant \":Answer\" as Answer modelCOLOUR","lastModifiedDate":"2021-11-07"},{"lineNumber":10,"author":{"gitId":"xkisxk"},"content":"participant \":TestUi\" as TestUi uiCOLOUR","lastModifiedDate":"2021-11-07"},{"lineNumber":11,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":12,"author":{"gitId":"xkisxk"},"content":"activate TestManager","lastModifiedDate":"2021-10-21"},{"lineNumber":13,"author":{"gitId":"xkisxk"},"content":"TestManager -\u003e TestManager : testCard(userAnswers, card)","lastModifiedDate":"2021-10-21"},{"lineNumber":14,"author":{"gitId":"xkisxk"},"content":"activate TestManager","lastModifiedDate":"2021-10-21"},{"lineNumber":15,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":16,"author":{"gitId":"xkisxk"},"content":"TestManager -\u003e TestUi : getUserMessage()","lastModifiedDate":"2021-10-21"},{"lineNumber":17,"author":{"gitId":"xkisxk"},"content":"activate TestUi","lastModifiedDate":"2021-10-21"},{"lineNumber":18,"author":{"gitId":"xkisxk"},"content":"TestUi --\u003e TestManager : userResponse","lastModifiedDate":"2021-10-21"},{"lineNumber":19,"author":{"gitId":"xkisxk"},"content":"deactivate TestUi","lastModifiedDate":"2021-10-21"},{"lineNumber":20,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":21,"author":{"gitId":"xkisxk"},"content":"TestManager -\u003e TestParser : parseUserResponse(userResponse)","lastModifiedDate":"2021-10-21"},{"lineNumber":22,"author":{"gitId":"xkisxk"},"content":"activate TestParser","lastModifiedDate":"2021-10-21"},{"lineNumber":23,"author":{"gitId":"xkisxk"},"content":"TestParser --\u003e TestManager : parsedUserResponse","lastModifiedDate":"2021-10-21"},{"lineNumber":24,"author":{"gitId":"xkisxk"},"content":"deactivate TestParser","lastModifiedDate":"2021-10-21"},{"lineNumber":25,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":26,"author":{"gitId":"xkisxk"},"content":"opt parsedUserResponse !\u003d /Next \u0026\u0026 parsedUserResponse !\u003d /Back","lastModifiedDate":"2021-11-03"},{"lineNumber":27,"author":{"gitId":"xkisxk"},"content":"TestManager -\u003e AnswerList : setQuestionAnswer(questionNumber, parsedUserResponse)","lastModifiedDate":"2021-11-03"},{"lineNumber":28,"author":{"gitId":"xkisxk"},"content":"activate AnswerList","lastModifiedDate":"2021-11-03"},{"lineNumber":29,"author":{"gitId":"xkisxk"},"content":"AnswerList --\u003e TestManager","lastModifiedDate":"2021-11-03"},{"lineNumber":30,"author":{"gitId":"xkisxk"},"content":"deactivate AnswerList","lastModifiedDate":"2021-11-03"},{"lineNumber":31,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":32,"author":{"gitId":"xkisxk"},"content":"TestManager -\u003e AnswerList : getAnswer(questionNumber)","lastModifiedDate":"2021-11-03"},{"lineNumber":33,"author":{"gitId":"xkisxk"},"content":"activate AnswerList","lastModifiedDate":"2021-11-03"},{"lineNumber":34,"author":{"gitId":"xkisxk"},"content":"AnswerList -\u003e Answer : setIsAnswered()","lastModifiedDate":"2021-11-03"},{"lineNumber":35,"author":{"gitId":"xkisxk"},"content":"activate Answer","lastModifiedDate":"2021-11-03"},{"lineNumber":36,"author":{"gitId":"xkisxk"},"content":"Answer --\u003e AnswerList","lastModifiedDate":"2021-11-03"},{"lineNumber":37,"author":{"gitId":"xkisxk"},"content":"deactivate Answer","lastModifiedDate":"2021-11-03"},{"lineNumber":38,"author":{"gitId":"xkisxk"},"content":"AnswerList --\u003e TestManager","lastModifiedDate":"2021-11-03"},{"lineNumber":39,"author":{"gitId":"xkisxk"},"content":"deactivate AnswerList","lastModifiedDate":"2021-11-03"},{"lineNumber":40,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":41,"author":{"gitId":"xkisxk"},"content":"TestManager -\u003e AnswerList : addAnswer(parsedUserResponse, questionNumber)","lastModifiedDate":"2021-10-21"},{"lineNumber":42,"author":{"gitId":"xkisxk"},"content":"activate AnswerList","lastModifiedDate":"2021-10-21"},{"lineNumber":43,"author":{"gitId":"xkisxk"},"content":"AnswerList --\u003e TestManager","lastModifiedDate":"2021-10-21"},{"lineNumber":44,"author":{"gitId":"xkisxk"},"content":"deactivate AnswerList","lastModifiedDate":"2021-10-21"},{"lineNumber":45,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":46,"author":{"gitId":"xkisxk"},"content":"TestManager --\u003e TestManager : nextQuestionFlag:Int","lastModifiedDate":"2021-11-03"},{"lineNumber":47,"author":{"gitId":"xkisxk"},"content":"deactivate TestManager","lastModifiedDate":"2021-10-21"},{"lineNumber":48,"author":{"gitId":"xkisxk"},"content":"end","lastModifiedDate":"2021-10-21"},{"lineNumber":49,"author":{"gitId":"xkisxk"},"content":"@enduml","lastModifiedDate":"2021-10-21"}],"authorContributionMap":{"xkisxk":49}},{"path":"docs/uml/testClassDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"xkisxk"},"content":"@startuml","lastModifiedDate":"2021-10-21"},{"lineNumber":2,"author":{"gitId":"xkisxk"},"content":"hide circle","lastModifiedDate":"2021-10-25"},{"lineNumber":3,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":4,"author":{"gitId":"xkisxk"},"content":"skinparam classAttributeIconSize 0","lastModifiedDate":"2021-10-21"},{"lineNumber":5,"author":{"gitId":"xkisxk"},"content":"package testing {","lastModifiedDate":"2021-10-21"},{"lineNumber":6,"author":{"gitId":"xkisxk"},"content":"    class TestManager","lastModifiedDate":"2021-10-21"},{"lineNumber":7,"author":{"gitId":"xkisxk"},"content":"    class AnswerList","lastModifiedDate":"2021-10-21"},{"lineNumber":8,"author":{"gitId":"xkisxk"},"content":"    class Answer","lastModifiedDate":"2021-10-21"},{"lineNumber":9,"author":{"gitId":"xkisxk"},"content":"    class TestHistory","lastModifiedDate":"2021-10-21"},{"lineNumber":10,"author":{"gitId":"xkisxk"},"content":"}","lastModifiedDate":"2021-10-21"},{"lineNumber":11,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":12,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":13,"author":{"gitId":"xkisxk"},"content":"package parser {","lastModifiedDate":"2021-10-21"},{"lineNumber":14,"author":{"gitId":"xkisxk"},"content":"    class TestParser","lastModifiedDate":"2021-10-21"},{"lineNumber":15,"author":{"gitId":"xkisxk"},"content":"}","lastModifiedDate":"2021-10-21"},{"lineNumber":16,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":17,"author":{"gitId":"xkisxk"},"content":"package ui {","lastModifiedDate":"2021-10-21"},{"lineNumber":18,"author":{"gitId":"xkisxk"},"content":"    class TestUi","lastModifiedDate":"2021-10-21"},{"lineNumber":19,"author":{"gitId":"xkisxk"},"content":"}","lastModifiedDate":"2021-10-21"},{"lineNumber":20,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":21,"author":{"gitId":"xkisxk"},"content":"package flashcard {","lastModifiedDate":"2021-10-21"},{"lineNumber":22,"author":{"gitId":"xkisxk"},"content":"    class Deck","lastModifiedDate":"2021-10-21"},{"lineNumber":23,"author":{"gitId":"xkisxk"},"content":"    class FlashCard","lastModifiedDate":"2021-10-21"},{"lineNumber":24,"author":{"gitId":"xkisxk"},"content":"}","lastModifiedDate":"2021-10-21"},{"lineNumber":25,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":26,"author":{"gitId":"xkisxk"},"content":"TestManager -left\u003e \"1\" TestUi","lastModifiedDate":"2021-10-21"},{"lineNumber":27,"author":{"gitId":"xkisxk"},"content":"TestManager .right\u003e \"1\" TestParser","lastModifiedDate":"2021-10-21"},{"lineNumber":28,"author":{"gitId":"xkisxk"},"content":"TestManager --\u003e \"1\" AnswerList : creates","lastModifiedDate":"2021-10-21"},{"lineNumber":29,"author":{"gitId":"xkisxk"},"content":"TestManager .left\u003e TestHistory","lastModifiedDate":"2021-10-21"},{"lineNumber":30,"author":{"gitId":"xkisxk"},"content":"TestManager .\u003e \"1\" Deck","lastModifiedDate":"2021-10-21"},{"lineNumber":31,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":32,"author":{"gitId":"xkisxk"},"content":"TestHistory --\u003e \"*\" AnswerList : stores","lastModifiedDate":"2021-10-21"},{"lineNumber":33,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":34,"author":{"gitId":"xkisxk"},"content":"AnswerList \"1\" --\u003e \"*\" Answer : contains","lastModifiedDate":"2021-10-21"},{"lineNumber":35,"author":{"gitId":"xkisxk"},"content":"AnswerList -right-\u003e \"1\" Deck","lastModifiedDate":"2021-10-21"},{"lineNumber":36,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":37,"author":{"gitId":"xkisxk"},"content":"Deck --\u003e \"*\" FlashCard","lastModifiedDate":"2021-10-21"},{"lineNumber":38,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":39,"author":{"gitId":"xkisxk"},"content":"Answer .\u003e \"1\" FlashCard","lastModifiedDate":"2021-10-21"},{"lineNumber":40,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":41,"author":{"gitId":"xkisxk"},"content":"@enduml","lastModifiedDate":"2021-10-21"}],"authorContributionMap":{"xkisxk":41}},{"path":"docs/uml/testInProgressSeqDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"xkisxk"},"content":"@startuml","lastModifiedDate":"2021-11-03"},{"lineNumber":2,"author":{"gitId":"xkisxk"},"content":"participant \":TestManager\" as TestManager","lastModifiedDate":"2021-11-03"},{"lineNumber":3,"author":{"gitId":"xkisxk"},"content":"activate TestManager","lastModifiedDate":"2021-11-03"},{"lineNumber":4,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":5,"author":{"gitId":"xkisxk"},"content":"TestManager -\u003e TestManager : testInProgress(shuffledDeckToTest, userAnswers)","lastModifiedDate":"2021-11-03"},{"lineNumber":6,"author":{"gitId":"xkisxk"},"content":"activate TestManager","lastModifiedDate":"2021-11-03"},{"lineNumber":7,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":8,"author":{"gitId":"xkisxk"},"content":"loop until every card in deckToTest is answered","lastModifiedDate":"2021-11-03"},{"lineNumber":9,"author":{"gitId":"xkisxk"},"content":"loop currentQuestion \u003e\u003d 0 \u0026\u0026 currentQuestion \u003c deckReplicate.size()","lastModifiedDate":"2021-11-03"},{"lineNumber":10,"author":{"gitId":"xkisxk"},"content":"alt current question is not answered","lastModifiedDate":"2021-11-03"},{"lineNumber":11,"author":{"gitId":"xkisxk"},"content":"TestManager -\u003e TestManager : testCard(userAnswer, currentQuestion:FlashCard)","lastModifiedDate":"2021-11-03"},{"lineNumber":12,"author":{"gitId":"xkisxk"},"content":"activate TestManager","lastModifiedDate":"2021-11-03"},{"lineNumber":13,"author":{"gitId":"xkisxk"},"content":"TestManager --\u003e TestManager : nextQuestionFlag:Int","lastModifiedDate":"2021-11-03"},{"lineNumber":14,"author":{"gitId":"xkisxk"},"content":"deactivate TestManager","lastModifiedDate":"2021-11-03"},{"lineNumber":15,"author":{"gitId":"xkisxk"},"content":"end","lastModifiedDate":"2021-11-03"},{"lineNumber":16,"author":{"gitId":"xkisxk"},"content":"end","lastModifiedDate":"2021-11-03"},{"lineNumber":17,"author":{"gitId":"xkisxk"},"content":"end","lastModifiedDate":"2021-11-03"},{"lineNumber":18,"author":{"gitId":"xkisxk"},"content":"TestManager --\u003e TestManager","lastModifiedDate":"2021-11-03"},{"lineNumber":19,"author":{"gitId":"xkisxk"},"content":"deactivate TestManager","lastModifiedDate":"2021-11-03"},{"lineNumber":20,"author":{"gitId":"xkisxk"},"content":"@enduml","lastModifiedDate":"2021-11-03"}],"authorContributionMap":{"xkisxk":20}},{"path":"docs/uml/writeToFileSeqDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"xRossKoh"},"content":"@startuml","lastModifiedDate":"2021-11-07"},{"lineNumber":2,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":3,"author":{"gitId":"xRossKoh"},"content":"!include style.puml","lastModifiedDate":"2021-11-07"},{"lineNumber":4,"author":{"gitId":"xRossKoh"},"content":"hide footbox","lastModifiedDate":"2021-11-07"},{"lineNumber":5,"author":{"gitId":"xRossKoh"},"content":"autonumber","lastModifiedDate":"2021-11-07"},{"lineNumber":6,"author":{"gitId":"xRossKoh"},"content":"participant \": Storage\" as Storage storageCOLOUR","lastModifiedDate":"2021-11-07"},{"lineNumber":7,"author":{"gitId":"xRossKoh"},"content":"participant \"fileWriter: FileWriter\" as File storageCOLOUR","lastModifiedDate":"2021-11-07"},{"lineNumber":8,"author":{"gitId":"xRossKoh"},"content":"participant \"jsonDecks / jsonTestHistory:\\n JSONArray\" as JSON","lastModifiedDate":"2021-11-07"},{"lineNumber":9,"author":{"gitId":"xRossKoh"},"content":"participant \"deck: Deck /\\nanswerList: AnswerList\" as Object","lastModifiedDate":"2021-11-07"},{"lineNumber":10,"author":{"gitId":"xRossKoh"},"content":"[-\u003e Storage: writeCardsToFile\\n(decks: ArrayList\u003cDeck\u003e) /\\nwriteTestsToFile\\n(testHistory: ArrayList\u003cAnswerList\u003e)","lastModifiedDate":"2021-11-07"},{"lineNumber":11,"author":{"gitId":"xRossKoh"},"content":"activate Storage","lastModifiedDate":"2021-11-07"},{"lineNumber":12,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":13,"author":{"gitId":"xRossKoh"},"content":"Storage -\u003e File **: FileWriter(filepath: String, append: boolean)","lastModifiedDate":"2021-11-07"},{"lineNumber":14,"author":{"gitId":"xRossKoh"},"content":"activate File","lastModifiedDate":"2021-11-07"},{"lineNumber":15,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":16,"author":{"gitId":"xRossKoh"},"content":"File --\u003e Storage","lastModifiedDate":"2021-11-07"},{"lineNumber":17,"author":{"gitId":"xRossKoh"},"content":"deactivate File","lastModifiedDate":"2021-11-07"},{"lineNumber":18,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":19,"author":{"gitId":"xRossKoh"},"content":"Storage-\u003eJSON**: new JSONArray()","lastModifiedDate":"2021-11-07"},{"lineNumber":20,"author":{"gitId":"xRossKoh"},"content":"activate JSON","lastModifiedDate":"2021-11-07"},{"lineNumber":21,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":22,"author":{"gitId":"xRossKoh"},"content":"Storage\u003c--JSON","lastModifiedDate":"2021-11-07"},{"lineNumber":23,"author":{"gitId":"xRossKoh"},"content":"deactivate JSON","lastModifiedDate":"2021-11-07"},{"lineNumber":24,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":25,"author":{"gitId":"xRossKoh"},"content":"loop deck in decks/answerList in testHistory","lastModifiedDate":"2021-11-07"},{"lineNumber":26,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":27,"author":{"gitId":"xRossKoh"},"content":"Storage-\u003eObject: toJSONObject()","lastModifiedDate":"2021-11-07"},{"lineNumber":28,"author":{"gitId":"xRossKoh"},"content":"activate Object","lastModifiedDate":"2021-11-07"},{"lineNumber":29,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":30,"author":{"gitId":"xRossKoh"},"content":"Storage\u003c--Object: jsonDeck / jsonAnswerList: JSONObject","lastModifiedDate":"2021-11-07"},{"lineNumber":31,"author":{"gitId":"xRossKoh"},"content":"destroy Object","lastModifiedDate":"2021-11-07"},{"lineNumber":32,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":33,"author":{"gitId":"xRossKoh"},"content":"Storage-\u003eJSON: add(jsonDeck / jsonAnswerList)","lastModifiedDate":"2021-11-07"},{"lineNumber":34,"author":{"gitId":"xRossKoh"},"content":"activate JSON","lastModifiedDate":"2021-11-07"},{"lineNumber":35,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":36,"author":{"gitId":"xRossKoh"},"content":"Storage\u003c--JSON","lastModifiedDate":"2021-11-07"},{"lineNumber":37,"author":{"gitId":"xRossKoh"},"content":"destroy JSON","lastModifiedDate":"2021-11-07"},{"lineNumber":38,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":39,"author":{"gitId":"xRossKoh"},"content":"end","lastModifiedDate":"2021-11-07"},{"lineNumber":40,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":41,"author":{"gitId":"xRossKoh"},"content":"Storage-\u003eFile: write(jsonDecks / jsonTestHistory)","lastModifiedDate":"2021-11-07"},{"lineNumber":42,"author":{"gitId":"xRossKoh"},"content":"activate File","lastModifiedDate":"2021-11-07"},{"lineNumber":43,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":44,"author":{"gitId":"xRossKoh"},"content":"File --\u003e Storage","lastModifiedDate":"2021-11-07"},{"lineNumber":45,"author":{"gitId":"xRossKoh"},"content":"deactivate File","lastModifiedDate":"2021-11-07"},{"lineNumber":46,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":47,"author":{"gitId":"xRossKoh"},"content":"Storage-\u003eFile: close()","lastModifiedDate":"2021-11-07"},{"lineNumber":48,"author":{"gitId":"xRossKoh"},"content":"activate File","lastModifiedDate":"2021-11-07"},{"lineNumber":49,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":50,"author":{"gitId":"xRossKoh"},"content":"File --\u003e Storage","lastModifiedDate":"2021-11-07"},{"lineNumber":51,"author":{"gitId":"xRossKoh"},"content":"destroy File","lastModifiedDate":"2021-11-07"},{"lineNumber":52,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":53,"author":{"gitId":"xRossKoh"},"content":"[\u003c-- Storage","lastModifiedDate":"2021-11-07"},{"lineNumber":54,"author":{"gitId":"xRossKoh"},"content":"destroy Storage","lastModifiedDate":"2021-11-07"},{"lineNumber":55,"author":{"gitId":"xRossKoh"},"content":"@enduml","lastModifiedDate":"2021-11-07"}],"authorContributionMap":{"xRossKoh":55}},{"path":"src/main/java/seedu/cardli/CardLI.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"xRossKoh"},"content":"package seedu.cardli;","lastModifiedDate":"2021-10-26"},{"lineNumber":2,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":3,"author":{"gitId":"JWweiyin"},"content":"import org.json.simple.JSONObject;","lastModifiedDate":"2021-11-02"},{"lineNumber":4,"author":{"gitId":"JWweiyin"},"content":"import org.json.simple.parser.JSONParser;","lastModifiedDate":"2021-11-02"},{"lineNumber":5,"author":{"gitId":"JWweiyin"},"content":"import org.json.simple.parser.ParseException;","lastModifiedDate":"2021-11-02"},{"lineNumber":6,"author":{"gitId":"astralum"},"content":"import org.fusesource.jansi.AnsiConsole;","lastModifiedDate":"2021-10-26"},{"lineNumber":7,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.commands.Command;","lastModifiedDate":"2021-10-26"},{"lineNumber":8,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.commands.CommandResult;","lastModifiedDate":"2021-10-26"},{"lineNumber":9,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.flashcard.Deck;","lastModifiedDate":"2021-10-26"},{"lineNumber":10,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.flashcard.DeckManager;","lastModifiedDate":"2021-10-26"},{"lineNumber":11,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.parser.InnerParser;","lastModifiedDate":"2021-10-26"},{"lineNumber":12,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.parser.OuterParser;","lastModifiedDate":"2021-10-26"},{"lineNumber":13,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.storage.Storage;","lastModifiedDate":"2021-10-26"},{"lineNumber":14,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.testing.TestHistory;","lastModifiedDate":"2021-10-26"},{"lineNumber":15,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.testing.TestManager;","lastModifiedDate":"2021-10-26"},{"lineNumber":16,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.ui.CardLiUi;","lastModifiedDate":"2021-10-26"},{"lineNumber":17,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":18,"author":{"gitId":"astralum"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-21"},{"lineNumber":19,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":20,"author":{"gitId":"xRossKoh"},"content":"/**","lastModifiedDate":"2021-10-06"},{"lineNumber":21,"author":{"gitId":"xRossKoh"},"content":" * Represents CardLI application.","lastModifiedDate":"2021-10-06"},{"lineNumber":22,"author":{"gitId":"xRossKoh"},"content":" */","lastModifiedDate":"2021-10-06"},{"lineNumber":23,"author":{"gitId":"xRossKoh"},"content":"public class CardLI {","lastModifiedDate":"2021-10-26"},{"lineNumber":24,"author":{"gitId":"xkisxk"},"content":"    private static final CardLiUi ui \u003d new CardLiUi();","lastModifiedDate":"2021-10-02"},{"lineNumber":25,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":26,"author":{"gitId":"astralum"},"content":"    private ArrayList\u003cDeck\u003e decks;","lastModifiedDate":"2021-10-21"},{"lineNumber":27,"author":{"gitId":"astralum"},"content":"    private Storage storage;","lastModifiedDate":"2021-10-21"},{"lineNumber":28,"author":{"gitId":"astralum"},"content":"    private DeckManager deckManager;","lastModifiedDate":"2021-10-21"},{"lineNumber":29,"author":{"gitId":"astralum"},"content":"    private TestManager testManager;","lastModifiedDate":"2021-10-21"},{"lineNumber":30,"author":{"gitId":"astralum"},"content":"    private InnerParser innerParser;","lastModifiedDate":"2021-10-21"},{"lineNumber":31,"author":{"gitId":"astralum"},"content":"    private OuterParser outerParser;","lastModifiedDate":"2021-10-21"},{"lineNumber":32,"author":{"gitId":"xkisxk"},"content":"    private TestHistory testHistory;","lastModifiedDate":"2021-10-25"},{"lineNumber":33,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":34,"author":{"gitId":"xRossKoh"},"content":"    private CardLI() {","lastModifiedDate":"2021-10-26"},{"lineNumber":35,"author":{"gitId":"astralum"},"content":"        this.storage \u003d new Storage();","lastModifiedDate":"2021-10-21"},{"lineNumber":36,"author":{"gitId":"xRossKoh"},"content":"        this.decks \u003d storage.readCardsFromFile();","lastModifiedDate":"2021-10-25"},{"lineNumber":37,"author":{"gitId":"astralum"},"content":"        this.deckManager \u003d new DeckManager(decks);","lastModifiedDate":"2021-10-21"},{"lineNumber":38,"author":{"gitId":"xRossKoh"},"content":"        this.testHistory \u003d new TestHistory(deckManager, storage.readTestsFromFile());","lastModifiedDate":"2021-10-25"},{"lineNumber":39,"author":{"gitId":"xkisxk"},"content":"        this.testManager \u003d new TestManager(testHistory, deckManager);","lastModifiedDate":"2021-10-25"},{"lineNumber":40,"author":{"gitId":"astralum"},"content":"        this.innerParser \u003d new InnerParser();","lastModifiedDate":"2021-10-21"},{"lineNumber":41,"author":{"gitId":"xkisxk"},"content":"        this.outerParser \u003d new OuterParser(deckManager, innerParser, testHistory, testManager);","lastModifiedDate":"2021-11-03"},{"lineNumber":42,"author":{"gitId":"astralum"},"content":"        AnsiConsole.systemInstall();","lastModifiedDate":"2021-10-26"},{"lineNumber":43,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":44,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-24"},{"lineNumber":46,"author":{"gitId":"astralum"},"content":"     * Main function that runs the java.duke.Duke application.","lastModifiedDate":"2021-10-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-24"},{"lineNumber":48,"author":{"gitId":"astralum"},"content":"    public void run() {","lastModifiedDate":"2021-10-21"},{"lineNumber":49,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":50,"author":{"gitId":"xkisxk"},"content":"        ui.printGreetingMessage();","lastModifiedDate":"2021-10-02"},{"lineNumber":51,"author":{"gitId":"xkisxk"},"content":"        boolean exitProgram \u003d false;","lastModifiedDate":"2021-10-16"},{"lineNumber":52,"author":{"gitId":"JWweiyin"},"content":"        boolean inDeck;","lastModifiedDate":"2021-10-20"},{"lineNumber":53,"author":{"gitId":"xkisxk"},"content":"        boolean inReview;","lastModifiedDate":"2021-10-25"},{"lineNumber":54,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":55,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":56,"author":{"gitId":"astralum"},"content":"        while (!exitProgram) {","lastModifiedDate":"2021-10-21"},{"lineNumber":57,"author":{"gitId":"astralum"},"content":"            String input \u003d ui.getUserMessage();","lastModifiedDate":"2021-10-21"},{"lineNumber":58,"author":{"gitId":"astralum"},"content":"            Command command \u003d outerParser.parseCommand(input);","lastModifiedDate":"2021-10-21"},{"lineNumber":59,"author":{"gitId":"astralum"},"content":"            CommandResult result \u003d command.execute();","lastModifiedDate":"2021-10-21"},{"lineNumber":60,"author":{"gitId":"astralum"},"content":"            ui.printResult(result);","lastModifiedDate":"2021-10-21"},{"lineNumber":61,"author":{"gitId":"astralum"},"content":"            exitProgram \u003d result.isExit();","lastModifiedDate":"2021-10-21"},{"lineNumber":62,"author":{"gitId":"astralum"},"content":"            inDeck \u003d result.isEnter();","lastModifiedDate":"2021-10-21"},{"lineNumber":63,"author":{"gitId":"astralum"},"content":"            while (inDeck) {","lastModifiedDate":"2021-10-21"},{"lineNumber":64,"author":{"gitId":"astralum"},"content":"                input \u003d ui.getUserMessage();","lastModifiedDate":"2021-10-21"},{"lineNumber":65,"author":{"gitId":"astralum"},"content":"                command \u003d innerParser.parseCommand(input);","lastModifiedDate":"2021-10-21"},{"lineNumber":66,"author":{"gitId":"astralum"},"content":"                result \u003d command.execute();","lastModifiedDate":"2021-10-21"},{"lineNumber":67,"author":{"gitId":"astralum"},"content":"                ui.printResult(result);","lastModifiedDate":"2021-10-21"},{"lineNumber":68,"author":{"gitId":"astralum"},"content":"                inDeck \u003d !result.isExit();","lastModifiedDate":"2021-10-21"},{"lineNumber":69,"author":{"gitId":"JWweiyin"},"content":"                storage.writeCardsToFile(deckManager.getDecks());","lastModifiedDate":"2021-11-02"},{"lineNumber":70,"author":{"gitId":"astralum"},"content":"            }","lastModifiedDate":"2021-10-21"},{"lineNumber":71,"author":{"gitId":"xRossKoh"},"content":"            storage.writeCardsToFile(deckManager.getDecks());","lastModifiedDate":"2021-11-01"},{"lineNumber":72,"author":{"gitId":"xRossKoh"},"content":"            storage.writeTestsToFile(testHistory.getTestHistory());","lastModifiedDate":"2021-11-01"},{"lineNumber":73,"author":{"gitId":"xRossKoh"},"content":"        }","lastModifiedDate":"2021-11-01"},{"lineNumber":74,"author":{"gitId":"astralum"},"content":"        ui.printByeMessage();","lastModifiedDate":"2021-10-21"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":76,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":77,"author":{"gitId":"astralum"},"content":"    /**","lastModifiedDate":"2021-10-21"},{"lineNumber":78,"author":{"gitId":"astralum"},"content":"     * Entry point to the java.duke.Duke application.","lastModifiedDate":"2021-10-21"},{"lineNumber":79,"author":{"gitId":"xkisxk"},"content":"     * @param args user\u0027s input","lastModifiedDate":"2021-10-25"},{"lineNumber":80,"author":{"gitId":"astralum"},"content":"     */","lastModifiedDate":"2021-10-21"},{"lineNumber":81,"author":{"gitId":"astralum"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-10-21"},{"lineNumber":82,"author":{"gitId":"xRossKoh"},"content":"        new CardLI().run();","lastModifiedDate":"2021-10-26"},{"lineNumber":83,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":84,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"JWweiyin":7,"astralum":40,"xRossKoh":22,"xkisxk":11,"-":4}},{"path":"src/main/java/seedu/cardli/commands/Command.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"xRossKoh"},"content":"package seedu.cardli.commands;","lastModifiedDate":"2021-10-26"},{"lineNumber":2,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":3,"author":{"gitId":"astralum"},"content":"public abstract class Command {","lastModifiedDate":"2021-10-21"},{"lineNumber":4,"author":{"gitId":"JWweiyin"},"content":"    protected String name;","lastModifiedDate":"2021-11-06"},{"lineNumber":5,"author":{"gitId":"astralum"},"content":"    protected String arguments;","lastModifiedDate":"2021-10-21"},{"lineNumber":6,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":7,"author":{"gitId":"astralum"},"content":"    public Command(String name, String arguments) {","lastModifiedDate":"2021-10-21"},{"lineNumber":8,"author":{"gitId":"astralum"},"content":"        this.name \u003d name;","lastModifiedDate":"2021-10-21"},{"lineNumber":9,"author":{"gitId":"astralum"},"content":"        this.arguments \u003d arguments;","lastModifiedDate":"2021-10-21"},{"lineNumber":10,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":11,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":12,"author":{"gitId":"astralum"},"content":"    public Command(String name) {","lastModifiedDate":"2021-10-21"},{"lineNumber":13,"author":{"gitId":"astralum"},"content":"        this.name \u003d name;","lastModifiedDate":"2021-10-21"},{"lineNumber":14,"author":{"gitId":"astralum"},"content":"        this.arguments \u003d null;","lastModifiedDate":"2021-10-21"},{"lineNumber":15,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":16,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":17,"author":{"gitId":"astralum"},"content":"    public abstract CommandResult execute();","lastModifiedDate":"2021-10-21"},{"lineNumber":18,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":19,"author":{"gitId":"astralum"},"content":"    @Override","lastModifiedDate":"2021-10-21"},{"lineNumber":20,"author":{"gitId":"astralum"},"content":"    public String toString() {","lastModifiedDate":"2021-10-21"},{"lineNumber":21,"author":{"gitId":"astralum"},"content":"        return this.name;","lastModifiedDate":"2021-10-21"},{"lineNumber":22,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":23,"author":{"gitId":"astralum"},"content":"}","lastModifiedDate":"2021-10-21"}],"authorContributionMap":{"JWweiyin":1,"astralum":21,"xRossKoh":1}},{"path":"src/main/java/seedu/cardli/commands/CommandResult.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"xRossKoh"},"content":"package seedu.cardli.commands;","lastModifiedDate":"2021-10-26"},{"lineNumber":2,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":3,"author":{"gitId":"astralum"},"content":"public class CommandResult {","lastModifiedDate":"2021-10-21"},{"lineNumber":4,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":5,"author":{"gitId":"astralum"},"content":"    private final String result;","lastModifiedDate":"2021-10-21"},{"lineNumber":6,"author":{"gitId":"astralum"},"content":"    private final boolean exit;","lastModifiedDate":"2021-10-21"},{"lineNumber":7,"author":{"gitId":"astralum"},"content":"    private final boolean enter;","lastModifiedDate":"2021-10-21"},{"lineNumber":8,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":9,"author":{"gitId":"astralum"},"content":"    public CommandResult(String result) {","lastModifiedDate":"2021-10-21"},{"lineNumber":10,"author":{"gitId":"astralum"},"content":"        this.result \u003d result;","lastModifiedDate":"2021-10-21"},{"lineNumber":11,"author":{"gitId":"astralum"},"content":"        this.exit \u003d false;","lastModifiedDate":"2021-10-21"},{"lineNumber":12,"author":{"gitId":"astralum"},"content":"        this.enter \u003d false;","lastModifiedDate":"2021-10-21"},{"lineNumber":13,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":14,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":15,"author":{"gitId":"astralum"},"content":"    public CommandResult(String result, boolean exit, boolean enter) {","lastModifiedDate":"2021-10-21"},{"lineNumber":16,"author":{"gitId":"astralum"},"content":"        this.result \u003d result;","lastModifiedDate":"2021-10-21"},{"lineNumber":17,"author":{"gitId":"astralum"},"content":"        this.exit \u003d exit;","lastModifiedDate":"2021-10-21"},{"lineNumber":18,"author":{"gitId":"astralum"},"content":"        this.enter \u003d enter;","lastModifiedDate":"2021-10-21"},{"lineNumber":19,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":20,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":21,"author":{"gitId":"astralum"},"content":"    public String getResult() {","lastModifiedDate":"2021-10-21"},{"lineNumber":22,"author":{"gitId":"astralum"},"content":"        return this.result;","lastModifiedDate":"2021-10-21"},{"lineNumber":23,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":24,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":25,"author":{"gitId":"astralum"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-10-21"},{"lineNumber":26,"author":{"gitId":"astralum"},"content":"        return this.exit;","lastModifiedDate":"2021-10-21"},{"lineNumber":27,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":28,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":29,"author":{"gitId":"astralum"},"content":"    public boolean isEnter() {","lastModifiedDate":"2021-10-21"},{"lineNumber":30,"author":{"gitId":"astralum"},"content":"        return this.enter;","lastModifiedDate":"2021-10-21"},{"lineNumber":31,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":32,"author":{"gitId":"astralum"},"content":"}","lastModifiedDate":"2021-10-21"}],"authorContributionMap":{"astralum":31,"xRossKoh":1}},{"path":"src/main/java/seedu/cardli/commands/InvalidCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"xRossKoh"},"content":"package seedu.cardli.commands;","lastModifiedDate":"2021-10-26"},{"lineNumber":2,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":3,"author":{"gitId":"astralum"},"content":"public class InvalidCommand extends Command {","lastModifiedDate":"2021-10-21"},{"lineNumber":4,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":5,"author":{"gitId":"astralum"},"content":"    public InvalidCommand() {","lastModifiedDate":"2021-10-21"},{"lineNumber":6,"author":{"gitId":"astralum"},"content":"        super(\"InvalidCommand\");","lastModifiedDate":"2021-10-21"},{"lineNumber":7,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":8,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":9,"author":{"gitId":"astralum"},"content":"    @Override","lastModifiedDate":"2021-10-21"},{"lineNumber":10,"author":{"gitId":"astralum"},"content":"    public CommandResult execute() {","lastModifiedDate":"2021-10-21"},{"lineNumber":11,"author":{"gitId":"astralum"},"content":"        return new CommandResult(\"\\tThat\u0027s not a command.\");","lastModifiedDate":"2021-10-21"},{"lineNumber":12,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":13,"author":{"gitId":"astralum"},"content":"}","lastModifiedDate":"2021-10-21"}],"authorContributionMap":{"astralum":12,"xRossKoh":1}},{"path":"src/main/java/seedu/cardli/commands/deck/AddCardCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"xRossKoh"},"content":"package seedu.cardli.commands.deck;","lastModifiedDate":"2021-10-26"},{"lineNumber":2,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":3,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.commands.Command;","lastModifiedDate":"2021-10-26"},{"lineNumber":4,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.commands.CommandResult;","lastModifiedDate":"2021-10-26"},{"lineNumber":5,"author":{"gitId":"JWweiyin"},"content":"import seedu.cardli.exceptions.CardLiException;","lastModifiedDate":"2021-11-06"},{"lineNumber":6,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.exceptions.FieldEmptyException;","lastModifiedDate":"2021-10-26"},{"lineNumber":7,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.flashcard.Deck;","lastModifiedDate":"2021-10-26"},{"lineNumber":8,"author":{"gitId":"JWweiyin"},"content":"import seedu.cardli.flashcard.DeckManager;","lastModifiedDate":"2021-11-06"},{"lineNumber":9,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.parser.deck.AddCardParser;","lastModifiedDate":"2021-10-26"},{"lineNumber":10,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":11,"author":{"gitId":"astralum"},"content":"public class AddCardCommand extends Command {","lastModifiedDate":"2021-10-21"},{"lineNumber":12,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":13,"author":{"gitId":"astralum"},"content":"    private static final String FIELD_EMPTY_ERROR_MESSAGE \u003d \"You cannot leave any field empty! \"","lastModifiedDate":"2021-10-21"},{"lineNumber":14,"author":{"gitId":"astralum"},"content":"            + \"Format should be\\n add /f \u003cwords on front\u003e /b \u003cwords on back\u003e\";","lastModifiedDate":"2021-10-21"},{"lineNumber":15,"author":{"gitId":"astralum"},"content":"    private static final String WRONG_ORDER_ERROR_MESSAGE \u003d \"Incorrect add command! Format should be\\n\"","lastModifiedDate":"2021-10-21"},{"lineNumber":16,"author":{"gitId":"astralum"},"content":"            + \"add /f \u003cfront\u003e /b \u003cback\u003e\";","lastModifiedDate":"2021-10-21"},{"lineNumber":17,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":18,"author":{"gitId":"astralum"},"content":"    private AddCardParser parser;","lastModifiedDate":"2021-10-21"},{"lineNumber":19,"author":{"gitId":"astralum"},"content":"    private Deck deck;","lastModifiedDate":"2021-10-21"},{"lineNumber":20,"author":{"gitId":"JWweiyin"},"content":"    private DeckManager deckManager;","lastModifiedDate":"2021-11-06"},{"lineNumber":21,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":22,"author":{"gitId":"JWweiyin"},"content":"    public AddCardCommand(String arguments, Deck deck, DeckManager deckManager) {","lastModifiedDate":"2021-11-06"},{"lineNumber":23,"author":{"gitId":"astralum"},"content":"        super(\"AddCardCommand\", arguments);","lastModifiedDate":"2021-10-21"},{"lineNumber":24,"author":{"gitId":"astralum"},"content":"        this.deck \u003d deck;","lastModifiedDate":"2021-10-21"},{"lineNumber":25,"author":{"gitId":"JWweiyin"},"content":"        this.deckManager \u003d deckManager;","lastModifiedDate":"2021-11-06"},{"lineNumber":26,"author":{"gitId":"astralum"},"content":"        this.parser \u003d new AddCardParser();","lastModifiedDate":"2021-10-21"},{"lineNumber":27,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":28,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":29,"author":{"gitId":"JWweiyin"},"content":"    //@@author JWweiyin","lastModifiedDate":"2021-11-06"},{"lineNumber":30,"author":{"gitId":"JWweiyin"},"content":"    @Override","lastModifiedDate":"2021-10-21"},{"lineNumber":31,"author":{"gitId":"JWweiyin"},"content":"    public CommandResult execute() {","lastModifiedDate":"2021-10-21"},{"lineNumber":32,"author":{"gitId":"JWweiyin"},"content":"        CommandResult result;","lastModifiedDate":"2021-10-21"},{"lineNumber":33,"author":{"gitId":"JWweiyin"},"content":"        try {","lastModifiedDate":"2021-10-21"},{"lineNumber":34,"author":{"gitId":"JWweiyin"},"content":"            if (!arguments.toLowerCase().contains(\"/f\") || !arguments.toLowerCase().contains(\"/b\")) {","lastModifiedDate":"2021-10-21"},{"lineNumber":35,"author":{"gitId":"JWweiyin"},"content":"                throw new FieldEmptyException(FIELD_EMPTY_ERROR_MESSAGE);","lastModifiedDate":"2021-10-21"},{"lineNumber":36,"author":{"gitId":"JWweiyin"},"content":"            }","lastModifiedDate":"2021-10-21"},{"lineNumber":37,"author":{"gitId":"JWweiyin"},"content":"            String[] rawParameters \u003d parser.parseArguments(super.arguments);","lastModifiedDate":"2021-10-23"},{"lineNumber":38,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":39,"author":{"gitId":"JWweiyin"},"content":"            if (rawParameters.length \u003c 3) {","lastModifiedDate":"2021-10-28"},{"lineNumber":40,"author":{"gitId":"JWweiyin"},"content":"                throw new FieldEmptyException(FIELD_EMPTY_ERROR_MESSAGE);","lastModifiedDate":"2021-10-23"},{"lineNumber":41,"author":{"gitId":"JWweiyin"},"content":"            }","lastModifiedDate":"2021-10-23"},{"lineNumber":42,"author":{"gitId":"JWweiyin"},"content":"            ","lastModifiedDate":"2021-10-23"},{"lineNumber":43,"author":{"gitId":"JWweiyin"},"content":"            String front \u003d \"\";","lastModifiedDate":"2021-10-28"},{"lineNumber":44,"author":{"gitId":"JWweiyin"},"content":"            String back \u003d \"\";","lastModifiedDate":"2021-10-28"},{"lineNumber":45,"author":{"gitId":"JWweiyin"},"content":"            if (arguments.indexOf(\"/f\") \u003c arguments.indexOf(\"/b\")) {","lastModifiedDate":"2021-10-28"},{"lineNumber":46,"author":{"gitId":"JWweiyin"},"content":"                front \u003d rawParameters[1].trim();","lastModifiedDate":"2021-10-28"},{"lineNumber":47,"author":{"gitId":"JWweiyin"},"content":"                back \u003d rawParameters[2].trim();","lastModifiedDate":"2021-10-28"},{"lineNumber":48,"author":{"gitId":"JWweiyin"},"content":"            } else if (arguments.indexOf(\"/b\") \u003c arguments.indexOf(\"/f\")) {","lastModifiedDate":"2021-10-28"},{"lineNumber":49,"author":{"gitId":"JWweiyin"},"content":"                back \u003d rawParameters[1].trim();","lastModifiedDate":"2021-10-28"},{"lineNumber":50,"author":{"gitId":"JWweiyin"},"content":"                front \u003d rawParameters[2].trim();","lastModifiedDate":"2021-10-28"},{"lineNumber":51,"author":{"gitId":"JWweiyin"},"content":"            }","lastModifiedDate":"2021-10-21"},{"lineNumber":52,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":53,"author":{"gitId":"JWweiyin"},"content":"            String deckWithSameNameCard \u003d deckManager.cardHasSameName(front);","lastModifiedDate":"2021-11-06"},{"lineNumber":54,"author":{"gitId":"JWweiyin"},"content":"            if (!deckWithSameNameCard.isEmpty()) {","lastModifiedDate":"2021-11-06"},{"lineNumber":55,"author":{"gitId":"JWweiyin"},"content":"                throw new CardLiException(\"There is already a card with \" + front + \" on the front in deck \"","lastModifiedDate":"2021-11-06"},{"lineNumber":56,"author":{"gitId":"JWweiyin"},"content":"                        + deckWithSameNameCard + \".\");","lastModifiedDate":"2021-11-06"},{"lineNumber":57,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":58,"author":{"gitId":"JWweiyin"},"content":"            }","lastModifiedDate":"2021-11-06"},{"lineNumber":59,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":60,"author":{"gitId":"JWweiyin"},"content":"            if (front.isEmpty() || back.isEmpty()) {","lastModifiedDate":"2021-10-21"},{"lineNumber":61,"author":{"gitId":"JWweiyin"},"content":"                throw new FieldEmptyException(FIELD_EMPTY_ERROR_MESSAGE);","lastModifiedDate":"2021-10-21"},{"lineNumber":62,"author":{"gitId":"JWweiyin"},"content":"            }","lastModifiedDate":"2021-10-21"},{"lineNumber":63,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":64,"author":{"gitId":"JWweiyin"},"content":"            String[] parameters \u003d {front, back};","lastModifiedDate":"2021-10-23"},{"lineNumber":65,"author":{"gitId":"JWweiyin"},"content":"            result \u003d new CommandResult(deck.prepareToAddFlashCard(parameters));","lastModifiedDate":"2021-10-21"},{"lineNumber":66,"author":{"gitId":"JWweiyin"},"content":"        } catch (CardLiException e) {","lastModifiedDate":"2021-11-06"},{"lineNumber":67,"author":{"gitId":"JWweiyin"},"content":"            result \u003d new CommandResult(e.getMessage());","lastModifiedDate":"2021-10-21"},{"lineNumber":68,"author":{"gitId":"JWweiyin"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":69,"author":{"gitId":"JWweiyin"},"content":"        return result;","lastModifiedDate":"2021-10-21"},{"lineNumber":70,"author":{"gitId":"JWweiyin"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":71,"author":{"gitId":"JWweiyin"},"content":"}","lastModifiedDate":"2021-10-21"}],"authorContributionMap":{"JWweiyin":48,"astralum":17,"xRossKoh":6}},{"path":"src/main/java/seedu/cardli/commands/deck/DeleteCardCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"xRossKoh"},"content":"package seedu.cardli.commands.deck;","lastModifiedDate":"2021-10-26"},{"lineNumber":2,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":3,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.commands.Command;","lastModifiedDate":"2021-10-26"},{"lineNumber":4,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.commands.CommandResult;","lastModifiedDate":"2021-10-26"},{"lineNumber":5,"author":{"gitId":"JWweiyin"},"content":"import seedu.cardli.exceptions.CardLiException;","lastModifiedDate":"2021-11-01"},{"lineNumber":6,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.exceptions.FieldEmptyException;","lastModifiedDate":"2021-10-26"},{"lineNumber":7,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.flashcard.Deck;","lastModifiedDate":"2021-10-26"},{"lineNumber":8,"author":{"gitId":"JWweiyin"},"content":"import seedu.cardli.parser.Parser;","lastModifiedDate":"2021-11-01"},{"lineNumber":9,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.parser.deck.DeleteCardParser;","lastModifiedDate":"2021-10-26"},{"lineNumber":10,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":11,"author":{"gitId":"astralum"},"content":"public class DeleteCardCommand extends Command {","lastModifiedDate":"2021-10-21"},{"lineNumber":12,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":13,"author":{"gitId":"astralum"},"content":"    private static final String FIELD_EMPTY_ERROR_MESSAGE \u003d \"You cannot leave any field empty! \"","lastModifiedDate":"2021-10-23"},{"lineNumber":14,"author":{"gitId":"JWweiyin"},"content":"            + \"Format should be\\n delete \u003cindex\u003e\";","lastModifiedDate":"2021-11-01"},{"lineNumber":15,"author":{"gitId":"JWweiyin"},"content":"    public static final String CARD_INDEX_TOO_BIG_MESSAGE \u003d \"Card index must be smaller than 2147483647.\";","lastModifiedDate":"2021-11-02"},{"lineNumber":16,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":17,"author":{"gitId":"astralum"},"content":"    private DeleteCardParser parser;","lastModifiedDate":"2021-10-21"},{"lineNumber":18,"author":{"gitId":"astralum"},"content":"    private Deck deck;","lastModifiedDate":"2021-10-21"},{"lineNumber":19,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":20,"author":{"gitId":"astralum"},"content":"    public DeleteCardCommand(String arguments, Deck deck) {","lastModifiedDate":"2021-10-21"},{"lineNumber":21,"author":{"gitId":"astralum"},"content":"        super(\"DeleteCardCommand\", arguments);","lastModifiedDate":"2021-10-21"},{"lineNumber":22,"author":{"gitId":"astralum"},"content":"        this.parser \u003d new DeleteCardParser();","lastModifiedDate":"2021-10-21"},{"lineNumber":23,"author":{"gitId":"astralum"},"content":"        this.deck \u003d deck;","lastModifiedDate":"2021-10-21"},{"lineNumber":24,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":25,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":26,"author":{"gitId":"astralum"},"content":"    @Override","lastModifiedDate":"2021-10-21"},{"lineNumber":27,"author":{"gitId":"astralum"},"content":"    public CommandResult execute() {","lastModifiedDate":"2021-10-21"},{"lineNumber":28,"author":{"gitId":"astralum"},"content":"        CommandResult result;","lastModifiedDate":"2021-10-21"},{"lineNumber":29,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":30,"author":{"gitId":"astralum"},"content":"        try {","lastModifiedDate":"2021-10-21"},{"lineNumber":31,"author":{"gitId":"astralum"},"content":"            String[] parameters \u003d parser.parseArguments(super.arguments);","lastModifiedDate":"2021-10-21"},{"lineNumber":32,"author":{"gitId":"astralum"},"content":"            String enterInput \u003d parameters[0];","lastModifiedDate":"2021-10-21"},{"lineNumber":33,"author":{"gitId":"astralum"},"content":"            if (enterInput.isEmpty()) {","lastModifiedDate":"2021-10-21"},{"lineNumber":34,"author":{"gitId":"astralum"},"content":"                throw new FieldEmptyException(FIELD_EMPTY_ERROR_MESSAGE);","lastModifiedDate":"2021-10-21"},{"lineNumber":35,"author":{"gitId":"astralum"},"content":"            }","lastModifiedDate":"2021-10-21"},{"lineNumber":36,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":37,"author":{"gitId":"JWweiyin"},"content":"            if (Parser.isInteger(enterInput)) {","lastModifiedDate":"2021-11-01"},{"lineNumber":38,"author":{"gitId":"JWweiyin"},"content":"                result \u003d new CommandResult(deck.deleteFlashCardByIndex(enterInput));","lastModifiedDate":"2021-11-01"},{"lineNumber":39,"author":{"gitId":"JWweiyin"},"content":"            } else {","lastModifiedDate":"2021-11-01"},{"lineNumber":40,"author":{"gitId":"JWweiyin"},"content":"                throw new CardLiException(\"Please enter an integer.\");","lastModifiedDate":"2021-11-01"},{"lineNumber":41,"author":{"gitId":"JWweiyin"},"content":"            }","lastModifiedDate":"2021-11-01"},{"lineNumber":42,"author":{"gitId":"JWweiyin"},"content":"        } catch (CardLiException e) {","lastModifiedDate":"2021-11-01"},{"lineNumber":43,"author":{"gitId":"astralum"},"content":"            result \u003d new CommandResult(e.getMessage());","lastModifiedDate":"2021-10-21"},{"lineNumber":44,"author":{"gitId":"JWweiyin"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2021-11-01"},{"lineNumber":45,"author":{"gitId":"JWweiyin"},"content":"            result \u003d new CommandResult(CARD_INDEX_TOO_BIG_MESSAGE);","lastModifiedDate":"2021-11-02"},{"lineNumber":46,"author":{"gitId":"astralum"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":47,"author":{"gitId":"astralum"},"content":"        return result;","lastModifiedDate":"2021-10-21"},{"lineNumber":48,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":49,"author":{"gitId":"astralum"},"content":"}","lastModifiedDate":"2021-10-21"}],"authorContributionMap":{"JWweiyin":13,"astralum":30,"xRossKoh":6}},{"path":"src/main/java/seedu/cardli/commands/deck/EditCardCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ThaddeusLim99"},"content":"//@@author ThaddeusLim99","lastModifiedDate":"2021-11-06"},{"lineNumber":2,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":3,"author":{"gitId":"ThaddeusLim99"},"content":"package seedu.cardli.commands.deck;","lastModifiedDate":"2021-11-06"},{"lineNumber":4,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":5,"author":{"gitId":"ThaddeusLim99"},"content":"import java.util.logging.Level;","lastModifiedDate":"2021-10-26"},{"lineNumber":6,"author":{"gitId":"ThaddeusLim99"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-10-26"},{"lineNumber":7,"author":{"gitId":"ThaddeusLim99"},"content":"import seedu.cardli.commands.Command;","lastModifiedDate":"2021-10-26"},{"lineNumber":8,"author":{"gitId":"ThaddeusLim99"},"content":"import seedu.cardli.commands.CommandResult;","lastModifiedDate":"2021-10-26"},{"lineNumber":9,"author":{"gitId":"ThaddeusLim99"},"content":"import seedu.cardli.exceptions.CardLiException;","lastModifiedDate":"2021-10-26"},{"lineNumber":10,"author":{"gitId":"ThaddeusLim99"},"content":"import seedu.cardli.exceptions.FieldEmptyException;","lastModifiedDate":"2021-10-26"},{"lineNumber":11,"author":{"gitId":"ThaddeusLim99"},"content":"import seedu.cardli.exceptions.InvalidCommandFormatException;","lastModifiedDate":"2021-10-26"},{"lineNumber":12,"author":{"gitId":"ThaddeusLim99"},"content":"import seedu.cardli.flashcard.Deck;","lastModifiedDate":"2021-10-26"},{"lineNumber":13,"author":{"gitId":"ThaddeusLim99"},"content":"import seedu.cardli.flashcard.DeckManager;","lastModifiedDate":"2021-11-06"},{"lineNumber":14,"author":{"gitId":"ThaddeusLim99"},"content":"import seedu.cardli.parser.Parser;","lastModifiedDate":"2021-10-26"},{"lineNumber":15,"author":{"gitId":"ThaddeusLim99"},"content":"import seedu.cardli.parser.deck.EditCardParser;","lastModifiedDate":"2021-10-26"},{"lineNumber":16,"author":{"gitId":"ThaddeusLim99"},"content":"import seedu.cardli.testing.TestManager;","lastModifiedDate":"2021-10-26"},{"lineNumber":17,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":18,"author":{"gitId":"ThaddeusLim99"},"content":"public class EditCardCommand extends Command {","lastModifiedDate":"2021-10-21"},{"lineNumber":19,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":20,"author":{"gitId":"ThaddeusLim99"},"content":"    private static final String FIELD_EMPTY_ERROR_MESSAGE \u003d \"You cannot leave any field empty! \"","lastModifiedDate":"2021-10-21"},{"lineNumber":21,"author":{"gitId":"ThaddeusLim99"},"content":"            + \"Format should be\\nedit /c \u003ccard index\u003e /s \u003cside\u003e /i \u003cinput\u003e\";","lastModifiedDate":"2021-11-01"},{"lineNumber":22,"author":{"gitId":"ThaddeusLim99"},"content":"    private static final String WRONG_ORDER_ERROR_MESSAGE \u003d \"/c should come before /s, which should come before /i!\"","lastModifiedDate":"2021-11-01"},{"lineNumber":23,"author":{"gitId":"ThaddeusLim99"},"content":"            + \" Format should be\\nedit /c \u003ccard index\u003e /s \u003cside\u003e /i \u003cinput\u003e\";","lastModifiedDate":"2021-11-01"},{"lineNumber":24,"author":{"gitId":"ThaddeusLim99"},"content":"    private static final String INVALID_INDEX_ERROR_MESSAGE \u003d \"Incorrect index for Card!\";","lastModifiedDate":"2021-10-21"},{"lineNumber":25,"author":{"gitId":"ThaddeusLim99"},"content":"    private static final String INVALID_SIDE_ERROR_MESSAGE \u003d \"What side is this? It\u0027s only either front or back\";","lastModifiedDate":"2021-11-01"},{"lineNumber":26,"author":{"gitId":"ThaddeusLim99"},"content":"    private static final String LARGE_INTEGER_ERROR_MESSAGE \u003d \"Card index must be smaller than 2147483647.\";","lastModifiedDate":"2021-11-03"},{"lineNumber":27,"author":{"gitId":"ThaddeusLim99"},"content":"    private static final String ARGUMENT_TYPE_ERROR_MESSAGE \u003d \"You can only input the index of the card, which is \"","lastModifiedDate":"2021-11-01"},{"lineNumber":28,"author":{"gitId":"ThaddeusLim99"},"content":"            + \"a positive integer!\";","lastModifiedDate":"2021-11-01"},{"lineNumber":29,"author":{"gitId":"ThaddeusLim99"},"content":"    private static final String INVALID_ARGUMENTS_MESSAGE \u003d \"Please use the correct flags and in the correct order! \"","lastModifiedDate":"2021-11-01"},{"lineNumber":30,"author":{"gitId":"ThaddeusLim99"},"content":"            + \"\\nFormat should be edit /c \u003ccard index\u003e /s \u003cside\u003e /i \u003cinput\u003e\";","lastModifiedDate":"2021-11-03"},{"lineNumber":31,"author":{"gitId":"ThaddeusLim99"},"content":"    private static final String FLAG_ARGUMENT_ERROR_MESSAGE \u003d \"You should not use this command\u0027s flag as your argument\";","lastModifiedDate":"2021-11-03"},{"lineNumber":32,"author":{"gitId":"ThaddeusLim99"},"content":"    private static final String MISSING_FLAG_MESSAGE \u003d \"You are missing the relevant flag/flags\";","lastModifiedDate":"2021-11-03"},{"lineNumber":33,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":34,"author":{"gitId":"ThaddeusLim99"},"content":"    private EditCardParser parser;","lastModifiedDate":"2021-10-21"},{"lineNumber":35,"author":{"gitId":"ThaddeusLim99"},"content":"    private Deck deck;","lastModifiedDate":"2021-10-21"},{"lineNumber":36,"author":{"gitId":"ThaddeusLim99"},"content":"    private DeckManager deckManager;","lastModifiedDate":"2021-11-06"},{"lineNumber":37,"author":{"gitId":"ThaddeusLim99"},"content":"    private static Logger logger \u003d Logger.getLogger(TestManager.class.getName());","lastModifiedDate":"2021-10-26"},{"lineNumber":38,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":39,"author":{"gitId":"ThaddeusLim99"},"content":"    public EditCardCommand(String arguments, Deck deck, DeckManager deckManager) {","lastModifiedDate":"2021-11-06"},{"lineNumber":40,"author":{"gitId":"ThaddeusLim99"},"content":"        super(\"EditCardCommand\", arguments);","lastModifiedDate":"2021-10-21"},{"lineNumber":41,"author":{"gitId":"ThaddeusLim99"},"content":"        this.deck \u003d deck;","lastModifiedDate":"2021-10-21"},{"lineNumber":42,"author":{"gitId":"ThaddeusLim99"},"content":"        this.parser \u003d new EditCardParser();","lastModifiedDate":"2021-10-21"},{"lineNumber":43,"author":{"gitId":"ThaddeusLim99"},"content":"        this.deckManager \u003d deckManager;","lastModifiedDate":"2021-11-06"},{"lineNumber":44,"author":{"gitId":"ThaddeusLim99"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":45,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":46,"author":{"gitId":"ThaddeusLim99"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":47,"author":{"gitId":"ThaddeusLim99"},"content":"     * Returns the card index for prepareEditCardCommand as a string.","lastModifiedDate":"2021-11-07"},{"lineNumber":48,"author":{"gitId":"ThaddeusLim99"},"content":"     *","lastModifiedDate":"2021-11-07"},{"lineNumber":49,"author":{"gitId":"ThaddeusLim99"},"content":"     * @return card index.","lastModifiedDate":"2021-11-07"},{"lineNumber":50,"author":{"gitId":"ThaddeusLim99"},"content":"     * @throws NumberFormatException If an integer above 2147483647 is entered by the user as the card index.","lastModifiedDate":"2021-11-07"},{"lineNumber":51,"author":{"gitId":"ThaddeusLim99"},"content":"     * @throws CardLiException If a non-integer is given as index, if the card index given is out of bounds.","lastModifiedDate":"2021-11-07"},{"lineNumber":52,"author":{"gitId":"ThaddeusLim99"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":53,"author":{"gitId":"ThaddeusLim99"},"content":"    public static String prepareCardIndex(String card, Deck deck) throws CardLiException, NumberFormatException {","lastModifiedDate":"2021-11-01"},{"lineNumber":54,"author":{"gitId":"ThaddeusLim99"},"content":"        logger.setLevel(Level.WARNING);","lastModifiedDate":"2021-10-26"},{"lineNumber":55,"author":{"gitId":"ThaddeusLim99"},"content":"        logger.log(Level.INFO, \"preparing Card Index\");","lastModifiedDate":"2021-10-26"},{"lineNumber":56,"author":{"gitId":"ThaddeusLim99"},"content":"        int cardIndex \u003d 0;","lastModifiedDate":"2021-10-26"},{"lineNumber":57,"author":{"gitId":"ThaddeusLim99"},"content":"        if (Parser.isInteger(card)) {","lastModifiedDate":"2021-10-26"},{"lineNumber":58,"author":{"gitId":"ThaddeusLim99"},"content":"            logger.log(Level.INFO, \"checking if integer cardIndex is out of bounds\");","lastModifiedDate":"2021-10-26"},{"lineNumber":59,"author":{"gitId":"ThaddeusLim99"},"content":"            //card is an index","lastModifiedDate":"2021-10-26"},{"lineNumber":60,"author":{"gitId":"ThaddeusLim99"},"content":"            cardIndex \u003d Integer.parseInt(card) - 1;","lastModifiedDate":"2021-10-26"},{"lineNumber":61,"author":{"gitId":"ThaddeusLim99"},"content":"            if (!(cardIndex \u003e\u003d 0 \u0026\u0026 cardIndex \u003c deck.getCards().size())) {","lastModifiedDate":"2021-11-01"},{"lineNumber":62,"author":{"gitId":"ThaddeusLim99"},"content":"                throw new CardLiException(INVALID_INDEX_ERROR_MESSAGE);","lastModifiedDate":"2021-10-26"},{"lineNumber":63,"author":{"gitId":"ThaddeusLim99"},"content":"            }","lastModifiedDate":"2021-10-26"},{"lineNumber":64,"author":{"gitId":"ThaddeusLim99"},"content":"        } else {","lastModifiedDate":"2021-10-26"},{"lineNumber":65,"author":{"gitId":"ThaddeusLim99"},"content":"            throw new CardLiException(ARGUMENT_TYPE_ERROR_MESSAGE);","lastModifiedDate":"2021-11-01"},{"lineNumber":66,"author":{"gitId":"ThaddeusLim99"},"content":"        }","lastModifiedDate":"2021-10-26"},{"lineNumber":67,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":68,"author":{"gitId":"ThaddeusLim99"},"content":"        return card;","lastModifiedDate":"2021-10-26"},{"lineNumber":69,"author":{"gitId":"ThaddeusLim99"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":70,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":71,"author":{"gitId":"ThaddeusLim99"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":72,"author":{"gitId":"ThaddeusLim99"},"content":"     * Returns the arguments for EditCardCommand if accepted.","lastModifiedDate":"2021-11-07"},{"lineNumber":73,"author":{"gitId":"ThaddeusLim99"},"content":"     *","lastModifiedDate":"2021-11-07"},{"lineNumber":74,"author":{"gitId":"ThaddeusLim99"},"content":"     * @return accepted arguments.","lastModifiedDate":"2021-11-07"},{"lineNumber":75,"author":{"gitId":"ThaddeusLim99"},"content":"     * @throws FieldEmptyException If arguments or flags are empty.","lastModifiedDate":"2021-11-07"},{"lineNumber":76,"author":{"gitId":"ThaddeusLim99"},"content":"     * @throws InvalidCommandFormatException If flags are in the wrong position.","lastModifiedDate":"2021-11-07"},{"lineNumber":77,"author":{"gitId":"ThaddeusLim99"},"content":"     * @throws NumberFormatException If an integer above 2147483647 is entered by the user as the card index.","lastModifiedDate":"2021-11-07"},{"lineNumber":78,"author":{"gitId":"ThaddeusLim99"},"content":"     * @throws CardLiException If flags are used as arguments, if a non-integer is given as index,if front or side are","lastModifiedDate":"2021-11-07"},{"lineNumber":79,"author":{"gitId":"ThaddeusLim99"},"content":"     *      not entered as a side.","lastModifiedDate":"2021-11-07"},{"lineNumber":80,"author":{"gitId":"ThaddeusLim99"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":81,"author":{"gitId":"ThaddeusLim99"},"content":"    public String[] prepareEditCardCommand() throws CardLiException, NumberFormatException {","lastModifiedDate":"2021-11-01"},{"lineNumber":82,"author":{"gitId":"ThaddeusLim99"},"content":"        logger.setLevel(Level.WARNING);","lastModifiedDate":"2021-10-26"},{"lineNumber":83,"author":{"gitId":"ThaddeusLim99"},"content":"        logger.log(Level.INFO, \"preparing EditCardCommand\");","lastModifiedDate":"2021-10-26"},{"lineNumber":84,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":85,"author":{"gitId":"ThaddeusLim99"},"content":"        if (arguments.isEmpty()) {","lastModifiedDate":"2021-11-01"},{"lineNumber":86,"author":{"gitId":"ThaddeusLim99"},"content":"            throw new FieldEmptyException(FIELD_EMPTY_ERROR_MESSAGE);","lastModifiedDate":"2021-11-01"},{"lineNumber":87,"author":{"gitId":"ThaddeusLim99"},"content":"        }","lastModifiedDate":"2021-11-01"},{"lineNumber":88,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":89,"author":{"gitId":"ThaddeusLim99"},"content":"        logger.log(Level.INFO, \"Checking if input contains /c, /s and /i\");","lastModifiedDate":"2021-10-26"},{"lineNumber":90,"author":{"gitId":"ThaddeusLim99"},"content":"        if (!arguments.contains(\"/c\") || !arguments.contains(\"/s\")","lastModifiedDate":"2021-11-01"},{"lineNumber":91,"author":{"gitId":"ThaddeusLim99"},"content":"                || !arguments.contains(\"/i\")) {","lastModifiedDate":"2021-11-01"},{"lineNumber":92,"author":{"gitId":"ThaddeusLim99"},"content":"            throw new FieldEmptyException(MISSING_FLAG_MESSAGE);","lastModifiedDate":"2021-11-03"},{"lineNumber":93,"author":{"gitId":"ThaddeusLim99"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":94,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":95,"author":{"gitId":"ThaddeusLim99"},"content":"        logger.log(Level.INFO, \"Checking if /c,/s and /i are in the right order\");","lastModifiedDate":"2021-10-26"},{"lineNumber":96,"author":{"gitId":"ThaddeusLim99"},"content":"        if (!(arguments.indexOf(\"/c\") \u003c arguments.indexOf(\"/s\")","lastModifiedDate":"2021-10-26"},{"lineNumber":97,"author":{"gitId":"ThaddeusLim99"},"content":"                \u0026\u0026 arguments.indexOf(\"/s\") \u003c arguments.indexOf(\"/i\"))) {","lastModifiedDate":"2021-10-26"},{"lineNumber":98,"author":{"gitId":"ThaddeusLim99"},"content":"            throw new InvalidCommandFormatException(WRONG_ORDER_ERROR_MESSAGE);","lastModifiedDate":"2021-10-26"},{"lineNumber":99,"author":{"gitId":"ThaddeusLim99"},"content":"        }","lastModifiedDate":"2021-10-26"},{"lineNumber":100,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":101,"author":{"gitId":"ThaddeusLim99"},"content":"        logger.log(Level.INFO, \"Splitting the input up\");","lastModifiedDate":"2021-10-26"},{"lineNumber":102,"author":{"gitId":"ThaddeusLim99"},"content":"        // \"\", card, side, input ///c \u003c\u003e /s \u003c\u003e /i \u003c\u003e","lastModifiedDate":"2021-11-01"},{"lineNumber":103,"author":{"gitId":"ThaddeusLim99"},"content":"        String[] rawParameters \u003d parser.parseArguments(super.arguments);","lastModifiedDate":"2021-10-23"},{"lineNumber":104,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":105,"author":{"gitId":"ThaddeusLim99"},"content":"        logger.log(Level.INFO, \"Checking if there is enough arguments\");","lastModifiedDate":"2021-10-26"},{"lineNumber":106,"author":{"gitId":"ThaddeusLim99"},"content":"        if (rawParameters.length !\u003d 6) {","lastModifiedDate":"2021-11-01"},{"lineNumber":107,"author":{"gitId":"ThaddeusLim99"},"content":"            throw new FieldEmptyException(FIELD_EMPTY_ERROR_MESSAGE);","lastModifiedDate":"2021-10-23"},{"lineNumber":108,"author":{"gitId":"ThaddeusLim99"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":109,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":110,"author":{"gitId":"ThaddeusLim99"},"content":"        logger.log(Level.INFO, \"Checking if /c,/s and /i are in the right order\");","lastModifiedDate":"2021-11-01"},{"lineNumber":111,"author":{"gitId":"ThaddeusLim99"},"content":"        if (!(rawParameters[0].trim().equals(\"/c\") \u0026\u0026 rawParameters[2].trim().equals(\"/s\")","lastModifiedDate":"2021-11-01"},{"lineNumber":112,"author":{"gitId":"ThaddeusLim99"},"content":"                \u0026\u0026 rawParameters[4].trim().equals(\"/i\"))) {","lastModifiedDate":"2021-11-01"},{"lineNumber":113,"author":{"gitId":"ThaddeusLim99"},"content":"            throw new InvalidCommandFormatException(INVALID_ARGUMENTS_MESSAGE);","lastModifiedDate":"2021-11-01"},{"lineNumber":114,"author":{"gitId":"ThaddeusLim99"},"content":"        }","lastModifiedDate":"2021-11-01"},{"lineNumber":115,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":116,"author":{"gitId":"ThaddeusLim99"},"content":"        String card \u003d rawParameters[1].trim();","lastModifiedDate":"2021-10-26"},{"lineNumber":117,"author":{"gitId":"ThaddeusLim99"},"content":"        String side \u003d rawParameters[3].trim();","lastModifiedDate":"2021-11-01"},{"lineNumber":118,"author":{"gitId":"ThaddeusLim99"},"content":"        String input \u003d rawParameters[5].trim();","lastModifiedDate":"2021-11-01"},{"lineNumber":119,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":120,"author":{"gitId":"ThaddeusLim99"},"content":"        if (side.equalsIgnoreCase(\"front\")) {","lastModifiedDate":"2021-11-06"},{"lineNumber":121,"author":{"gitId":"ThaddeusLim99"},"content":"            String deckWithSameNameCard \u003d deckManager.cardHasSameName(input);","lastModifiedDate":"2021-11-06"},{"lineNumber":122,"author":{"gitId":"ThaddeusLim99"},"content":"            if (!deckWithSameNameCard.isEmpty()) {","lastModifiedDate":"2021-11-06"},{"lineNumber":123,"author":{"gitId":"ThaddeusLim99"},"content":"                throw new CardLiException(\"There is already a card with \" + input + \" on the front in deck \"","lastModifiedDate":"2021-11-06"},{"lineNumber":124,"author":{"gitId":"ThaddeusLim99"},"content":"                        + deckWithSameNameCard + \".\");","lastModifiedDate":"2021-11-06"},{"lineNumber":125,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":126,"author":{"gitId":"ThaddeusLim99"},"content":"            }","lastModifiedDate":"2021-11-06"},{"lineNumber":127,"author":{"gitId":"ThaddeusLim99"},"content":"        }","lastModifiedDate":"2021-11-06"},{"lineNumber":128,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":129,"author":{"gitId":"ThaddeusLim99"},"content":"        logger.log(Level.INFO, \"Checking if any field is empty\");","lastModifiedDate":"2021-10-26"},{"lineNumber":130,"author":{"gitId":"ThaddeusLim99"},"content":"        if (card.isEmpty() || side.isEmpty() || input.isEmpty()) {","lastModifiedDate":"2021-10-21"},{"lineNumber":131,"author":{"gitId":"ThaddeusLim99"},"content":"            throw new FieldEmptyException(FIELD_EMPTY_ERROR_MESSAGE);","lastModifiedDate":"2021-10-21"},{"lineNumber":132,"author":{"gitId":"ThaddeusLim99"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":133,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":134,"author":{"gitId":"ThaddeusLim99"},"content":"        if (input.equalsIgnoreCase(\"/c\") || input.equalsIgnoreCase(\"/s\") || input.equalsIgnoreCase(\"/i\")) {","lastModifiedDate":"2021-11-03"},{"lineNumber":135,"author":{"gitId":"ThaddeusLim99"},"content":"            throw new CardLiException(FLAG_ARGUMENT_ERROR_MESSAGE);","lastModifiedDate":"2021-11-03"},{"lineNumber":136,"author":{"gitId":"ThaddeusLim99"},"content":"        }","lastModifiedDate":"2021-11-03"},{"lineNumber":137,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":138,"author":{"gitId":"ThaddeusLim99"},"content":"        logger.log(Level.INFO, \"checking only front and back inputted to /s\");","lastModifiedDate":"2021-10-26"},{"lineNumber":139,"author":{"gitId":"ThaddeusLim99"},"content":"        if (!(side.equalsIgnoreCase(\"front\") | side.equalsIgnoreCase(\"back\"))) {","lastModifiedDate":"2021-10-26"},{"lineNumber":140,"author":{"gitId":"ThaddeusLim99"},"content":"            throw new CardLiException(INVALID_SIDE_ERROR_MESSAGE);","lastModifiedDate":"2021-10-26"},{"lineNumber":141,"author":{"gitId":"ThaddeusLim99"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":142,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":143,"author":{"gitId":"ThaddeusLim99"},"content":"        logger.log(Level.INFO, \"preparing CardIndex\");","lastModifiedDate":"2021-10-26"},{"lineNumber":144,"author":{"gitId":"ThaddeusLim99"},"content":"        card \u003d prepareCardIndex(card, deck);","lastModifiedDate":"2021-10-26"},{"lineNumber":145,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":146,"author":{"gitId":"ThaddeusLim99"},"content":"        String[] preparedArguments \u003d {card, side, input};","lastModifiedDate":"2021-10-26"},{"lineNumber":147,"author":{"gitId":"ThaddeusLim99"},"content":"        return preparedArguments;","lastModifiedDate":"2021-10-26"},{"lineNumber":148,"author":{"gitId":"ThaddeusLim99"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":149,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":150,"author":{"gitId":"ThaddeusLim99"},"content":"    @Override","lastModifiedDate":"2021-10-26"},{"lineNumber":151,"author":{"gitId":"ThaddeusLim99"},"content":"    public CommandResult execute() { //edit /c \u003cindex\u003e /s \u003cside\u003e /i \u003cinput\u003e","lastModifiedDate":"2021-10-26"},{"lineNumber":152,"author":{"gitId":"ThaddeusLim99"},"content":"        CommandResult result;","lastModifiedDate":"2021-10-26"},{"lineNumber":153,"author":{"gitId":"ThaddeusLim99"},"content":"        try {","lastModifiedDate":"2021-10-26"},{"lineNumber":154,"author":{"gitId":"ThaddeusLim99"},"content":"            String[] parameters \u003d prepareEditCardCommand();","lastModifiedDate":"2021-10-26"},{"lineNumber":155,"author":{"gitId":"ThaddeusLim99"},"content":"            result \u003d new CommandResult(deck.editCard(parameters));","lastModifiedDate":"2021-10-21"},{"lineNumber":156,"author":{"gitId":"ThaddeusLim99"},"content":"        } catch (CardLiException e) {","lastModifiedDate":"2021-10-21"},{"lineNumber":157,"author":{"gitId":"ThaddeusLim99"},"content":"            result \u003d new CommandResult(e.getMessage());","lastModifiedDate":"2021-10-21"},{"lineNumber":158,"author":{"gitId":"ThaddeusLim99"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2021-11-01"},{"lineNumber":159,"author":{"gitId":"ThaddeusLim99"},"content":"            result \u003d new CommandResult(LARGE_INTEGER_ERROR_MESSAGE);","lastModifiedDate":"2021-11-03"},{"lineNumber":160,"author":{"gitId":"ThaddeusLim99"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":161,"author":{"gitId":"ThaddeusLim99"},"content":"        return result;","lastModifiedDate":"2021-10-21"},{"lineNumber":162,"author":{"gitId":"ThaddeusLim99"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":163,"author":{"gitId":"ThaddeusLim99"},"content":"}","lastModifiedDate":"2021-10-21"}],"authorContributionMap":{"ThaddeusLim99":163}},{"path":"src/main/java/seedu/cardli/commands/deck/ExitDeckCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"xRossKoh"},"content":"package seedu.cardli.commands.deck;","lastModifiedDate":"2021-10-26"},{"lineNumber":2,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":3,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.commands.Command;","lastModifiedDate":"2021-10-26"},{"lineNumber":4,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.commands.CommandResult;","lastModifiedDate":"2021-10-26"},{"lineNumber":5,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":6,"author":{"gitId":"astralum"},"content":"public class ExitDeckCommand extends Command {","lastModifiedDate":"2021-10-21"},{"lineNumber":7,"author":{"gitId":"JWweiyin"},"content":"    public ExitDeckCommand(String arguments) {","lastModifiedDate":"2021-11-02"},{"lineNumber":8,"author":{"gitId":"JWweiyin"},"content":"        super(\"ExitDeckCommand\", arguments);","lastModifiedDate":"2021-11-02"},{"lineNumber":9,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":10,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":11,"author":{"gitId":"astralum"},"content":"    @Override","lastModifiedDate":"2021-10-21"},{"lineNumber":12,"author":{"gitId":"astralum"},"content":"    public CommandResult execute() {","lastModifiedDate":"2021-10-21"},{"lineNumber":13,"author":{"gitId":"JWweiyin"},"content":"        if (arguments.length() \u003e 0) {","lastModifiedDate":"2021-11-02"},{"lineNumber":14,"author":{"gitId":"JWweiyin"},"content":"            return new CommandResult(\"There should not be any arguments.\");","lastModifiedDate":"2021-11-02"},{"lineNumber":15,"author":{"gitId":"JWweiyin"},"content":"        }","lastModifiedDate":"2021-11-02"},{"lineNumber":16,"author":{"gitId":"astralum"},"content":"        CommandResult result \u003d new CommandResult(\"Exiting to main menu.\", true, false);","lastModifiedDate":"2021-10-21"},{"lineNumber":17,"author":{"gitId":"astralum"},"content":"        return result;","lastModifiedDate":"2021-10-21"},{"lineNumber":18,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":19,"author":{"gitId":"astralum"},"content":"}","lastModifiedDate":"2021-10-21"}],"authorContributionMap":{"JWweiyin":5,"astralum":11,"xRossKoh":3}},{"path":"src/main/java/seedu/cardli/commands/deck/HelpInDeckCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"astralum"},"content":"//@@author astralum","lastModifiedDate":"2021-11-06"},{"lineNumber":2,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":3,"author":{"gitId":"astralum"},"content":"package seedu.cardli.commands.deck;","lastModifiedDate":"2021-10-26"},{"lineNumber":4,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":5,"author":{"gitId":"astralum"},"content":"import seedu.cardli.commands.Command;","lastModifiedDate":"2021-10-26"},{"lineNumber":6,"author":{"gitId":"astralum"},"content":"import seedu.cardli.commands.CommandResult;","lastModifiedDate":"2021-10-26"},{"lineNumber":7,"author":{"gitId":"astralum"},"content":"import seedu.cardli.ui.CardLiUi;","lastModifiedDate":"2021-10-26"},{"lineNumber":8,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":9,"author":{"gitId":"astralum"},"content":"public class HelpInDeckCommand extends Command {","lastModifiedDate":"2021-10-26"},{"lineNumber":10,"author":{"gitId":"astralum"},"content":"    public HelpInDeckCommand(String arguments) {","lastModifiedDate":"2021-11-03"},{"lineNumber":11,"author":{"gitId":"astralum"},"content":"        super(\"HelpInDeckCommand\", arguments);","lastModifiedDate":"2021-11-03"},{"lineNumber":12,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":13,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":14,"author":{"gitId":"astralum"},"content":"    @Override","lastModifiedDate":"2021-10-26"},{"lineNumber":15,"author":{"gitId":"astralum"},"content":"    public CommandResult execute() {","lastModifiedDate":"2021-10-26"},{"lineNumber":16,"author":{"gitId":"astralum"},"content":"        if (arguments.length() \u003e 0) {","lastModifiedDate":"2021-11-03"},{"lineNumber":17,"author":{"gitId":"astralum"},"content":"            return new CommandResult(\"There should not be any arguments.\");","lastModifiedDate":"2021-11-03"},{"lineNumber":18,"author":{"gitId":"astralum"},"content":"        }","lastModifiedDate":"2021-11-03"},{"lineNumber":19,"author":{"gitId":"astralum"},"content":"        CommandResult result \u003d new CommandResult(CardLiUi.returnHelpInDeckMessage());","lastModifiedDate":"2021-10-26"},{"lineNumber":20,"author":{"gitId":"astralum"},"content":"        return result;","lastModifiedDate":"2021-10-26"},{"lineNumber":21,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":22,"author":{"gitId":"astralum"},"content":"}","lastModifiedDate":"2021-10-26"}],"authorContributionMap":{"astralum":22}},{"path":"src/main/java/seedu/cardli/commands/deck/MoveCardCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JWweiyin"},"content":"package seedu.cardli.commands.deck;","lastModifiedDate":"2021-10-26"},{"lineNumber":2,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":3,"author":{"gitId":"JWweiyin"},"content":"import seedu.cardli.commands.Command;","lastModifiedDate":"2021-10-26"},{"lineNumber":4,"author":{"gitId":"JWweiyin"},"content":"import seedu.cardli.commands.CommandResult;","lastModifiedDate":"2021-10-26"},{"lineNumber":5,"author":{"gitId":"JWweiyin"},"content":"import seedu.cardli.commands.system.EditDeckCommand;","lastModifiedDate":"2021-10-26"},{"lineNumber":6,"author":{"gitId":"JWweiyin"},"content":"import seedu.cardli.exceptions.CardLiException;","lastModifiedDate":"2021-10-26"},{"lineNumber":7,"author":{"gitId":"JWweiyin"},"content":"import seedu.cardli.exceptions.FieldEmptyException;","lastModifiedDate":"2021-10-26"},{"lineNumber":8,"author":{"gitId":"JWweiyin"},"content":"import seedu.cardli.exceptions.InvalidCommandFormatException;","lastModifiedDate":"2021-10-26"},{"lineNumber":9,"author":{"gitId":"JWweiyin"},"content":"import seedu.cardli.flashcard.Deck;","lastModifiedDate":"2021-10-26"},{"lineNumber":10,"author":{"gitId":"JWweiyin"},"content":"import seedu.cardli.flashcard.DeckManager;","lastModifiedDate":"2021-10-26"},{"lineNumber":11,"author":{"gitId":"JWweiyin"},"content":"import seedu.cardli.parser.deck.MoveCardParser;","lastModifiedDate":"2021-10-26"},{"lineNumber":12,"author":{"gitId":"JWweiyin"},"content":"import seedu.cardli.testing.TestManager;","lastModifiedDate":"2021-10-26"},{"lineNumber":13,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":14,"author":{"gitId":"ThaddeusLim99"},"content":"import java.util.logging.Level;","lastModifiedDate":"2021-10-26"},{"lineNumber":15,"author":{"gitId":"ThaddeusLim99"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-10-26"},{"lineNumber":16,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":17,"author":{"gitId":"ThaddeusLim99"},"content":"public class MoveCardCommand extends Command {","lastModifiedDate":"2021-10-26"},{"lineNumber":18,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":19,"author":{"gitId":"ThaddeusLim99"},"content":"    private static final String FIELD_EMPTY_ERROR_MESSAGE \u003d \"You cannot leave any field empty! \"","lastModifiedDate":"2021-10-26"},{"lineNumber":20,"author":{"gitId":"ThaddeusLim99"},"content":"            + \"Format should be\\nmove /c \u003ccard index\u003e /d \u003cdeck index\u003e\";","lastModifiedDate":"2021-11-03"},{"lineNumber":21,"author":{"gitId":"ThaddeusLim99"},"content":"    private static final String WRONG_ORDER_ERROR_MESSAGE \u003d \"/c should come before /d! Format should be\\n\"","lastModifiedDate":"2021-11-03"},{"lineNumber":22,"author":{"gitId":"ThaddeusLim99"},"content":"            + \"move /c \u003ccard index\u003e /d \u003cdeck index\u003e\";","lastModifiedDate":"2021-11-03"},{"lineNumber":23,"author":{"gitId":"ThaddeusLim99"},"content":"    private static final String SAME_DESTINATION_ERROR_MESSAGE \u003d \"Your card is already in the deck specified!\";","lastModifiedDate":"2021-10-26"},{"lineNumber":24,"author":{"gitId":"ThaddeusLim99"},"content":"    private static final String LARGE_INTEGER_ERROR_MESSAGE \u003d \"Card and Deck index must be both \"","lastModifiedDate":"2021-11-03"},{"lineNumber":25,"author":{"gitId":"ThaddeusLim99"},"content":"            + \"smaller than 2147483647.\";","lastModifiedDate":"2021-11-03"},{"lineNumber":26,"author":{"gitId":"ThaddeusLim99"},"content":"    private static final String INVALID_ARGUMENTS_MESSAGE \u003d \"Please use the correct flags and in the correct order! \"","lastModifiedDate":"2021-11-03"},{"lineNumber":27,"author":{"gitId":"ThaddeusLim99"},"content":"            + \"\\nFormat should be move /c \u003ccard index\u003e /d \u003cdeck index\u003e\";","lastModifiedDate":"2021-11-03"},{"lineNumber":28,"author":{"gitId":"ThaddeusLim99"},"content":"    private static final String FLAG_ARGUMENT_ERROR_MESSAGE \u003d \"You should not use this command\u0027s flag as your argument\";","lastModifiedDate":"2021-11-03"},{"lineNumber":29,"author":{"gitId":"ThaddeusLim99"},"content":"    private static final String MISSING_FLAG_MESSAGE \u003d \"You are missing the relevant flag/flags\";","lastModifiedDate":"2021-11-03"},{"lineNumber":30,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":31,"author":{"gitId":"ThaddeusLim99"},"content":"    private MoveCardParser parser;","lastModifiedDate":"2021-10-26"},{"lineNumber":32,"author":{"gitId":"ThaddeusLim99"},"content":"    private Deck deck;","lastModifiedDate":"2021-10-26"},{"lineNumber":33,"author":{"gitId":"ThaddeusLim99"},"content":"    private DeckManager deckManager;","lastModifiedDate":"2021-10-26"},{"lineNumber":34,"author":{"gitId":"ThaddeusLim99"},"content":"    private static Logger logger \u003d Logger.getLogger(TestManager.class.getName());","lastModifiedDate":"2021-10-26"},{"lineNumber":35,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":36,"author":{"gitId":"ThaddeusLim99"},"content":"    public MoveCardCommand(String arguments, Deck deck, DeckManager deckManager) {","lastModifiedDate":"2021-10-26"},{"lineNumber":37,"author":{"gitId":"JWweiyin"},"content":"        super(\"MoveCardCommand\", arguments);","lastModifiedDate":"2021-11-02"},{"lineNumber":38,"author":{"gitId":"ThaddeusLim99"},"content":"        this.deck \u003d deck;","lastModifiedDate":"2021-10-26"},{"lineNumber":39,"author":{"gitId":"ThaddeusLim99"},"content":"        this.deckManager \u003d deckManager;","lastModifiedDate":"2021-10-26"},{"lineNumber":40,"author":{"gitId":"ThaddeusLim99"},"content":"        this.parser \u003d new MoveCardParser();","lastModifiedDate":"2021-10-26"},{"lineNumber":41,"author":{"gitId":"ThaddeusLim99"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":42,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":43,"author":{"gitId":"ThaddeusLim99"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":44,"author":{"gitId":"ThaddeusLim99"},"content":"     * Returns the arguments for MoveCardCommand if accepted.","lastModifiedDate":"2021-11-07"},{"lineNumber":45,"author":{"gitId":"ThaddeusLim99"},"content":"     *","lastModifiedDate":"2021-11-07"},{"lineNumber":46,"author":{"gitId":"ThaddeusLim99"},"content":"     * @return accepted arguments.","lastModifiedDate":"2021-11-07"},{"lineNumber":47,"author":{"gitId":"ThaddeusLim99"},"content":"     * @throws FieldEmptyException If arguments or flags are empty.","lastModifiedDate":"2021-11-07"},{"lineNumber":48,"author":{"gitId":"ThaddeusLim99"},"content":"     * @throws InvalidCommandFormatException If flags are in the wrong position.","lastModifiedDate":"2021-11-07"},{"lineNumber":49,"author":{"gitId":"ThaddeusLim99"},"content":"     * @throws seedu.cardli.exceptions.DeckNotExistException If the deck index given is out of bounds.","lastModifiedDate":"2021-11-07"},{"lineNumber":50,"author":{"gitId":"ThaddeusLim99"},"content":"     * @throws NumberFormatException If an integer above 2147483647 is entered by the user as the card or deck index.","lastModifiedDate":"2021-11-07"},{"lineNumber":51,"author":{"gitId":"ThaddeusLim99"},"content":"     * @throws CardLiException If flags are used as arguments,if a card is being sent to the deck it is currently in,","lastModifiedDate":"2021-11-07"},{"lineNumber":52,"author":{"gitId":"ThaddeusLim99"},"content":"     *      if a non-integer is given as index, if the card index given is out of bounds.","lastModifiedDate":"2021-11-07"},{"lineNumber":53,"author":{"gitId":"ThaddeusLim99"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":54,"author":{"gitId":"ThaddeusLim99"},"content":"    public String[] prepareMoveCardCommand() throws CardLiException {","lastModifiedDate":"2021-10-26"},{"lineNumber":55,"author":{"gitId":"ThaddeusLim99"},"content":"        logger.setLevel(Level.WARNING);","lastModifiedDate":"2021-10-26"},{"lineNumber":56,"author":{"gitId":"ThaddeusLim99"},"content":"        logger.log(Level.INFO, \"preparing MoveCommand\");","lastModifiedDate":"2021-10-26"},{"lineNumber":57,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":58,"author":{"gitId":"ThaddeusLim99"},"content":"        if (arguments.isEmpty()) {","lastModifiedDate":"2021-11-03"},{"lineNumber":59,"author":{"gitId":"ThaddeusLim99"},"content":"            throw new FieldEmptyException(FIELD_EMPTY_ERROR_MESSAGE);","lastModifiedDate":"2021-10-26"},{"lineNumber":60,"author":{"gitId":"ThaddeusLim99"},"content":"        }","lastModifiedDate":"2021-10-26"},{"lineNumber":61,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":62,"author":{"gitId":"ThaddeusLim99"},"content":"        logger.log(Level.INFO, \"Checking if input contains /d and /c\");","lastModifiedDate":"2021-11-03"},{"lineNumber":63,"author":{"gitId":"ThaddeusLim99"},"content":"        if (!arguments.contains(\"/c\") || !arguments.contains(\"/d\")) {","lastModifiedDate":"2021-11-03"},{"lineNumber":64,"author":{"gitId":"ThaddeusLim99"},"content":"            throw new FieldEmptyException(MISSING_FLAG_MESSAGE);","lastModifiedDate":"2021-11-03"},{"lineNumber":65,"author":{"gitId":"ThaddeusLim99"},"content":"        }","lastModifiedDate":"2021-11-03"},{"lineNumber":66,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":67,"author":{"gitId":"ThaddeusLim99"},"content":"        logger.log(Level.INFO, \"Checking if /d and /c are in the right order\");","lastModifiedDate":"2021-10-26"},{"lineNumber":68,"author":{"gitId":"ThaddeusLim99"},"content":"        if (!(arguments.indexOf(\"/c\") \u003c arguments.indexOf(\"/d\"))) {","lastModifiedDate":"2021-10-26"},{"lineNumber":69,"author":{"gitId":"ThaddeusLim99"},"content":"            throw new InvalidCommandFormatException(WRONG_ORDER_ERROR_MESSAGE);","lastModifiedDate":"2021-10-26"},{"lineNumber":70,"author":{"gitId":"ThaddeusLim99"},"content":"        }","lastModifiedDate":"2021-10-26"},{"lineNumber":71,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":72,"author":{"gitId":"ThaddeusLim99"},"content":"        logger.log(Level.INFO, \"Splitting the input up\");","lastModifiedDate":"2021-10-26"},{"lineNumber":73,"author":{"gitId":"ThaddeusLim99"},"content":"        String[] rawParameters \u003d parser.parseArguments(super.arguments);","lastModifiedDate":"2021-10-26"},{"lineNumber":74,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":75,"author":{"gitId":"ThaddeusLim99"},"content":"        logger.log(Level.INFO, \"Checking if there is enough arguments\");","lastModifiedDate":"2021-10-26"},{"lineNumber":76,"author":{"gitId":"ThaddeusLim99"},"content":"        if (rawParameters.length !\u003d 4) {","lastModifiedDate":"2021-11-03"},{"lineNumber":77,"author":{"gitId":"ThaddeusLim99"},"content":"            throw new FieldEmptyException(FIELD_EMPTY_ERROR_MESSAGE);","lastModifiedDate":"2021-10-26"},{"lineNumber":78,"author":{"gitId":"ThaddeusLim99"},"content":"        }","lastModifiedDate":"2021-10-26"},{"lineNumber":79,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":80,"author":{"gitId":"ThaddeusLim99"},"content":"        logger.log(Level.INFO, \"Checking if /c,/d are in the right order\");","lastModifiedDate":"2021-11-03"},{"lineNumber":81,"author":{"gitId":"ThaddeusLim99"},"content":"        if (!(rawParameters[0].trim().equals(\"/c\") \u0026\u0026 rawParameters[2].trim().equals(\"/d\"))) {","lastModifiedDate":"2021-11-03"},{"lineNumber":82,"author":{"gitId":"ThaddeusLim99"},"content":"            throw new InvalidCommandFormatException(INVALID_ARGUMENTS_MESSAGE);","lastModifiedDate":"2021-11-03"},{"lineNumber":83,"author":{"gitId":"ThaddeusLim99"},"content":"        }","lastModifiedDate":"2021-11-03"},{"lineNumber":84,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":85,"author":{"gitId":"ThaddeusLim99"},"content":"        String cardInput \u003d rawParameters[1].trim();","lastModifiedDate":"2021-10-26"},{"lineNumber":86,"author":{"gitId":"ThaddeusLim99"},"content":"        String deckInput \u003d rawParameters[3].trim();","lastModifiedDate":"2021-11-03"},{"lineNumber":87,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":88,"author":{"gitId":"ThaddeusLim99"},"content":"        logger.log(Level.INFO, \"Checking if any field is empty\");","lastModifiedDate":"2021-10-26"},{"lineNumber":89,"author":{"gitId":"ThaddeusLim99"},"content":"        if (cardInput.isEmpty() || deckInput.isEmpty()) {","lastModifiedDate":"2021-10-26"},{"lineNumber":90,"author":{"gitId":"ThaddeusLim99"},"content":"            throw new FieldEmptyException(FIELD_EMPTY_ERROR_MESSAGE);","lastModifiedDate":"2021-10-26"},{"lineNumber":91,"author":{"gitId":"ThaddeusLim99"},"content":"        }","lastModifiedDate":"2021-10-26"},{"lineNumber":92,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":93,"author":{"gitId":"ThaddeusLim99"},"content":"        if (cardInput.equalsIgnoreCase(\"/c\") || cardInput.equalsIgnoreCase(\"/d\")","lastModifiedDate":"2021-11-03"},{"lineNumber":94,"author":{"gitId":"ThaddeusLim99"},"content":"                || deckInput.equalsIgnoreCase(\"/c\") || deckInput.equalsIgnoreCase(\"/d\")) {","lastModifiedDate":"2021-11-03"},{"lineNumber":95,"author":{"gitId":"ThaddeusLim99"},"content":"            throw new CardLiException(FLAG_ARGUMENT_ERROR_MESSAGE);","lastModifiedDate":"2021-11-03"},{"lineNumber":96,"author":{"gitId":"ThaddeusLim99"},"content":"        }","lastModifiedDate":"2021-11-03"},{"lineNumber":97,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":98,"author":{"gitId":"ThaddeusLim99"},"content":"        logger.log(Level.INFO, \"preparing CardIndex and DeckIndex\");","lastModifiedDate":"2021-10-26"},{"lineNumber":99,"author":{"gitId":"ThaddeusLim99"},"content":"        cardInput \u003d EditCardCommand.prepareCardIndex(cardInput, deck);","lastModifiedDate":"2021-10-26"},{"lineNumber":100,"author":{"gitId":"ThaddeusLim99"},"content":"        deckInput \u003d EditDeckCommand.prepareDeckIndex(deckInput, deckManager);","lastModifiedDate":"2021-10-26"},{"lineNumber":101,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":102,"author":{"gitId":"ThaddeusLim99"},"content":"        logger.log(Level.INFO, \"checking if user is already in specified deck\");","lastModifiedDate":"2021-10-26"},{"lineNumber":103,"author":{"gitId":"ThaddeusLim99"},"content":"        if ((Integer.parseInt(deckInput) - 1) \u003d\u003d deckManager.getDeckIndex(deck)) {","lastModifiedDate":"2021-10-26"},{"lineNumber":104,"author":{"gitId":"ThaddeusLim99"},"content":"            throw new CardLiException(SAME_DESTINATION_ERROR_MESSAGE);","lastModifiedDate":"2021-10-26"},{"lineNumber":105,"author":{"gitId":"ThaddeusLim99"},"content":"        }","lastModifiedDate":"2021-10-26"},{"lineNumber":106,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":107,"author":{"gitId":"ThaddeusLim99"},"content":"        String sourceDeckIndex \u003d String.valueOf(deckManager.getDeckIndex(deck));","lastModifiedDate":"2021-10-26"},{"lineNumber":108,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":109,"author":{"gitId":"ThaddeusLim99"},"content":"        String[] preparedArguments \u003d {sourceDeckIndex, cardInput, deckInput};","lastModifiedDate":"2021-10-26"},{"lineNumber":110,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":111,"author":{"gitId":"ThaddeusLim99"},"content":"        return preparedArguments;","lastModifiedDate":"2021-10-26"},{"lineNumber":112,"author":{"gitId":"ThaddeusLim99"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":113,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":114,"author":{"gitId":"ThaddeusLim99"},"content":"    @Override","lastModifiedDate":"2021-10-26"},{"lineNumber":115,"author":{"gitId":"ThaddeusLim99"},"content":"    public CommandResult execute() {","lastModifiedDate":"2021-11-07"},{"lineNumber":116,"author":{"gitId":"ThaddeusLim99"},"content":"        CommandResult result;","lastModifiedDate":"2021-10-26"},{"lineNumber":117,"author":{"gitId":"ThaddeusLim99"},"content":"        try {","lastModifiedDate":"2021-10-26"},{"lineNumber":118,"author":{"gitId":"ThaddeusLim99"},"content":"            String[] parameters \u003d prepareMoveCardCommand();","lastModifiedDate":"2021-10-26"},{"lineNumber":119,"author":{"gitId":"ThaddeusLim99"},"content":"            result \u003d new CommandResult(deckManager.moveCard(parameters));","lastModifiedDate":"2021-10-26"},{"lineNumber":120,"author":{"gitId":"ThaddeusLim99"},"content":"        } catch (CardLiException e) {","lastModifiedDate":"2021-10-26"},{"lineNumber":121,"author":{"gitId":"ThaddeusLim99"},"content":"            result \u003d new CommandResult(e.getMessage());","lastModifiedDate":"2021-10-26"},{"lineNumber":122,"author":{"gitId":"JWweiyin"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2021-11-01"},{"lineNumber":123,"author":{"gitId":"JWweiyin"},"content":"            result \u003d new CommandResult(\"You are moving the card to a deck that does not exist.\");","lastModifiedDate":"2021-11-01"},{"lineNumber":124,"author":{"gitId":"JWweiyin"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2021-11-01"},{"lineNumber":125,"author":{"gitId":"ThaddeusLim99"},"content":"            result \u003d new CommandResult(LARGE_INTEGER_ERROR_MESSAGE);","lastModifiedDate":"2021-11-03"},{"lineNumber":126,"author":{"gitId":"ThaddeusLim99"},"content":"        }","lastModifiedDate":"2021-10-26"},{"lineNumber":127,"author":{"gitId":"ThaddeusLim99"},"content":"        return result;","lastModifiedDate":"2021-10-26"},{"lineNumber":128,"author":{"gitId":"ThaddeusLim99"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":129,"author":{"gitId":"ThaddeusLim99"},"content":"}","lastModifiedDate":"2021-10-26"},{"lineNumber":130,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-26"}],"authorContributionMap":{"JWweiyin":15,"ThaddeusLim99":115}},{"path":"src/main/java/seedu/cardli/commands/deck/ViewCardsCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"xRossKoh"},"content":"package seedu.cardli.commands.deck;","lastModifiedDate":"2021-10-26"},{"lineNumber":2,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":3,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.commands.Command;","lastModifiedDate":"2021-10-26"},{"lineNumber":4,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.commands.CommandResult;","lastModifiedDate":"2021-10-26"},{"lineNumber":5,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.flashcard.Deck;","lastModifiedDate":"2021-10-26"},{"lineNumber":6,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":7,"author":{"gitId":"astralum"},"content":"public class ViewCardsCommand extends Command {","lastModifiedDate":"2021-10-21"},{"lineNumber":8,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":9,"author":{"gitId":"astralum"},"content":"    private Deck deck;","lastModifiedDate":"2021-10-21"},{"lineNumber":10,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":11,"author":{"gitId":"JWweiyin"},"content":"    public ViewCardsCommand(Deck deck, String arguments) {","lastModifiedDate":"2021-11-02"},{"lineNumber":12,"author":{"gitId":"JWweiyin"},"content":"        super(\"ViewCardCommand\", arguments);","lastModifiedDate":"2021-11-02"},{"lineNumber":13,"author":{"gitId":"astralum"},"content":"        this.deck \u003d deck;","lastModifiedDate":"2021-10-21"},{"lineNumber":14,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":15,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":16,"author":{"gitId":"astralum"},"content":"    @Override","lastModifiedDate":"2021-10-21"},{"lineNumber":17,"author":{"gitId":"astralum"},"content":"    public CommandResult execute() {","lastModifiedDate":"2021-10-21"},{"lineNumber":18,"author":{"gitId":"JWweiyin"},"content":"        if (arguments.length() \u003e 0) {","lastModifiedDate":"2021-11-02"},{"lineNumber":19,"author":{"gitId":"JWweiyin"},"content":"            return new CommandResult(\"There should not be any arguments.\");","lastModifiedDate":"2021-11-02"},{"lineNumber":20,"author":{"gitId":"JWweiyin"},"content":"        }","lastModifiedDate":"2021-11-02"},{"lineNumber":21,"author":{"gitId":"astralum"},"content":"        CommandResult result \u003d new CommandResult(this.deck.returnAllFlashCards());","lastModifiedDate":"2021-10-21"},{"lineNumber":22,"author":{"gitId":"astralum"},"content":"        return result;","lastModifiedDate":"2021-10-21"},{"lineNumber":23,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":24,"author":{"gitId":"astralum"},"content":"}","lastModifiedDate":"2021-10-21"}],"authorContributionMap":{"JWweiyin":5,"astralum":15,"xRossKoh":4}},{"path":"src/main/java/seedu/cardli/commands/system/AddDeckCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JWweiyin"},"content":"//@@author JWweiyin","lastModifiedDate":"2021-11-06"},{"lineNumber":2,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":3,"author":{"gitId":"JWweiyin"},"content":"package seedu.cardli.commands.system;","lastModifiedDate":"2021-10-26"},{"lineNumber":4,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":5,"author":{"gitId":"JWweiyin"},"content":"import seedu.cardli.commands.Command;","lastModifiedDate":"2021-10-26"},{"lineNumber":6,"author":{"gitId":"JWweiyin"},"content":"import seedu.cardli.commands.CommandResult;","lastModifiedDate":"2021-10-26"},{"lineNumber":7,"author":{"gitId":"JWweiyin"},"content":"import seedu.cardli.exceptions.FieldEmptyException;","lastModifiedDate":"2021-10-26"},{"lineNumber":8,"author":{"gitId":"JWweiyin"},"content":"import seedu.cardli.flashcard.DeckManager;","lastModifiedDate":"2021-10-26"},{"lineNumber":9,"author":{"gitId":"JWweiyin"},"content":"import seedu.cardli.parser.system.AddDeckParser;","lastModifiedDate":"2021-10-26"},{"lineNumber":10,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":11,"author":{"gitId":"JWweiyin"},"content":"public class AddDeckCommand extends Command {","lastModifiedDate":"2021-10-21"},{"lineNumber":12,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":13,"author":{"gitId":"JWweiyin"},"content":"    public static final String FIELD_EMPTY_ERROR_MESSAGE \u003d \"What is the name of the deck?\";","lastModifiedDate":"2021-10-25"},{"lineNumber":14,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":15,"author":{"gitId":"JWweiyin"},"content":"    private AddDeckParser parser;","lastModifiedDate":"2021-10-21"},{"lineNumber":16,"author":{"gitId":"JWweiyin"},"content":"    private DeckManager deckManager;","lastModifiedDate":"2021-10-21"},{"lineNumber":17,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":18,"author":{"gitId":"JWweiyin"},"content":"    public AddDeckCommand(String arguments, DeckManager deckManager) {","lastModifiedDate":"2021-10-21"},{"lineNumber":19,"author":{"gitId":"JWweiyin"},"content":"        super(\"AddDeckCommand\", arguments);","lastModifiedDate":"2021-10-21"},{"lineNumber":20,"author":{"gitId":"JWweiyin"},"content":"        this.parser \u003d new AddDeckParser();","lastModifiedDate":"2021-10-21"},{"lineNumber":21,"author":{"gitId":"JWweiyin"},"content":"        this.deckManager \u003d deckManager;","lastModifiedDate":"2021-10-21"},{"lineNumber":22,"author":{"gitId":"JWweiyin"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":23,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":24,"author":{"gitId":"JWweiyin"},"content":"    @Override","lastModifiedDate":"2021-10-21"},{"lineNumber":25,"author":{"gitId":"JWweiyin"},"content":"    public CommandResult execute() {","lastModifiedDate":"2021-10-21"},{"lineNumber":26,"author":{"gitId":"JWweiyin"},"content":"        CommandResult result;","lastModifiedDate":"2021-10-21"},{"lineNumber":27,"author":{"gitId":"JWweiyin"},"content":"        try {","lastModifiedDate":"2021-10-21"},{"lineNumber":28,"author":{"gitId":"JWweiyin"},"content":"            String[] parameters \u003d parser.parseArguments(super.arguments);","lastModifiedDate":"2021-10-21"},{"lineNumber":29,"author":{"gitId":"JWweiyin"},"content":"            String deckName \u003d parameters[0];","lastModifiedDate":"2021-10-21"},{"lineNumber":30,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":31,"author":{"gitId":"JWweiyin"},"content":"            if (deckName.isEmpty()) {","lastModifiedDate":"2021-10-21"},{"lineNumber":32,"author":{"gitId":"JWweiyin"},"content":"                throw new FieldEmptyException(FIELD_EMPTY_ERROR_MESSAGE);","lastModifiedDate":"2021-10-21"},{"lineNumber":33,"author":{"gitId":"JWweiyin"},"content":"            }","lastModifiedDate":"2021-10-21"},{"lineNumber":34,"author":{"gitId":"JWweiyin"},"content":"            result \u003d new CommandResult(deckManager.prepareToAddDeck(deckName));","lastModifiedDate":"2021-10-21"},{"lineNumber":35,"author":{"gitId":"JWweiyin"},"content":"        } catch (FieldEmptyException e) {","lastModifiedDate":"2021-10-21"},{"lineNumber":36,"author":{"gitId":"JWweiyin"},"content":"            result \u003d new CommandResult(e.getMessage());","lastModifiedDate":"2021-10-21"},{"lineNumber":37,"author":{"gitId":"JWweiyin"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":38,"author":{"gitId":"JWweiyin"},"content":"        return result;","lastModifiedDate":"2021-10-21"},{"lineNumber":39,"author":{"gitId":"JWweiyin"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":40,"author":{"gitId":"JWweiyin"},"content":"}","lastModifiedDate":"2021-10-21"}],"authorContributionMap":{"JWweiyin":40}},{"path":"src/main/java/seedu/cardli/commands/system/DeleteDeckCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"xRossKoh"},"content":"package seedu.cardli.commands.system;","lastModifiedDate":"2021-10-26"},{"lineNumber":2,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":3,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.commands.Command;","lastModifiedDate":"2021-10-26"},{"lineNumber":4,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.commands.CommandResult;","lastModifiedDate":"2021-10-26"},{"lineNumber":5,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.exceptions.DeckNotExistException;","lastModifiedDate":"2021-10-26"},{"lineNumber":6,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.flashcard.DeckManager;","lastModifiedDate":"2021-10-26"},{"lineNumber":7,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.parser.Parser;","lastModifiedDate":"2021-10-26"},{"lineNumber":8,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.parser.system.DeleteDeckParser;","lastModifiedDate":"2021-10-26"},{"lineNumber":9,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":10,"author":{"gitId":"astralum"},"content":"public class DeleteDeckCommand extends Command {","lastModifiedDate":"2021-10-21"},{"lineNumber":11,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":12,"author":{"gitId":"astralum"},"content":"    private DeleteDeckParser parser;","lastModifiedDate":"2021-10-21"},{"lineNumber":13,"author":{"gitId":"astralum"},"content":"    private DeckManager deckManager;","lastModifiedDate":"2021-10-21"},{"lineNumber":14,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":15,"author":{"gitId":"xkisxk"},"content":"    public DeleteDeckCommand(String arguments, DeckManager deckManager) {","lastModifiedDate":"2021-10-25"},{"lineNumber":16,"author":{"gitId":"xkisxk"},"content":"        super(\"DeleteDeckCommand\", arguments);","lastModifiedDate":"2021-10-25"},{"lineNumber":17,"author":{"gitId":"astralum"},"content":"        this.parser \u003d new DeleteDeckParser();","lastModifiedDate":"2021-10-21"},{"lineNumber":18,"author":{"gitId":"astralum"},"content":"        this.deckManager \u003d deckManager;","lastModifiedDate":"2021-10-21"},{"lineNumber":19,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":20,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":21,"author":{"gitId":"astralum"},"content":"    @Override","lastModifiedDate":"2021-10-21"},{"lineNumber":22,"author":{"gitId":"astralum"},"content":"    public CommandResult execute() {","lastModifiedDate":"2021-10-21"},{"lineNumber":23,"author":{"gitId":"astralum"},"content":"        String[] parameters \u003d parser.parseArguments(super.arguments);","lastModifiedDate":"2021-10-21"},{"lineNumber":24,"author":{"gitId":"astralum"},"content":"        String enterInput \u003d parameters[0];","lastModifiedDate":"2021-10-21"},{"lineNumber":25,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":26,"author":{"gitId":"xkisxk"},"content":"        CommandResult result;","lastModifiedDate":"2021-10-25"},{"lineNumber":27,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":28,"author":{"gitId":"xkisxk"},"content":"        try {","lastModifiedDate":"2021-10-25"},{"lineNumber":29,"author":{"gitId":"xkisxk"},"content":"            if (Parser.isInteger(enterInput)) {","lastModifiedDate":"2021-10-25"},{"lineNumber":30,"author":{"gitId":"astralum"},"content":"                int deckIndex \u003d Integer.parseInt(enterInput) - 1;","lastModifiedDate":"2021-10-21"},{"lineNumber":31,"author":{"gitId":"xkisxk"},"content":"                return new CommandResult(deckManager.deleteDeck(deckIndex));","lastModifiedDate":"2021-10-25"},{"lineNumber":32,"author":{"gitId":"JWweiyin"},"content":"            } else {","lastModifiedDate":"2021-11-01"},{"lineNumber":33,"author":{"gitId":"JWweiyin"},"content":"                throw new DeckNotExistException(\"Please input a positive integer.\");","lastModifiedDate":"2021-11-01"},{"lineNumber":34,"author":{"gitId":"xkisxk"},"content":"            }","lastModifiedDate":"2021-10-25"},{"lineNumber":35,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":36,"author":{"gitId":"xkisxk"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2021-10-25"},{"lineNumber":37,"author":{"gitId":"xkisxk"},"content":"            result \u003d new CommandResult(\"This deck does not exist.\");","lastModifiedDate":"2021-10-25"},{"lineNumber":38,"author":{"gitId":"JWweiyin"},"content":"        } catch (DeckNotExistException e) {","lastModifiedDate":"2021-11-01"},{"lineNumber":39,"author":{"gitId":"JWweiyin"},"content":"            result \u003d new CommandResult(e.getMessage());","lastModifiedDate":"2021-11-01"},{"lineNumber":40,"author":{"gitId":"JWweiyin"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2021-11-01"},{"lineNumber":41,"author":{"gitId":"JWweiyin"},"content":"            result \u003d new CommandResult(\"Deck index must be smaller than 2147483647.\");","lastModifiedDate":"2021-11-01"},{"lineNumber":42,"author":{"gitId":"xkisxk"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":43,"author":{"gitId":"astralum"},"content":"        return result;","lastModifiedDate":"2021-10-21"},{"lineNumber":44,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":45,"author":{"gitId":"astralum"},"content":"}","lastModifiedDate":"2021-10-21"}],"authorContributionMap":{"JWweiyin":7,"astralum":18,"xRossKoh":7,"xkisxk":13}},{"path":"src/main/java/seedu/cardli/commands/system/EditDeckCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"xRossKoh"},"content":"package seedu.cardli.commands.system;","lastModifiedDate":"2021-10-26"},{"lineNumber":2,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":3,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":4,"author":{"gitId":"ThaddeusLim99"},"content":"import java.util.logging.Level;","lastModifiedDate":"2021-10-26"},{"lineNumber":5,"author":{"gitId":"ThaddeusLim99"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-10-26"},{"lineNumber":6,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":7,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.commands.Command;","lastModifiedDate":"2021-10-26"},{"lineNumber":8,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.commands.CommandResult;","lastModifiedDate":"2021-10-26"},{"lineNumber":9,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.exceptions.CardLiException;","lastModifiedDate":"2021-10-26"},{"lineNumber":10,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.exceptions.DeckNotExistException;","lastModifiedDate":"2021-10-26"},{"lineNumber":11,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.exceptions.FieldEmptyException;","lastModifiedDate":"2021-10-26"},{"lineNumber":12,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.exceptions.InvalidCommandFormatException;","lastModifiedDate":"2021-10-26"},{"lineNumber":13,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.flashcard.DeckManager;","lastModifiedDate":"2021-10-26"},{"lineNumber":14,"author":{"gitId":"JWweiyin"},"content":"import seedu.cardli.parser.Parser;","lastModifiedDate":"2021-10-26"},{"lineNumber":15,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.parser.system.EditDeckParser;","lastModifiedDate":"2021-10-26"},{"lineNumber":16,"author":{"gitId":"JWweiyin"},"content":"import seedu.cardli.testing.TestManager;","lastModifiedDate":"2021-10-26"},{"lineNumber":17,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":18,"author":{"gitId":"astralum"},"content":"public class EditDeckCommand extends Command {","lastModifiedDate":"2021-10-21"},{"lineNumber":19,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":20,"author":{"gitId":"astralum"},"content":"    private static final String FIELD_EMPTY_ERROR_MESSAGE \u003d \"You cannot leave any field empty! \"","lastModifiedDate":"2021-10-21"},{"lineNumber":21,"author":{"gitId":"ThaddeusLim99"},"content":"            + \"Format should be\\nedit /d \u003cdeck index/name of deck\u003e /n \u003cnew name of deck\u003e\";","lastModifiedDate":"2021-10-26"},{"lineNumber":22,"author":{"gitId":"ThaddeusLim99"},"content":"    private static final String WRONG_ORDER_ERROR_MESSAGE \u003d \"Incorrect edit command! /n should come after /d. Format \"","lastModifiedDate":"2021-11-01"},{"lineNumber":23,"author":{"gitId":"ThaddeusLim99"},"content":"            + \"should be\\nedit /d \u003cdeck index/name of deck\u003e /n \u003cnew name of deck\u003e\";","lastModifiedDate":"2021-11-01"},{"lineNumber":24,"author":{"gitId":"astralum"},"content":"    private static final String INVALID_INDEX_ERROR_MESSAGE \u003d \"Incorrect index for deck!\";","lastModifiedDate":"2021-10-21"},{"lineNumber":25,"author":{"gitId":"ThaddeusLim99"},"content":"    private static final String ARGUMENT_TYPE_ERROR_MESSAGE \u003d \"You can only input the index of the deck, which is \"","lastModifiedDate":"2021-11-01"},{"lineNumber":26,"author":{"gitId":"ThaddeusLim99"},"content":"            + \"a positive integer!\";","lastModifiedDate":"2021-11-01"},{"lineNumber":27,"author":{"gitId":"ThaddeusLim99"},"content":"    private static final String LARGE_INTEGER_ERROR_MESSAGE \u003d \"Deck index must be smaller than 2147483647.\";","lastModifiedDate":"2021-11-03"},{"lineNumber":28,"author":{"gitId":"ThaddeusLim99"},"content":"    private static final String INVALID_ARGUMENTS_MESSAGE \u003d \"Please use the correct flags and in the correct order! \"","lastModifiedDate":"2021-11-01"},{"lineNumber":29,"author":{"gitId":"ThaddeusLim99"},"content":"            + \"\\nFormat + should be edit /d \u003cdeck index/name of deck\u003e /n \u003cnew name of deck\u003e\";","lastModifiedDate":"2021-11-01"},{"lineNumber":30,"author":{"gitId":"ThaddeusLim99"},"content":"    private static final String FLAG_ARGUMENT_ERROR_MESSAGE \u003d \"You should not use this command\u0027s flag as your argument\";","lastModifiedDate":"2021-11-03"},{"lineNumber":31,"author":{"gitId":"ThaddeusLim99"},"content":"    private static final String MISSING_FLAG_MESSAGE \u003d \"You are missing the relevant flag/flags\";","lastModifiedDate":"2021-11-03"},{"lineNumber":32,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":33,"author":{"gitId":"astralum"},"content":"    private EditDeckParser parser;","lastModifiedDate":"2021-10-21"},{"lineNumber":34,"author":{"gitId":"astralum"},"content":"    private DeckManager deckManager;","lastModifiedDate":"2021-10-21"},{"lineNumber":35,"author":{"gitId":"ThaddeusLim99"},"content":"    private static Logger logger \u003d Logger.getLogger(TestManager.class.getName());","lastModifiedDate":"2021-10-26"},{"lineNumber":36,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":37,"author":{"gitId":"astralum"},"content":"    public EditDeckCommand(String arguments, DeckManager deckManager) {","lastModifiedDate":"2021-10-21"},{"lineNumber":38,"author":{"gitId":"astralum"},"content":"        super(\"EditDeckCommand\", arguments);","lastModifiedDate":"2021-10-21"},{"lineNumber":39,"author":{"gitId":"astralum"},"content":"        this.parser \u003d new EditDeckParser();","lastModifiedDate":"2021-10-21"},{"lineNumber":40,"author":{"gitId":"astralum"},"content":"        this.deckManager \u003d deckManager;","lastModifiedDate":"2021-10-21"},{"lineNumber":41,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":42,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":43,"author":{"gitId":"ThaddeusLim99"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":44,"author":{"gitId":"ThaddeusLim99"},"content":"     * Returns the deck index for prepareEditDeckCommand as a string.","lastModifiedDate":"2021-11-07"},{"lineNumber":45,"author":{"gitId":"ThaddeusLim99"},"content":"     *","lastModifiedDate":"2021-11-07"},{"lineNumber":46,"author":{"gitId":"ThaddeusLim99"},"content":"     * @return deck index.","lastModifiedDate":"2021-11-07"},{"lineNumber":47,"author":{"gitId":"ThaddeusLim99"},"content":"     * @throws DeckNotExistException If the deck index given is out of bounds.","lastModifiedDate":"2021-11-07"},{"lineNumber":48,"author":{"gitId":"ThaddeusLim99"},"content":"     * @throws NumberFormatException If an integer above 2147483647 is entered by the user as the deck index.","lastModifiedDate":"2021-11-07"},{"lineNumber":49,"author":{"gitId":"ThaddeusLim99"},"content":"     * @throws CardLiException If a non-integer is given as index.","lastModifiedDate":"2021-11-07"},{"lineNumber":50,"author":{"gitId":"ThaddeusLim99"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":51,"author":{"gitId":"JWweiyin"},"content":"    public static String prepareDeckIndex(String deck, DeckManager deckManager) throws CardLiException,","lastModifiedDate":"2021-11-01"},{"lineNumber":52,"author":{"gitId":"JWweiyin"},"content":"            NumberFormatException {","lastModifiedDate":"2021-11-01"},{"lineNumber":53,"author":{"gitId":"ThaddeusLim99"},"content":"        logger.setLevel(Level.WARNING);","lastModifiedDate":"2021-10-26"},{"lineNumber":54,"author":{"gitId":"ThaddeusLim99"},"content":"        logger.log(Level.INFO, \"preparing Deck Index\");","lastModifiedDate":"2021-10-26"},{"lineNumber":55,"author":{"gitId":"ThaddeusLim99"},"content":"        int deckIndex \u003d 0;","lastModifiedDate":"2021-10-26"},{"lineNumber":56,"author":{"gitId":"ThaddeusLim99"},"content":"        if (Parser.isInteger(deck)) {","lastModifiedDate":"2021-10-26"},{"lineNumber":57,"author":{"gitId":"ThaddeusLim99"},"content":"            logger.log(Level.INFO, \"checking if integer deckIndex is out of bounds\");","lastModifiedDate":"2021-10-26"},{"lineNumber":58,"author":{"gitId":"ThaddeusLim99"},"content":"            //deck is an index","lastModifiedDate":"2021-10-26"},{"lineNumber":59,"author":{"gitId":"ThaddeusLim99"},"content":"            deckIndex \u003d Integer.parseInt(deck) - 1;","lastModifiedDate":"2021-10-26"},{"lineNumber":60,"author":{"gitId":"ThaddeusLim99"},"content":"            if (!(deckIndex \u003e\u003d 0 \u0026\u0026 deckIndex \u003c deckManager.getDecksSize())) {","lastModifiedDate":"2021-11-01"},{"lineNumber":61,"author":{"gitId":"astralum"},"content":"                throw new DeckNotExistException(INVALID_INDEX_ERROR_MESSAGE);","lastModifiedDate":"2021-10-21"},{"lineNumber":62,"author":{"gitId":"astralum"},"content":"            }","lastModifiedDate":"2021-10-21"},{"lineNumber":63,"author":{"gitId":"ThaddeusLim99"},"content":"        } else {","lastModifiedDate":"2021-10-26"},{"lineNumber":64,"author":{"gitId":"ThaddeusLim99"},"content":"            throw new CardLiException(ARGUMENT_TYPE_ERROR_MESSAGE);","lastModifiedDate":"2021-11-01"},{"lineNumber":65,"author":{"gitId":"ThaddeusLim99"},"content":"        }","lastModifiedDate":"2021-10-26"},{"lineNumber":66,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":67,"author":{"gitId":"ThaddeusLim99"},"content":"        return deck;","lastModifiedDate":"2021-11-01"},{"lineNumber":68,"author":{"gitId":"ThaddeusLim99"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":69,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":70,"author":{"gitId":"ThaddeusLim99"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":71,"author":{"gitId":"ThaddeusLim99"},"content":"     * Returns the arguments for EditDeckCommand if accepted.","lastModifiedDate":"2021-11-07"},{"lineNumber":72,"author":{"gitId":"ThaddeusLim99"},"content":"     *","lastModifiedDate":"2021-11-07"},{"lineNumber":73,"author":{"gitId":"ThaddeusLim99"},"content":"     * @return accepted arguments.","lastModifiedDate":"2021-11-07"},{"lineNumber":74,"author":{"gitId":"ThaddeusLim99"},"content":"     * @throws FieldEmptyException If arguments or flags are empty.","lastModifiedDate":"2021-11-07"},{"lineNumber":75,"author":{"gitId":"ThaddeusLim99"},"content":"     * @throws InvalidCommandFormatException If flags are in the wrong position.","lastModifiedDate":"2021-11-07"},{"lineNumber":76,"author":{"gitId":"ThaddeusLim99"},"content":"     * @throws DeckNotExistException If the deck index given is out of bounds.","lastModifiedDate":"2021-11-07"},{"lineNumber":77,"author":{"gitId":"ThaddeusLim99"},"content":"     * @throws NumberFormatException If an integer above 2147483647 is entered by the user as the deck index.","lastModifiedDate":"2021-11-07"},{"lineNumber":78,"author":{"gitId":"ThaddeusLim99"},"content":"     * @throws CardLiException If flags are used as arguments, if a non-integer is given as index.","lastModifiedDate":"2021-11-07"},{"lineNumber":79,"author":{"gitId":"ThaddeusLim99"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":80,"author":{"gitId":"JWweiyin"},"content":"    public String[] prepareEditDeckCommand() throws CardLiException, NumberFormatException {","lastModifiedDate":"2021-11-01"},{"lineNumber":81,"author":{"gitId":"ThaddeusLim99"},"content":"        logger.setLevel(Level.WARNING);","lastModifiedDate":"2021-10-26"},{"lineNumber":82,"author":{"gitId":"ThaddeusLim99"},"content":"        logger.log(Level.INFO, \"preparing EditDeckCommand\");","lastModifiedDate":"2021-10-26"},{"lineNumber":83,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":84,"author":{"gitId":"ThaddeusLim99"},"content":"        if (arguments.isEmpty()) {","lastModifiedDate":"2021-11-01"},{"lineNumber":85,"author":{"gitId":"ThaddeusLim99"},"content":"            throw new FieldEmptyException(FIELD_EMPTY_ERROR_MESSAGE);","lastModifiedDate":"2021-11-01"},{"lineNumber":86,"author":{"gitId":"ThaddeusLim99"},"content":"        }","lastModifiedDate":"2021-11-01"},{"lineNumber":87,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":88,"author":{"gitId":"ThaddeusLim99"},"content":"        logger.log(Level.INFO, \"Checking if input contains /d and /n\");","lastModifiedDate":"2021-10-26"},{"lineNumber":89,"author":{"gitId":"ThaddeusLim99"},"content":"        if (!arguments.contains(\"/d\") || !arguments.contains(\"/n\")) {","lastModifiedDate":"2021-11-01"},{"lineNumber":90,"author":{"gitId":"ThaddeusLim99"},"content":"            throw new FieldEmptyException(MISSING_FLAG_MESSAGE);","lastModifiedDate":"2021-11-03"},{"lineNumber":91,"author":{"gitId":"ThaddeusLim99"},"content":"        }","lastModifiedDate":"2021-10-26"},{"lineNumber":92,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":93,"author":{"gitId":"ThaddeusLim99"},"content":"        logger.log(Level.INFO, \"Checking if /d and /n are in the right order\");","lastModifiedDate":"2021-10-26"},{"lineNumber":94,"author":{"gitId":"ThaddeusLim99"},"content":"        if (!(arguments.indexOf(\"/d\") \u003c arguments.indexOf(\"/n\"))) {","lastModifiedDate":"2021-10-26"},{"lineNumber":95,"author":{"gitId":"ThaddeusLim99"},"content":"            throw new InvalidCommandFormatException(WRONG_ORDER_ERROR_MESSAGE);","lastModifiedDate":"2021-10-26"},{"lineNumber":96,"author":{"gitId":"ThaddeusLim99"},"content":"        }","lastModifiedDate":"2021-10-26"},{"lineNumber":97,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":98,"author":{"gitId":"ThaddeusLim99"},"content":"        logger.log(Level.INFO, \"Splitting the input up\");","lastModifiedDate":"2021-10-26"},{"lineNumber":99,"author":{"gitId":"ThaddeusLim99"},"content":"        String[] parameters \u003d parser.parseArguments(super.arguments);","lastModifiedDate":"2021-10-26"},{"lineNumber":100,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":101,"author":{"gitId":"ThaddeusLim99"},"content":"        logger.log(Level.INFO, \"Checking if there is enough arguments\");","lastModifiedDate":"2021-10-26"},{"lineNumber":102,"author":{"gitId":"ThaddeusLim99"},"content":"        if (parameters.length !\u003d 4) {","lastModifiedDate":"2021-11-01"},{"lineNumber":103,"author":{"gitId":"ThaddeusLim99"},"content":"            throw new FieldEmptyException(FIELD_EMPTY_ERROR_MESSAGE);","lastModifiedDate":"2021-10-26"},{"lineNumber":104,"author":{"gitId":"ThaddeusLim99"},"content":"        }","lastModifiedDate":"2021-10-26"},{"lineNumber":105,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":106,"author":{"gitId":"ThaddeusLim99"},"content":"        logger.log(Level.INFO, \"Checking if /d and /n are in the right order\");","lastModifiedDate":"2021-11-01"},{"lineNumber":107,"author":{"gitId":"ThaddeusLim99"},"content":"        if (!(parameters[0].trim().equals(\"/d\") \u0026\u0026 parameters[2].trim().equals(\"/n\"))) {","lastModifiedDate":"2021-11-01"},{"lineNumber":108,"author":{"gitId":"ThaddeusLim99"},"content":"            throw new InvalidCommandFormatException(INVALID_ARGUMENTS_MESSAGE);","lastModifiedDate":"2021-11-01"},{"lineNumber":109,"author":{"gitId":"ThaddeusLim99"},"content":"        }","lastModifiedDate":"2021-11-01"},{"lineNumber":110,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":111,"author":{"gitId":"ThaddeusLim99"},"content":"        String deck \u003d parameters[1].trim();","lastModifiedDate":"2021-10-26"},{"lineNumber":112,"author":{"gitId":"ThaddeusLim99"},"content":"        String input \u003d parameters[3].trim();","lastModifiedDate":"2021-11-01"},{"lineNumber":113,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":114,"author":{"gitId":"ThaddeusLim99"},"content":"        logger.log(Level.INFO, \"Checking if any field is empty\");","lastModifiedDate":"2021-10-26"},{"lineNumber":115,"author":{"gitId":"ThaddeusLim99"},"content":"        if (deck.isEmpty() || input.isEmpty()) {","lastModifiedDate":"2021-10-26"},{"lineNumber":116,"author":{"gitId":"ThaddeusLim99"},"content":"            throw new FieldEmptyException(FIELD_EMPTY_ERROR_MESSAGE);","lastModifiedDate":"2021-10-26"},{"lineNumber":117,"author":{"gitId":"ThaddeusLim99"},"content":"        }","lastModifiedDate":"2021-10-26"},{"lineNumber":118,"author":{"gitId":"ThaddeusLim99"},"content":"        if (input.equalsIgnoreCase(\"/d\") || input.equalsIgnoreCase(\"/n\")) {","lastModifiedDate":"2021-11-03"},{"lineNumber":119,"author":{"gitId":"ThaddeusLim99"},"content":"            throw new CardLiException(FLAG_ARGUMENT_ERROR_MESSAGE);","lastModifiedDate":"2021-11-03"},{"lineNumber":120,"author":{"gitId":"ThaddeusLim99"},"content":"        }","lastModifiedDate":"2021-11-03"},{"lineNumber":121,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":122,"author":{"gitId":"ThaddeusLim99"},"content":"        logger.log(Level.INFO, \"preparing deckIndex\");","lastModifiedDate":"2021-10-26"},{"lineNumber":123,"author":{"gitId":"ThaddeusLim99"},"content":"        deck \u003d prepareDeckIndex(deck, deckManager);","lastModifiedDate":"2021-10-26"},{"lineNumber":124,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":125,"author":{"gitId":"ThaddeusLim99"},"content":"        String[] preparedArguments \u003d {deck, input};","lastModifiedDate":"2021-10-26"},{"lineNumber":126,"author":{"gitId":"ThaddeusLim99"},"content":"        return preparedArguments;","lastModifiedDate":"2021-10-26"},{"lineNumber":127,"author":{"gitId":"ThaddeusLim99"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":128,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":129,"author":{"gitId":"ThaddeusLim99"},"content":"    @Override","lastModifiedDate":"2021-10-26"},{"lineNumber":130,"author":{"gitId":"ThaddeusLim99"},"content":"    public CommandResult execute() { //edit /d \u003cdeck index\u003e /n \u003cname\u003e","lastModifiedDate":"2021-10-26"},{"lineNumber":131,"author":{"gitId":"ThaddeusLim99"},"content":"        CommandResult result;","lastModifiedDate":"2021-10-26"},{"lineNumber":132,"author":{"gitId":"ThaddeusLim99"},"content":"        try {","lastModifiedDate":"2021-10-26"},{"lineNumber":133,"author":{"gitId":"ThaddeusLim99"},"content":"            String[] parameters \u003d prepareEditDeckCommand();","lastModifiedDate":"2021-10-26"},{"lineNumber":134,"author":{"gitId":"ThaddeusLim99"},"content":"            result \u003d new CommandResult(this.deckManager.editDeck(parameters));","lastModifiedDate":"2021-10-26"},{"lineNumber":135,"author":{"gitId":"astralum"},"content":"        } catch (CardLiException e) {","lastModifiedDate":"2021-10-21"},{"lineNumber":136,"author":{"gitId":"astralum"},"content":"            result \u003d new CommandResult(e.getMessage());","lastModifiedDate":"2021-10-21"},{"lineNumber":137,"author":{"gitId":"JWweiyin"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2021-11-01"},{"lineNumber":138,"author":{"gitId":"ThaddeusLim99"},"content":"            result \u003d new CommandResult(LARGE_INTEGER_ERROR_MESSAGE);","lastModifiedDate":"2021-11-03"},{"lineNumber":139,"author":{"gitId":"astralum"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":140,"author":{"gitId":"astralum"},"content":"        return result;","lastModifiedDate":"2021-10-21"},{"lineNumber":141,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":142,"author":{"gitId":"astralum"},"content":"}","lastModifiedDate":"2021-10-21"}],"authorContributionMap":{"JWweiyin":7,"astralum":25,"ThaddeusLim99":101,"xRossKoh":9}},{"path":"src/main/java/seedu/cardli/commands/system/EnterDeckCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"xRossKoh"},"content":"package seedu.cardli.commands.system;","lastModifiedDate":"2021-10-26"},{"lineNumber":2,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":3,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.commands.Command;","lastModifiedDate":"2021-10-26"},{"lineNumber":4,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.commands.CommandResult;","lastModifiedDate":"2021-10-26"},{"lineNumber":5,"author":{"gitId":"JWweiyin"},"content":"import seedu.cardli.exceptions.CardLiException;","lastModifiedDate":"2021-10-31"},{"lineNumber":6,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.exceptions.DeckNotExistException;","lastModifiedDate":"2021-10-26"},{"lineNumber":7,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.flashcard.Deck;","lastModifiedDate":"2021-10-26"},{"lineNumber":8,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.flashcard.DeckManager;","lastModifiedDate":"2021-10-26"},{"lineNumber":9,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.parser.InnerParser;","lastModifiedDate":"2021-10-26"},{"lineNumber":10,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.parser.Parser;","lastModifiedDate":"2021-10-26"},{"lineNumber":11,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.parser.system.EnterDeckParser;","lastModifiedDate":"2021-10-26"},{"lineNumber":12,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":13,"author":{"gitId":"astralum"},"content":"public class EnterDeckCommand extends Command {","lastModifiedDate":"2021-10-21"},{"lineNumber":14,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":15,"author":{"gitId":"astralum"},"content":"    private EnterDeckParser parser;","lastModifiedDate":"2021-10-21"},{"lineNumber":16,"author":{"gitId":"astralum"},"content":"    private DeckManager deckManager;","lastModifiedDate":"2021-10-21"},{"lineNumber":17,"author":{"gitId":"astralum"},"content":"    private InnerParser innerParser;","lastModifiedDate":"2021-10-21"},{"lineNumber":18,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":19,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":20,"author":{"gitId":"astralum"},"content":"    public EnterDeckCommand(String arguments, DeckManager deckManager, InnerParser innerParser) {","lastModifiedDate":"2021-10-21"},{"lineNumber":21,"author":{"gitId":"astralum"},"content":"        super(\"EnterDeckCommand\", arguments);","lastModifiedDate":"2021-10-21"},{"lineNumber":22,"author":{"gitId":"astralum"},"content":"        this.parser \u003d new EnterDeckParser();","lastModifiedDate":"2021-10-21"},{"lineNumber":23,"author":{"gitId":"astralum"},"content":"        this.deckManager \u003d deckManager;","lastModifiedDate":"2021-10-21"},{"lineNumber":24,"author":{"gitId":"astralum"},"content":"        this.innerParser \u003d innerParser;","lastModifiedDate":"2021-10-21"},{"lineNumber":25,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":26,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":27,"author":{"gitId":"JWweiyin"},"content":"    //@@author JWweiyin","lastModifiedDate":"2021-11-06"},{"lineNumber":28,"author":{"gitId":"JWweiyin"},"content":"    @Override","lastModifiedDate":"2021-10-21"},{"lineNumber":29,"author":{"gitId":"JWweiyin"},"content":"    public CommandResult execute() {","lastModifiedDate":"2021-10-21"},{"lineNumber":30,"author":{"gitId":"JWweiyin"},"content":"        CommandResult result;","lastModifiedDate":"2021-10-21"},{"lineNumber":31,"author":{"gitId":"JWweiyin"},"content":"        try {","lastModifiedDate":"2021-10-21"},{"lineNumber":32,"author":{"gitId":"JWweiyin"},"content":"            String[] parameters \u003d parser.parseArguments(super.arguments);","lastModifiedDate":"2021-10-21"},{"lineNumber":33,"author":{"gitId":"JWweiyin"},"content":"            String enterInput \u003d parameters[0];","lastModifiedDate":"2021-10-21"},{"lineNumber":34,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":35,"author":{"gitId":"JWweiyin"},"content":"            if (enterInput.isEmpty()) {","lastModifiedDate":"2021-10-31"},{"lineNumber":36,"author":{"gitId":"JWweiyin"},"content":"                throw new CardLiException(\"Invalid input. Please input deck index after \\\"enter\\\".\");","lastModifiedDate":"2021-10-31"},{"lineNumber":37,"author":{"gitId":"JWweiyin"},"content":"            }","lastModifiedDate":"2021-10-31"},{"lineNumber":38,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":39,"author":{"gitId":"JWweiyin"},"content":"            if (enterInput.contains(\"-\")) {","lastModifiedDate":"2021-10-31"},{"lineNumber":40,"author":{"gitId":"JWweiyin"},"content":"                throw new DeckNotExistException(\"Invalid deck index. Please input a positive integer.\");","lastModifiedDate":"2021-10-31"},{"lineNumber":41,"author":{"gitId":"JWweiyin"},"content":"            }","lastModifiedDate":"2021-10-31"},{"lineNumber":42,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":43,"author":{"gitId":"JWweiyin"},"content":"            if (!Parser.isInteger(enterInput)) {","lastModifiedDate":"2021-10-21"},{"lineNumber":44,"author":{"gitId":"JWweiyin"},"content":"                throw new NumberFormatException(\"That is not a number.\");","lastModifiedDate":"2021-10-21"},{"lineNumber":45,"author":{"gitId":"JWweiyin"},"content":"            }","lastModifiedDate":"2021-10-21"},{"lineNumber":46,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":47,"author":{"gitId":"JWweiyin"},"content":"            int deckIndex \u003d Integer.parseInt(enterInput) - 1;","lastModifiedDate":"2021-10-21"},{"lineNumber":48,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-31"},{"lineNumber":49,"author":{"gitId":"JWweiyin"},"content":"            if (deckIndex \u003e\u003d deckManager.getDecks().size()) {","lastModifiedDate":"2021-10-31"},{"lineNumber":50,"author":{"gitId":"JWweiyin"},"content":"                throw new DeckNotExistException(\"That deck doesn\u0027t exist. Please input a valid deck index.\");","lastModifiedDate":"2021-10-31"},{"lineNumber":51,"author":{"gitId":"JWweiyin"},"content":"            }","lastModifiedDate":"2021-10-21"},{"lineNumber":52,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":53,"author":{"gitId":"JWweiyin"},"content":"            Deck currDeck \u003d deckManager.getDeck(deckIndex);","lastModifiedDate":"2021-10-21"},{"lineNumber":54,"author":{"gitId":"JWweiyin"},"content":"            this.innerParser.setCurrDeck(currDeck);","lastModifiedDate":"2021-10-21"},{"lineNumber":55,"author":{"gitId":"JWweiyin"},"content":"            this.innerParser.setDeckManager(deckManager);","lastModifiedDate":"2021-10-26"},{"lineNumber":56,"author":{"gitId":"JWweiyin"},"content":"            result \u003d new CommandResult(\"You are now in deck \" + enterInput","lastModifiedDate":"2021-10-21"},{"lineNumber":57,"author":{"gitId":"JWweiyin"},"content":"                    + \". Type \\\"help\\\" for more commands.\", false, true);","lastModifiedDate":"2021-10-21"},{"lineNumber":58,"author":{"gitId":"JWweiyin"},"content":"        } catch (CardLiException e) {","lastModifiedDate":"2021-11-01"},{"lineNumber":59,"author":{"gitId":"JWweiyin"},"content":"            result \u003d new CommandResult(e.getMessage());","lastModifiedDate":"2021-10-21"},{"lineNumber":60,"author":{"gitId":"JWweiyin"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2021-11-01"},{"lineNumber":61,"author":{"gitId":"JWweiyin"},"content":"            result \u003d new CommandResult(\"Deck index must be smaller than 2147483647.\");","lastModifiedDate":"2021-11-01"},{"lineNumber":62,"author":{"gitId":"JWweiyin"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":63,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":64,"author":{"gitId":"JWweiyin"},"content":"        return result;","lastModifiedDate":"2021-10-21"},{"lineNumber":65,"author":{"gitId":"JWweiyin"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":66,"author":{"gitId":"JWweiyin"},"content":"}","lastModifiedDate":"2021-10-21"}],"authorContributionMap":{"JWweiyin":41,"astralum":16,"xRossKoh":9}},{"path":"src/main/java/seedu/cardli/commands/system/ExitProgrammeCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"xRossKoh"},"content":"package seedu.cardli.commands.system;","lastModifiedDate":"2021-10-26"},{"lineNumber":2,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":3,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.commands.Command;","lastModifiedDate":"2021-10-26"},{"lineNumber":4,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.commands.CommandResult;","lastModifiedDate":"2021-10-26"},{"lineNumber":5,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":6,"author":{"gitId":"astralum"},"content":"public class ExitProgrammeCommand extends Command {","lastModifiedDate":"2021-10-21"},{"lineNumber":7,"author":{"gitId":"xkisxk"},"content":"    public ExitProgrammeCommand(String arguments) {","lastModifiedDate":"2021-11-01"},{"lineNumber":8,"author":{"gitId":"xkisxk"},"content":"        super(\"ExitProgrammeCommand\", arguments);","lastModifiedDate":"2021-11-01"},{"lineNumber":9,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":10,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":11,"author":{"gitId":"astralum"},"content":"    @Override","lastModifiedDate":"2021-10-21"},{"lineNumber":12,"author":{"gitId":"astralum"},"content":"    public CommandResult execute() {","lastModifiedDate":"2021-10-21"},{"lineNumber":13,"author":{"gitId":"xkisxk"},"content":"        if (arguments.length() \u003e 0) {","lastModifiedDate":"2021-11-01"},{"lineNumber":14,"author":{"gitId":"xkisxk"},"content":"            return new CommandResult(\"There should not be any arguments.\");","lastModifiedDate":"2021-11-01"},{"lineNumber":15,"author":{"gitId":"xkisxk"},"content":"        }","lastModifiedDate":"2021-11-01"},{"lineNumber":16,"author":{"gitId":"astralum"},"content":"        CommandResult result \u003d new CommandResult(\"Exiting\", true, false);","lastModifiedDate":"2021-10-21"},{"lineNumber":17,"author":{"gitId":"astralum"},"content":"        return result;","lastModifiedDate":"2021-10-21"},{"lineNumber":18,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":19,"author":{"gitId":"astralum"},"content":"}","lastModifiedDate":"2021-10-21"}],"authorContributionMap":{"astralum":11,"xRossKoh":3,"xkisxk":5}},{"path":"src/main/java/seedu/cardli/commands/system/FindCardsCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"xRossKoh"},"content":"package seedu.cardli.commands.system;","lastModifiedDate":"2021-10-26"},{"lineNumber":2,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":3,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.commands.Command;","lastModifiedDate":"2021-10-26"},{"lineNumber":4,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.commands.CommandResult;","lastModifiedDate":"2021-10-26"},{"lineNumber":5,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.exceptions.FieldEmptyException;","lastModifiedDate":"2021-10-26"},{"lineNumber":6,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.flashcard.DeckManager;","lastModifiedDate":"2021-10-26"},{"lineNumber":7,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.parser.system.FindCardsParser;","lastModifiedDate":"2021-10-26"},{"lineNumber":8,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":9,"author":{"gitId":"JWweiyin"},"content":"public class FindCardsCommand extends Command {","lastModifiedDate":"2021-10-23"},{"lineNumber":10,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":11,"author":{"gitId":"JWweiyin"},"content":"    private FindCardsParser parser;","lastModifiedDate":"2021-10-23"},{"lineNumber":12,"author":{"gitId":"JWweiyin"},"content":"    private DeckManager deckManager;","lastModifiedDate":"2021-10-23"},{"lineNumber":13,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":14,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":15,"author":{"gitId":"JWweiyin"},"content":"    public FindCardsCommand(String arguments, DeckManager deckManager) {","lastModifiedDate":"2021-10-23"},{"lineNumber":16,"author":{"gitId":"JWweiyin"},"content":"        super(\"FindCardsCommand\", arguments);","lastModifiedDate":"2021-10-23"},{"lineNumber":17,"author":{"gitId":"JWweiyin"},"content":"        this.deckManager \u003d deckManager;","lastModifiedDate":"2021-10-23"},{"lineNumber":18,"author":{"gitId":"JWweiyin"},"content":"        this.parser \u003d new FindCardsParser();","lastModifiedDate":"2021-10-23"},{"lineNumber":19,"author":{"gitId":"JWweiyin"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":20,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":21,"author":{"gitId":"JWweiyin"},"content":"    @Override","lastModifiedDate":"2021-10-23"},{"lineNumber":22,"author":{"gitId":"JWweiyin"},"content":"    public CommandResult execute() {","lastModifiedDate":"2021-10-23"},{"lineNumber":23,"author":{"gitId":"JWweiyin"},"content":"        CommandResult result;","lastModifiedDate":"2021-10-23"},{"lineNumber":24,"author":{"gitId":"JWweiyin"},"content":"        try {","lastModifiedDate":"2021-10-23"},{"lineNumber":25,"author":{"gitId":"JWweiyin"},"content":"            String[] parameters \u003d parser.parseArguments(super.arguments);","lastModifiedDate":"2021-10-23"},{"lineNumber":26,"author":{"gitId":"JWweiyin"},"content":"            String findInput \u003d parameters[0];","lastModifiedDate":"2021-10-23"},{"lineNumber":27,"author":{"gitId":"JWweiyin"},"content":"            if (findInput.isEmpty()) {","lastModifiedDate":"2021-10-23"},{"lineNumber":28,"author":{"gitId":"JWweiyin"},"content":"                throw new FieldEmptyException(\"You did not input a search term.\");","lastModifiedDate":"2021-10-23"},{"lineNumber":29,"author":{"gitId":"JWweiyin"},"content":"            }","lastModifiedDate":"2021-10-23"},{"lineNumber":30,"author":{"gitId":"JWweiyin"},"content":"            result \u003d new CommandResult(deckManager.findCards(findInput));","lastModifiedDate":"2021-10-23"},{"lineNumber":31,"author":{"gitId":"JWweiyin"},"content":"        } catch (FieldEmptyException e) {","lastModifiedDate":"2021-10-23"},{"lineNumber":32,"author":{"gitId":"JWweiyin"},"content":"            result \u003d new CommandResult(e.getMessage());","lastModifiedDate":"2021-10-23"},{"lineNumber":33,"author":{"gitId":"JWweiyin"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":34,"author":{"gitId":"JWweiyin"},"content":"        return result;","lastModifiedDate":"2021-10-23"},{"lineNumber":35,"author":{"gitId":"JWweiyin"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":36,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":37,"author":{"gitId":"JWweiyin"},"content":"}","lastModifiedDate":"2021-10-23"}],"authorContributionMap":{"JWweiyin":31,"xRossKoh":6}},{"path":"src/main/java/seedu/cardli/commands/system/HelpCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"astralum"},"content":"//@@author astralum","lastModifiedDate":"2021-11-06"},{"lineNumber":2,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":3,"author":{"gitId":"astralum"},"content":"package seedu.cardli.commands.system;","lastModifiedDate":"2021-10-26"},{"lineNumber":4,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":5,"author":{"gitId":"astralum"},"content":"import seedu.cardli.commands.Command;","lastModifiedDate":"2021-10-26"},{"lineNumber":6,"author":{"gitId":"astralum"},"content":"import seedu.cardli.commands.CommandResult;","lastModifiedDate":"2021-10-26"},{"lineNumber":7,"author":{"gitId":"astralum"},"content":"import seedu.cardli.ui.CardLiUi;","lastModifiedDate":"2021-10-26"},{"lineNumber":8,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":9,"author":{"gitId":"astralum"},"content":"public class HelpCommand extends Command {","lastModifiedDate":"2021-10-26"},{"lineNumber":10,"author":{"gitId":"astralum"},"content":"    public HelpCommand(String arguments) {","lastModifiedDate":"2021-11-01"},{"lineNumber":11,"author":{"gitId":"astralum"},"content":"        super(\"HelpCommand\", arguments);","lastModifiedDate":"2021-11-01"},{"lineNumber":12,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":13,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":14,"author":{"gitId":"astralum"},"content":"    @Override","lastModifiedDate":"2021-10-26"},{"lineNumber":15,"author":{"gitId":"astralum"},"content":"    public CommandResult execute() {","lastModifiedDate":"2021-10-26"},{"lineNumber":16,"author":{"gitId":"astralum"},"content":"        if (arguments.length() \u003e 0) {","lastModifiedDate":"2021-11-01"},{"lineNumber":17,"author":{"gitId":"astralum"},"content":"            return new CommandResult(\"There should not be any arguments.\");","lastModifiedDate":"2021-11-01"},{"lineNumber":18,"author":{"gitId":"astralum"},"content":"        }","lastModifiedDate":"2021-11-01"},{"lineNumber":19,"author":{"gitId":"astralum"},"content":"        CommandResult result \u003d new CommandResult(CardLiUi.returnHelpMessage());","lastModifiedDate":"2021-10-26"},{"lineNumber":20,"author":{"gitId":"astralum"},"content":"        return result;","lastModifiedDate":"2021-10-26"},{"lineNumber":21,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":22,"author":{"gitId":"astralum"},"content":"}","lastModifiedDate":"2021-10-26"}],"authorContributionMap":{"astralum":22}},{"path":"src/main/java/seedu/cardli/commands/system/ReviewCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"xRossKoh"},"content":"package seedu.cardli.commands.system;","lastModifiedDate":"2021-10-26"},{"lineNumber":2,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":3,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.commands.Command;","lastModifiedDate":"2021-10-26"},{"lineNumber":4,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.commands.CommandResult;","lastModifiedDate":"2021-10-26"},{"lineNumber":5,"author":{"gitId":"xkisxk"},"content":"import seedu.cardli.testing.TestManager;","lastModifiedDate":"2021-11-03"},{"lineNumber":6,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":7,"author":{"gitId":"xkisxk"},"content":"public class ReviewCommand extends Command {","lastModifiedDate":"2021-10-25"},{"lineNumber":8,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":9,"author":{"gitId":"xkisxk"},"content":"    private final TestManager testManager;","lastModifiedDate":"2021-11-03"},{"lineNumber":10,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":11,"author":{"gitId":"xkisxk"},"content":"    public ReviewCommand(String arguments, TestManager testManager) {","lastModifiedDate":"2021-11-03"},{"lineNumber":12,"author":{"gitId":"xkisxk"},"content":"        super(\"ReviewCommand\", arguments);","lastModifiedDate":"2021-11-01"},{"lineNumber":13,"author":{"gitId":"xkisxk"},"content":"        this.testManager \u003d testManager;","lastModifiedDate":"2021-11-03"},{"lineNumber":14,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":15,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":16,"author":{"gitId":"xkisxk"},"content":"    @Override","lastModifiedDate":"2021-10-25"},{"lineNumber":17,"author":{"gitId":"xkisxk"},"content":"    public CommandResult execute() {","lastModifiedDate":"2021-10-25"},{"lineNumber":18,"author":{"gitId":"xkisxk"},"content":"        CommandResult result;","lastModifiedDate":"2021-10-25"},{"lineNumber":19,"author":{"gitId":"xkisxk"},"content":"        if (arguments.length() \u003e 0) {","lastModifiedDate":"2021-11-01"},{"lineNumber":20,"author":{"gitId":"xkisxk"},"content":"            return new CommandResult(\"There should not be any arguments.\");","lastModifiedDate":"2021-11-01"},{"lineNumber":21,"author":{"gitId":"xkisxk"},"content":"        }","lastModifiedDate":"2021-11-01"},{"lineNumber":22,"author":{"gitId":"xkisxk"},"content":"        result \u003d new CommandResult(testManager.startReview(), false, false);","lastModifiedDate":"2021-11-03"},{"lineNumber":23,"author":{"gitId":"xkisxk"},"content":"        return result;","lastModifiedDate":"2021-10-25"},{"lineNumber":24,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":25,"author":{"gitId":"xkisxk"},"content":"}","lastModifiedDate":"2021-10-25"}],"authorContributionMap":{"xRossKoh":3,"xkisxk":22}},{"path":"src/main/java/seedu/cardli/commands/system/TestCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"xRossKoh"},"content":"package seedu.cardli.commands.system;","lastModifiedDate":"2021-10-26"},{"lineNumber":2,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":3,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.commands.Command;","lastModifiedDate":"2021-10-26"},{"lineNumber":4,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.commands.CommandResult;","lastModifiedDate":"2021-10-26"},{"lineNumber":5,"author":{"gitId":"xkisxk"},"content":"import seedu.cardli.testing.TestManager;","lastModifiedDate":"2021-11-03"},{"lineNumber":6,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":7,"author":{"gitId":"astralum"},"content":"public class TestCommand extends Command {","lastModifiedDate":"2021-10-23"},{"lineNumber":8,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":9,"author":{"gitId":"xkisxk"},"content":"    private final TestManager testManager;","lastModifiedDate":"2021-11-03"},{"lineNumber":10,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":11,"author":{"gitId":"xkisxk"},"content":"    public TestCommand(String arguments, TestManager testManager) {","lastModifiedDate":"2021-11-03"},{"lineNumber":12,"author":{"gitId":"xkisxk"},"content":"        super(\"TestCommand\", arguments);","lastModifiedDate":"2021-11-01"},{"lineNumber":13,"author":{"gitId":"xkisxk"},"content":"        this.testManager \u003d testManager;","lastModifiedDate":"2021-11-03"},{"lineNumber":14,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":15,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":16,"author":{"gitId":"astralum"},"content":"    @Override","lastModifiedDate":"2021-10-23"},{"lineNumber":17,"author":{"gitId":"astralum"},"content":"    public CommandResult execute() {","lastModifiedDate":"2021-10-23"},{"lineNumber":18,"author":{"gitId":"xkisxk"},"content":"        CommandResult result;","lastModifiedDate":"2021-10-24"},{"lineNumber":19,"author":{"gitId":"xkisxk"},"content":"        if (arguments.length() \u003e 0) {","lastModifiedDate":"2021-11-01"},{"lineNumber":20,"author":{"gitId":"xkisxk"},"content":"            return new CommandResult(\"There should not be any arguments.\");","lastModifiedDate":"2021-11-01"},{"lineNumber":21,"author":{"gitId":"xkisxk"},"content":"        }","lastModifiedDate":"2021-11-01"},{"lineNumber":22,"author":{"gitId":"xkisxk"},"content":"        result \u003d new CommandResult(testManager.startTest(), false, false);","lastModifiedDate":"2021-11-03"},{"lineNumber":23,"author":{"gitId":"xkisxk"},"content":"        return result;","lastModifiedDate":"2021-10-24"},{"lineNumber":24,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":25,"author":{"gitId":"astralum"},"content":"}","lastModifiedDate":"2021-10-23"}],"authorContributionMap":{"astralum":10,"xRossKoh":3,"xkisxk":12}},{"path":"src/main/java/seedu/cardli/commands/system/ViewDecksCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"xRossKoh"},"content":"package seedu.cardli.commands.system;","lastModifiedDate":"2021-10-26"},{"lineNumber":2,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":3,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.commands.Command;","lastModifiedDate":"2021-10-26"},{"lineNumber":4,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.commands.CommandResult;","lastModifiedDate":"2021-10-26"},{"lineNumber":5,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.flashcard.DeckManager;","lastModifiedDate":"2021-10-26"},{"lineNumber":6,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":7,"author":{"gitId":"astralum"},"content":"public class ViewDecksCommand extends Command {","lastModifiedDate":"2021-10-23"},{"lineNumber":8,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":9,"author":{"gitId":"astralum"},"content":"    private DeckManager deckManager;","lastModifiedDate":"2021-10-23"},{"lineNumber":10,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":11,"author":{"gitId":"xkisxk"},"content":"    public ViewDecksCommand(DeckManager deckManager, String arguments) {","lastModifiedDate":"2021-11-01"},{"lineNumber":12,"author":{"gitId":"xkisxk"},"content":"        super(\"ViewDecksCommand\", arguments);","lastModifiedDate":"2021-11-01"},{"lineNumber":13,"author":{"gitId":"astralum"},"content":"        this.deckManager \u003d deckManager;","lastModifiedDate":"2021-10-23"},{"lineNumber":14,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":15,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":16,"author":{"gitId":"astralum"},"content":"    @Override","lastModifiedDate":"2021-10-23"},{"lineNumber":17,"author":{"gitId":"astralum"},"content":"    public CommandResult execute() {","lastModifiedDate":"2021-10-23"},{"lineNumber":18,"author":{"gitId":"xkisxk"},"content":"        if (arguments.length() \u003e 0) {","lastModifiedDate":"2021-11-01"},{"lineNumber":19,"author":{"gitId":"xkisxk"},"content":"            return new CommandResult(\"There should not be any arguments.\");","lastModifiedDate":"2021-11-01"},{"lineNumber":20,"author":{"gitId":"xkisxk"},"content":"        }","lastModifiedDate":"2021-11-01"},{"lineNumber":21,"author":{"gitId":"astralum"},"content":"        CommandResult result \u003d new CommandResult(this.deckManager.viewDecks());","lastModifiedDate":"2021-10-23"},{"lineNumber":22,"author":{"gitId":"astralum"},"content":"        return result;","lastModifiedDate":"2021-10-23"},{"lineNumber":23,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":24,"author":{"gitId":"astralum"},"content":"}","lastModifiedDate":"2021-10-23"}],"authorContributionMap":{"astralum":15,"xRossKoh":4,"xkisxk":5}},{"path":"src/main/java/seedu/cardli/commands/system/ViewFlashCardStatsCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"xRossKoh"},"content":"package seedu.cardli.commands.system;","lastModifiedDate":"2021-10-26"},{"lineNumber":2,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":3,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.commands.Command;","lastModifiedDate":"2021-10-26"},{"lineNumber":4,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.commands.CommandResult;","lastModifiedDate":"2021-10-26"},{"lineNumber":5,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.testing.TestHistory;","lastModifiedDate":"2021-10-26"},{"lineNumber":6,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":7,"author":{"gitId":"xkisxk"},"content":"public class ViewFlashCardStatsCommand extends Command {","lastModifiedDate":"2021-10-25"},{"lineNumber":8,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":9,"author":{"gitId":"xkisxk"},"content":"    private final TestHistory testHistory;","lastModifiedDate":"2021-10-25"},{"lineNumber":10,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":11,"author":{"gitId":"xkisxk"},"content":"    public ViewFlashCardStatsCommand(String arguments, TestHistory testHistory) {","lastModifiedDate":"2021-10-31"},{"lineNumber":12,"author":{"gitId":"xkisxk"},"content":"        super(\"ViewFlashCardStatsCommand\", arguments);","lastModifiedDate":"2021-10-31"},{"lineNumber":13,"author":{"gitId":"xkisxk"},"content":"        this.testHistory \u003d testHistory;","lastModifiedDate":"2021-10-25"},{"lineNumber":14,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":15,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":16,"author":{"gitId":"xkisxk"},"content":"    @Override","lastModifiedDate":"2021-10-25"},{"lineNumber":17,"author":{"gitId":"xkisxk"},"content":"    public CommandResult execute() {","lastModifiedDate":"2021-10-25"},{"lineNumber":18,"author":{"gitId":"xkisxk"},"content":"        if (arguments.length() \u003e 0) {","lastModifiedDate":"2021-10-31"},{"lineNumber":19,"author":{"gitId":"xkisxk"},"content":"            return new CommandResult(\"There should not be any arguments.\");","lastModifiedDate":"2021-10-31"},{"lineNumber":20,"author":{"gitId":"xkisxk"},"content":"        }","lastModifiedDate":"2021-10-31"},{"lineNumber":21,"author":{"gitId":"xkisxk"},"content":"        return new CommandResult(testHistory.viewAllFlashcardStats());","lastModifiedDate":"2021-10-25"},{"lineNumber":22,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":23,"author":{"gitId":"xkisxk"},"content":"}","lastModifiedDate":"2021-10-25"}],"authorContributionMap":{"xRossKoh":4,"xkisxk":19}},{"path":"src/main/java/seedu/cardli/commands/system/ViewTestCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"xRossKoh"},"content":"package seedu.cardli.commands.system;","lastModifiedDate":"2021-10-26"},{"lineNumber":2,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":3,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.commands.Command;","lastModifiedDate":"2021-10-26"},{"lineNumber":4,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.commands.CommandResult;","lastModifiedDate":"2021-10-26"},{"lineNumber":5,"author":{"gitId":"xkisxk"},"content":"import seedu.cardli.exceptions.DeckNotExistException;","lastModifiedDate":"2021-11-03"},{"lineNumber":6,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.parser.TestParser;","lastModifiedDate":"2021-10-26"},{"lineNumber":7,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.testing.TestHistory;","lastModifiedDate":"2021-10-26"},{"lineNumber":8,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":9,"author":{"gitId":"xkisxk"},"content":"public class ViewTestCommand extends Command {","lastModifiedDate":"2021-10-25"},{"lineNumber":10,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":11,"author":{"gitId":"xkisxk"},"content":"    private final TestHistory testHistory;","lastModifiedDate":"2021-10-25"},{"lineNumber":12,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":13,"author":{"gitId":"xkisxk"},"content":"    public ViewTestCommand(String arguments, TestHistory testHistory) {","lastModifiedDate":"2021-10-25"},{"lineNumber":14,"author":{"gitId":"xkisxk"},"content":"        super(\"ViewTestCommand\", arguments);","lastModifiedDate":"2021-10-25"},{"lineNumber":15,"author":{"gitId":"xkisxk"},"content":"        this.testHistory \u003d testHistory;","lastModifiedDate":"2021-10-25"},{"lineNumber":16,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":17,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":18,"author":{"gitId":"xkisxk"},"content":"    @Override","lastModifiedDate":"2021-10-25"},{"lineNumber":19,"author":{"gitId":"xkisxk"},"content":"    public CommandResult execute() {","lastModifiedDate":"2021-10-25"},{"lineNumber":20,"author":{"gitId":"xkisxk"},"content":"        CommandResult result;","lastModifiedDate":"2021-10-25"},{"lineNumber":21,"author":{"gitId":"xkisxk"},"content":"        try {","lastModifiedDate":"2021-10-25"},{"lineNumber":22,"author":{"gitId":"xkisxk"},"content":"            int index \u003d TestParser.toInt(super.arguments.trim());","lastModifiedDate":"2021-10-25"},{"lineNumber":23,"author":{"gitId":"xkisxk"},"content":"            result \u003d new CommandResult(testHistory.prepareViewTest(index));","lastModifiedDate":"2021-10-25"},{"lineNumber":24,"author":{"gitId":"xkisxk"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2021-10-25"},{"lineNumber":25,"author":{"gitId":"JWweiyin"},"content":"            result \u003d new CommandResult(\"Input a positive integer or \\\"all\\\" after viewtest.\");","lastModifiedDate":"2021-11-02"},{"lineNumber":26,"author":{"gitId":"xkisxk"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2021-10-31"},{"lineNumber":27,"author":{"gitId":"xkisxk"},"content":"            result \u003d new CommandResult(\"There is no test at that index.\");","lastModifiedDate":"2021-10-31"},{"lineNumber":28,"author":{"gitId":"xkisxk"},"content":"        } catch (DeckNotExistException e) {","lastModifiedDate":"2021-11-03"},{"lineNumber":29,"author":{"gitId":"xkisxk"},"content":"            result \u003d new CommandResult(\"You have not taken any tests.\");","lastModifiedDate":"2021-11-03"},{"lineNumber":30,"author":{"gitId":"xkisxk"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":31,"author":{"gitId":"xkisxk"},"content":"        return result;","lastModifiedDate":"2021-10-25"},{"lineNumber":32,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":33,"author":{"gitId":"xkisxk"},"content":"}","lastModifiedDate":"2021-10-25"}],"authorContributionMap":{"JWweiyin":1,"xRossKoh":5,"xkisxk":27}},{"path":"src/main/java/seedu/cardli/exceptions/CardLiException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"xRossKoh"},"content":"package seedu.cardli.exceptions;","lastModifiedDate":"2021-10-26"},{"lineNumber":2,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":3,"author":{"gitId":"xkisxk"},"content":"public class CardLiException extends Exception {","lastModifiedDate":"2021-10-04"},{"lineNumber":4,"author":{"gitId":"xkisxk"},"content":"    public CardLiException() {","lastModifiedDate":"2021-10-17"},{"lineNumber":5,"author":{"gitId":"xkisxk"},"content":"        super();","lastModifiedDate":"2021-10-17"},{"lineNumber":6,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":7,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":8,"author":{"gitId":"xkisxk"},"content":"    public CardLiException(String message) {","lastModifiedDate":"2021-10-17"},{"lineNumber":9,"author":{"gitId":"xkisxk"},"content":"        super(message);","lastModifiedDate":"2021-10-17"},{"lineNumber":10,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":11,"author":{"gitId":"xkisxk"},"content":"}","lastModifiedDate":"2021-10-04"}],"authorContributionMap":{"xRossKoh":1,"xkisxk":10}},{"path":"src/main/java/seedu/cardli/exceptions/DeckNotExistException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"xRossKoh"},"content":"package seedu.cardli.exceptions;","lastModifiedDate":"2021-10-26"},{"lineNumber":2,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":3,"author":{"gitId":"JWweiyin"},"content":"public class DeckNotExistException extends CardLiException {","lastModifiedDate":"2021-10-16"},{"lineNumber":4,"author":{"gitId":"xkisxk"},"content":"    public DeckNotExistException() {","lastModifiedDate":"2021-10-17"},{"lineNumber":5,"author":{"gitId":"xkisxk"},"content":"        super();","lastModifiedDate":"2021-10-17"},{"lineNumber":6,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":7,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":8,"author":{"gitId":"xkisxk"},"content":"    public DeckNotExistException(String message) {","lastModifiedDate":"2021-10-17"},{"lineNumber":9,"author":{"gitId":"xkisxk"},"content":"        super(message);","lastModifiedDate":"2021-10-17"},{"lineNumber":10,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":11,"author":{"gitId":"JWweiyin"},"content":"}","lastModifiedDate":"2021-10-16"}],"authorContributionMap":{"JWweiyin":3,"xRossKoh":1,"xkisxk":7}},{"path":"src/main/java/seedu/cardli/exceptions/EmptyDeckException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"xRossKoh"},"content":"package seedu.cardli.exceptions;","lastModifiedDate":"2021-10-26"},{"lineNumber":2,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":3,"author":{"gitId":"xkisxk"},"content":"public class EmptyDeckException extends CardLiException {","lastModifiedDate":"2021-10-21"},{"lineNumber":4,"author":{"gitId":"xkisxk"},"content":"    public EmptyDeckException() {","lastModifiedDate":"2021-10-21"},{"lineNumber":5,"author":{"gitId":"xkisxk"},"content":"        super();","lastModifiedDate":"2021-10-21"},{"lineNumber":6,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":7,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":8,"author":{"gitId":"xkisxk"},"content":"    public EmptyDeckException(String message) {","lastModifiedDate":"2021-10-21"},{"lineNumber":9,"author":{"gitId":"xkisxk"},"content":"        super(message);","lastModifiedDate":"2021-10-21"},{"lineNumber":10,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":11,"author":{"gitId":"xkisxk"},"content":"}","lastModifiedDate":"2021-10-21"}],"authorContributionMap":{"xRossKoh":1,"xkisxk":10}},{"path":"src/main/java/seedu/cardli/exceptions/FieldEmptyException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"xRossKoh"},"content":"package seedu.cardli.exceptions;","lastModifiedDate":"2021-10-26"},{"lineNumber":2,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-02"},{"lineNumber":3,"author":{"gitId":"xRossKoh"},"content":"/**","lastModifiedDate":"2021-10-06"},{"lineNumber":4,"author":{"gitId":"xRossKoh"},"content":" * Represents exception thrown when a field that is expected to be filled is empty.","lastModifiedDate":"2021-10-06"},{"lineNumber":5,"author":{"gitId":"xRossKoh"},"content":" */","lastModifiedDate":"2021-10-06"},{"lineNumber":6,"author":{"gitId":"xRossKoh"},"content":"public class FieldEmptyException extends CardLiException {","lastModifiedDate":"2021-10-07"},{"lineNumber":7,"author":{"gitId":"xkisxk"},"content":"    public FieldEmptyException() {","lastModifiedDate":"2021-10-17"},{"lineNumber":8,"author":{"gitId":"xkisxk"},"content":"        super();","lastModifiedDate":"2021-10-17"},{"lineNumber":9,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":10,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":11,"author":{"gitId":"xkisxk"},"content":"    public FieldEmptyException(String message) {","lastModifiedDate":"2021-10-17"},{"lineNumber":12,"author":{"gitId":"xkisxk"},"content":"        super(message);","lastModifiedDate":"2021-10-17"},{"lineNumber":13,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":14,"author":{"gitId":"JWweiyin"},"content":"}","lastModifiedDate":"2021-10-02"}],"authorContributionMap":{"JWweiyin":2,"xRossKoh":5,"xkisxk":7}},{"path":"src/main/java/seedu/cardli/exceptions/InvalidCommandFormatException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"xRossKoh"},"content":"package seedu.cardli.exceptions;","lastModifiedDate":"2021-10-26"},{"lineNumber":2,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":3,"author":{"gitId":"ThaddeusLim99"},"content":"/**","lastModifiedDate":"2021-10-17"},{"lineNumber":4,"author":{"gitId":"ThaddeusLim99"},"content":" * Represents exception thrown when a field that is expected to be filled is empty.","lastModifiedDate":"2021-10-17"},{"lineNumber":5,"author":{"gitId":"ThaddeusLim99"},"content":" */","lastModifiedDate":"2021-10-17"},{"lineNumber":6,"author":{"gitId":"ThaddeusLim99"},"content":"public class InvalidCommandFormatException extends CardLiException {","lastModifiedDate":"2021-10-17"},{"lineNumber":7,"author":{"gitId":"ThaddeusLim99"},"content":"    public InvalidCommandFormatException() {","lastModifiedDate":"2021-10-17"},{"lineNumber":8,"author":{"gitId":"ThaddeusLim99"},"content":"        super();","lastModifiedDate":"2021-10-17"},{"lineNumber":9,"author":{"gitId":"ThaddeusLim99"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":10,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":11,"author":{"gitId":"ThaddeusLim99"},"content":"    public InvalidCommandFormatException(String message) {","lastModifiedDate":"2021-10-17"},{"lineNumber":12,"author":{"gitId":"ThaddeusLim99"},"content":"        super(message);","lastModifiedDate":"2021-10-17"},{"lineNumber":13,"author":{"gitId":"ThaddeusLim99"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":14,"author":{"gitId":"ThaddeusLim99"},"content":"}","lastModifiedDate":"2021-10-17"}],"authorContributionMap":{"ThaddeusLim99":13,"xRossKoh":1}},{"path":"src/main/java/seedu/cardli/exceptions/NoSlashException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"xRossKoh"},"content":"package seedu.cardli.exceptions;","lastModifiedDate":"2021-10-26"},{"lineNumber":2,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-02"},{"lineNumber":3,"author":{"gitId":"xRossKoh"},"content":"/**","lastModifiedDate":"2021-10-06"},{"lineNumber":4,"author":{"gitId":"xRossKoh"},"content":" * Represents exception thrown when user input does not contain \u0027/\u0027 character when invoking certain commands.","lastModifiedDate":"2021-10-06"},{"lineNumber":5,"author":{"gitId":"xRossKoh"},"content":" */","lastModifiedDate":"2021-10-06"},{"lineNumber":6,"author":{"gitId":"xRossKoh"},"content":"public class NoSlashException extends CardLiException {","lastModifiedDate":"2021-10-07"},{"lineNumber":7,"author":{"gitId":"xkisxk"},"content":"    public NoSlashException() {","lastModifiedDate":"2021-10-17"},{"lineNumber":8,"author":{"gitId":"xkisxk"},"content":"        super();","lastModifiedDate":"2021-10-17"},{"lineNumber":9,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":10,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":11,"author":{"gitId":"xkisxk"},"content":"    public NoSlashException(String message) {","lastModifiedDate":"2021-10-17"},{"lineNumber":12,"author":{"gitId":"xkisxk"},"content":"        super(message);","lastModifiedDate":"2021-10-17"},{"lineNumber":13,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":14,"author":{"gitId":"JWweiyin"},"content":"}","lastModifiedDate":"2021-10-02"}],"authorContributionMap":{"JWweiyin":2,"xRossKoh":5,"xkisxk":7}},{"path":"src/main/java/seedu/cardli/flashcard/Deck.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"xRossKoh"},"content":"package seedu.cardli.flashcard;","lastModifiedDate":"2021-10-26"},{"lineNumber":2,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-02"},{"lineNumber":3,"author":{"gitId":"xRossKoh"},"content":"import org.json.simple.JSONArray;","lastModifiedDate":"2021-11-01"},{"lineNumber":4,"author":{"gitId":"xRossKoh"},"content":"import org.json.simple.JSONObject;","lastModifiedDate":"2021-11-01"},{"lineNumber":5,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.exceptions.CardLiException;","lastModifiedDate":"2021-10-26"},{"lineNumber":6,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.exceptions.FieldEmptyException;","lastModifiedDate":"2021-10-26"},{"lineNumber":7,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.exceptions.NoSlashException;","lastModifiedDate":"2021-10-26"},{"lineNumber":8,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.parser.Parser;","lastModifiedDate":"2021-10-26"},{"lineNumber":9,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-02"},{"lineNumber":10,"author":{"gitId":"JWweiyin"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-02"},{"lineNumber":11,"author":{"gitId":"JWweiyin"},"content":"import java.util.Locale;","lastModifiedDate":"2021-11-06"},{"lineNumber":12,"author":{"gitId":"xkisxk"},"content":"import java.util.logging.Level;","lastModifiedDate":"2021-10-10"},{"lineNumber":13,"author":{"gitId":"xkisxk"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-10-10"},{"lineNumber":14,"author":{"gitId":"JWweiyin"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2021-10-23"},{"lineNumber":15,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-02"},{"lineNumber":16,"author":{"gitId":"xRossKoh"},"content":"/**","lastModifiedDate":"2021-10-06"},{"lineNumber":17,"author":{"gitId":"xRossKoh"},"content":" * Implements the list of added flashcards.","lastModifiedDate":"2021-10-06"},{"lineNumber":18,"author":{"gitId":"xRossKoh"},"content":" */","lastModifiedDate":"2021-10-06"},{"lineNumber":19,"author":{"gitId":"xkisxk"},"content":"public class Deck {","lastModifiedDate":"2021-10-16"},{"lineNumber":20,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":21,"author":{"gitId":"xkisxk"},"content":"    private static final String CARD_DOES_NOT_EXIST_ERROR_MESSAGE \u003d","lastModifiedDate":"2021-10-25"},{"lineNumber":22,"author":{"gitId":"xkisxk"},"content":"            \"\\tThe card you are trying to delete does not exist.\";","lastModifiedDate":"2021-10-25"},{"lineNumber":23,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":24,"author":{"gitId":"ThaddeusLim99"},"content":"    private final ArrayList\u003cFlashCard\u003e cards \u003d new ArrayList\u003cFlashCard\u003e();","lastModifiedDate":"2021-10-26"},{"lineNumber":25,"author":{"gitId":"xkisxk"},"content":"    private String name;","lastModifiedDate":"2021-10-17"},{"lineNumber":26,"author":{"gitId":"xkisxk"},"content":"    private static final Logger logger \u003d Logger.getLogger(Deck.class.getName());","lastModifiedDate":"2021-10-16"},{"lineNumber":27,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-02"},{"lineNumber":28,"author":{"gitId":"xkisxk"},"content":"    public Deck(String name) {","lastModifiedDate":"2021-10-17"},{"lineNumber":29,"author":{"gitId":"xkisxk"},"content":"        this.name \u003d name;","lastModifiedDate":"2021-10-17"},{"lineNumber":30,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":31,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":32,"author":{"gitId":"xkisxk"},"content":"    public Deck() {","lastModifiedDate":"2021-10-17"},{"lineNumber":33,"author":{"gitId":"xkisxk"},"content":"        this.name \u003d \"Untitled\";","lastModifiedDate":"2021-10-17"},{"lineNumber":34,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":35,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":36,"author":{"gitId":"JWweiyin"},"content":"    public boolean hasSameName(String input) {","lastModifiedDate":"2021-10-26"},{"lineNumber":37,"author":{"gitId":"JWweiyin"},"content":"        return name.trim().equals(input.trim());","lastModifiedDate":"2021-10-26"},{"lineNumber":38,"author":{"gitId":"JWweiyin"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":39,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":40,"author":{"gitId":"ThaddeusLim99"},"content":"    //@@author ThaddeusLim99","lastModifiedDate":"2021-11-06"},{"lineNumber":41,"author":{"gitId":"ThaddeusLim99"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":42,"author":{"gitId":"ThaddeusLim99"},"content":"     * Returns the details of the edit that took place as a message.","lastModifiedDate":"2021-11-07"},{"lineNumber":43,"author":{"gitId":"ThaddeusLim99"},"content":"     *","lastModifiedDate":"2021-11-07"},{"lineNumber":44,"author":{"gitId":"ThaddeusLim99"},"content":"     * @param parameters string array containing the  card index, side and input.","lastModifiedDate":"2021-11-07"},{"lineNumber":45,"author":{"gitId":"ThaddeusLim99"},"content":"     * @return the details of the transfer that took place as a message.","lastModifiedDate":"2021-11-07"},{"lineNumber":46,"author":{"gitId":"ThaddeusLim99"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":47,"author":{"gitId":"ThaddeusLim99"},"content":"    public String editCard(String[] parameters) {","lastModifiedDate":"2021-10-23"},{"lineNumber":48,"author":{"gitId":"ThaddeusLim99"},"content":"        String enteredCardIndex \u003d parameters[0];","lastModifiedDate":"2021-10-23"},{"lineNumber":49,"author":{"gitId":"ThaddeusLim99"},"content":"        int cardIndex \u003d Integer.parseInt(enteredCardIndex) - 1;","lastModifiedDate":"2021-10-23"},{"lineNumber":50,"author":{"gitId":"ThaddeusLim99"},"content":"        String side \u003d parameters[1];","lastModifiedDate":"2021-10-23"},{"lineNumber":51,"author":{"gitId":"ThaddeusLim99"},"content":"        boolean isFront \u003d side.equalsIgnoreCase(\"front\");","lastModifiedDate":"2021-10-23"},{"lineNumber":52,"author":{"gitId":"ThaddeusLim99"},"content":"        String changeTo \u003d parameters[2];","lastModifiedDate":"2021-10-23"},{"lineNumber":53,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":54,"author":{"gitId":"ThaddeusLim99"},"content":"        if (isFront) {","lastModifiedDate":"2021-10-23"},{"lineNumber":55,"author":{"gitId":"ThaddeusLim99"},"content":"            cards.get(cardIndex).setFront(changeTo);","lastModifiedDate":"2021-10-23"},{"lineNumber":56,"author":{"gitId":"ThaddeusLim99"},"content":"        } else {","lastModifiedDate":"2021-10-20"},{"lineNumber":57,"author":{"gitId":"ThaddeusLim99"},"content":"            cards.get(cardIndex).setBack(changeTo);","lastModifiedDate":"2021-10-23"},{"lineNumber":58,"author":{"gitId":"ThaddeusLim99"},"content":"        }","lastModifiedDate":"2021-10-20"},{"lineNumber":59,"author":{"gitId":"ThaddeusLim99"},"content":"        return (\"Changed \" + side + \" of card \" + enteredCardIndex + \" to \" + changeTo);","lastModifiedDate":"2021-10-23"},{"lineNumber":60,"author":{"gitId":"ThaddeusLim99"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":61,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":62,"author":{"gitId":"JWweiyin"},"content":"    //@@author JWweiyin","lastModifiedDate":"2021-11-06"},{"lineNumber":63,"author":{"gitId":"JWweiyin"},"content":"    private String returnNewFlashCard(String front, String back) {","lastModifiedDate":"2021-10-21"},{"lineNumber":64,"author":{"gitId":"JWweiyin"},"content":"        String result \u003d \"\\tAdded card:\" + System.lineSeparator()","lastModifiedDate":"2021-10-23"},{"lineNumber":65,"author":{"gitId":"JWweiyin"},"content":"                + returnCardInfo(front, back);","lastModifiedDate":"2021-10-23"},{"lineNumber":66,"author":{"gitId":"JWweiyin"},"content":"        if (getDeckSize() \u003d\u003d 1) {","lastModifiedDate":"2021-10-18"},{"lineNumber":67,"author":{"gitId":"JWweiyin"},"content":"            result \u003d result.concat(\"\\tYou have \" + getDeckSize()","lastModifiedDate":"2021-10-23"},{"lineNumber":68,"author":{"gitId":"JWweiyin"},"content":"                    + \" card in your card deck.\" + System.lineSeparator());","lastModifiedDate":"2021-10-23"},{"lineNumber":69,"author":{"gitId":"JWweiyin"},"content":"        } else {","lastModifiedDate":"2021-10-02"},{"lineNumber":70,"author":{"gitId":"JWweiyin"},"content":"            result \u003d result.concat(\"\\tYou have \" + getDeckSize()","lastModifiedDate":"2021-10-23"},{"lineNumber":71,"author":{"gitId":"JWweiyin"},"content":"                    + \" cards in your card deck.\" + System.lineSeparator());","lastModifiedDate":"2021-10-23"},{"lineNumber":72,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":73,"author":{"gitId":"JWweiyin"},"content":"        }","lastModifiedDate":"2021-10-02"},{"lineNumber":74,"author":{"gitId":"JWweiyin"},"content":"        return result;","lastModifiedDate":"2021-10-21"},{"lineNumber":75,"author":{"gitId":"JWweiyin"},"content":"    }","lastModifiedDate":"2021-10-02"},{"lineNumber":76,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-02"},{"lineNumber":77,"author":{"gitId":"JWweiyin"},"content":"    private String returnCardInfo(String front, String back) {","lastModifiedDate":"2021-10-23"},{"lineNumber":78,"author":{"gitId":"JWweiyin"},"content":"        return \"\\t\\tFront: \" + front + System.lineSeparator()","lastModifiedDate":"2021-10-23"},{"lineNumber":79,"author":{"gitId":"JWweiyin"},"content":"                + \"\\t\\tBack: \" + back + System.lineSeparator();","lastModifiedDate":"2021-10-23"},{"lineNumber":80,"author":{"gitId":"JWweiyin"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":81,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":82,"author":{"gitId":"JWweiyin"},"content":"    private String returnDeletedFlashCardMessage(String front, String back) {","lastModifiedDate":"2021-10-21"},{"lineNumber":83,"author":{"gitId":"JWweiyin"},"content":"        String result \u003d \"\\tDeleted card:\" + System.lineSeparator();","lastModifiedDate":"2021-10-24"},{"lineNumber":84,"author":{"gitId":"JWweiyin"},"content":"        result \u003d result.concat(returnCardInfo(front, back));","lastModifiedDate":"2021-10-23"},{"lineNumber":85,"author":{"gitId":"JWweiyin"},"content":"        return result;","lastModifiedDate":"2021-10-21"},{"lineNumber":86,"author":{"gitId":"JWweiyin"},"content":"    }","lastModifiedDate":"2021-10-02"},{"lineNumber":87,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-02"},{"lineNumber":88,"author":{"gitId":"JWweiyin"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":89,"author":{"gitId":"JWweiyin"},"content":"     * Adds a new flashcard and returns the message printed after the addition of the flashcard.","lastModifiedDate":"2021-11-07"},{"lineNumber":90,"author":{"gitId":"JWweiyin"},"content":"     *","lastModifiedDate":"2021-11-07"},{"lineNumber":91,"author":{"gitId":"JWweiyin"},"content":"     * @param input An array containing the content for front of the flashcard and the back of the flashcard","lastModifiedDate":"2021-11-07"},{"lineNumber":92,"author":{"gitId":"JWweiyin"},"content":"     * @return Message printed after adding of flashcard","lastModifiedDate":"2021-11-07"},{"lineNumber":93,"author":{"gitId":"JWweiyin"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":94,"author":{"gitId":"JWweiyin"},"content":"    public String prepareToAddFlashCard(String[] input) {","lastModifiedDate":"2021-10-21"},{"lineNumber":95,"author":{"gitId":"JWweiyin"},"content":"        //String[] flashCardWords \u003d trimStrings(input);","lastModifiedDate":"2021-10-19"},{"lineNumber":96,"author":{"gitId":"JWweiyin"},"content":"        addFlashCard(input[0], input[1]);","lastModifiedDate":"2021-10-24"},{"lineNumber":97,"author":{"gitId":"JWweiyin"},"content":"        return returnNewFlashCard(input[0], input[1]);","lastModifiedDate":"2021-10-24"},{"lineNumber":98,"author":{"gitId":"JWweiyin"},"content":"    }","lastModifiedDate":"2021-10-02"},{"lineNumber":99,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-02"},{"lineNumber":100,"author":{"gitId":"xkisxk"},"content":"    //@@author xkisxk","lastModifiedDate":"2021-11-06"},{"lineNumber":101,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-02"},{"lineNumber":102,"author":{"gitId":"xkisxk"},"content":"    /**","lastModifiedDate":"2021-10-04"},{"lineNumber":103,"author":{"gitId":"xkisxk"},"content":"     * Deletes the flashcard with the given input.","lastModifiedDate":"2021-10-09"},{"lineNumber":104,"author":{"gitId":"xkisxk"},"content":"     *","lastModifiedDate":"2021-10-04"},{"lineNumber":105,"author":{"gitId":"xkisxk"},"content":"     * @param input description of the card to delete","lastModifiedDate":"2021-10-09"},{"lineNumber":106,"author":{"gitId":"xkisxk"},"content":"     * @throws CardLiException if card does not exist","lastModifiedDate":"2021-10-04"},{"lineNumber":107,"author":{"gitId":"xkisxk"},"content":"     */","lastModifiedDate":"2021-10-04"},{"lineNumber":108,"author":{"gitId":"xkisxk"},"content":"    public String deleteFlashCard(String input) throws CardLiException {","lastModifiedDate":"2021-10-21"},{"lineNumber":109,"author":{"gitId":"xkisxk"},"content":"        logger.setLevel(Level.WARNING);","lastModifiedDate":"2021-10-14"},{"lineNumber":110,"author":{"gitId":"xkisxk"},"content":"        if (cards.isEmpty()) {","lastModifiedDate":"2021-10-16"},{"lineNumber":111,"author":{"gitId":"xkisxk"},"content":"            throw new CardLiException();","lastModifiedDate":"2021-10-04"},{"lineNumber":112,"author":{"gitId":"xkisxk"},"content":"        }","lastModifiedDate":"2021-10-02"},{"lineNumber":113,"author":{"gitId":"xkisxk"},"content":"        assert getDeckSize() \u003e 0 : \"cards.size() should be greater than 0\";","lastModifiedDate":"2021-10-18"},{"lineNumber":114,"author":{"gitId":"xkisxk"},"content":"        logger.log(Level.INFO, \"Detecting the type of input, ie word/phrase or index\");","lastModifiedDate":"2021-10-10"},{"lineNumber":115,"author":{"gitId":"xkisxk"},"content":"        if (Parser.isInteger(input)) {","lastModifiedDate":"2021-11-01"},{"lineNumber":116,"author":{"gitId":"xkisxk"},"content":"            return deleteFlashCardByIndex(input);","lastModifiedDate":"2021-11-01"},{"lineNumber":117,"author":{"gitId":"xkisxk"},"content":"        } else {","lastModifiedDate":"2021-10-09"},{"lineNumber":118,"author":{"gitId":"xkisxk"},"content":"            throw new CardLiException(\"Please enter a positive number.\");","lastModifiedDate":"2021-11-07"},{"lineNumber":119,"author":{"gitId":"xkisxk"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":120,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":121,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":122,"author":{"gitId":"JWweiyin"},"content":"    //@@author JWweiyin","lastModifiedDate":"2021-11-06"},{"lineNumber":123,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":124,"author":{"gitId":"JWweiyin"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":125,"author":{"gitId":"JWweiyin"},"content":"     * Deletes the flashcard with the given index.","lastModifiedDate":"2021-10-09"},{"lineNumber":126,"author":{"gitId":"JWweiyin"},"content":"     *","lastModifiedDate":"2021-10-09"},{"lineNumber":127,"author":{"gitId":"JWweiyin"},"content":"     * @param index user\u0027s input (index of the card to be deleted)","lastModifiedDate":"2021-10-09"},{"lineNumber":128,"author":{"gitId":"JWweiyin"},"content":"     * @throws CardLiException if the index of the card exceeds the number of flashcards in cards","lastModifiedDate":"2021-10-09"},{"lineNumber":129,"author":{"gitId":"JWweiyin"},"content":"     *                         or index of card is less than 1","lastModifiedDate":"2021-10-10"},{"lineNumber":130,"author":{"gitId":"JWweiyin"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":131,"author":{"gitId":"JWweiyin"},"content":"    public String deleteFlashCardByIndex(String index) throws CardLiException {","lastModifiedDate":"2021-11-01"},{"lineNumber":132,"author":{"gitId":"JWweiyin"},"content":"        logger.setLevel(Level.WARNING);","lastModifiedDate":"2021-10-14"},{"lineNumber":133,"author":{"gitId":"JWweiyin"},"content":"        int indexToBeRemoved \u003d Integer.parseInt(index) - 1;","lastModifiedDate":"2021-10-09"},{"lineNumber":134,"author":{"gitId":"JWweiyin"},"content":"        if (!((indexToBeRemoved \u003c getDeckSize()) \u0026\u0026 (indexToBeRemoved \u003e\u003d 0))) {","lastModifiedDate":"2021-10-18"},{"lineNumber":135,"author":{"gitId":"JWweiyin"},"content":"            throw new CardLiException(\"Please enter a valid deck index.\");","lastModifiedDate":"2021-11-01"},{"lineNumber":136,"author":{"gitId":"JWweiyin"},"content":"        }","lastModifiedDate":"2021-10-14"},{"lineNumber":137,"author":{"gitId":"JWweiyin"},"content":"        assert getDeckSize() \u003e 0 : \"cards.size() should be greater than 0\";","lastModifiedDate":"2021-10-18"},{"lineNumber":138,"author":{"gitId":"JWweiyin"},"content":"        logger.log(Level.INFO, \"Detecting the type of input, ie word/phrase or index\");","lastModifiedDate":"2021-10-14"},{"lineNumber":139,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":140,"author":{"gitId":"JWweiyin"},"content":"        FlashCard card \u003d cards.get(indexToBeRemoved);","lastModifiedDate":"2021-10-09"},{"lineNumber":141,"author":{"gitId":"JWweiyin"},"content":"        cards.remove(card);","lastModifiedDate":"2021-10-09"},{"lineNumber":142,"author":{"gitId":"JWweiyin"},"content":"        return returnDeletedFlashCardMessage(card.getFront(), card.getBack());","lastModifiedDate":"2021-10-21"},{"lineNumber":143,"author":{"gitId":"JWweiyin"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":144,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":145,"author":{"gitId":"JWweiyin"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":146,"author":{"gitId":"JWweiyin"},"content":"     * Checks if there are flashcards within the deck with fronts that match the query term exactly.","lastModifiedDate":"2021-11-07"},{"lineNumber":147,"author":{"gitId":"JWweiyin"},"content":"     *","lastModifiedDate":"2021-11-07"},{"lineNumber":148,"author":{"gitId":"JWweiyin"},"content":"     * @param query String to be checked.","lastModifiedDate":"2021-11-07"},{"lineNumber":149,"author":{"gitId":"JWweiyin"},"content":"     * @return true if there is a card with front that matches the query exactly, false otherwise","lastModifiedDate":"2021-11-07"},{"lineNumber":150,"author":{"gitId":"JWweiyin"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":151,"author":{"gitId":"JWweiyin"},"content":"    public boolean hasCardWithSameName(String query) {","lastModifiedDate":"2021-11-07"},{"lineNumber":152,"author":{"gitId":"JWweiyin"},"content":"        for (FlashCard f : cards) {","lastModifiedDate":"2021-11-06"},{"lineNumber":153,"author":{"gitId":"JWweiyin"},"content":"            if (f.getFront().equals(query.trim())) {","lastModifiedDate":"2021-11-06"},{"lineNumber":154,"author":{"gitId":"JWweiyin"},"content":"                return true;","lastModifiedDate":"2021-11-06"},{"lineNumber":155,"author":{"gitId":"JWweiyin"},"content":"            }","lastModifiedDate":"2021-11-06"},{"lineNumber":156,"author":{"gitId":"JWweiyin"},"content":"        }","lastModifiedDate":"2021-11-06"},{"lineNumber":157,"author":{"gitId":"JWweiyin"},"content":"        return false;","lastModifiedDate":"2021-11-06"},{"lineNumber":158,"author":{"gitId":"JWweiyin"},"content":"    }","lastModifiedDate":"2021-10-02"},{"lineNumber":159,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":160,"author":{"gitId":"JWweiyin"},"content":"    public void addFlashCard(String front, String back) {","lastModifiedDate":"2021-10-16"},{"lineNumber":161,"author":{"gitId":"JWweiyin"},"content":"        cards.add(new FlashCard(front, back));","lastModifiedDate":"2021-10-02"},{"lineNumber":162,"author":{"gitId":"JWweiyin"},"content":"    }","lastModifiedDate":"2021-10-02"},{"lineNumber":163,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-02"},{"lineNumber":164,"author":{"gitId":"JWweiyin"},"content":"    public void addFlashCard(FlashCard card) {","lastModifiedDate":"2021-10-19"},{"lineNumber":165,"author":{"gitId":"JWweiyin"},"content":"        cards.add(card);","lastModifiedDate":"2021-10-19"},{"lineNumber":166,"author":{"gitId":"JWweiyin"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":167,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":168,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":169,"author":{"gitId":"JWweiyin"},"content":"    public void addFlashCard(String front, String back, int userScore, int totalScore) {","lastModifiedDate":"2021-10-20"},{"lineNumber":170,"author":{"gitId":"JWweiyin"},"content":"        cards.add(new FlashCard(front, back, userScore, totalScore));","lastModifiedDate":"2021-10-18"},{"lineNumber":171,"author":{"gitId":"JWweiyin"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":172,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":173,"author":{"gitId":"astralum"},"content":"    //@@author astralum","lastModifiedDate":"2021-11-06"},{"lineNumber":174,"author":{"gitId":"astralum"},"content":"    public String returnAllFlashCards() { // TODO: throw exception if no cards","lastModifiedDate":"2021-10-21"},{"lineNumber":175,"author":{"gitId":"astralum"},"content":"        String result \u003d \"\";","lastModifiedDate":"2021-10-21"},{"lineNumber":176,"author":{"gitId":"astralum"},"content":"        if (getDeckSize() \u003e 0) {","lastModifiedDate":"2021-10-18"},{"lineNumber":177,"author":{"gitId":"astralum"},"content":"            for (int i \u003d 0; i \u003c getDeckSize(); i++) {","lastModifiedDate":"2021-10-18"},{"lineNumber":178,"author":{"gitId":"astralum"},"content":"                result \u003d result.concat(\"Card \" + (i + 1) + \":\" + System.lineSeparator());","lastModifiedDate":"2021-10-23"},{"lineNumber":179,"author":{"gitId":"astralum"},"content":"                FlashCard card \u003d cards.get(i);","lastModifiedDate":"2021-10-17"},{"lineNumber":180,"author":{"gitId":"astralum"},"content":"                result \u003d result.concat(card.returnFlashCard());","lastModifiedDate":"2021-10-23"},{"lineNumber":181,"author":{"gitId":"astralum"},"content":"            }","lastModifiedDate":"2021-10-07"},{"lineNumber":182,"author":{"gitId":"astralum"},"content":"        } else {","lastModifiedDate":"2021-10-16"},{"lineNumber":183,"author":{"gitId":"astralum"},"content":"            result \u003d \"This deck has no cards.\" + System.lineSeparator();","lastModifiedDate":"2021-10-23"},{"lineNumber":184,"author":{"gitId":"astralum"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":185,"author":{"gitId":"astralum"},"content":"        return result;","lastModifiedDate":"2021-10-21"},{"lineNumber":186,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-10-16"},{"lineNumber":187,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":188,"author":{"gitId":"astralum"},"content":"    public void viewAllFlashCards() {","lastModifiedDate":"2021-10-21"},{"lineNumber":189,"author":{"gitId":"astralum"},"content":"        String result \u003d returnAllFlashCards();","lastModifiedDate":"2021-10-21"},{"lineNumber":190,"author":{"gitId":"astralum"},"content":"        System.out.println(result);","lastModifiedDate":"2021-10-21"},{"lineNumber":191,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-10-04"},{"lineNumber":192,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":193,"author":{"gitId":"JWweiyin"},"content":"    //@@author JWweiyin","lastModifiedDate":"2021-11-06"},{"lineNumber":194,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":195,"author":{"gitId":"JWweiyin"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":196,"author":{"gitId":"JWweiyin"},"content":"     * Returns all matching flashcards which fronts or backs match the search terms. Not case sensitive.","lastModifiedDate":"2021-11-07"},{"lineNumber":197,"author":{"gitId":"JWweiyin"},"content":"     * @param searchInput The search terms input by the user","lastModifiedDate":"2021-11-07"},{"lineNumber":198,"author":{"gitId":"JWweiyin"},"content":"     * @return All matching flashcards, returns an empty string if there are no matching flashcards","lastModifiedDate":"2021-11-07"},{"lineNumber":199,"author":{"gitId":"JWweiyin"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":200,"author":{"gitId":"JWweiyin"},"content":"    public String returnMatchingFlashCards(String searchInput) {","lastModifiedDate":"2021-10-23"},{"lineNumber":201,"author":{"gitId":"JWweiyin"},"content":"        String result \u003d \"\";","lastModifiedDate":"2021-10-23"},{"lineNumber":202,"author":{"gitId":"JWweiyin"},"content":"        ArrayList\u003cFlashCard\u003e matchingCards \u003d (ArrayList\u003cFlashCard\u003e) cards.stream()","lastModifiedDate":"2021-10-23"},{"lineNumber":203,"author":{"gitId":"JWweiyin"},"content":"                .filter((f) -\u003e f.getFront().toLowerCase().contains(searchInput.toLowerCase())","lastModifiedDate":"2021-11-04"},{"lineNumber":204,"author":{"gitId":"JWweiyin"},"content":"                        || f.getBack().toLowerCase().contains(searchInput.toLowerCase()))","lastModifiedDate":"2021-11-04"},{"lineNumber":205,"author":{"gitId":"JWweiyin"},"content":"                .collect(Collectors.toList());","lastModifiedDate":"2021-10-23"},{"lineNumber":206,"author":{"gitId":"JWweiyin"},"content":"        if (matchingCards.size() \u003e 0) {","lastModifiedDate":"2021-10-23"},{"lineNumber":207,"author":{"gitId":"JWweiyin"},"content":"            result \u003d result.concat(\"Cards in \" + getName() + \" that contain the term \" + searchInput + \":\"","lastModifiedDate":"2021-11-04"},{"lineNumber":208,"author":{"gitId":"JWweiyin"},"content":"                    + System.lineSeparator());","lastModifiedDate":"2021-10-23"},{"lineNumber":209,"author":{"gitId":"JWweiyin"},"content":"            for (int i \u003d 0; i \u003c matchingCards.size(); i +\u003d 1) {","lastModifiedDate":"2021-10-23"},{"lineNumber":210,"author":{"gitId":"JWweiyin"},"content":"                result \u003d result.concat(\"Card \" + (i + 1) + \":\" + System.lineSeparator());","lastModifiedDate":"2021-10-23"},{"lineNumber":211,"author":{"gitId":"JWweiyin"},"content":"                FlashCard card \u003d matchingCards.get(i);","lastModifiedDate":"2021-10-23"},{"lineNumber":212,"author":{"gitId":"JWweiyin"},"content":"                result \u003d result.concat(card.returnFlashCard());","lastModifiedDate":"2021-10-23"},{"lineNumber":213,"author":{"gitId":"JWweiyin"},"content":"            }","lastModifiedDate":"2021-10-23"},{"lineNumber":214,"author":{"gitId":"JWweiyin"},"content":"            result \u003d result.concat(System.lineSeparator());","lastModifiedDate":"2021-10-23"},{"lineNumber":215,"author":{"gitId":"JWweiyin"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":216,"author":{"gitId":"JWweiyin"},"content":"        return result;","lastModifiedDate":"2021-10-23"},{"lineNumber":217,"author":{"gitId":"JWweiyin"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":218,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":219,"author":{"gitId":"xRossKoh"},"content":"    //@@author xRossKoh","lastModifiedDate":"2021-11-06"},{"lineNumber":220,"author":{"gitId":"xRossKoh"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":221,"author":{"gitId":"xRossKoh"},"content":"     * Converts a Deck instance into a JSONObject instance.","lastModifiedDate":"2021-11-07"},{"lineNumber":222,"author":{"gitId":"xRossKoh"},"content":"     *","lastModifiedDate":"2021-11-07"},{"lineNumber":223,"author":{"gitId":"xRossKoh"},"content":"     * @return      Deck instance as a JSONObject instance","lastModifiedDate":"2021-11-07"},{"lineNumber":224,"author":{"gitId":"xRossKoh"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":225,"author":{"gitId":"xRossKoh"},"content":"    public JSONObject toJsonObject() {","lastModifiedDate":"2021-11-06"},{"lineNumber":226,"author":{"gitId":"xRossKoh"},"content":"        JSONObject jsonDeck \u003d new JSONObject();","lastModifiedDate":"2021-11-06"},{"lineNumber":227,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":228,"author":{"gitId":"xRossKoh"},"content":"        int cardsCount \u003d getDeckSize();","lastModifiedDate":"2021-11-06"},{"lineNumber":229,"author":{"gitId":"xRossKoh"},"content":"        JSONArray jsonCards \u003d new JSONArray();","lastModifiedDate":"2021-11-06"},{"lineNumber":230,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":231,"author":{"gitId":"xRossKoh"},"content":"        for (int i \u003d 0; i \u003c cardsCount; i++) {","lastModifiedDate":"2021-11-06"},{"lineNumber":232,"author":{"gitId":"xRossKoh"},"content":"            jsonCards.add(cards.get(i).toJsonObject());","lastModifiedDate":"2021-11-06"},{"lineNumber":233,"author":{"gitId":"xRossKoh"},"content":"        }","lastModifiedDate":"2021-11-06"},{"lineNumber":234,"author":{"gitId":"xRossKoh"},"content":"        jsonDeck.put(\"deckName\", getName());","lastModifiedDate":"2021-11-06"},{"lineNumber":235,"author":{"gitId":"xRossKoh"},"content":"        jsonDeck.put(\"cards\", jsonCards);","lastModifiedDate":"2021-11-06"},{"lineNumber":236,"author":{"gitId":"xRossKoh"},"content":"        return jsonDeck;","lastModifiedDate":"2021-11-06"},{"lineNumber":237,"author":{"gitId":"xRossKoh"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":238,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":239,"author":{"gitId":"xRossKoh"},"content":"    public ArrayList\u003cFlashCard\u003e getCards() {","lastModifiedDate":"2021-11-06"},{"lineNumber":240,"author":{"gitId":"xRossKoh"},"content":"        return cards;","lastModifiedDate":"2021-11-06"},{"lineNumber":241,"author":{"gitId":"xRossKoh"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":242,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":243,"author":{"gitId":"xRossKoh"},"content":"    public String getName() {","lastModifiedDate":"2021-11-06"},{"lineNumber":244,"author":{"gitId":"xRossKoh"},"content":"        return name;","lastModifiedDate":"2021-11-06"},{"lineNumber":245,"author":{"gitId":"xRossKoh"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":246,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":247,"author":{"gitId":"xRossKoh"},"content":"    public FlashCard getCard(int index) {","lastModifiedDate":"2021-11-06"},{"lineNumber":248,"author":{"gitId":"xRossKoh"},"content":"        assert getDeckSize() \u003e 0;","lastModifiedDate":"2021-11-06"},{"lineNumber":249,"author":{"gitId":"xRossKoh"},"content":"        assert (index \u003e\u003d 0 \u0026\u0026 index \u003c getDeckSize());","lastModifiedDate":"2021-11-06"},{"lineNumber":250,"author":{"gitId":"xRossKoh"},"content":"        return cards.get(index);","lastModifiedDate":"2021-11-06"},{"lineNumber":251,"author":{"gitId":"xRossKoh"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":252,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":253,"author":{"gitId":"xRossKoh"},"content":"    public int getDeckSize() {","lastModifiedDate":"2021-11-06"},{"lineNumber":254,"author":{"gitId":"xRossKoh"},"content":"        return cards.size();","lastModifiedDate":"2021-11-06"},{"lineNumber":255,"author":{"gitId":"xRossKoh"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":256,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":257,"author":{"gitId":"xRossKoh"},"content":"    public int getCardIndex(FlashCard card) {","lastModifiedDate":"2021-11-06"},{"lineNumber":258,"author":{"gitId":"xRossKoh"},"content":"        return cards.indexOf(card);","lastModifiedDate":"2021-11-06"},{"lineNumber":259,"author":{"gitId":"xRossKoh"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":260,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":261,"author":{"gitId":"xRossKoh"},"content":"    public void setDeckName(String input) {","lastModifiedDate":"2021-11-06"},{"lineNumber":262,"author":{"gitId":"xRossKoh"},"content":"        this.name \u003d input;","lastModifiedDate":"2021-11-06"},{"lineNumber":263,"author":{"gitId":"xRossKoh"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":264,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":265,"author":{"gitId":"xRossKoh"},"content":"    @Override","lastModifiedDate":"2021-10-18"},{"lineNumber":266,"author":{"gitId":"xRossKoh"},"content":"    public String toString() {","lastModifiedDate":"2021-10-18"},{"lineNumber":267,"author":{"gitId":"xRossKoh"},"content":"        String cardsString \u003d \"\";","lastModifiedDate":"2021-10-18"},{"lineNumber":268,"author":{"gitId":"xRossKoh"},"content":"        int cardsCount \u003d getDeckSize();","lastModifiedDate":"2021-10-18"},{"lineNumber":269,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":270,"author":{"gitId":"xRossKoh"},"content":"        for (int i \u003d 0; i \u003c cardsCount; i++) {","lastModifiedDate":"2021-10-18"},{"lineNumber":271,"author":{"gitId":"xRossKoh"},"content":"            cardsString +\u003d cards.get(i);","lastModifiedDate":"2021-10-18"},{"lineNumber":272,"author":{"gitId":"xRossKoh"},"content":"        }","lastModifiedDate":"2021-10-18"},{"lineNumber":273,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":274,"author":{"gitId":"xRossKoh"},"content":"        return getName() + \u0027\\n\u0027","lastModifiedDate":"2021-10-18"},{"lineNumber":275,"author":{"gitId":"xRossKoh"},"content":"                + cardsCount + \u0027\\n\u0027","lastModifiedDate":"2021-10-25"},{"lineNumber":276,"author":{"gitId":"xRossKoh"},"content":"                + cardsString;","lastModifiedDate":"2021-10-20"},{"lineNumber":277,"author":{"gitId":"xRossKoh"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":278,"author":{"gitId":"xRossKoh"},"content":"}","lastModifiedDate":"2021-10-02"}],"authorContributionMap":{"JWweiyin":126,"astralum":21,"ThaddeusLim99":23,"xRossKoh":71,"xkisxk":37}},{"path":"src/main/java/seedu/cardli/flashcard/DeckManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"xRossKoh"},"content":"package seedu.cardli.flashcard;","lastModifiedDate":"2021-10-26"},{"lineNumber":2,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":3,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":4,"author":{"gitId":"JWweiyin"},"content":"import seedu.cardli.exceptions.CardLiException;","lastModifiedDate":"2021-10-26"},{"lineNumber":5,"author":{"gitId":"JWweiyin"},"content":"import seedu.cardli.exceptions.DeckNotExistException;","lastModifiedDate":"2021-10-26"},{"lineNumber":6,"author":{"gitId":"ThaddeusLim99"},"content":"import seedu.cardli.exceptions.FieldEmptyException;","lastModifiedDate":"2021-11-07"},{"lineNumber":7,"author":{"gitId":"ThaddeusLim99"},"content":"import seedu.cardli.exceptions.InvalidCommandFormatException;","lastModifiedDate":"2021-11-07"},{"lineNumber":8,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":9,"author":{"gitId":"xkisxk"},"content":"import static seedu.cardli.ui.TestUi.DECK_NOT_EXIST_MESSAGE;","lastModifiedDate":"2021-11-03"},{"lineNumber":10,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":11,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":12,"author":{"gitId":"JWweiyin"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-16"},{"lineNumber":13,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":14,"author":{"gitId":"xkisxk"},"content":"import java.util.logging.Level;","lastModifiedDate":"2021-10-26"},{"lineNumber":15,"author":{"gitId":"xkisxk"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-10-26"},{"lineNumber":16,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":17,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":18,"author":{"gitId":"xRossKoh"},"content":"public class DeckManager {","lastModifiedDate":"2021-10-18"},{"lineNumber":19,"author":{"gitId":"JWweiyin"},"content":"    public static final String DECK_ALREADY_EXISTS_MESSAGE \u003d \"The deck you are trying to create already exists.\";","lastModifiedDate":"2021-11-07"},{"lineNumber":20,"author":{"gitId":"xkisxk"},"content":"    private final ArrayList\u003cDeck\u003e decks;","lastModifiedDate":"2021-10-24"},{"lineNumber":21,"author":{"gitId":"xkisxk"},"content":"    private static final Logger logger \u003d Logger.getLogger(Deck.class.getName());","lastModifiedDate":"2021-10-26"},{"lineNumber":22,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":23,"author":{"gitId":"astralum"},"content":"    public DeckManager() {","lastModifiedDate":"2021-10-21"},{"lineNumber":24,"author":{"gitId":"astralum"},"content":"        this.decks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-21"},{"lineNumber":25,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":26,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":27,"author":{"gitId":"astralum"},"content":"    public DeckManager(ArrayList\u003cDeck\u003e decks) {","lastModifiedDate":"2021-10-21"},{"lineNumber":28,"author":{"gitId":"astralum"},"content":"        this.decks \u003d decks;","lastModifiedDate":"2021-10-21"},{"lineNumber":29,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":30,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":31,"author":{"gitId":"ThaddeusLim99"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":32,"author":{"gitId":"ThaddeusLim99"},"content":"     * Returns the details of the transfer that took place as a message.","lastModifiedDate":"2021-11-07"},{"lineNumber":33,"author":{"gitId":"ThaddeusLim99"},"content":"     *","lastModifiedDate":"2021-11-07"},{"lineNumber":34,"author":{"gitId":"ThaddeusLim99"},"content":"     * @param parameters string array containing the destination deck index, current deck index, card index.","lastModifiedDate":"2021-11-07"},{"lineNumber":35,"author":{"gitId":"ThaddeusLim99"},"content":"     * @return the details of the transfer that took place as a message.","lastModifiedDate":"2021-11-07"},{"lineNumber":36,"author":{"gitId":"ThaddeusLim99"},"content":"     * @throws CardLiException If card does not exist.","lastModifiedDate":"2021-11-07"},{"lineNumber":37,"author":{"gitId":"ThaddeusLim99"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":38,"author":{"gitId":"ThaddeusLim99"},"content":"    public String moveCard(String[] parameters) throws CardLiException {","lastModifiedDate":"2021-10-26"},{"lineNumber":39,"author":{"gitId":"ThaddeusLim99"},"content":"        String enteredCurrentDeckIndex \u003d parameters[0];","lastModifiedDate":"2021-10-26"},{"lineNumber":40,"author":{"gitId":"ThaddeusLim99"},"content":"        int currentDeckIndex \u003d Integer.parseInt(enteredCurrentDeckIndex);","lastModifiedDate":"2021-10-26"},{"lineNumber":41,"author":{"gitId":"ThaddeusLim99"},"content":"        String enteredCardIndex \u003d parameters[1];","lastModifiedDate":"2021-10-26"},{"lineNumber":42,"author":{"gitId":"ThaddeusLim99"},"content":"        int cardIndex \u003d Integer.parseInt(enteredCardIndex) - 1;","lastModifiedDate":"2021-10-26"},{"lineNumber":43,"author":{"gitId":"ThaddeusLim99"},"content":"        String enteredDeckIndex \u003d parameters[2];","lastModifiedDate":"2021-10-26"},{"lineNumber":44,"author":{"gitId":"ThaddeusLim99"},"content":"        int deckIndex \u003d Integer.parseInt(enteredDeckIndex) - 1;","lastModifiedDate":"2021-10-26"},{"lineNumber":45,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":46,"author":{"gitId":"ThaddeusLim99"},"content":"        //get card from current deck","lastModifiedDate":"2021-10-26"},{"lineNumber":47,"author":{"gitId":"ThaddeusLim99"},"content":"        FlashCard cardCopy \u003d decks.get(currentDeckIndex).getCard(cardIndex);","lastModifiedDate":"2021-10-26"},{"lineNumber":48,"author":{"gitId":"ThaddeusLim99"},"content":"        //add card to destination deck","lastModifiedDate":"2021-10-26"},{"lineNumber":49,"author":{"gitId":"ThaddeusLim99"},"content":"        decks.get(deckIndex).addFlashCard(cardCopy);","lastModifiedDate":"2021-10-26"},{"lineNumber":50,"author":{"gitId":"ThaddeusLim99"},"content":"        //delete card from current deck","lastModifiedDate":"2021-10-26"},{"lineNumber":51,"author":{"gitId":"ThaddeusLim99"},"content":"        decks.get(currentDeckIndex).deleteFlashCard(enteredCardIndex);","lastModifiedDate":"2021-10-26"},{"lineNumber":52,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":53,"author":{"gitId":"ThaddeusLim99"},"content":"        return (\"Moved card \" + enteredCardIndex + \" to \" + \"deck \" + enteredDeckIndex);","lastModifiedDate":"2021-10-26"},{"lineNumber":54,"author":{"gitId":"ThaddeusLim99"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":55,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":56,"author":{"gitId":"ThaddeusLim99"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":57,"author":{"gitId":"ThaddeusLim99"},"content":"     * Returns the details of the edit that took place as a message.","lastModifiedDate":"2021-11-07"},{"lineNumber":58,"author":{"gitId":"ThaddeusLim99"},"content":"     *","lastModifiedDate":"2021-11-07"},{"lineNumber":59,"author":{"gitId":"ThaddeusLim99"},"content":"     * @param args string array containing the  deck index and name.","lastModifiedDate":"2021-11-07"},{"lineNumber":60,"author":{"gitId":"ThaddeusLim99"},"content":"     * @return the details of the transfer that took place as a message.","lastModifiedDate":"2021-11-07"},{"lineNumber":61,"author":{"gitId":"ThaddeusLim99"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":62,"author":{"gitId":"ThaddeusLim99"},"content":"    public String editDeck(String[] args) {","lastModifiedDate":"2021-10-26"},{"lineNumber":63,"author":{"gitId":"ThaddeusLim99"},"content":"        String enteredDeckIndex \u003d args[0];","lastModifiedDate":"2021-10-26"},{"lineNumber":64,"author":{"gitId":"ThaddeusLim99"},"content":"        int deckIndex \u003d Integer.parseInt(enteredDeckIndex) - 1;","lastModifiedDate":"2021-10-26"},{"lineNumber":65,"author":{"gitId":"ThaddeusLim99"},"content":"        String deckName \u003d args[1];","lastModifiedDate":"2021-10-26"},{"lineNumber":66,"author":{"gitId":"ThaddeusLim99"},"content":"        decks.get(deckIndex).setDeckName(deckName);","lastModifiedDate":"2021-10-26"},{"lineNumber":67,"author":{"gitId":"ThaddeusLim99"},"content":"        return (\"Changed deck \" + enteredDeckIndex + \" to \" + deckName);","lastModifiedDate":"2021-10-26"},{"lineNumber":68,"author":{"gitId":"ThaddeusLim99"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":69,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":70,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":71,"author":{"gitId":"astralum"},"content":"    public String prepareToAddDeck(String deckName) {","lastModifiedDate":"2021-10-21"},{"lineNumber":72,"author":{"gitId":"xkisxk"},"content":"        if (!hasDeck(deckName)) {","lastModifiedDate":"2021-10-17"},{"lineNumber":73,"author":{"gitId":"xkisxk"},"content":"            addDeck(deckName);","lastModifiedDate":"2021-10-17"},{"lineNumber":74,"author":{"gitId":"astralum"},"content":"            return printNewDeck(deckName);","lastModifiedDate":"2021-10-21"},{"lineNumber":75,"author":{"gitId":"JWweiyin"},"content":"        } else {","lastModifiedDate":"2021-10-16"},{"lineNumber":76,"author":{"gitId":"JWweiyin"},"content":"            return DECK_ALREADY_EXISTS_MESSAGE;","lastModifiedDate":"2021-11-07"},{"lineNumber":77,"author":{"gitId":"JWweiyin"},"content":"        }","lastModifiedDate":"2021-10-16"},{"lineNumber":78,"author":{"gitId":"JWweiyin"},"content":"    }","lastModifiedDate":"2021-10-16"},{"lineNumber":79,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":80,"author":{"gitId":"astralum"},"content":"    private String printNewDeck(String deckName) {","lastModifiedDate":"2021-10-21"},{"lineNumber":81,"author":{"gitId":"astralum"},"content":"        return (\"You have just made the deck \u003c\u003c\" + deckName + \"\u003e\u003e.\");","lastModifiedDate":"2021-10-21"},{"lineNumber":82,"author":{"gitId":"JWweiyin"},"content":"    }","lastModifiedDate":"2021-10-16"},{"lineNumber":83,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":84,"author":{"gitId":"astralum"},"content":"    private boolean hasDeck(String categoryName) {","lastModifiedDate":"2021-10-21"},{"lineNumber":85,"author":{"gitId":"xkisxk"},"content":"        for (Deck deck : decks) {","lastModifiedDate":"2021-10-17"},{"lineNumber":86,"author":{"gitId":"JWweiyin"},"content":"            if (deck.hasSameName(categoryName)) {","lastModifiedDate":"2021-10-26"},{"lineNumber":87,"author":{"gitId":"JWweiyin"},"content":"                return true;","lastModifiedDate":"2021-10-16"},{"lineNumber":88,"author":{"gitId":"JWweiyin"},"content":"            }","lastModifiedDate":"2021-10-16"},{"lineNumber":89,"author":{"gitId":"JWweiyin"},"content":"        }","lastModifiedDate":"2021-10-16"},{"lineNumber":90,"author":{"gitId":"JWweiyin"},"content":"        return false;","lastModifiedDate":"2021-10-16"},{"lineNumber":91,"author":{"gitId":"JWweiyin"},"content":"    }","lastModifiedDate":"2021-10-16"},{"lineNumber":92,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":93,"author":{"gitId":"xkisxk"},"content":"    public boolean hasDeck(int deckIndex) {","lastModifiedDate":"2021-10-24"},{"lineNumber":94,"author":{"gitId":"xkisxk"},"content":"        return deckIndex \u003e\u003d 0 \u0026\u0026 deckIndex \u003c getDecksSize();","lastModifiedDate":"2021-10-24"},{"lineNumber":95,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":96,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":97,"author":{"gitId":"astralum"},"content":"    private void addDeck(String deckName) {","lastModifiedDate":"2021-10-21"},{"lineNumber":98,"author":{"gitId":"xkisxk"},"content":"        decks.add(new Deck(deckName));","lastModifiedDate":"2021-10-17"},{"lineNumber":99,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":100,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":101,"author":{"gitId":"xkisxk"},"content":"    public String deleteDeck(Deck deck) throws DeckNotExistException {","lastModifiedDate":"2021-10-25"},{"lineNumber":102,"author":{"gitId":"xkisxk"},"content":"        String message \u003d returnDeletedDeckMessage(deck);","lastModifiedDate":"2021-10-25"},{"lineNumber":103,"author":{"gitId":"xkisxk"},"content":"        boolean isRemoved \u003d decks.remove(deck);","lastModifiedDate":"2021-10-25"},{"lineNumber":104,"author":{"gitId":"xkisxk"},"content":"        if (!isRemoved) {","lastModifiedDate":"2021-10-25"},{"lineNumber":105,"author":{"gitId":"xkisxk"},"content":"            throw new DeckNotExistException(DECK_NOT_EXIST_MESSAGE);","lastModifiedDate":"2021-11-03"},{"lineNumber":106,"author":{"gitId":"xkisxk"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":107,"author":{"gitId":"xkisxk"},"content":"        return message;","lastModifiedDate":"2021-10-25"},{"lineNumber":108,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":109,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":110,"author":{"gitId":"xkisxk"},"content":"    public String deleteDeck(int deckIndex) {","lastModifiedDate":"2021-10-25"},{"lineNumber":111,"author":{"gitId":"xkisxk"},"content":"        String message \u003d returnDeletedDeckMessage(decks.get(deckIndex));","lastModifiedDate":"2021-10-25"},{"lineNumber":112,"author":{"gitId":"xkisxk"},"content":"        decks.remove(deckIndex);","lastModifiedDate":"2021-10-25"},{"lineNumber":113,"author":{"gitId":"xkisxk"},"content":"        return message;","lastModifiedDate":"2021-10-25"},{"lineNumber":114,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":115,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":116,"author":{"gitId":"xkisxk"},"content":"    private String returnDeletedDeckMessage(Deck deck) {","lastModifiedDate":"2021-10-25"},{"lineNumber":117,"author":{"gitId":"xkisxk"},"content":"        String result \u003d \"\\tDeleted deck: \";","lastModifiedDate":"2021-10-25"},{"lineNumber":118,"author":{"gitId":"xkisxk"},"content":"        result \u003d result.concat(deck.getName());","lastModifiedDate":"2021-10-25"},{"lineNumber":119,"author":{"gitId":"xkisxk"},"content":"        return result;","lastModifiedDate":"2021-10-25"},{"lineNumber":120,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":121,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":122,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":123,"author":{"gitId":"JWweiyin"},"content":"    public String findCards(String searchInput) {","lastModifiedDate":"2021-10-23"},{"lineNumber":124,"author":{"gitId":"JWweiyin"},"content":"        String result \u003d \"\";","lastModifiedDate":"2021-10-23"},{"lineNumber":125,"author":{"gitId":"JWweiyin"},"content":"        if (decks.size() \u003e 0) {","lastModifiedDate":"2021-10-23"},{"lineNumber":126,"author":{"gitId":"JWweiyin"},"content":"            for (int i \u003d 0; i \u003c decks.size(); i +\u003d 1) {","lastModifiedDate":"2021-10-23"},{"lineNumber":127,"author":{"gitId":"JWweiyin"},"content":"                result \u003d result.concat(getDeck(i).returnMatchingFlashCards(searchInput));","lastModifiedDate":"2021-10-23"},{"lineNumber":128,"author":{"gitId":"JWweiyin"},"content":"            }","lastModifiedDate":"2021-10-23"},{"lineNumber":129,"author":{"gitId":"JWweiyin"},"content":"        } else {","lastModifiedDate":"2021-10-23"},{"lineNumber":130,"author":{"gitId":"JWweiyin"},"content":"            result \u003d \"There are no decks.\";","lastModifiedDate":"2021-11-01"},{"lineNumber":131,"author":{"gitId":"JWweiyin"},"content":"        }","lastModifiedDate":"2021-11-01"},{"lineNumber":132,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":133,"author":{"gitId":"JWweiyin"},"content":"        if (result.isEmpty()) {","lastModifiedDate":"2021-11-01"},{"lineNumber":134,"author":{"gitId":"JWweiyin"},"content":"            result \u003d \"There are no cards matching the search term.\";","lastModifiedDate":"2021-11-01"},{"lineNumber":135,"author":{"gitId":"JWweiyin"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":136,"author":{"gitId":"JWweiyin"},"content":"        return result;","lastModifiedDate":"2021-10-23"},{"lineNumber":137,"author":{"gitId":"JWweiyin"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":138,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":139,"author":{"gitId":"JWweiyin"},"content":"    public String cardHasSameName(String query) {","lastModifiedDate":"2021-11-06"},{"lineNumber":140,"author":{"gitId":"JWweiyin"},"content":"        String deckWithSameNameCard \u003d \"\";","lastModifiedDate":"2021-11-06"},{"lineNumber":141,"author":{"gitId":"JWweiyin"},"content":"        for (Deck d : decks) {","lastModifiedDate":"2021-11-06"},{"lineNumber":142,"author":{"gitId":"JWweiyin"},"content":"            if (d.hasCardWithSameName(query)) {","lastModifiedDate":"2021-11-06"},{"lineNumber":143,"author":{"gitId":"JWweiyin"},"content":"                deckWithSameNameCard \u003d d.getName();","lastModifiedDate":"2021-11-06"},{"lineNumber":144,"author":{"gitId":"JWweiyin"},"content":"            }","lastModifiedDate":"2021-11-06"},{"lineNumber":145,"author":{"gitId":"JWweiyin"},"content":"        }","lastModifiedDate":"2021-11-06"},{"lineNumber":146,"author":{"gitId":"JWweiyin"},"content":"        return deckWithSameNameCard;","lastModifiedDate":"2021-11-06"},{"lineNumber":147,"author":{"gitId":"JWweiyin"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":148,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":149,"author":{"gitId":"astralum"},"content":"    public String viewDecks() {","lastModifiedDate":"2021-10-23"},{"lineNumber":150,"author":{"gitId":"astralum"},"content":"        String result \u003d \"\";","lastModifiedDate":"2021-10-23"},{"lineNumber":151,"author":{"gitId":"xRossKoh"},"content":"        if (getDecksSize() \u003e 0) {","lastModifiedDate":"2021-10-18"},{"lineNumber":152,"author":{"gitId":"JWweiyin"},"content":"            int i \u003d 1;","lastModifiedDate":"2021-10-16"},{"lineNumber":153,"author":{"gitId":"astralum"},"content":"            result \u003d result.concat(\"These are your decks: \" + System.lineSeparator());","lastModifiedDate":"2021-10-23"},{"lineNumber":154,"author":{"gitId":"xkisxk"},"content":"            for (Deck deck : decks) {","lastModifiedDate":"2021-10-17"},{"lineNumber":155,"author":{"gitId":"astralum"},"content":"                result \u003d result.concat(\"\\t\" + i + \". \" + deck.getName()","lastModifiedDate":"2021-10-23"},{"lineNumber":156,"author":{"gitId":"astralum"},"content":"                        + System.lineSeparator());","lastModifiedDate":"2021-10-23"},{"lineNumber":157,"author":{"gitId":"JWweiyin"},"content":"                i +\u003d 1;","lastModifiedDate":"2021-10-16"},{"lineNumber":158,"author":{"gitId":"JWweiyin"},"content":"            }","lastModifiedDate":"2021-10-16"},{"lineNumber":159,"author":{"gitId":"JWweiyin"},"content":"        } else {","lastModifiedDate":"2021-10-16"},{"lineNumber":160,"author":{"gitId":"astralum"},"content":"            result \u003d result.concat(\"You have no decks.\");","lastModifiedDate":"2021-10-23"},{"lineNumber":161,"author":{"gitId":"JWweiyin"},"content":"        }","lastModifiedDate":"2021-10-16"},{"lineNumber":162,"author":{"gitId":"astralum"},"content":"        return result;","lastModifiedDate":"2021-10-23"},{"lineNumber":163,"author":{"gitId":"JWweiyin"},"content":"    }","lastModifiedDate":"2021-10-16"},{"lineNumber":164,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":165,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":166,"author":{"gitId":"xkisxk"},"content":"    /**","lastModifiedDate":"2021-10-26"},{"lineNumber":167,"author":{"gitId":"xkisxk"},"content":"     * Gets all the low scoring cards and put them into a deck.","lastModifiedDate":"2021-10-26"},{"lineNumber":168,"author":{"gitId":"xkisxk"},"content":"     *","lastModifiedDate":"2021-10-26"},{"lineNumber":169,"author":{"gitId":"xkisxk"},"content":"     * @return deck of low scoring cards","lastModifiedDate":"2021-10-26"},{"lineNumber":170,"author":{"gitId":"xkisxk"},"content":"     */","lastModifiedDate":"2021-10-26"},{"lineNumber":171,"author":{"gitId":"xkisxk"},"content":"    private Deck getLowScoringCardsFromAllDecks() {","lastModifiedDate":"2021-10-26"},{"lineNumber":172,"author":{"gitId":"xkisxk"},"content":"        logger.setLevel(Level.WARNING);","lastModifiedDate":"2021-10-26"},{"lineNumber":173,"author":{"gitId":"xkisxk"},"content":"        logger.log(Level.INFO, \"Collecting low scoring cards\");","lastModifiedDate":"2021-10-26"},{"lineNumber":174,"author":{"gitId":"xkisxk"},"content":"        Deck reviewDeck \u003d new Deck(\"Review\");","lastModifiedDate":"2021-10-26"},{"lineNumber":175,"author":{"gitId":"xkisxk"},"content":"        for (Deck deck : getDecks()) {","lastModifiedDate":"2021-10-26"},{"lineNumber":176,"author":{"gitId":"xkisxk"},"content":"            for (FlashCard card : deck.getCards()) {","lastModifiedDate":"2021-10-26"},{"lineNumber":177,"author":{"gitId":"xkisxk"},"content":"                if (isLowScoring(card)) {","lastModifiedDate":"2021-10-26"},{"lineNumber":178,"author":{"gitId":"xkisxk"},"content":"                    reviewDeck.addFlashCard(card);","lastModifiedDate":"2021-10-26"},{"lineNumber":179,"author":{"gitId":"xkisxk"},"content":"                    logger.log(Level.INFO, \"Added a low scoring card\");","lastModifiedDate":"2021-10-26"},{"lineNumber":180,"author":{"gitId":"xkisxk"},"content":"                }","lastModifiedDate":"2021-10-26"},{"lineNumber":181,"author":{"gitId":"xkisxk"},"content":"            }","lastModifiedDate":"2021-10-26"},{"lineNumber":182,"author":{"gitId":"xkisxk"},"content":"        }","lastModifiedDate":"2021-10-26"},{"lineNumber":183,"author":{"gitId":"xkisxk"},"content":"        return reviewDeck;","lastModifiedDate":"2021-10-26"},{"lineNumber":184,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":185,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":186,"author":{"gitId":"xkisxk"},"content":"    /**","lastModifiedDate":"2021-10-26"},{"lineNumber":187,"author":{"gitId":"xkisxk"},"content":"     * Gets all the low scoring cards from a deck and put them into a deck.","lastModifiedDate":"2021-10-26"},{"lineNumber":188,"author":{"gitId":"xkisxk"},"content":"     *","lastModifiedDate":"2021-10-26"},{"lineNumber":189,"author":{"gitId":"xkisxk"},"content":"     * @return deck of low scoring cards","lastModifiedDate":"2021-10-26"},{"lineNumber":190,"author":{"gitId":"xkisxk"},"content":"     */","lastModifiedDate":"2021-10-26"},{"lineNumber":191,"author":{"gitId":"xkisxk"},"content":"    private Deck getLowScoringCardsFromADeck(Deck deck) {","lastModifiedDate":"2021-10-26"},{"lineNumber":192,"author":{"gitId":"xkisxk"},"content":"        logger.setLevel(Level.WARNING);","lastModifiedDate":"2021-10-26"},{"lineNumber":193,"author":{"gitId":"xkisxk"},"content":"        logger.log(Level.INFO, \"Collecting low scoring cards\");","lastModifiedDate":"2021-10-26"},{"lineNumber":194,"author":{"gitId":"xkisxk"},"content":"        Deck reviewDeck \u003d new Deck(\"Review\");","lastModifiedDate":"2021-10-26"},{"lineNumber":195,"author":{"gitId":"xkisxk"},"content":"        for (FlashCard card : deck.getCards()) {","lastModifiedDate":"2021-10-26"},{"lineNumber":196,"author":{"gitId":"xkisxk"},"content":"            if (isLowScoring(card)) {","lastModifiedDate":"2021-10-26"},{"lineNumber":197,"author":{"gitId":"xkisxk"},"content":"                reviewDeck.addFlashCard(card);","lastModifiedDate":"2021-10-26"},{"lineNumber":198,"author":{"gitId":"xkisxk"},"content":"                logger.log(Level.INFO, \"Added a low scoring card\");","lastModifiedDate":"2021-10-26"},{"lineNumber":199,"author":{"gitId":"xkisxk"},"content":"            }","lastModifiedDate":"2021-10-26"},{"lineNumber":200,"author":{"gitId":"xkisxk"},"content":"        }","lastModifiedDate":"2021-10-26"},{"lineNumber":201,"author":{"gitId":"xkisxk"},"content":"        return reviewDeck;","lastModifiedDate":"2021-10-26"},{"lineNumber":202,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":203,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":204,"author":{"gitId":"xkisxk"},"content":"    /**","lastModifiedDate":"2021-10-26"},{"lineNumber":205,"author":{"gitId":"xkisxk"},"content":"     * Gets all the low scoring cards and put them into a deck.","lastModifiedDate":"2021-10-26"},{"lineNumber":206,"author":{"gitId":"xkisxk"},"content":"     * If index is -1, get low scaring cards from all decks.","lastModifiedDate":"2021-10-26"},{"lineNumber":207,"author":{"gitId":"xkisxk"},"content":"     * Else get low scoring cards from the deck from that index.","lastModifiedDate":"2021-10-26"},{"lineNumber":208,"author":{"gitId":"xkisxk"},"content":"     * The cards that are put into the deck are the same cards objects, in other","lastModifiedDate":"2021-10-26"},{"lineNumber":209,"author":{"gitId":"xkisxk"},"content":"     * words they are not new FlashCard objects.","lastModifiedDate":"2021-10-26"},{"lineNumber":210,"author":{"gitId":"xkisxk"},"content":"     *","lastModifiedDate":"2021-10-26"},{"lineNumber":211,"author":{"gitId":"xkisxk"},"content":"     * @return deck of low scoring cards","lastModifiedDate":"2021-10-26"},{"lineNumber":212,"author":{"gitId":"xkisxk"},"content":"     */","lastModifiedDate":"2021-10-26"},{"lineNumber":213,"author":{"gitId":"xkisxk"},"content":"    public Deck getLowScoringCards(int index) {","lastModifiedDate":"2021-10-26"},{"lineNumber":214,"author":{"gitId":"xkisxk"},"content":"        if (index \u003d\u003d -1) {","lastModifiedDate":"2021-10-26"},{"lineNumber":215,"author":{"gitId":"xkisxk"},"content":"            return getLowScoringCardsFromAllDecks();","lastModifiedDate":"2021-10-26"},{"lineNumber":216,"author":{"gitId":"xkisxk"},"content":"        }","lastModifiedDate":"2021-10-26"},{"lineNumber":217,"author":{"gitId":"xkisxk"},"content":"        if (hasDeck(index)) {","lastModifiedDate":"2021-10-26"},{"lineNumber":218,"author":{"gitId":"xkisxk"},"content":"            return getLowScoringCardsFromADeck(getDeck(index));","lastModifiedDate":"2021-10-26"},{"lineNumber":219,"author":{"gitId":"xkisxk"},"content":"        }","lastModifiedDate":"2021-10-26"},{"lineNumber":220,"author":{"gitId":"xkisxk"},"content":"        throw new IndexOutOfBoundsException(DECK_NOT_EXIST_MESSAGE);","lastModifiedDate":"2021-11-03"},{"lineNumber":221,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":222,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":223,"author":{"gitId":"xkisxk"},"content":"    /**","lastModifiedDate":"2021-10-26"},{"lineNumber":224,"author":{"gitId":"xkisxk"},"content":"     * A card is low scoring if its accumulated user score is less than 50% of","lastModifiedDate":"2021-10-26"},{"lineNumber":225,"author":{"gitId":"xkisxk"},"content":"     * the total score.","lastModifiedDate":"2021-10-26"},{"lineNumber":226,"author":{"gitId":"xkisxk"},"content":"     *","lastModifiedDate":"2021-10-26"},{"lineNumber":227,"author":{"gitId":"xkisxk"},"content":"     * @return true if card is low scoring, false otherwise","lastModifiedDate":"2021-10-26"},{"lineNumber":228,"author":{"gitId":"xkisxk"},"content":"     */","lastModifiedDate":"2021-10-26"},{"lineNumber":229,"author":{"gitId":"xkisxk"},"content":"    private boolean isLowScoring(FlashCard card) {","lastModifiedDate":"2021-10-26"},{"lineNumber":230,"author":{"gitId":"xkisxk"},"content":"        return (double) card.getUserScore() * 100 / card.getTotalScore() \u003c 50;","lastModifiedDate":"2021-10-26"},{"lineNumber":231,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":232,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":233,"author":{"gitId":"JWweiyin"},"content":"    public ArrayList\u003cDeck\u003e getDecks() {","lastModifiedDate":"2021-11-06"},{"lineNumber":234,"author":{"gitId":"JWweiyin"},"content":"        return decks;","lastModifiedDate":"2021-11-06"},{"lineNumber":235,"author":{"gitId":"JWweiyin"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":236,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":237,"author":{"gitId":"JWweiyin"},"content":"    public int getDeckIndex(Deck deck) {","lastModifiedDate":"2021-11-06"},{"lineNumber":238,"author":{"gitId":"JWweiyin"},"content":"        return decks.indexOf(deck);","lastModifiedDate":"2021-11-06"},{"lineNumber":239,"author":{"gitId":"JWweiyin"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":240,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":241,"author":{"gitId":"JWweiyin"},"content":"    public Deck getDeck(int index) {","lastModifiedDate":"2021-11-06"},{"lineNumber":242,"author":{"gitId":"JWweiyin"},"content":"        assert getDecksSize() \u003e 0;","lastModifiedDate":"2021-11-06"},{"lineNumber":243,"author":{"gitId":"JWweiyin"},"content":"        assert (index \u003e\u003d 0 \u0026\u0026 index \u003c getDecksSize());","lastModifiedDate":"2021-11-06"},{"lineNumber":244,"author":{"gitId":"JWweiyin"},"content":"        return decks.get(index);","lastModifiedDate":"2021-11-06"},{"lineNumber":245,"author":{"gitId":"JWweiyin"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":246,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":247,"author":{"gitId":"JWweiyin"},"content":"    public Deck getTestDeck(int index) {","lastModifiedDate":"2021-11-06"},{"lineNumber":248,"author":{"gitId":"JWweiyin"},"content":"        if (index \u003d\u003d -1) {","lastModifiedDate":"2021-11-06"},{"lineNumber":249,"author":{"gitId":"JWweiyin"},"content":"            Deck deckToTest \u003d new Deck(\"Test\");","lastModifiedDate":"2021-11-06"},{"lineNumber":250,"author":{"gitId":"JWweiyin"},"content":"            for (Deck deck : getDecks()) {","lastModifiedDate":"2021-11-06"},{"lineNumber":251,"author":{"gitId":"JWweiyin"},"content":"                for (FlashCard card : deck.getCards()) {","lastModifiedDate":"2021-11-06"},{"lineNumber":252,"author":{"gitId":"JWweiyin"},"content":"                    deckToTest.addFlashCard(card);","lastModifiedDate":"2021-11-06"},{"lineNumber":253,"author":{"gitId":"JWweiyin"},"content":"                }","lastModifiedDate":"2021-11-06"},{"lineNumber":254,"author":{"gitId":"JWweiyin"},"content":"            }","lastModifiedDate":"2021-11-06"},{"lineNumber":255,"author":{"gitId":"JWweiyin"},"content":"            return deckToTest;","lastModifiedDate":"2021-11-06"},{"lineNumber":256,"author":{"gitId":"JWweiyin"},"content":"        }","lastModifiedDate":"2021-11-06"},{"lineNumber":257,"author":{"gitId":"JWweiyin"},"content":"        if (hasDeck(index)) {","lastModifiedDate":"2021-11-06"},{"lineNumber":258,"author":{"gitId":"JWweiyin"},"content":"            return decks.get(index);","lastModifiedDate":"2021-11-06"},{"lineNumber":259,"author":{"gitId":"JWweiyin"},"content":"        }","lastModifiedDate":"2021-11-06"},{"lineNumber":260,"author":{"gitId":"JWweiyin"},"content":"        throw new IndexOutOfBoundsException(DECK_NOT_EXIST_MESSAGE);","lastModifiedDate":"2021-11-06"},{"lineNumber":261,"author":{"gitId":"JWweiyin"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":262,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":263,"author":{"gitId":"JWweiyin"},"content":"    public int getDecksSize() {","lastModifiedDate":"2021-11-06"},{"lineNumber":264,"author":{"gitId":"JWweiyin"},"content":"        return decks.size();","lastModifiedDate":"2021-11-06"},{"lineNumber":265,"author":{"gitId":"JWweiyin"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":266,"author":{"gitId":"JWweiyin"},"content":"}","lastModifiedDate":"2021-10-16"}],"authorContributionMap":{"JWweiyin":93,"ThaddeusLim99":41,"astralum":21,"xRossKoh":7,"xkisxk":104}},{"path":"src/main/java/seedu/cardli/flashcard/FlashCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"xRossKoh"},"content":"package seedu.cardli.flashcard;","lastModifiedDate":"2021-10-26"},{"lineNumber":2,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-02"},{"lineNumber":3,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":4,"author":{"gitId":"xRossKoh"},"content":"import org.json.simple.JSONObject;","lastModifiedDate":"2021-11-01"},{"lineNumber":5,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":6,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":7,"author":{"gitId":"astralum"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-11-01"},{"lineNumber":8,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":9,"author":{"gitId":"JWweiyin"},"content":"import java.util.logging.Level;","lastModifiedDate":"2021-10-14"},{"lineNumber":10,"author":{"gitId":"JWweiyin"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-10-14"},{"lineNumber":11,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":12,"author":{"gitId":"xRossKoh"},"content":"/**","lastModifiedDate":"2021-10-06"},{"lineNumber":13,"author":{"gitId":"xRossKoh"},"content":" * Represents information within a single flashcard.","lastModifiedDate":"2021-10-07"},{"lineNumber":14,"author":{"gitId":"xRossKoh"},"content":" */","lastModifiedDate":"2021-10-06"},{"lineNumber":15,"author":{"gitId":"JWweiyin"},"content":"public class FlashCard {","lastModifiedDate":"2021-10-02"},{"lineNumber":16,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":17,"author":{"gitId":"astralum"},"content":"    private static final String FLASHCARD_TOP_FRONT \u003d \"*\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dFRONT\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d*\";","lastModifiedDate":"2021-11-01"},{"lineNumber":18,"author":{"gitId":"astralum"},"content":"    private static final String FLASHCARD_TOP_BACK \u003d \"*\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dBACK\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d*\";","lastModifiedDate":"2021-11-04"},{"lineNumber":19,"author":{"gitId":"astralum"},"content":"    private static final String FLASHCARD_BOTTOM \u003d \"*\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d*\";","lastModifiedDate":"2021-11-01"},{"lineNumber":20,"author":{"gitId":"astralum"},"content":"    private static final String FLASHCARD_WHITESPACE \u003d \" \";","lastModifiedDate":"2021-11-01"},{"lineNumber":21,"author":{"gitId":"astralum"},"content":"    private static final String FLASHCARD_TOP_LINE \u003d FLASHCARD_TOP_FRONT","lastModifiedDate":"2021-11-01"},{"lineNumber":22,"author":{"gitId":"astralum"},"content":"            + FLASHCARD_WHITESPACE + FLASHCARD_TOP_BACK;","lastModifiedDate":"2021-11-01"},{"lineNumber":23,"author":{"gitId":"astralum"},"content":"    private static final String FLASHCARD_BOTTOM_LINE \u003d FLASHCARD_BOTTOM","lastModifiedDate":"2021-11-01"},{"lineNumber":24,"author":{"gitId":"astralum"},"content":"            + FLASHCARD_WHITESPACE + FLASHCARD_BOTTOM;","lastModifiedDate":"2021-11-01"},{"lineNumber":25,"author":{"gitId":"astralum"},"content":"    private static final int FLASHCARD_MAX_LINE_LENGTH \u003d 37;","lastModifiedDate":"2021-11-01"},{"lineNumber":26,"author":{"gitId":"xRossKoh"},"content":"    static final String SEPARATOR \u003d \" | \";","lastModifiedDate":"2021-10-18"},{"lineNumber":27,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":28,"author":{"gitId":"JWweiyin"},"content":"    private static final Logger logger \u003d Logger.getLogger(\"Card\");","lastModifiedDate":"2021-10-14"},{"lineNumber":29,"author":{"gitId":"JWweiyin"},"content":"    private String front;","lastModifiedDate":"2021-10-02"},{"lineNumber":30,"author":{"gitId":"JWweiyin"},"content":"    private String back;","lastModifiedDate":"2021-10-02"},{"lineNumber":31,"author":{"gitId":"xkisxk"},"content":"    private int userScore;","lastModifiedDate":"2021-10-17"},{"lineNumber":32,"author":{"gitId":"xkisxk"},"content":"    private int totalScore;","lastModifiedDate":"2021-10-17"},{"lineNumber":33,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-02"},{"lineNumber":34,"author":{"gitId":"JWweiyin"},"content":"    public FlashCard(String front, String back) {","lastModifiedDate":"2021-10-02"},{"lineNumber":35,"author":{"gitId":"ThaddeusLim99"},"content":"        logger.setLevel(Level.WARNING);","lastModifiedDate":"2021-10-14"},{"lineNumber":36,"author":{"gitId":"JWweiyin"},"content":"        assert front !\u003d null;","lastModifiedDate":"2021-10-14"},{"lineNumber":37,"author":{"gitId":"JWweiyin"},"content":"        assert back !\u003d null;","lastModifiedDate":"2021-10-14"},{"lineNumber":38,"author":{"gitId":"JWweiyin"},"content":"        this.front \u003d front;","lastModifiedDate":"2021-10-02"},{"lineNumber":39,"author":{"gitId":"JWweiyin"},"content":"        this.back \u003d back;","lastModifiedDate":"2021-10-02"},{"lineNumber":40,"author":{"gitId":"xkisxk"},"content":"        this.userScore \u003d 0;","lastModifiedDate":"2021-10-17"},{"lineNumber":41,"author":{"gitId":"xkisxk"},"content":"        this.totalScore \u003d 0;","lastModifiedDate":"2021-10-17"},{"lineNumber":42,"author":{"gitId":"JWweiyin"},"content":"        logger.log(Level.INFO, \"Card front: \" + front);","lastModifiedDate":"2021-10-14"},{"lineNumber":43,"author":{"gitId":"JWweiyin"},"content":"        logger.log(Level.INFO, \"Card back: \" + back);","lastModifiedDate":"2021-10-14"},{"lineNumber":44,"author":{"gitId":"JWweiyin"},"content":"    }","lastModifiedDate":"2021-10-02"},{"lineNumber":45,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-02"},{"lineNumber":46,"author":{"gitId":"xRossKoh"},"content":"    public FlashCard(String front, String back, int userScore, int totalScore) {","lastModifiedDate":"2021-10-18"},{"lineNumber":47,"author":{"gitId":"xRossKoh"},"content":"        logger.setLevel(Level.WARNING);","lastModifiedDate":"2021-10-18"},{"lineNumber":48,"author":{"gitId":"xRossKoh"},"content":"        assert front !\u003d null;","lastModifiedDate":"2021-10-18"},{"lineNumber":49,"author":{"gitId":"xRossKoh"},"content":"        assert back !\u003d null;","lastModifiedDate":"2021-10-18"},{"lineNumber":50,"author":{"gitId":"xRossKoh"},"content":"        this.front \u003d front;","lastModifiedDate":"2021-10-18"},{"lineNumber":51,"author":{"gitId":"xRossKoh"},"content":"        this.back \u003d back;","lastModifiedDate":"2021-10-18"},{"lineNumber":52,"author":{"gitId":"xRossKoh"},"content":"        this.userScore \u003d userScore;","lastModifiedDate":"2021-10-18"},{"lineNumber":53,"author":{"gitId":"xRossKoh"},"content":"        this.totalScore \u003d totalScore;","lastModifiedDate":"2021-10-18"},{"lineNumber":54,"author":{"gitId":"xRossKoh"},"content":"        logger.log(Level.INFO, \"Card front: \" + front);","lastModifiedDate":"2021-10-18"},{"lineNumber":55,"author":{"gitId":"xRossKoh"},"content":"        logger.log(Level.INFO, \"Card back: \" + back);","lastModifiedDate":"2021-10-18"},{"lineNumber":56,"author":{"gitId":"xRossKoh"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":57,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":58,"author":{"gitId":"astralum"},"content":"    /**","lastModifiedDate":"2021-11-01"},{"lineNumber":59,"author":{"gitId":"astralum"},"content":"     * Splits the given word/phrase into a String array so that it","lastModifiedDate":"2021-11-01"},{"lineNumber":60,"author":{"gitId":"astralum"},"content":"     * can fit nicely into the flashcard to be printed to the","lastModifiedDate":"2021-11-01"},{"lineNumber":61,"author":{"gitId":"astralum"},"content":"     * standard output.","lastModifiedDate":"2021-11-01"},{"lineNumber":62,"author":{"gitId":"JWweiyin"},"content":"     *","lastModifiedDate":"2021-11-06"},{"lineNumber":63,"author":{"gitId":"astralum"},"content":"     * @param word The word/phrase to be split","lastModifiedDate":"2021-11-01"},{"lineNumber":64,"author":{"gitId":"astralum"},"content":"     * @return A String array containing the split input","lastModifiedDate":"2021-11-01"},{"lineNumber":65,"author":{"gitId":"astralum"},"content":"     */","lastModifiedDate":"2021-11-01"},{"lineNumber":66,"author":{"gitId":"astralum"},"content":"    private String[] splitFlashcardWord(String word) {","lastModifiedDate":"2021-11-01"},{"lineNumber":67,"author":{"gitId":"astralum"},"content":"        ArrayList\u003cString\u003e splitWords \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-11-01"},{"lineNumber":68,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":69,"author":{"gitId":"astralum"},"content":"        int index \u003d 0;","lastModifiedDate":"2021-11-01"},{"lineNumber":70,"author":{"gitId":"astralum"},"content":"        while (index \u003c word.length()) {","lastModifiedDate":"2021-11-01"},{"lineNumber":71,"author":{"gitId":"astralum"},"content":"            String currentLine;","lastModifiedDate":"2021-11-01"},{"lineNumber":72,"author":{"gitId":"astralum"},"content":"            if (index + FLASHCARD_MAX_LINE_LENGTH - 1 \u003e\u003d word.length()) {","lastModifiedDate":"2021-11-01"},{"lineNumber":73,"author":{"gitId":"astralum"},"content":"                // probably the characters of the word","lastModifiedDate":"2021-11-01"},{"lineNumber":74,"author":{"gitId":"astralum"},"content":"                currentLine \u003d word.substring(index);","lastModifiedDate":"2021-11-01"},{"lineNumber":75,"author":{"gitId":"astralum"},"content":"                index +\u003d FLASHCARD_MAX_LINE_LENGTH;","lastModifiedDate":"2021-11-01"},{"lineNumber":76,"author":{"gitId":"astralum"},"content":"            } else {","lastModifiedDate":"2021-11-01"},{"lineNumber":77,"author":{"gitId":"astralum"},"content":"                assert index + FLASHCARD_MAX_LINE_LENGTH - 1 \u003c word.length();","lastModifiedDate":"2021-11-01"},{"lineNumber":78,"author":{"gitId":"astralum"},"content":"                char terminalChar \u003d word.charAt(index + FLASHCARD_MAX_LINE_LENGTH - 1);","lastModifiedDate":"2021-11-01"},{"lineNumber":79,"author":{"gitId":"astralum"},"content":"                if (terminalChar \u003d\u003d \u0027 \u0027 || terminalChar \u003d\u003d \u0027-\u0027) {","lastModifiedDate":"2021-11-01"},{"lineNumber":80,"author":{"gitId":"astralum"},"content":"                    currentLine \u003d word.substring(index, index + FLASHCARD_MAX_LINE_LENGTH);","lastModifiedDate":"2021-11-01"},{"lineNumber":81,"author":{"gitId":"astralum"},"content":"                    index +\u003d FLASHCARD_MAX_LINE_LENGTH;","lastModifiedDate":"2021-11-01"},{"lineNumber":82,"author":{"gitId":"astralum"},"content":"                } else {","lastModifiedDate":"2021-11-01"},{"lineNumber":83,"author":{"gitId":"astralum"},"content":"                    currentLine \u003d word","lastModifiedDate":"2021-11-01"},{"lineNumber":84,"author":{"gitId":"astralum"},"content":"                            .substring(index, index + FLASHCARD_MAX_LINE_LENGTH - 1)","lastModifiedDate":"2021-11-01"},{"lineNumber":85,"author":{"gitId":"astralum"},"content":"                            .concat(\"-\");","lastModifiedDate":"2021-11-01"},{"lineNumber":86,"author":{"gitId":"astralum"},"content":"                    index +\u003d FLASHCARD_MAX_LINE_LENGTH - 1;","lastModifiedDate":"2021-11-01"},{"lineNumber":87,"author":{"gitId":"astralum"},"content":"                }","lastModifiedDate":"2021-11-01"},{"lineNumber":88,"author":{"gitId":"astralum"},"content":"                assert currentLine.length() \u003d\u003d 37;","lastModifiedDate":"2021-11-01"},{"lineNumber":89,"author":{"gitId":"astralum"},"content":"            }","lastModifiedDate":"2021-11-01"},{"lineNumber":90,"author":{"gitId":"astralum"},"content":"            splitWords.add(currentLine);","lastModifiedDate":"2021-11-01"},{"lineNumber":91,"author":{"gitId":"xkisxk"},"content":"        }","lastModifiedDate":"2021-10-17"},{"lineNumber":92,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":93,"author":{"gitId":"astralum"},"content":"        String[] splitWordsArray \u003d new String[splitWords.size()];","lastModifiedDate":"2021-11-01"},{"lineNumber":94,"author":{"gitId":"astralum"},"content":"        splitWordsArray \u003d splitWords.toArray(splitWordsArray);","lastModifiedDate":"2021-11-01"},{"lineNumber":95,"author":{"gitId":"astralum"},"content":"        return splitWordsArray;","lastModifiedDate":"2021-11-01"},{"lineNumber":96,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":97,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":98,"author":{"gitId":"astralum"},"content":"    private String returnWhitespaceLine() {","lastModifiedDate":"2021-11-01"},{"lineNumber":99,"author":{"gitId":"astralum"},"content":"        String result \u003d \"\";","lastModifiedDate":"2021-11-01"},{"lineNumber":100,"author":{"gitId":"astralum"},"content":"        for (int i \u003d 0; i \u003c FLASHCARD_MAX_LINE_LENGTH; i++) {","lastModifiedDate":"2021-11-01"},{"lineNumber":101,"author":{"gitId":"astralum"},"content":"            result \u003d result.concat(FLASHCARD_WHITESPACE);","lastModifiedDate":"2021-11-01"},{"lineNumber":102,"author":{"gitId":"astralum"},"content":"        }","lastModifiedDate":"2021-11-01"},{"lineNumber":103,"author":{"gitId":"astralum"},"content":"        return result;","lastModifiedDate":"2021-10-21"},{"lineNumber":104,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":105,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":106,"author":{"gitId":"astralum"},"content":"    private String padLineWithWhitespace(String line) {","lastModifiedDate":"2021-11-01"},{"lineNumber":107,"author":{"gitId":"astralum"},"content":"        // pads line with whitespaces so that it is centred","lastModifiedDate":"2021-11-01"},{"lineNumber":108,"author":{"gitId":"astralum"},"content":"        // and has 35 characters","lastModifiedDate":"2021-11-01"},{"lineNumber":109,"author":{"gitId":"astralum"},"content":"        String result \u003d \"\";","lastModifiedDate":"2021-11-01"},{"lineNumber":110,"author":{"gitId":"astralum"},"content":"        int numOfExcessChars \u003d FLASHCARD_MAX_LINE_LENGTH - line.length();","lastModifiedDate":"2021-11-01"},{"lineNumber":111,"author":{"gitId":"astralum"},"content":"        for (int i \u003d 0; i \u003c numOfExcessChars / 2; i++) {","lastModifiedDate":"2021-11-01"},{"lineNumber":112,"author":{"gitId":"astralum"},"content":"            result \u003d result.concat(FLASHCARD_WHITESPACE);","lastModifiedDate":"2021-11-01"},{"lineNumber":113,"author":{"gitId":"astralum"},"content":"        }","lastModifiedDate":"2021-11-01"},{"lineNumber":114,"author":{"gitId":"astralum"},"content":"        result \u003d result.concat(line);","lastModifiedDate":"2021-11-01"},{"lineNumber":115,"author":{"gitId":"astralum"},"content":"        for (int i \u003d 0; i \u003c (numOfExcessChars + 1) / 2; i++) {","lastModifiedDate":"2021-11-01"},{"lineNumber":116,"author":{"gitId":"astralum"},"content":"            result \u003d result.concat(FLASHCARD_WHITESPACE);","lastModifiedDate":"2021-11-01"},{"lineNumber":117,"author":{"gitId":"astralum"},"content":"        }","lastModifiedDate":"2021-11-01"},{"lineNumber":118,"author":{"gitId":"astralum"},"content":"        return result;","lastModifiedDate":"2021-11-01"},{"lineNumber":119,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":120,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":121,"author":{"gitId":"astralum"},"content":"    private String[] padLinesWithEmptyLines(String[] lines, String emptyLine, int numOfLines) {","lastModifiedDate":"2021-11-01"},{"lineNumber":122,"author":{"gitId":"astralum"},"content":"        // creates and returns a String[] so that the number of lines","lastModifiedDate":"2021-11-01"},{"lineNumber":123,"author":{"gitId":"astralum"},"content":"        // equals to the given numOfLines","lastModifiedDate":"2021-11-01"},{"lineNumber":124,"author":{"gitId":"astralum"},"content":"        String[] newLines \u003d new String[numOfLines];","lastModifiedDate":"2021-11-01"},{"lineNumber":125,"author":{"gitId":"astralum"},"content":"        int numOfExcessLines \u003d numOfLines - lines.length;","lastModifiedDate":"2021-11-01"},{"lineNumber":126,"author":{"gitId":"astralum"},"content":"        for (int i \u003d 0; i \u003c numOfExcessLines / 2; i++) {","lastModifiedDate":"2021-11-01"},{"lineNumber":127,"author":{"gitId":"astralum"},"content":"            newLines[i] \u003d emptyLine;","lastModifiedDate":"2021-11-01"},{"lineNumber":128,"author":{"gitId":"astralum"},"content":"        }","lastModifiedDate":"2021-11-01"},{"lineNumber":129,"author":{"gitId":"astralum"},"content":"        for (int i \u003d 0; i \u003c lines.length; i++) {","lastModifiedDate":"2021-11-01"},{"lineNumber":130,"author":{"gitId":"astralum"},"content":"            newLines[numOfExcessLines / 2 + i] \u003d lines[i];","lastModifiedDate":"2021-11-01"},{"lineNumber":131,"author":{"gitId":"ThaddeusLim99"},"content":"        }","lastModifiedDate":"2021-10-17"},{"lineNumber":132,"author":{"gitId":"astralum"},"content":"        for (int i \u003d 0; i \u003c (numOfExcessLines + 1) / 2; i++) {","lastModifiedDate":"2021-11-01"},{"lineNumber":133,"author":{"gitId":"astralum"},"content":"            newLines[numOfExcessLines / 2 + lines.length + i] \u003d emptyLine;","lastModifiedDate":"2021-11-01"},{"lineNumber":134,"author":{"gitId":"astralum"},"content":"        }","lastModifiedDate":"2021-11-01"},{"lineNumber":135,"author":{"gitId":"astralum"},"content":"        return newLines;","lastModifiedDate":"2021-11-01"},{"lineNumber":136,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-11-01"},{"lineNumber":137,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":138,"author":{"gitId":"astralum"},"content":"    private String joinFrontBackLines(String[] frontLines, String[] backLines) {","lastModifiedDate":"2021-11-01"},{"lineNumber":139,"author":{"gitId":"astralum"},"content":"        int numOfLines \u003d 0;","lastModifiedDate":"2021-11-01"},{"lineNumber":140,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":141,"author":{"gitId":"astralum"},"content":"        // pad last line of frontLines and backLines with","lastModifiedDate":"2021-11-01"},{"lineNumber":142,"author":{"gitId":"astralum"},"content":"        // whitespaces so that it makes up to 35 characters","lastModifiedDate":"2021-11-01"},{"lineNumber":143,"author":{"gitId":"astralum"},"content":"        String frontLinesLast \u003d frontLines[frontLines.length - 1];","lastModifiedDate":"2021-11-01"},{"lineNumber":144,"author":{"gitId":"astralum"},"content":"        frontLines[frontLines.length - 1] \u003d padLineWithWhitespace(frontLinesLast);","lastModifiedDate":"2021-11-01"},{"lineNumber":145,"author":{"gitId":"astralum"},"content":"        String backLinesLast \u003d backLines[backLines.length - 1];","lastModifiedDate":"2021-11-01"},{"lineNumber":146,"author":{"gitId":"astralum"},"content":"        backLines[backLines.length - 1] \u003d padLineWithWhitespace(backLinesLast);","lastModifiedDate":"2021-11-01"},{"lineNumber":147,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":148,"author":{"gitId":"astralum"},"content":"        String[] newFrontLines;","lastModifiedDate":"2021-11-01"},{"lineNumber":149,"author":{"gitId":"astralum"},"content":"        String[] newBackLines;","lastModifiedDate":"2021-11-01"},{"lineNumber":150,"author":{"gitId":"astralum"},"content":"        // check if front and back have the same number of lines","lastModifiedDate":"2021-11-01"},{"lineNumber":151,"author":{"gitId":"astralum"},"content":"        if (frontLines.length \u003d\u003d backLines.length) {","lastModifiedDate":"2021-11-01"},{"lineNumber":152,"author":{"gitId":"astralum"},"content":"            // join the same line of front and back","lastModifiedDate":"2021-11-01"},{"lineNumber":153,"author":{"gitId":"astralum"},"content":"            numOfLines \u003d frontLines.length;","lastModifiedDate":"2021-11-01"},{"lineNumber":154,"author":{"gitId":"astralum"},"content":"            newFrontLines \u003d frontLines;","lastModifiedDate":"2021-11-01"},{"lineNumber":155,"author":{"gitId":"astralum"},"content":"            newBackLines \u003d backLines;","lastModifiedDate":"2021-11-01"},{"lineNumber":156,"author":{"gitId":"astralum"},"content":"        } else {","lastModifiedDate":"2021-11-01"},{"lineNumber":157,"author":{"gitId":"astralum"},"content":"            String emptyLine \u003d returnWhitespaceLine();","lastModifiedDate":"2021-11-01"},{"lineNumber":158,"author":{"gitId":"astralum"},"content":"            if (frontLines.length \u003c backLines.length) {","lastModifiedDate":"2021-11-01"},{"lineNumber":159,"author":{"gitId":"astralum"},"content":"                // front has fewer lines than back","lastModifiedDate":"2021-11-01"},{"lineNumber":160,"author":{"gitId":"astralum"},"content":"                numOfLines \u003d backLines.length;","lastModifiedDate":"2021-11-01"},{"lineNumber":161,"author":{"gitId":"astralum"},"content":"                // pad frontLines with empty lines to match numOfLines","lastModifiedDate":"2021-11-01"},{"lineNumber":162,"author":{"gitId":"astralum"},"content":"                newFrontLines \u003d padLinesWithEmptyLines(frontLines, emptyLine, numOfLines);","lastModifiedDate":"2021-11-01"},{"lineNumber":163,"author":{"gitId":"astralum"},"content":"                newBackLines \u003d backLines;","lastModifiedDate":"2021-11-01"},{"lineNumber":164,"author":{"gitId":"astralum"},"content":"            } else {","lastModifiedDate":"2021-11-01"},{"lineNumber":165,"author":{"gitId":"astralum"},"content":"                assert backLines.length \u003c frontLines.length;","lastModifiedDate":"2021-11-01"},{"lineNumber":166,"author":{"gitId":"astralum"},"content":"                // back has fewer lines than front","lastModifiedDate":"2021-11-01"},{"lineNumber":167,"author":{"gitId":"astralum"},"content":"                numOfLines \u003d frontLines.length;","lastModifiedDate":"2021-11-01"},{"lineNumber":168,"author":{"gitId":"astralum"},"content":"                // pad frontLines with empty lines to match numOfLines","lastModifiedDate":"2021-11-01"},{"lineNumber":169,"author":{"gitId":"astralum"},"content":"                newBackLines \u003d padLinesWithEmptyLines(backLines, emptyLine, numOfLines);","lastModifiedDate":"2021-11-01"},{"lineNumber":170,"author":{"gitId":"astralum"},"content":"                newFrontLines \u003d frontLines;","lastModifiedDate":"2021-11-01"},{"lineNumber":171,"author":{"gitId":"astralum"},"content":"            }","lastModifiedDate":"2021-11-01"},{"lineNumber":172,"author":{"gitId":"astralum"},"content":"        }","lastModifiedDate":"2021-11-01"},{"lineNumber":173,"author":{"gitId":"astralum"},"content":"        String result \u003d \"\";","lastModifiedDate":"2021-11-01"},{"lineNumber":174,"author":{"gitId":"astralum"},"content":"        for (int i \u003d 0; i \u003c numOfLines; i++) {","lastModifiedDate":"2021-11-01"},{"lineNumber":175,"author":{"gitId":"astralum"},"content":"            String line \u003d FLASHCARD_WHITESPACE + newFrontLines[i] + FLASHCARD_WHITESPACE","lastModifiedDate":"2021-11-01"},{"lineNumber":176,"author":{"gitId":"astralum"},"content":"                    + FLASHCARD_WHITESPACE","lastModifiedDate":"2021-11-01"},{"lineNumber":177,"author":{"gitId":"astralum"},"content":"                    + FLASHCARD_WHITESPACE + newBackLines[i];","lastModifiedDate":"2021-11-01"},{"lineNumber":178,"author":{"gitId":"astralum"},"content":"            result \u003d result.concat(line + System.lineSeparator());","lastModifiedDate":"2021-11-01"},{"lineNumber":179,"author":{"gitId":"astralum"},"content":"        }","lastModifiedDate":"2021-11-01"},{"lineNumber":180,"author":{"gitId":"astralum"},"content":"        return result;","lastModifiedDate":"2021-11-01"},{"lineNumber":181,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-11-01"},{"lineNumber":182,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":183,"author":{"gitId":"astralum"},"content":"    private String joinFrontBack(String front, String back) {","lastModifiedDate":"2021-11-01"},{"lineNumber":184,"author":{"gitId":"astralum"},"content":"        String[] frontLines \u003d splitFlashcardWord(front);","lastModifiedDate":"2021-11-01"},{"lineNumber":185,"author":{"gitId":"astralum"},"content":"        String[] backLines \u003d splitFlashcardWord(back);","lastModifiedDate":"2021-11-01"},{"lineNumber":186,"author":{"gitId":"astralum"},"content":"        String result \u003d joinFrontBackLines(frontLines, backLines);","lastModifiedDate":"2021-11-01"},{"lineNumber":187,"author":{"gitId":"astralum"},"content":"        return result;","lastModifiedDate":"2021-11-01"},{"lineNumber":188,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-11-01"},{"lineNumber":189,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":190,"author":{"gitId":"astralum"},"content":"    /**","lastModifiedDate":"2021-11-01"},{"lineNumber":191,"author":{"gitId":"astralum"},"content":"     * Formats the flashcard to be printed to the standard output","lastModifiedDate":"2021-11-01"},{"lineNumber":192,"author":{"gitId":"astralum"},"content":"     * as a String.","lastModifiedDate":"2021-11-01"},{"lineNumber":193,"author":{"gitId":"JWweiyin"},"content":"     *","lastModifiedDate":"2021-11-06"},{"lineNumber":194,"author":{"gitId":"astralum"},"content":"     * @return A String containing the formatted flashcard","lastModifiedDate":"2021-11-01"},{"lineNumber":195,"author":{"gitId":"astralum"},"content":"     */","lastModifiedDate":"2021-11-01"},{"lineNumber":196,"author":{"gitId":"astralum"},"content":"    public String returnFlashCard() {","lastModifiedDate":"2021-11-01"},{"lineNumber":197,"author":{"gitId":"astralum"},"content":"        String top \u003d FLASHCARD_TOP_LINE + System.lineSeparator();","lastModifiedDate":"2021-11-01"},{"lineNumber":198,"author":{"gitId":"astralum"},"content":"        String middle \u003d joinFrontBack(this.front, this.back);","lastModifiedDate":"2021-11-01"},{"lineNumber":199,"author":{"gitId":"astralum"},"content":"        String bottom \u003d FLASHCARD_BOTTOM_LINE + System.lineSeparator();","lastModifiedDate":"2021-11-01"},{"lineNumber":200,"author":{"gitId":"astralum"},"content":"        String result \u003d top + middle + bottom;","lastModifiedDate":"2021-11-01"},{"lineNumber":201,"author":{"gitId":"astralum"},"content":"        return result;","lastModifiedDate":"2021-11-01"},{"lineNumber":202,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-11-01"},{"lineNumber":203,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":204,"author":{"gitId":"astralum"},"content":"    public void incrementUserScore() {","lastModifiedDate":"2021-11-01"},{"lineNumber":205,"author":{"gitId":"astralum"},"content":"        logger.setLevel(Level.WARNING);","lastModifiedDate":"2021-11-01"},{"lineNumber":206,"author":{"gitId":"astralum"},"content":"        logger.log(Level.INFO, \"Incrementing flashcard user score\");","lastModifiedDate":"2021-11-01"},{"lineNumber":207,"author":{"gitId":"astralum"},"content":"        userScore++;","lastModifiedDate":"2021-11-01"},{"lineNumber":208,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-11-01"},{"lineNumber":209,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":210,"author":{"gitId":"astralum"},"content":"    public void incrementTotalScore() {","lastModifiedDate":"2021-11-01"},{"lineNumber":211,"author":{"gitId":"astralum"},"content":"        logger.setLevel(Level.WARNING);","lastModifiedDate":"2021-11-01"},{"lineNumber":212,"author":{"gitId":"astralum"},"content":"        logger.log(Level.INFO, \"Incrementing flashcard total score\");","lastModifiedDate":"2021-11-01"},{"lineNumber":213,"author":{"gitId":"astralum"},"content":"        totalScore++;","lastModifiedDate":"2021-11-01"},{"lineNumber":214,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-11-01"},{"lineNumber":215,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":216,"author":{"gitId":"xRossKoh"},"content":"    //@@author xRossKoh","lastModifiedDate":"2021-11-06"},{"lineNumber":217,"author":{"gitId":"xRossKoh"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":218,"author":{"gitId":"xRossKoh"},"content":"     * Converts a FlashCard instance into a JSONObject instance.","lastModifiedDate":"2021-11-07"},{"lineNumber":219,"author":{"gitId":"xRossKoh"},"content":"     *","lastModifiedDate":"2021-11-07"},{"lineNumber":220,"author":{"gitId":"xRossKoh"},"content":"     * @return      FlashCard instance as a JSONObject instance.","lastModifiedDate":"2021-11-07"},{"lineNumber":221,"author":{"gitId":"xRossKoh"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":222,"author":{"gitId":"xRossKoh"},"content":"    public JSONObject toJsonObject() {","lastModifiedDate":"2021-11-06"},{"lineNumber":223,"author":{"gitId":"xRossKoh"},"content":"        JSONObject jsonCard \u003d new JSONObject();","lastModifiedDate":"2021-11-06"},{"lineNumber":224,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":225,"author":{"gitId":"xRossKoh"},"content":"        jsonCard.put(\"front\", getFront());","lastModifiedDate":"2021-11-06"},{"lineNumber":226,"author":{"gitId":"xRossKoh"},"content":"        jsonCard.put(\"back\", getBack());","lastModifiedDate":"2021-11-06"},{"lineNumber":227,"author":{"gitId":"xRossKoh"},"content":"        jsonCard.put(\"userScore\", getUserScore());","lastModifiedDate":"2021-11-06"},{"lineNumber":228,"author":{"gitId":"xRossKoh"},"content":"        jsonCard.put(\"totalScore\", getTotalScore());","lastModifiedDate":"2021-11-06"},{"lineNumber":229,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":230,"author":{"gitId":"xRossKoh"},"content":"        return jsonCard;","lastModifiedDate":"2021-11-06"},{"lineNumber":231,"author":{"gitId":"xRossKoh"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":232,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":233,"author":{"gitId":"astralum"},"content":"    //@@author astralum","lastModifiedDate":"2021-11-06"},{"lineNumber":234,"author":{"gitId":"astralum"},"content":"    /**","lastModifiedDate":"2021-10-06"},{"lineNumber":235,"author":{"gitId":"astralum"},"content":"     * Getter for String on front of flashcard.","lastModifiedDate":"2021-10-06"},{"lineNumber":236,"author":{"gitId":"astralum"},"content":"     *","lastModifiedDate":"2021-10-06"},{"lineNumber":237,"author":{"gitId":"astralum"},"content":"     * @return String on front of flashcard","lastModifiedDate":"2021-10-06"},{"lineNumber":238,"author":{"gitId":"astralum"},"content":"     */","lastModifiedDate":"2021-10-06"},{"lineNumber":239,"author":{"gitId":"astralum"},"content":"    public String getFront() {","lastModifiedDate":"2021-10-04"},{"lineNumber":240,"author":{"gitId":"astralum"},"content":"        logger.setLevel(Level.WARNING);","lastModifiedDate":"2021-10-14"},{"lineNumber":241,"author":{"gitId":"astralum"},"content":"        assert this.front !\u003d null;","lastModifiedDate":"2021-10-14"},{"lineNumber":242,"author":{"gitId":"astralum"},"content":"        logger.log(Level.INFO, \"Getting card front: \" + front);","lastModifiedDate":"2021-10-14"},{"lineNumber":243,"author":{"gitId":"astralum"},"content":"        return this.front;","lastModifiedDate":"2021-10-04"},{"lineNumber":244,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-10-04"},{"lineNumber":245,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":246,"author":{"gitId":"astralum"},"content":"    /**","lastModifiedDate":"2021-10-06"},{"lineNumber":247,"author":{"gitId":"astralum"},"content":"     * Getter for String on back of flashcard.","lastModifiedDate":"2021-10-06"},{"lineNumber":248,"author":{"gitId":"astralum"},"content":"     *","lastModifiedDate":"2021-10-06"},{"lineNumber":249,"author":{"gitId":"astralum"},"content":"     * @return String on back of flashcard","lastModifiedDate":"2021-10-06"},{"lineNumber":250,"author":{"gitId":"astralum"},"content":"     */","lastModifiedDate":"2021-10-06"},{"lineNumber":251,"author":{"gitId":"astralum"},"content":"    public String getBack() {","lastModifiedDate":"2021-10-07"},{"lineNumber":252,"author":{"gitId":"astralum"},"content":"        logger.setLevel(Level.WARNING);","lastModifiedDate":"2021-10-14"},{"lineNumber":253,"author":{"gitId":"astralum"},"content":"        assert this.back !\u003d null;","lastModifiedDate":"2021-10-14"},{"lineNumber":254,"author":{"gitId":"astralum"},"content":"        logger.log(Level.INFO, \"Getting card back: \" + back);","lastModifiedDate":"2021-10-14"},{"lineNumber":255,"author":{"gitId":"astralum"},"content":"        return this.back;","lastModifiedDate":"2021-10-07"},{"lineNumber":256,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":257,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":258,"author":{"gitId":"astralum"},"content":"    /**","lastModifiedDate":"2021-11-01"},{"lineNumber":259,"author":{"gitId":"astralum"},"content":"     * Getter for userScore.","lastModifiedDate":"2021-11-01"},{"lineNumber":260,"author":{"gitId":"astralum"},"content":"     *","lastModifiedDate":"2021-11-06"},{"lineNumber":261,"author":{"gitId":"astralum"},"content":"     * @return An integer representing userScore","lastModifiedDate":"2021-11-01"},{"lineNumber":262,"author":{"gitId":"astralum"},"content":"     */","lastModifiedDate":"2021-11-01"},{"lineNumber":263,"author":{"gitId":"astralum"},"content":"    public int getUserScore() {","lastModifiedDate":"2021-10-17"},{"lineNumber":264,"author":{"gitId":"astralum"},"content":"        return this.userScore;","lastModifiedDate":"2021-10-17"},{"lineNumber":265,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":266,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":267,"author":{"gitId":"astralum"},"content":"    /**","lastModifiedDate":"2021-11-01"},{"lineNumber":268,"author":{"gitId":"astralum"},"content":"     * Getter for totalScore.","lastModifiedDate":"2021-11-01"},{"lineNumber":269,"author":{"gitId":"astralum"},"content":"     *","lastModifiedDate":"2021-11-06"},{"lineNumber":270,"author":{"gitId":"astralum"},"content":"     * @return An integer representing totalScore","lastModifiedDate":"2021-11-01"},{"lineNumber":271,"author":{"gitId":"astralum"},"content":"     */","lastModifiedDate":"2021-11-01"},{"lineNumber":272,"author":{"gitId":"astralum"},"content":"    public int getTotalScore() {","lastModifiedDate":"2021-10-17"},{"lineNumber":273,"author":{"gitId":"astralum"},"content":"        return this.totalScore;","lastModifiedDate":"2021-10-17"},{"lineNumber":274,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":275,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":276,"author":{"gitId":"astralum"},"content":"    /**","lastModifiedDate":"2021-11-01"},{"lineNumber":277,"author":{"gitId":"astralum"},"content":"     * Setter for front.","lastModifiedDate":"2021-11-01"},{"lineNumber":278,"author":{"gitId":"astralum"},"content":"     *","lastModifiedDate":"2021-11-06"},{"lineNumber":279,"author":{"gitId":"astralum"},"content":"     * @param input The input to replace front.","lastModifiedDate":"2021-11-01"},{"lineNumber":280,"author":{"gitId":"astralum"},"content":"     */","lastModifiedDate":"2021-11-01"},{"lineNumber":281,"author":{"gitId":"astralum"},"content":"    public void setFront(String input) {","lastModifiedDate":"2021-10-17"},{"lineNumber":282,"author":{"gitId":"astralum"},"content":"        logger.setLevel(Level.WARNING);","lastModifiedDate":"2021-10-17"},{"lineNumber":283,"author":{"gitId":"astralum"},"content":"        assert this.front !\u003d null;","lastModifiedDate":"2021-10-17"},{"lineNumber":284,"author":{"gitId":"astralum"},"content":"        logger.log(Level.INFO, \"Getting card front: \" + front);","lastModifiedDate":"2021-10-17"},{"lineNumber":285,"author":{"gitId":"astralum"},"content":"        this.front \u003d input;","lastModifiedDate":"2021-10-17"},{"lineNumber":286,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":287,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":288,"author":{"gitId":"astralum"},"content":"    /**","lastModifiedDate":"2021-11-01"},{"lineNumber":289,"author":{"gitId":"astralum"},"content":"     * Setter for back.","lastModifiedDate":"2021-11-01"},{"lineNumber":290,"author":{"gitId":"astralum"},"content":"     *","lastModifiedDate":"2021-11-06"},{"lineNumber":291,"author":{"gitId":"astralum"},"content":"     * @param input The input to replace back.","lastModifiedDate":"2021-11-01"},{"lineNumber":292,"author":{"gitId":"astralum"},"content":"     */","lastModifiedDate":"2021-11-01"},{"lineNumber":293,"author":{"gitId":"astralum"},"content":"    public void setBack(String input) {","lastModifiedDate":"2021-10-17"},{"lineNumber":294,"author":{"gitId":"astralum"},"content":"        logger.setLevel(Level.WARNING);","lastModifiedDate":"2021-10-17"},{"lineNumber":295,"author":{"gitId":"astralum"},"content":"        assert this.back !\u003d null;","lastModifiedDate":"2021-10-17"},{"lineNumber":296,"author":{"gitId":"astralum"},"content":"        logger.log(Level.INFO, \"Getting card back: \" + back);","lastModifiedDate":"2021-10-17"},{"lineNumber":297,"author":{"gitId":"astralum"},"content":"        this.back \u003d input;","lastModifiedDate":"2021-10-17"},{"lineNumber":298,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":299,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":300,"author":{"gitId":"xRossKoh"},"content":"    //@@author xRossKoh","lastModifiedDate":"2021-11-06"},{"lineNumber":301,"author":{"gitId":"xRossKoh"},"content":"    @Override","lastModifiedDate":"2021-10-18"},{"lineNumber":302,"author":{"gitId":"xRossKoh"},"content":"    public String toString() {","lastModifiedDate":"2021-10-18"},{"lineNumber":303,"author":{"gitId":"xRossKoh"},"content":"        return getFront() + SEPARATOR","lastModifiedDate":"2021-10-18"},{"lineNumber":304,"author":{"gitId":"xRossKoh"},"content":"                + getBack() + SEPARATOR","lastModifiedDate":"2021-10-18"},{"lineNumber":305,"author":{"gitId":"xRossKoh"},"content":"                + getUserScore() + SEPARATOR","lastModifiedDate":"2021-10-18"},{"lineNumber":306,"author":{"gitId":"xRossKoh"},"content":"                + getTotalScore() + \u0027\\n\u0027;","lastModifiedDate":"2021-10-18"},{"lineNumber":307,"author":{"gitId":"xRossKoh"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":308,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":309,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":310,"author":{"gitId":"xRossKoh"},"content":"}","lastModifiedDate":"2021-10-02"}],"authorContributionMap":{"JWweiyin":24,"astralum":224,"ThaddeusLim99":3,"xRossKoh":49,"xkisxk":10}},{"path":"src/main/java/seedu/cardli/parser/CommandArgumentParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"xRossKoh"},"content":"package seedu.cardli.parser;","lastModifiedDate":"2021-10-26"},{"lineNumber":2,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":3,"author":{"gitId":"astralum"},"content":"public interface CommandArgumentParser {","lastModifiedDate":"2021-10-21"},{"lineNumber":4,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":5,"author":{"gitId":"xRossKoh"},"content":"    String[] parseArguments(String arguments);","lastModifiedDate":"2021-10-25"},{"lineNumber":6,"author":{"gitId":"astralum"},"content":"}","lastModifiedDate":"2021-10-21"}],"authorContributionMap":{"astralum":4,"xRossKoh":2}},{"path":"src/main/java/seedu/cardli/parser/InnerParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"xRossKoh"},"content":"package seedu.cardli.parser;","lastModifiedDate":"2021-10-26"},{"lineNumber":2,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":3,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":4,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.commands.Command;","lastModifiedDate":"2021-10-26"},{"lineNumber":5,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.commands.InvalidCommand;","lastModifiedDate":"2021-10-26"},{"lineNumber":6,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.commands.deck.AddCardCommand;","lastModifiedDate":"2021-10-26"},{"lineNumber":7,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.commands.deck.DeleteCardCommand;","lastModifiedDate":"2021-10-26"},{"lineNumber":8,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.commands.deck.EditCardCommand;","lastModifiedDate":"2021-10-26"},{"lineNumber":9,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.commands.deck.ExitDeckCommand;","lastModifiedDate":"2021-10-26"},{"lineNumber":10,"author":{"gitId":"JWweiyin"},"content":"import seedu.cardli.commands.deck.HelpInDeckCommand;","lastModifiedDate":"2021-10-26"},{"lineNumber":11,"author":{"gitId":"JWweiyin"},"content":"import seedu.cardli.commands.deck.MoveCardCommand;","lastModifiedDate":"2021-10-26"},{"lineNumber":12,"author":{"gitId":"JWweiyin"},"content":"import seedu.cardli.commands.deck.ViewCardsCommand;","lastModifiedDate":"2021-10-26"},{"lineNumber":13,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.flashcard.Deck;","lastModifiedDate":"2021-10-26"},{"lineNumber":14,"author":{"gitId":"JWweiyin"},"content":"import seedu.cardli.flashcard.DeckManager;","lastModifiedDate":"2021-10-26"},{"lineNumber":15,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":16,"author":{"gitId":"astralum"},"content":"import java.util.logging.Level;","lastModifiedDate":"2021-10-21"},{"lineNumber":17,"author":{"gitId":"astralum"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-10-21"},{"lineNumber":18,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":19,"author":{"gitId":"astralum"},"content":"public class InnerParser {","lastModifiedDate":"2021-10-21"},{"lineNumber":20,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":21,"author":{"gitId":"astralum"},"content":"    private static final Logger logger \u003d Logger.getLogger(InnerParser.class.getName());","lastModifiedDate":"2021-10-21"},{"lineNumber":22,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":23,"author":{"gitId":"astralum"},"content":"    private Deck currDeck;","lastModifiedDate":"2021-10-21"},{"lineNumber":24,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":25,"author":{"gitId":"JWweiyin"},"content":"    private DeckManager deckManager;","lastModifiedDate":"2021-11-06"},{"lineNumber":26,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":27,"author":{"gitId":"astralum"},"content":"    public InnerParser(Deck currDeck) {","lastModifiedDate":"2021-10-21"},{"lineNumber":28,"author":{"gitId":"astralum"},"content":"        this.currDeck \u003d currDeck;","lastModifiedDate":"2021-10-21"},{"lineNumber":29,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":30,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":31,"author":{"gitId":"astralum"},"content":"    public InnerParser() {","lastModifiedDate":"2021-10-21"},{"lineNumber":32,"author":{"gitId":"astralum"},"content":"        this.currDeck \u003d null;","lastModifiedDate":"2021-10-21"},{"lineNumber":33,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":34,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":35,"author":{"gitId":"astralum"},"content":"    public Command parseCommand(String input) {","lastModifiedDate":"2021-10-21"},{"lineNumber":36,"author":{"gitId":"astralum"},"content":"        logger.setLevel(Level.WARNING);","lastModifiedDate":"2021-10-21"},{"lineNumber":37,"author":{"gitId":"astralum"},"content":"        String commandType \u003d Parser.getCommandType(input);","lastModifiedDate":"2021-10-21"},{"lineNumber":38,"author":{"gitId":"astralum"},"content":"        logger.log(Level.INFO, \"new user input detected\");","lastModifiedDate":"2021-10-21"},{"lineNumber":39,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":40,"author":{"gitId":"astralum"},"content":"        Command command;","lastModifiedDate":"2021-10-21"},{"lineNumber":41,"author":{"gitId":"astralum"},"content":"        String arguments;","lastModifiedDate":"2021-10-21"},{"lineNumber":42,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":43,"author":{"gitId":"JWweiyin"},"content":"        switch (commandType) {","lastModifiedDate":"2021-11-06"},{"lineNumber":44,"author":{"gitId":"astralum"},"content":"        case \"add\":","lastModifiedDate":"2021-10-21"},{"lineNumber":45,"author":{"gitId":"astralum"},"content":"            arguments \u003d Parser.getCommandArguments(commandType, input);","lastModifiedDate":"2021-10-21"},{"lineNumber":46,"author":{"gitId":"JWweiyin"},"content":"            command \u003d new AddCardCommand(arguments, this.currDeck, this.deckManager);","lastModifiedDate":"2021-11-06"},{"lineNumber":47,"author":{"gitId":"astralum"},"content":"            logger.log(Level.INFO, \"add (card) command parsed and executed\");","lastModifiedDate":"2021-10-21"},{"lineNumber":48,"author":{"gitId":"astralum"},"content":"            break;","lastModifiedDate":"2021-10-21"},{"lineNumber":49,"author":{"gitId":"ThaddeusLim99"},"content":"        case \"edit\":","lastModifiedDate":"2021-11-07"},{"lineNumber":50,"author":{"gitId":"astralum"},"content":"            arguments \u003d Parser.getCommandArguments(commandType, input);","lastModifiedDate":"2021-10-21"},{"lineNumber":51,"author":{"gitId":"JWweiyin"},"content":"            command \u003d new EditCardCommand(arguments, this.currDeck, this.deckManager);","lastModifiedDate":"2021-11-06"},{"lineNumber":52,"author":{"gitId":"astralum"},"content":"            logger.log(Level.INFO, \"edit (card) command parsed and executed\");","lastModifiedDate":"2021-10-21"},{"lineNumber":53,"author":{"gitId":"astralum"},"content":"            break;","lastModifiedDate":"2021-10-21"},{"lineNumber":54,"author":{"gitId":"astralum"},"content":"        case \"delete\":","lastModifiedDate":"2021-10-21"},{"lineNumber":55,"author":{"gitId":"astralum"},"content":"            arguments \u003d Parser.getCommandArguments(commandType, input);","lastModifiedDate":"2021-10-21"},{"lineNumber":56,"author":{"gitId":"astralum"},"content":"            command \u003d new DeleteCardCommand(arguments, this.currDeck);","lastModifiedDate":"2021-10-21"},{"lineNumber":57,"author":{"gitId":"astralum"},"content":"            logger.log(Level.INFO, \"delete (card) command parsed and executed\");","lastModifiedDate":"2021-10-21"},{"lineNumber":58,"author":{"gitId":"astralum"},"content":"            break;","lastModifiedDate":"2021-10-21"},{"lineNumber":59,"author":{"gitId":"astralum"},"content":"        case \"view\":","lastModifiedDate":"2021-10-21"},{"lineNumber":60,"author":{"gitId":"JWweiyin"},"content":"            arguments \u003d Parser.getCommandArguments(commandType, input);","lastModifiedDate":"2021-11-02"},{"lineNumber":61,"author":{"gitId":"JWweiyin"},"content":"            command \u003d new ViewCardsCommand(this.currDeck, arguments);","lastModifiedDate":"2021-11-02"},{"lineNumber":62,"author":{"gitId":"astralum"},"content":"            logger.log(Level.INFO, \"view command parsed and executed\");","lastModifiedDate":"2021-10-21"},{"lineNumber":63,"author":{"gitId":"astralum"},"content":"            break;","lastModifiedDate":"2021-10-21"},{"lineNumber":64,"author":{"gitId":"ThaddeusLim99"},"content":"        case \"move\":","lastModifiedDate":"2021-11-07"},{"lineNumber":65,"author":{"gitId":"ThaddeusLim99"},"content":"            arguments \u003d Parser.getCommandArguments(commandType, input);","lastModifiedDate":"2021-10-26"},{"lineNumber":66,"author":{"gitId":"JWweiyin"},"content":"            command \u003d new MoveCardCommand(arguments, this.currDeck, this.deckManager);","lastModifiedDate":"2021-11-06"},{"lineNumber":67,"author":{"gitId":"ThaddeusLim99"},"content":"            logger.log(Level.INFO, \"move command parsed and executed\");","lastModifiedDate":"2021-10-26"},{"lineNumber":68,"author":{"gitId":"ThaddeusLim99"},"content":"            break;","lastModifiedDate":"2021-10-26"},{"lineNumber":69,"author":{"gitId":"astralum"},"content":"        case \"help\":","lastModifiedDate":"2021-10-21"},{"lineNumber":70,"author":{"gitId":"JWweiyin"},"content":"            arguments \u003d Parser.getCommandArguments(commandType, input);","lastModifiedDate":"2021-11-02"},{"lineNumber":71,"author":{"gitId":"JWweiyin"},"content":"            command \u003d new HelpInDeckCommand(arguments);","lastModifiedDate":"2021-11-02"},{"lineNumber":72,"author":{"gitId":"astralum"},"content":"            logger.log(Level.INFO, \"help command parsed and executed\");","lastModifiedDate":"2021-10-21"},{"lineNumber":73,"author":{"gitId":"astralum"},"content":"            break;","lastModifiedDate":"2021-10-21"},{"lineNumber":74,"author":{"gitId":"astralum"},"content":"        case \"exit\":","lastModifiedDate":"2021-10-21"},{"lineNumber":75,"author":{"gitId":"JWweiyin"},"content":"            arguments \u003d Parser.getCommandArguments(commandType, input);","lastModifiedDate":"2021-11-02"},{"lineNumber":76,"author":{"gitId":"JWweiyin"},"content":"            command \u003d new ExitDeckCommand(arguments);","lastModifiedDate":"2021-11-02"},{"lineNumber":77,"author":{"gitId":"astralum"},"content":"            logger.log(Level.INFO, \"exit command parsed and executed\");","lastModifiedDate":"2021-10-21"},{"lineNumber":78,"author":{"gitId":"astralum"},"content":"            break;","lastModifiedDate":"2021-10-21"},{"lineNumber":79,"author":{"gitId":"astralum"},"content":"        default:","lastModifiedDate":"2021-10-21"},{"lineNumber":80,"author":{"gitId":"astralum"},"content":"            command \u003d new InvalidCommand();","lastModifiedDate":"2021-10-21"},{"lineNumber":81,"author":{"gitId":"astralum"},"content":"            logger.log(Level.INFO, \"command was unrecognised and could not be parsed\");","lastModifiedDate":"2021-10-21"},{"lineNumber":82,"author":{"gitId":"astralum"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":83,"author":{"gitId":"astralum"},"content":"        return command;","lastModifiedDate":"2021-10-21"},{"lineNumber":84,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":85,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":86,"author":{"gitId":"astralum"},"content":"    public void setCurrDeck(Deck currDeck) {","lastModifiedDate":"2021-10-21"},{"lineNumber":87,"author":{"gitId":"astralum"},"content":"        this.currDeck \u003d currDeck;","lastModifiedDate":"2021-10-21"},{"lineNumber":88,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":89,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":90,"author":{"gitId":"ThaddeusLim99"},"content":"    public void setDeckManager(DeckManager deckList) {","lastModifiedDate":"2021-10-26"},{"lineNumber":91,"author":{"gitId":"JWweiyin"},"content":"        this.deckManager \u003d deckList;","lastModifiedDate":"2021-11-06"},{"lineNumber":92,"author":{"gitId":"ThaddeusLim99"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":93,"author":{"gitId":"astralum"},"content":"}","lastModifiedDate":"2021-10-21"}],"authorContributionMap":{"JWweiyin":17,"astralum":59,"ThaddeusLim99":9,"xRossKoh":8}},{"path":"src/main/java/seedu/cardli/parser/OuterParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"xRossKoh"},"content":"package seedu.cardli.parser;","lastModifiedDate":"2021-10-26"},{"lineNumber":2,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":3,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.commands.Command;","lastModifiedDate":"2021-10-26"},{"lineNumber":4,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.commands.InvalidCommand;","lastModifiedDate":"2021-10-26"},{"lineNumber":5,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":6,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.commands.system.AddDeckCommand;","lastModifiedDate":"2021-10-26"},{"lineNumber":7,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.commands.system.DeleteDeckCommand;","lastModifiedDate":"2021-10-26"},{"lineNumber":8,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.commands.system.EditDeckCommand;","lastModifiedDate":"2021-10-26"},{"lineNumber":9,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.commands.system.EnterDeckCommand;","lastModifiedDate":"2021-10-26"},{"lineNumber":10,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.commands.system.ExitProgrammeCommand;","lastModifiedDate":"2021-10-26"},{"lineNumber":11,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.commands.system.FindCardsCommand;","lastModifiedDate":"2021-10-26"},{"lineNumber":12,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.commands.system.HelpCommand;","lastModifiedDate":"2021-10-26"},{"lineNumber":13,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.commands.system.ReviewCommand;","lastModifiedDate":"2021-10-26"},{"lineNumber":14,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.commands.system.TestCommand;","lastModifiedDate":"2021-10-26"},{"lineNumber":15,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.commands.system.ViewDecksCommand;","lastModifiedDate":"2021-10-26"},{"lineNumber":16,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.commands.system.ViewFlashCardStatsCommand;","lastModifiedDate":"2021-10-26"},{"lineNumber":17,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.commands.system.ViewTestCommand;","lastModifiedDate":"2021-10-26"},{"lineNumber":18,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.flashcard.DeckManager;","lastModifiedDate":"2021-10-26"},{"lineNumber":19,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.testing.TestHistory;","lastModifiedDate":"2021-10-26"},{"lineNumber":20,"author":{"gitId":"xkisxk"},"content":"import seedu.cardli.testing.TestManager;","lastModifiedDate":"2021-11-03"},{"lineNumber":21,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":22,"author":{"gitId":"astralum"},"content":"import java.util.logging.Level;","lastModifiedDate":"2021-10-21"},{"lineNumber":23,"author":{"gitId":"astralum"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-10-21"},{"lineNumber":24,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":25,"author":{"gitId":"astralum"},"content":"public class OuterParser {","lastModifiedDate":"2021-10-21"},{"lineNumber":26,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":27,"author":{"gitId":"astralum"},"content":"    private static final Logger logger \u003d Logger.getLogger(OuterParser.class.getName());","lastModifiedDate":"2021-10-21"},{"lineNumber":28,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":29,"author":{"gitId":"astralum"},"content":"    private DeckManager deckManager;","lastModifiedDate":"2021-10-21"},{"lineNumber":30,"author":{"gitId":"astralum"},"content":"    private InnerParser innerParser;","lastModifiedDate":"2021-10-21"},{"lineNumber":31,"author":{"gitId":"xkisxk"},"content":"    private TestHistory testHistory;","lastModifiedDate":"2021-10-25"},{"lineNumber":32,"author":{"gitId":"xkisxk"},"content":"    private TestManager testManager;","lastModifiedDate":"2021-11-03"},{"lineNumber":33,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":34,"author":{"gitId":"xkisxk"},"content":"    public OuterParser(DeckManager deckManager, InnerParser innerParser,","lastModifiedDate":"2021-11-03"},{"lineNumber":35,"author":{"gitId":"xkisxk"},"content":"                       TestHistory testHistory, TestManager testManager) {","lastModifiedDate":"2021-11-03"},{"lineNumber":36,"author":{"gitId":"astralum"},"content":"        logger.setLevel(Level.WARNING);","lastModifiedDate":"2021-10-21"},{"lineNumber":37,"author":{"gitId":"astralum"},"content":"        this.deckManager \u003d deckManager;","lastModifiedDate":"2021-10-21"},{"lineNumber":38,"author":{"gitId":"astralum"},"content":"        this.innerParser \u003d innerParser;","lastModifiedDate":"2021-10-21"},{"lineNumber":39,"author":{"gitId":"xkisxk"},"content":"        this.testHistory \u003d testHistory;","lastModifiedDate":"2021-10-25"},{"lineNumber":40,"author":{"gitId":"xkisxk"},"content":"        this.testManager \u003d testManager;","lastModifiedDate":"2021-11-03"},{"lineNumber":41,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":42,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":43,"author":{"gitId":"astralum"},"content":"    public Command parseCommand(String input) {","lastModifiedDate":"2021-10-21"},{"lineNumber":44,"author":{"gitId":"astralum"},"content":"        // create a new Command that has `type` and `arguments`","lastModifiedDate":"2021-10-21"},{"lineNumber":45,"author":{"gitId":"astralum"},"content":"        // the command should be of type `AddDeckCommand`, `DeleteDeckCommand`, etc.","lastModifiedDate":"2021-10-21"},{"lineNumber":46,"author":{"gitId":"astralum"},"content":"        // anyhow, `Command` can\u0027t be instantiated as it is abstract","lastModifiedDate":"2021-10-21"},{"lineNumber":47,"author":{"gitId":"astralum"},"content":"        logger.setLevel(Level.WARNING);","lastModifiedDate":"2021-10-21"},{"lineNumber":48,"author":{"gitId":"astralum"},"content":"        String commandType \u003d Parser.getCommandType(input);","lastModifiedDate":"2021-10-21"},{"lineNumber":49,"author":{"gitId":"astralum"},"content":"        logger.log(Level.INFO, \"new user input detected\");","lastModifiedDate":"2021-10-21"},{"lineNumber":50,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":51,"author":{"gitId":"astralum"},"content":"        Command command;","lastModifiedDate":"2021-10-21"},{"lineNumber":52,"author":{"gitId":"astralum"},"content":"        String arguments;","lastModifiedDate":"2021-10-21"},{"lineNumber":53,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":54,"author":{"gitId":"astralum"},"content":"        switch (commandType) {","lastModifiedDate":"2021-10-21"},{"lineNumber":55,"author":{"gitId":"astralum"},"content":"        case \"enter\":","lastModifiedDate":"2021-10-21"},{"lineNumber":56,"author":{"gitId":"astralum"},"content":"            arguments \u003d Parser.getCommandArguments(commandType, input);","lastModifiedDate":"2021-10-21"},{"lineNumber":57,"author":{"gitId":"astralum"},"content":"            command \u003d new EnterDeckCommand(arguments, this.deckManager, this.innerParser);","lastModifiedDate":"2021-10-21"},{"lineNumber":58,"author":{"gitId":"astralum"},"content":"            logger.log(Level.INFO, \"enter (deck) command parsed and executed\");","lastModifiedDate":"2021-10-21"},{"lineNumber":59,"author":{"gitId":"astralum"},"content":"            break;","lastModifiedDate":"2021-10-21"},{"lineNumber":60,"author":{"gitId":"astralum"},"content":"        case \"view\":","lastModifiedDate":"2021-10-23"},{"lineNumber":61,"author":{"gitId":"xkisxk"},"content":"            arguments \u003d Parser.getCommandArguments(commandType, input);","lastModifiedDate":"2021-11-01"},{"lineNumber":62,"author":{"gitId":"xkisxk"},"content":"            command \u003d new ViewDecksCommand(this.deckManager, arguments);","lastModifiedDate":"2021-11-01"},{"lineNumber":63,"author":{"gitId":"astralum"},"content":"            logger.log(Level.INFO, \"view (all decks) command parsed and executed\");","lastModifiedDate":"2021-10-23"},{"lineNumber":64,"author":{"gitId":"astralum"},"content":"            break;","lastModifiedDate":"2021-10-23"},{"lineNumber":65,"author":{"gitId":"xkisxk"},"content":"        case \"viewfc\":","lastModifiedDate":"2021-11-01"},{"lineNumber":66,"author":{"gitId":"xkisxk"},"content":"            arguments \u003d Parser.getCommandArguments(commandType, input);","lastModifiedDate":"2021-10-31"},{"lineNumber":67,"author":{"gitId":"xkisxk"},"content":"            command \u003d new ViewFlashCardStatsCommand(arguments, this.testHistory);","lastModifiedDate":"2021-10-31"},{"lineNumber":68,"author":{"gitId":"xkisxk"},"content":"            break;","lastModifiedDate":"2021-10-25"},{"lineNumber":69,"author":{"gitId":"xkisxk"},"content":"        case \"viewtest\":","lastModifiedDate":"2021-11-01"},{"lineNumber":70,"author":{"gitId":"xkisxk"},"content":"            arguments \u003d Parser.getCommandArguments(commandType, input);","lastModifiedDate":"2021-10-25"},{"lineNumber":71,"author":{"gitId":"xkisxk"},"content":"            command \u003d new ViewTestCommand(arguments, this.testHistory);","lastModifiedDate":"2021-10-25"},{"lineNumber":72,"author":{"gitId":"xkisxk"},"content":"            break;","lastModifiedDate":"2021-10-25"},{"lineNumber":73,"author":{"gitId":"astralum"},"content":"        case \"add\":","lastModifiedDate":"2021-10-21"},{"lineNumber":74,"author":{"gitId":"astralum"},"content":"            arguments \u003d Parser.getCommandArguments(commandType, input);","lastModifiedDate":"2021-10-21"},{"lineNumber":75,"author":{"gitId":"astralum"},"content":"            command \u003d new AddDeckCommand(arguments, this.deckManager);","lastModifiedDate":"2021-10-21"},{"lineNumber":76,"author":{"gitId":"astralum"},"content":"            logger.log(Level.INFO, \"add (deck) command parsed and executed\");","lastModifiedDate":"2021-10-21"},{"lineNumber":77,"author":{"gitId":"astralum"},"content":"            break;","lastModifiedDate":"2021-10-21"},{"lineNumber":78,"author":{"gitId":"ThaddeusLim99"},"content":"        case \"edit\": //edit /d \u003cdeck index\u003e /n \u003cname\u003e","lastModifiedDate":"2021-10-25"},{"lineNumber":79,"author":{"gitId":"astralum"},"content":"            arguments \u003d Parser.getCommandArguments(commandType, input);","lastModifiedDate":"2021-10-21"},{"lineNumber":80,"author":{"gitId":"astralum"},"content":"            command \u003d new EditDeckCommand(arguments, this.deckManager);","lastModifiedDate":"2021-10-21"},{"lineNumber":81,"author":{"gitId":"astralum"},"content":"            logger.log(Level.INFO, \"edit (deck) command parsed and executed\");","lastModifiedDate":"2021-10-21"},{"lineNumber":82,"author":{"gitId":"astralum"},"content":"            break;","lastModifiedDate":"2021-10-21"},{"lineNumber":83,"author":{"gitId":"astralum"},"content":"        case \"delete\":","lastModifiedDate":"2021-10-21"},{"lineNumber":84,"author":{"gitId":"xkisxk"},"content":"            arguments \u003d Parser.getCommandArguments(commandType, input);","lastModifiedDate":"2021-10-25"},{"lineNumber":85,"author":{"gitId":"xkisxk"},"content":"            command \u003d new DeleteDeckCommand(arguments, this.deckManager);","lastModifiedDate":"2021-10-25"},{"lineNumber":86,"author":{"gitId":"astralum"},"content":"            logger.log(Level.INFO, \"delete (deck) command parsed and executed\");","lastModifiedDate":"2021-10-21"},{"lineNumber":87,"author":{"gitId":"astralum"},"content":"            break;","lastModifiedDate":"2021-10-21"},{"lineNumber":88,"author":{"gitId":"JWweiyin"},"content":"        case \"find\":","lastModifiedDate":"2021-10-23"},{"lineNumber":89,"author":{"gitId":"JWweiyin"},"content":"            arguments \u003d Parser.getCommandArguments(commandType, input);","lastModifiedDate":"2021-10-23"},{"lineNumber":90,"author":{"gitId":"JWweiyin"},"content":"            command \u003d new FindCardsCommand(arguments, this.deckManager);","lastModifiedDate":"2021-10-23"},{"lineNumber":91,"author":{"gitId":"JWweiyin"},"content":"            logger.log(Level.INFO, \"find (card) command parsed and executed\");","lastModifiedDate":"2021-10-23"},{"lineNumber":92,"author":{"gitId":"JWweiyin"},"content":"            break;","lastModifiedDate":"2021-10-23"},{"lineNumber":93,"author":{"gitId":"xkisxk"},"content":"        case \"test\":","lastModifiedDate":"2021-10-24"},{"lineNumber":94,"author":{"gitId":"xkisxk"},"content":"            arguments \u003d Parser.getCommandArguments(commandType, input);","lastModifiedDate":"2021-11-01"},{"lineNumber":95,"author":{"gitId":"xkisxk"},"content":"            command \u003d new TestCommand(arguments, this.testManager);","lastModifiedDate":"2021-11-03"},{"lineNumber":96,"author":{"gitId":"xkisxk"},"content":"            logger.log(Level.INFO, \"test command parsed and executed\");","lastModifiedDate":"2021-10-24"},{"lineNumber":97,"author":{"gitId":"xkisxk"},"content":"            break;","lastModifiedDate":"2021-10-24"},{"lineNumber":98,"author":{"gitId":"xkisxk"},"content":"        case \"review\":","lastModifiedDate":"2021-10-25"},{"lineNumber":99,"author":{"gitId":"xkisxk"},"content":"            arguments \u003d Parser.getCommandArguments(commandType, input);","lastModifiedDate":"2021-11-01"},{"lineNumber":100,"author":{"gitId":"xkisxk"},"content":"            command \u003d new ReviewCommand(arguments, this.testManager);","lastModifiedDate":"2021-11-03"},{"lineNumber":101,"author":{"gitId":"xkisxk"},"content":"            logger.log(Level.INFO, \"review command parsed and executed\");","lastModifiedDate":"2021-10-25"},{"lineNumber":102,"author":{"gitId":"xkisxk"},"content":"            break;","lastModifiedDate":"2021-10-25"},{"lineNumber":103,"author":{"gitId":"astralum"},"content":"        case \"help\":","lastModifiedDate":"2021-10-21"},{"lineNumber":104,"author":{"gitId":"xkisxk"},"content":"            arguments \u003d Parser.getCommandArguments(commandType, input);","lastModifiedDate":"2021-11-01"},{"lineNumber":105,"author":{"gitId":"xkisxk"},"content":"            command \u003d new HelpCommand(arguments);","lastModifiedDate":"2021-11-01"},{"lineNumber":106,"author":{"gitId":"astralum"},"content":"            logger.log(Level.INFO, \"help (deck) command parsed and executed\");","lastModifiedDate":"2021-10-21"},{"lineNumber":107,"author":{"gitId":"astralum"},"content":"            break;","lastModifiedDate":"2021-10-21"},{"lineNumber":108,"author":{"gitId":"astralum"},"content":"        case \"bye\":","lastModifiedDate":"2021-10-21"},{"lineNumber":109,"author":{"gitId":"xkisxk"},"content":"            arguments \u003d Parser.getCommandArguments(commandType, input);","lastModifiedDate":"2021-11-01"},{"lineNumber":110,"author":{"gitId":"xkisxk"},"content":"            command \u003d new ExitProgrammeCommand(arguments);","lastModifiedDate":"2021-11-01"},{"lineNumber":111,"author":{"gitId":"astralum"},"content":"            logger.log(Level.INFO, \"current list of decks and flashcards saved to text file\");","lastModifiedDate":"2021-10-21"},{"lineNumber":112,"author":{"gitId":"astralum"},"content":"            logger.log(Level.INFO, \"bye command parsed and executed, program will terminate\");","lastModifiedDate":"2021-10-21"},{"lineNumber":113,"author":{"gitId":"astralum"},"content":"            break;","lastModifiedDate":"2021-10-21"},{"lineNumber":114,"author":{"gitId":"astralum"},"content":"        default:","lastModifiedDate":"2021-10-21"},{"lineNumber":115,"author":{"gitId":"astralum"},"content":"            command \u003d new InvalidCommand();","lastModifiedDate":"2021-10-21"},{"lineNumber":116,"author":{"gitId":"astralum"},"content":"            logger.log(Level.INFO, \"command was unrecognised and could not be parsed\");","lastModifiedDate":"2021-10-21"},{"lineNumber":117,"author":{"gitId":"astralum"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":118,"author":{"gitId":"astralum"},"content":"        return command;","lastModifiedDate":"2021-10-21"},{"lineNumber":119,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":120,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":121,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":122,"author":{"gitId":"astralum"},"content":"}","lastModifiedDate":"2021-10-21"}],"authorContributionMap":{"JWweiyin":5,"astralum":63,"ThaddeusLim99":1,"xRossKoh":19,"xkisxk":34}},{"path":"src/main/java/seedu/cardli/parser/Parser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"xRossKoh"},"content":"package seedu.cardli.parser;","lastModifiedDate":"2021-10-26"},{"lineNumber":2,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":3,"author":{"gitId":"xkisxk"},"content":"/**","lastModifiedDate":"2021-10-16"},{"lineNumber":4,"author":{"gitId":"xkisxk"},"content":" * Deals with the parsing of user input at the command line.","lastModifiedDate":"2021-10-16"},{"lineNumber":5,"author":{"gitId":"xkisxk"},"content":" */","lastModifiedDate":"2021-10-16"},{"lineNumber":6,"author":{"gitId":"xkisxk"},"content":"public class Parser {","lastModifiedDate":"2021-10-16"},{"lineNumber":7,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":8,"author":{"gitId":"xkisxk"},"content":"    /**","lastModifiedDate":"2021-10-16"},{"lineNumber":9,"author":{"gitId":"astralum"},"content":"     * Returns the command type of the user\u0027s input.","lastModifiedDate":"2021-10-21"},{"lineNumber":10,"author":{"gitId":"xkisxk"},"content":"     * @param input user\u0027s input","lastModifiedDate":"2021-10-25"},{"lineNumber":11,"author":{"gitId":"xkisxk"},"content":"     */","lastModifiedDate":"2021-10-16"},{"lineNumber":12,"author":{"gitId":"astralum"},"content":"    public static String getCommandType(String input) {","lastModifiedDate":"2021-10-21"},{"lineNumber":13,"author":{"gitId":"astralum"},"content":"        return input.trim().split(\" \")[0].toLowerCase();","lastModifiedDate":"2021-10-21"},{"lineNumber":14,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-16"},{"lineNumber":15,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":16,"author":{"gitId":"xkisxk"},"content":"    /**","lastModifiedDate":"2021-10-16"},{"lineNumber":17,"author":{"gitId":"astralum"},"content":"     * Returns the String containing the arguments to the command.","lastModifiedDate":"2021-10-21"},{"lineNumber":18,"author":{"gitId":"xkisxk"},"content":"     */","lastModifiedDate":"2021-10-16"},{"lineNumber":19,"author":{"gitId":"JWweiyin"},"content":"    public static String getCommandArguments(String commandType, String input) {","lastModifiedDate":"2021-11-06"},{"lineNumber":20,"author":{"gitId":"xkisxk"},"content":"        assert input.length() \u003e 0 : \"input string should not be empty, at least have command word\";","lastModifiedDate":"2021-10-17"},{"lineNumber":21,"author":{"gitId":"astralum"},"content":"        return input.substring(commandType.length()).trim();","lastModifiedDate":"2021-10-21"},{"lineNumber":22,"author":{"gitId":"ThaddeusLim99"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":23,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":24,"author":{"gitId":"JWweiyin"},"content":"    /**","lastModifiedDate":"2021-10-19"},{"lineNumber":25,"author":{"gitId":"JWweiyin"},"content":"     * Checks if the given input is an integer or not.","lastModifiedDate":"2021-10-19"},{"lineNumber":26,"author":{"gitId":"JWweiyin"},"content":"     *","lastModifiedDate":"2021-10-19"},{"lineNumber":27,"author":{"gitId":"JWweiyin"},"content":"     * @param input input given by user","lastModifiedDate":"2021-10-19"},{"lineNumber":28,"author":{"gitId":"JWweiyin"},"content":"     * @return true if input is an integer, false otherwise","lastModifiedDate":"2021-10-19"},{"lineNumber":29,"author":{"gitId":"JWweiyin"},"content":"     */","lastModifiedDate":"2021-10-19"},{"lineNumber":30,"author":{"gitId":"JWweiyin"},"content":"    public static boolean isInteger(String input) {","lastModifiedDate":"2021-10-19"},{"lineNumber":31,"author":{"gitId":"JWweiyin"},"content":"        for (int i \u003d 0; i \u003c input.length(); i +\u003d 1) {","lastModifiedDate":"2021-10-19"},{"lineNumber":32,"author":{"gitId":"JWweiyin"},"content":"            if (!Character.isDigit(input.charAt(i))) {","lastModifiedDate":"2021-10-19"},{"lineNumber":33,"author":{"gitId":"JWweiyin"},"content":"                return false;","lastModifiedDate":"2021-10-19"},{"lineNumber":34,"author":{"gitId":"JWweiyin"},"content":"            }","lastModifiedDate":"2021-10-19"},{"lineNumber":35,"author":{"gitId":"JWweiyin"},"content":"        }","lastModifiedDate":"2021-10-19"},{"lineNumber":36,"author":{"gitId":"JWweiyin"},"content":"        return true;","lastModifiedDate":"2021-10-19"},{"lineNumber":37,"author":{"gitId":"JWweiyin"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":38,"author":{"gitId":"xkisxk"},"content":"}","lastModifiedDate":"2021-10-16"}],"authorContributionMap":{"JWweiyin":16,"astralum":5,"ThaddeusLim99":1,"xRossKoh":1,"xkisxk":15}},{"path":"src/main/java/seedu/cardli/parser/TestParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"xRossKoh"},"content":"package seedu.cardli.parser;","lastModifiedDate":"2021-10-26"},{"lineNumber":2,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":3,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.exceptions.FieldEmptyException;","lastModifiedDate":"2021-10-26"},{"lineNumber":4,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":5,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":6,"author":{"gitId":"xkisxk"},"content":"public class TestParser {","lastModifiedDate":"2021-10-17"},{"lineNumber":7,"author":{"gitId":"xkisxk"},"content":"    public static String parseUserResponse(String userResponse) throws FieldEmptyException {","lastModifiedDate":"2021-10-17"},{"lineNumber":8,"author":{"gitId":"xkisxk"},"content":"        if (userResponse.isEmpty()) {","lastModifiedDate":"2021-10-17"},{"lineNumber":9,"author":{"gitId":"xkisxk"},"content":"            throw new FieldEmptyException();","lastModifiedDate":"2021-10-17"},{"lineNumber":10,"author":{"gitId":"xkisxk"},"content":"        }","lastModifiedDate":"2021-10-17"},{"lineNumber":11,"author":{"gitId":"xkisxk"},"content":"        return userResponse.trim();","lastModifiedDate":"2021-10-31"},{"lineNumber":12,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":13,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":14,"author":{"gitId":"xkisxk"},"content":"    public static int toInt(String input) throws NumberFormatException {","lastModifiedDate":"2021-10-17"},{"lineNumber":15,"author":{"gitId":"xkisxk"},"content":"        if (input.equalsIgnoreCase(\"all\")) {","lastModifiedDate":"2021-10-31"},{"lineNumber":16,"author":{"gitId":"xkisxk"},"content":"            return -1;","lastModifiedDate":"2021-10-21"},{"lineNumber":17,"author":{"gitId":"xkisxk"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":18,"author":{"gitId":"xkisxk"},"content":"        return Integer.parseInt(input) - 1;","lastModifiedDate":"2021-10-17"},{"lineNumber":19,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":20,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":21,"author":{"gitId":"xkisxk"},"content":"}","lastModifiedDate":"2021-10-17"}],"authorContributionMap":{"xRossKoh":2,"xkisxk":19}},{"path":"src/main/java/seedu/cardli/parser/deck/AddCardParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"xRossKoh"},"content":"package seedu.cardli.parser.deck;","lastModifiedDate":"2021-10-26"},{"lineNumber":2,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":3,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.parser.CommandArgumentParser;","lastModifiedDate":"2021-10-26"},{"lineNumber":4,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.parser.Parser;","lastModifiedDate":"2021-10-26"},{"lineNumber":5,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":6,"author":{"gitId":"astralum"},"content":"import java.util.logging.Level;","lastModifiedDate":"2021-10-21"},{"lineNumber":7,"author":{"gitId":"astralum"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-10-21"},{"lineNumber":8,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":9,"author":{"gitId":"astralum"},"content":"public class AddCardParser implements CommandArgumentParser {","lastModifiedDate":"2021-10-21"},{"lineNumber":10,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":11,"author":{"gitId":"astralum"},"content":"    private Logger logger;","lastModifiedDate":"2021-10-21"},{"lineNumber":12,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":13,"author":{"gitId":"astralum"},"content":"    public AddCardParser() {","lastModifiedDate":"2021-10-21"},{"lineNumber":14,"author":{"gitId":"JWweiyin"},"content":"        this.logger \u003d Logger.getLogger(Parser.class.getName());","lastModifiedDate":"2021-11-06"},{"lineNumber":15,"author":{"gitId":"astralum"},"content":"        logger.setLevel(Level.WARNING);","lastModifiedDate":"2021-10-21"},{"lineNumber":16,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":17,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":18,"author":{"gitId":"astralum"},"content":"    @Override","lastModifiedDate":"2021-10-21"},{"lineNumber":19,"author":{"gitId":"astralum"},"content":"    public String[] parseArguments(String arguments) { //add /f \u003cfront\u003e /b \u003cback\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":20,"author":{"gitId":"JWweiyin"},"content":"        String[] parameters \u003d arguments.trim().split(\"/f |/b \", 3);","lastModifiedDate":"2021-10-28"},{"lineNumber":21,"author":{"gitId":"astralum"},"content":"        return parameters;","lastModifiedDate":"2021-10-21"},{"lineNumber":22,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":23,"author":{"gitId":"astralum"},"content":"}","lastModifiedDate":"2021-10-21"}],"authorContributionMap":{"JWweiyin":2,"astralum":18,"xRossKoh":3}},{"path":"src/main/java/seedu/cardli/parser/deck/DeleteCardParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"xRossKoh"},"content":"package seedu.cardli.parser.deck;","lastModifiedDate":"2021-10-26"},{"lineNumber":2,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":3,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.parser.CommandArgumentParser;","lastModifiedDate":"2021-10-26"},{"lineNumber":4,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.parser.Parser;","lastModifiedDate":"2021-10-26"},{"lineNumber":5,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":6,"author":{"gitId":"astralum"},"content":"import java.util.logging.Level;","lastModifiedDate":"2021-10-21"},{"lineNumber":7,"author":{"gitId":"astralum"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-10-21"},{"lineNumber":8,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":9,"author":{"gitId":"astralum"},"content":"public class DeleteCardParser implements CommandArgumentParser {","lastModifiedDate":"2021-10-21"},{"lineNumber":10,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":11,"author":{"gitId":"astralum"},"content":"    private Logger logger;","lastModifiedDate":"2021-10-21"},{"lineNumber":12,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":13,"author":{"gitId":"astralum"},"content":"    public DeleteCardParser() {","lastModifiedDate":"2021-10-21"},{"lineNumber":14,"author":{"gitId":"JWweiyin"},"content":"        this.logger \u003d Logger.getLogger(Parser.class.getName());","lastModifiedDate":"2021-11-06"},{"lineNumber":15,"author":{"gitId":"astralum"},"content":"        logger.setLevel(Level.WARNING);","lastModifiedDate":"2021-10-21"},{"lineNumber":16,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":17,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":18,"author":{"gitId":"astralum"},"content":"    @Override","lastModifiedDate":"2021-10-21"},{"lineNumber":19,"author":{"gitId":"astralum"},"content":"    public String[] parseArguments(String arguments) {","lastModifiedDate":"2021-10-21"},{"lineNumber":20,"author":{"gitId":"astralum"},"content":"        String[] parameters \u003d new String[1];","lastModifiedDate":"2021-10-21"},{"lineNumber":21,"author":{"gitId":"astralum"},"content":"        String deckName \u003d arguments;","lastModifiedDate":"2021-10-21"},{"lineNumber":22,"author":{"gitId":"astralum"},"content":"        parameters[0] \u003d deckName;","lastModifiedDate":"2021-10-21"},{"lineNumber":23,"author":{"gitId":"astralum"},"content":"        return parameters;","lastModifiedDate":"2021-10-21"},{"lineNumber":24,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":25,"author":{"gitId":"astralum"},"content":"}","lastModifiedDate":"2021-10-21"}],"authorContributionMap":{"JWweiyin":1,"astralum":21,"xRossKoh":3}},{"path":"src/main/java/seedu/cardli/parser/deck/EditCardParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"xRossKoh"},"content":"package seedu.cardli.parser.deck;","lastModifiedDate":"2021-10-26"},{"lineNumber":2,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":3,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.parser.CommandArgumentParser;","lastModifiedDate":"2021-10-26"},{"lineNumber":4,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":5,"author":{"gitId":"astralum"},"content":"public class EditCardParser implements CommandArgumentParser {","lastModifiedDate":"2021-10-21"},{"lineNumber":6,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":7,"author":{"gitId":"xkisxk"},"content":"    public EditCardParser() {","lastModifiedDate":"2021-10-25"},{"lineNumber":8,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":9,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":10,"author":{"gitId":"astralum"},"content":"    @Override","lastModifiedDate":"2021-10-21"},{"lineNumber":11,"author":{"gitId":"ThaddeusLim99"},"content":"    public String[] parseArguments(String arguments) {","lastModifiedDate":"2021-11-08"},{"lineNumber":12,"author":{"gitId":"ThaddeusLim99"},"content":"        String[] parameters \u003d arguments.trim().split(\" \", 6);","lastModifiedDate":"2021-11-01"},{"lineNumber":13,"author":{"gitId":"astralum"},"content":"        return parameters;","lastModifiedDate":"2021-10-21"},{"lineNumber":14,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":15,"author":{"gitId":"astralum"},"content":"}","lastModifiedDate":"2021-10-21"}],"authorContributionMap":{"astralum":9,"ThaddeusLim99":2,"xRossKoh":2,"xkisxk":2}},{"path":"src/main/java/seedu/cardli/parser/deck/MoveCardParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JWweiyin"},"content":"package seedu.cardli.parser.deck;","lastModifiedDate":"2021-10-26"},{"lineNumber":2,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":3,"author":{"gitId":"JWweiyin"},"content":"import seedu.cardli.parser.CommandArgumentParser;","lastModifiedDate":"2021-10-26"},{"lineNumber":4,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":5,"author":{"gitId":"ThaddeusLim99"},"content":"public class MoveCardParser implements CommandArgumentParser {","lastModifiedDate":"2021-10-26"},{"lineNumber":6,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":7,"author":{"gitId":"ThaddeusLim99"},"content":"    public MoveCardParser() {","lastModifiedDate":"2021-10-26"},{"lineNumber":8,"author":{"gitId":"ThaddeusLim99"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":9,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":10,"author":{"gitId":"ThaddeusLim99"},"content":"    @Override","lastModifiedDate":"2021-10-26"},{"lineNumber":11,"author":{"gitId":"ThaddeusLim99"},"content":"    public String[] parseArguments(String arguments) {","lastModifiedDate":"2021-10-26"},{"lineNumber":12,"author":{"gitId":"ThaddeusLim99"},"content":"        String[] parameters \u003d arguments.trim().split(\" \", 4);","lastModifiedDate":"2021-11-03"},{"lineNumber":13,"author":{"gitId":"ThaddeusLim99"},"content":"        return parameters;","lastModifiedDate":"2021-10-26"},{"lineNumber":14,"author":{"gitId":"ThaddeusLim99"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":15,"author":{"gitId":"ThaddeusLim99"},"content":"}","lastModifiedDate":"2021-10-26"}],"authorContributionMap":{"JWweiyin":2,"ThaddeusLim99":13}},{"path":"src/main/java/seedu/cardli/parser/system/AddDeckParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"xRossKoh"},"content":"package seedu.cardli.parser.system;","lastModifiedDate":"2021-10-26"},{"lineNumber":2,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":3,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.parser.CommandArgumentParser;","lastModifiedDate":"2021-10-26"},{"lineNumber":4,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":5,"author":{"gitId":"astralum"},"content":"public class AddDeckParser implements CommandArgumentParser {","lastModifiedDate":"2021-10-21"},{"lineNumber":6,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":7,"author":{"gitId":"xkisxk"},"content":"    public AddDeckParser() {","lastModifiedDate":"2021-10-25"},{"lineNumber":8,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":9,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":10,"author":{"gitId":"astralum"},"content":"    @Override","lastModifiedDate":"2021-10-21"},{"lineNumber":11,"author":{"gitId":"astralum"},"content":"    public String[] parseArguments(String arguments) {","lastModifiedDate":"2021-10-21"},{"lineNumber":12,"author":{"gitId":"astralum"},"content":"        String[] parameters \u003d new String[1];","lastModifiedDate":"2021-10-21"},{"lineNumber":13,"author":{"gitId":"astralum"},"content":"        String deckName \u003d arguments;","lastModifiedDate":"2021-10-21"},{"lineNumber":14,"author":{"gitId":"astralum"},"content":"        parameters[0] \u003d deckName;","lastModifiedDate":"2021-10-21"},{"lineNumber":15,"author":{"gitId":"astralum"},"content":"        return parameters;","lastModifiedDate":"2021-10-21"},{"lineNumber":16,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":17,"author":{"gitId":"astralum"},"content":"}","lastModifiedDate":"2021-10-21"}],"authorContributionMap":{"astralum":13,"xRossKoh":2,"xkisxk":2}},{"path":"src/main/java/seedu/cardli/parser/system/DeleteDeckParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"xRossKoh"},"content":"package seedu.cardli.parser.system;","lastModifiedDate":"2021-10-26"},{"lineNumber":2,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":3,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.parser.CommandArgumentParser;","lastModifiedDate":"2021-10-26"},{"lineNumber":4,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":5,"author":{"gitId":"astralum"},"content":"public class DeleteDeckParser implements CommandArgumentParser {","lastModifiedDate":"2021-10-21"},{"lineNumber":6,"author":{"gitId":"xkisxk"},"content":"    public DeleteDeckParser() {","lastModifiedDate":"2021-10-25"},{"lineNumber":7,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":8,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":9,"author":{"gitId":"astralum"},"content":"    @Override","lastModifiedDate":"2021-10-21"},{"lineNumber":10,"author":{"gitId":"astralum"},"content":"    public String[] parseArguments(String arguments) {","lastModifiedDate":"2021-10-21"},{"lineNumber":11,"author":{"gitId":"astralum"},"content":"        String[] parameters \u003d new String[1];","lastModifiedDate":"2021-10-21"},{"lineNumber":12,"author":{"gitId":"astralum"},"content":"        String deckName \u003d arguments;","lastModifiedDate":"2021-10-21"},{"lineNumber":13,"author":{"gitId":"astralum"},"content":"        parameters[0] \u003d deckName;","lastModifiedDate":"2021-10-21"},{"lineNumber":14,"author":{"gitId":"astralum"},"content":"        return parameters;","lastModifiedDate":"2021-10-21"},{"lineNumber":15,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":16,"author":{"gitId":"astralum"},"content":"}","lastModifiedDate":"2021-10-21"}],"authorContributionMap":{"astralum":12,"xRossKoh":2,"xkisxk":2}},{"path":"src/main/java/seedu/cardli/parser/system/EditDeckParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"xRossKoh"},"content":"package seedu.cardli.parser.system;","lastModifiedDate":"2021-10-26"},{"lineNumber":2,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":3,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.parser.CommandArgumentParser;","lastModifiedDate":"2021-10-26"},{"lineNumber":4,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":5,"author":{"gitId":"astralum"},"content":"public class EditDeckParser implements CommandArgumentParser {","lastModifiedDate":"2021-10-21"},{"lineNumber":6,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":7,"author":{"gitId":"xkisxk"},"content":"    public EditDeckParser() {","lastModifiedDate":"2021-10-25"},{"lineNumber":8,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":9,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":10,"author":{"gitId":"astralum"},"content":"    @Override","lastModifiedDate":"2021-10-21"},{"lineNumber":11,"author":{"gitId":"astralum"},"content":"    public String[] parseArguments(String arguments) {","lastModifiedDate":"2021-10-21"},{"lineNumber":12,"author":{"gitId":"ThaddeusLim99"},"content":"        String[] parameters \u003d arguments.trim().split(\" \", 4);","lastModifiedDate":"2021-11-01"},{"lineNumber":13,"author":{"gitId":"astralum"},"content":"        return parameters;","lastModifiedDate":"2021-10-21"},{"lineNumber":14,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":15,"author":{"gitId":"astralum"},"content":"}","lastModifiedDate":"2021-10-21"}],"authorContributionMap":{"astralum":10,"ThaddeusLim99":1,"xRossKoh":2,"xkisxk":2}},{"path":"src/main/java/seedu/cardli/parser/system/EnterDeckParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"xRossKoh"},"content":"package seedu.cardli.parser.system;","lastModifiedDate":"2021-10-26"},{"lineNumber":2,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":3,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.parser.CommandArgumentParser;","lastModifiedDate":"2021-10-26"},{"lineNumber":4,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":5,"author":{"gitId":"astralum"},"content":"public class EnterDeckParser implements CommandArgumentParser {","lastModifiedDate":"2021-10-21"},{"lineNumber":6,"author":{"gitId":"xkisxk"},"content":"    public EnterDeckParser() {","lastModifiedDate":"2021-10-25"},{"lineNumber":7,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":8,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":9,"author":{"gitId":"astralum"},"content":"    @Override","lastModifiedDate":"2021-10-21"},{"lineNumber":10,"author":{"gitId":"astralum"},"content":"    public String[] parseArguments(String arguments) {","lastModifiedDate":"2021-10-21"},{"lineNumber":11,"author":{"gitId":"astralum"},"content":"        String[] parameters \u003d new String[1];","lastModifiedDate":"2021-10-21"},{"lineNumber":12,"author":{"gitId":"astralum"},"content":"        String deckName \u003d arguments;","lastModifiedDate":"2021-10-21"},{"lineNumber":13,"author":{"gitId":"astralum"},"content":"        parameters[0] \u003d deckName;","lastModifiedDate":"2021-10-21"},{"lineNumber":14,"author":{"gitId":"astralum"},"content":"        return parameters;","lastModifiedDate":"2021-10-21"},{"lineNumber":15,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":16,"author":{"gitId":"astralum"},"content":"}","lastModifiedDate":"2021-10-21"}],"authorContributionMap":{"astralum":12,"xRossKoh":2,"xkisxk":2}},{"path":"src/main/java/seedu/cardli/parser/system/FindCardsParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"xRossKoh"},"content":"package seedu.cardli.parser.system;","lastModifiedDate":"2021-10-26"},{"lineNumber":2,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":3,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.parser.CommandArgumentParser;","lastModifiedDate":"2021-10-26"},{"lineNumber":4,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":5,"author":{"gitId":"JWweiyin"},"content":"public class FindCardsParser implements CommandArgumentParser {","lastModifiedDate":"2021-10-23"},{"lineNumber":6,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":7,"author":{"gitId":"xkisxk"},"content":"    public FindCardsParser() {","lastModifiedDate":"2021-10-25"},{"lineNumber":8,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":9,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":10,"author":{"gitId":"JWweiyin"},"content":"    @Override","lastModifiedDate":"2021-10-23"},{"lineNumber":11,"author":{"gitId":"JWweiyin"},"content":"    public String[] parseArguments(String arguments) {","lastModifiedDate":"2021-10-23"},{"lineNumber":12,"author":{"gitId":"JWweiyin"},"content":"        String[] searchTerms \u003d new String[1];","lastModifiedDate":"2021-10-23"},{"lineNumber":13,"author":{"gitId":"JWweiyin"},"content":"        searchTerms[0] \u003d arguments.trim();","lastModifiedDate":"2021-10-23"},{"lineNumber":14,"author":{"gitId":"JWweiyin"},"content":"        return searchTerms;","lastModifiedDate":"2021-10-23"},{"lineNumber":15,"author":{"gitId":"JWweiyin"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":16,"author":{"gitId":"JWweiyin"},"content":"}","lastModifiedDate":"2021-10-23"}],"authorContributionMap":{"JWweiyin":12,"xRossKoh":2,"xkisxk":2}},{"path":"src/main/java/seedu/cardli/storage/Storage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"xRossKoh"},"content":"//@@author xRossKoh","lastModifiedDate":"2021-11-06"},{"lineNumber":2,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":3,"author":{"gitId":"xRossKoh"},"content":"package seedu.cardli.storage;","lastModifiedDate":"2021-10-26"},{"lineNumber":4,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":5,"author":{"gitId":"xRossKoh"},"content":"import org.json.simple.JSONObject;","lastModifiedDate":"2021-11-01"},{"lineNumber":6,"author":{"gitId":"xRossKoh"},"content":"import org.json.simple.parser.JSONParser;","lastModifiedDate":"2021-11-01"},{"lineNumber":7,"author":{"gitId":"xRossKoh"},"content":"import org.json.simple.parser.ParseException;","lastModifiedDate":"2021-11-01"},{"lineNumber":8,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.flashcard.Deck;","lastModifiedDate":"2021-10-26"},{"lineNumber":9,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.flashcard.FlashCard;","lastModifiedDate":"2021-11-01"},{"lineNumber":10,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.testing.AnswerList;","lastModifiedDate":"2021-10-26"},{"lineNumber":11,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":12,"author":{"gitId":"xRossKoh"},"content":"import java.io.File;","lastModifiedDate":"2021-10-21"},{"lineNumber":13,"author":{"gitId":"xRossKoh"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2021-10-21"},{"lineNumber":14,"author":{"gitId":"xRossKoh"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-10-21"},{"lineNumber":15,"author":{"gitId":"xRossKoh"},"content":"import java.io.IOException;","lastModifiedDate":"2021-10-21"},{"lineNumber":16,"author":{"gitId":"xRossKoh"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-21"},{"lineNumber":17,"author":{"gitId":"xRossKoh"},"content":"import java.util.NoSuchElementException;","lastModifiedDate":"2021-10-25"},{"lineNumber":18,"author":{"gitId":"xRossKoh"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-10-21"},{"lineNumber":19,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":20,"author":{"gitId":"xRossKoh"},"content":"import org.json.simple.JSONArray;","lastModifiedDate":"2021-11-01"},{"lineNumber":21,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":22,"author":{"gitId":"xRossKoh"},"content":"import java.util.logging.Level;","lastModifiedDate":"2021-11-08"},{"lineNumber":23,"author":{"gitId":"xRossKoh"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-11-08"},{"lineNumber":24,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":25,"author":{"gitId":"xRossKoh"},"content":"/**","lastModifiedDate":"2021-11-07"},{"lineNumber":26,"author":{"gitId":"xRossKoh"},"content":" * Class containing methods to save and parse user data.","lastModifiedDate":"2021-11-07"},{"lineNumber":27,"author":{"gitId":"xRossKoh"},"content":" */","lastModifiedDate":"2021-11-07"},{"lineNumber":28,"author":{"gitId":"xRossKoh"},"content":"public class Storage {","lastModifiedDate":"2021-10-20"},{"lineNumber":29,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":30,"author":{"gitId":"xRossKoh"},"content":"    private static final Logger logger \u003d Logger.getLogger(Storage.class.getName());","lastModifiedDate":"2021-11-08"},{"lineNumber":31,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":32,"author":{"gitId":"xRossKoh"},"content":"    /**","lastModifiedDate":"2021-10-21"},{"lineNumber":33,"author":{"gitId":"xRossKoh"},"content":"     * Specified file path to save task list.","lastModifiedDate":"2021-10-21"},{"lineNumber":34,"author":{"gitId":"xRossKoh"},"content":"     */","lastModifiedDate":"2021-10-21"},{"lineNumber":35,"author":{"gitId":"xRossKoh"},"content":"    private static final String CARDS_FILEPATH \u003d \"data/Cards_CardLI.json\";","lastModifiedDate":"2021-11-01"},{"lineNumber":36,"author":{"gitId":"xRossKoh"},"content":"    private static final String TESTS_FILEPATH \u003d \"data/Tests_CardLi.json\";","lastModifiedDate":"2021-11-01"},{"lineNumber":37,"author":{"gitId":"xRossKoh"},"content":"    File cardsFile;","lastModifiedDate":"2021-10-26"},{"lineNumber":38,"author":{"gitId":"xRossKoh"},"content":"    File testsFile;","lastModifiedDate":"2021-10-26"},{"lineNumber":39,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":40,"author":{"gitId":"xRossKoh"},"content":"    public Storage() {","lastModifiedDate":"2021-10-21"},{"lineNumber":41,"author":{"gitId":"xRossKoh"},"content":"        logger.setLevel(Level.SEVERE);","lastModifiedDate":"2021-11-08"},{"lineNumber":42,"author":{"gitId":"xRossKoh"},"content":"        try {","lastModifiedDate":"2021-10-21"},{"lineNumber":43,"author":{"gitId":"xRossKoh"},"content":"            this.cardsFile \u003d new File(CARDS_FILEPATH);","lastModifiedDate":"2021-10-26"},{"lineNumber":44,"author":{"gitId":"xRossKoh"},"content":"            this.testsFile \u003d new File(TESTS_FILEPATH);","lastModifiedDate":"2021-10-26"},{"lineNumber":45,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":46,"author":{"gitId":"xRossKoh"},"content":"            // create new directory and file if they do not exist","lastModifiedDate":"2021-10-21"},{"lineNumber":47,"author":{"gitId":"xRossKoh"},"content":"            if (!cardsFile.exists()) {","lastModifiedDate":"2021-10-26"},{"lineNumber":48,"author":{"gitId":"xRossKoh"},"content":"                cardsFile.getParentFile().mkdirs();","lastModifiedDate":"2021-10-26"},{"lineNumber":49,"author":{"gitId":"xRossKoh"},"content":"                cardsFile.createNewFile();","lastModifiedDate":"2021-10-26"},{"lineNumber":50,"author":{"gitId":"xRossKoh"},"content":"                logger.log(Level.INFO, \"data/Cards_CardLI.json created\");","lastModifiedDate":"2021-11-08"},{"lineNumber":51,"author":{"gitId":"xRossKoh"},"content":"            }","lastModifiedDate":"2021-10-25"},{"lineNumber":52,"author":{"gitId":"xRossKoh"},"content":"            if (!testsFile.exists()) {","lastModifiedDate":"2021-10-26"},{"lineNumber":53,"author":{"gitId":"xRossKoh"},"content":"                testsFile.getParentFile().mkdirs();","lastModifiedDate":"2021-10-26"},{"lineNumber":54,"author":{"gitId":"xRossKoh"},"content":"                testsFile.createNewFile();","lastModifiedDate":"2021-10-26"},{"lineNumber":55,"author":{"gitId":"xRossKoh"},"content":"                logger.log(Level.INFO, \"data/Tests_CardLI.json created\");","lastModifiedDate":"2021-11-08"},{"lineNumber":56,"author":{"gitId":"xRossKoh"},"content":"            }","lastModifiedDate":"2021-10-21"},{"lineNumber":57,"author":{"gitId":"xRossKoh"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-10-21"},{"lineNumber":58,"author":{"gitId":"xRossKoh"},"content":"            System.out.println((e.getMessage()));","lastModifiedDate":"2021-11-06"},{"lineNumber":59,"author":{"gitId":"xRossKoh"},"content":"            logger.log(Level.WARNING, \"IOException thrown at Storage()\");","lastModifiedDate":"2021-11-08"},{"lineNumber":60,"author":{"gitId":"xRossKoh"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":61,"author":{"gitId":"xRossKoh"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":62,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":63,"author":{"gitId":"xRossKoh"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":64,"author":{"gitId":"xRossKoh"},"content":"     * Saves user\u0027s current decks of flashcards to JSON file.","lastModifiedDate":"2021-11-07"},{"lineNumber":65,"author":{"gitId":"xRossKoh"},"content":"     *","lastModifiedDate":"2021-11-07"},{"lineNumber":66,"author":{"gitId":"xRossKoh"},"content":"     * @param decks     User\u0027s current decks of flashcards","lastModifiedDate":"2021-11-07"},{"lineNumber":67,"author":{"gitId":"xRossKoh"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":68,"author":{"gitId":"xRossKoh"},"content":"    public void writeCardsToFile(ArrayList\u003cDeck\u003e decks) {","lastModifiedDate":"2021-11-01"},{"lineNumber":69,"author":{"gitId":"xRossKoh"},"content":"        logger.setLevel(Level.SEVERE);","lastModifiedDate":"2021-11-08"},{"lineNumber":70,"author":{"gitId":"xRossKoh"},"content":"        try {","lastModifiedDate":"2021-10-25"},{"lineNumber":71,"author":{"gitId":"xRossKoh"},"content":"            // instantiate FileWriter object to overwrite specified text file","lastModifiedDate":"2021-10-21"},{"lineNumber":72,"author":{"gitId":"xRossKoh"},"content":"            FileWriter fileWriter \u003d new FileWriter(CARDS_FILEPATH, false);","lastModifiedDate":"2021-11-01"},{"lineNumber":73,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":74,"author":{"gitId":"xRossKoh"},"content":"            JSONArray jsonDecks \u003d new JSONArray();","lastModifiedDate":"2021-11-01"},{"lineNumber":75,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":76,"author":{"gitId":"xRossKoh"},"content":"            for (Deck deck : decks) {","lastModifiedDate":"2021-11-01"},{"lineNumber":77,"author":{"gitId":"xRossKoh"},"content":"                jsonDecks.add(deck.toJsonObject());","lastModifiedDate":"2021-11-01"},{"lineNumber":78,"author":{"gitId":"xRossKoh"},"content":"            }","lastModifiedDate":"2021-10-21"},{"lineNumber":79,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":80,"author":{"gitId":"xRossKoh"},"content":"            fileWriter.write(jsonDecks.toJSONString());","lastModifiedDate":"2021-11-01"},{"lineNumber":81,"author":{"gitId":"xRossKoh"},"content":"            fileWriter.close();","lastModifiedDate":"2021-10-21"},{"lineNumber":82,"author":{"gitId":"xRossKoh"},"content":"            logger.log(Level.INFO, \"All decks of flashcards saved to Cards_CardLI.json\");","lastModifiedDate":"2021-11-08"},{"lineNumber":83,"author":{"gitId":"xRossKoh"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-10-25"},{"lineNumber":84,"author":{"gitId":"xRossKoh"},"content":"            System.out.println(\"Something went wrong while saving to data/Cards_CardLI.json...\");","lastModifiedDate":"2021-11-07"},{"lineNumber":85,"author":{"gitId":"xRossKoh"},"content":"            logger.log(Level.WARNING, \"IOException thrown at writeCardsToFile()\");","lastModifiedDate":"2021-11-08"},{"lineNumber":86,"author":{"gitId":"xRossKoh"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":87,"author":{"gitId":"xRossKoh"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":88,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":89,"author":{"gitId":"xRossKoh"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":90,"author":{"gitId":"xRossKoh"},"content":"     * Saves user\u0027s current test history to JSON file.","lastModifiedDate":"2021-11-07"},{"lineNumber":91,"author":{"gitId":"xRossKoh"},"content":"     *","lastModifiedDate":"2021-11-07"},{"lineNumber":92,"author":{"gitId":"xRossKoh"},"content":"     * @param testHistory       User\u0027s current test history","lastModifiedDate":"2021-11-07"},{"lineNumber":93,"author":{"gitId":"xRossKoh"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":94,"author":{"gitId":"xRossKoh"},"content":"    public void writeTestsToFile(ArrayList\u003cAnswerList\u003e testHistory) {","lastModifiedDate":"2021-11-01"},{"lineNumber":95,"author":{"gitId":"xRossKoh"},"content":"        logger.setLevel(Level.SEVERE);","lastModifiedDate":"2021-11-08"},{"lineNumber":96,"author":{"gitId":"xRossKoh"},"content":"        try {","lastModifiedDate":"2021-11-01"},{"lineNumber":97,"author":{"gitId":"xRossKoh"},"content":"            // instantiate FileWriter object to overwrite specified text file","lastModifiedDate":"2021-11-01"},{"lineNumber":98,"author":{"gitId":"xRossKoh"},"content":"            FileWriter fileWriter \u003d new FileWriter(TESTS_FILEPATH, false);","lastModifiedDate":"2021-11-01"},{"lineNumber":99,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":100,"author":{"gitId":"xRossKoh"},"content":"            JSONArray jsonTestHistory \u003d new JSONArray();","lastModifiedDate":"2021-11-01"},{"lineNumber":101,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":102,"author":{"gitId":"xRossKoh"},"content":"            for (AnswerList answerList : testHistory) {","lastModifiedDate":"2021-11-01"},{"lineNumber":103,"author":{"gitId":"xRossKoh"},"content":"                jsonTestHistory.add(answerList.toJsonObject());","lastModifiedDate":"2021-11-01"},{"lineNumber":104,"author":{"gitId":"xRossKoh"},"content":"            }","lastModifiedDate":"2021-11-01"},{"lineNumber":105,"author":{"gitId":"xRossKoh"},"content":"            fileWriter.write(jsonTestHistory.toJSONString());","lastModifiedDate":"2021-11-01"},{"lineNumber":106,"author":{"gitId":"xRossKoh"},"content":"            fileWriter.close();","lastModifiedDate":"2021-11-01"},{"lineNumber":107,"author":{"gitId":"xRossKoh"},"content":"            logger.log(Level.INFO, \"Test history saved to Cards_CardLI.json\");","lastModifiedDate":"2021-11-08"},{"lineNumber":108,"author":{"gitId":"xRossKoh"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-11-01"},{"lineNumber":109,"author":{"gitId":"xRossKoh"},"content":"            System.out.println(\"Something went wrong while saving to data/Tests_CardLI.json...\");","lastModifiedDate":"2021-11-07"},{"lineNumber":110,"author":{"gitId":"xRossKoh"},"content":"            logger.log(Level.WARNING, \"IOException thrown at writeTestsToFile()\");","lastModifiedDate":"2021-11-08"},{"lineNumber":111,"author":{"gitId":"xRossKoh"},"content":"        }","lastModifiedDate":"2021-11-01"},{"lineNumber":112,"author":{"gitId":"xRossKoh"},"content":"    }","lastModifiedDate":"2021-11-01"},{"lineNumber":113,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":114,"author":{"gitId":"xRossKoh"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":115,"author":{"gitId":"xRossKoh"},"content":"     * Reads JSON file to return user\u0027s saved decks of flashcards.","lastModifiedDate":"2021-11-07"},{"lineNumber":116,"author":{"gitId":"xRossKoh"},"content":"     *","lastModifiedDate":"2021-11-07"},{"lineNumber":117,"author":{"gitId":"xRossKoh"},"content":"     * @return  User\u0027s saved decks of flashcards","lastModifiedDate":"2021-11-07"},{"lineNumber":118,"author":{"gitId":"xRossKoh"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":119,"author":{"gitId":"xRossKoh"},"content":"    public ArrayList\u003cDeck\u003e readCardsFromFile() {","lastModifiedDate":"2021-10-25"},{"lineNumber":120,"author":{"gitId":"xRossKoh"},"content":"        logger.setLevel(Level.SEVERE);","lastModifiedDate":"2021-11-08"},{"lineNumber":121,"author":{"gitId":"xRossKoh"},"content":"        ArrayList\u003cDeck\u003e decks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-21"},{"lineNumber":122,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":123,"author":{"gitId":"xRossKoh"},"content":"        try {","lastModifiedDate":"2021-10-21"},{"lineNumber":124,"author":{"gitId":"xRossKoh"},"content":"            // instantiate scanner to read file contents","lastModifiedDate":"2021-10-21"},{"lineNumber":125,"author":{"gitId":"xRossKoh"},"content":"            Scanner s \u003d new Scanner(this.cardsFile);","lastModifiedDate":"2021-10-26"},{"lineNumber":126,"author":{"gitId":"xRossKoh"},"content":"            JSONParser parser \u003d new JSONParser();","lastModifiedDate":"2021-11-01"},{"lineNumber":127,"author":{"gitId":"xRossKoh"},"content":"            JSONArray jsonDecks \u003d (JSONArray) parser.parse(s.nextLine());","lastModifiedDate":"2021-11-01"},{"lineNumber":128,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":129,"author":{"gitId":"xRossKoh"},"content":"            for (Object o : jsonDecks) {","lastModifiedDate":"2021-11-01"},{"lineNumber":130,"author":{"gitId":"xRossKoh"},"content":"                decks.add(parseDeck((JSONObject) o));","lastModifiedDate":"2021-11-01"},{"lineNumber":131,"author":{"gitId":"xRossKoh"},"content":"            }","lastModifiedDate":"2021-10-25"},{"lineNumber":132,"author":{"gitId":"xRossKoh"},"content":"        } catch (ParseException e) {","lastModifiedDate":"2021-11-07"},{"lineNumber":133,"author":{"gitId":"xRossKoh"},"content":"            System.out.println(\"Something went wrong parsing data/Cards_CardLI.json...\");","lastModifiedDate":"2021-11-07"},{"lineNumber":134,"author":{"gitId":"xRossKoh"},"content":"            System.out.println(\"If you directly edited the JSON file, please revert all changes made to it.\");","lastModifiedDate":"2021-11-07"},{"lineNumber":135,"author":{"gitId":"xRossKoh"},"content":"            logger.log(Level.WARNING, \"ParseException thrown at readCardsFromFile()\");","lastModifiedDate":"2021-11-08"},{"lineNumber":136,"author":{"gitId":"xRossKoh"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2021-11-08"},{"lineNumber":137,"author":{"gitId":"xRossKoh"},"content":"            logger.log(Level.WARNING, \"NoFileFoundException thrown at readCardsFromFile()\");","lastModifiedDate":"2021-11-08"},{"lineNumber":138,"author":{"gitId":"xRossKoh"},"content":"        } catch (NoSuchElementException e) {","lastModifiedDate":"2021-11-08"},{"lineNumber":139,"author":{"gitId":"xRossKoh"},"content":"            logger.log(Level.WARNING, \"NoSuchElementException thrown at readCardsFromFile()\");","lastModifiedDate":"2021-11-08"},{"lineNumber":140,"author":{"gitId":"xRossKoh"},"content":"        }","lastModifiedDate":"2021-11-07"},{"lineNumber":141,"author":{"gitId":"xRossKoh"},"content":"        return decks;","lastModifiedDate":"2021-11-01"},{"lineNumber":142,"author":{"gitId":"xRossKoh"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":143,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":144,"author":{"gitId":"xRossKoh"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":145,"author":{"gitId":"xRossKoh"},"content":"     * Reads JSON file to return user\u0027s saved test history.","lastModifiedDate":"2021-11-07"},{"lineNumber":146,"author":{"gitId":"xRossKoh"},"content":"     *","lastModifiedDate":"2021-11-07"},{"lineNumber":147,"author":{"gitId":"xRossKoh"},"content":"     * @return      User\u0027s saved test history","lastModifiedDate":"2021-11-07"},{"lineNumber":148,"author":{"gitId":"xRossKoh"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":149,"author":{"gitId":"xRossKoh"},"content":"    public ArrayList\u003cAnswerList\u003e readTestsFromFile() {","lastModifiedDate":"2021-10-25"},{"lineNumber":150,"author":{"gitId":"xRossKoh"},"content":"        logger.setLevel(Level.SEVERE);","lastModifiedDate":"2021-11-08"},{"lineNumber":151,"author":{"gitId":"xRossKoh"},"content":"        ArrayList\u003cAnswerList\u003e testHistory \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-25"},{"lineNumber":152,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":153,"author":{"gitId":"xRossKoh"},"content":"        try {","lastModifiedDate":"2021-10-25"},{"lineNumber":154,"author":{"gitId":"xRossKoh"},"content":"            // instantiate scanner to read file contents","lastModifiedDate":"2021-10-25"},{"lineNumber":155,"author":{"gitId":"xRossKoh"},"content":"            Scanner s \u003d new Scanner(this.testsFile);","lastModifiedDate":"2021-10-26"},{"lineNumber":156,"author":{"gitId":"xRossKoh"},"content":"            JSONParser parser \u003d new JSONParser();","lastModifiedDate":"2021-11-01"},{"lineNumber":157,"author":{"gitId":"xRossKoh"},"content":"            JSONArray jsonTestHistory \u003d (JSONArray) parser.parse(s.nextLine());","lastModifiedDate":"2021-11-01"},{"lineNumber":158,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":159,"author":{"gitId":"xRossKoh"},"content":"            for (Object o : jsonTestHistory) {","lastModifiedDate":"2021-11-01"},{"lineNumber":160,"author":{"gitId":"xRossKoh"},"content":"                testHistory.add(parseAnswerList((JSONObject) o));","lastModifiedDate":"2021-11-01"},{"lineNumber":161,"author":{"gitId":"xRossKoh"},"content":"            }","lastModifiedDate":"2021-10-25"},{"lineNumber":162,"author":{"gitId":"xRossKoh"},"content":"        } catch (ParseException e) {","lastModifiedDate":"2021-11-07"},{"lineNumber":163,"author":{"gitId":"xRossKoh"},"content":"            System.out.println(\"Something went wrong parsing data/Tests_CardLI.json...\");","lastModifiedDate":"2021-11-07"},{"lineNumber":164,"author":{"gitId":"xRossKoh"},"content":"            System.out.println(\"If you directly edited the JSON file, please revert all changes made to it.\");","lastModifiedDate":"2021-11-07"},{"lineNumber":165,"author":{"gitId":"xRossKoh"},"content":"            logger.log(Level.WARNING, \"ParseException thrown at readTestsFromFile()\");","lastModifiedDate":"2021-11-08"},{"lineNumber":166,"author":{"gitId":"xRossKoh"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2021-11-08"},{"lineNumber":167,"author":{"gitId":"xRossKoh"},"content":"            logger.log(Level.WARNING, \"NoFileFoundException thrown at readTestsFromFile()\");","lastModifiedDate":"2021-11-08"},{"lineNumber":168,"author":{"gitId":"xRossKoh"},"content":"        } catch (NoSuchElementException e) {","lastModifiedDate":"2021-11-08"},{"lineNumber":169,"author":{"gitId":"xRossKoh"},"content":"            logger.log(Level.WARNING, \"NoSuchElementException thrown at readTestsFromFile()\");","lastModifiedDate":"2021-11-08"},{"lineNumber":170,"author":{"gitId":"xRossKoh"},"content":"        }","lastModifiedDate":"2021-11-07"},{"lineNumber":171,"author":{"gitId":"xRossKoh"},"content":"        return testHistory;","lastModifiedDate":"2021-11-01"},{"lineNumber":172,"author":{"gitId":"xRossKoh"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":173,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":174,"author":{"gitId":"xRossKoh"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":175,"author":{"gitId":"xRossKoh"},"content":"     * Converts an AnswerList as JSONObject instance to an AnswerList instance.","lastModifiedDate":"2021-11-07"},{"lineNumber":176,"author":{"gitId":"xRossKoh"},"content":"     *","lastModifiedDate":"2021-11-07"},{"lineNumber":177,"author":{"gitId":"xRossKoh"},"content":"     * @param jsonAnswerList    AnswerList as a JSONObject instance","lastModifiedDate":"2021-11-07"},{"lineNumber":178,"author":{"gitId":"xRossKoh"},"content":"     * @return                  AnswerList instance","lastModifiedDate":"2021-11-07"},{"lineNumber":179,"author":{"gitId":"xRossKoh"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":180,"author":{"gitId":"xRossKoh"},"content":"    private AnswerList parseAnswerList(JSONObject jsonAnswerList) {","lastModifiedDate":"2021-11-01"},{"lineNumber":181,"author":{"gitId":"xRossKoh"},"content":"        logger.setLevel(Level.WARNING);","lastModifiedDate":"2021-11-08"},{"lineNumber":182,"author":{"gitId":"xRossKoh"},"content":"        JSONObject jsonDeck \u003d (JSONObject) jsonAnswerList.get(\"deck\");","lastModifiedDate":"2021-11-01"},{"lineNumber":183,"author":{"gitId":"xRossKoh"},"content":"        AnswerList newAnswerList \u003d new AnswerList(parseDeck(jsonDeck));","lastModifiedDate":"2021-11-01"},{"lineNumber":184,"author":{"gitId":"xRossKoh"},"content":"        JSONArray jsonAnswers \u003d (JSONArray) jsonAnswerList.get(\"answerList\");","lastModifiedDate":"2021-11-01"},{"lineNumber":185,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":186,"author":{"gitId":"xRossKoh"},"content":"        for (Object o : jsonAnswers) {","lastModifiedDate":"2021-11-01"},{"lineNumber":187,"author":{"gitId":"xRossKoh"},"content":"            JSONObject jsonAnswer \u003d (JSONObject) o;","lastModifiedDate":"2021-11-01"},{"lineNumber":188,"author":{"gitId":"xRossKoh"},"content":"            newAnswerList.addAnswer((String) jsonAnswer.get(\"answer\"),","lastModifiedDate":"2021-11-01"},{"lineNumber":189,"author":{"gitId":"xRossKoh"},"content":"                    (int) (long) jsonAnswer.get(\"questionIndex\"));","lastModifiedDate":"2021-11-01"},{"lineNumber":190,"author":{"gitId":"xRossKoh"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":191,"author":{"gitId":"xRossKoh"},"content":"        newAnswerList.setUserScore((int) (long) jsonAnswerList.get(\"userScore\"));","lastModifiedDate":"2021-11-01"},{"lineNumber":192,"author":{"gitId":"xRossKoh"},"content":"        logger.log(Level.INFO, \"Successfully parsed 1 AnswerList instance\");","lastModifiedDate":"2021-11-08"},{"lineNumber":193,"author":{"gitId":"xRossKoh"},"content":"        return newAnswerList;","lastModifiedDate":"2021-10-25"},{"lineNumber":194,"author":{"gitId":"xRossKoh"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":195,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":196,"author":{"gitId":"xRossKoh"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":197,"author":{"gitId":"xRossKoh"},"content":"     * Converts a Deck as a JSONObject instance to a Deck instance.","lastModifiedDate":"2021-11-07"},{"lineNumber":198,"author":{"gitId":"xRossKoh"},"content":"     *","lastModifiedDate":"2021-11-07"},{"lineNumber":199,"author":{"gitId":"xRossKoh"},"content":"     * @param jsonDeck      Deck as a JSONObject instance","lastModifiedDate":"2021-11-07"},{"lineNumber":200,"author":{"gitId":"xRossKoh"},"content":"     * @return              Deck instance","lastModifiedDate":"2021-11-07"},{"lineNumber":201,"author":{"gitId":"xRossKoh"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":202,"author":{"gitId":"xRossKoh"},"content":"    private Deck parseDeck(JSONObject jsonDeck) {","lastModifiedDate":"2021-11-01"},{"lineNumber":203,"author":{"gitId":"xRossKoh"},"content":"        logger.setLevel(Level.WARNING);","lastModifiedDate":"2021-11-08"},{"lineNumber":204,"author":{"gitId":"xRossKoh"},"content":"        Deck newDeck \u003d new Deck((String) jsonDeck.get(\"deckName\"));","lastModifiedDate":"2021-11-01"},{"lineNumber":205,"author":{"gitId":"xRossKoh"},"content":"        JSONArray jsonCards \u003d (JSONArray) jsonDeck.get(\"cards\");","lastModifiedDate":"2021-11-01"},{"lineNumber":206,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":207,"author":{"gitId":"xRossKoh"},"content":"        for (Object o : jsonCards) {","lastModifiedDate":"2021-11-01"},{"lineNumber":208,"author":{"gitId":"xRossKoh"},"content":"            JSONObject jsonCard \u003d (JSONObject) o;","lastModifiedDate":"2021-11-01"},{"lineNumber":209,"author":{"gitId":"xRossKoh"},"content":"            newDeck.addFlashCard(new FlashCard((String) jsonCard.get(\"front\"),","lastModifiedDate":"2021-11-07"},{"lineNumber":210,"author":{"gitId":"xRossKoh"},"content":"                    (String) jsonCard.get(\"back\"),","lastModifiedDate":"2021-11-01"},{"lineNumber":211,"author":{"gitId":"xRossKoh"},"content":"                    (int) (long) jsonCard.get(\"userScore\"),","lastModifiedDate":"2021-11-01"},{"lineNumber":212,"author":{"gitId":"xRossKoh"},"content":"                    (int) (long) jsonCard.get(\"totalScore\")));","lastModifiedDate":"2021-11-07"},{"lineNumber":213,"author":{"gitId":"xRossKoh"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":214,"author":{"gitId":"xRossKoh"},"content":"        logger.log(Level.INFO, \"Successfully parsed 1 Deck instance\");","lastModifiedDate":"2021-11-08"},{"lineNumber":215,"author":{"gitId":"xRossKoh"},"content":"        return newDeck;","lastModifiedDate":"2021-10-25"},{"lineNumber":216,"author":{"gitId":"xRossKoh"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":217,"author":{"gitId":"xRossKoh"},"content":"}","lastModifiedDate":"2021-10-20"}],"authorContributionMap":{"xRossKoh":217}},{"path":"src/main/java/seedu/cardli/testing/Answer.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"xRossKoh"},"content":"package seedu.cardli.testing;","lastModifiedDate":"2021-10-26"},{"lineNumber":2,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":3,"author":{"gitId":"xRossKoh"},"content":"import org.json.simple.JSONObject;","lastModifiedDate":"2021-11-01"},{"lineNumber":4,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.flashcard.FlashCard;","lastModifiedDate":"2021-10-26"},{"lineNumber":5,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":6,"author":{"gitId":"xRossKoh"},"content":"/**","lastModifiedDate":"2021-10-06"},{"lineNumber":7,"author":{"gitId":"xRossKoh"},"content":" * Represents information about a single user answer when test function is invoked.","lastModifiedDate":"2021-10-06"},{"lineNumber":8,"author":{"gitId":"xRossKoh"},"content":" */","lastModifiedDate":"2021-10-06"},{"lineNumber":9,"author":{"gitId":"ThaddeusLim99"},"content":"public class Answer {","lastModifiedDate":"2021-10-04"},{"lineNumber":10,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":11,"author":{"gitId":"ThaddeusLim99"},"content":"    private String answer;","lastModifiedDate":"2021-10-26"},{"lineNumber":12,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":13,"author":{"gitId":"xRossKoh"},"content":"    static final String SEPARATOR \u003d \" | \";","lastModifiedDate":"2021-10-25"},{"lineNumber":14,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":15,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":16,"author":{"gitId":"xkisxk"},"content":"    private final int questionIndex;","lastModifiedDate":"2021-10-16"},{"lineNumber":17,"author":{"gitId":"ThaddeusLim99"},"content":"    private boolean isAnswered;","lastModifiedDate":"2021-10-26"},{"lineNumber":18,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":19,"author":{"gitId":"ThaddeusLim99"},"content":"    public Answer(String answer, int questionIndex, Boolean isAnswered) {","lastModifiedDate":"2021-10-26"},{"lineNumber":20,"author":{"gitId":"ThaddeusLim99"},"content":"        this.answer \u003d answer;","lastModifiedDate":"2021-10-26"},{"lineNumber":21,"author":{"gitId":"ThaddeusLim99"},"content":"        this.questionIndex \u003d questionIndex;","lastModifiedDate":"2021-10-26"},{"lineNumber":22,"author":{"gitId":"ThaddeusLim99"},"content":"        this.isAnswered \u003d isAnswered;","lastModifiedDate":"2021-10-26"},{"lineNumber":23,"author":{"gitId":"ThaddeusLim99"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":24,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":25,"author":{"gitId":"ThaddeusLim99"},"content":"    public Answer(String answer, int questionIndex) {","lastModifiedDate":"2021-10-04"},{"lineNumber":26,"author":{"gitId":"ThaddeusLim99"},"content":"        this.answer \u003d answer;","lastModifiedDate":"2021-10-04"},{"lineNumber":27,"author":{"gitId":"ThaddeusLim99"},"content":"        this.questionIndex \u003d questionIndex;","lastModifiedDate":"2021-10-04"},{"lineNumber":28,"author":{"gitId":"ThaddeusLim99"},"content":"        this.isAnswered \u003d false;","lastModifiedDate":"2021-10-26"},{"lineNumber":29,"author":{"gitId":"ThaddeusLim99"},"content":"    }","lastModifiedDate":"2021-10-04"},{"lineNumber":30,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":31,"author":{"gitId":"ThaddeusLim99"},"content":"    //getter for front","lastModifiedDate":"2021-10-04"},{"lineNumber":32,"author":{"gitId":"ThaddeusLim99"},"content":"    public String getAnswer() {","lastModifiedDate":"2021-10-04"},{"lineNumber":33,"author":{"gitId":"ThaddeusLim99"},"content":"        return this.answer;","lastModifiedDate":"2021-10-04"},{"lineNumber":34,"author":{"gitId":"ThaddeusLim99"},"content":"    }","lastModifiedDate":"2021-10-04"},{"lineNumber":35,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":36,"author":{"gitId":"xkisxk"},"content":"    public int getQuestionIndex() {","lastModifiedDate":"2021-10-17"},{"lineNumber":37,"author":{"gitId":"xkisxk"},"content":"        return this.questionIndex;","lastModifiedDate":"2021-10-17"},{"lineNumber":38,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":39,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":40,"author":{"gitId":"xkisxk"},"content":"    public boolean isCorrect(String userAnswer, FlashCard question) {","lastModifiedDate":"2021-10-17"},{"lineNumber":41,"author":{"gitId":"xkisxk"},"content":"        String lowerCaseUserAnswer \u003d userAnswer.toLowerCase();","lastModifiedDate":"2021-10-17"},{"lineNumber":42,"author":{"gitId":"xkisxk"},"content":"        String lowerCaseAnswer \u003d question.getBack().toLowerCase();","lastModifiedDate":"2021-10-17"},{"lineNumber":43,"author":{"gitId":"xkisxk"},"content":"        return lowerCaseAnswer.equals(lowerCaseUserAnswer);","lastModifiedDate":"2021-10-17"},{"lineNumber":44,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":45,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":46,"author":{"gitId":"ThaddeusLim99"},"content":"    public void setIsAnswered() {","lastModifiedDate":"2021-10-26"},{"lineNumber":47,"author":{"gitId":"ThaddeusLim99"},"content":"        this.isAnswered \u003d true;","lastModifiedDate":"2021-10-26"},{"lineNumber":48,"author":{"gitId":"ThaddeusLim99"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":49,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":50,"author":{"gitId":"ThaddeusLim99"},"content":"    public Boolean isAnswered() {","lastModifiedDate":"2021-10-26"},{"lineNumber":51,"author":{"gitId":"ThaddeusLim99"},"content":"        return isAnswered;","lastModifiedDate":"2021-10-26"},{"lineNumber":52,"author":{"gitId":"ThaddeusLim99"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":53,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":54,"author":{"gitId":"ThaddeusLim99"},"content":"    public void setAnswer(String answer) {","lastModifiedDate":"2021-10-26"},{"lineNumber":55,"author":{"gitId":"ThaddeusLim99"},"content":"        this.answer \u003d answer;","lastModifiedDate":"2021-10-26"},{"lineNumber":56,"author":{"gitId":"ThaddeusLim99"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":57,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":58,"author":{"gitId":"xRossKoh"},"content":"    @Override","lastModifiedDate":"2021-10-25"},{"lineNumber":59,"author":{"gitId":"xRossKoh"},"content":"    public String toString() {","lastModifiedDate":"2021-10-25"},{"lineNumber":60,"author":{"gitId":"xRossKoh"},"content":"        return getAnswer() + SEPARATOR","lastModifiedDate":"2021-10-25"},{"lineNumber":61,"author":{"gitId":"xRossKoh"},"content":"                + getQuestionIndex() + \u0027\\n\u0027;","lastModifiedDate":"2021-10-25"},{"lineNumber":62,"author":{"gitId":"xRossKoh"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":63,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":64,"author":{"gitId":"xRossKoh"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":65,"author":{"gitId":"xRossKoh"},"content":"     * Converts an Answer instance into a JSONObject instance.","lastModifiedDate":"2021-11-07"},{"lineNumber":66,"author":{"gitId":"xRossKoh"},"content":"     *","lastModifiedDate":"2021-11-07"},{"lineNumber":67,"author":{"gitId":"xRossKoh"},"content":"     * @return      Answer instance as a JSONObject instance","lastModifiedDate":"2021-11-07"},{"lineNumber":68,"author":{"gitId":"xRossKoh"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":69,"author":{"gitId":"xRossKoh"},"content":"    public JSONObject toJsonObject() {","lastModifiedDate":"2021-11-01"},{"lineNumber":70,"author":{"gitId":"xRossKoh"},"content":"        JSONObject jsonAnswer \u003d new JSONObject();","lastModifiedDate":"2021-11-01"},{"lineNumber":71,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":72,"author":{"gitId":"xRossKoh"},"content":"        jsonAnswer.put(\"answer\", getAnswer());","lastModifiedDate":"2021-11-01"},{"lineNumber":73,"author":{"gitId":"xRossKoh"},"content":"        jsonAnswer.put(\"questionIndex\", getQuestionIndex());","lastModifiedDate":"2021-11-01"},{"lineNumber":74,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":75,"author":{"gitId":"xRossKoh"},"content":"        return jsonAnswer;","lastModifiedDate":"2021-11-01"},{"lineNumber":76,"author":{"gitId":"xRossKoh"},"content":"    }","lastModifiedDate":"2021-11-01"},{"lineNumber":77,"author":{"gitId":"ThaddeusLim99"},"content":"}","lastModifiedDate":"2021-10-04"}],"authorContributionMap":{"JWweiyin":3,"ThaddeusLim99":35,"xRossKoh":28,"xkisxk":11}},{"path":"src/main/java/seedu/cardli/testing/AnswerList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"xRossKoh"},"content":"package seedu.cardli.testing;","lastModifiedDate":"2021-10-26"},{"lineNumber":2,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":3,"author":{"gitId":"xRossKoh"},"content":"import org.json.simple.JSONArray;","lastModifiedDate":"2021-11-01"},{"lineNumber":4,"author":{"gitId":"xRossKoh"},"content":"import org.json.simple.JSONObject;","lastModifiedDate":"2021-11-01"},{"lineNumber":5,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.flashcard.Deck;","lastModifiedDate":"2021-10-26"},{"lineNumber":6,"author":{"gitId":"xkisxk"},"content":"import seedu.cardli.flashcard.FlashCard;","lastModifiedDate":"2021-11-03"},{"lineNumber":7,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":8,"author":{"gitId":"xkisxk"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-17"},{"lineNumber":9,"author":{"gitId":"xkisxk"},"content":"import java.util.logging.Level;","lastModifiedDate":"2021-10-18"},{"lineNumber":10,"author":{"gitId":"xkisxk"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-10-18"},{"lineNumber":11,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":12,"author":{"gitId":"xkisxk"},"content":"/**","lastModifiedDate":"2021-10-19"},{"lineNumber":13,"author":{"gitId":"xkisxk"},"content":" * Contains all the user\u0027s answers to the tested deck and his score.","lastModifiedDate":"2021-10-21"},{"lineNumber":14,"author":{"gitId":"xkisxk"},"content":" */","lastModifiedDate":"2021-10-19"},{"lineNumber":15,"author":{"gitId":"xkisxk"},"content":"public class AnswerList {","lastModifiedDate":"2021-10-17"},{"lineNumber":16,"author":{"gitId":"xkisxk"},"content":"    private final ArrayList\u003cAnswer\u003e answerList;","lastModifiedDate":"2021-10-21"},{"lineNumber":17,"author":{"gitId":"xkisxk"},"content":"    private final Deck deck;","lastModifiedDate":"2021-10-21"},{"lineNumber":18,"author":{"gitId":"xkisxk"},"content":"    private int userScore;","lastModifiedDate":"2021-10-21"},{"lineNumber":19,"author":{"gitId":"xkisxk"},"content":"    private static final Logger logger \u003d Logger.getLogger(Deck.class.getName());","lastModifiedDate":"2021-10-18"},{"lineNumber":20,"author":{"gitId":"ThaddeusLim99"},"content":"    private boolean isAllAnswered;","lastModifiedDate":"2021-10-26"},{"lineNumber":21,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":22,"author":{"gitId":"xkisxk"},"content":"    /**","lastModifiedDate":"2021-10-19"},{"lineNumber":23,"author":{"gitId":"xkisxk"},"content":"     * AnswerList contains the list of answers from a test and the deck","lastModifiedDate":"2021-10-19"},{"lineNumber":24,"author":{"gitId":"xkisxk"},"content":"     * the questions came from.","lastModifiedDate":"2021-10-19"},{"lineNumber":25,"author":{"gitId":"xkisxk"},"content":"     *","lastModifiedDate":"2021-10-19"},{"lineNumber":26,"author":{"gitId":"xkisxk"},"content":"     * @param deck tested deck","lastModifiedDate":"2021-10-19"},{"lineNumber":27,"author":{"gitId":"xkisxk"},"content":"     */","lastModifiedDate":"2021-10-19"},{"lineNumber":28,"author":{"gitId":"xkisxk"},"content":"    public AnswerList(Deck deck) {","lastModifiedDate":"2021-10-17"},{"lineNumber":29,"author":{"gitId":"xkisxk"},"content":"        this.answerList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-17"},{"lineNumber":30,"author":{"gitId":"xkisxk"},"content":"        this.deck \u003d deck;","lastModifiedDate":"2021-10-17"},{"lineNumber":31,"author":{"gitId":"xkisxk"},"content":"        this.userScore \u003d 0;","lastModifiedDate":"2021-10-21"},{"lineNumber":32,"author":{"gitId":"ThaddeusLim99"},"content":"        this.isAllAnswered \u003d false;","lastModifiedDate":"2021-10-26"},{"lineNumber":33,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":34,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":35,"author":{"gitId":"ThaddeusLim99"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":36,"author":{"gitId":"ThaddeusLim99"},"content":"     * Returns true or false regarding if a question is answered.","lastModifiedDate":"2021-11-07"},{"lineNumber":37,"author":{"gitId":"ThaddeusLim99"},"content":"     *","lastModifiedDate":"2021-11-07"},{"lineNumber":38,"author":{"gitId":"ThaddeusLim99"},"content":"     * @param index the question in the answerList.","lastModifiedDate":"2021-11-07"},{"lineNumber":39,"author":{"gitId":"ThaddeusLim99"},"content":"     * @return true or false regarding if a question is answered.","lastModifiedDate":"2021-11-07"},{"lineNumber":40,"author":{"gitId":"ThaddeusLim99"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":41,"author":{"gitId":"ThaddeusLim99"},"content":"    public Boolean isQuestionAnswered(int index) {","lastModifiedDate":"2021-10-26"},{"lineNumber":42,"author":{"gitId":"ThaddeusLim99"},"content":"        Boolean isQuestionAnswered;","lastModifiedDate":"2021-10-26"},{"lineNumber":43,"author":{"gitId":"ThaddeusLim99"},"content":"        try {","lastModifiedDate":"2021-10-26"},{"lineNumber":44,"author":{"gitId":"ThaddeusLim99"},"content":"            Answer answer \u003d answerList.get(index);","lastModifiedDate":"2021-10-26"},{"lineNumber":45,"author":{"gitId":"ThaddeusLim99"},"content":"            isQuestionAnswered \u003d answer.isAnswered();","lastModifiedDate":"2021-10-26"},{"lineNumber":46,"author":{"gitId":"ThaddeusLim99"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2021-10-26"},{"lineNumber":47,"author":{"gitId":"ThaddeusLim99"},"content":"            isQuestionAnswered \u003d false;","lastModifiedDate":"2021-10-26"},{"lineNumber":48,"author":{"gitId":"ThaddeusLim99"},"content":"        }","lastModifiedDate":"2021-10-26"},{"lineNumber":49,"author":{"gitId":"ThaddeusLim99"},"content":"        return isQuestionAnswered;","lastModifiedDate":"2021-10-26"},{"lineNumber":50,"author":{"gitId":"ThaddeusLim99"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":51,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":52,"author":{"gitId":"xkisxk"},"content":"    public void incrementUserScore() {","lastModifiedDate":"2021-10-21"},{"lineNumber":53,"author":{"gitId":"xkisxk"},"content":"        userScore++;","lastModifiedDate":"2021-10-21"},{"lineNumber":54,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":55,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":56,"author":{"gitId":"xkisxk"},"content":"    public Boolean isEmpty() {","lastModifiedDate":"2021-10-17"},{"lineNumber":57,"author":{"gitId":"xkisxk"},"content":"        return answerList.isEmpty();","lastModifiedDate":"2021-10-17"},{"lineNumber":58,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":59,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":60,"author":{"gitId":"ThaddeusLim99"},"content":"    public Boolean isAllAnswered() {","lastModifiedDate":"2021-10-26"},{"lineNumber":61,"author":{"gitId":"ThaddeusLim99"},"content":"        for (Answer a : answerList) {","lastModifiedDate":"2021-10-26"},{"lineNumber":62,"author":{"gitId":"ThaddeusLim99"},"content":"            if (!a.isAnswered()) {","lastModifiedDate":"2021-10-26"},{"lineNumber":63,"author":{"gitId":"ThaddeusLim99"},"content":"                return false;","lastModifiedDate":"2021-10-26"},{"lineNumber":64,"author":{"gitId":"ThaddeusLim99"},"content":"            }","lastModifiedDate":"2021-10-26"},{"lineNumber":65,"author":{"gitId":"ThaddeusLim99"},"content":"        }","lastModifiedDate":"2021-10-26"},{"lineNumber":66,"author":{"gitId":"ThaddeusLim99"},"content":"        return true;","lastModifiedDate":"2021-10-26"},{"lineNumber":67,"author":{"gitId":"ThaddeusLim99"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":68,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":69,"author":{"gitId":"xkisxk"},"content":"    /**","lastModifiedDate":"2021-11-03"},{"lineNumber":70,"author":{"gitId":"xkisxk"},"content":"     * Saves a new user answer to the current list of user answers.","lastModifiedDate":"2021-11-03"},{"lineNumber":71,"author":{"gitId":"xkisxk"},"content":"     *","lastModifiedDate":"2021-11-03"},{"lineNumber":72,"author":{"gitId":"xkisxk"},"content":"     * @param answer        String representation of user\u0027s answer","lastModifiedDate":"2021-11-03"},{"lineNumber":73,"author":{"gitId":"xkisxk"},"content":"     * @param questionIndex Question number for the question that the answer answers","lastModifiedDate":"2021-11-03"},{"lineNumber":74,"author":{"gitId":"xkisxk"},"content":"     */","lastModifiedDate":"2021-11-03"},{"lineNumber":75,"author":{"gitId":"xkisxk"},"content":"    public void addAnswer(String answer, int questionIndex) {","lastModifiedDate":"2021-10-17"},{"lineNumber":76,"author":{"gitId":"xkisxk"},"content":"        logger.setLevel(Level.WARNING);","lastModifiedDate":"2021-10-21"},{"lineNumber":77,"author":{"gitId":"xkisxk"},"content":"        logger.log(Level.INFO, \"Adding card\");","lastModifiedDate":"2021-10-21"},{"lineNumber":78,"author":{"gitId":"xkisxk"},"content":"        answerList.add(new Answer(answer, questionIndex));","lastModifiedDate":"2021-10-17"},{"lineNumber":79,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":80,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":81,"author":{"gitId":"JWweiyin"},"content":"    /**","lastModifiedDate":"2021-11-06"},{"lineNumber":82,"author":{"gitId":"JWweiyin"},"content":"     * Gets the index of the answer in the list.","lastModifiedDate":"2021-11-06"},{"lineNumber":83,"author":{"gitId":"JWweiyin"},"content":"     *","lastModifiedDate":"2021-11-06"},{"lineNumber":84,"author":{"gitId":"JWweiyin"},"content":"     * @param answer answer query","lastModifiedDate":"2021-11-06"},{"lineNumber":85,"author":{"gitId":"JWweiyin"},"content":"     * @return index of the answer","lastModifiedDate":"2021-11-06"},{"lineNumber":86,"author":{"gitId":"JWweiyin"},"content":"     */","lastModifiedDate":"2021-11-06"},{"lineNumber":87,"author":{"gitId":"JWweiyin"},"content":"    public int getAnswerIndex(Answer answer) {","lastModifiedDate":"2021-11-06"},{"lineNumber":88,"author":{"gitId":"JWweiyin"},"content":"        return answerList.indexOf(answer);","lastModifiedDate":"2021-11-06"},{"lineNumber":89,"author":{"gitId":"ThaddeusLim99"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":90,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":91,"author":{"gitId":"xkisxk"},"content":"    public Answer getAnswer(int questionIndex) {","lastModifiedDate":"2021-11-03"},{"lineNumber":92,"author":{"gitId":"xkisxk"},"content":"        return answerList.get(questionIndex);","lastModifiedDate":"2021-11-03"},{"lineNumber":93,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":94,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":95,"author":{"gitId":"JWweiyin"},"content":"    public Deck getDeck() {","lastModifiedDate":"2021-11-06"},{"lineNumber":96,"author":{"gitId":"JWweiyin"},"content":"        return deck;","lastModifiedDate":"2021-11-06"},{"lineNumber":97,"author":{"gitId":"JWweiyin"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":98,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":99,"author":{"gitId":"JWweiyin"},"content":"    public int getSize() {","lastModifiedDate":"2021-11-06"},{"lineNumber":100,"author":{"gitId":"JWweiyin"},"content":"        return answerList.size();","lastModifiedDate":"2021-11-06"},{"lineNumber":101,"author":{"gitId":"JWweiyin"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":102,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":103,"author":{"gitId":"JWweiyin"},"content":"    public ArrayList\u003cAnswer\u003e getAnswerList() {","lastModifiedDate":"2021-11-06"},{"lineNumber":104,"author":{"gitId":"JWweiyin"},"content":"        return answerList;","lastModifiedDate":"2021-11-06"},{"lineNumber":105,"author":{"gitId":"JWweiyin"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":106,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":107,"author":{"gitId":"JWweiyin"},"content":"    public int getUserScore() {","lastModifiedDate":"2021-11-06"},{"lineNumber":108,"author":{"gitId":"JWweiyin"},"content":"        return userScore;","lastModifiedDate":"2021-11-06"},{"lineNumber":109,"author":{"gitId":"JWweiyin"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":110,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":111,"author":{"gitId":"JWweiyin"},"content":"    public void setUserScore(int userScore) {","lastModifiedDate":"2021-11-06"},{"lineNumber":112,"author":{"gitId":"JWweiyin"},"content":"        this.userScore \u003d userScore;","lastModifiedDate":"2021-11-06"},{"lineNumber":113,"author":{"gitId":"JWweiyin"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":114,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":115,"author":{"gitId":"JWweiyin"},"content":"    public void setQuestionAnswer(int questionIndex, String answer) {","lastModifiedDate":"2021-11-06"},{"lineNumber":116,"author":{"gitId":"JWweiyin"},"content":"        answerList.get(questionIndex).setAnswer(answer);","lastModifiedDate":"2021-11-06"},{"lineNumber":117,"author":{"gitId":"JWweiyin"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":118,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":119,"author":{"gitId":"xRossKoh"},"content":"    @Override","lastModifiedDate":"2021-10-25"},{"lineNumber":120,"author":{"gitId":"xRossKoh"},"content":"    public String toString() {","lastModifiedDate":"2021-10-25"},{"lineNumber":121,"author":{"gitId":"xRossKoh"},"content":"        String answersString \u003d \"\";","lastModifiedDate":"2021-10-25"},{"lineNumber":122,"author":{"gitId":"xRossKoh"},"content":"        int answersCount \u003d getSize();","lastModifiedDate":"2021-10-25"},{"lineNumber":123,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":124,"author":{"gitId":"xRossKoh"},"content":"        for (int i \u003d 0; i \u003c answersCount; i++) {","lastModifiedDate":"2021-10-25"},{"lineNumber":125,"author":{"gitId":"xRossKoh"},"content":"            answersString +\u003d answerList.get(i);","lastModifiedDate":"2021-10-25"},{"lineNumber":126,"author":{"gitId":"xRossKoh"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":127,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":128,"author":{"gitId":"xRossKoh"},"content":"        return getDeck().toString()","lastModifiedDate":"2021-10-26"},{"lineNumber":129,"author":{"gitId":"xRossKoh"},"content":"                + answersCount + \u0027\\n\u0027","lastModifiedDate":"2021-10-25"},{"lineNumber":130,"author":{"gitId":"xRossKoh"},"content":"                + answersString","lastModifiedDate":"2021-10-26"},{"lineNumber":131,"author":{"gitId":"xRossKoh"},"content":"                + getUserScore();","lastModifiedDate":"2021-10-25"},{"lineNumber":132,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":133,"author":{"gitId":"xRossKoh"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":134,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":135,"author":{"gitId":"xRossKoh"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":136,"author":{"gitId":"xRossKoh"},"content":"     * Converts an AnswerList instance into a JSONObject instance.","lastModifiedDate":"2021-11-07"},{"lineNumber":137,"author":{"gitId":"xRossKoh"},"content":"     *","lastModifiedDate":"2021-11-07"},{"lineNumber":138,"author":{"gitId":"xRossKoh"},"content":"     * @return      AnswerList instance as a JSONObject instance","lastModifiedDate":"2021-11-07"},{"lineNumber":139,"author":{"gitId":"xRossKoh"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":140,"author":{"gitId":"xRossKoh"},"content":"    public JSONObject toJsonObject() {","lastModifiedDate":"2021-11-01"},{"lineNumber":141,"author":{"gitId":"xRossKoh"},"content":"        JSONObject jsonAnswerList \u003d new JSONObject();","lastModifiedDate":"2021-11-01"},{"lineNumber":142,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":143,"author":{"gitId":"xRossKoh"},"content":"        int answerCount \u003d getSize();","lastModifiedDate":"2021-11-01"},{"lineNumber":144,"author":{"gitId":"xRossKoh"},"content":"        JSONArray jsonAnswers \u003d new JSONArray();","lastModifiedDate":"2021-11-01"},{"lineNumber":145,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":146,"author":{"gitId":"xRossKoh"},"content":"        for (int i \u003d 0; i \u003c answerCount; i++) {","lastModifiedDate":"2021-11-01"},{"lineNumber":147,"author":{"gitId":"xRossKoh"},"content":"            jsonAnswers.add(answerList.get(i).toJsonObject());","lastModifiedDate":"2021-11-01"},{"lineNumber":148,"author":{"gitId":"xRossKoh"},"content":"        }","lastModifiedDate":"2021-11-01"},{"lineNumber":149,"author":{"gitId":"xRossKoh"},"content":"        jsonAnswerList.put(\"answerList\", jsonAnswers);","lastModifiedDate":"2021-11-01"},{"lineNumber":150,"author":{"gitId":"xRossKoh"},"content":"        jsonAnswerList.put(\"deck\", getDeck().toJsonObject());","lastModifiedDate":"2021-11-01"},{"lineNumber":151,"author":{"gitId":"xRossKoh"},"content":"        jsonAnswerList.put(\"userScore\", getUserScore());","lastModifiedDate":"2021-11-01"},{"lineNumber":152,"author":{"gitId":"xRossKoh"},"content":"        return jsonAnswerList;","lastModifiedDate":"2021-11-01"},{"lineNumber":153,"author":{"gitId":"xRossKoh"},"content":"    }","lastModifiedDate":"2021-11-01"},{"lineNumber":154,"author":{"gitId":"xkisxk"},"content":"}","lastModifiedDate":"2021-10-17"}],"authorContributionMap":{"JWweiyin":34,"ThaddeusLim99":30,"xRossKoh":38,"xkisxk":52}},{"path":"src/main/java/seedu/cardli/testing/Countdown.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"astralum"},"content":"package seedu.cardli.testing;","lastModifiedDate":"2021-10-26"},{"lineNumber":2,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":3,"author":{"gitId":"astralum"},"content":"import org.fusesource.jansi.Ansi;","lastModifiedDate":"2021-10-26"},{"lineNumber":4,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":5,"author":{"gitId":"astralum"},"content":"import java.util.Timer;","lastModifiedDate":"2021-10-25"},{"lineNumber":6,"author":{"gitId":"astralum"},"content":"import java.util.TimerTask;","lastModifiedDate":"2021-10-25"},{"lineNumber":7,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":8,"author":{"gitId":"astralum"},"content":"/**","lastModifiedDate":"2021-10-26"},{"lineNumber":9,"author":{"gitId":"astralum"},"content":" * Implements the Countdown class, which creates a timer which counts down","lastModifiedDate":"2021-10-26"},{"lineNumber":10,"author":{"gitId":"astralum"},"content":" * from the given time upon start and displays the remaining time. Once","lastModifiedDate":"2021-10-26"},{"lineNumber":11,"author":{"gitId":"astralum"},"content":" * the time runs out, displays the given message instead.","lastModifiedDate":"2021-10-26"},{"lineNumber":12,"author":{"gitId":"astralum"},"content":" */","lastModifiedDate":"2021-10-26"},{"lineNumber":13,"author":{"gitId":"astralum"},"content":"public class Countdown {","lastModifiedDate":"2021-10-25"},{"lineNumber":14,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":15,"author":{"gitId":"astralum"},"content":"    private Timer timer;","lastModifiedDate":"2021-10-26"},{"lineNumber":16,"author":{"gitId":"astralum"},"content":"    private CountdownTimerTask countdownTimerTask;","lastModifiedDate":"2021-10-25"},{"lineNumber":17,"author":{"gitId":"astralum"},"content":"    private boolean isRunning;","lastModifiedDate":"2021-10-26"},{"lineNumber":18,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":19,"author":{"gitId":"astralum"},"content":"    /**","lastModifiedDate":"2021-10-26"},{"lineNumber":20,"author":{"gitId":"astralum"},"content":"     * Constructor for the class Countdown. Creates a Countdown object","lastModifiedDate":"2021-10-26"},{"lineNumber":21,"author":{"gitId":"astralum"},"content":"     * with the given startValue and timesUpMessage to be displayed","lastModifiedDate":"2021-10-26"},{"lineNumber":22,"author":{"gitId":"astralum"},"content":"     * when the time elapsed reaches zero.","lastModifiedDate":"2021-10-26"},{"lineNumber":23,"author":{"gitId":"astralum"},"content":"     * @param startValue Value of the timer to start from","lastModifiedDate":"2021-10-26"},{"lineNumber":24,"author":{"gitId":"astralum"},"content":"     * @param timesUpMessage Message to be displayed when timer expires","lastModifiedDate":"2021-10-26"},{"lineNumber":25,"author":{"gitId":"astralum"},"content":"     */","lastModifiedDate":"2021-10-26"},{"lineNumber":26,"author":{"gitId":"astralum"},"content":"    public Countdown(int startValue, String timesUpMessage) {","lastModifiedDate":"2021-10-26"},{"lineNumber":27,"author":{"gitId":"astralum"},"content":"        this.timer \u003d new Timer();","lastModifiedDate":"2021-10-25"},{"lineNumber":28,"author":{"gitId":"astralum"},"content":"        this.countdownTimerTask \u003d new CountdownTimerTask(startValue, timesUpMessage);","lastModifiedDate":"2021-10-26"},{"lineNumber":29,"author":{"gitId":"astralum"},"content":"        this.isRunning \u003d false;","lastModifiedDate":"2021-10-25"},{"lineNumber":30,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":31,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":32,"author":{"gitId":"astralum"},"content":"    /**","lastModifiedDate":"2021-11-04"},{"lineNumber":33,"author":{"gitId":"astralum"},"content":"     * Private nested class extending a TimerTask that counts down","lastModifiedDate":"2021-11-04"},{"lineNumber":34,"author":{"gitId":"astralum"},"content":"     * and displays the timer on the standard output.","lastModifiedDate":"2021-11-04"},{"lineNumber":35,"author":{"gitId":"astralum"},"content":"     */","lastModifiedDate":"2021-11-04"},{"lineNumber":36,"author":{"gitId":"astralum"},"content":"    private class CountdownTimerTask extends TimerTask {","lastModifiedDate":"2021-10-25"},{"lineNumber":37,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":38,"author":{"gitId":"astralum"},"content":"        private int timeRemaining;","lastModifiedDate":"2021-10-26"},{"lineNumber":39,"author":{"gitId":"astralum"},"content":"        private int ticks;","lastModifiedDate":"2021-11-04"},{"lineNumber":40,"author":{"gitId":"astralum"},"content":"        private final String timesUpMessage;","lastModifiedDate":"2021-11-04"},{"lineNumber":41,"author":{"gitId":"astralum"},"content":"        private boolean willDisplay;","lastModifiedDate":"2021-11-04"},{"lineNumber":42,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":43,"author":{"gitId":"astralum"},"content":"        CountdownTimerTask(int startValue, String timesUpMessage) {","lastModifiedDate":"2021-10-26"},{"lineNumber":44,"author":{"gitId":"astralum"},"content":"            this.timeRemaining \u003d startValue;","lastModifiedDate":"2021-10-25"},{"lineNumber":45,"author":{"gitId":"astralum"},"content":"            this.ticks \u003d 0;","lastModifiedDate":"2021-11-04"},{"lineNumber":46,"author":{"gitId":"astralum"},"content":"            this.timesUpMessage \u003d timesUpMessage;","lastModifiedDate":"2021-10-26"},{"lineNumber":47,"author":{"gitId":"astralum"},"content":"            this.willDisplay \u003d false;","lastModifiedDate":"2021-11-04"},{"lineNumber":48,"author":{"gitId":"astralum"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":49,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":50,"author":{"gitId":"astralum"},"content":"        private void countDown() {","lastModifiedDate":"2021-10-25"},{"lineNumber":51,"author":{"gitId":"astralum"},"content":"            if (this.timeRemaining \u003c\u003d 0) {","lastModifiedDate":"2021-11-04"},{"lineNumber":52,"author":{"gitId":"astralum"},"content":"                Countdown.this.stop();","lastModifiedDate":"2021-11-04"},{"lineNumber":53,"author":{"gitId":"astralum"},"content":"                return;","lastModifiedDate":"2021-11-04"},{"lineNumber":54,"author":{"gitId":"astralum"},"content":"            }","lastModifiedDate":"2021-11-04"},{"lineNumber":55,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":56,"author":{"gitId":"astralum"},"content":"            this.ticks \u003d (this.ticks \u003c 10) ? (this.ticks + 1) : 0;","lastModifiedDate":"2021-11-04"},{"lineNumber":57,"author":{"gitId":"astralum"},"content":"            // update timeRemaining when 1s has passed","lastModifiedDate":"2021-11-04"},{"lineNumber":58,"author":{"gitId":"astralum"},"content":"            this.timeRemaining \u003d (this.ticks \u003d\u003d 10)","lastModifiedDate":"2021-11-04"},{"lineNumber":59,"author":{"gitId":"astralum"},"content":"                    ? (this.timeRemaining - 1) : this.timeRemaining;","lastModifiedDate":"2021-11-04"},{"lineNumber":60,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":61,"author":{"gitId":"astralum"},"content":"            if (this.ticks \u003e 0) {","lastModifiedDate":"2021-11-04"},{"lineNumber":62,"author":{"gitId":"astralum"},"content":"                // allow Countdown to start displaying after 0.1s since start()","lastModifiedDate":"2021-11-04"},{"lineNumber":63,"author":{"gitId":"astralum"},"content":"                // this allows some synchronous tasks called after to complete first","lastModifiedDate":"2021-11-04"},{"lineNumber":64,"author":{"gitId":"astralum"},"content":"                this.willDisplay \u003d true;","lastModifiedDate":"2021-11-04"},{"lineNumber":65,"author":{"gitId":"astralum"},"content":"            }","lastModifiedDate":"2021-10-25"},{"lineNumber":66,"author":{"gitId":"astralum"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":67,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":68,"author":{"gitId":"astralum"},"content":"        private void display() {","lastModifiedDate":"2021-10-25"},{"lineNumber":69,"author":{"gitId":"astralum"},"content":"            if (!this.willDisplay) {","lastModifiedDate":"2021-11-04"},{"lineNumber":70,"author":{"gitId":"astralum"},"content":"                // do not display","lastModifiedDate":"2021-11-04"},{"lineNumber":71,"author":{"gitId":"astralum"},"content":"                return;","lastModifiedDate":"2021-10-25"},{"lineNumber":72,"author":{"gitId":"astralum"},"content":"            }","lastModifiedDate":"2021-10-25"},{"lineNumber":73,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":74,"author":{"gitId":"astralum"},"content":"            String displayed \u003d (this.timeRemaining \u003d\u003d 0) ? this.timesUpMessage","lastModifiedDate":"2021-10-26"},{"lineNumber":75,"author":{"gitId":"astralum"},"content":"                    : \"Time remaining: \" + this.timeRemaining;","lastModifiedDate":"2021-10-26"},{"lineNumber":76,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":77,"author":{"gitId":"astralum"},"content":"            Ansi ansi \u003d Ansi.ansi()","lastModifiedDate":"2021-10-26"},{"lineNumber":78,"author":{"gitId":"astralum"},"content":"                    .saveCursorPosition()","lastModifiedDate":"2021-10-26"},{"lineNumber":79,"author":{"gitId":"astralum"},"content":"                    .cursorUpLine()","lastModifiedDate":"2021-10-26"},{"lineNumber":80,"author":{"gitId":"astralum"},"content":"                    .cursorToColumn(1)","lastModifiedDate":"2021-10-26"},{"lineNumber":81,"author":{"gitId":"astralum"},"content":"                    .eraseLine()","lastModifiedDate":"2021-10-26"},{"lineNumber":82,"author":{"gitId":"astralum"},"content":"                    .append(displayed)","lastModifiedDate":"2021-10-26"},{"lineNumber":83,"author":{"gitId":"astralum"},"content":"                    .restoreCursorPosition();","lastModifiedDate":"2021-10-26"},{"lineNumber":84,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":85,"author":{"gitId":"astralum"},"content":"            System.out.print(ansi);","lastModifiedDate":"2021-10-26"},{"lineNumber":86,"author":{"gitId":"astralum"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":87,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":88,"author":{"gitId":"astralum"},"content":"        /**","lastModifiedDate":"2021-10-26"},{"lineNumber":89,"author":{"gitId":"astralum"},"content":"         * Starts the TimerTask. Displays a countdown starting","lastModifiedDate":"2021-10-26"},{"lineNumber":90,"author":{"gitId":"astralum"},"content":"         * from the initialised time.","lastModifiedDate":"2021-10-26"},{"lineNumber":91,"author":{"gitId":"astralum"},"content":"         */","lastModifiedDate":"2021-10-26"},{"lineNumber":92,"author":{"gitId":"astralum"},"content":"        @Override","lastModifiedDate":"2021-10-25"},{"lineNumber":93,"author":{"gitId":"astralum"},"content":"        public void run() {","lastModifiedDate":"2021-10-25"},{"lineNumber":94,"author":{"gitId":"astralum"},"content":"            display();","lastModifiedDate":"2021-10-25"},{"lineNumber":95,"author":{"gitId":"astralum"},"content":"            countDown();","lastModifiedDate":"2021-10-25"},{"lineNumber":96,"author":{"gitId":"astralum"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":97,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":98,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":99,"author":{"gitId":"astralum"},"content":"    /**","lastModifiedDate":"2021-10-26"},{"lineNumber":100,"author":{"gitId":"astralum"},"content":"     * Starts the timer with the initialised countdown value.","lastModifiedDate":"2021-10-26"},{"lineNumber":101,"author":{"gitId":"astralum"},"content":"     * Displays the countdown in the standard output.","lastModifiedDate":"2021-10-26"},{"lineNumber":102,"author":{"gitId":"astralum"},"content":"     */","lastModifiedDate":"2021-10-26"},{"lineNumber":103,"author":{"gitId":"astralum"},"content":"    public void start() {","lastModifiedDate":"2021-10-25"},{"lineNumber":104,"author":{"gitId":"astralum"},"content":"        this.isRunning \u003d true;","lastModifiedDate":"2021-10-25"},{"lineNumber":105,"author":{"gitId":"astralum"},"content":"        int delay \u003d 0;","lastModifiedDate":"2021-10-25"},{"lineNumber":106,"author":{"gitId":"astralum"},"content":"        int period \u003d 100; // repeat at intervals of 0.1s","lastModifiedDate":"2021-11-04"},{"lineNumber":107,"author":{"gitId":"astralum"},"content":"        timer.scheduleAtFixedRate(this.countdownTimerTask, delay, period);","lastModifiedDate":"2021-10-25"},{"lineNumber":108,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":109,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":110,"author":{"gitId":"astralum"},"content":"    /**","lastModifiedDate":"2021-11-04"},{"lineNumber":111,"author":{"gitId":"astralum"},"content":"     * Stops the timer. The timer will no longer run or display.","lastModifiedDate":"2021-11-04"},{"lineNumber":112,"author":{"gitId":"astralum"},"content":"     */","lastModifiedDate":"2021-11-04"},{"lineNumber":113,"author":{"gitId":"astralum"},"content":"    public void stop() {","lastModifiedDate":"2021-10-25"},{"lineNumber":114,"author":{"gitId":"astralum"},"content":"        this.isRunning \u003d false;","lastModifiedDate":"2021-10-25"},{"lineNumber":115,"author":{"gitId":"astralum"},"content":"        timer.cancel();","lastModifiedDate":"2021-10-25"},{"lineNumber":116,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":117,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":118,"author":{"gitId":"astralum"},"content":"    /**","lastModifiedDate":"2021-11-04"},{"lineNumber":119,"author":{"gitId":"astralum"},"content":"     * Returns the status of the timer, namely whether it is","lastModifiedDate":"2021-11-04"},{"lineNumber":120,"author":{"gitId":"astralum"},"content":"     * running or not.","lastModifiedDate":"2021-11-04"},{"lineNumber":121,"author":{"gitId":"astralum"},"content":"     * @return true if the timer is running, false if not","lastModifiedDate":"2021-11-04"},{"lineNumber":122,"author":{"gitId":"astralum"},"content":"     */","lastModifiedDate":"2021-11-04"},{"lineNumber":123,"author":{"gitId":"astralum"},"content":"    public boolean isRunning() {","lastModifiedDate":"2021-10-26"},{"lineNumber":124,"author":{"gitId":"astralum"},"content":"        return this.isRunning;","lastModifiedDate":"2021-10-26"},{"lineNumber":125,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":126,"author":{"gitId":"astralum"},"content":"}","lastModifiedDate":"2021-10-25"}],"authorContributionMap":{"astralum":126}},{"path":"src/main/java/seedu/cardli/testing/TestHistory.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"xRossKoh"},"content":"package seedu.cardli.testing;","lastModifiedDate":"2021-10-26"},{"lineNumber":2,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":3,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":4,"author":{"gitId":"xkisxk"},"content":"import seedu.cardli.exceptions.DeckNotExistException;","lastModifiedDate":"2021-11-03"},{"lineNumber":5,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.flashcard.Deck;","lastModifiedDate":"2021-10-26"},{"lineNumber":6,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.flashcard.DeckManager;","lastModifiedDate":"2021-10-26"},{"lineNumber":7,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.flashcard.FlashCard;","lastModifiedDate":"2021-10-26"},{"lineNumber":8,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":9,"author":{"gitId":"xkisxk"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-17"},{"lineNumber":10,"author":{"gitId":"xkisxk"},"content":"import java.util.logging.Level;","lastModifiedDate":"2021-10-17"},{"lineNumber":11,"author":{"gitId":"xkisxk"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-10-17"},{"lineNumber":12,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":13,"author":{"gitId":"xkisxk"},"content":"/**","lastModifiedDate":"2021-10-17"},{"lineNumber":14,"author":{"gitId":"xkisxk"},"content":" * TestHistory keeps track of all answerResponses from previous tests.","lastModifiedDate":"2021-10-17"},{"lineNumber":15,"author":{"gitId":"xkisxk"},"content":" */","lastModifiedDate":"2021-10-17"},{"lineNumber":16,"author":{"gitId":"xkisxk"},"content":"public class TestHistory {","lastModifiedDate":"2021-10-17"},{"lineNumber":17,"author":{"gitId":"xRossKoh"},"content":"    private final ArrayList\u003cAnswerList\u003e testHistory;","lastModifiedDate":"2021-10-25"},{"lineNumber":18,"author":{"gitId":"xkisxk"},"content":"    private final Logger logger \u003d Logger.getLogger(TestManager.class.getName());","lastModifiedDate":"2021-10-24"},{"lineNumber":19,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":20,"author":{"gitId":"xkisxk"},"content":"    private final DeckManager deckManager;","lastModifiedDate":"2021-10-24"},{"lineNumber":21,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":22,"author":{"gitId":"astralum"},"content":"    public TestHistory(DeckManager deckManager) {","lastModifiedDate":"2021-10-23"},{"lineNumber":23,"author":{"gitId":"xRossKoh"},"content":"        this.testHistory \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-25"},{"lineNumber":24,"author":{"gitId":"astralum"},"content":"        this.deckManager \u003d deckManager;","lastModifiedDate":"2021-10-23"},{"lineNumber":25,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":26,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":27,"author":{"gitId":"xRossKoh"},"content":"    public TestHistory(DeckManager deckManager, ArrayList\u003cAnswerList\u003e testHistory) {","lastModifiedDate":"2021-10-25"},{"lineNumber":28,"author":{"gitId":"xRossKoh"},"content":"        this.testHistory \u003d testHistory;","lastModifiedDate":"2021-10-25"},{"lineNumber":29,"author":{"gitId":"astralum"},"content":"        this.deckManager \u003d deckManager;","lastModifiedDate":"2021-10-23"},{"lineNumber":30,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":31,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":32,"author":{"gitId":"astralum"},"content":"    public void addAnswerList(AnswerList answerList) {","lastModifiedDate":"2021-10-23"},{"lineNumber":33,"author":{"gitId":"xkisxk"},"content":"        testHistory.add(answerList);","lastModifiedDate":"2021-10-17"},{"lineNumber":34,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":35,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":36,"author":{"gitId":"xkisxk"},"content":"    /**","lastModifiedDate":"2021-10-17"},{"lineNumber":37,"author":{"gitId":"xkisxk"},"content":"     * View overall result statistics of all or a single flashcards.","lastModifiedDate":"2021-10-25"},{"lineNumber":38,"author":{"gitId":"xkisxk"},"content":"     *","lastModifiedDate":"2021-10-25"},{"lineNumber":39,"author":{"gitId":"xkisxk"},"content":"     * @return FlashCardStats as a string","lastModifiedDate":"2021-10-25"},{"lineNumber":40,"author":{"gitId":"xkisxk"},"content":"     */","lastModifiedDate":"2021-10-17"},{"lineNumber":41,"author":{"gitId":"xkisxk"},"content":"    public String viewAllFlashcardStats() {","lastModifiedDate":"2021-10-25"},{"lineNumber":42,"author":{"gitId":"xkisxk"},"content":"        logger.setLevel(Level.WARNING);","lastModifiedDate":"2021-10-17"},{"lineNumber":43,"author":{"gitId":"xkisxk"},"content":"        logger.log(Level.INFO, \"listing all flashcard stats\");","lastModifiedDate":"2021-10-17"},{"lineNumber":44,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":45,"author":{"gitId":"astralum"},"content":"        assert deckManager.getDecks().size() \u003e 0 : \"deckList must not be empty\";","lastModifiedDate":"2021-10-23"},{"lineNumber":46,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":47,"author":{"gitId":"xkisxk"},"content":"        String result \u003d \"Listing total scores of flashcards for all tests:\\n\";","lastModifiedDate":"2021-10-25"},{"lineNumber":48,"author":{"gitId":"astralum"},"content":"        for (Deck deck : deckManager.getDecks()) {","lastModifiedDate":"2021-10-23"},{"lineNumber":49,"author":{"gitId":"xkisxk"},"content":"            for (FlashCard card : deck.getCards()) {","lastModifiedDate":"2021-10-24"},{"lineNumber":50,"author":{"gitId":"xkisxk"},"content":"                result \u003d result.concat(card.returnFlashCard() + \"\\nScore: \" + card.getUserScore()","lastModifiedDate":"2021-11-03"},{"lineNumber":51,"author":{"gitId":"xkisxk"},"content":"                        + \" out of \" + card.getTotalScore()","lastModifiedDate":"2021-11-03"},{"lineNumber":52,"author":{"gitId":"xkisxk"},"content":"                        + \"\\n\");","lastModifiedDate":"2021-10-25"},{"lineNumber":53,"author":{"gitId":"xkisxk"},"content":"            }","lastModifiedDate":"2021-10-17"},{"lineNumber":54,"author":{"gitId":"xkisxk"},"content":"        }","lastModifiedDate":"2021-10-17"},{"lineNumber":55,"author":{"gitId":"xkisxk"},"content":"        return result;","lastModifiedDate":"2021-10-25"},{"lineNumber":56,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":57,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":58,"author":{"gitId":"xkisxk"},"content":"    public String prepareViewTest(int index) throws DeckNotExistException {","lastModifiedDate":"2021-11-03"},{"lineNumber":59,"author":{"gitId":"xkisxk"},"content":"        if (index \u003d\u003d -1) {","lastModifiedDate":"2021-10-25"},{"lineNumber":60,"author":{"gitId":"xkisxk"},"content":"            return viewTests();","lastModifiedDate":"2021-10-25"},{"lineNumber":61,"author":{"gitId":"xkisxk"},"content":"        } else {","lastModifiedDate":"2021-10-25"},{"lineNumber":62,"author":{"gitId":"xkisxk"},"content":"            return viewTestByIndex(index);","lastModifiedDate":"2021-10-25"},{"lineNumber":63,"author":{"gitId":"xkisxk"},"content":"        }","lastModifiedDate":"2021-10-17"},{"lineNumber":64,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":65,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":66,"author":{"gitId":"xkisxk"},"content":"    /**","lastModifiedDate":"2021-10-19"},{"lineNumber":67,"author":{"gitId":"xkisxk"},"content":"     * Views the results of a test given the index.","lastModifiedDate":"2021-10-19"},{"lineNumber":68,"author":{"gitId":"xkisxk"},"content":"     * Gives the raw score, followed by the percentage.","lastModifiedDate":"2021-10-19"},{"lineNumber":69,"author":{"gitId":"xkisxk"},"content":"     *","lastModifiedDate":"2021-10-19"},{"lineNumber":70,"author":{"gitId":"xkisxk"},"content":"     * @param index index of the test","lastModifiedDate":"2021-10-19"},{"lineNumber":71,"author":{"gitId":"xkisxk"},"content":"     * @return that test as string","lastModifiedDate":"2021-10-25"},{"lineNumber":72,"author":{"gitId":"xkisxk"},"content":"     */","lastModifiedDate":"2021-10-19"},{"lineNumber":73,"author":{"gitId":"xkisxk"},"content":"    public String viewTestByIndex(int index) {","lastModifiedDate":"2021-10-25"},{"lineNumber":74,"author":{"gitId":"xkisxk"},"content":"        AnswerList answerList \u003d testHistory.get(index);","lastModifiedDate":"2021-10-17"},{"lineNumber":75,"author":{"gitId":"xkisxk"},"content":"        int score \u003d answerList.getUserScore();","lastModifiedDate":"2021-10-21"},{"lineNumber":76,"author":{"gitId":"xkisxk"},"content":"        int totalScore \u003d answerList.getSize();","lastModifiedDate":"2021-10-17"},{"lineNumber":77,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":78,"author":{"gitId":"xkisxk"},"content":"        double percentage \u003d (double) score / totalScore * 100;","lastModifiedDate":"2021-10-31"},{"lineNumber":79,"author":{"gitId":"xkisxk"},"content":"        String percentageAsString \u003d String.format(\"%.2f\", percentage);","lastModifiedDate":"2021-10-31"},{"lineNumber":80,"author":{"gitId":"xkisxk"},"content":"        String result \u003d \"For test \" + (index + 1) + \": \" + answerList.getDeck().getName()","lastModifiedDate":"2021-10-31"},{"lineNumber":81,"author":{"gitId":"xkisxk"},"content":"                + \"\\nYou scored \" + score + \" out of \" + totalScore","lastModifiedDate":"2021-10-31"},{"lineNumber":82,"author":{"gitId":"xkisxk"},"content":"                + \"\\nThat is \" + percentageAsString + \"%!\";","lastModifiedDate":"2021-10-31"},{"lineNumber":83,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":84,"author":{"gitId":"xkisxk"},"content":"        return result;","lastModifiedDate":"2021-10-25"},{"lineNumber":85,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":86,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":87,"author":{"gitId":"xkisxk"},"content":"    /**","lastModifiedDate":"2021-10-19"},{"lineNumber":88,"author":{"gitId":"xkisxk"},"content":"     * Views the results of the tests in order of all the tests taken.","lastModifiedDate":"2021-10-19"},{"lineNumber":89,"author":{"gitId":"xkisxk"},"content":"     * Gives the raw score, followed by the percentage.","lastModifiedDate":"2021-10-19"},{"lineNumber":90,"author":{"gitId":"xkisxk"},"content":"     *","lastModifiedDate":"2021-10-19"},{"lineNumber":91,"author":{"gitId":"xkisxk"},"content":"     * @return all the tests as a string","lastModifiedDate":"2021-10-25"},{"lineNumber":92,"author":{"gitId":"xkisxk"},"content":"     */","lastModifiedDate":"2021-10-19"},{"lineNumber":93,"author":{"gitId":"xkisxk"},"content":"    public String viewTests() throws DeckNotExistException {","lastModifiedDate":"2021-11-03"},{"lineNumber":94,"author":{"gitId":"xkisxk"},"content":"        String result \u003d \"\";","lastModifiedDate":"2021-10-25"},{"lineNumber":95,"author":{"gitId":"xkisxk"},"content":"        if (testHistory.size() \u003c\u003d 0) {","lastModifiedDate":"2021-10-25"},{"lineNumber":96,"author":{"gitId":"xkisxk"},"content":"            throw new DeckNotExistException(\"You have not taken any tests.\");","lastModifiedDate":"2021-11-03"},{"lineNumber":97,"author":{"gitId":"xkisxk"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":98,"author":{"gitId":"xkisxk"},"content":"        int index \u003d 1;","lastModifiedDate":"2021-10-17"},{"lineNumber":99,"author":{"gitId":"xkisxk"},"content":"        result \u003d result.concat(\"These are your scores:\\n\");","lastModifiedDate":"2021-11-03"},{"lineNumber":100,"author":{"gitId":"xkisxk"},"content":"        for (AnswerList answerList : testHistory) {","lastModifiedDate":"2021-10-17"},{"lineNumber":101,"author":{"gitId":"xkisxk"},"content":"            int score \u003d answerList.getUserScore();","lastModifiedDate":"2021-10-25"},{"lineNumber":102,"author":{"gitId":"xkisxk"},"content":"            int totalScore \u003d answerList.getSize();","lastModifiedDate":"2021-10-25"},{"lineNumber":103,"author":{"gitId":"xkisxk"},"content":"            double percentage \u003d (double) score / totalScore * 100;","lastModifiedDate":"2021-10-31"},{"lineNumber":104,"author":{"gitId":"xkisxk"},"content":"            String percentageAsString \u003d String.format(\"%.2f\", percentage);","lastModifiedDate":"2021-10-31"},{"lineNumber":105,"author":{"gitId":"xkisxk"},"content":"            result \u003d result.concat(","lastModifiedDate":"2021-10-25"},{"lineNumber":106,"author":{"gitId":"xkisxk"},"content":"                    \"Score for test \" + index + \": \" + answerList.getDeck().getName()","lastModifiedDate":"2021-10-25"},{"lineNumber":107,"author":{"gitId":"xkisxk"},"content":"                            + \" \" + score + \"/\" + totalScore","lastModifiedDate":"2021-10-25"},{"lineNumber":108,"author":{"gitId":"xkisxk"},"content":"                            + \" \" + percentageAsString + \"%\\n\");","lastModifiedDate":"2021-10-31"},{"lineNumber":109,"author":{"gitId":"xkisxk"},"content":"            index++;","lastModifiedDate":"2021-10-17"},{"lineNumber":110,"author":{"gitId":"xkisxk"},"content":"        }","lastModifiedDate":"2021-10-17"},{"lineNumber":111,"author":{"gitId":"xkisxk"},"content":"        return result;","lastModifiedDate":"2021-10-25"},{"lineNumber":112,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":113,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":114,"author":{"gitId":"JWweiyin"},"content":"    public ArrayList\u003cAnswerList\u003e getTestHistory() {","lastModifiedDate":"2021-11-06"},{"lineNumber":115,"author":{"gitId":"JWweiyin"},"content":"        return testHistory;","lastModifiedDate":"2021-11-06"},{"lineNumber":116,"author":{"gitId":"JWweiyin"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":117,"author":{"gitId":"xkisxk"},"content":"}","lastModifiedDate":"2021-10-17"}],"authorContributionMap":{"JWweiyin":7,"astralum":11,"xRossKoh":8,"xkisxk":91}},{"path":"src/main/java/seedu/cardli/testing/TestManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"xRossKoh"},"content":"package seedu.cardli.testing;","lastModifiedDate":"2021-10-26"},{"lineNumber":2,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":3,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.exceptions.EmptyDeckException;","lastModifiedDate":"2021-10-26"},{"lineNumber":4,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.exceptions.FieldEmptyException;","lastModifiedDate":"2021-10-26"},{"lineNumber":5,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.flashcard.DeckManager;","lastModifiedDate":"2021-10-26"},{"lineNumber":6,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.parser.TestParser;","lastModifiedDate":"2021-10-26"},{"lineNumber":7,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.ui.TestUi;","lastModifiedDate":"2021-10-26"},{"lineNumber":8,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.flashcard.Deck;","lastModifiedDate":"2021-10-26"},{"lineNumber":9,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.flashcard.FlashCard;","lastModifiedDate":"2021-10-26"},{"lineNumber":10,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":11,"author":{"gitId":"xRossKoh"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-18"},{"lineNumber":12,"author":{"gitId":"xRossKoh"},"content":"import java.util.Collections;","lastModifiedDate":"2021-10-18"},{"lineNumber":13,"author":{"gitId":"ThaddeusLim99"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-10-10"},{"lineNumber":14,"author":{"gitId":"ThaddeusLim99"},"content":"import java.util.logging.Level;","lastModifiedDate":"2021-10-10"},{"lineNumber":15,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":16,"author":{"gitId":"xkisxk"},"content":"import static seedu.cardli.ui.TestUi.END_REVIEW_MESSAGE;","lastModifiedDate":"2021-11-03"},{"lineNumber":17,"author":{"gitId":"xkisxk"},"content":"import static seedu.cardli.ui.TestUi.END_TEST_MESSAGE;","lastModifiedDate":"2021-11-03"},{"lineNumber":18,"author":{"gitId":"xkisxk"},"content":"import static seedu.cardli.ui.TestUi.INCORRECT_INPUT_FORMAT_MESSAGE;","lastModifiedDate":"2021-11-03"},{"lineNumber":19,"author":{"gitId":"xkisxk"},"content":"import static seedu.cardli.ui.TestUi.NO_CARDS_TO_REVIEW_MESSAGE;","lastModifiedDate":"2021-11-03"},{"lineNumber":20,"author":{"gitId":"xkisxk"},"content":"import static seedu.cardli.ui.TestUi.NO_CARDS_TO_TEST_MESSAGE;","lastModifiedDate":"2021-11-03"},{"lineNumber":21,"author":{"gitId":"xkisxk"},"content":"import static seedu.cardli.ui.TestUi.TIMES_UP_MESSAGE;","lastModifiedDate":"2021-11-03"},{"lineNumber":22,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":23,"author":{"gitId":"xRossKoh"},"content":"/**","lastModifiedDate":"2021-10-06"},{"lineNumber":24,"author":{"gitId":"xRossKoh"},"content":" * Implements the test function.","lastModifiedDate":"2021-10-06"},{"lineNumber":25,"author":{"gitId":"xRossKoh"},"content":" */","lastModifiedDate":"2021-10-06"},{"lineNumber":26,"author":{"gitId":"ThaddeusLim99"},"content":"public class TestManager {","lastModifiedDate":"2021-10-04"},{"lineNumber":27,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":28,"author":{"gitId":"astralum"},"content":"    private static final int TIME_PER_QUESTION \u003d 15;","lastModifiedDate":"2021-11-04"},{"lineNumber":29,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":30,"author":{"gitId":"astralum"},"content":"    private static final String EMPTY_ANSWER \u003d \"\";","lastModifiedDate":"2021-11-07"},{"lineNumber":31,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":32,"author":{"gitId":"xkisxk"},"content":"    private final TestUi ui;","lastModifiedDate":"2021-11-03"},{"lineNumber":33,"author":{"gitId":"astralum"},"content":"    private final Logger logger \u003d Logger.getLogger(TestManager.class.getName());","lastModifiedDate":"2021-10-21"},{"lineNumber":34,"author":{"gitId":"xkisxk"},"content":"    private final TestHistory testHistory;","lastModifiedDate":"2021-10-24"},{"lineNumber":35,"author":{"gitId":"xkisxk"},"content":"    private final DeckManager deckManager;","lastModifiedDate":"2021-10-24"},{"lineNumber":36,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":37,"author":{"gitId":"xkisxk"},"content":"    public TestManager(TestHistory testHistory, DeckManager deckManager) {","lastModifiedDate":"2021-10-25"},{"lineNumber":38,"author":{"gitId":"astralum"},"content":"        this.logger.setLevel(Level.WARNING);","lastModifiedDate":"2021-10-26"},{"lineNumber":39,"author":{"gitId":"xkisxk"},"content":"        this.testHistory \u003d testHistory;","lastModifiedDate":"2021-10-25"},{"lineNumber":40,"author":{"gitId":"xkisxk"},"content":"        this.deckManager \u003d deckManager;","lastModifiedDate":"2021-10-24"},{"lineNumber":41,"author":{"gitId":"xkisxk"},"content":"        this.ui \u003d new TestUi();","lastModifiedDate":"2021-11-03"},{"lineNumber":42,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":43,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":44,"author":{"gitId":"xkisxk"},"content":"    public TestManager(TestHistory testHistory, DeckManager deckManager, TestUi ui) {","lastModifiedDate":"2021-11-03"},{"lineNumber":45,"author":{"gitId":"xkisxk"},"content":"        this.logger.setLevel(Level.WARNING);","lastModifiedDate":"2021-11-03"},{"lineNumber":46,"author":{"gitId":"xkisxk"},"content":"        this.testHistory \u003d testHistory;","lastModifiedDate":"2021-11-03"},{"lineNumber":47,"author":{"gitId":"xkisxk"},"content":"        this.deckManager \u003d deckManager;","lastModifiedDate":"2021-11-03"},{"lineNumber":48,"author":{"gitId":"xkisxk"},"content":"        this.ui \u003d ui;","lastModifiedDate":"2021-11-03"},{"lineNumber":49,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":50,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":51,"author":{"gitId":"xkisxk"},"content":"    /**","lastModifiedDate":"2021-10-24"},{"lineNumber":52,"author":{"gitId":"xkisxk"},"content":"     * Enters test mode and requires user to input the index of the deck that they want to be tested.","lastModifiedDate":"2021-10-24"},{"lineNumber":53,"author":{"gitId":"xkisxk"},"content":"     * If the input is \"all\", all decks will be tested. If the input is an integer, the deck at","lastModifiedDate":"2021-10-24"},{"lineNumber":54,"author":{"gitId":"xkisxk"},"content":"     * that index will be tested.","lastModifiedDate":"2021-10-24"},{"lineNumber":55,"author":{"gitId":"xkisxk"},"content":"     *","lastModifiedDate":"2021-11-03"},{"lineNumber":56,"author":{"gitId":"xkisxk"},"content":"     * @return end test message","lastModifiedDate":"2021-11-03"},{"lineNumber":57,"author":{"gitId":"xkisxk"},"content":"     */","lastModifiedDate":"2021-10-24"},{"lineNumber":58,"author":{"gitId":"xkisxk"},"content":"    public String startTest() {","lastModifiedDate":"2021-11-03"},{"lineNumber":59,"author":{"gitId":"xkisxk"},"content":"        logger.setLevel(Level.SEVERE);","lastModifiedDate":"2021-10-31"},{"lineNumber":60,"author":{"gitId":"xkisxk"},"content":"        logger.log(Level.INFO, \"starting test\");","lastModifiedDate":"2021-10-24"},{"lineNumber":61,"author":{"gitId":"xkisxk"},"content":"        ui.printStartTest();","lastModifiedDate":"2021-10-24"},{"lineNumber":62,"author":{"gitId":"xkisxk"},"content":"        String input \u003d ui.getUserMessage();","lastModifiedDate":"2021-10-24"},{"lineNumber":63,"author":{"gitId":"xkisxk"},"content":"        try {","lastModifiedDate":"2021-10-24"},{"lineNumber":64,"author":{"gitId":"xkisxk"},"content":"            logger.log(Level.INFO, \"choosing deck to test\");","lastModifiedDate":"2021-10-24"},{"lineNumber":65,"author":{"gitId":"xkisxk"},"content":"            int deckIndex \u003d TestParser.toInt(input);","lastModifiedDate":"2021-10-24"},{"lineNumber":66,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":67,"author":{"gitId":"xkisxk"},"content":"            Deck deckToTest \u003d deckManager.getTestDeck(deckIndex);","lastModifiedDate":"2021-10-24"},{"lineNumber":68,"author":{"gitId":"xkisxk"},"content":"            AnswerList userAnswers \u003d new AnswerList(deckToTest);","lastModifiedDate":"2021-10-24"},{"lineNumber":69,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":70,"author":{"gitId":"xkisxk"},"content":"            ArrayList\u003cFlashCard\u003e shuffledDeck \u003d prepareTestDeck(userAnswers);","lastModifiedDate":"2021-11-03"},{"lineNumber":71,"author":{"gitId":"xkisxk"},"content":"            testInProgress(shuffledDeck, userAnswers);","lastModifiedDate":"2021-11-03"},{"lineNumber":72,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":73,"author":{"gitId":"xkisxk"},"content":"            markTest(userAnswers);","lastModifiedDate":"2021-10-24"},{"lineNumber":74,"author":{"gitId":"xkisxk"},"content":"            testHistory.addAnswerList(userAnswers);","lastModifiedDate":"2021-10-24"},{"lineNumber":75,"author":{"gitId":"xkisxk"},"content":"            return END_TEST_MESSAGE;","lastModifiedDate":"2021-11-03"},{"lineNumber":76,"author":{"gitId":"xkisxk"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2021-10-24"},{"lineNumber":77,"author":{"gitId":"xkisxk"},"content":"            ui.showMessage(INCORRECT_INPUT_FORMAT_MESSAGE);","lastModifiedDate":"2021-11-03"},{"lineNumber":78,"author":{"gitId":"xkisxk"},"content":"            logger.log(Level.WARNING, \"Incorrect format causing NumberFormatException\");","lastModifiedDate":"2021-10-24"},{"lineNumber":79,"author":{"gitId":"xkisxk"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2021-10-24"},{"lineNumber":80,"author":{"gitId":"xkisxk"},"content":"            ui.showMessage(e.getMessage());","lastModifiedDate":"2021-10-24"},{"lineNumber":81,"author":{"gitId":"xkisxk"},"content":"            logger.log(Level.WARNING, \"Deck does not exist causing IndexOutOfBoundsException\");","lastModifiedDate":"2021-10-24"},{"lineNumber":82,"author":{"gitId":"xkisxk"},"content":"        } catch (EmptyDeckException e) {","lastModifiedDate":"2021-10-24"},{"lineNumber":83,"author":{"gitId":"xkisxk"},"content":"            ui.showMessage(e.getMessage());","lastModifiedDate":"2021-10-24"},{"lineNumber":84,"author":{"gitId":"xkisxk"},"content":"            logger.log(Level.WARNING, \"Empty deck\");","lastModifiedDate":"2021-10-24"},{"lineNumber":85,"author":{"gitId":"xkisxk"},"content":"        }","lastModifiedDate":"2021-10-24"},{"lineNumber":86,"author":{"gitId":"JWweiyin"},"content":"        return EMPTY_ANSWER;","lastModifiedDate":"2021-11-07"},{"lineNumber":87,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":88,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":89,"author":{"gitId":"xkisxk"},"content":"    /**","lastModifiedDate":"2021-10-24"},{"lineNumber":90,"author":{"gitId":"xkisxk"},"content":"     * Enters review mode and requires user to input the index of the deck that they want to be reviewed.","lastModifiedDate":"2021-10-24"},{"lineNumber":91,"author":{"gitId":"xkisxk"},"content":"     * If the input is \"all\", the cards will come from all decks. If the input is an integer, only cards from","lastModifiedDate":"2021-10-24"},{"lineNumber":92,"author":{"gitId":"xkisxk"},"content":"     * the deck at that index will be tested.","lastModifiedDate":"2021-10-24"},{"lineNumber":93,"author":{"gitId":"xkisxk"},"content":"     *","lastModifiedDate":"2021-11-03"},{"lineNumber":94,"author":{"gitId":"xkisxk"},"content":"     * @return end review message","lastModifiedDate":"2021-11-03"},{"lineNumber":95,"author":{"gitId":"xkisxk"},"content":"     */","lastModifiedDate":"2021-10-24"},{"lineNumber":96,"author":{"gitId":"xkisxk"},"content":"    public String startReview() {","lastModifiedDate":"2021-11-03"},{"lineNumber":97,"author":{"gitId":"xkisxk"},"content":"        logger.setLevel(Level.SEVERE);","lastModifiedDate":"2021-10-31"},{"lineNumber":98,"author":{"gitId":"xkisxk"},"content":"        logger.log(Level.INFO, \"starting review\");","lastModifiedDate":"2021-10-24"},{"lineNumber":99,"author":{"gitId":"xkisxk"},"content":"        ui.printStartReview();","lastModifiedDate":"2021-10-24"},{"lineNumber":100,"author":{"gitId":"xkisxk"},"content":"        String input \u003d ui.getUserMessage();","lastModifiedDate":"2021-10-24"},{"lineNumber":101,"author":{"gitId":"xkisxk"},"content":"        try {","lastModifiedDate":"2021-10-24"},{"lineNumber":102,"author":{"gitId":"xkisxk"},"content":"            logger.log(Level.INFO, \"choosing deck to test\");","lastModifiedDate":"2021-10-24"},{"lineNumber":103,"author":{"gitId":"xkisxk"},"content":"            int deckIndex \u003d TestParser.toInt(input);","lastModifiedDate":"2021-10-24"},{"lineNumber":104,"author":{"gitId":"xkisxk"},"content":"            Deck deckToReview \u003d deckManager.getLowScoringCards(deckIndex);","lastModifiedDate":"2021-10-26"},{"lineNumber":105,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":106,"author":{"gitId":"xkisxk"},"content":"            logger.log(Level.INFO, \"Reviewing low scoring cards\");","lastModifiedDate":"2021-11-03"},{"lineNumber":107,"author":{"gitId":"xkisxk"},"content":"            AnswerList answerList \u003d new AnswerList(deckToReview);","lastModifiedDate":"2021-11-03"},{"lineNumber":108,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":109,"author":{"gitId":"xkisxk"},"content":"            ArrayList\u003cFlashCard\u003e shuffledDeck \u003d prepareTestDeck(answerList);","lastModifiedDate":"2021-11-03"},{"lineNumber":110,"author":{"gitId":"xkisxk"},"content":"            testInProgress(shuffledDeck, answerList);","lastModifiedDate":"2021-11-03"},{"lineNumber":111,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":112,"author":{"gitId":"xkisxk"},"content":"            markTest(answerList);","lastModifiedDate":"2021-11-03"},{"lineNumber":113,"author":{"gitId":"xkisxk"},"content":"            testHistory.addAnswerList(answerList);","lastModifiedDate":"2021-11-03"},{"lineNumber":114,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":115,"author":{"gitId":"xkisxk"},"content":"            return END_REVIEW_MESSAGE;","lastModifiedDate":"2021-11-03"},{"lineNumber":116,"author":{"gitId":"xkisxk"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2021-10-24"},{"lineNumber":117,"author":{"gitId":"xkisxk"},"content":"            ui.showMessage(INCORRECT_INPUT_FORMAT_MESSAGE);","lastModifiedDate":"2021-11-03"},{"lineNumber":118,"author":{"gitId":"xkisxk"},"content":"            logger.log(Level.WARNING, \"Incorrect format causing NumberFormatException\");","lastModifiedDate":"2021-10-24"},{"lineNumber":119,"author":{"gitId":"xkisxk"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2021-10-24"},{"lineNumber":120,"author":{"gitId":"xkisxk"},"content":"            ui.showMessage(e.getMessage());","lastModifiedDate":"2021-10-24"},{"lineNumber":121,"author":{"gitId":"xkisxk"},"content":"            logger.log(Level.WARNING, \"Incorrect format causing IndexOutOfBoundsException\");","lastModifiedDate":"2021-10-24"},{"lineNumber":122,"author":{"gitId":"xkisxk"},"content":"        } catch (EmptyDeckException e) {","lastModifiedDate":"2021-10-24"},{"lineNumber":123,"author":{"gitId":"xkisxk"},"content":"            ui.showMessage(NO_CARDS_TO_REVIEW_MESSAGE);","lastModifiedDate":"2021-11-03"},{"lineNumber":124,"author":{"gitId":"xkisxk"},"content":"        }","lastModifiedDate":"2021-10-24"},{"lineNumber":125,"author":{"gitId":"JWweiyin"},"content":"        return EMPTY_ANSWER;","lastModifiedDate":"2021-11-07"},{"lineNumber":126,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":127,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":128,"author":{"gitId":"ThaddeusLim99"},"content":"    //@@author ThaddeusLim99","lastModifiedDate":"2021-11-06"},{"lineNumber":129,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":130,"author":{"gitId":"ThaddeusLim99"},"content":"    /**","lastModifiedDate":"2021-10-24"},{"lineNumber":131,"author":{"gitId":"ThaddeusLim99"},"content":"     * Shuffles the test deck and initializes the AnswerList with empty Answers.","lastModifiedDate":"2021-11-03"},{"lineNumber":132,"author":{"gitId":"ThaddeusLim99"},"content":"     *","lastModifiedDate":"2021-11-03"},{"lineNumber":133,"author":{"gitId":"ThaddeusLim99"},"content":"     * @param userAnswer user\u0027s answers","lastModifiedDate":"2021-11-03"},{"lineNumber":134,"author":{"gitId":"ThaddeusLim99"},"content":"     * @return shuffled test deck","lastModifiedDate":"2021-11-03"},{"lineNumber":135,"author":{"gitId":"ThaddeusLim99"},"content":"     * @throws EmptyDeckException if test deck is empty","lastModifiedDate":"2021-11-03"},{"lineNumber":136,"author":{"gitId":"ThaddeusLim99"},"content":"     */","lastModifiedDate":"2021-10-24"},{"lineNumber":137,"author":{"gitId":"ThaddeusLim99"},"content":"    public ArrayList\u003cFlashCard\u003e prepareTestDeck(AnswerList userAnswer) throws EmptyDeckException {","lastModifiedDate":"2021-11-03"},{"lineNumber":138,"author":{"gitId":"ThaddeusLim99"},"content":"        ArrayList\u003cFlashCard\u003e deckReplicate \u003d userAnswer.getDeck().getCards();","lastModifiedDate":"2021-10-24"},{"lineNumber":139,"author":{"gitId":"ThaddeusLim99"},"content":"        if (deckReplicate.isEmpty()) {","lastModifiedDate":"2021-10-24"},{"lineNumber":140,"author":{"gitId":"ThaddeusLim99"},"content":"            throw new EmptyDeckException(NO_CARDS_TO_TEST_MESSAGE);","lastModifiedDate":"2021-11-03"},{"lineNumber":141,"author":{"gitId":"ThaddeusLim99"},"content":"        }","lastModifiedDate":"2021-10-24"},{"lineNumber":142,"author":{"gitId":"ThaddeusLim99"},"content":"        Collections.shuffle(deckReplicate);","lastModifiedDate":"2021-10-24"},{"lineNumber":143,"author":{"gitId":"ThaddeusLim99"},"content":"        logger.log(Level.INFO, \"replicated and shuffled flashcard list\");","lastModifiedDate":"2021-10-24"},{"lineNumber":144,"author":{"gitId":"ThaddeusLim99"},"content":"        logger.log(Level.INFO, \"populating userAnswer\");","lastModifiedDate":"2021-11-03"},{"lineNumber":145,"author":{"gitId":"ThaddeusLim99"},"content":"        //populate userAnswer","lastModifiedDate":"2021-10-26"},{"lineNumber":146,"author":{"gitId":"ThaddeusLim99"},"content":"        for (FlashCard question : deckReplicate) {","lastModifiedDate":"2021-10-24"},{"lineNumber":147,"author":{"gitId":"ThaddeusLim99"},"content":"            int questionNumber \u003d userAnswer.getDeck().getCardIndex(question);","lastModifiedDate":"2021-10-26"},{"lineNumber":148,"author":{"gitId":"ThaddeusLim99"},"content":"            userAnswer.addAnswer(EMPTY_ANSWER, questionNumber);","lastModifiedDate":"2021-11-04"},{"lineNumber":149,"author":{"gitId":"ThaddeusLim99"},"content":"        }","lastModifiedDate":"2021-10-24"},{"lineNumber":150,"author":{"gitId":"ThaddeusLim99"},"content":"        return deckReplicate;","lastModifiedDate":"2021-11-03"},{"lineNumber":151,"author":{"gitId":"ThaddeusLim99"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":152,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":153,"author":{"gitId":"ThaddeusLim99"},"content":"    /**","lastModifiedDate":"2021-11-03"},{"lineNumber":154,"author":{"gitId":"ThaddeusLim99"},"content":"     * Iterates through the shuffled deck for the user to answer.","lastModifiedDate":"2021-11-03"},{"lineNumber":155,"author":{"gitId":"ThaddeusLim99"},"content":"     * The user\u0027s answer is saved into an AnswerList.","lastModifiedDate":"2021-11-03"},{"lineNumber":156,"author":{"gitId":"ThaddeusLim99"},"content":"     *","lastModifiedDate":"2021-11-03"},{"lineNumber":157,"author":{"gitId":"ThaddeusLim99"},"content":"     * @param deckReplicate shuffled test deck","lastModifiedDate":"2021-11-03"},{"lineNumber":158,"author":{"gitId":"ThaddeusLim99"},"content":"     * @param userAnswer    user\u0027s answers","lastModifiedDate":"2021-11-03"},{"lineNumber":159,"author":{"gitId":"ThaddeusLim99"},"content":"     */","lastModifiedDate":"2021-11-03"},{"lineNumber":160,"author":{"gitId":"ThaddeusLim99"},"content":"    private void testInProgress(ArrayList\u003cFlashCard\u003e deckReplicate, AnswerList userAnswer) {","lastModifiedDate":"2021-10-26"},{"lineNumber":161,"author":{"gitId":"ThaddeusLim99"},"content":"        boolean allQuestionsAnswered \u003d false;","lastModifiedDate":"2021-10-26"},{"lineNumber":162,"author":{"gitId":"ThaddeusLim99"},"content":"        int currentQuestion \u003d 0;","lastModifiedDate":"2021-10-26"},{"lineNumber":163,"author":{"gitId":"ThaddeusLim99"},"content":"        int nextQuestionFlag \u003d 0;","lastModifiedDate":"2021-10-26"},{"lineNumber":164,"author":{"gitId":"ThaddeusLim99"},"content":"        int numOfQuestions \u003d deckReplicate.size();","lastModifiedDate":"2021-11-04"},{"lineNumber":165,"author":{"gitId":"ThaddeusLim99"},"content":"        int timer \u003d numOfQuestions * TIME_PER_QUESTION;","lastModifiedDate":"2021-11-04"},{"lineNumber":166,"author":{"gitId":"ThaddeusLim99"},"content":"        Countdown countdown \u003d new Countdown(timer, TIMES_UP_MESSAGE);","lastModifiedDate":"2021-11-04"},{"lineNumber":167,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":168,"author":{"gitId":"ThaddeusLim99"},"content":"        logger.log(Level.INFO, \"starting test proper\");","lastModifiedDate":"2021-10-26"},{"lineNumber":169,"author":{"gitId":"ThaddeusLim99"},"content":"        countdown.start();","lastModifiedDate":"2021-11-04"},{"lineNumber":170,"author":{"gitId":"ThaddeusLim99"},"content":"        while (!allQuestionsAnswered \u0026\u0026 countdown.isRunning()) {","lastModifiedDate":"2021-11-04"},{"lineNumber":171,"author":{"gitId":"ThaddeusLim99"},"content":"            logger.log(Level.INFO, \"currentQuestion is out of index. Either test finished or user scroll too far\");","lastModifiedDate":"2021-10-26"},{"lineNumber":172,"author":{"gitId":"ThaddeusLim99"},"content":"            while (currentQuestion \u003e\u003d 0 \u0026\u0026 currentQuestion \u003c deckReplicate.size() \u0026\u0026 countdown.isRunning()) {","lastModifiedDate":"2021-11-04"},{"lineNumber":173,"author":{"gitId":"ThaddeusLim99"},"content":"                //question is not answered yet","lastModifiedDate":"2021-10-26"},{"lineNumber":174,"author":{"gitId":"ThaddeusLim99"},"content":"                if (!userAnswer.isQuestionAnswered(currentQuestion)) {","lastModifiedDate":"2021-11-07"},{"lineNumber":175,"author":{"gitId":"ThaddeusLim99"},"content":"                    logger.log(Level.INFO, \"question not answered yet\");","lastModifiedDate":"2021-10-26"},{"lineNumber":176,"author":{"gitId":"ThaddeusLim99"},"content":"                    nextQuestionFlag \u003d testCard(userAnswer, deckReplicate.get(currentQuestion), countdown);","lastModifiedDate":"2021-11-04"},{"lineNumber":177,"author":{"gitId":"ThaddeusLim99"},"content":"                }","lastModifiedDate":"2021-10-26"},{"lineNumber":178,"author":{"gitId":"ThaddeusLim99"},"content":"                logger.log(Level.INFO, \"setting next question to test\");","lastModifiedDate":"2021-10-26"},{"lineNumber":179,"author":{"gitId":"ThaddeusLim99"},"content":"                //next question to be tested is currentQuestion - 1","lastModifiedDate":"2021-10-26"},{"lineNumber":180,"author":{"gitId":"ThaddeusLim99"},"content":"                if (nextQuestionFlag \u003d\u003d 1) {","lastModifiedDate":"2021-10-26"},{"lineNumber":181,"author":{"gitId":"ThaddeusLim99"},"content":"                    currentQuestion--;","lastModifiedDate":"2021-10-26"},{"lineNumber":182,"author":{"gitId":"ThaddeusLim99"},"content":"                } else {","lastModifiedDate":"2021-10-26"},{"lineNumber":183,"author":{"gitId":"ThaddeusLim99"},"content":"                    //next question to be tested is currentQuestion + 1","lastModifiedDate":"2021-10-26"},{"lineNumber":184,"author":{"gitId":"ThaddeusLim99"},"content":"                    currentQuestion++;","lastModifiedDate":"2021-10-26"},{"lineNumber":185,"author":{"gitId":"ThaddeusLim99"},"content":"                }","lastModifiedDate":"2021-10-26"},{"lineNumber":186,"author":{"gitId":"ThaddeusLim99"},"content":"            }","lastModifiedDate":"2021-10-26"},{"lineNumber":187,"author":{"gitId":"ThaddeusLim99"},"content":"            logger.log(Level.INFO, \"Wraparound for edge case\");","lastModifiedDate":"2021-10-26"},{"lineNumber":188,"author":{"gitId":"ThaddeusLim99"},"content":"            //wraparound from end of deckReplicate to start of deckReplicate","lastModifiedDate":"2021-10-26"},{"lineNumber":189,"author":{"gitId":"ThaddeusLim99"},"content":"            if (currentQuestion \u003d\u003d deckReplicate.size()) {","lastModifiedDate":"2021-10-26"},{"lineNumber":190,"author":{"gitId":"ThaddeusLim99"},"content":"                currentQuestion \u003d 0;","lastModifiedDate":"2021-10-26"},{"lineNumber":191,"author":{"gitId":"ThaddeusLim99"},"content":"            }","lastModifiedDate":"2021-10-26"},{"lineNumber":192,"author":{"gitId":"ThaddeusLim99"},"content":"            //wraparound from start of deckReplicate to end of deckReplicate","lastModifiedDate":"2021-10-26"},{"lineNumber":193,"author":{"gitId":"ThaddeusLim99"},"content":"            if (currentQuestion \u003d\u003d -1) {","lastModifiedDate":"2021-10-26"},{"lineNumber":194,"author":{"gitId":"ThaddeusLim99"},"content":"                currentQuestion \u003d deckReplicate.size() - 1;","lastModifiedDate":"2021-10-26"},{"lineNumber":195,"author":{"gitId":"ThaddeusLim99"},"content":"            }","lastModifiedDate":"2021-10-26"},{"lineNumber":196,"author":{"gitId":"ThaddeusLim99"},"content":"            logger.log(Level.INFO, \"checking isAllAnswered\");","lastModifiedDate":"2021-10-26"},{"lineNumber":197,"author":{"gitId":"ThaddeusLim99"},"content":"            if (userAnswer.isAllAnswered()) {","lastModifiedDate":"2021-10-26"},{"lineNumber":198,"author":{"gitId":"ThaddeusLim99"},"content":"                allQuestionsAnswered \u003d true;","lastModifiedDate":"2021-10-26"},{"lineNumber":199,"author":{"gitId":"ThaddeusLim99"},"content":"            }","lastModifiedDate":"2021-10-26"},{"lineNumber":200,"author":{"gitId":"ThaddeusLim99"},"content":"        }","lastModifiedDate":"2021-10-26"},{"lineNumber":201,"author":{"gitId":"ThaddeusLim99"},"content":"        if (countdown.isRunning()) {","lastModifiedDate":"2021-11-04"},{"lineNumber":202,"author":{"gitId":"ThaddeusLim99"},"content":"            countdown.stop();","lastModifiedDate":"2021-11-04"},{"lineNumber":203,"author":{"gitId":"ThaddeusLim99"},"content":"        }","lastModifiedDate":"2021-11-04"},{"lineNumber":204,"author":{"gitId":"ThaddeusLim99"},"content":"        ui.clearScreen();","lastModifiedDate":"2021-11-04"},{"lineNumber":205,"author":{"gitId":"ThaddeusLim99"},"content":"        ui.printDividerLine();","lastModifiedDate":"2021-11-03"},{"lineNumber":206,"author":{"gitId":"ThaddeusLim99"},"content":"        logger.log(Level.INFO, \"Finished test\");","lastModifiedDate":"2021-11-03"},{"lineNumber":207,"author":{"gitId":"ThaddeusLim99"},"content":"        //let user know testing is over","lastModifiedDate":"2021-11-03"},{"lineNumber":208,"author":{"gitId":"ThaddeusLim99"},"content":"        ui.printTestOver();","lastModifiedDate":"2021-11-03"},{"lineNumber":209,"author":{"gitId":"ThaddeusLim99"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":210,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":211,"author":{"gitId":"ThaddeusLim99"},"content":"    private int testCard(AnswerList userAnswer, FlashCard question, Countdown countdown) {","lastModifiedDate":"2021-11-04"},{"lineNumber":212,"author":{"gitId":"ThaddeusLim99"},"content":"        logger.log(Level.INFO, \"starting to test a new card\");","lastModifiedDate":"2021-10-24"},{"lineNumber":213,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":214,"author":{"gitId":"ThaddeusLim99"},"content":"        //0 means proceed to next question in userAnswer;1 means go back 1 question","lastModifiedDate":"2021-10-26"},{"lineNumber":215,"author":{"gitId":"ThaddeusLim99"},"content":"        int nextQuestionFlag \u003d 0;","lastModifiedDate":"2021-10-26"},{"lineNumber":216,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":217,"author":{"gitId":"ThaddeusLim99"},"content":"        int questionNumber \u003d userAnswer.getDeck().getCardIndex(question);","lastModifiedDate":"2021-10-24"},{"lineNumber":218,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":219,"author":{"gitId":"ThaddeusLim99"},"content":"        ui.clearScreen();","lastModifiedDate":"2021-11-04"},{"lineNumber":220,"author":{"gitId":"ThaddeusLim99"},"content":"        ui.printDividerLine();","lastModifiedDate":"2021-10-24"},{"lineNumber":221,"author":{"gitId":"ThaddeusLim99"},"content":"        ui.printQuestion(question, questionNumber);","lastModifiedDate":"2021-10-24"},{"lineNumber":222,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":223,"author":{"gitId":"ThaddeusLim99"},"content":"        //get user\u0027s answer to the card shown(currently assume user inputs only his/her answer)","lastModifiedDate":"2021-10-24"},{"lineNumber":224,"author":{"gitId":"ThaddeusLim99"},"content":"        //later version to include question number and parsing to allow for randomised testing","lastModifiedDate":"2021-10-24"},{"lineNumber":225,"author":{"gitId":"ThaddeusLim99"},"content":"        logger.log(Level.INFO, \"getting user\u0027s answer to the question\");","lastModifiedDate":"2021-10-24"},{"lineNumber":226,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":227,"author":{"gitId":"ThaddeusLim99"},"content":"        String userResponse \u003d ui.getUserMessage();","lastModifiedDate":"2021-10-24"},{"lineNumber":228,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":229,"author":{"gitId":"ThaddeusLim99"},"content":"        try {","lastModifiedDate":"2021-10-24"},{"lineNumber":230,"author":{"gitId":"ThaddeusLim99"},"content":"            userResponse \u003d TestParser.parseUserResponse(userResponse);","lastModifiedDate":"2021-10-24"},{"lineNumber":231,"author":{"gitId":"ThaddeusLim99"},"content":"        } catch (FieldEmptyException e) {","lastModifiedDate":"2021-10-24"},{"lineNumber":232,"author":{"gitId":"ThaddeusLim99"},"content":"            logger.log(Level.INFO, \"No user input\");","lastModifiedDate":"2021-10-27"},{"lineNumber":233,"author":{"gitId":"ThaddeusLim99"},"content":"            userResponse \u003d EMPTY_ANSWER;","lastModifiedDate":"2021-11-04"},{"lineNumber":234,"author":{"gitId":"ThaddeusLim99"},"content":"            ui.printAnswerEmptyError();","lastModifiedDate":"2021-10-24"},{"lineNumber":235,"author":{"gitId":"ThaddeusLim99"},"content":"        }","lastModifiedDate":"2021-10-24"},{"lineNumber":236,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":237,"author":{"gitId":"ThaddeusLim99"},"content":"        if (!countdown.isRunning()) {","lastModifiedDate":"2021-11-04"},{"lineNumber":238,"author":{"gitId":"ThaddeusLim99"},"content":"            // timer has run out","lastModifiedDate":"2021-11-04"},{"lineNumber":239,"author":{"gitId":"ThaddeusLim99"},"content":"            userResponse \u003d EMPTY_ANSWER;","lastModifiedDate":"2021-11-04"},{"lineNumber":240,"author":{"gitId":"ThaddeusLim99"},"content":"        }","lastModifiedDate":"2021-11-04"},{"lineNumber":241,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":242,"author":{"gitId":"ThaddeusLim99"},"content":"        //set question as answered with the new user response","lastModifiedDate":"2021-10-26"},{"lineNumber":243,"author":{"gitId":"ThaddeusLim99"},"content":"        if (!(userResponse.trim().equalsIgnoreCase(\"/NEXT\") || userResponse.trim().equalsIgnoreCase(\"/BACK\"))) {","lastModifiedDate":"2021-10-26"},{"lineNumber":244,"author":{"gitId":"ThaddeusLim99"},"content":"            logger.log(Level.INFO, \"Saving answer\");","lastModifiedDate":"2021-10-24"},{"lineNumber":245,"author":{"gitId":"ThaddeusLim99"},"content":"            userAnswer.setQuestionAnswer(questionNumber, userResponse);","lastModifiedDate":"2021-10-26"},{"lineNumber":246,"author":{"gitId":"ThaddeusLim99"},"content":"            userAnswer.getAnswer(questionNumber).setIsAnswered();","lastModifiedDate":"2021-11-03"},{"lineNumber":247,"author":{"gitId":"ThaddeusLim99"},"content":"        }","lastModifiedDate":"2021-10-26"},{"lineNumber":248,"author":{"gitId":"ThaddeusLim99"},"content":"        //signalling to test previous question next","lastModifiedDate":"2021-10-26"},{"lineNumber":249,"author":{"gitId":"ThaddeusLim99"},"content":"        if (userResponse.trim().equalsIgnoreCase(\"/BACK\")) {","lastModifiedDate":"2021-10-26"},{"lineNumber":250,"author":{"gitId":"ThaddeusLim99"},"content":"            nextQuestionFlag \u003d 1;","lastModifiedDate":"2021-10-26"},{"lineNumber":251,"author":{"gitId":"ThaddeusLim99"},"content":"        }","lastModifiedDate":"2021-10-26"},{"lineNumber":252,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":253,"author":{"gitId":"ThaddeusLim99"},"content":"        assert !userAnswer.isEmpty();","lastModifiedDate":"2021-10-24"},{"lineNumber":254,"author":{"gitId":"ThaddeusLim99"},"content":"        assert userAnswer.getSize() \u003e 0;","lastModifiedDate":"2021-10-24"},{"lineNumber":255,"author":{"gitId":"ThaddeusLim99"},"content":"        logger.log(Level.INFO, \"Finished this card\u0027s testing\");","lastModifiedDate":"2021-10-24"},{"lineNumber":256,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":257,"author":{"gitId":"ThaddeusLim99"},"content":"        return nextQuestionFlag;","lastModifiedDate":"2021-10-26"},{"lineNumber":258,"author":{"gitId":"ThaddeusLim99"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":259,"author":{"gitId":"xRossKoh"},"content":"    //@@author xRossKoh","lastModifiedDate":"2021-11-06"},{"lineNumber":260,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":261,"author":{"gitId":"xRossKoh"},"content":"    /**","lastModifiedDate":"2021-10-24"},{"lineNumber":262,"author":{"gitId":"xRossKoh"},"content":"     * Marks the user\u0027s answers then print their results of test to system output.","lastModifiedDate":"2021-10-24"},{"lineNumber":263,"author":{"gitId":"xRossKoh"},"content":"     */","lastModifiedDate":"2021-10-24"},{"lineNumber":264,"author":{"gitId":"xRossKoh"},"content":"    public void markTest(AnswerList userAnswers) {","lastModifiedDate":"2021-10-24"},{"lineNumber":265,"author":{"gitId":"xRossKoh"},"content":"        logger.log(Level.INFO, \"starting test check\");","lastModifiedDate":"2021-10-24"},{"lineNumber":266,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":267,"author":{"gitId":"xRossKoh"},"content":"        //there must be at least one response to start a test","lastModifiedDate":"2021-10-24"},{"lineNumber":268,"author":{"gitId":"xRossKoh"},"content":"        assert userAnswers.getSize() \u003e 0;","lastModifiedDate":"2021-10-24"},{"lineNumber":269,"author":{"gitId":"xRossKoh"},"content":"        for (Answer response : userAnswers.getAnswerList()) {","lastModifiedDate":"2021-10-24"},{"lineNumber":270,"author":{"gitId":"xRossKoh"},"content":"            markQuestion(userAnswers, response);","lastModifiedDate":"2021-10-24"},{"lineNumber":271,"author":{"gitId":"xRossKoh"},"content":"        }","lastModifiedDate":"2021-10-24"},{"lineNumber":272,"author":{"gitId":"xRossKoh"},"content":"        ui.printDividerLine();","lastModifiedDate":"2021-10-24"},{"lineNumber":273,"author":{"gitId":"xRossKoh"},"content":"        int answersCount \u003d userAnswers.getSize();","lastModifiedDate":"2021-10-24"},{"lineNumber":274,"author":{"gitId":"xRossKoh"},"content":"        int score \u003d userAnswers.getUserScore();","lastModifiedDate":"2021-10-24"},{"lineNumber":275,"author":{"gitId":"xRossKoh"},"content":"        assert score \u003c\u003d answersCount;","lastModifiedDate":"2021-10-24"},{"lineNumber":276,"author":{"gitId":"xRossKoh"},"content":"        System.out.println(\"You scored \" + score + \" out of \" + answersCount + \" for this test.\");","lastModifiedDate":"2021-10-24"},{"lineNumber":277,"author":{"gitId":"xRossKoh"},"content":"        System.out.println(\"That is \" + Math.round(((double) score / answersCount) * 10000) / 100 + \"%!\");","lastModifiedDate":"2021-11-01"},{"lineNumber":278,"author":{"gitId":"xRossKoh"},"content":"        logger.log(Level.INFO, \"all answers checked, score printed to system output\");","lastModifiedDate":"2021-10-24"},{"lineNumber":279,"author":{"gitId":"xRossKoh"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":280,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":281,"author":{"gitId":"xRossKoh"},"content":"    // Marks the user\u0027s answer","lastModifiedDate":"2021-10-24"},{"lineNumber":282,"author":{"gitId":"xRossKoh"},"content":"    private void markQuestion(AnswerList userAnswers, Answer response) {","lastModifiedDate":"2021-10-24"},{"lineNumber":283,"author":{"gitId":"xRossKoh"},"content":"        int responseNumber \u003d userAnswers.getAnswerIndex(response);","lastModifiedDate":"2021-10-24"},{"lineNumber":284,"author":{"gitId":"xRossKoh"},"content":"        FlashCard question \u003d userAnswers.getDeck().getCard(responseNumber);","lastModifiedDate":"2021-10-24"},{"lineNumber":285,"author":{"gitId":"xRossKoh"},"content":"        String userAnswer \u003d response.getAnswer();","lastModifiedDate":"2021-10-24"},{"lineNumber":286,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":287,"author":{"gitId":"xRossKoh"},"content":"        ui.printDividerLine();","lastModifiedDate":"2021-10-24"},{"lineNumber":288,"author":{"gitId":"xRossKoh"},"content":"        //display front of card so that user can understand question","lastModifiedDate":"2021-10-24"},{"lineNumber":289,"author":{"gitId":"xRossKoh"},"content":"        ui.printQuestion(question, responseNumber);","lastModifiedDate":"2021-10-24"},{"lineNumber":290,"author":{"gitId":"xRossKoh"},"content":"        ui.printCorrectAnswer(question);","lastModifiedDate":"2021-10-24"},{"lineNumber":291,"author":{"gitId":"xRossKoh"},"content":"        ui.printUserAnswer(userAnswer);","lastModifiedDate":"2021-10-24"},{"lineNumber":292,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":293,"author":{"gitId":"xRossKoh"},"content":"        if (response.isCorrect(userAnswer, question)) {","lastModifiedDate":"2021-10-24"},{"lineNumber":294,"author":{"gitId":"xRossKoh"},"content":"            userAnswers.incrementUserScore();","lastModifiedDate":"2021-10-24"},{"lineNumber":295,"author":{"gitId":"xRossKoh"},"content":"            question.incrementUserScore();","lastModifiedDate":"2021-10-24"},{"lineNumber":296,"author":{"gitId":"xRossKoh"},"content":"            ui.printCorrectAnsMessage();","lastModifiedDate":"2021-10-24"},{"lineNumber":297,"author":{"gitId":"xRossKoh"},"content":"            logger.log(Level.INFO, \"user answer is correct\");","lastModifiedDate":"2021-10-24"},{"lineNumber":298,"author":{"gitId":"xRossKoh"},"content":"        } else {","lastModifiedDate":"2021-10-24"},{"lineNumber":299,"author":{"gitId":"xRossKoh"},"content":"            ui.printWrongAnsMessage();","lastModifiedDate":"2021-10-24"},{"lineNumber":300,"author":{"gitId":"xRossKoh"},"content":"            logger.log(Level.INFO, \"user answer is wrong\");","lastModifiedDate":"2021-10-24"},{"lineNumber":301,"author":{"gitId":"xRossKoh"},"content":"        }","lastModifiedDate":"2021-10-24"},{"lineNumber":302,"author":{"gitId":"xRossKoh"},"content":"        question.incrementTotalScore();","lastModifiedDate":"2021-10-24"},{"lineNumber":303,"author":{"gitId":"xRossKoh"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":304,"author":{"gitId":"xRossKoh"},"content":"}","lastModifiedDate":"2021-10-04"}],"authorContributionMap":{"JWweiyin":3,"ThaddeusLim99":137,"astralum":6,"xRossKoh":59,"xkisxk":99}},{"path":"src/main/java/seedu/cardli/ui/CardLiUi.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"xRossKoh"},"content":"package seedu.cardli.ui;","lastModifiedDate":"2021-10-26"},{"lineNumber":2,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-02"},{"lineNumber":3,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.commands.CommandResult;","lastModifiedDate":"2021-10-26"},{"lineNumber":4,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":5,"author":{"gitId":"xkisxk"},"content":"import java.io.InputStream;","lastModifiedDate":"2021-10-02"},{"lineNumber":6,"author":{"gitId":"xkisxk"},"content":"import java.io.PrintStream;","lastModifiedDate":"2021-10-02"},{"lineNumber":7,"author":{"gitId":"xkisxk"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-10-02"},{"lineNumber":8,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-02"},{"lineNumber":9,"author":{"gitId":"xkisxk"},"content":"public class CardLiUi {","lastModifiedDate":"2021-10-02"},{"lineNumber":10,"author":{"gitId":"xkisxk"},"content":"    private final Scanner in;","lastModifiedDate":"2021-10-02"},{"lineNumber":11,"author":{"gitId":"xkisxk"},"content":"    private final PrintStream out;","lastModifiedDate":"2021-10-02"},{"lineNumber":12,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-02"},{"lineNumber":13,"author":{"gitId":"xkisxk"},"content":"    public CardLiUi() {","lastModifiedDate":"2021-10-02"},{"lineNumber":14,"author":{"gitId":"xkisxk"},"content":"        this(System.in, System.out);","lastModifiedDate":"2021-10-02"},{"lineNumber":15,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-02"},{"lineNumber":16,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-02"},{"lineNumber":17,"author":{"gitId":"xkisxk"},"content":"    public CardLiUi(InputStream in, PrintStream out) {","lastModifiedDate":"2021-10-02"},{"lineNumber":18,"author":{"gitId":"xkisxk"},"content":"        this.in \u003d new Scanner(in);","lastModifiedDate":"2021-10-02"},{"lineNumber":19,"author":{"gitId":"xkisxk"},"content":"        this.out \u003d out;","lastModifiedDate":"2021-10-02"},{"lineNumber":20,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-02"},{"lineNumber":21,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-02"},{"lineNumber":22,"author":{"gitId":"JWweiyin"},"content":"    //@@author JWweiyin","lastModifiedDate":"2021-11-06"},{"lineNumber":23,"author":{"gitId":"JWweiyin"},"content":"    public void printByeMessage() {","lastModifiedDate":"2021-10-02"},{"lineNumber":24,"author":{"gitId":"JWweiyin"},"content":"        System.out.println(\"\\tYou did well today! Goodbye!\");","lastModifiedDate":"2021-10-02"},{"lineNumber":25,"author":{"gitId":"JWweiyin"},"content":"    }","lastModifiedDate":"2021-10-02"},{"lineNumber":26,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-02"},{"lineNumber":27,"author":{"gitId":"JWweiyin"},"content":"    public static String returnHelpMessage() {","lastModifiedDate":"2021-10-21"},{"lineNumber":28,"author":{"gitId":"JWweiyin"},"content":"        String help \u003d \"\\n\"","lastModifiedDate":"2021-10-18"},{"lineNumber":29,"author":{"gitId":"JWweiyin"},"content":"                + \"................................................................................\"","lastModifiedDate":"2021-10-18"},{"lineNumber":30,"author":{"gitId":"JWweiyin"},"content":"                + \"....................................... \\n\"","lastModifiedDate":"2021-10-18"},{"lineNumber":31,"author":{"gitId":"JWweiyin"},"content":"                + \"Here is the list of commands! \\n\"","lastModifiedDate":"2021-10-18"},{"lineNumber":32,"author":{"gitId":"JWweiyin"},"content":"                + \"1. add \\n\"","lastModifiedDate":"2021-10-23"},{"lineNumber":33,"author":{"gitId":"JWweiyin"},"content":"                + \"Description: Adds a flashcard deck \\n\"","lastModifiedDate":"2021-10-18"},{"lineNumber":34,"author":{"gitId":"JWweiyin"},"content":"                + \"Format: add \u003cname of deck\u003e \\n\\n\"","lastModifiedDate":"2021-10-23"},{"lineNumber":35,"author":{"gitId":"JWweiyin"},"content":"                + \"2. delete \\n\"","lastModifiedDate":"2021-11-01"},{"lineNumber":36,"author":{"gitId":"JWweiyin"},"content":"                + \"Description: Deletes a flashcard deck \\n\"","lastModifiedDate":"2021-11-01"},{"lineNumber":37,"author":{"gitId":"JWweiyin"},"content":"                + \"Format: delete \u003cindex of deck\u003e \\n\\n\"","lastModifiedDate":"2021-11-01"},{"lineNumber":38,"author":{"gitId":"JWweiyin"},"content":"                + \"3. edit \\n\"","lastModifiedDate":"2021-11-01"},{"lineNumber":39,"author":{"gitId":"JWweiyin"},"content":"                + \"Description: Edits the name of a flashcard deck \\n\"","lastModifiedDate":"2021-11-04"},{"lineNumber":40,"author":{"gitId":"JWweiyin"},"content":"                + \"Format: edit /d \u003cindex of deck\u003e /n \u003cnew name of deck\u003e \\n\\n\"","lastModifiedDate":"2021-11-01"},{"lineNumber":41,"author":{"gitId":"JWweiyin"},"content":"                + \"4. view \\n\"","lastModifiedDate":"2021-11-01"},{"lineNumber":42,"author":{"gitId":"JWweiyin"},"content":"                + \"Description: Lists flashcard decks \\n\"","lastModifiedDate":"2021-11-04"},{"lineNumber":43,"author":{"gitId":"JWweiyin"},"content":"                + \"Format: view \\n\\n\"","lastModifiedDate":"2021-10-23"},{"lineNumber":44,"author":{"gitId":"JWweiyin"},"content":"                + \"5. enter \\n\"","lastModifiedDate":"2021-11-01"},{"lineNumber":45,"author":{"gitId":"JWweiyin"},"content":"                + \"Description: Enters a flashcard deck (further actions can be taken)\\n\"","lastModifiedDate":"2021-10-20"},{"lineNumber":46,"author":{"gitId":"JWweiyin"},"content":"                + \"Format: enter \u003cindex of deck\u003e \\n\\n\"","lastModifiedDate":"2021-10-20"},{"lineNumber":47,"author":{"gitId":"JWweiyin"},"content":"                + \"6. test \\n\"","lastModifiedDate":"2021-11-01"},{"lineNumber":48,"author":{"gitId":"JWweiyin"},"content":"                + \"Description: Tests flashcards \\n\"","lastModifiedDate":"2021-11-04"},{"lineNumber":49,"author":{"gitId":"JWweiyin"},"content":"                + \"Format: test \\n\\n\"","lastModifiedDate":"2021-10-18"},{"lineNumber":50,"author":{"gitId":"JWweiyin"},"content":"                + \"7. viewfc \\n\"","lastModifiedDate":"2021-11-01"},{"lineNumber":51,"author":{"gitId":"JWweiyin"},"content":"                + \"Description: View overall results for flashcards \\n\"","lastModifiedDate":"2021-11-04"},{"lineNumber":52,"author":{"gitId":"JWweiyin"},"content":"                + \"Format: viewfc \\n\\n\"","lastModifiedDate":"2021-10-18"},{"lineNumber":53,"author":{"gitId":"JWweiyin"},"content":"                + \"8. viewtest \\n\"","lastModifiedDate":"2021-11-02"},{"lineNumber":54,"author":{"gitId":"JWweiyin"},"content":"                + \"Description: View result of a test \\n\"","lastModifiedDate":"2021-11-04"},{"lineNumber":55,"author":{"gitId":"JWweiyin"},"content":"                + \"Format: viewtest \u003cindex of test/all\u003e \\n\\n\"","lastModifiedDate":"2021-11-04"},{"lineNumber":56,"author":{"gitId":"JWweiyin"},"content":"                + \"9. review \\n\"","lastModifiedDate":"2021-11-02"},{"lineNumber":57,"author":{"gitId":"JWweiyin"},"content":"                + \"Description: Enters review mode, which is same as test mode but tests cards \"","lastModifiedDate":"2021-11-04"},{"lineNumber":58,"author":{"gitId":"JWweiyin"},"content":"                + \"that the user got wrong more often \\n\"","lastModifiedDate":"2021-10-18"},{"lineNumber":59,"author":{"gitId":"JWweiyin"},"content":"                + \"Format: review \\n\\n\"","lastModifiedDate":"2021-10-18"},{"lineNumber":60,"author":{"gitId":"JWweiyin"},"content":"                + \"10. find \\n\"","lastModifiedDate":"2021-11-02"},{"lineNumber":61,"author":{"gitId":"JWweiyin"},"content":"                + \"Description: Finds card using word/phrase of the query \\n\"","lastModifiedDate":"2021-11-04"},{"lineNumber":62,"author":{"gitId":"JWweiyin"},"content":"                + \"Format: find \u003cword/phrase\u003e \\n\\n\"","lastModifiedDate":"2021-10-18"},{"lineNumber":63,"author":{"gitId":"JWweiyin"},"content":"                + \"11. bye \\n\"","lastModifiedDate":"2021-11-04"},{"lineNumber":64,"author":{"gitId":"JWweiyin"},"content":"                + \"Description: Exits the program \\n\"","lastModifiedDate":"2021-11-04"},{"lineNumber":65,"author":{"gitId":"JWweiyin"},"content":"                + \"Format: exit \\n\\n\"","lastModifiedDate":"2021-11-04"},{"lineNumber":66,"author":{"gitId":"JWweiyin"},"content":"                + \"................................................................................\"","lastModifiedDate":"2021-10-18"},{"lineNumber":67,"author":{"gitId":"JWweiyin"},"content":"                + \"....................................... \\n\";","lastModifiedDate":"2021-10-18"},{"lineNumber":68,"author":{"gitId":"JWweiyin"},"content":"        return help;","lastModifiedDate":"2021-10-21"},{"lineNumber":69,"author":{"gitId":"JWweiyin"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":70,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":71,"author":{"gitId":"JWweiyin"},"content":"    public static String returnHelpInDeckMessage() {","lastModifiedDate":"2021-10-21"},{"lineNumber":72,"author":{"gitId":"JWweiyin"},"content":"        String help \u003d \"\\n\"","lastModifiedDate":"2021-10-20"},{"lineNumber":73,"author":{"gitId":"JWweiyin"},"content":"                + \"................................................................................\"","lastModifiedDate":"2021-10-23"},{"lineNumber":74,"author":{"gitId":"JWweiyin"},"content":"                + \"....................................... \\n\"","lastModifiedDate":"2021-10-23"},{"lineNumber":75,"author":{"gitId":"JWweiyin"},"content":"                + \"Here is the list of commands! \\n\"","lastModifiedDate":"2021-10-20"},{"lineNumber":76,"author":{"gitId":"JWweiyin"},"content":"                + \"1. add \\n\"","lastModifiedDate":"2021-10-20"},{"lineNumber":77,"author":{"gitId":"JWweiyin"},"content":"                + \"Description: Adds a flashcard to a deck \\n\"","lastModifiedDate":"2021-10-20"},{"lineNumber":78,"author":{"gitId":"JWweiyin"},"content":"                + \"Format: add /f \u003cword/phrase on front of flashcard\u003e /b\"","lastModifiedDate":"2021-10-23"},{"lineNumber":79,"author":{"gitId":"JWweiyin"},"content":"                + \" \u003cword/phrase on back of flashcard\u003e \\n\\n\"","lastModifiedDate":"2021-10-20"},{"lineNumber":80,"author":{"gitId":"JWweiyin"},"content":"                + \"2. delete \\n\"","lastModifiedDate":"2021-10-20"},{"lineNumber":81,"author":{"gitId":"JWweiyin"},"content":"                + \"Description: Deletes a flashcard \\n\"","lastModifiedDate":"2021-10-20"},{"lineNumber":82,"author":{"gitId":"JWweiyin"},"content":"                + \"Format: delete \u003cindex of card\u003e \\n\\n\"","lastModifiedDate":"2021-11-04"},{"lineNumber":83,"author":{"gitId":"JWweiyin"},"content":"                + \"3. edit \\n\"","lastModifiedDate":"2021-10-20"},{"lineNumber":84,"author":{"gitId":"JWweiyin"},"content":"                + \"Description: Edits the front or back of a flashcard \\n\"","lastModifiedDate":"2021-11-04"},{"lineNumber":85,"author":{"gitId":"JWweiyin"},"content":"                + \"Format: edit /c \u003cindex of card\u003e /s \u003cfront\"","lastModifiedDate":"2021-11-01"},{"lineNumber":86,"author":{"gitId":"JWweiyin"},"content":"                + \" or back of card\u003e /i \u003cword/phrase\u003e \\n\\n\"","lastModifiedDate":"2021-10-25"},{"lineNumber":87,"author":{"gitId":"JWweiyin"},"content":"                + \"4. move \\n\"","lastModifiedDate":"2021-10-26"},{"lineNumber":88,"author":{"gitId":"JWweiyin"},"content":"                + \"Description: Moves a flashcard from current deck to another deck \\n\"","lastModifiedDate":"2021-10-26"},{"lineNumber":89,"author":{"gitId":"JWweiyin"},"content":"                + \"Format: move /c \u003cindex of card\u003e\"","lastModifiedDate":"2021-11-04"},{"lineNumber":90,"author":{"gitId":"JWweiyin"},"content":"                + \" /d \u003cindex of deck\u003e \\n\\n\"","lastModifiedDate":"2021-11-04"},{"lineNumber":91,"author":{"gitId":"JWweiyin"},"content":"                + \"5. view \\n\"","lastModifiedDate":"2021-10-26"},{"lineNumber":92,"author":{"gitId":"JWweiyin"},"content":"                + \"Description: Lists flashcards in the current deck \\n\"","lastModifiedDate":"2021-11-04"},{"lineNumber":93,"author":{"gitId":"JWweiyin"},"content":"                + \"Format: view\\n\\n\"","lastModifiedDate":"2021-10-20"},{"lineNumber":94,"author":{"gitId":"JWweiyin"},"content":"                + \"6. exit \\n\"","lastModifiedDate":"2021-10-26"},{"lineNumber":95,"author":{"gitId":"JWweiyin"},"content":"                + \"Description: Returns the program to main menu. \\n\"","lastModifiedDate":"2021-10-20"},{"lineNumber":96,"author":{"gitId":"JWweiyin"},"content":"                + \"Format: exit \\n\\n\"","lastModifiedDate":"2021-10-20"},{"lineNumber":97,"author":{"gitId":"JWweiyin"},"content":"                + \"................................................................................\"","lastModifiedDate":"2021-10-20"},{"lineNumber":98,"author":{"gitId":"JWweiyin"},"content":"                + \"....................................... \\n\";","lastModifiedDate":"2021-10-20"},{"lineNumber":99,"author":{"gitId":"JWweiyin"},"content":"        return help;","lastModifiedDate":"2021-10-21"},{"lineNumber":100,"author":{"gitId":"JWweiyin"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":101,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":102,"author":{"gitId":"JWweiyin"},"content":"    //@@author JWweiyin","lastModifiedDate":"2021-11-06"},{"lineNumber":103,"author":{"gitId":"JWweiyin"},"content":"    public void printGreetingMessage() {","lastModifiedDate":"2021-10-02"},{"lineNumber":104,"author":{"gitId":"JWweiyin"},"content":"        String logo \u003d \"\\n\"","lastModifiedDate":"2021-10-02"},{"lineNumber":105,"author":{"gitId":"JWweiyin"},"content":"                + \" .----------------.  .----------------.  .----------------.  .----------------. \"","lastModifiedDate":"2021-10-02"},{"lineNumber":106,"author":{"gitId":"JWweiyin"},"content":"                + \" .----------------.  .----------------.\\n\"","lastModifiedDate":"2021-10-02"},{"lineNumber":107,"author":{"gitId":"JWweiyin"},"content":"                + \"| .--------------. || .--------------. || .--------------. || .--------------. |\"","lastModifiedDate":"2021-10-02"},{"lineNumber":108,"author":{"gitId":"JWweiyin"},"content":"                + \"| .--------------. || .--------------. |\\n\"","lastModifiedDate":"2021-10-02"},{"lineNumber":109,"author":{"gitId":"JWweiyin"},"content":"                + \"| |     ______   | || |      __      | || |  _______     | || |  ________    | ||\"","lastModifiedDate":"2021-10-02"},{"lineNumber":110,"author":{"gitId":"JWweiyin"},"content":"                + \" |   _____      | || |     _____    | |\\n\"","lastModifiedDate":"2021-10-02"},{"lineNumber":111,"author":{"gitId":"JWweiyin"},"content":"                + \"| |   .\u0027 ___  |  | || |     /  \\\\     | || | |_   __ \\\\    | || | |_   ___ `.  | ||\"","lastModifiedDate":"2021-10-02"},{"lineNumber":112,"author":{"gitId":"JWweiyin"},"content":"                + \" |  |_   _|     | || |    |_   _|   | |\\n\"","lastModifiedDate":"2021-10-02"},{"lineNumber":113,"author":{"gitId":"JWweiyin"},"content":"                + \"| |  / .\u0027   \\\\_|  | || |    / /\\\\ \\\\    | || |   | |__) |   | || |   | |   `. \\\\ |\"","lastModifiedDate":"2021-10-02"},{"lineNumber":114,"author":{"gitId":"JWweiyin"},"content":"                + \" || |    | |       | || |      | |     | |\\n\"","lastModifiedDate":"2021-10-02"},{"lineNumber":115,"author":{"gitId":"JWweiyin"},"content":"                + \"| |  | |         | || |   / ____ \\\\   | || |   |  __ /    | || |   | |    | | | ||\"","lastModifiedDate":"2021-10-02"},{"lineNumber":116,"author":{"gitId":"JWweiyin"},"content":"                + \" |    | |   _   | || |      | |     | |\\n\"","lastModifiedDate":"2021-10-02"},{"lineNumber":117,"author":{"gitId":"JWweiyin"},"content":"                + \"| |  \\\\ `.___.\u0027\\\\  | || | _/ /    \\\\ \\\\_ | || |  _| |  \\\\ \\\\_  | || |  _| |___.\u0027 \"","lastModifiedDate":"2021-10-02"},{"lineNumber":118,"author":{"gitId":"JWweiyin"},"content":"                + \"/ | || |   _| |__/ |  | || |     _| |_    | |\\n\"","lastModifiedDate":"2021-10-02"},{"lineNumber":119,"author":{"gitId":"JWweiyin"},"content":"                + \"| |   `._____.\u0027  | || ||____|  |____|| || | |____| |___| | || | |________.\u0027  | || \"","lastModifiedDate":"2021-10-02"},{"lineNumber":120,"author":{"gitId":"JWweiyin"},"content":"                + \"|  |________|  | || |    |_____|   | |\\n\"","lastModifiedDate":"2021-10-02"},{"lineNumber":121,"author":{"gitId":"JWweiyin"},"content":"                + \"| |              | || |              | || |              | || |              | || \"","lastModifiedDate":"2021-10-02"},{"lineNumber":122,"author":{"gitId":"JWweiyin"},"content":"                + \"|              | || |              | |\\n\"","lastModifiedDate":"2021-10-02"},{"lineNumber":123,"author":{"gitId":"JWweiyin"},"content":"                + \"| \u0027--------------\u0027 || \u0027--------------\u0027 || \u0027--------------\u0027 || \u0027--------------\u0027 |\"","lastModifiedDate":"2021-10-02"},{"lineNumber":124,"author":{"gitId":"JWweiyin"},"content":"                + \"| \u0027--------------\u0027 || \u0027--------------\u0027 |\\n\"","lastModifiedDate":"2021-10-02"},{"lineNumber":125,"author":{"gitId":"JWweiyin"},"content":"                + \" \u0027----------------\u0027  \u0027----------------\u0027  \u0027----------------\u0027  \u0027----------------\u0027 \"","lastModifiedDate":"2021-10-02"},{"lineNumber":126,"author":{"gitId":"JWweiyin"},"content":"                + \" \u0027----------------\u0027  \u0027----------------\u0027\\n\";","lastModifiedDate":"2021-10-02"},{"lineNumber":127,"author":{"gitId":"JWweiyin"},"content":"        System.out.println(\"Welcome to\\n\" + logo);","lastModifiedDate":"2021-10-02"},{"lineNumber":128,"author":{"gitId":"JWweiyin"},"content":"        System.out.println(\"Let\u0027s get started!\");","lastModifiedDate":"2021-10-02"},{"lineNumber":129,"author":{"gitId":"JWweiyin"},"content":"        System.out.println(\"Type in \\\"help\\\" for more details.\");","lastModifiedDate":"2021-10-23"},{"lineNumber":130,"author":{"gitId":"JWweiyin"},"content":"    }","lastModifiedDate":"2021-10-02"},{"lineNumber":131,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":132,"author":{"gitId":"JWweiyin"},"content":"    public static void printResult(CommandResult result) {","lastModifiedDate":"2021-10-21"},{"lineNumber":133,"author":{"gitId":"JWweiyin"},"content":"        System.out.println(result.getResult());","lastModifiedDate":"2021-10-21"},{"lineNumber":134,"author":{"gitId":"JWweiyin"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":135,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":136,"author":{"gitId":"xkisxk"},"content":"    //@@author xkisxk","lastModifiedDate":"2021-11-06"},{"lineNumber":137,"author":{"gitId":"xkisxk"},"content":"    public String getUserMessage() {","lastModifiedDate":"2021-11-06"},{"lineNumber":138,"author":{"gitId":"xkisxk"},"content":"        return in.nextLine();","lastModifiedDate":"2021-11-06"},{"lineNumber":139,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":140,"author":{"gitId":"xkisxk"},"content":"}","lastModifiedDate":"2021-10-02"}],"authorContributionMap":{"JWweiyin":114,"astralum":1,"xRossKoh":2,"xkisxk":23}},{"path":"src/main/java/seedu/cardli/ui/TestUi.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"xRossKoh"},"content":"package seedu.cardli.ui;","lastModifiedDate":"2021-10-26"},{"lineNumber":2,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":3,"author":{"gitId":"astralum"},"content":"import org.fusesource.jansi.Ansi;","lastModifiedDate":"2021-11-04"},{"lineNumber":4,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.flashcard.FlashCard;","lastModifiedDate":"2021-10-26"},{"lineNumber":5,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.testing.AnswerList;","lastModifiedDate":"2021-10-26"},{"lineNumber":6,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":7,"author":{"gitId":"xkisxk"},"content":"import java.io.InputStream;","lastModifiedDate":"2021-10-17"},{"lineNumber":8,"author":{"gitId":"xkisxk"},"content":"import java.io.PrintStream;","lastModifiedDate":"2021-10-17"},{"lineNumber":9,"author":{"gitId":"xkisxk"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-10-17"},{"lineNumber":10,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":11,"author":{"gitId":"xkisxk"},"content":"/**","lastModifiedDate":"2021-10-17"},{"lineNumber":12,"author":{"gitId":"xkisxk"},"content":" * TestUi class handles the input and output during a test or a review.","lastModifiedDate":"2021-10-17"},{"lineNumber":13,"author":{"gitId":"xkisxk"},"content":" */","lastModifiedDate":"2021-10-17"},{"lineNumber":14,"author":{"gitId":"xkisxk"},"content":"public class TestUi {","lastModifiedDate":"2021-10-17"},{"lineNumber":15,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":16,"author":{"gitId":"xkisxk"},"content":"    public static final String INCORRECT_INPUT_FORMAT_MESSAGE \u003d \"Incorrect input format, \"","lastModifiedDate":"2021-11-03"},{"lineNumber":17,"author":{"gitId":"xkisxk"},"content":"            + \"make sure the description is either a numeric or all.\";","lastModifiedDate":"2021-11-03"},{"lineNumber":18,"author":{"gitId":"xkisxk"},"content":"    public static final String NO_CARDS_TO_REVIEW_MESSAGE \u003d \"Congratulations you don\u0027t have any low scoring cards!\";","lastModifiedDate":"2021-11-03"},{"lineNumber":19,"author":{"gitId":"xkisxk"},"content":"    public static final String DECK_NOT_EXIST_MESSAGE \u003d \"This deck does not exist\";","lastModifiedDate":"2021-11-03"},{"lineNumber":20,"author":{"gitId":"xkisxk"},"content":"    public static final String NO_CARDS_TO_TEST_MESSAGE \u003d \"There are no cards to test.\";","lastModifiedDate":"2021-11-03"},{"lineNumber":21,"author":{"gitId":"xkisxk"},"content":"    public static final String END_TEST_MESSAGE \u003d \"End of test. Returning to main menu...\";","lastModifiedDate":"2021-11-03"},{"lineNumber":22,"author":{"gitId":"xkisxk"},"content":"    public static final String END_REVIEW_MESSAGE \u003d \"End of review. Returning to main menu...\";","lastModifiedDate":"2021-11-03"},{"lineNumber":23,"author":{"gitId":"astralum"},"content":"    /** The message to be displayed when the timer has expired. */","lastModifiedDate":"2021-11-04"},{"lineNumber":24,"author":{"gitId":"astralum"},"content":"    public static final String TIMES_UP_MESSAGE \u003d \"TIME\u0027S UP! You can still input an answer, but it won\u0027t be graded.\";","lastModifiedDate":"2021-11-04"},{"lineNumber":25,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":26,"author":{"gitId":"xkisxk"},"content":"    private final Scanner in;","lastModifiedDate":"2021-10-17"},{"lineNumber":27,"author":{"gitId":"xkisxk"},"content":"    private final PrintStream out;","lastModifiedDate":"2021-10-17"},{"lineNumber":28,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":29,"author":{"gitId":"xkisxk"},"content":"    public TestUi() {","lastModifiedDate":"2021-10-17"},{"lineNumber":30,"author":{"gitId":"xkisxk"},"content":"        this(System.in, System.out);","lastModifiedDate":"2021-10-17"},{"lineNumber":31,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":32,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":33,"author":{"gitId":"xkisxk"},"content":"    public TestUi(InputStream in, PrintStream out) {","lastModifiedDate":"2021-10-17"},{"lineNumber":34,"author":{"gitId":"xkisxk"},"content":"        this.in \u003d new Scanner(in);","lastModifiedDate":"2021-10-17"},{"lineNumber":35,"author":{"gitId":"xkisxk"},"content":"        this.out \u003d out;","lastModifiedDate":"2021-10-17"},{"lineNumber":36,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":37,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":38,"author":{"gitId":"xkisxk"},"content":"    public void showMessage(String input) {","lastModifiedDate":"2021-10-21"},{"lineNumber":39,"author":{"gitId":"xkisxk"},"content":"        out.println(input);","lastModifiedDate":"2021-11-03"},{"lineNumber":40,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":41,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":42,"author":{"gitId":"astralum"},"content":"    public void clearScreen() {","lastModifiedDate":"2021-11-04"},{"lineNumber":43,"author":{"gitId":"astralum"},"content":"        Ansi ansi \u003d Ansi.ansi().eraseScreen();","lastModifiedDate":"2021-11-04"},{"lineNumber":44,"author":{"gitId":"astralum"},"content":"        System.out.print(ansi);","lastModifiedDate":"2021-11-04"},{"lineNumber":45,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-11-04"},{"lineNumber":46,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":47,"author":{"gitId":"xkisxk"},"content":"    public void printDividerLine() {","lastModifiedDate":"2021-10-17"},{"lineNumber":48,"author":{"gitId":"xkisxk"},"content":"        System.out.println(\"--------------------------------------------------\");","lastModifiedDate":"2021-10-17"},{"lineNumber":49,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":50,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":51,"author":{"gitId":"xkisxk"},"content":"    public void printQuestion(FlashCard question, int questionNumber) {","lastModifiedDate":"2021-10-17"},{"lineNumber":52,"author":{"gitId":"xkisxk"},"content":"        out.println(\"Question \" + (questionNumber + 1) + \":\");","lastModifiedDate":"2021-11-03"},{"lineNumber":53,"author":{"gitId":"xkisxk"},"content":"        //display front of card so that user can understand question","lastModifiedDate":"2021-10-17"},{"lineNumber":54,"author":{"gitId":"xkisxk"},"content":"        out.println(question.getFront());","lastModifiedDate":"2021-11-03"},{"lineNumber":55,"author":{"gitId":"xkisxk"},"content":"        out.println(\"Your answer?\");","lastModifiedDate":"2021-11-03"},{"lineNumber":56,"author":{"gitId":"astralum"},"content":"        out.println(); // extra line for timer","lastModifiedDate":"2021-11-04"},{"lineNumber":57,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":58,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":59,"author":{"gitId":"xkisxk"},"content":"    public void printCorrectAnswer(FlashCard question) {","lastModifiedDate":"2021-10-17"},{"lineNumber":60,"author":{"gitId":"xkisxk"},"content":"        out.println(\"Correct answer: \" + question.getBack());","lastModifiedDate":"2021-11-03"},{"lineNumber":61,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":62,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":63,"author":{"gitId":"xkisxk"},"content":"    /**","lastModifiedDate":"2021-10-17"},{"lineNumber":64,"author":{"gitId":"xkisxk"},"content":"     * Prints user\u0027s answer for a specified question to the system output.","lastModifiedDate":"2021-10-17"},{"lineNumber":65,"author":{"gitId":"xkisxk"},"content":"     *","lastModifiedDate":"2021-10-17"},{"lineNumber":66,"author":{"gitId":"xkisxk"},"content":"     * @param userAnswer the user\u0027s answer for the question","lastModifiedDate":"2021-10-17"},{"lineNumber":67,"author":{"gitId":"xkisxk"},"content":"     */","lastModifiedDate":"2021-10-17"},{"lineNumber":68,"author":{"gitId":"xkisxk"},"content":"    public void printUserAnswer(String userAnswer) {","lastModifiedDate":"2021-10-17"},{"lineNumber":69,"author":{"gitId":"xkisxk"},"content":"        out.println(\"Your answer: \" + userAnswer);","lastModifiedDate":"2021-11-03"},{"lineNumber":70,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":71,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":72,"author":{"gitId":"xkisxk"},"content":"    public void printTestOver() {","lastModifiedDate":"2021-10-17"},{"lineNumber":73,"author":{"gitId":"xkisxk"},"content":"        out.println(\"Test Over\");","lastModifiedDate":"2021-11-03"},{"lineNumber":74,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":75,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":76,"author":{"gitId":"xkisxk"},"content":"    public void printStartTest() {","lastModifiedDate":"2021-10-17"},{"lineNumber":77,"author":{"gitId":"xkisxk"},"content":"        out.println(\"Entering test mode...\");","lastModifiedDate":"2021-11-03"},{"lineNumber":78,"author":{"gitId":"xkisxk"},"content":"        out.println(\"Which deck do you want to test?\");","lastModifiedDate":"2021-11-03"},{"lineNumber":79,"author":{"gitId":"xkisxk"},"content":"        out.print(\"Input deck index (0 or \\\"all\\\" to test all decks): \");","lastModifiedDate":"2021-11-03"},{"lineNumber":80,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":81,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":82,"author":{"gitId":"xkisxk"},"content":"    public void printStartReview() {","lastModifiedDate":"2021-10-18"},{"lineNumber":83,"author":{"gitId":"xkisxk"},"content":"        out.println(\"Entering review mode...\");","lastModifiedDate":"2021-11-03"},{"lineNumber":84,"author":{"gitId":"xkisxk"},"content":"        out.println(\"Which deck do you want to review?\");","lastModifiedDate":"2021-11-03"},{"lineNumber":85,"author":{"gitId":"xkisxk"},"content":"        out.print(\"Input deck index (0 or \\\"all\\\" to review all decks): \");","lastModifiedDate":"2021-11-03"},{"lineNumber":86,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":87,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":88,"author":{"gitId":"xkisxk"},"content":"    public void printCorrectAnsMessage() {","lastModifiedDate":"2021-10-17"},{"lineNumber":89,"author":{"gitId":"xkisxk"},"content":"        out.println(\"Well done! You got this question correct\");","lastModifiedDate":"2021-11-03"},{"lineNumber":90,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":91,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":92,"author":{"gitId":"xkisxk"},"content":"    public void printWrongAnsMessage() {","lastModifiedDate":"2021-10-17"},{"lineNumber":93,"author":{"gitId":"xkisxk"},"content":"        out.println(\"You got this question wrong! Take note of the correct answer!\");","lastModifiedDate":"2021-11-03"},{"lineNumber":94,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":95,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":96,"author":{"gitId":"xkisxk"},"content":"    public void printAnswerEmptyError() {","lastModifiedDate":"2021-10-17"},{"lineNumber":97,"author":{"gitId":"xkisxk"},"content":"        out.println(\"Remember to provide an answer next time! Don\u0027t give up!\");","lastModifiedDate":"2021-11-03"},{"lineNumber":98,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":99,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":100,"author":{"gitId":"JWweiyin"},"content":"    public String getUserMessage() {","lastModifiedDate":"2021-11-06"},{"lineNumber":101,"author":{"gitId":"JWweiyin"},"content":"        return in.nextLine();","lastModifiedDate":"2021-11-06"},{"lineNumber":102,"author":{"gitId":"JWweiyin"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":103,"author":{"gitId":"xkisxk"},"content":"}","lastModifiedDate":"2021-10-17"}],"authorContributionMap":{"JWweiyin":4,"astralum":11,"xRossKoh":3,"xkisxk":85}},{"path":"src/test/java/seedu/cardli/AnswerListTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"xRossKoh"},"content":"package seedu.cardli;","lastModifiedDate":"2021-10-26"},{"lineNumber":2,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":3,"author":{"gitId":"xkisxk"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-18"},{"lineNumber":4,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.flashcard.Deck;","lastModifiedDate":"2021-10-26"},{"lineNumber":5,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.flashcard.DeckManager;","lastModifiedDate":"2021-10-26"},{"lineNumber":6,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.flashcard.FlashCard;","lastModifiedDate":"2021-11-07"},{"lineNumber":7,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.testing.Answer;","lastModifiedDate":"2021-11-07"},{"lineNumber":8,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.testing.AnswerList;","lastModifiedDate":"2021-10-26"},{"lineNumber":9,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.testing.TestHistory;","lastModifiedDate":"2021-10-26"},{"lineNumber":10,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.testing.TestManager;","lastModifiedDate":"2021-10-26"},{"lineNumber":11,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":12,"author":{"gitId":"xkisxk"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-18"},{"lineNumber":13,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":14,"author":{"gitId":"xkisxk"},"content":"public class AnswerListTest {","lastModifiedDate":"2021-10-18"},{"lineNumber":15,"author":{"gitId":"xkisxk"},"content":"    @Test","lastModifiedDate":"2021-10-18"},{"lineNumber":16,"author":{"gitId":"xkisxk"},"content":"    public void getScore_noAnswers_expectZero() {","lastModifiedDate":"2021-10-18"},{"lineNumber":17,"author":{"gitId":"xkisxk"},"content":"        Deck deck \u003d new Deck();","lastModifiedDate":"2021-10-18"},{"lineNumber":18,"author":{"gitId":"xkisxk"},"content":"        AnswerList answerList \u003d new AnswerList(deck);","lastModifiedDate":"2021-10-18"},{"lineNumber":19,"author":{"gitId":"xkisxk"},"content":"        assertEquals(0, answerList.getUserScore());","lastModifiedDate":"2021-10-21"},{"lineNumber":20,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":21,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":22,"author":{"gitId":"xkisxk"},"content":"    @Test","lastModifiedDate":"2021-10-18"},{"lineNumber":23,"author":{"gitId":"xkisxk"},"content":"    public void getScore_oneCorrectAnswer_expectOne() {","lastModifiedDate":"2021-10-18"},{"lineNumber":24,"author":{"gitId":"xkisxk"},"content":"        Deck deck \u003d new Deck();","lastModifiedDate":"2021-10-18"},{"lineNumber":25,"author":{"gitId":"xkisxk"},"content":"        deck.addFlashCard(\"card\", \"card\");","lastModifiedDate":"2021-10-18"},{"lineNumber":26,"author":{"gitId":"xkisxk"},"content":"        deck.addFlashCard(\"card2\", \"card2\");","lastModifiedDate":"2021-11-01"},{"lineNumber":27,"author":{"gitId":"xkisxk"},"content":"        AnswerList answerList \u003d new AnswerList(deck);","lastModifiedDate":"2021-10-18"},{"lineNumber":28,"author":{"gitId":"xkisxk"},"content":"        answerList.addAnswer(\"card\", 1);","lastModifiedDate":"2021-10-18"},{"lineNumber":29,"author":{"gitId":"xkisxk"},"content":"        answerList.addAnswer(\"card\", 2);","lastModifiedDate":"2021-11-01"},{"lineNumber":30,"author":{"gitId":"xkisxk"},"content":"        DeckManager deckManager \u003d new DeckManager();","lastModifiedDate":"2021-11-01"},{"lineNumber":31,"author":{"gitId":"xkisxk"},"content":"        TestHistory testHistory \u003d new TestHistory(deckManager);","lastModifiedDate":"2021-11-01"},{"lineNumber":32,"author":{"gitId":"xkisxk"},"content":"        TestManager testManager \u003d new TestManager(testHistory, deckManager);","lastModifiedDate":"2021-11-01"},{"lineNumber":33,"author":{"gitId":"xkisxk"},"content":"        testManager.markTest(answerList);","lastModifiedDate":"2021-10-24"},{"lineNumber":34,"author":{"gitId":"xkisxk"},"content":"        assertEquals(1, answerList.getUserScore());","lastModifiedDate":"2021-10-21"},{"lineNumber":35,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":36,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":37,"author":{"gitId":"xRossKoh"},"content":"    //@@author xRossKoh","lastModifiedDate":"2021-11-07"},{"lineNumber":38,"author":{"gitId":"xRossKoh"},"content":"    @Test","lastModifiedDate":"2021-11-07"},{"lineNumber":39,"author":{"gitId":"xRossKoh"},"content":"    public void testToString() {","lastModifiedDate":"2021-11-07"},{"lineNumber":40,"author":{"gitId":"xRossKoh"},"content":"        Deck deck \u003d new Deck();","lastModifiedDate":"2021-11-07"},{"lineNumber":41,"author":{"gitId":"xRossKoh"},"content":"        deck.addFlashCard(\"card\", \"card\");","lastModifiedDate":"2021-11-07"},{"lineNumber":42,"author":{"gitId":"xRossKoh"},"content":"        deck.addFlashCard(\"card2\", \"card2\");","lastModifiedDate":"2021-11-07"},{"lineNumber":43,"author":{"gitId":"xRossKoh"},"content":"        AnswerList answerList \u003d new AnswerList(deck);","lastModifiedDate":"2021-11-07"},{"lineNumber":44,"author":{"gitId":"xRossKoh"},"content":"        answerList.addAnswer(\"card\", 1);","lastModifiedDate":"2021-11-07"},{"lineNumber":45,"author":{"gitId":"xRossKoh"},"content":"        answerList.addAnswer(\"card\", 2);","lastModifiedDate":"2021-11-07"},{"lineNumber":46,"author":{"gitId":"xRossKoh"},"content":"        DeckManager deckManager \u003d new DeckManager();","lastModifiedDate":"2021-11-07"},{"lineNumber":47,"author":{"gitId":"xRossKoh"},"content":"        TestHistory testHistory \u003d new TestHistory(deckManager);","lastModifiedDate":"2021-11-07"},{"lineNumber":48,"author":{"gitId":"xRossKoh"},"content":"        TestManager testManager \u003d new TestManager(testHistory, deckManager);","lastModifiedDate":"2021-11-07"},{"lineNumber":49,"author":{"gitId":"xRossKoh"},"content":"        testManager.markTest(answerList);","lastModifiedDate":"2021-11-07"},{"lineNumber":50,"author":{"gitId":"xRossKoh"},"content":"        assertEquals(\"Untitled\\n\"","lastModifiedDate":"2021-11-07"},{"lineNumber":51,"author":{"gitId":"xRossKoh"},"content":"                + \"2\\n\"","lastModifiedDate":"2021-11-07"},{"lineNumber":52,"author":{"gitId":"xRossKoh"},"content":"                + \"card | card | 1 | 1\\n\"","lastModifiedDate":"2021-11-07"},{"lineNumber":53,"author":{"gitId":"xRossKoh"},"content":"                + \"card2 | card2 | 0 | 1\\n\"","lastModifiedDate":"2021-11-07"},{"lineNumber":54,"author":{"gitId":"xRossKoh"},"content":"                + \"2\\n\"","lastModifiedDate":"2021-11-07"},{"lineNumber":55,"author":{"gitId":"xRossKoh"},"content":"                + \"card | 1\\n\"","lastModifiedDate":"2021-11-07"},{"lineNumber":56,"author":{"gitId":"xRossKoh"},"content":"                + \"card | 2\\n\"","lastModifiedDate":"2021-11-07"},{"lineNumber":57,"author":{"gitId":"xRossKoh"},"content":"                + \"1\", answerList.toString());","lastModifiedDate":"2021-11-07"},{"lineNumber":58,"author":{"gitId":"xRossKoh"},"content":"    }","lastModifiedDate":"2021-11-07"},{"lineNumber":59,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":60,"author":{"gitId":"xRossKoh"},"content":"    @Test","lastModifiedDate":"2021-11-07"},{"lineNumber":61,"author":{"gitId":"xRossKoh"},"content":"    public void testToJsonObject() {","lastModifiedDate":"2021-11-07"},{"lineNumber":62,"author":{"gitId":"xRossKoh"},"content":"        Deck deck \u003d new Deck();","lastModifiedDate":"2021-11-07"},{"lineNumber":63,"author":{"gitId":"xRossKoh"},"content":"        deck.addFlashCard(\"card\", \"card\");","lastModifiedDate":"2021-11-07"},{"lineNumber":64,"author":{"gitId":"xRossKoh"},"content":"        deck.addFlashCard(\"card2\", \"card2\");","lastModifiedDate":"2021-11-07"},{"lineNumber":65,"author":{"gitId":"xRossKoh"},"content":"        AnswerList answerList \u003d new AnswerList(deck);","lastModifiedDate":"2021-11-07"},{"lineNumber":66,"author":{"gitId":"xRossKoh"},"content":"        answerList.addAnswer(\"card\", 1);","lastModifiedDate":"2021-11-07"},{"lineNumber":67,"author":{"gitId":"xRossKoh"},"content":"        answerList.addAnswer(\"card\", 2);","lastModifiedDate":"2021-11-07"},{"lineNumber":68,"author":{"gitId":"xRossKoh"},"content":"        DeckManager deckManager \u003d new DeckManager();","lastModifiedDate":"2021-11-07"},{"lineNumber":69,"author":{"gitId":"xRossKoh"},"content":"        TestHistory testHistory \u003d new TestHistory(deckManager);","lastModifiedDate":"2021-11-07"},{"lineNumber":70,"author":{"gitId":"xRossKoh"},"content":"        TestManager testManager \u003d new TestManager(testHistory, deckManager);","lastModifiedDate":"2021-11-07"},{"lineNumber":71,"author":{"gitId":"xRossKoh"},"content":"        testManager.markTest(answerList);","lastModifiedDate":"2021-11-07"},{"lineNumber":72,"author":{"gitId":"xRossKoh"},"content":"        assertEquals(\"{\\\"answerList\\\":\"","lastModifiedDate":"2021-11-07"},{"lineNumber":73,"author":{"gitId":"xRossKoh"},"content":"                + \"[{\\\"questionIndex\\\":1,\\\"answer\\\":\\\"card\\\"},\"","lastModifiedDate":"2021-11-07"},{"lineNumber":74,"author":{"gitId":"xRossKoh"},"content":"                + \"{\\\"questionIndex\\\":2,\\\"answer\\\":\\\"card\\\"}],\"","lastModifiedDate":"2021-11-07"},{"lineNumber":75,"author":{"gitId":"xRossKoh"},"content":"                + \"\\\"deck\\\":{\\\"cards\\\":\"","lastModifiedDate":"2021-11-07"},{"lineNumber":76,"author":{"gitId":"xRossKoh"},"content":"                + \"[{\\\"back\\\":\\\"card\\\",\\\"front\\\":\\\"card\\\",\\\"userScore\\\":1,\\\"totalScore\\\":1},\"","lastModifiedDate":"2021-11-07"},{"lineNumber":77,"author":{"gitId":"xRossKoh"},"content":"                + \"{\\\"back\\\":\\\"card2\\\",\\\"front\\\":\\\"card2\\\",\\\"userScore\\\":0,\\\"totalScore\\\":1}],\"","lastModifiedDate":"2021-11-07"},{"lineNumber":78,"author":{"gitId":"xRossKoh"},"content":"                + \"\\\"deckName\\\":\\\"Untitled\\\"},\\\"userScore\\\":1}\",","lastModifiedDate":"2021-11-07"},{"lineNumber":79,"author":{"gitId":"xRossKoh"},"content":"                answerList.toJsonObject().toJSONString());","lastModifiedDate":"2021-11-07"},{"lineNumber":80,"author":{"gitId":"xRossKoh"},"content":"    }","lastModifiedDate":"2021-11-07"},{"lineNumber":81,"author":{"gitId":"xRossKoh"},"content":"}","lastModifiedDate":"2021-10-18"}],"authorContributionMap":{"xRossKoh":54,"xkisxk":27}},{"path":"src/test/java/seedu/cardli/AnswerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"xRossKoh"},"content":"package seedu.cardli;","lastModifiedDate":"2021-10-26"},{"lineNumber":2,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":3,"author":{"gitId":"xRossKoh"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-08"},{"lineNumber":4,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.testing.Answer;","lastModifiedDate":"2021-10-26"},{"lineNumber":5,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":6,"author":{"gitId":"xRossKoh"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-08"},{"lineNumber":7,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":8,"author":{"gitId":"xRossKoh"},"content":"public class AnswerTest {","lastModifiedDate":"2021-10-08"},{"lineNumber":9,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":10,"author":{"gitId":"xRossKoh"},"content":"    @Test","lastModifiedDate":"2021-10-08"},{"lineNumber":11,"author":{"gitId":"xkisxk"},"content":"    public void testGetAnswer_sameAnswer_expectCorrectAnswer() {","lastModifiedDate":"2021-11-01"},{"lineNumber":12,"author":{"gitId":"xRossKoh"},"content":"        assertEquals(\"testAnswer\",","lastModifiedDate":"2021-10-08"},{"lineNumber":13,"author":{"gitId":"xRossKoh"},"content":"                new Answer(\"testAnswer\", 1).getAnswer());","lastModifiedDate":"2021-10-08"},{"lineNumber":14,"author":{"gitId":"xRossKoh"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":15,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":16,"author":{"gitId":"xkisxk"},"content":"    @Test","lastModifiedDate":"2021-11-01"},{"lineNumber":17,"author":{"gitId":"xkisxk"},"content":"    public void testGetQuestionIndex_questionOne_expectOne() {","lastModifiedDate":"2021-11-01"},{"lineNumber":18,"author":{"gitId":"xkisxk"},"content":"        Answer answer \u003d new Answer(\"testAnswer\", 1,true);","lastModifiedDate":"2021-11-01"},{"lineNumber":19,"author":{"gitId":"xkisxk"},"content":"        assertEquals(1, answer.getQuestionIndex());","lastModifiedDate":"2021-11-01"},{"lineNumber":20,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-11-01"},{"lineNumber":21,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":22,"author":{"gitId":"xkisxk"},"content":"    @Test","lastModifiedDate":"2021-11-01"},{"lineNumber":23,"author":{"gitId":"xkisxk"},"content":"    public void testIsAnswered_true_expectTrue() {","lastModifiedDate":"2021-11-01"},{"lineNumber":24,"author":{"gitId":"xkisxk"},"content":"        Answer answer \u003d new Answer(\"testAnswer\", 1,false);","lastModifiedDate":"2021-11-01"},{"lineNumber":25,"author":{"gitId":"xkisxk"},"content":"        answer.setIsAnswered();","lastModifiedDate":"2021-11-01"},{"lineNumber":26,"author":{"gitId":"xkisxk"},"content":"        assertEquals(true, answer.isAnswered());","lastModifiedDate":"2021-11-01"},{"lineNumber":27,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-11-01"},{"lineNumber":28,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":29,"author":{"gitId":"xkisxk"},"content":"    @Test","lastModifiedDate":"2021-11-01"},{"lineNumber":30,"author":{"gitId":"xkisxk"},"content":"    public void testSetAnswer_sameAnswer_expectCorrectAnswer() {","lastModifiedDate":"2021-11-01"},{"lineNumber":31,"author":{"gitId":"xkisxk"},"content":"        Answer answer \u003d new Answer(\"\", 1,true);","lastModifiedDate":"2021-11-01"},{"lineNumber":32,"author":{"gitId":"xkisxk"},"content":"        answer.setAnswer(\"testAnswer\");","lastModifiedDate":"2021-11-01"},{"lineNumber":33,"author":{"gitId":"xkisxk"},"content":"        assertEquals(\"testAnswer\", answer.getAnswer());","lastModifiedDate":"2021-11-01"},{"lineNumber":34,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-11-01"},{"lineNumber":35,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":36,"author":{"gitId":"xRossKoh"},"content":"    //@@author xRossKoh","lastModifiedDate":"2021-11-07"},{"lineNumber":37,"author":{"gitId":"xRossKoh"},"content":"    @Test","lastModifiedDate":"2021-11-07"},{"lineNumber":38,"author":{"gitId":"xRossKoh"},"content":"    public void testToString() {","lastModifiedDate":"2021-11-07"},{"lineNumber":39,"author":{"gitId":"xRossKoh"},"content":"        Answer answer \u003d new Answer(\"testAnswer\", 1,true);","lastModifiedDate":"2021-11-07"},{"lineNumber":40,"author":{"gitId":"xRossKoh"},"content":"        assertEquals(\"testAnswer | 1\\n\", answer.toString());","lastModifiedDate":"2021-11-07"},{"lineNumber":41,"author":{"gitId":"xRossKoh"},"content":"    }","lastModifiedDate":"2021-11-07"},{"lineNumber":42,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":43,"author":{"gitId":"xRossKoh"},"content":"    @Test","lastModifiedDate":"2021-11-07"},{"lineNumber":44,"author":{"gitId":"xRossKoh"},"content":"    public void testToJsonObject() {","lastModifiedDate":"2021-11-07"},{"lineNumber":45,"author":{"gitId":"xRossKoh"},"content":"        Answer answer \u003d new Answer(\"testAnswer\", 1,true);","lastModifiedDate":"2021-11-07"},{"lineNumber":46,"author":{"gitId":"xRossKoh"},"content":"        assertEquals(\"{\\\"questionIndex\\\":1,\\\"answer\\\":\\\"testAnswer\\\"}\",","lastModifiedDate":"2021-11-07"},{"lineNumber":47,"author":{"gitId":"xRossKoh"},"content":"                answer.toJsonObject().toJSONString());","lastModifiedDate":"2021-11-07"},{"lineNumber":48,"author":{"gitId":"xRossKoh"},"content":"    }","lastModifiedDate":"2021-11-07"},{"lineNumber":49,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":50,"author":{"gitId":"xRossKoh"},"content":"}","lastModifiedDate":"2021-10-08"}],"authorContributionMap":{"xRossKoh":29,"xkisxk":21}},{"path":"src/test/java/seedu/cardli/CardLiTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"xRossKoh"},"content":"package seedu.cardli;","lastModifiedDate":"2021-10-26"},{"lineNumber":2,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-02"},{"lineNumber":3,"author":{"gitId":"JWweiyin"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-02"},{"lineNumber":4,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.exceptions.CardLiException;","lastModifiedDate":"2021-10-26"},{"lineNumber":5,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.exceptions.FieldEmptyException;","lastModifiedDate":"2021-10-26"},{"lineNumber":6,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.exceptions.NoSlashException;","lastModifiedDate":"2021-10-26"},{"lineNumber":7,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.flashcard.Deck;","lastModifiedDate":"2021-10-26"},{"lineNumber":8,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-02"},{"lineNumber":9,"author":{"gitId":"xkisxk"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2021-10-04"},{"lineNumber":10,"author":{"gitId":"ThaddeusLim99"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-05"},{"lineNumber":11,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-02"},{"lineNumber":12,"author":{"gitId":"xRossKoh"},"content":"class CardLiTest {","lastModifiedDate":"2021-10-26"},{"lineNumber":13,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-02"},{"lineNumber":14,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-02"},{"lineNumber":15,"author":{"gitId":"xkisxk"},"content":"    @Test","lastModifiedDate":"2021-10-02"},{"lineNumber":16,"author":{"gitId":"xkisxk"},"content":"    public void deleteFlashCard_cardNotExist_expectCardLiException() {","lastModifiedDate":"2021-10-04"},{"lineNumber":17,"author":{"gitId":"xkisxk"},"content":"        Deck fcm \u003d new Deck();","lastModifiedDate":"2021-10-16"},{"lineNumber":18,"author":{"gitId":"JWweiyin"},"content":"        String input \u003d \"abcdef\";","lastModifiedDate":"2021-10-16"},{"lineNumber":19,"author":{"gitId":"JWweiyin"},"content":"        assertThrows(CardLiException.class, () -\u003e fcm.deleteFlashCard(input));","lastModifiedDate":"2021-10-16"},{"lineNumber":20,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-02"},{"lineNumber":21,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":22,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":23,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":24,"author":{"gitId":"JWweiyin"},"content":"    @Test","lastModifiedDate":"2021-10-20"},{"lineNumber":25,"author":{"gitId":"JWweiyin"},"content":"    public void deleteFlashCard_provideIndex_expectDelete() throws CardLiException {","lastModifiedDate":"2021-10-20"},{"lineNumber":26,"author":{"gitId":"JWweiyin"},"content":"        Deck fcm \u003d new Deck();","lastModifiedDate":"2021-10-20"},{"lineNumber":27,"author":{"gitId":"JWweiyin"},"content":"        String[] firstCard \u003d {\"illness\", \"byouki\"};","lastModifiedDate":"2021-10-20"},{"lineNumber":28,"author":{"gitId":"JWweiyin"},"content":"        String[] secondCard \u003d {\"to lose\", \"nakushimasu\"};","lastModifiedDate":"2021-10-20"},{"lineNumber":29,"author":{"gitId":"JWweiyin"},"content":"        fcm.prepareToAddFlashCard(firstCard);","lastModifiedDate":"2021-10-20"},{"lineNumber":30,"author":{"gitId":"JWweiyin"},"content":"        fcm.prepareToAddFlashCard(secondCard);","lastModifiedDate":"2021-10-20"},{"lineNumber":31,"author":{"gitId":"JWweiyin"},"content":"        fcm.deleteFlashCard(\"1\");","lastModifiedDate":"2021-10-20"},{"lineNumber":32,"author":{"gitId":"JWweiyin"},"content":"        fcm.viewAllFlashCards();","lastModifiedDate":"2021-10-20"},{"lineNumber":33,"author":{"gitId":"xkisxk"},"content":"        assertEquals(1, fcm.getCards().size());","lastModifiedDate":"2021-10-21"},{"lineNumber":34,"author":{"gitId":"JWweiyin"},"content":"        fcm.deleteFlashCard(\"1\");","lastModifiedDate":"2021-10-20"},{"lineNumber":35,"author":{"gitId":"JWweiyin"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":36,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":37,"author":{"gitId":"JWweiyin"},"content":"    @Test","lastModifiedDate":"2021-10-20"},{"lineNumber":38,"author":{"gitId":"JWweiyin"},"content":"    public void deleteFlashCard_provideInvalidIndex_expectCardLiException() throws CardLiException {","lastModifiedDate":"2021-10-20"},{"lineNumber":39,"author":{"gitId":"JWweiyin"},"content":"        Deck fcm \u003d new Deck();","lastModifiedDate":"2021-10-20"},{"lineNumber":40,"author":{"gitId":"JWweiyin"},"content":"        String[] firstCard \u003d {\"illness\", \"byouki\"};","lastModifiedDate":"2021-10-20"},{"lineNumber":41,"author":{"gitId":"JWweiyin"},"content":"        String[] secondCard \u003d {\"to lose\", \"nakushimasu\"};","lastModifiedDate":"2021-10-20"},{"lineNumber":42,"author":{"gitId":"JWweiyin"},"content":"        fcm.prepareToAddFlashCard(firstCard);","lastModifiedDate":"2021-10-20"},{"lineNumber":43,"author":{"gitId":"JWweiyin"},"content":"        fcm.prepareToAddFlashCard(secondCard);","lastModifiedDate":"2021-10-20"},{"lineNumber":44,"author":{"gitId":"JWweiyin"},"content":"        fcm.viewAllFlashCards();","lastModifiedDate":"2021-10-20"},{"lineNumber":45,"author":{"gitId":"JWweiyin"},"content":"        assertThrows(CardLiException.class, () -\u003e fcm.deleteFlashCard(\"6\"));","lastModifiedDate":"2021-10-20"},{"lineNumber":46,"author":{"gitId":"JWweiyin"},"content":"        fcm.deleteFlashCard(\"1\");","lastModifiedDate":"2021-10-20"},{"lineNumber":47,"author":{"gitId":"JWweiyin"},"content":"        fcm.deleteFlashCard(\"1\");","lastModifiedDate":"2021-10-20"},{"lineNumber":48,"author":{"gitId":"JWweiyin"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":49,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":50,"author":{"gitId":"JWweiyin"},"content":"    @Test","lastModifiedDate":"2021-10-20"},{"lineNumber":51,"author":{"gitId":"JWweiyin"},"content":"    public void deleteFlashCard_provideNegativeIndex_expectCardLiException() throws CardLiException {","lastModifiedDate":"2021-10-20"},{"lineNumber":52,"author":{"gitId":"JWweiyin"},"content":"        Deck fcm \u003d new Deck();","lastModifiedDate":"2021-10-20"},{"lineNumber":53,"author":{"gitId":"JWweiyin"},"content":"        String[] firstCard \u003d {\"illness\", \"byouki\"};","lastModifiedDate":"2021-10-20"},{"lineNumber":54,"author":{"gitId":"JWweiyin"},"content":"        String[] secondCard \u003d {\"to lose\", \"nakushimasu\"};","lastModifiedDate":"2021-10-20"},{"lineNumber":55,"author":{"gitId":"JWweiyin"},"content":"        fcm.prepareToAddFlashCard(firstCard);","lastModifiedDate":"2021-10-20"},{"lineNumber":56,"author":{"gitId":"JWweiyin"},"content":"        fcm.prepareToAddFlashCard(secondCard);","lastModifiedDate":"2021-10-20"},{"lineNumber":57,"author":{"gitId":"JWweiyin"},"content":"        fcm.viewAllFlashCards();","lastModifiedDate":"2021-10-20"},{"lineNumber":58,"author":{"gitId":"JWweiyin"},"content":"        assertThrows(CardLiException.class, () -\u003e fcm.deleteFlashCard(\"0\"));","lastModifiedDate":"2021-10-20"},{"lineNumber":59,"author":{"gitId":"JWweiyin"},"content":"        fcm.deleteFlashCard(\"1\");","lastModifiedDate":"2021-10-20"},{"lineNumber":60,"author":{"gitId":"JWweiyin"},"content":"        fcm.deleteFlashCard(\"1\");","lastModifiedDate":"2021-10-20"},{"lineNumber":61,"author":{"gitId":"JWweiyin"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":62,"author":{"gitId":"JWweiyin"},"content":"}","lastModifiedDate":"2021-10-02"}],"authorContributionMap":{"JWweiyin":49,"ThaddeusLim99":1,"xRossKoh":6,"xkisxk":6}},{"path":"src/test/java/seedu/cardli/DeckTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"xRossKoh"},"content":"//@@author xRossKoh","lastModifiedDate":"2021-11-07"},{"lineNumber":2,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":3,"author":{"gitId":"xRossKoh"},"content":"package seedu.cardli;","lastModifiedDate":"2021-11-07"},{"lineNumber":4,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":5,"author":{"gitId":"xRossKoh"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-11-07"},{"lineNumber":6,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.flashcard.FlashCard;","lastModifiedDate":"2021-11-07"},{"lineNumber":7,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.flashcard.Deck;","lastModifiedDate":"2021-11-07"},{"lineNumber":8,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":9,"author":{"gitId":"xRossKoh"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-11-07"},{"lineNumber":10,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":11,"author":{"gitId":"xRossKoh"},"content":"public class DeckTest {","lastModifiedDate":"2021-11-07"},{"lineNumber":12,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":13,"author":{"gitId":"xRossKoh"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":14,"author":{"gitId":"xRossKoh"},"content":"     * Tests toString() and Deck() constructor.","lastModifiedDate":"2021-11-07"},{"lineNumber":15,"author":{"gitId":"xRossKoh"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":16,"author":{"gitId":"xRossKoh"},"content":"    @Test","lastModifiedDate":"2021-11-07"},{"lineNumber":17,"author":{"gitId":"xRossKoh"},"content":"    public void testToString() {","lastModifiedDate":"2021-11-07"},{"lineNumber":18,"author":{"gitId":"xRossKoh"},"content":"        Deck deck \u003d new Deck();","lastModifiedDate":"2021-11-07"},{"lineNumber":19,"author":{"gitId":"xRossKoh"},"content":"        deck.addFlashCard(\"testFront1\", \"testBack1\");","lastModifiedDate":"2021-11-07"},{"lineNumber":20,"author":{"gitId":"xRossKoh"},"content":"        assertEquals(\"Untitled\\n1\\n\"","lastModifiedDate":"2021-11-07"},{"lineNumber":21,"author":{"gitId":"xRossKoh"},"content":"                + \"testFront1 | testBack1 | 0 | 0\\n\", deck.toString());","lastModifiedDate":"2021-11-07"},{"lineNumber":22,"author":{"gitId":"xRossKoh"},"content":"    }","lastModifiedDate":"2021-11-07"},{"lineNumber":23,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":24,"author":{"gitId":"xRossKoh"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":25,"author":{"gitId":"xRossKoh"},"content":"     * Tests toJSONObject(), Deck(deckName) constructor","lastModifiedDate":"2021-11-07"},{"lineNumber":26,"author":{"gitId":"xRossKoh"},"content":"     * and all 3 implementations of addFlashCard().","lastModifiedDate":"2021-11-07"},{"lineNumber":27,"author":{"gitId":"xRossKoh"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":28,"author":{"gitId":"xRossKoh"},"content":"    @Test","lastModifiedDate":"2021-11-07"},{"lineNumber":29,"author":{"gitId":"xRossKoh"},"content":"    public void testToJsonObject() {","lastModifiedDate":"2021-11-07"},{"lineNumber":30,"author":{"gitId":"xRossKoh"},"content":"        FlashCard flashCard \u003d new FlashCard(\"testFront3\", \"testBack3\", 1, 2);","lastModifiedDate":"2021-11-07"},{"lineNumber":31,"author":{"gitId":"xRossKoh"},"content":"        Deck deck \u003d new Deck(\"testDeck\");","lastModifiedDate":"2021-11-07"},{"lineNumber":32,"author":{"gitId":"xRossKoh"},"content":"        deck.addFlashCard(\"testFront1\", \"testBack1\");","lastModifiedDate":"2021-11-07"},{"lineNumber":33,"author":{"gitId":"xRossKoh"},"content":"        deck.addFlashCard(\"testFront2\", \"testBack2\", 2, 3);","lastModifiedDate":"2021-11-07"},{"lineNumber":34,"author":{"gitId":"xRossKoh"},"content":"        deck.addFlashCard(flashCard);","lastModifiedDate":"2021-11-07"},{"lineNumber":35,"author":{"gitId":"xRossKoh"},"content":"        assertEquals(\"{\\\"cards\\\":[\"","lastModifiedDate":"2021-11-07"},{"lineNumber":36,"author":{"gitId":"xRossKoh"},"content":"                + \"{\\\"back\\\":\\\"testBack1\\\",\\\"front\\\":\\\"testFront1\\\",\\\"userScore\\\":0,\\\"totalScore\\\":0},\"","lastModifiedDate":"2021-11-07"},{"lineNumber":37,"author":{"gitId":"xRossKoh"},"content":"                + \"{\\\"back\\\":\\\"testBack2\\\",\\\"front\\\":\\\"testFront2\\\",\\\"userScore\\\":2,\\\"totalScore\\\":3},\"","lastModifiedDate":"2021-11-07"},{"lineNumber":38,"author":{"gitId":"xRossKoh"},"content":"                + \"{\\\"back\\\":\\\"testBack3\\\",\\\"front\\\":\\\"testFront3\\\",\\\"userScore\\\":1,\\\"totalScore\\\":2}],\"","lastModifiedDate":"2021-11-07"},{"lineNumber":39,"author":{"gitId":"xRossKoh"},"content":"                + \"\\\"deckName\\\":\\\"testDeck\\\"}\", deck.toJsonObject().toJSONString());","lastModifiedDate":"2021-11-07"},{"lineNumber":40,"author":{"gitId":"xRossKoh"},"content":"    }","lastModifiedDate":"2021-11-07"},{"lineNumber":41,"author":{"gitId":"xRossKoh"},"content":"}","lastModifiedDate":"2021-11-07"}],"authorContributionMap":{"xRossKoh":41}},{"path":"src/test/java/seedu/cardli/DukeTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"xRossKoh"},"content":"package seedu.cardli;","lastModifiedDate":"2021-10-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2020-05-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2020-05-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"class DukeTest {","lastModifiedDate":"2021-10-26"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2020-05-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public void sampleTest() {","lastModifiedDate":"2020-05-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"        assertTrue(true);","lastModifiedDate":"2020-05-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-24"}],"authorContributionMap":{"xRossKoh":1,"-":11}},{"path":"src/test/java/seedu/cardli/EditCardCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"JWweiyin"},"content":"package seedu.cardli;","lastModifiedDate":"2021-10-26"},{"lineNumber":2,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":3,"author":{"gitId":"ThaddeusLim99"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-26"},{"lineNumber":4,"author":{"gitId":"JWweiyin"},"content":"import seedu.cardli.commands.Command;","lastModifiedDate":"2021-10-26"},{"lineNumber":5,"author":{"gitId":"JWweiyin"},"content":"import seedu.cardli.commands.CommandResult;","lastModifiedDate":"2021-10-26"},{"lineNumber":6,"author":{"gitId":"JWweiyin"},"content":"import seedu.cardli.commands.deck.EditCardCommand;","lastModifiedDate":"2021-10-26"},{"lineNumber":7,"author":{"gitId":"JWweiyin"},"content":"import seedu.cardli.flashcard.Deck;","lastModifiedDate":"2021-10-26"},{"lineNumber":8,"author":{"gitId":"JWweiyin"},"content":"import seedu.cardli.flashcard.DeckManager;","lastModifiedDate":"2021-11-06"},{"lineNumber":9,"author":{"gitId":"JWweiyin"},"content":"import seedu.cardli.parser.Parser;","lastModifiedDate":"2021-10-26"},{"lineNumber":10,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":11,"author":{"gitId":"ThaddeusLim99"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-26"},{"lineNumber":12,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":13,"author":{"gitId":"ThaddeusLim99"},"content":"public class EditCardCommandTest {","lastModifiedDate":"2021-10-26"},{"lineNumber":14,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":15,"author":{"gitId":"ThaddeusLim99"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":16,"author":{"gitId":"ThaddeusLim99"},"content":"    public void execute_emptyString_expectFieldEmptyErrorMessage() {","lastModifiedDate":"2021-11-01"},{"lineNumber":17,"author":{"gitId":"ThaddeusLim99"},"content":"        Deck deck \u003d new Deck();","lastModifiedDate":"2021-10-26"},{"lineNumber":18,"author":{"gitId":"JWweiyin"},"content":"        DeckManager deckManager \u003d new DeckManager();","lastModifiedDate":"2021-11-06"},{"lineNumber":19,"author":{"gitId":"ThaddeusLim99"},"content":"        deck.addFlashCard(\"card\", \"card\");","lastModifiedDate":"2021-10-26"},{"lineNumber":20,"author":{"gitId":"ThaddeusLim99"},"content":"        String input \u003d \"edit \";","lastModifiedDate":"2021-10-26"},{"lineNumber":21,"author":{"gitId":"ThaddeusLim99"},"content":"        String commandType \u003d Parser.getCommandType(input);","lastModifiedDate":"2021-10-26"},{"lineNumber":22,"author":{"gitId":"ThaddeusLim99"},"content":"        String arguments \u003d Parser.getCommandArguments(commandType, input);","lastModifiedDate":"2021-10-26"},{"lineNumber":23,"author":{"gitId":"JWweiyin"},"content":"        Command test \u003d new EditCardCommand(arguments, deck, deckManager);","lastModifiedDate":"2021-11-07"},{"lineNumber":24,"author":{"gitId":"ThaddeusLim99"},"content":"        CommandResult result \u003d test.execute();","lastModifiedDate":"2021-10-26"},{"lineNumber":25,"author":{"gitId":"ThaddeusLim99"},"content":"        String output \u003d result.getResult();","lastModifiedDate":"2021-10-26"},{"lineNumber":26,"author":{"gitId":"ThaddeusLim99"},"content":"        assertEquals(\"You cannot leave any field empty! \"","lastModifiedDate":"2021-10-26"},{"lineNumber":27,"author":{"gitId":"ThaddeusLim99"},"content":"                + \"Format should be\\nedit /c \u003ccard index\u003e /s \u003cside\u003e /i \u003cinput\u003e\", output);","lastModifiedDate":"2021-11-01"},{"lineNumber":28,"author":{"gitId":"ThaddeusLim99"},"content":"    }","lastModifiedDate":"2021-11-01"},{"lineNumber":29,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":30,"author":{"gitId":"ThaddeusLim99"},"content":"    @Test","lastModifiedDate":"2021-11-01"},{"lineNumber":31,"author":{"gitId":"ThaddeusLim99"},"content":"    public void execute_duplicateCorrectFlags_expectFlagArgumentErrorMessage() {","lastModifiedDate":"2021-11-03"},{"lineNumber":32,"author":{"gitId":"ThaddeusLim99"},"content":"        Deck deck \u003d new Deck();","lastModifiedDate":"2021-11-01"},{"lineNumber":33,"author":{"gitId":"JWweiyin"},"content":"        DeckManager deckManager \u003d new DeckManager();","lastModifiedDate":"2021-11-06"},{"lineNumber":34,"author":{"gitId":"ThaddeusLim99"},"content":"        deck.addFlashCard(\"card\", \"card\");","lastModifiedDate":"2021-11-01"},{"lineNumber":35,"author":{"gitId":"ThaddeusLim99"},"content":"        String input \u003d \"edit /c /c /s /s /i /i\";","lastModifiedDate":"2021-11-01"},{"lineNumber":36,"author":{"gitId":"ThaddeusLim99"},"content":"        String commandType \u003d Parser.getCommandType(input);","lastModifiedDate":"2021-11-01"},{"lineNumber":37,"author":{"gitId":"ThaddeusLim99"},"content":"        String arguments \u003d Parser.getCommandArguments(commandType, input);","lastModifiedDate":"2021-11-01"},{"lineNumber":38,"author":{"gitId":"JWweiyin"},"content":"        Command test \u003d new EditCardCommand(arguments, deck, deckManager);","lastModifiedDate":"2021-11-06"},{"lineNumber":39,"author":{"gitId":"ThaddeusLim99"},"content":"        CommandResult result \u003d test.execute();","lastModifiedDate":"2021-11-01"},{"lineNumber":40,"author":{"gitId":"ThaddeusLim99"},"content":"        String output \u003d result.getResult();","lastModifiedDate":"2021-11-01"},{"lineNumber":41,"author":{"gitId":"ThaddeusLim99"},"content":"        assertEquals(\"You should not use this command\u0027s flag as your argument\", output);","lastModifiedDate":"2021-11-03"},{"lineNumber":42,"author":{"gitId":"ThaddeusLim99"},"content":"    }","lastModifiedDate":"2021-11-01"},{"lineNumber":43,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":44,"author":{"gitId":"ThaddeusLim99"},"content":"    @Test","lastModifiedDate":"2021-11-01"},{"lineNumber":45,"author":{"gitId":"ThaddeusLim99"},"content":"    public void execute_incorrectFlags_expectMissingFlagMessage() {","lastModifiedDate":"2021-11-03"},{"lineNumber":46,"author":{"gitId":"ThaddeusLim99"},"content":"        Deck deck \u003d new Deck();","lastModifiedDate":"2021-11-01"},{"lineNumber":47,"author":{"gitId":"JWweiyin"},"content":"        DeckManager deckManager \u003d new DeckManager();","lastModifiedDate":"2021-11-06"},{"lineNumber":48,"author":{"gitId":"ThaddeusLim99"},"content":"        deck.addFlashCard(\"card\", \"card\");","lastModifiedDate":"2021-11-01"},{"lineNumber":49,"author":{"gitId":"ThaddeusLim99"},"content":"        String input \u003d \"edit /d 1 /j back /e noice\";","lastModifiedDate":"2021-11-01"},{"lineNumber":50,"author":{"gitId":"ThaddeusLim99"},"content":"        String commandType \u003d Parser.getCommandType(input);","lastModifiedDate":"2021-11-01"},{"lineNumber":51,"author":{"gitId":"ThaddeusLim99"},"content":"        String arguments \u003d Parser.getCommandArguments(commandType, input);","lastModifiedDate":"2021-11-01"},{"lineNumber":52,"author":{"gitId":"JWweiyin"},"content":"        Command test \u003d new EditCardCommand(arguments, deck, deckManager);","lastModifiedDate":"2021-11-06"},{"lineNumber":53,"author":{"gitId":"ThaddeusLim99"},"content":"        CommandResult result \u003d test.execute();","lastModifiedDate":"2021-11-01"},{"lineNumber":54,"author":{"gitId":"ThaddeusLim99"},"content":"        String output \u003d result.getResult();","lastModifiedDate":"2021-11-01"},{"lineNumber":55,"author":{"gitId":"ThaddeusLim99"},"content":"        assertEquals(\"You are missing the relevant flag/flags\", output);","lastModifiedDate":"2021-11-03"},{"lineNumber":56,"author":{"gitId":"ThaddeusLim99"},"content":"    }","lastModifiedDate":"2021-11-01"},{"lineNumber":57,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":58,"author":{"gitId":"ThaddeusLim99"},"content":"    @Test","lastModifiedDate":"2021-11-01"},{"lineNumber":59,"author":{"gitId":"ThaddeusLim99"},"content":"    public void execute_swappedFlagOrder_expectWrongOrderErrorMessage() {","lastModifiedDate":"2021-11-01"},{"lineNumber":60,"author":{"gitId":"ThaddeusLim99"},"content":"        Deck deck \u003d new Deck();","lastModifiedDate":"2021-11-01"},{"lineNumber":61,"author":{"gitId":"JWweiyin"},"content":"        DeckManager deckManager \u003d new DeckManager();","lastModifiedDate":"2021-11-06"},{"lineNumber":62,"author":{"gitId":"ThaddeusLim99"},"content":"        deck.addFlashCard(\"card\", \"card\");","lastModifiedDate":"2021-11-01"},{"lineNumber":63,"author":{"gitId":"ThaddeusLim99"},"content":"        String input \u003d \"edit /c 1 /i name /s front\";","lastModifiedDate":"2021-11-01"},{"lineNumber":64,"author":{"gitId":"ThaddeusLim99"},"content":"        String commandType \u003d Parser.getCommandType(input);","lastModifiedDate":"2021-11-01"},{"lineNumber":65,"author":{"gitId":"ThaddeusLim99"},"content":"        String arguments \u003d Parser.getCommandArguments(commandType, input);","lastModifiedDate":"2021-11-01"},{"lineNumber":66,"author":{"gitId":"JWweiyin"},"content":"        Command test \u003d new EditCardCommand(arguments, deck, deckManager);","lastModifiedDate":"2021-11-06"},{"lineNumber":67,"author":{"gitId":"ThaddeusLim99"},"content":"        CommandResult result \u003d test.execute();","lastModifiedDate":"2021-11-01"},{"lineNumber":68,"author":{"gitId":"ThaddeusLim99"},"content":"        String output \u003d result.getResult();","lastModifiedDate":"2021-11-01"},{"lineNumber":69,"author":{"gitId":"ThaddeusLim99"},"content":"        assertEquals(\"/c should come before /s, which should come before /i!\"","lastModifiedDate":"2021-11-01"},{"lineNumber":70,"author":{"gitId":"ThaddeusLim99"},"content":"                + \" Format should be\\nedit /c \u003ccard index\u003e /s \u003cside\u003e /i \u003cinput\u003e\", output);","lastModifiedDate":"2021-11-01"},{"lineNumber":71,"author":{"gitId":"ThaddeusLim99"},"content":"    }","lastModifiedDate":"2021-11-01"},{"lineNumber":72,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":73,"author":{"gitId":"ThaddeusLim99"},"content":"    @Test","lastModifiedDate":"2021-11-01"},{"lineNumber":74,"author":{"gitId":"ThaddeusLim99"},"content":"    public void execute_emptyArgument_expectFieldEmptyErrorMessage() {","lastModifiedDate":"2021-11-01"},{"lineNumber":75,"author":{"gitId":"ThaddeusLim99"},"content":"        Deck deck \u003d new Deck();","lastModifiedDate":"2021-11-01"},{"lineNumber":76,"author":{"gitId":"JWweiyin"},"content":"        DeckManager deckManager \u003d new DeckManager();","lastModifiedDate":"2021-11-06"},{"lineNumber":77,"author":{"gitId":"ThaddeusLim99"},"content":"        deck.addFlashCard(\"card\", \"card\");","lastModifiedDate":"2021-11-01"},{"lineNumber":78,"author":{"gitId":"ThaddeusLim99"},"content":"        String input \u003d \"edit /c /s /i\";","lastModifiedDate":"2021-11-01"},{"lineNumber":79,"author":{"gitId":"ThaddeusLim99"},"content":"        String commandType \u003d Parser.getCommandType(input);","lastModifiedDate":"2021-11-01"},{"lineNumber":80,"author":{"gitId":"ThaddeusLim99"},"content":"        String arguments \u003d Parser.getCommandArguments(commandType, input);","lastModifiedDate":"2021-11-01"},{"lineNumber":81,"author":{"gitId":"JWweiyin"},"content":"        Command test \u003d new EditCardCommand(arguments, deck, deckManager);","lastModifiedDate":"2021-11-06"},{"lineNumber":82,"author":{"gitId":"ThaddeusLim99"},"content":"        CommandResult result \u003d test.execute();","lastModifiedDate":"2021-11-01"},{"lineNumber":83,"author":{"gitId":"ThaddeusLim99"},"content":"        String output \u003d result.getResult();","lastModifiedDate":"2021-11-01"},{"lineNumber":84,"author":{"gitId":"ThaddeusLim99"},"content":"        assertEquals(\"You cannot leave any field empty! \"","lastModifiedDate":"2021-11-01"},{"lineNumber":85,"author":{"gitId":"ThaddeusLim99"},"content":"                + \"Format should be\\nedit /c \u003ccard index\u003e /s \u003cside\u003e /i \u003cinput\u003e\", output);","lastModifiedDate":"2021-11-01"},{"lineNumber":86,"author":{"gitId":"ThaddeusLim99"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":87,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":88,"author":{"gitId":"ThaddeusLim99"},"content":"    @Test","lastModifiedDate":"2021-11-01"},{"lineNumber":89,"author":{"gitId":"ThaddeusLim99"},"content":"    public void execute_incorrectFlagOrder_expectInvalidArgumentsMessage() {","lastModifiedDate":"2021-11-01"},{"lineNumber":90,"author":{"gitId":"ThaddeusLim99"},"content":"        Deck deck \u003d new Deck();","lastModifiedDate":"2021-11-01"},{"lineNumber":91,"author":{"gitId":"JWweiyin"},"content":"        DeckManager deckManager \u003d new DeckManager();","lastModifiedDate":"2021-11-06"},{"lineNumber":92,"author":{"gitId":"ThaddeusLim99"},"content":"        deck.addFlashCard(\"card\", \"card\");","lastModifiedDate":"2021-11-01"},{"lineNumber":93,"author":{"gitId":"ThaddeusLim99"},"content":"        String input \u003d \"edit 1 back noice /c /s /i\";","lastModifiedDate":"2021-11-01"},{"lineNumber":94,"author":{"gitId":"ThaddeusLim99"},"content":"        String commandType \u003d Parser.getCommandType(input);","lastModifiedDate":"2021-11-01"},{"lineNumber":95,"author":{"gitId":"ThaddeusLim99"},"content":"        String arguments \u003d Parser.getCommandArguments(commandType, input);","lastModifiedDate":"2021-11-01"},{"lineNumber":96,"author":{"gitId":"JWweiyin"},"content":"        Command test \u003d new EditCardCommand(arguments, deck, deckManager);","lastModifiedDate":"2021-11-06"},{"lineNumber":97,"author":{"gitId":"ThaddeusLim99"},"content":"        CommandResult result \u003d test.execute();","lastModifiedDate":"2021-11-01"},{"lineNumber":98,"author":{"gitId":"ThaddeusLim99"},"content":"        String output \u003d result.getResult();","lastModifiedDate":"2021-11-01"},{"lineNumber":99,"author":{"gitId":"ThaddeusLim99"},"content":"        assertEquals(\"Please use the correct flags and in the correct order! \"","lastModifiedDate":"2021-11-01"},{"lineNumber":100,"author":{"gitId":"ThaddeusLim99"},"content":"                + \"\\nFormat should be edit /c \u003ccard index\u003e /s \u003cside\u003e /i \u003cinput\u003e\", output);","lastModifiedDate":"2021-11-03"},{"lineNumber":101,"author":{"gitId":"ThaddeusLim99"},"content":"    }","lastModifiedDate":"2021-11-01"},{"lineNumber":102,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":103,"author":{"gitId":"ThaddeusLim99"},"content":"    @Test","lastModifiedDate":"2021-11-01"},{"lineNumber":104,"author":{"gitId":"ThaddeusLim99"},"content":"    public void execute_incorrectSide_expectInvalidSideErrorMessage() {","lastModifiedDate":"2021-11-01"},{"lineNumber":105,"author":{"gitId":"ThaddeusLim99"},"content":"        Deck deck \u003d new Deck();","lastModifiedDate":"2021-11-01"},{"lineNumber":106,"author":{"gitId":"JWweiyin"},"content":"        DeckManager deckManager \u003d new DeckManager();","lastModifiedDate":"2021-11-06"},{"lineNumber":107,"author":{"gitId":"ThaddeusLim99"},"content":"        deck.addFlashCard(\"card\", \"card\");","lastModifiedDate":"2021-11-01"},{"lineNumber":108,"author":{"gitId":"ThaddeusLim99"},"content":"        String input \u003d \"edit /c 1 /s middle /i name\";","lastModifiedDate":"2021-11-01"},{"lineNumber":109,"author":{"gitId":"ThaddeusLim99"},"content":"        String commandType \u003d Parser.getCommandType(input);","lastModifiedDate":"2021-11-01"},{"lineNumber":110,"author":{"gitId":"ThaddeusLim99"},"content":"        String arguments \u003d Parser.getCommandArguments(commandType, input);","lastModifiedDate":"2021-11-01"},{"lineNumber":111,"author":{"gitId":"JWweiyin"},"content":"        Command test \u003d new EditCardCommand(arguments, deck, deckManager);","lastModifiedDate":"2021-11-06"},{"lineNumber":112,"author":{"gitId":"ThaddeusLim99"},"content":"        CommandResult result \u003d test.execute();","lastModifiedDate":"2021-11-01"},{"lineNumber":113,"author":{"gitId":"ThaddeusLim99"},"content":"        String output \u003d result.getResult();","lastModifiedDate":"2021-11-01"},{"lineNumber":114,"author":{"gitId":"ThaddeusLim99"},"content":"        assertEquals(\"What side is this? It\u0027s only either front or back\", output);","lastModifiedDate":"2021-11-01"},{"lineNumber":115,"author":{"gitId":"ThaddeusLim99"},"content":"    }","lastModifiedDate":"2021-11-01"},{"lineNumber":116,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":117,"author":{"gitId":"ThaddeusLim99"},"content":"    @Test","lastModifiedDate":"2021-11-01"},{"lineNumber":118,"author":{"gitId":"ThaddeusLim99"},"content":"    public void execute_invalidIntegerIndex_expectInvalidIndexErrorMessage() {","lastModifiedDate":"2021-11-01"},{"lineNumber":119,"author":{"gitId":"ThaddeusLim99"},"content":"        Deck deck \u003d new Deck();","lastModifiedDate":"2021-11-01"},{"lineNumber":120,"author":{"gitId":"JWweiyin"},"content":"        DeckManager deckManager \u003d new DeckManager();","lastModifiedDate":"2021-11-06"},{"lineNumber":121,"author":{"gitId":"ThaddeusLim99"},"content":"        deck.addFlashCard(\"card\", \"card\");","lastModifiedDate":"2021-11-01"},{"lineNumber":122,"author":{"gitId":"ThaddeusLim99"},"content":"        String input \u003d \"edit /c 2 /s front /i name\";","lastModifiedDate":"2021-11-01"},{"lineNumber":123,"author":{"gitId":"ThaddeusLim99"},"content":"        String commandType \u003d Parser.getCommandType(input);","lastModifiedDate":"2021-11-01"},{"lineNumber":124,"author":{"gitId":"ThaddeusLim99"},"content":"        String arguments \u003d Parser.getCommandArguments(commandType, input);","lastModifiedDate":"2021-11-01"},{"lineNumber":125,"author":{"gitId":"JWweiyin"},"content":"        Command test \u003d new EditCardCommand(arguments, deck, deckManager);","lastModifiedDate":"2021-11-06"},{"lineNumber":126,"author":{"gitId":"ThaddeusLim99"},"content":"        CommandResult result \u003d test.execute();","lastModifiedDate":"2021-11-01"},{"lineNumber":127,"author":{"gitId":"ThaddeusLim99"},"content":"        String output \u003d result.getResult();","lastModifiedDate":"2021-11-01"},{"lineNumber":128,"author":{"gitId":"ThaddeusLim99"},"content":"        assertEquals(\"Incorrect index for Card!\", output);","lastModifiedDate":"2021-11-01"},{"lineNumber":129,"author":{"gitId":"ThaddeusLim99"},"content":"    }","lastModifiedDate":"2021-11-01"},{"lineNumber":130,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":131,"author":{"gitId":"ThaddeusLim99"},"content":"    @Test","lastModifiedDate":"2021-11-01"},{"lineNumber":132,"author":{"gitId":"ThaddeusLim99"},"content":"    public void execute_negativeIntegerIndex_expectArgumentTypeErrorMessage() {","lastModifiedDate":"2021-11-01"},{"lineNumber":133,"author":{"gitId":"ThaddeusLim99"},"content":"        Deck deck \u003d new Deck();","lastModifiedDate":"2021-11-01"},{"lineNumber":134,"author":{"gitId":"JWweiyin"},"content":"        DeckManager deckManager \u003d new DeckManager();","lastModifiedDate":"2021-11-06"},{"lineNumber":135,"author":{"gitId":"ThaddeusLim99"},"content":"        deck.addFlashCard(\"card\", \"card\");","lastModifiedDate":"2021-11-01"},{"lineNumber":136,"author":{"gitId":"ThaddeusLim99"},"content":"        String input \u003d \"edit /c -1 /s front /i name\";","lastModifiedDate":"2021-11-01"},{"lineNumber":137,"author":{"gitId":"ThaddeusLim99"},"content":"        String commandType \u003d Parser.getCommandType(input);","lastModifiedDate":"2021-11-01"},{"lineNumber":138,"author":{"gitId":"ThaddeusLim99"},"content":"        String arguments \u003d Parser.getCommandArguments(commandType, input);","lastModifiedDate":"2021-11-01"},{"lineNumber":139,"author":{"gitId":"JWweiyin"},"content":"        Command test \u003d new EditCardCommand(arguments, deck, deckManager);","lastModifiedDate":"2021-11-06"},{"lineNumber":140,"author":{"gitId":"ThaddeusLim99"},"content":"        CommandResult result \u003d test.execute();","lastModifiedDate":"2021-11-01"},{"lineNumber":141,"author":{"gitId":"ThaddeusLim99"},"content":"        String output \u003d result.getResult();","lastModifiedDate":"2021-11-01"},{"lineNumber":142,"author":{"gitId":"ThaddeusLim99"},"content":"        assertEquals(\"You can only input the index of the card, which is \"","lastModifiedDate":"2021-11-01"},{"lineNumber":143,"author":{"gitId":"ThaddeusLim99"},"content":"                + \"a positive integer!\", output);","lastModifiedDate":"2021-11-01"},{"lineNumber":144,"author":{"gitId":"ThaddeusLim99"},"content":"    }","lastModifiedDate":"2021-11-01"},{"lineNumber":145,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":146,"author":{"gitId":"ThaddeusLim99"},"content":"    @Test","lastModifiedDate":"2021-11-01"},{"lineNumber":147,"author":{"gitId":"ThaddeusLim99"},"content":"    public void execute_stringCard_expectArgumentTypeErrorMessage() {","lastModifiedDate":"2021-11-01"},{"lineNumber":148,"author":{"gitId":"ThaddeusLim99"},"content":"        Deck deck \u003d new Deck();","lastModifiedDate":"2021-11-01"},{"lineNumber":149,"author":{"gitId":"JWweiyin"},"content":"        DeckManager deckManager \u003d new DeckManager();","lastModifiedDate":"2021-11-06"},{"lineNumber":150,"author":{"gitId":"ThaddeusLim99"},"content":"        deck.addFlashCard(\"card\", \"card\");","lastModifiedDate":"2021-11-01"},{"lineNumber":151,"author":{"gitId":"ThaddeusLim99"},"content":"        String input \u003d \"edit /c abc /s front /i name\";","lastModifiedDate":"2021-11-01"},{"lineNumber":152,"author":{"gitId":"ThaddeusLim99"},"content":"        String commandType \u003d Parser.getCommandType(input);","lastModifiedDate":"2021-11-01"},{"lineNumber":153,"author":{"gitId":"ThaddeusLim99"},"content":"        String arguments \u003d Parser.getCommandArguments(commandType, input);","lastModifiedDate":"2021-11-01"},{"lineNumber":154,"author":{"gitId":"JWweiyin"},"content":"        Command test \u003d new EditCardCommand(arguments, deck, deckManager);","lastModifiedDate":"2021-11-06"},{"lineNumber":155,"author":{"gitId":"ThaddeusLim99"},"content":"        CommandResult result \u003d test.execute();","lastModifiedDate":"2021-11-01"},{"lineNumber":156,"author":{"gitId":"ThaddeusLim99"},"content":"        String output \u003d result.getResult();","lastModifiedDate":"2021-11-01"},{"lineNumber":157,"author":{"gitId":"ThaddeusLim99"},"content":"        assertEquals(\"You can only input the index of the card, which is \"","lastModifiedDate":"2021-11-01"},{"lineNumber":158,"author":{"gitId":"ThaddeusLim99"},"content":"                + \"a positive integer!\", output);","lastModifiedDate":"2021-11-01"},{"lineNumber":159,"author":{"gitId":"ThaddeusLim99"},"content":"    }","lastModifiedDate":"2021-11-01"},{"lineNumber":160,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":161,"author":{"gitId":"ThaddeusLim99"},"content":"    @Test","lastModifiedDate":"2021-11-03"},{"lineNumber":162,"author":{"gitId":"ThaddeusLim99"},"content":"    public void execute_largeInteger_expectLargeIntegerErrorMessage() {","lastModifiedDate":"2021-11-03"},{"lineNumber":163,"author":{"gitId":"ThaddeusLim99"},"content":"        Deck deck \u003d new Deck();","lastModifiedDate":"2021-11-03"},{"lineNumber":164,"author":{"gitId":"JWweiyin"},"content":"        DeckManager deckManager \u003d new DeckManager();","lastModifiedDate":"2021-11-06"},{"lineNumber":165,"author":{"gitId":"ThaddeusLim99"},"content":"        deck.addFlashCard(\"card\", \"card\");","lastModifiedDate":"2021-11-03"},{"lineNumber":166,"author":{"gitId":"ThaddeusLim99"},"content":"        String input \u003d \"edit /c 2147483648 /s front /i name\";","lastModifiedDate":"2021-11-03"},{"lineNumber":167,"author":{"gitId":"ThaddeusLim99"},"content":"        String commandType \u003d Parser.getCommandType(input);","lastModifiedDate":"2021-11-03"},{"lineNumber":168,"author":{"gitId":"ThaddeusLim99"},"content":"        String arguments \u003d Parser.getCommandArguments(commandType, input);","lastModifiedDate":"2021-11-03"},{"lineNumber":169,"author":{"gitId":"JWweiyin"},"content":"        Command test \u003d new EditCardCommand(arguments, deck, deckManager);","lastModifiedDate":"2021-11-06"},{"lineNumber":170,"author":{"gitId":"ThaddeusLim99"},"content":"        CommandResult result \u003d test.execute();","lastModifiedDate":"2021-11-03"},{"lineNumber":171,"author":{"gitId":"ThaddeusLim99"},"content":"        String output \u003d result.getResult();","lastModifiedDate":"2021-11-03"},{"lineNumber":172,"author":{"gitId":"ThaddeusLim99"},"content":"        assertEquals(\"Card index must be smaller than 2147483647.\", output);","lastModifiedDate":"2021-11-03"},{"lineNumber":173,"author":{"gitId":"ThaddeusLim99"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":174,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":175,"author":{"gitId":"JWweiyin"},"content":"    @Test","lastModifiedDate":"2021-11-07"},{"lineNumber":176,"author":{"gitId":"JWweiyin"},"content":"    public void execute_cardWithExactSameFrontExists_expectErrorMessage() {","lastModifiedDate":"2021-11-07"},{"lineNumber":177,"author":{"gitId":"JWweiyin"},"content":"        DeckManager deckManager \u003d new DeckManager();","lastModifiedDate":"2021-11-07"},{"lineNumber":178,"author":{"gitId":"JWweiyin"},"content":"        deckManager.prepareToAddDeck(\"deck1\");","lastModifiedDate":"2021-11-07"},{"lineNumber":179,"author":{"gitId":"JWweiyin"},"content":"        deckManager.getDeck(0).addFlashCard(\"card\", \"card\");","lastModifiedDate":"2021-11-07"},{"lineNumber":180,"author":{"gitId":"JWweiyin"},"content":"        deckManager.getDeck(0).addFlashCard(\"card2\", \"card\");","lastModifiedDate":"2021-11-07"},{"lineNumber":181,"author":{"gitId":"JWweiyin"},"content":"        String input \u003d \"edit /c 2 /s front /i card\";","lastModifiedDate":"2021-11-07"},{"lineNumber":182,"author":{"gitId":"JWweiyin"},"content":"        String commandType \u003d Parser.getCommandType(input);","lastModifiedDate":"2021-11-07"},{"lineNumber":183,"author":{"gitId":"JWweiyin"},"content":"        String arguments \u003d Parser.getCommandArguments(commandType, input);","lastModifiedDate":"2021-11-07"},{"lineNumber":184,"author":{"gitId":"JWweiyin"},"content":"        Command test \u003d new EditCardCommand(arguments, deckManager.getDeck(0), deckManager);","lastModifiedDate":"2021-11-07"},{"lineNumber":185,"author":{"gitId":"JWweiyin"},"content":"        CommandResult result \u003d test.execute();","lastModifiedDate":"2021-11-07"},{"lineNumber":186,"author":{"gitId":"JWweiyin"},"content":"        String output \u003d result.getResult();","lastModifiedDate":"2021-11-07"},{"lineNumber":187,"author":{"gitId":"JWweiyin"},"content":"        assertEquals(\"There is already a card with card on the front in deck deck1.\", output);","lastModifiedDate":"2021-11-07"},{"lineNumber":188,"author":{"gitId":"JWweiyin"},"content":"    }","lastModifiedDate":"2021-11-07"},{"lineNumber":189,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":190,"author":{"gitId":"JWweiyin"},"content":"    @Test","lastModifiedDate":"2021-11-07"},{"lineNumber":191,"author":{"gitId":"JWweiyin"},"content":"    public void execute_sameSpellingDifferentCase_expectSuccess() {","lastModifiedDate":"2021-11-07"},{"lineNumber":192,"author":{"gitId":"JWweiyin"},"content":"        DeckManager deckManager \u003d new DeckManager();","lastModifiedDate":"2021-11-07"},{"lineNumber":193,"author":{"gitId":"JWweiyin"},"content":"        deckManager.prepareToAddDeck(\"deck1\");","lastModifiedDate":"2021-11-07"},{"lineNumber":194,"author":{"gitId":"JWweiyin"},"content":"        deckManager.getDeck(0).addFlashCard(\"card\", \"card\");","lastModifiedDate":"2021-11-07"},{"lineNumber":195,"author":{"gitId":"JWweiyin"},"content":"        deckManager.getDeck(0).addFlashCard(\"card2\", \"card\");","lastModifiedDate":"2021-11-07"},{"lineNumber":196,"author":{"gitId":"JWweiyin"},"content":"        String input \u003d \"edit /c 2 /s front /i Card\";","lastModifiedDate":"2021-11-07"},{"lineNumber":197,"author":{"gitId":"JWweiyin"},"content":"        String commandType \u003d Parser.getCommandType(input);","lastModifiedDate":"2021-11-07"},{"lineNumber":198,"author":{"gitId":"JWweiyin"},"content":"        String arguments \u003d Parser.getCommandArguments(commandType, input);","lastModifiedDate":"2021-11-07"},{"lineNumber":199,"author":{"gitId":"JWweiyin"},"content":"        Command test \u003d new EditCardCommand(arguments, deckManager.getDeck(0), deckManager);","lastModifiedDate":"2021-11-07"},{"lineNumber":200,"author":{"gitId":"JWweiyin"},"content":"        CommandResult result \u003d test.execute();","lastModifiedDate":"2021-11-07"},{"lineNumber":201,"author":{"gitId":"JWweiyin"},"content":"        String output \u003d result.getResult();","lastModifiedDate":"2021-11-07"},{"lineNumber":202,"author":{"gitId":"JWweiyin"},"content":"        assertEquals(\"Changed front of card 2 to Card\", output);","lastModifiedDate":"2021-11-07"},{"lineNumber":203,"author":{"gitId":"JWweiyin"},"content":"    }","lastModifiedDate":"2021-11-07"},{"lineNumber":204,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":205,"author":{"gitId":"JWweiyin"},"content":"    @Test","lastModifiedDate":"2021-11-07"},{"lineNumber":206,"author":{"gitId":"JWweiyin"},"content":"    public void execute_cardWithSameFrontDoesNotExist_expectSuccess() {","lastModifiedDate":"2021-11-07"},{"lineNumber":207,"author":{"gitId":"JWweiyin"},"content":"        DeckManager deckManager \u003d new DeckManager();","lastModifiedDate":"2021-11-07"},{"lineNumber":208,"author":{"gitId":"JWweiyin"},"content":"        deckManager.prepareToAddDeck(\"deck1\");","lastModifiedDate":"2021-11-07"},{"lineNumber":209,"author":{"gitId":"JWweiyin"},"content":"        deckManager.getDeck(0).addFlashCard(\"card\", \"card\");","lastModifiedDate":"2021-11-07"},{"lineNumber":210,"author":{"gitId":"JWweiyin"},"content":"        deckManager.getDeck(0).addFlashCard(\"card2\", \"card\");","lastModifiedDate":"2021-11-07"},{"lineNumber":211,"author":{"gitId":"JWweiyin"},"content":"        String input \u003d \"edit /c 2 /s front /i no\";","lastModifiedDate":"2021-11-07"},{"lineNumber":212,"author":{"gitId":"JWweiyin"},"content":"        String commandType \u003d Parser.getCommandType(input);","lastModifiedDate":"2021-11-07"},{"lineNumber":213,"author":{"gitId":"JWweiyin"},"content":"        String arguments \u003d Parser.getCommandArguments(commandType, input);","lastModifiedDate":"2021-11-07"},{"lineNumber":214,"author":{"gitId":"JWweiyin"},"content":"        Command test \u003d new EditCardCommand(arguments, deckManager.getDeck(0), deckManager);","lastModifiedDate":"2021-11-07"},{"lineNumber":215,"author":{"gitId":"JWweiyin"},"content":"        CommandResult result \u003d test.execute();","lastModifiedDate":"2021-11-07"},{"lineNumber":216,"author":{"gitId":"JWweiyin"},"content":"        String output \u003d result.getResult();","lastModifiedDate":"2021-11-07"},{"lineNumber":217,"author":{"gitId":"JWweiyin"},"content":"        assertEquals(\"Changed front of card 2 to no\", output);","lastModifiedDate":"2021-11-07"},{"lineNumber":218,"author":{"gitId":"JWweiyin"},"content":"    }","lastModifiedDate":"2021-11-07"},{"lineNumber":219,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":220,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":221,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":222,"author":{"gitId":"ThaddeusLim99"},"content":"}","lastModifiedDate":"2021-10-26"}],"authorContributionMap":{"JWweiyin":75,"ThaddeusLim99":147}},{"path":"src/test/java/seedu/cardli/EditDeckCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"ThaddeusLim99"},"content":"package seedu.cardli;","lastModifiedDate":"2021-11-01"},{"lineNumber":2,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":3,"author":{"gitId":"ThaddeusLim99"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-11-01"},{"lineNumber":4,"author":{"gitId":"ThaddeusLim99"},"content":"import seedu.cardli.commands.Command;","lastModifiedDate":"2021-11-01"},{"lineNumber":5,"author":{"gitId":"ThaddeusLim99"},"content":"import seedu.cardli.commands.CommandResult;","lastModifiedDate":"2021-11-01"},{"lineNumber":6,"author":{"gitId":"ThaddeusLim99"},"content":"import seedu.cardli.commands.system.EditDeckCommand;","lastModifiedDate":"2021-11-01"},{"lineNumber":7,"author":{"gitId":"ThaddeusLim99"},"content":"import seedu.cardli.flashcard.DeckManager;","lastModifiedDate":"2021-11-01"},{"lineNumber":8,"author":{"gitId":"ThaddeusLim99"},"content":"import seedu.cardli.parser.Parser;","lastModifiedDate":"2021-11-01"},{"lineNumber":9,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":10,"author":{"gitId":"ThaddeusLim99"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-11-01"},{"lineNumber":11,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":12,"author":{"gitId":"ThaddeusLim99"},"content":"public class EditDeckCommandTest {","lastModifiedDate":"2021-11-01"},{"lineNumber":13,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":14,"author":{"gitId":"ThaddeusLim99"},"content":"    @Test","lastModifiedDate":"2021-11-01"},{"lineNumber":15,"author":{"gitId":"ThaddeusLim99"},"content":"    public void execute_emptyString_expectFieldEmptyErrorMessage() {","lastModifiedDate":"2021-11-01"},{"lineNumber":16,"author":{"gitId":"ThaddeusLim99"},"content":"        DeckManager deckManager \u003d new DeckManager();","lastModifiedDate":"2021-11-01"},{"lineNumber":17,"author":{"gitId":"ThaddeusLim99"},"content":"        deckManager.prepareToAddDeck(\"yeet\");","lastModifiedDate":"2021-11-01"},{"lineNumber":18,"author":{"gitId":"ThaddeusLim99"},"content":"        String input \u003d \"edit\";","lastModifiedDate":"2021-11-01"},{"lineNumber":19,"author":{"gitId":"ThaddeusLim99"},"content":"        String commandType \u003d Parser.getCommandType(input);","lastModifiedDate":"2021-11-01"},{"lineNumber":20,"author":{"gitId":"ThaddeusLim99"},"content":"        String arguments \u003d Parser.getCommandArguments(commandType, input);","lastModifiedDate":"2021-11-01"},{"lineNumber":21,"author":{"gitId":"ThaddeusLim99"},"content":"        Command test \u003d new EditDeckCommand(arguments, deckManager);","lastModifiedDate":"2021-11-01"},{"lineNumber":22,"author":{"gitId":"ThaddeusLim99"},"content":"        CommandResult result \u003d test.execute();","lastModifiedDate":"2021-11-01"},{"lineNumber":23,"author":{"gitId":"ThaddeusLim99"},"content":"        String output \u003d result.getResult();","lastModifiedDate":"2021-11-01"},{"lineNumber":24,"author":{"gitId":"ThaddeusLim99"},"content":"        assertEquals(\"You cannot leave any field empty! \"","lastModifiedDate":"2021-11-01"},{"lineNumber":25,"author":{"gitId":"ThaddeusLim99"},"content":"                + \"Format should be\\nedit /d \u003cdeck index/name of deck\u003e /n \u003cnew name of deck\u003e\", output);","lastModifiedDate":"2021-11-01"},{"lineNumber":26,"author":{"gitId":"ThaddeusLim99"},"content":"    }","lastModifiedDate":"2021-11-01"},{"lineNumber":27,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":28,"author":{"gitId":"ThaddeusLim99"},"content":"    @Test","lastModifiedDate":"2021-11-01"},{"lineNumber":29,"author":{"gitId":"ThaddeusLim99"},"content":"    public void execute_duplicateCorrectFlags_expectFlagArgumentErrorMessage() {","lastModifiedDate":"2021-11-03"},{"lineNumber":30,"author":{"gitId":"ThaddeusLim99"},"content":"        DeckManager deckManager \u003d new DeckManager();","lastModifiedDate":"2021-11-01"},{"lineNumber":31,"author":{"gitId":"ThaddeusLim99"},"content":"        deckManager.prepareToAddDeck(\"yeet\");","lastModifiedDate":"2021-11-01"},{"lineNumber":32,"author":{"gitId":"ThaddeusLim99"},"content":"        String input \u003d \"edit /d /d /n /n\";","lastModifiedDate":"2021-11-01"},{"lineNumber":33,"author":{"gitId":"ThaddeusLim99"},"content":"        String commandType \u003d Parser.getCommandType(input);","lastModifiedDate":"2021-11-01"},{"lineNumber":34,"author":{"gitId":"ThaddeusLim99"},"content":"        String arguments \u003d Parser.getCommandArguments(commandType, input);","lastModifiedDate":"2021-11-01"},{"lineNumber":35,"author":{"gitId":"ThaddeusLim99"},"content":"        Command test \u003d new EditDeckCommand(arguments, deckManager);","lastModifiedDate":"2021-11-01"},{"lineNumber":36,"author":{"gitId":"ThaddeusLim99"},"content":"        CommandResult result \u003d test.execute();","lastModifiedDate":"2021-11-01"},{"lineNumber":37,"author":{"gitId":"ThaddeusLim99"},"content":"        String output \u003d result.getResult();","lastModifiedDate":"2021-11-01"},{"lineNumber":38,"author":{"gitId":"ThaddeusLim99"},"content":"        assertEquals(\"You should not use this command\u0027s flag as your argument\", output);","lastModifiedDate":"2021-11-03"},{"lineNumber":39,"author":{"gitId":"ThaddeusLim99"},"content":"    }","lastModifiedDate":"2021-11-01"},{"lineNumber":40,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":41,"author":{"gitId":"ThaddeusLim99"},"content":"    @Test","lastModifiedDate":"2021-11-01"},{"lineNumber":42,"author":{"gitId":"ThaddeusLim99"},"content":"    public void execute_incorrectFlag_expectMissingFlagMessage() {","lastModifiedDate":"2021-11-03"},{"lineNumber":43,"author":{"gitId":"ThaddeusLim99"},"content":"        DeckManager deckManager \u003d new DeckManager();","lastModifiedDate":"2021-11-01"},{"lineNumber":44,"author":{"gitId":"ThaddeusLim99"},"content":"        deckManager.prepareToAddDeck(\"yeet\");","lastModifiedDate":"2021-11-01"},{"lineNumber":45,"author":{"gitId":"ThaddeusLim99"},"content":"        String input \u003d \"edit /b 1 /e name\";","lastModifiedDate":"2021-11-01"},{"lineNumber":46,"author":{"gitId":"ThaddeusLim99"},"content":"        String commandType \u003d Parser.getCommandType(input);","lastModifiedDate":"2021-11-01"},{"lineNumber":47,"author":{"gitId":"ThaddeusLim99"},"content":"        String arguments \u003d Parser.getCommandArguments(commandType, input);","lastModifiedDate":"2021-11-01"},{"lineNumber":48,"author":{"gitId":"ThaddeusLim99"},"content":"        Command test \u003d new EditDeckCommand(arguments, deckManager);","lastModifiedDate":"2021-11-01"},{"lineNumber":49,"author":{"gitId":"ThaddeusLim99"},"content":"        CommandResult result \u003d test.execute();","lastModifiedDate":"2021-11-01"},{"lineNumber":50,"author":{"gitId":"ThaddeusLim99"},"content":"        String output \u003d result.getResult();","lastModifiedDate":"2021-11-01"},{"lineNumber":51,"author":{"gitId":"ThaddeusLim99"},"content":"        assertEquals(\"You are missing the relevant flag/flags\", output);","lastModifiedDate":"2021-11-03"},{"lineNumber":52,"author":{"gitId":"ThaddeusLim99"},"content":"    }","lastModifiedDate":"2021-11-01"},{"lineNumber":53,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":54,"author":{"gitId":"ThaddeusLim99"},"content":"    @Test","lastModifiedDate":"2021-11-01"},{"lineNumber":55,"author":{"gitId":"ThaddeusLim99"},"content":"    public void execute_swappedFlagOrder_expectWrongOrderErrorMessage() {","lastModifiedDate":"2021-11-01"},{"lineNumber":56,"author":{"gitId":"ThaddeusLim99"},"content":"        DeckManager deckManager \u003d new DeckManager();","lastModifiedDate":"2021-11-01"},{"lineNumber":57,"author":{"gitId":"ThaddeusLim99"},"content":"        deckManager.prepareToAddDeck(\"yeet\");","lastModifiedDate":"2021-11-01"},{"lineNumber":58,"author":{"gitId":"ThaddeusLim99"},"content":"        String input \u003d \"edit /n 1 /d name\";","lastModifiedDate":"2021-11-01"},{"lineNumber":59,"author":{"gitId":"ThaddeusLim99"},"content":"        String commandType \u003d Parser.getCommandType(input);","lastModifiedDate":"2021-11-01"},{"lineNumber":60,"author":{"gitId":"ThaddeusLim99"},"content":"        String arguments \u003d Parser.getCommandArguments(commandType, input);","lastModifiedDate":"2021-11-01"},{"lineNumber":61,"author":{"gitId":"ThaddeusLim99"},"content":"        Command test \u003d new EditDeckCommand(arguments, deckManager);","lastModifiedDate":"2021-11-01"},{"lineNumber":62,"author":{"gitId":"ThaddeusLim99"},"content":"        CommandResult result \u003d test.execute();","lastModifiedDate":"2021-11-01"},{"lineNumber":63,"author":{"gitId":"ThaddeusLim99"},"content":"        String output \u003d result.getResult();","lastModifiedDate":"2021-11-01"},{"lineNumber":64,"author":{"gitId":"ThaddeusLim99"},"content":"        assertEquals(\"Incorrect edit command! /n should come after /d. Format \"","lastModifiedDate":"2021-11-01"},{"lineNumber":65,"author":{"gitId":"ThaddeusLim99"},"content":"                + \"should be\\nedit /d \u003cdeck index/name of deck\u003e /n \u003cnew name of deck\u003e\", output);","lastModifiedDate":"2021-11-01"},{"lineNumber":66,"author":{"gitId":"ThaddeusLim99"},"content":"    }","lastModifiedDate":"2021-11-01"},{"lineNumber":67,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":68,"author":{"gitId":"ThaddeusLim99"},"content":"    @Test","lastModifiedDate":"2021-11-01"},{"lineNumber":69,"author":{"gitId":"ThaddeusLim99"},"content":"    public void execute_emptyArguments_expectFieldEmptyErrorMessage() {","lastModifiedDate":"2021-11-01"},{"lineNumber":70,"author":{"gitId":"ThaddeusLim99"},"content":"        DeckManager deckManager \u003d new DeckManager();","lastModifiedDate":"2021-11-01"},{"lineNumber":71,"author":{"gitId":"ThaddeusLim99"},"content":"        deckManager.prepareToAddDeck(\"yeet\");","lastModifiedDate":"2021-11-01"},{"lineNumber":72,"author":{"gitId":"ThaddeusLim99"},"content":"        String input \u003d \"edit /d  /n\";","lastModifiedDate":"2021-11-01"},{"lineNumber":73,"author":{"gitId":"ThaddeusLim99"},"content":"        String commandType \u003d Parser.getCommandType(input);","lastModifiedDate":"2021-11-01"},{"lineNumber":74,"author":{"gitId":"ThaddeusLim99"},"content":"        String arguments \u003d Parser.getCommandArguments(commandType, input);","lastModifiedDate":"2021-11-01"},{"lineNumber":75,"author":{"gitId":"ThaddeusLim99"},"content":"        Command test \u003d new EditDeckCommand(arguments, deckManager);","lastModifiedDate":"2021-11-01"},{"lineNumber":76,"author":{"gitId":"ThaddeusLim99"},"content":"        CommandResult result \u003d test.execute();","lastModifiedDate":"2021-11-01"},{"lineNumber":77,"author":{"gitId":"ThaddeusLim99"},"content":"        String output \u003d result.getResult();","lastModifiedDate":"2021-11-01"},{"lineNumber":78,"author":{"gitId":"ThaddeusLim99"},"content":"        assertEquals(\"You cannot leave any field empty! \"","lastModifiedDate":"2021-11-01"},{"lineNumber":79,"author":{"gitId":"ThaddeusLim99"},"content":"                + \"Format should be\\nedit /d \u003cdeck index/name of deck\u003e /n \u003cnew name of deck\u003e\", output);","lastModifiedDate":"2021-11-01"},{"lineNumber":80,"author":{"gitId":"ThaddeusLim99"},"content":"    }","lastModifiedDate":"2021-11-01"},{"lineNumber":81,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":82,"author":{"gitId":"ThaddeusLim99"},"content":"    @Test","lastModifiedDate":"2021-11-01"},{"lineNumber":83,"author":{"gitId":"ThaddeusLim99"},"content":"    public void execute_incorrectFlagOrder_expectInvalidArgumentsMessage() {","lastModifiedDate":"2021-11-01"},{"lineNumber":84,"author":{"gitId":"ThaddeusLim99"},"content":"        DeckManager deckManager \u003d new DeckManager();","lastModifiedDate":"2021-11-01"},{"lineNumber":85,"author":{"gitId":"ThaddeusLim99"},"content":"        deckManager.prepareToAddDeck(\"yeet\");","lastModifiedDate":"2021-11-01"},{"lineNumber":86,"author":{"gitId":"ThaddeusLim99"},"content":"        String input \u003d \"edit a b /d /n\";","lastModifiedDate":"2021-11-01"},{"lineNumber":87,"author":{"gitId":"ThaddeusLim99"},"content":"        String commandType \u003d Parser.getCommandType(input);","lastModifiedDate":"2021-11-01"},{"lineNumber":88,"author":{"gitId":"ThaddeusLim99"},"content":"        String arguments \u003d Parser.getCommandArguments(commandType, input);","lastModifiedDate":"2021-11-01"},{"lineNumber":89,"author":{"gitId":"ThaddeusLim99"},"content":"        Command test \u003d new EditDeckCommand(arguments, deckManager);","lastModifiedDate":"2021-11-01"},{"lineNumber":90,"author":{"gitId":"ThaddeusLim99"},"content":"        CommandResult result \u003d test.execute();","lastModifiedDate":"2021-11-01"},{"lineNumber":91,"author":{"gitId":"ThaddeusLim99"},"content":"        String output \u003d result.getResult();","lastModifiedDate":"2021-11-01"},{"lineNumber":92,"author":{"gitId":"ThaddeusLim99"},"content":"        assertEquals(\"Please use the correct flags and in the correct order! \"","lastModifiedDate":"2021-11-01"},{"lineNumber":93,"author":{"gitId":"ThaddeusLim99"},"content":"                + \"\\nFormat + should be edit /d \u003cdeck index/name of deck\u003e /n \u003cnew name of deck\u003e\", output);","lastModifiedDate":"2021-11-01"},{"lineNumber":94,"author":{"gitId":"ThaddeusLim99"},"content":"    }","lastModifiedDate":"2021-11-01"},{"lineNumber":95,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":96,"author":{"gitId":"ThaddeusLim99"},"content":"    @Test","lastModifiedDate":"2021-11-01"},{"lineNumber":97,"author":{"gitId":"ThaddeusLim99"},"content":"    public void execute_invalidIntegerIndex_expectInvalidIndexErrorMessage() {","lastModifiedDate":"2021-11-01"},{"lineNumber":98,"author":{"gitId":"ThaddeusLim99"},"content":"        DeckManager deckManager \u003d new DeckManager();","lastModifiedDate":"2021-11-01"},{"lineNumber":99,"author":{"gitId":"ThaddeusLim99"},"content":"        deckManager.prepareToAddDeck(\"yeet\");","lastModifiedDate":"2021-11-01"},{"lineNumber":100,"author":{"gitId":"ThaddeusLim99"},"content":"        String input \u003d \"edit /d 2 /n name\";","lastModifiedDate":"2021-11-01"},{"lineNumber":101,"author":{"gitId":"ThaddeusLim99"},"content":"        String commandType \u003d Parser.getCommandType(input);","lastModifiedDate":"2021-11-01"},{"lineNumber":102,"author":{"gitId":"ThaddeusLim99"},"content":"        String arguments \u003d Parser.getCommandArguments(commandType, input);","lastModifiedDate":"2021-11-01"},{"lineNumber":103,"author":{"gitId":"ThaddeusLim99"},"content":"        Command test \u003d new EditDeckCommand(arguments, deckManager);","lastModifiedDate":"2021-11-01"},{"lineNumber":104,"author":{"gitId":"ThaddeusLim99"},"content":"        CommandResult result \u003d test.execute();","lastModifiedDate":"2021-11-01"},{"lineNumber":105,"author":{"gitId":"ThaddeusLim99"},"content":"        String output \u003d result.getResult();","lastModifiedDate":"2021-11-01"},{"lineNumber":106,"author":{"gitId":"ThaddeusLim99"},"content":"        assertEquals(\"Incorrect index for deck!\", output);","lastModifiedDate":"2021-11-01"},{"lineNumber":107,"author":{"gitId":"ThaddeusLim99"},"content":"    }","lastModifiedDate":"2021-11-01"},{"lineNumber":108,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":109,"author":{"gitId":"ThaddeusLim99"},"content":"    @Test","lastModifiedDate":"2021-11-01"},{"lineNumber":110,"author":{"gitId":"ThaddeusLim99"},"content":"    public void execute_NegativeIntegerIndex_expectArgumentTypeErrorMessage() {","lastModifiedDate":"2021-11-01"},{"lineNumber":111,"author":{"gitId":"ThaddeusLim99"},"content":"        DeckManager deckManager \u003d new DeckManager();","lastModifiedDate":"2021-11-01"},{"lineNumber":112,"author":{"gitId":"ThaddeusLim99"},"content":"        deckManager.prepareToAddDeck(\"yeet\");","lastModifiedDate":"2021-11-01"},{"lineNumber":113,"author":{"gitId":"ThaddeusLim99"},"content":"        String input \u003d \"edit /d -1 /n name\";","lastModifiedDate":"2021-11-01"},{"lineNumber":114,"author":{"gitId":"ThaddeusLim99"},"content":"        String commandType \u003d Parser.getCommandType(input);","lastModifiedDate":"2021-11-01"},{"lineNumber":115,"author":{"gitId":"ThaddeusLim99"},"content":"        String arguments \u003d Parser.getCommandArguments(commandType, input);","lastModifiedDate":"2021-11-01"},{"lineNumber":116,"author":{"gitId":"ThaddeusLim99"},"content":"        Command test \u003d new EditDeckCommand(arguments, deckManager);","lastModifiedDate":"2021-11-01"},{"lineNumber":117,"author":{"gitId":"ThaddeusLim99"},"content":"        CommandResult result \u003d test.execute();","lastModifiedDate":"2021-11-01"},{"lineNumber":118,"author":{"gitId":"ThaddeusLim99"},"content":"        String output \u003d result.getResult();","lastModifiedDate":"2021-11-01"},{"lineNumber":119,"author":{"gitId":"ThaddeusLim99"},"content":"        assertEquals(\"You can only input the index of the deck, which is \"","lastModifiedDate":"2021-11-01"},{"lineNumber":120,"author":{"gitId":"ThaddeusLim99"},"content":"                + \"a positive integer!\", output);","lastModifiedDate":"2021-11-01"},{"lineNumber":121,"author":{"gitId":"ThaddeusLim99"},"content":"    }","lastModifiedDate":"2021-11-01"},{"lineNumber":122,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":123,"author":{"gitId":"ThaddeusLim99"},"content":"    @Test","lastModifiedDate":"2021-11-01"},{"lineNumber":124,"author":{"gitId":"ThaddeusLim99"},"content":"    public void execute_stringDeck_expectArgumentTypeErrorMessage() {","lastModifiedDate":"2021-11-01"},{"lineNumber":125,"author":{"gitId":"ThaddeusLim99"},"content":"        DeckManager deckManager \u003d new DeckManager();","lastModifiedDate":"2021-11-01"},{"lineNumber":126,"author":{"gitId":"ThaddeusLim99"},"content":"        deckManager.prepareToAddDeck(\"yeet\");","lastModifiedDate":"2021-11-01"},{"lineNumber":127,"author":{"gitId":"ThaddeusLim99"},"content":"        String input \u003d \"edit /d abc /n name\";","lastModifiedDate":"2021-11-01"},{"lineNumber":128,"author":{"gitId":"ThaddeusLim99"},"content":"        String commandType \u003d Parser.getCommandType(input);","lastModifiedDate":"2021-11-01"},{"lineNumber":129,"author":{"gitId":"ThaddeusLim99"},"content":"        String arguments \u003d Parser.getCommandArguments(commandType, input);","lastModifiedDate":"2021-11-01"},{"lineNumber":130,"author":{"gitId":"ThaddeusLim99"},"content":"        Command test \u003d new EditDeckCommand(arguments, deckManager);","lastModifiedDate":"2021-11-01"},{"lineNumber":131,"author":{"gitId":"ThaddeusLim99"},"content":"        CommandResult result \u003d test.execute();","lastModifiedDate":"2021-11-01"},{"lineNumber":132,"author":{"gitId":"ThaddeusLim99"},"content":"        String output \u003d result.getResult();","lastModifiedDate":"2021-11-01"},{"lineNumber":133,"author":{"gitId":"ThaddeusLim99"},"content":"        assertEquals(\"You can only input the index of the deck, which is \"","lastModifiedDate":"2021-11-01"},{"lineNumber":134,"author":{"gitId":"ThaddeusLim99"},"content":"                + \"a positive integer!\", output);","lastModifiedDate":"2021-11-01"},{"lineNumber":135,"author":{"gitId":"ThaddeusLim99"},"content":"    }","lastModifiedDate":"2021-11-01"},{"lineNumber":136,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":137,"author":{"gitId":"ThaddeusLim99"},"content":"    @Test","lastModifiedDate":"2021-11-03"},{"lineNumber":138,"author":{"gitId":"ThaddeusLim99"},"content":"    public void execute_largeInteger_expectLargeIntegerErrorMessage() {","lastModifiedDate":"2021-11-03"},{"lineNumber":139,"author":{"gitId":"ThaddeusLim99"},"content":"        DeckManager deckManager \u003d new DeckManager();","lastModifiedDate":"2021-11-03"},{"lineNumber":140,"author":{"gitId":"ThaddeusLim99"},"content":"        deckManager.prepareToAddDeck(\"yeet\");","lastModifiedDate":"2021-11-03"},{"lineNumber":141,"author":{"gitId":"ThaddeusLim99"},"content":"        String input \u003d \"edit /d 2147483648 /n name\";","lastModifiedDate":"2021-11-03"},{"lineNumber":142,"author":{"gitId":"ThaddeusLim99"},"content":"        String commandType \u003d Parser.getCommandType(input);","lastModifiedDate":"2021-11-03"},{"lineNumber":143,"author":{"gitId":"ThaddeusLim99"},"content":"        String arguments \u003d Parser.getCommandArguments(commandType, input);","lastModifiedDate":"2021-11-03"},{"lineNumber":144,"author":{"gitId":"ThaddeusLim99"},"content":"        Command test \u003d new EditDeckCommand(arguments, deckManager);","lastModifiedDate":"2021-11-03"},{"lineNumber":145,"author":{"gitId":"ThaddeusLim99"},"content":"        CommandResult result \u003d test.execute();","lastModifiedDate":"2021-11-03"},{"lineNumber":146,"author":{"gitId":"ThaddeusLim99"},"content":"        String output \u003d result.getResult();","lastModifiedDate":"2021-11-03"},{"lineNumber":147,"author":{"gitId":"ThaddeusLim99"},"content":"        assertEquals(\"Deck index must be smaller than 2147483647.\", output);","lastModifiedDate":"2021-11-03"},{"lineNumber":148,"author":{"gitId":"ThaddeusLim99"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":149,"author":{"gitId":"ThaddeusLim99"},"content":"}","lastModifiedDate":"2021-11-01"}],"authorContributionMap":{"ThaddeusLim99":149}},{"path":"src/test/java/seedu/cardli/FlashCardTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"xRossKoh"},"content":"package seedu.cardli;","lastModifiedDate":"2021-10-26"},{"lineNumber":2,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":3,"author":{"gitId":"xRossKoh"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-08"},{"lineNumber":4,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.flashcard.FlashCard;","lastModifiedDate":"2021-10-26"},{"lineNumber":5,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":6,"author":{"gitId":"xRossKoh"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-08"},{"lineNumber":7,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":8,"author":{"gitId":"xRossKoh"},"content":"public class FlashCardTest {","lastModifiedDate":"2021-10-08"},{"lineNumber":9,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":10,"author":{"gitId":"xRossKoh"},"content":"    private FlashCard flashCard \u003d new FlashCard(\"testFront\", \"testBack\");","lastModifiedDate":"2021-10-08"},{"lineNumber":11,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":12,"author":{"gitId":"xRossKoh"},"content":"    @Test","lastModifiedDate":"2021-10-08"},{"lineNumber":13,"author":{"gitId":"xRossKoh"},"content":"    public void testGetFront() {","lastModifiedDate":"2021-10-08"},{"lineNumber":14,"author":{"gitId":"xRossKoh"},"content":"        assertEquals(\"testFront\", flashCard.getFront());","lastModifiedDate":"2021-10-08"},{"lineNumber":15,"author":{"gitId":"xRossKoh"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":16,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":17,"author":{"gitId":"xRossKoh"},"content":"    @Test","lastModifiedDate":"2021-10-08"},{"lineNumber":18,"author":{"gitId":"xRossKoh"},"content":"    public void testGetBack() {","lastModifiedDate":"2021-10-08"},{"lineNumber":19,"author":{"gitId":"xRossKoh"},"content":"        assertEquals(\"testBack\", flashCard.getBack());","lastModifiedDate":"2021-10-08"},{"lineNumber":20,"author":{"gitId":"xRossKoh"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":21,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":22,"author":{"gitId":"xRossKoh"},"content":"    //@@author xRossKoh","lastModifiedDate":"2021-11-07"},{"lineNumber":23,"author":{"gitId":"xRossKoh"},"content":"    @Test","lastModifiedDate":"2021-11-07"},{"lineNumber":24,"author":{"gitId":"xRossKoh"},"content":"    public void testToString() {","lastModifiedDate":"2021-11-07"},{"lineNumber":25,"author":{"gitId":"xRossKoh"},"content":"        assertEquals(\"testFront | testBack | 0 | 0\\n\", flashCard.toString());","lastModifiedDate":"2021-11-07"},{"lineNumber":26,"author":{"gitId":"xRossKoh"},"content":"    }","lastModifiedDate":"2021-11-07"},{"lineNumber":27,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":28,"author":{"gitId":"xRossKoh"},"content":"    @Test","lastModifiedDate":"2021-11-07"},{"lineNumber":29,"author":{"gitId":"xRossKoh"},"content":"    public void testToJsonObject() {","lastModifiedDate":"2021-11-07"},{"lineNumber":30,"author":{"gitId":"xRossKoh"},"content":"        assertEquals(\"{\\\"back\\\":\\\"testBack\\\",\\\"front\\\":\\\"testFront\\\",\\\"userScore\\\":0,\\\"totalScore\\\":0}\",","lastModifiedDate":"2021-11-07"},{"lineNumber":31,"author":{"gitId":"xRossKoh"},"content":"                flashCard.toJsonObject().toJSONString());","lastModifiedDate":"2021-11-07"},{"lineNumber":32,"author":{"gitId":"xRossKoh"},"content":"    }","lastModifiedDate":"2021-11-07"},{"lineNumber":33,"author":{"gitId":"xRossKoh"},"content":"}","lastModifiedDate":"2021-10-08"}],"authorContributionMap":{"xRossKoh":33}},{"path":"src/test/java/seedu/cardli/MoveCardCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"ThaddeusLim99"},"content":"package seedu.cardli;","lastModifiedDate":"2021-11-03"},{"lineNumber":2,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":3,"author":{"gitId":"ThaddeusLim99"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-11-03"},{"lineNumber":4,"author":{"gitId":"ThaddeusLim99"},"content":"import seedu.cardli.commands.Command;","lastModifiedDate":"2021-11-03"},{"lineNumber":5,"author":{"gitId":"ThaddeusLim99"},"content":"import seedu.cardli.commands.CommandResult;","lastModifiedDate":"2021-11-03"},{"lineNumber":6,"author":{"gitId":"ThaddeusLim99"},"content":"import seedu.cardli.commands.deck.MoveCardCommand;","lastModifiedDate":"2021-11-03"},{"lineNumber":7,"author":{"gitId":"ThaddeusLim99"},"content":"import seedu.cardli.flashcard.DeckManager;","lastModifiedDate":"2021-11-03"},{"lineNumber":8,"author":{"gitId":"ThaddeusLim99"},"content":"import seedu.cardli.parser.Parser;","lastModifiedDate":"2021-11-03"},{"lineNumber":9,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":10,"author":{"gitId":"ThaddeusLim99"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-11-03"},{"lineNumber":11,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":12,"author":{"gitId":"ThaddeusLim99"},"content":"public class MoveCardCommandTest {","lastModifiedDate":"2021-11-03"},{"lineNumber":13,"author":{"gitId":"ThaddeusLim99"},"content":"    @Test","lastModifiedDate":"2021-11-03"},{"lineNumber":14,"author":{"gitId":"ThaddeusLim99"},"content":"    public void execute_emptyString_expectFieldEmptyErrorMessage() {","lastModifiedDate":"2021-11-03"},{"lineNumber":15,"author":{"gitId":"ThaddeusLim99"},"content":"        DeckManager deckManager \u003d new DeckManager();","lastModifiedDate":"2021-11-03"},{"lineNumber":16,"author":{"gitId":"ThaddeusLim99"},"content":"        deckManager.prepareToAddDeck(\"yeet\");","lastModifiedDate":"2021-11-03"},{"lineNumber":17,"author":{"gitId":"ThaddeusLim99"},"content":"        deckManager.prepareToAddDeck(\"yeeter\");","lastModifiedDate":"2021-11-03"},{"lineNumber":18,"author":{"gitId":"ThaddeusLim99"},"content":"        deckManager.getDeck(0).addFlashCard(\"card\", \"card\");","lastModifiedDate":"2021-11-03"},{"lineNumber":19,"author":{"gitId":"ThaddeusLim99"},"content":"        String input \u003d \"move \";","lastModifiedDate":"2021-11-03"},{"lineNumber":20,"author":{"gitId":"ThaddeusLim99"},"content":"        String commandType \u003d Parser.getCommandType(input);","lastModifiedDate":"2021-11-03"},{"lineNumber":21,"author":{"gitId":"ThaddeusLim99"},"content":"        String arguments \u003d Parser.getCommandArguments(commandType, input);","lastModifiedDate":"2021-11-03"},{"lineNumber":22,"author":{"gitId":"ThaddeusLim99"},"content":"        Command test \u003d new MoveCardCommand(arguments, deckManager.getDeck(0), deckManager);","lastModifiedDate":"2021-11-03"},{"lineNumber":23,"author":{"gitId":"ThaddeusLim99"},"content":"        CommandResult result \u003d test.execute();","lastModifiedDate":"2021-11-03"},{"lineNumber":24,"author":{"gitId":"ThaddeusLim99"},"content":"        String output \u003d result.getResult();","lastModifiedDate":"2021-11-03"},{"lineNumber":25,"author":{"gitId":"ThaddeusLim99"},"content":"        assertEquals(\"You cannot leave any field empty! \"","lastModifiedDate":"2021-11-03"},{"lineNumber":26,"author":{"gitId":"ThaddeusLim99"},"content":"                + \"Format should be\\nmove /c \u003ccard index\u003e /d \u003cdeck index\u003e\", output);","lastModifiedDate":"2021-11-03"},{"lineNumber":27,"author":{"gitId":"ThaddeusLim99"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":28,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":29,"author":{"gitId":"ThaddeusLim99"},"content":"    @Test","lastModifiedDate":"2021-11-03"},{"lineNumber":30,"author":{"gitId":"ThaddeusLim99"},"content":"    public void execute_duplicateCorrectFlags_expectFlagArgumentErrorMessage() {","lastModifiedDate":"2021-11-03"},{"lineNumber":31,"author":{"gitId":"ThaddeusLim99"},"content":"        DeckManager deckManager \u003d new DeckManager();","lastModifiedDate":"2021-11-03"},{"lineNumber":32,"author":{"gitId":"ThaddeusLim99"},"content":"        deckManager.prepareToAddDeck(\"yeet\");","lastModifiedDate":"2021-11-03"},{"lineNumber":33,"author":{"gitId":"ThaddeusLim99"},"content":"        deckManager.prepareToAddDeck(\"yeeter\");","lastModifiedDate":"2021-11-03"},{"lineNumber":34,"author":{"gitId":"ThaddeusLim99"},"content":"        deckManager.getDeck(0).addFlashCard(\"card\", \"card\");","lastModifiedDate":"2021-11-03"},{"lineNumber":35,"author":{"gitId":"ThaddeusLim99"},"content":"        String input \u003d \"move /c /c /d /d\";","lastModifiedDate":"2021-11-03"},{"lineNumber":36,"author":{"gitId":"ThaddeusLim99"},"content":"        String commandType \u003d Parser.getCommandType(input);","lastModifiedDate":"2021-11-03"},{"lineNumber":37,"author":{"gitId":"ThaddeusLim99"},"content":"        String arguments \u003d Parser.getCommandArguments(commandType, input);","lastModifiedDate":"2021-11-03"},{"lineNumber":38,"author":{"gitId":"ThaddeusLim99"},"content":"        Command test \u003d new MoveCardCommand(arguments, deckManager.getDeck(0), deckManager);","lastModifiedDate":"2021-11-03"},{"lineNumber":39,"author":{"gitId":"ThaddeusLim99"},"content":"        CommandResult result \u003d test.execute();","lastModifiedDate":"2021-11-03"},{"lineNumber":40,"author":{"gitId":"ThaddeusLim99"},"content":"        String output \u003d result.getResult();","lastModifiedDate":"2021-11-03"},{"lineNumber":41,"author":{"gitId":"ThaddeusLim99"},"content":"        assertEquals(\"You should not use this command\u0027s flag as your argument\", output);","lastModifiedDate":"2021-11-03"},{"lineNumber":42,"author":{"gitId":"ThaddeusLim99"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":43,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":44,"author":{"gitId":"ThaddeusLim99"},"content":"    @Test","lastModifiedDate":"2021-11-03"},{"lineNumber":45,"author":{"gitId":"ThaddeusLim99"},"content":"    public void execute_incorrectFlags_expectMissingFlagMessage() {","lastModifiedDate":"2021-11-03"},{"lineNumber":46,"author":{"gitId":"ThaddeusLim99"},"content":"        DeckManager deckManager \u003d new DeckManager();","lastModifiedDate":"2021-11-03"},{"lineNumber":47,"author":{"gitId":"ThaddeusLim99"},"content":"        deckManager.prepareToAddDeck(\"yeet\");","lastModifiedDate":"2021-11-03"},{"lineNumber":48,"author":{"gitId":"ThaddeusLim99"},"content":"        deckManager.prepareToAddDeck(\"yeeter\");","lastModifiedDate":"2021-11-03"},{"lineNumber":49,"author":{"gitId":"ThaddeusLim99"},"content":"        deckManager.getDeck(0).addFlashCard(\"card\", \"card\");","lastModifiedDate":"2021-11-03"},{"lineNumber":50,"author":{"gitId":"ThaddeusLim99"},"content":"        String input \u003d \"move /a 1 /b /1\";","lastModifiedDate":"2021-11-03"},{"lineNumber":51,"author":{"gitId":"ThaddeusLim99"},"content":"        String commandType \u003d Parser.getCommandType(input);","lastModifiedDate":"2021-11-03"},{"lineNumber":52,"author":{"gitId":"ThaddeusLim99"},"content":"        String arguments \u003d Parser.getCommandArguments(commandType, input);","lastModifiedDate":"2021-11-03"},{"lineNumber":53,"author":{"gitId":"ThaddeusLim99"},"content":"        Command test \u003d new MoveCardCommand(arguments, deckManager.getDeck(0), deckManager);","lastModifiedDate":"2021-11-03"},{"lineNumber":54,"author":{"gitId":"ThaddeusLim99"},"content":"        CommandResult result \u003d test.execute();","lastModifiedDate":"2021-11-03"},{"lineNumber":55,"author":{"gitId":"ThaddeusLim99"},"content":"        String output \u003d result.getResult();","lastModifiedDate":"2021-11-03"},{"lineNumber":56,"author":{"gitId":"ThaddeusLim99"},"content":"        assertEquals(\"You are missing the relevant flag/flags\", output);","lastModifiedDate":"2021-11-03"},{"lineNumber":57,"author":{"gitId":"ThaddeusLim99"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":58,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":59,"author":{"gitId":"ThaddeusLim99"},"content":"    @Test","lastModifiedDate":"2021-11-03"},{"lineNumber":60,"author":{"gitId":"ThaddeusLim99"},"content":"    public void execute_swappedFlagOrder_expectWrongOrderErrorMessage() {","lastModifiedDate":"2021-11-03"},{"lineNumber":61,"author":{"gitId":"ThaddeusLim99"},"content":"        DeckManager deckManager \u003d new DeckManager();","lastModifiedDate":"2021-11-03"},{"lineNumber":62,"author":{"gitId":"ThaddeusLim99"},"content":"        deckManager.prepareToAddDeck(\"yeet\");","lastModifiedDate":"2021-11-03"},{"lineNumber":63,"author":{"gitId":"ThaddeusLim99"},"content":"        deckManager.prepareToAddDeck(\"yeeter\");","lastModifiedDate":"2021-11-03"},{"lineNumber":64,"author":{"gitId":"ThaddeusLim99"},"content":"        deckManager.getDeck(0).addFlashCard(\"card\", \"card\");","lastModifiedDate":"2021-11-03"},{"lineNumber":65,"author":{"gitId":"ThaddeusLim99"},"content":"        String input \u003d \"move /d 1 /c /1\";","lastModifiedDate":"2021-11-03"},{"lineNumber":66,"author":{"gitId":"ThaddeusLim99"},"content":"        String commandType \u003d Parser.getCommandType(input);","lastModifiedDate":"2021-11-03"},{"lineNumber":67,"author":{"gitId":"ThaddeusLim99"},"content":"        String arguments \u003d Parser.getCommandArguments(commandType, input);","lastModifiedDate":"2021-11-03"},{"lineNumber":68,"author":{"gitId":"ThaddeusLim99"},"content":"        Command test \u003d new MoveCardCommand(arguments, deckManager.getDeck(0), deckManager);","lastModifiedDate":"2021-11-03"},{"lineNumber":69,"author":{"gitId":"ThaddeusLim99"},"content":"        CommandResult result \u003d test.execute();","lastModifiedDate":"2021-11-03"},{"lineNumber":70,"author":{"gitId":"ThaddeusLim99"},"content":"        String output \u003d result.getResult();","lastModifiedDate":"2021-11-03"},{"lineNumber":71,"author":{"gitId":"ThaddeusLim99"},"content":"        assertEquals(\"/c should come before /d! Format should be\\n\"","lastModifiedDate":"2021-11-03"},{"lineNumber":72,"author":{"gitId":"ThaddeusLim99"},"content":"                + \"move /c \u003ccard index\u003e /d \u003cdeck index\u003e\", output);","lastModifiedDate":"2021-11-03"},{"lineNumber":73,"author":{"gitId":"ThaddeusLim99"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":74,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":75,"author":{"gitId":"ThaddeusLim99"},"content":"    @Test","lastModifiedDate":"2021-11-03"},{"lineNumber":76,"author":{"gitId":"ThaddeusLim99"},"content":"    public void execute_emptyArgument_expectFieldEmptyErrorMessage() {","lastModifiedDate":"2021-11-03"},{"lineNumber":77,"author":{"gitId":"ThaddeusLim99"},"content":"        DeckManager deckManager \u003d new DeckManager();","lastModifiedDate":"2021-11-03"},{"lineNumber":78,"author":{"gitId":"ThaddeusLim99"},"content":"        deckManager.prepareToAddDeck(\"yeet\");","lastModifiedDate":"2021-11-03"},{"lineNumber":79,"author":{"gitId":"ThaddeusLim99"},"content":"        deckManager.prepareToAddDeck(\"yeeter\");","lastModifiedDate":"2021-11-03"},{"lineNumber":80,"author":{"gitId":"ThaddeusLim99"},"content":"        deckManager.getDeck(0).addFlashCard(\"card\", \"card\");","lastModifiedDate":"2021-11-03"},{"lineNumber":81,"author":{"gitId":"ThaddeusLim99"},"content":"        String input \u003d \"move /c /d \";","lastModifiedDate":"2021-11-03"},{"lineNumber":82,"author":{"gitId":"ThaddeusLim99"},"content":"        String commandType \u003d Parser.getCommandType(input);","lastModifiedDate":"2021-11-03"},{"lineNumber":83,"author":{"gitId":"ThaddeusLim99"},"content":"        String arguments \u003d Parser.getCommandArguments(commandType, input);","lastModifiedDate":"2021-11-03"},{"lineNumber":84,"author":{"gitId":"ThaddeusLim99"},"content":"        Command test \u003d new MoveCardCommand(arguments, deckManager.getDeck(0), deckManager);","lastModifiedDate":"2021-11-03"},{"lineNumber":85,"author":{"gitId":"ThaddeusLim99"},"content":"        CommandResult result \u003d test.execute();","lastModifiedDate":"2021-11-03"},{"lineNumber":86,"author":{"gitId":"ThaddeusLim99"},"content":"        String output \u003d result.getResult();","lastModifiedDate":"2021-11-03"},{"lineNumber":87,"author":{"gitId":"ThaddeusLim99"},"content":"        assertEquals(\"You cannot leave any field empty! \"","lastModifiedDate":"2021-11-03"},{"lineNumber":88,"author":{"gitId":"ThaddeusLim99"},"content":"                + \"Format should be\\nmove /c \u003ccard index\u003e /d \u003cdeck index\u003e\", output);","lastModifiedDate":"2021-11-03"},{"lineNumber":89,"author":{"gitId":"ThaddeusLim99"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":90,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":91,"author":{"gitId":"ThaddeusLim99"},"content":"    @Test","lastModifiedDate":"2021-11-03"},{"lineNumber":92,"author":{"gitId":"ThaddeusLim99"},"content":"    public void execute_incorrectFlagOrder_expectInvalidArgumentsMessage() {","lastModifiedDate":"2021-11-03"},{"lineNumber":93,"author":{"gitId":"ThaddeusLim99"},"content":"        DeckManager deckManager \u003d new DeckManager();","lastModifiedDate":"2021-11-03"},{"lineNumber":94,"author":{"gitId":"ThaddeusLim99"},"content":"        deckManager.prepareToAddDeck(\"yeet\");","lastModifiedDate":"2021-11-03"},{"lineNumber":95,"author":{"gitId":"ThaddeusLim99"},"content":"        deckManager.prepareToAddDeck(\"yeeter\");","lastModifiedDate":"2021-11-03"},{"lineNumber":96,"author":{"gitId":"ThaddeusLim99"},"content":"        deckManager.getDeck(0).addFlashCard(\"card\", \"card\");","lastModifiedDate":"2021-11-03"},{"lineNumber":97,"author":{"gitId":"ThaddeusLim99"},"content":"        String input \u003d \"move 1 /c 1 /d \";","lastModifiedDate":"2021-11-03"},{"lineNumber":98,"author":{"gitId":"ThaddeusLim99"},"content":"        String commandType \u003d Parser.getCommandType(input);","lastModifiedDate":"2021-11-03"},{"lineNumber":99,"author":{"gitId":"ThaddeusLim99"},"content":"        String arguments \u003d Parser.getCommandArguments(commandType, input);","lastModifiedDate":"2021-11-03"},{"lineNumber":100,"author":{"gitId":"ThaddeusLim99"},"content":"        Command test \u003d new MoveCardCommand(arguments, deckManager.getDeck(0), deckManager);","lastModifiedDate":"2021-11-03"},{"lineNumber":101,"author":{"gitId":"ThaddeusLim99"},"content":"        CommandResult result \u003d test.execute();","lastModifiedDate":"2021-11-03"},{"lineNumber":102,"author":{"gitId":"ThaddeusLim99"},"content":"        String output \u003d result.getResult();","lastModifiedDate":"2021-11-03"},{"lineNumber":103,"author":{"gitId":"ThaddeusLim99"},"content":"        assertEquals(\"Please use the correct flags and in the correct order! \"","lastModifiedDate":"2021-11-03"},{"lineNumber":104,"author":{"gitId":"ThaddeusLim99"},"content":"                + \"\\nFormat should be move /c \u003ccard index\u003e /d \u003cdeck index\u003e\", output);","lastModifiedDate":"2021-11-03"},{"lineNumber":105,"author":{"gitId":"ThaddeusLim99"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":106,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":107,"author":{"gitId":"ThaddeusLim99"},"content":"    @Test","lastModifiedDate":"2021-11-03"},{"lineNumber":108,"author":{"gitId":"ThaddeusLim99"},"content":"    public void execute_invalidCardIntegerIndex_expectInvalidIndexErrorMessage() {","lastModifiedDate":"2021-11-03"},{"lineNumber":109,"author":{"gitId":"ThaddeusLim99"},"content":"        DeckManager deckManager \u003d new DeckManager();","lastModifiedDate":"2021-11-03"},{"lineNumber":110,"author":{"gitId":"ThaddeusLim99"},"content":"        deckManager.prepareToAddDeck(\"yeet\");","lastModifiedDate":"2021-11-03"},{"lineNumber":111,"author":{"gitId":"ThaddeusLim99"},"content":"        deckManager.prepareToAddDeck(\"yeeter\");","lastModifiedDate":"2021-11-03"},{"lineNumber":112,"author":{"gitId":"ThaddeusLim99"},"content":"        deckManager.getDeck(0).addFlashCard(\"card\", \"card\");","lastModifiedDate":"2021-11-03"},{"lineNumber":113,"author":{"gitId":"ThaddeusLim99"},"content":"        String input \u003d \"move /c 2 /d 1\";","lastModifiedDate":"2021-11-03"},{"lineNumber":114,"author":{"gitId":"ThaddeusLim99"},"content":"        String commandType \u003d Parser.getCommandType(input);","lastModifiedDate":"2021-11-03"},{"lineNumber":115,"author":{"gitId":"ThaddeusLim99"},"content":"        String arguments \u003d Parser.getCommandArguments(commandType, input);","lastModifiedDate":"2021-11-03"},{"lineNumber":116,"author":{"gitId":"ThaddeusLim99"},"content":"        Command test \u003d new MoveCardCommand(arguments, deckManager.getDeck(0), deckManager);","lastModifiedDate":"2021-11-03"},{"lineNumber":117,"author":{"gitId":"ThaddeusLim99"},"content":"        CommandResult result \u003d test.execute();","lastModifiedDate":"2021-11-03"},{"lineNumber":118,"author":{"gitId":"ThaddeusLim99"},"content":"        String output \u003d result.getResult();","lastModifiedDate":"2021-11-03"},{"lineNumber":119,"author":{"gitId":"ThaddeusLim99"},"content":"        assertEquals(\"Incorrect index for Card!\", output);","lastModifiedDate":"2021-11-03"},{"lineNumber":120,"author":{"gitId":"ThaddeusLim99"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":121,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":122,"author":{"gitId":"ThaddeusLim99"},"content":"    @Test","lastModifiedDate":"2021-11-03"},{"lineNumber":123,"author":{"gitId":"ThaddeusLim99"},"content":"    public void execute_invalidDeckIntegerIndex_expectInvalidIndexErrorMessage() {","lastModifiedDate":"2021-11-03"},{"lineNumber":124,"author":{"gitId":"ThaddeusLim99"},"content":"        DeckManager deckManager \u003d new DeckManager();","lastModifiedDate":"2021-11-03"},{"lineNumber":125,"author":{"gitId":"ThaddeusLim99"},"content":"        deckManager.prepareToAddDeck(\"yeet\");","lastModifiedDate":"2021-11-03"},{"lineNumber":126,"author":{"gitId":"ThaddeusLim99"},"content":"        deckManager.prepareToAddDeck(\"yeeter\");","lastModifiedDate":"2021-11-03"},{"lineNumber":127,"author":{"gitId":"ThaddeusLim99"},"content":"        deckManager.getDeck(0).addFlashCard(\"card\", \"card\");","lastModifiedDate":"2021-11-03"},{"lineNumber":128,"author":{"gitId":"ThaddeusLim99"},"content":"        String input \u003d \"move /c 1 /d 3\";","lastModifiedDate":"2021-11-03"},{"lineNumber":129,"author":{"gitId":"ThaddeusLim99"},"content":"        String commandType \u003d Parser.getCommandType(input);","lastModifiedDate":"2021-11-03"},{"lineNumber":130,"author":{"gitId":"ThaddeusLim99"},"content":"        String arguments \u003d Parser.getCommandArguments(commandType, input);","lastModifiedDate":"2021-11-03"},{"lineNumber":131,"author":{"gitId":"ThaddeusLim99"},"content":"        Command test \u003d new MoveCardCommand(arguments, deckManager.getDeck(0), deckManager);","lastModifiedDate":"2021-11-03"},{"lineNumber":132,"author":{"gitId":"ThaddeusLim99"},"content":"        CommandResult result \u003d test.execute();","lastModifiedDate":"2021-11-03"},{"lineNumber":133,"author":{"gitId":"ThaddeusLim99"},"content":"        String output \u003d result.getResult();","lastModifiedDate":"2021-11-03"},{"lineNumber":134,"author":{"gitId":"ThaddeusLim99"},"content":"        assertEquals(\"Incorrect index for deck!\", output);","lastModifiedDate":"2021-11-03"},{"lineNumber":135,"author":{"gitId":"ThaddeusLim99"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":136,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":137,"author":{"gitId":"ThaddeusLim99"},"content":"    @Test","lastModifiedDate":"2021-11-03"},{"lineNumber":138,"author":{"gitId":"ThaddeusLim99"},"content":"    public void execute_negativeCardIntegerIndex_expectArgumentTypeErrorMessage() {","lastModifiedDate":"2021-11-03"},{"lineNumber":139,"author":{"gitId":"ThaddeusLim99"},"content":"        DeckManager deckManager \u003d new DeckManager();","lastModifiedDate":"2021-11-03"},{"lineNumber":140,"author":{"gitId":"ThaddeusLim99"},"content":"        deckManager.prepareToAddDeck(\"yeet\");","lastModifiedDate":"2021-11-03"},{"lineNumber":141,"author":{"gitId":"ThaddeusLim99"},"content":"        deckManager.prepareToAddDeck(\"yeeter\");","lastModifiedDate":"2021-11-03"},{"lineNumber":142,"author":{"gitId":"ThaddeusLim99"},"content":"        deckManager.getDeck(0).addFlashCard(\"card\", \"card\");","lastModifiedDate":"2021-11-03"},{"lineNumber":143,"author":{"gitId":"ThaddeusLim99"},"content":"        String input \u003d \"move /c -1 /d 2\";","lastModifiedDate":"2021-11-03"},{"lineNumber":144,"author":{"gitId":"ThaddeusLim99"},"content":"        String commandType \u003d Parser.getCommandType(input);","lastModifiedDate":"2021-11-03"},{"lineNumber":145,"author":{"gitId":"ThaddeusLim99"},"content":"        String arguments \u003d Parser.getCommandArguments(commandType, input);","lastModifiedDate":"2021-11-03"},{"lineNumber":146,"author":{"gitId":"ThaddeusLim99"},"content":"        Command test \u003d new MoveCardCommand(arguments, deckManager.getDeck(0), deckManager);","lastModifiedDate":"2021-11-03"},{"lineNumber":147,"author":{"gitId":"ThaddeusLim99"},"content":"        CommandResult result \u003d test.execute();","lastModifiedDate":"2021-11-03"},{"lineNumber":148,"author":{"gitId":"ThaddeusLim99"},"content":"        String output \u003d result.getResult();","lastModifiedDate":"2021-11-03"},{"lineNumber":149,"author":{"gitId":"ThaddeusLim99"},"content":"        assertEquals(\"You can only input the index of the card, \"","lastModifiedDate":"2021-11-03"},{"lineNumber":150,"author":{"gitId":"ThaddeusLim99"},"content":"                + \"which is a positive integer!\", output);","lastModifiedDate":"2021-11-03"},{"lineNumber":151,"author":{"gitId":"ThaddeusLim99"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":152,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":153,"author":{"gitId":"ThaddeusLim99"},"content":"    @Test","lastModifiedDate":"2021-11-03"},{"lineNumber":154,"author":{"gitId":"ThaddeusLim99"},"content":"    public void execute_negativeDeckIntegerIndex_expectArgumentTypeErrorMessage() {","lastModifiedDate":"2021-11-03"},{"lineNumber":155,"author":{"gitId":"ThaddeusLim99"},"content":"        DeckManager deckManager \u003d new DeckManager();","lastModifiedDate":"2021-11-03"},{"lineNumber":156,"author":{"gitId":"ThaddeusLim99"},"content":"        deckManager.prepareToAddDeck(\"yeet\");","lastModifiedDate":"2021-11-03"},{"lineNumber":157,"author":{"gitId":"ThaddeusLim99"},"content":"        deckManager.prepareToAddDeck(\"yeeter\");","lastModifiedDate":"2021-11-03"},{"lineNumber":158,"author":{"gitId":"ThaddeusLim99"},"content":"        deckManager.getDeck(0).addFlashCard(\"card\", \"card\");","lastModifiedDate":"2021-11-03"},{"lineNumber":159,"author":{"gitId":"ThaddeusLim99"},"content":"        String input \u003d \"move /c 1 /d -1\";","lastModifiedDate":"2021-11-03"},{"lineNumber":160,"author":{"gitId":"ThaddeusLim99"},"content":"        String commandType \u003d Parser.getCommandType(input);","lastModifiedDate":"2021-11-03"},{"lineNumber":161,"author":{"gitId":"ThaddeusLim99"},"content":"        String arguments \u003d Parser.getCommandArguments(commandType, input);","lastModifiedDate":"2021-11-03"},{"lineNumber":162,"author":{"gitId":"ThaddeusLim99"},"content":"        Command test \u003d new MoveCardCommand(arguments, deckManager.getDeck(0), deckManager);","lastModifiedDate":"2021-11-03"},{"lineNumber":163,"author":{"gitId":"ThaddeusLim99"},"content":"        CommandResult result \u003d test.execute();","lastModifiedDate":"2021-11-03"},{"lineNumber":164,"author":{"gitId":"ThaddeusLim99"},"content":"        String output \u003d result.getResult();","lastModifiedDate":"2021-11-03"},{"lineNumber":165,"author":{"gitId":"ThaddeusLim99"},"content":"        assertEquals(\"You can only input the index of the deck, \"","lastModifiedDate":"2021-11-03"},{"lineNumber":166,"author":{"gitId":"ThaddeusLim99"},"content":"                + \"which is a positive integer!\", output);","lastModifiedDate":"2021-11-03"},{"lineNumber":167,"author":{"gitId":"ThaddeusLim99"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":168,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":169,"author":{"gitId":"ThaddeusLim99"},"content":"    @Test","lastModifiedDate":"2021-11-03"},{"lineNumber":170,"author":{"gitId":"ThaddeusLim99"},"content":"    public void execute_stringAsCardIndex_expectArgumentTypeErrorMessage() {","lastModifiedDate":"2021-11-03"},{"lineNumber":171,"author":{"gitId":"ThaddeusLim99"},"content":"        DeckManager deckManager \u003d new DeckManager();","lastModifiedDate":"2021-11-03"},{"lineNumber":172,"author":{"gitId":"ThaddeusLim99"},"content":"        deckManager.prepareToAddDeck(\"yeet\");","lastModifiedDate":"2021-11-03"},{"lineNumber":173,"author":{"gitId":"ThaddeusLim99"},"content":"        deckManager.prepareToAddDeck(\"yeeter\");","lastModifiedDate":"2021-11-03"},{"lineNumber":174,"author":{"gitId":"ThaddeusLim99"},"content":"        deckManager.getDeck(0).addFlashCard(\"card\", \"card\");","lastModifiedDate":"2021-11-03"},{"lineNumber":175,"author":{"gitId":"ThaddeusLim99"},"content":"        String input \u003d \"move /c abc /d 2\";","lastModifiedDate":"2021-11-03"},{"lineNumber":176,"author":{"gitId":"ThaddeusLim99"},"content":"        String commandType \u003d Parser.getCommandType(input);","lastModifiedDate":"2021-11-03"},{"lineNumber":177,"author":{"gitId":"ThaddeusLim99"},"content":"        String arguments \u003d Parser.getCommandArguments(commandType, input);","lastModifiedDate":"2021-11-03"},{"lineNumber":178,"author":{"gitId":"ThaddeusLim99"},"content":"        Command test \u003d new MoveCardCommand(arguments, deckManager.getDeck(0), deckManager);","lastModifiedDate":"2021-11-03"},{"lineNumber":179,"author":{"gitId":"ThaddeusLim99"},"content":"        CommandResult result \u003d test.execute();","lastModifiedDate":"2021-11-03"},{"lineNumber":180,"author":{"gitId":"ThaddeusLim99"},"content":"        String output \u003d result.getResult();","lastModifiedDate":"2021-11-03"},{"lineNumber":181,"author":{"gitId":"ThaddeusLim99"},"content":"        assertEquals(\"You can only input the index of the card, \"","lastModifiedDate":"2021-11-03"},{"lineNumber":182,"author":{"gitId":"ThaddeusLim99"},"content":"                + \"which is a positive integer!\", output);","lastModifiedDate":"2021-11-03"},{"lineNumber":183,"author":{"gitId":"ThaddeusLim99"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":184,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":185,"author":{"gitId":"ThaddeusLim99"},"content":"    @Test","lastModifiedDate":"2021-11-03"},{"lineNumber":186,"author":{"gitId":"ThaddeusLim99"},"content":"    public void execute_stringAsDeckIndex_expectArgumentTypeErrorMessage() {","lastModifiedDate":"2021-11-03"},{"lineNumber":187,"author":{"gitId":"ThaddeusLim99"},"content":"        DeckManager deckManager \u003d new DeckManager();","lastModifiedDate":"2021-11-03"},{"lineNumber":188,"author":{"gitId":"ThaddeusLim99"},"content":"        deckManager.prepareToAddDeck(\"yeet\");","lastModifiedDate":"2021-11-03"},{"lineNumber":189,"author":{"gitId":"ThaddeusLim99"},"content":"        deckManager.prepareToAddDeck(\"yeeter\");","lastModifiedDate":"2021-11-03"},{"lineNumber":190,"author":{"gitId":"ThaddeusLim99"},"content":"        deckManager.getDeck(0).addFlashCard(\"card\", \"card\");","lastModifiedDate":"2021-11-03"},{"lineNumber":191,"author":{"gitId":"ThaddeusLim99"},"content":"        String input \u003d \"move /c 1 /d abc\";","lastModifiedDate":"2021-11-03"},{"lineNumber":192,"author":{"gitId":"ThaddeusLim99"},"content":"        String commandType \u003d Parser.getCommandType(input);","lastModifiedDate":"2021-11-03"},{"lineNumber":193,"author":{"gitId":"ThaddeusLim99"},"content":"        String arguments \u003d Parser.getCommandArguments(commandType, input);","lastModifiedDate":"2021-11-03"},{"lineNumber":194,"author":{"gitId":"ThaddeusLim99"},"content":"        Command test \u003d new MoveCardCommand(arguments, deckManager.getDeck(0), deckManager);","lastModifiedDate":"2021-11-03"},{"lineNumber":195,"author":{"gitId":"ThaddeusLim99"},"content":"        CommandResult result \u003d test.execute();","lastModifiedDate":"2021-11-03"},{"lineNumber":196,"author":{"gitId":"ThaddeusLim99"},"content":"        String output \u003d result.getResult();","lastModifiedDate":"2021-11-03"},{"lineNumber":197,"author":{"gitId":"ThaddeusLim99"},"content":"        assertEquals(\"You can only input the index of the deck, \"","lastModifiedDate":"2021-11-03"},{"lineNumber":198,"author":{"gitId":"ThaddeusLim99"},"content":"                + \"which is a positive integer!\", output);","lastModifiedDate":"2021-11-03"},{"lineNumber":199,"author":{"gitId":"ThaddeusLim99"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":200,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":201,"author":{"gitId":"ThaddeusLim99"},"content":"    @Test","lastModifiedDate":"2021-11-03"},{"lineNumber":202,"author":{"gitId":"ThaddeusLim99"},"content":"    public void execute_largeIntegerCardIndex_expectLargeIntgerErrorMessage() {","lastModifiedDate":"2021-11-03"},{"lineNumber":203,"author":{"gitId":"ThaddeusLim99"},"content":"        DeckManager deckManager \u003d new DeckManager();","lastModifiedDate":"2021-11-03"},{"lineNumber":204,"author":{"gitId":"ThaddeusLim99"},"content":"        deckManager.prepareToAddDeck(\"yeet\");","lastModifiedDate":"2021-11-03"},{"lineNumber":205,"author":{"gitId":"ThaddeusLim99"},"content":"        deckManager.prepareToAddDeck(\"yeeter\");","lastModifiedDate":"2021-11-03"},{"lineNumber":206,"author":{"gitId":"ThaddeusLim99"},"content":"        deckManager.getDeck(0).addFlashCard(\"card\", \"card\");","lastModifiedDate":"2021-11-03"},{"lineNumber":207,"author":{"gitId":"ThaddeusLim99"},"content":"        String input \u003d \"move /c 2147483648 /d 2\";","lastModifiedDate":"2021-11-03"},{"lineNumber":208,"author":{"gitId":"ThaddeusLim99"},"content":"        String commandType \u003d Parser.getCommandType(input);","lastModifiedDate":"2021-11-03"},{"lineNumber":209,"author":{"gitId":"ThaddeusLim99"},"content":"        String arguments \u003d Parser.getCommandArguments(commandType, input);","lastModifiedDate":"2021-11-03"},{"lineNumber":210,"author":{"gitId":"ThaddeusLim99"},"content":"        Command test \u003d new MoveCardCommand(arguments, deckManager.getDeck(0), deckManager);","lastModifiedDate":"2021-11-03"},{"lineNumber":211,"author":{"gitId":"ThaddeusLim99"},"content":"        CommandResult result \u003d test.execute();","lastModifiedDate":"2021-11-03"},{"lineNumber":212,"author":{"gitId":"ThaddeusLim99"},"content":"        String output \u003d result.getResult();","lastModifiedDate":"2021-11-03"},{"lineNumber":213,"author":{"gitId":"ThaddeusLim99"},"content":"        assertEquals(\"Card and Deck index must be both \"","lastModifiedDate":"2021-11-03"},{"lineNumber":214,"author":{"gitId":"ThaddeusLim99"},"content":"                + \"smaller than 2147483647.\", output);","lastModifiedDate":"2021-11-03"},{"lineNumber":215,"author":{"gitId":"ThaddeusLim99"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":216,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":217,"author":{"gitId":"ThaddeusLim99"},"content":"    @Test","lastModifiedDate":"2021-11-03"},{"lineNumber":218,"author":{"gitId":"ThaddeusLim99"},"content":"    public void execute_largeIntegerDeckIndex_expectLargeIntgerErrorMessage() {","lastModifiedDate":"2021-11-03"},{"lineNumber":219,"author":{"gitId":"ThaddeusLim99"},"content":"        DeckManager deckManager \u003d new DeckManager();","lastModifiedDate":"2021-11-03"},{"lineNumber":220,"author":{"gitId":"ThaddeusLim99"},"content":"        deckManager.prepareToAddDeck(\"yeet\");","lastModifiedDate":"2021-11-03"},{"lineNumber":221,"author":{"gitId":"ThaddeusLim99"},"content":"        deckManager.prepareToAddDeck(\"yeeter\");","lastModifiedDate":"2021-11-03"},{"lineNumber":222,"author":{"gitId":"ThaddeusLim99"},"content":"        deckManager.getDeck(0).addFlashCard(\"card\", \"card\");","lastModifiedDate":"2021-11-03"},{"lineNumber":223,"author":{"gitId":"ThaddeusLim99"},"content":"        String input \u003d \"move /c 1 /d 2147483648\";","lastModifiedDate":"2021-11-03"},{"lineNumber":224,"author":{"gitId":"ThaddeusLim99"},"content":"        String commandType \u003d Parser.getCommandType(input);","lastModifiedDate":"2021-11-03"},{"lineNumber":225,"author":{"gitId":"ThaddeusLim99"},"content":"        String arguments \u003d Parser.getCommandArguments(commandType, input);","lastModifiedDate":"2021-11-03"},{"lineNumber":226,"author":{"gitId":"ThaddeusLim99"},"content":"        Command test \u003d new MoveCardCommand(arguments, deckManager.getDeck(0), deckManager);","lastModifiedDate":"2021-11-03"},{"lineNumber":227,"author":{"gitId":"ThaddeusLim99"},"content":"        CommandResult result \u003d test.execute();","lastModifiedDate":"2021-11-03"},{"lineNumber":228,"author":{"gitId":"ThaddeusLim99"},"content":"        String output \u003d result.getResult();","lastModifiedDate":"2021-11-03"},{"lineNumber":229,"author":{"gitId":"ThaddeusLim99"},"content":"        assertEquals(\"Card and Deck index must be both \"","lastModifiedDate":"2021-11-03"},{"lineNumber":230,"author":{"gitId":"ThaddeusLim99"},"content":"                + \"smaller than 2147483647.\", output);","lastModifiedDate":"2021-11-03"},{"lineNumber":231,"author":{"gitId":"ThaddeusLim99"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":232,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":233,"author":{"gitId":"ThaddeusLim99"},"content":"    @Test","lastModifiedDate":"2021-11-03"},{"lineNumber":234,"author":{"gitId":"ThaddeusLim99"},"content":"    public void execute_sameDeckDestination_expectSameDestinationErrorMessage() {","lastModifiedDate":"2021-11-03"},{"lineNumber":235,"author":{"gitId":"ThaddeusLim99"},"content":"        DeckManager deckManager \u003d new DeckManager();","lastModifiedDate":"2021-11-03"},{"lineNumber":236,"author":{"gitId":"ThaddeusLim99"},"content":"        deckManager.prepareToAddDeck(\"yeet\");","lastModifiedDate":"2021-11-03"},{"lineNumber":237,"author":{"gitId":"ThaddeusLim99"},"content":"        deckManager.prepareToAddDeck(\"yeeter\");","lastModifiedDate":"2021-11-03"},{"lineNumber":238,"author":{"gitId":"ThaddeusLim99"},"content":"        deckManager.getDeck(0).addFlashCard(\"card\", \"card\");","lastModifiedDate":"2021-11-03"},{"lineNumber":239,"author":{"gitId":"ThaddeusLim99"},"content":"        String input \u003d \"move /c 1 /d 1\";","lastModifiedDate":"2021-11-03"},{"lineNumber":240,"author":{"gitId":"ThaddeusLim99"},"content":"        String commandType \u003d Parser.getCommandType(input);","lastModifiedDate":"2021-11-03"},{"lineNumber":241,"author":{"gitId":"ThaddeusLim99"},"content":"        String arguments \u003d Parser.getCommandArguments(commandType, input);","lastModifiedDate":"2021-11-03"},{"lineNumber":242,"author":{"gitId":"ThaddeusLim99"},"content":"        Command test \u003d new MoveCardCommand(arguments, deckManager.getDeck(0), deckManager);","lastModifiedDate":"2021-11-03"},{"lineNumber":243,"author":{"gitId":"ThaddeusLim99"},"content":"        CommandResult result \u003d test.execute();","lastModifiedDate":"2021-11-03"},{"lineNumber":244,"author":{"gitId":"ThaddeusLim99"},"content":"        String output \u003d result.getResult();","lastModifiedDate":"2021-11-03"},{"lineNumber":245,"author":{"gitId":"ThaddeusLim99"},"content":"        assertEquals(\"Your card is already in the deck specified!\", output);","lastModifiedDate":"2021-11-03"},{"lineNumber":246,"author":{"gitId":"ThaddeusLim99"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":247,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":248,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":249,"author":{"gitId":"ThaddeusLim99"},"content":"}","lastModifiedDate":"2021-11-03"}],"authorContributionMap":{"ThaddeusLim99":249}},{"path":"src/test/java/seedu/cardli/ParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"xRossKoh"},"content":"package seedu.cardli;","lastModifiedDate":"2021-10-26"},{"lineNumber":2,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":3,"author":{"gitId":"astralum"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-14"},{"lineNumber":4,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.parser.Parser;","lastModifiedDate":"2021-10-26"},{"lineNumber":5,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":6,"author":{"gitId":"astralum"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-14"},{"lineNumber":7,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":8,"author":{"gitId":"astralum"},"content":"public class ParserTest {","lastModifiedDate":"2021-10-14"},{"lineNumber":9,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":10,"author":{"gitId":"astralum"},"content":"    @Test","lastModifiedDate":"2021-10-14"},{"lineNumber":11,"author":{"gitId":"xkisxk"},"content":"    public void parseCommand_hasFrontWhitespace_success() {","lastModifiedDate":"2021-10-17"},{"lineNumber":12,"author":{"gitId":"astralum"},"content":"        String input \u003d \" bye\\n\";","lastModifiedDate":"2021-10-14"},{"lineNumber":13,"author":{"gitId":"astralum"},"content":"        assertEquals(\"bye\", Parser.getCommandType(input));","lastModifiedDate":"2021-10-21"},{"lineNumber":14,"author":{"gitId":"ThaddeusLim99"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":15,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":16,"author":{"gitId":"astralum"},"content":"}","lastModifiedDate":"2021-10-14"}],"authorContributionMap":{"astralum":11,"ThaddeusLim99":2,"xRossKoh":2,"xkisxk":1}},{"path":"src/test/java/seedu/cardli/TestParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"xRossKoh"},"content":"package seedu.cardli;","lastModifiedDate":"2021-10-26"},{"lineNumber":2,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":3,"author":{"gitId":"xkisxk"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-18"},{"lineNumber":4,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.exceptions.FieldEmptyException;","lastModifiedDate":"2021-10-26"},{"lineNumber":5,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.parser.TestParser;","lastModifiedDate":"2021-10-26"},{"lineNumber":6,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":7,"author":{"gitId":"xkisxk"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-11-01"},{"lineNumber":8,"author":{"gitId":"xkisxk"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2021-10-18"},{"lineNumber":9,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":10,"author":{"gitId":"xkisxk"},"content":"public class TestParserTest {","lastModifiedDate":"2021-10-18"},{"lineNumber":11,"author":{"gitId":"xkisxk"},"content":"    @Test","lastModifiedDate":"2021-10-18"},{"lineNumber":12,"author":{"gitId":"xkisxk"},"content":"    public void parseUserResponse_noInput_expectFieldEmptyException() {","lastModifiedDate":"2021-10-18"},{"lineNumber":13,"author":{"gitId":"xkisxk"},"content":"        String input \u003d \"\";","lastModifiedDate":"2021-10-18"},{"lineNumber":14,"author":{"gitId":"xkisxk"},"content":"        assertThrows(FieldEmptyException.class, () -\u003e TestParser.parseUserResponse(input));","lastModifiedDate":"2021-10-18"},{"lineNumber":15,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":16,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":17,"author":{"gitId":"xkisxk"},"content":"    @Test","lastModifiedDate":"2021-11-01"},{"lineNumber":18,"author":{"gitId":"xkisxk"},"content":"    public void parseUserResponse_trailingSpaces_expectTrimmedInput() throws FieldEmptyException {","lastModifiedDate":"2021-11-01"},{"lineNumber":19,"author":{"gitId":"xkisxk"},"content":"        String input \u003d \"s       \";","lastModifiedDate":"2021-11-01"},{"lineNumber":20,"author":{"gitId":"xkisxk"},"content":"        assertEquals(\"s\", TestParser.parseUserResponse(input));","lastModifiedDate":"2021-11-01"},{"lineNumber":21,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-11-01"},{"lineNumber":22,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":23,"author":{"gitId":"xkisxk"},"content":"    @Test","lastModifiedDate":"2021-10-18"},{"lineNumber":24,"author":{"gitId":"xkisxk"},"content":"    public void toInt_invalidInput_expectNumberFormatException() {","lastModifiedDate":"2021-10-18"},{"lineNumber":25,"author":{"gitId":"xkisxk"},"content":"        String input \u003d \"call\";","lastModifiedDate":"2021-11-01"},{"lineNumber":26,"author":{"gitId":"xkisxk"},"content":"        assertThrows(NumberFormatException.class, () -\u003e TestParser.toInt(input));","lastModifiedDate":"2021-10-18"},{"lineNumber":27,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":28,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":29,"author":{"gitId":"xkisxk"},"content":"    @Test","lastModifiedDate":"2021-11-01"},{"lineNumber":30,"author":{"gitId":"xkisxk"},"content":"    public void toInt_all_expectMinusOne() {","lastModifiedDate":"2021-11-01"},{"lineNumber":31,"author":{"gitId":"xkisxk"},"content":"        String input \u003d \"all\";","lastModifiedDate":"2021-11-01"},{"lineNumber":32,"author":{"gitId":"xkisxk"},"content":"        assertEquals(-1, TestParser.toInt(\"all\"));","lastModifiedDate":"2021-11-01"},{"lineNumber":33,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-11-01"},{"lineNumber":34,"author":{"gitId":"xkisxk"},"content":"}","lastModifiedDate":"2021-10-18"}],"authorContributionMap":{"xRossKoh":3,"xkisxk":31}},{"path":"src/test/java/seedu/cardli/commands/deck/AddCardCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"JWweiyin"},"content":"package seedu.cardli.commands.deck;","lastModifiedDate":"2021-11-07"},{"lineNumber":2,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":3,"author":{"gitId":"JWweiyin"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-11-07"},{"lineNumber":4,"author":{"gitId":"JWweiyin"},"content":"import seedu.cardli.commands.Command;","lastModifiedDate":"2021-11-07"},{"lineNumber":5,"author":{"gitId":"JWweiyin"},"content":"import seedu.cardli.commands.CommandResult;","lastModifiedDate":"2021-11-07"},{"lineNumber":6,"author":{"gitId":"JWweiyin"},"content":"import seedu.cardli.flashcard.DeckManager;","lastModifiedDate":"2021-11-07"},{"lineNumber":7,"author":{"gitId":"JWweiyin"},"content":"import seedu.cardli.parser.Parser;","lastModifiedDate":"2021-11-07"},{"lineNumber":8,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":9,"author":{"gitId":"JWweiyin"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-11-07"},{"lineNumber":10,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":11,"author":{"gitId":"JWweiyin"},"content":"class AddCardCommandTest {","lastModifiedDate":"2021-11-07"},{"lineNumber":12,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":13,"author":{"gitId":"JWweiyin"},"content":"    @Test","lastModifiedDate":"2021-11-07"},{"lineNumber":14,"author":{"gitId":"JWweiyin"},"content":"    public void execute_addingCardWithSameFront_expectError() {","lastModifiedDate":"2021-11-07"},{"lineNumber":15,"author":{"gitId":"JWweiyin"},"content":"        DeckManager deckManager \u003d new DeckManager();","lastModifiedDate":"2021-11-07"},{"lineNumber":16,"author":{"gitId":"JWweiyin"},"content":"        deckManager.prepareToAddDeck(\"deck1\");","lastModifiedDate":"2021-11-07"},{"lineNumber":17,"author":{"gitId":"JWweiyin"},"content":"        deckManager.getDeck(0).addFlashCard(\"card\", \"card\");","lastModifiedDate":"2021-11-07"},{"lineNumber":18,"author":{"gitId":"JWweiyin"},"content":"        String input \u003d \"add /f card /b back\";","lastModifiedDate":"2021-11-07"},{"lineNumber":19,"author":{"gitId":"JWweiyin"},"content":"        String commandType \u003d Parser.getCommandType(input);","lastModifiedDate":"2021-11-07"},{"lineNumber":20,"author":{"gitId":"JWweiyin"},"content":"        String arguments \u003d Parser.getCommandArguments(commandType, input);","lastModifiedDate":"2021-11-07"},{"lineNumber":21,"author":{"gitId":"JWweiyin"},"content":"        Command test \u003d new AddCardCommand(arguments, deckManager.getDeck(0), deckManager);","lastModifiedDate":"2021-11-07"},{"lineNumber":22,"author":{"gitId":"JWweiyin"},"content":"        CommandResult result \u003d test.execute();","lastModifiedDate":"2021-11-07"},{"lineNumber":23,"author":{"gitId":"JWweiyin"},"content":"        String output \u003d result.getResult();","lastModifiedDate":"2021-11-07"},{"lineNumber":24,"author":{"gitId":"JWweiyin"},"content":"        assertEquals(\"There is already a card with card on the front in deck deck1.\", output);","lastModifiedDate":"2021-11-07"},{"lineNumber":25,"author":{"gitId":"JWweiyin"},"content":"    }","lastModifiedDate":"2021-11-07"},{"lineNumber":26,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":27,"author":{"gitId":"JWweiyin"},"content":"}","lastModifiedDate":"2021-11-07"}],"authorContributionMap":{"JWweiyin":27}},{"path":"src/test/java/seedu/cardli/commands/system/AddDeckCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"JWweiyin"},"content":"package seedu.cardli.commands.system;","lastModifiedDate":"2021-11-07"},{"lineNumber":2,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":3,"author":{"gitId":"JWweiyin"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-11-07"},{"lineNumber":4,"author":{"gitId":"JWweiyin"},"content":"import seedu.cardli.commands.Command;","lastModifiedDate":"2021-11-07"},{"lineNumber":5,"author":{"gitId":"JWweiyin"},"content":"import seedu.cardli.commands.CommandResult;","lastModifiedDate":"2021-11-07"},{"lineNumber":6,"author":{"gitId":"JWweiyin"},"content":"import seedu.cardli.flashcard.DeckManager;","lastModifiedDate":"2021-11-07"},{"lineNumber":7,"author":{"gitId":"JWweiyin"},"content":"import seedu.cardli.parser.Parser;","lastModifiedDate":"2021-11-07"},{"lineNumber":8,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":9,"author":{"gitId":"JWweiyin"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-11-07"},{"lineNumber":10,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":11,"author":{"gitId":"JWweiyin"},"content":"class AddDeckCommandTest {","lastModifiedDate":"2021-11-07"},{"lineNumber":12,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":13,"author":{"gitId":"JWweiyin"},"content":"    public static final String DECK_ALREADY_EXISTS_MESSAGE \u003d \"The deck you are trying to create already exists.\";","lastModifiedDate":"2021-11-07"},{"lineNumber":14,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":15,"author":{"gitId":"JWweiyin"},"content":"    @Test","lastModifiedDate":"2021-11-07"},{"lineNumber":16,"author":{"gitId":"JWweiyin"},"content":"    public void execute_deckWithSameNameDoesNotExist_expectSuccess() {","lastModifiedDate":"2021-11-07"},{"lineNumber":17,"author":{"gitId":"JWweiyin"},"content":"        DeckManager deckManager \u003d new DeckManager();","lastModifiedDate":"2021-11-07"},{"lineNumber":18,"author":{"gitId":"JWweiyin"},"content":"        deckManager.prepareToAddDeck(\"deck1\");","lastModifiedDate":"2021-11-07"},{"lineNumber":19,"author":{"gitId":"JWweiyin"},"content":"        String input \u003d \"add deck1\";","lastModifiedDate":"2021-11-07"},{"lineNumber":20,"author":{"gitId":"JWweiyin"},"content":"        String commandType \u003d Parser.getCommandType(input);","lastModifiedDate":"2021-11-07"},{"lineNumber":21,"author":{"gitId":"JWweiyin"},"content":"        String arguments \u003d Parser.getCommandArguments(commandType, input);","lastModifiedDate":"2021-11-07"},{"lineNumber":22,"author":{"gitId":"JWweiyin"},"content":"        Command test \u003d new AddDeckCommand(arguments, deckManager);","lastModifiedDate":"2021-11-07"},{"lineNumber":23,"author":{"gitId":"JWweiyin"},"content":"        CommandResult result \u003d test.execute();","lastModifiedDate":"2021-11-07"},{"lineNumber":24,"author":{"gitId":"JWweiyin"},"content":"        String output \u003d result.getResult();","lastModifiedDate":"2021-11-07"},{"lineNumber":25,"author":{"gitId":"JWweiyin"},"content":"        assertEquals(DECK_ALREADY_EXISTS_MESSAGE, output);","lastModifiedDate":"2021-11-07"},{"lineNumber":26,"author":{"gitId":"JWweiyin"},"content":"    }","lastModifiedDate":"2021-11-07"},{"lineNumber":27,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":28,"author":{"gitId":"JWweiyin"},"content":"    @Test","lastModifiedDate":"2021-11-07"},{"lineNumber":29,"author":{"gitId":"JWweiyin"},"content":"    public void execute_sameSpellingDifferentCase_expectSuccess() {","lastModifiedDate":"2021-11-07"},{"lineNumber":30,"author":{"gitId":"JWweiyin"},"content":"        DeckManager deckManager \u003d new DeckManager();","lastModifiedDate":"2021-11-07"},{"lineNumber":31,"author":{"gitId":"JWweiyin"},"content":"        deckManager.prepareToAddDeck(\"deck1\");","lastModifiedDate":"2021-11-07"},{"lineNumber":32,"author":{"gitId":"JWweiyin"},"content":"        String input \u003d \"add Deck1\";","lastModifiedDate":"2021-11-07"},{"lineNumber":33,"author":{"gitId":"JWweiyin"},"content":"        String commandType \u003d Parser.getCommandType(input);","lastModifiedDate":"2021-11-07"},{"lineNumber":34,"author":{"gitId":"JWweiyin"},"content":"        String arguments \u003d Parser.getCommandArguments(commandType, input);","lastModifiedDate":"2021-11-07"},{"lineNumber":35,"author":{"gitId":"JWweiyin"},"content":"        Command test \u003d new AddDeckCommand(arguments, deckManager);","lastModifiedDate":"2021-11-07"},{"lineNumber":36,"author":{"gitId":"JWweiyin"},"content":"        CommandResult result \u003d test.execute();","lastModifiedDate":"2021-11-07"},{"lineNumber":37,"author":{"gitId":"JWweiyin"},"content":"        String output \u003d result.getResult();","lastModifiedDate":"2021-11-07"},{"lineNumber":38,"author":{"gitId":"JWweiyin"},"content":"        assertEquals(\"You have just made the deck \u003c\u003cDeck1\u003e\u003e.\", output);","lastModifiedDate":"2021-11-07"},{"lineNumber":39,"author":{"gitId":"JWweiyin"},"content":"    }","lastModifiedDate":"2021-11-07"},{"lineNumber":40,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":41,"author":{"gitId":"JWweiyin"},"content":"}","lastModifiedDate":"2021-11-07"}],"authorContributionMap":{"JWweiyin":41}},{"path":"src/test/java/seedu/cardli/flashcard/DeckManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"xRossKoh"},"content":"package seedu.cardli.flashcard;","lastModifiedDate":"2021-10-26"},{"lineNumber":2,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":3,"author":{"gitId":"xkisxk"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-21"},{"lineNumber":4,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.exceptions.DeckNotExistException;","lastModifiedDate":"2021-10-26"},{"lineNumber":5,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":6,"author":{"gitId":"xkisxk"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-21"},{"lineNumber":7,"author":{"gitId":"xkisxk"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-21"},{"lineNumber":8,"author":{"gitId":"xkisxk"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-21"},{"lineNumber":9,"author":{"gitId":"xkisxk"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2021-10-21"},{"lineNumber":10,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":11,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":12,"author":{"gitId":"xkisxk"},"content":"class DeckManagerTest {","lastModifiedDate":"2021-10-21"},{"lineNumber":13,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":14,"author":{"gitId":"xkisxk"},"content":"    @Test","lastModifiedDate":"2021-10-21"},{"lineNumber":15,"author":{"gitId":"xkisxk"},"content":"    void prepareToAddDeck_deckAdded_expectOne() throws DeckNotExistException {","lastModifiedDate":"2021-10-25"},{"lineNumber":16,"author":{"gitId":"xkisxk"},"content":"        DeckManager deckManager \u003d new DeckManager();","lastModifiedDate":"2021-10-24"},{"lineNumber":17,"author":{"gitId":"xkisxk"},"content":"        deckManager.prepareToAddDeck(\"Test\");","lastModifiedDate":"2021-10-24"},{"lineNumber":18,"author":{"gitId":"xkisxk"},"content":"        assertEquals(1, deckManager.getDecksSize());","lastModifiedDate":"2021-10-24"},{"lineNumber":19,"author":{"gitId":"xkisxk"},"content":"        deckManager.deleteDeck(deckManager.getDeck(0));","lastModifiedDate":"2021-10-24"},{"lineNumber":20,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":21,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":22,"author":{"gitId":"xkisxk"},"content":"    @Test","lastModifiedDate":"2021-10-21"},{"lineNumber":23,"author":{"gitId":"xkisxk"},"content":"    void getTestDeck_indexOutOfBounds_expectIndexOutOfBoundsException() {","lastModifiedDate":"2021-10-21"},{"lineNumber":24,"author":{"gitId":"xkisxk"},"content":"        DeckManager deckManager \u003d new DeckManager();","lastModifiedDate":"2021-10-24"},{"lineNumber":25,"author":{"gitId":"xkisxk"},"content":"        assertThrows(IndexOutOfBoundsException.class, () -\u003e deckManager.getTestDeck(1));","lastModifiedDate":"2021-10-24"},{"lineNumber":26,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":27,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":28,"author":{"gitId":"xkisxk"},"content":"    @Test","lastModifiedDate":"2021-10-21"},{"lineNumber":29,"author":{"gitId":"xkisxk"},"content":"    void hasDeck_noDecks_expectFalse() {","lastModifiedDate":"2021-10-21"},{"lineNumber":30,"author":{"gitId":"xkisxk"},"content":"        DeckManager deckManager \u003d new DeckManager();","lastModifiedDate":"2021-10-24"},{"lineNumber":31,"author":{"gitId":"xkisxk"},"content":"        assertFalse(deckManager.hasDeck(1));","lastModifiedDate":"2021-10-24"},{"lineNumber":32,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":33,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":34,"author":{"gitId":"xkisxk"},"content":"    @Test","lastModifiedDate":"2021-10-21"},{"lineNumber":35,"author":{"gitId":"xkisxk"},"content":"    void hasDeck_hasDeck_expectTrue() throws DeckNotExistException {","lastModifiedDate":"2021-10-25"},{"lineNumber":36,"author":{"gitId":"xkisxk"},"content":"        DeckManager deckManager \u003d new DeckManager();","lastModifiedDate":"2021-10-24"},{"lineNumber":37,"author":{"gitId":"xkisxk"},"content":"        deckManager.prepareToAddDeck(\"Test\");","lastModifiedDate":"2021-10-24"},{"lineNumber":38,"author":{"gitId":"xkisxk"},"content":"        assertTrue(deckManager.hasDeck(0));","lastModifiedDate":"2021-10-24"},{"lineNumber":39,"author":{"gitId":"xkisxk"},"content":"        deckManager.deleteDeck(deckManager.getDeck(0));","lastModifiedDate":"2021-10-24"},{"lineNumber":40,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":41,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":42,"author":{"gitId":"xkisxk"},"content":"    @Test","lastModifiedDate":"2021-10-21"},{"lineNumber":43,"author":{"gitId":"xkisxk"},"content":"    void getTestDeck_twoCards_expectTwoCards() throws DeckNotExistException {","lastModifiedDate":"2021-10-25"},{"lineNumber":44,"author":{"gitId":"xkisxk"},"content":"        DeckManager deckManager \u003d new DeckManager();","lastModifiedDate":"2021-10-24"},{"lineNumber":45,"author":{"gitId":"xkisxk"},"content":"        deckManager.prepareToAddDeck(\"Test Deck 1\");","lastModifiedDate":"2021-10-24"},{"lineNumber":46,"author":{"gitId":"xkisxk"},"content":"        deckManager.prepareToAddDeck(\"Test Deck 2\");","lastModifiedDate":"2021-10-24"},{"lineNumber":47,"author":{"gitId":"xkisxk"},"content":"        deckManager.getDeck(0).addFlashCard(\"test card 1\", \"test card 1\");","lastModifiedDate":"2021-10-24"},{"lineNumber":48,"author":{"gitId":"xkisxk"},"content":"        deckManager.getDeck(1).addFlashCard(\"test card 2\", \"test card 2\");","lastModifiedDate":"2021-10-24"},{"lineNumber":49,"author":{"gitId":"xkisxk"},"content":"        assertEquals(2, deckManager.getTestDeck(-1).getDeckSize());","lastModifiedDate":"2021-10-24"},{"lineNumber":50,"author":{"gitId":"xkisxk"},"content":"        deckManager.deleteDeck(deckManager.getDeck(0));","lastModifiedDate":"2021-10-24"},{"lineNumber":51,"author":{"gitId":"xkisxk"},"content":"        deckManager.deleteDeck(deckManager.getDeck(0));","lastModifiedDate":"2021-10-24"},{"lineNumber":52,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":53,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":54,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":55,"author":{"gitId":"xkisxk"},"content":"    @Test","lastModifiedDate":"2021-10-25"},{"lineNumber":56,"author":{"gitId":"xkisxk"},"content":"    void deleteDeck_noDecks_expectIndexOutOfBoundsException() {","lastModifiedDate":"2021-10-25"},{"lineNumber":57,"author":{"gitId":"xkisxk"},"content":"        DeckManager deckManager \u003d new DeckManager();","lastModifiedDate":"2021-10-25"},{"lineNumber":58,"author":{"gitId":"xkisxk"},"content":"        Deck deck \u003d new Deck(\"euyhfdsifnkjadsanauheaiu\");","lastModifiedDate":"2021-10-25"},{"lineNumber":59,"author":{"gitId":"xkisxk"},"content":"        assertThrows(IndexOutOfBoundsException.class, () -\u003e deckManager.deleteDeck(1));","lastModifiedDate":"2021-10-25"},{"lineNumber":60,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":61,"author":{"gitId":"xkisxk"},"content":"}","lastModifiedDate":"2021-10-21"}],"authorContributionMap":{"xRossKoh":2,"xkisxk":59}},{"path":"src/test/java/seedu/cardli/flashcard/DeckTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"JWweiyin"},"content":"package seedu.cardli.flashcard;","lastModifiedDate":"2021-11-07"},{"lineNumber":2,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":3,"author":{"gitId":"JWweiyin"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-11-07"},{"lineNumber":4,"author":{"gitId":"JWweiyin"},"content":"import seedu.cardli.commands.Command;","lastModifiedDate":"2021-11-07"},{"lineNumber":5,"author":{"gitId":"JWweiyin"},"content":"import seedu.cardli.commands.CommandResult;","lastModifiedDate":"2021-11-07"},{"lineNumber":6,"author":{"gitId":"JWweiyin"},"content":"import seedu.cardli.commands.deck.EditCardCommand;","lastModifiedDate":"2021-11-07"},{"lineNumber":7,"author":{"gitId":"JWweiyin"},"content":"import seedu.cardli.parser.Parser;","lastModifiedDate":"2021-11-07"},{"lineNumber":8,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":9,"author":{"gitId":"JWweiyin"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-11-07"},{"lineNumber":10,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":11,"author":{"gitId":"JWweiyin"},"content":"class DeckTest {","lastModifiedDate":"2021-11-07"},{"lineNumber":12,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":13,"author":{"gitId":"JWweiyin"},"content":"    @Test","lastModifiedDate":"2021-11-07"},{"lineNumber":14,"author":{"gitId":"JWweiyin"},"content":"    public void hasCardWithSameName_matchesCardExactly_returnTrue() {","lastModifiedDate":"2021-11-07"},{"lineNumber":15,"author":{"gitId":"JWweiyin"},"content":"        Deck deck \u003d new Deck();","lastModifiedDate":"2021-11-07"},{"lineNumber":16,"author":{"gitId":"JWweiyin"},"content":"        deck.addFlashCard(\"card\", \"card\");","lastModifiedDate":"2021-11-07"},{"lineNumber":17,"author":{"gitId":"JWweiyin"},"content":"        assertEquals(true, deck.hasCardWithSameName(\"card\"));","lastModifiedDate":"2021-11-07"},{"lineNumber":18,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":19,"author":{"gitId":"JWweiyin"},"content":"    }","lastModifiedDate":"2021-11-07"},{"lineNumber":20,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":21,"author":{"gitId":"JWweiyin"},"content":"    @Test","lastModifiedDate":"2021-11-07"},{"lineNumber":22,"author":{"gitId":"JWweiyin"},"content":"    public void hasCardWithSameName_hasTrailingSpaces_returnTrue() {","lastModifiedDate":"2021-11-07"},{"lineNumber":23,"author":{"gitId":"JWweiyin"},"content":"        Deck deck \u003d new Deck();","lastModifiedDate":"2021-11-07"},{"lineNumber":24,"author":{"gitId":"JWweiyin"},"content":"        deck.addFlashCard(\"card\", \"card\");","lastModifiedDate":"2021-11-07"},{"lineNumber":25,"author":{"gitId":"JWweiyin"},"content":"        assertEquals(true, deck.hasCardWithSameName(\"card   \"));","lastModifiedDate":"2021-11-07"},{"lineNumber":26,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":27,"author":{"gitId":"JWweiyin"},"content":"    }","lastModifiedDate":"2021-11-07"},{"lineNumber":28,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":29,"author":{"gitId":"JWweiyin"},"content":"    @Test","lastModifiedDate":"2021-11-07"},{"lineNumber":30,"author":{"gitId":"JWweiyin"},"content":"    public void hasCardWithSameName_differenceInCase_returnFalse() {","lastModifiedDate":"2021-11-07"},{"lineNumber":31,"author":{"gitId":"JWweiyin"},"content":"        Deck deck \u003d new Deck();","lastModifiedDate":"2021-11-07"},{"lineNumber":32,"author":{"gitId":"JWweiyin"},"content":"        deck.addFlashCard(\"card\", \"card\");","lastModifiedDate":"2021-11-07"},{"lineNumber":33,"author":{"gitId":"JWweiyin"},"content":"        assertEquals(false, deck.hasCardWithSameName(\"cArd\"));","lastModifiedDate":"2021-11-07"},{"lineNumber":34,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":35,"author":{"gitId":"JWweiyin"},"content":"    }","lastModifiedDate":"2021-11-07"},{"lineNumber":36,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":37,"author":{"gitId":"JWweiyin"},"content":"    @Test","lastModifiedDate":"2021-11-07"},{"lineNumber":38,"author":{"gitId":"JWweiyin"},"content":"    public void hasCardWithSameName_completelyDifferentQuery_returnFalse() {","lastModifiedDate":"2021-11-07"},{"lineNumber":39,"author":{"gitId":"JWweiyin"},"content":"        Deck deck \u003d new Deck();","lastModifiedDate":"2021-11-07"},{"lineNumber":40,"author":{"gitId":"JWweiyin"},"content":"        deck.addFlashCard(\"card\", \"card\");","lastModifiedDate":"2021-11-07"},{"lineNumber":41,"author":{"gitId":"JWweiyin"},"content":"        assertEquals(false, deck.hasCardWithSameName(\"ohno\"));","lastModifiedDate":"2021-11-07"},{"lineNumber":42,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":43,"author":{"gitId":"JWweiyin"},"content":"    }","lastModifiedDate":"2021-11-07"},{"lineNumber":44,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":45,"author":{"gitId":"JWweiyin"},"content":"}","lastModifiedDate":"2021-11-07"}],"authorContributionMap":{"JWweiyin":45}},{"path":"src/test/java/seedu/cardli/testing/TestHistoryTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"xkisxk"},"content":"package seedu.cardli.testing;","lastModifiedDate":"2021-11-03"},{"lineNumber":2,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":3,"author":{"gitId":"xkisxk"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-11-03"},{"lineNumber":4,"author":{"gitId":"xkisxk"},"content":"import seedu.cardli.exceptions.DeckNotExistException;","lastModifiedDate":"2021-11-03"},{"lineNumber":5,"author":{"gitId":"xkisxk"},"content":"import seedu.cardli.flashcard.Deck;","lastModifiedDate":"2021-11-03"},{"lineNumber":6,"author":{"gitId":"xkisxk"},"content":"import seedu.cardli.flashcard.DeckManager;","lastModifiedDate":"2021-11-03"},{"lineNumber":7,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":8,"author":{"gitId":"xkisxk"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-11-03"},{"lineNumber":9,"author":{"gitId":"xkisxk"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2021-11-03"},{"lineNumber":10,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":11,"author":{"gitId":"xkisxk"},"content":"public class TestHistoryTest {","lastModifiedDate":"2021-11-03"},{"lineNumber":12,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":13,"author":{"gitId":"xkisxk"},"content":"    DeckManager deckManager \u003d new DeckManager();","lastModifiedDate":"2021-11-03"},{"lineNumber":14,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":15,"author":{"gitId":"xkisxk"},"content":"    @Test","lastModifiedDate":"2021-11-03"},{"lineNumber":16,"author":{"gitId":"xkisxk"},"content":"    void testPrepareViewTest_validIndex_expectResultMessage() throws DeckNotExistException {","lastModifiedDate":"2021-11-03"},{"lineNumber":17,"author":{"gitId":"xkisxk"},"content":"        deckManager.prepareToAddDeck(\"Test\");","lastModifiedDate":"2021-11-03"},{"lineNumber":18,"author":{"gitId":"xkisxk"},"content":"        Deck deck \u003d deckManager.getDeck(0);","lastModifiedDate":"2021-11-03"},{"lineNumber":19,"author":{"gitId":"xkisxk"},"content":"        deck.addFlashCard(\"Card1\", \"Card1\");","lastModifiedDate":"2021-11-03"},{"lineNumber":20,"author":{"gitId":"xkisxk"},"content":"        deck.addFlashCard(\"Card2\", \"Card2\");","lastModifiedDate":"2021-11-03"},{"lineNumber":21,"author":{"gitId":"xkisxk"},"content":"        AnswerList answerList \u003d new AnswerList(deck);","lastModifiedDate":"2021-11-03"},{"lineNumber":22,"author":{"gitId":"xkisxk"},"content":"        answerList.addAnswer(\"W2\", 0);","lastModifiedDate":"2021-11-03"},{"lineNumber":23,"author":{"gitId":"xkisxk"},"content":"        answerList.addAnswer(\"W\", 1);","lastModifiedDate":"2021-11-03"},{"lineNumber":24,"author":{"gitId":"xkisxk"},"content":"        TestHistory testHistory \u003d new TestHistory(deckManager);","lastModifiedDate":"2021-11-03"},{"lineNumber":25,"author":{"gitId":"xkisxk"},"content":"        testHistory.addAnswerList(answerList);","lastModifiedDate":"2021-11-03"},{"lineNumber":26,"author":{"gitId":"xkisxk"},"content":"        assertEquals(testHistory.prepareViewTest(0), \"For test 1: Test\\n\"","lastModifiedDate":"2021-11-03"},{"lineNumber":27,"author":{"gitId":"xkisxk"},"content":"                + \"You scored 0 out of 2\\n\"","lastModifiedDate":"2021-11-03"},{"lineNumber":28,"author":{"gitId":"xkisxk"},"content":"                + \"That is 0.00%!\");","lastModifiedDate":"2021-11-03"},{"lineNumber":29,"author":{"gitId":"xkisxk"},"content":"        deckManager.deleteDeck(deck);","lastModifiedDate":"2021-11-03"},{"lineNumber":30,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":31,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":32,"author":{"gitId":"xkisxk"},"content":"    @Test","lastModifiedDate":"2021-11-03"},{"lineNumber":33,"author":{"gitId":"xkisxk"},"content":"    void testPrepareViewTest_all_expectResultMessage() throws DeckNotExistException {","lastModifiedDate":"2021-11-03"},{"lineNumber":34,"author":{"gitId":"xkisxk"},"content":"        deckManager.prepareToAddDeck(\"Test\");","lastModifiedDate":"2021-11-03"},{"lineNumber":35,"author":{"gitId":"xkisxk"},"content":"        deckManager.prepareToAddDeck(\"Test2\");","lastModifiedDate":"2021-11-03"},{"lineNumber":36,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":37,"author":{"gitId":"xkisxk"},"content":"        Deck deck \u003d deckManager.getDeck(0);","lastModifiedDate":"2021-11-03"},{"lineNumber":38,"author":{"gitId":"xkisxk"},"content":"        deck.addFlashCard(\"Card1\", \"Card1\");","lastModifiedDate":"2021-11-03"},{"lineNumber":39,"author":{"gitId":"xkisxk"},"content":"        Deck deckTwo \u003d deckManager.getDeck(1);","lastModifiedDate":"2021-11-03"},{"lineNumber":40,"author":{"gitId":"xkisxk"},"content":"        deckTwo.addFlashCard(\"Card2\", \"Card2\");","lastModifiedDate":"2021-11-03"},{"lineNumber":41,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":42,"author":{"gitId":"xkisxk"},"content":"        AnswerList answerList \u003d new AnswerList(deck);","lastModifiedDate":"2021-11-03"},{"lineNumber":43,"author":{"gitId":"xkisxk"},"content":"        answerList.addAnswer(\"W2\", 0);","lastModifiedDate":"2021-11-03"},{"lineNumber":44,"author":{"gitId":"xkisxk"},"content":"        AnswerList answerListTwo \u003d new AnswerList(deckTwo);","lastModifiedDate":"2021-11-03"},{"lineNumber":45,"author":{"gitId":"xkisxk"},"content":"        answerListTwo.addAnswer(\"W\", 0);","lastModifiedDate":"2021-11-03"},{"lineNumber":46,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":47,"author":{"gitId":"xkisxk"},"content":"        TestHistory testHistory \u003d new TestHistory(deckManager);","lastModifiedDate":"2021-11-03"},{"lineNumber":48,"author":{"gitId":"xkisxk"},"content":"        testHistory.addAnswerList(answerList);","lastModifiedDate":"2021-11-03"},{"lineNumber":49,"author":{"gitId":"xkisxk"},"content":"        testHistory.addAnswerList(answerListTwo);","lastModifiedDate":"2021-11-03"},{"lineNumber":50,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":51,"author":{"gitId":"xkisxk"},"content":"        assertEquals(\"These are your scores:\\n\"","lastModifiedDate":"2021-11-03"},{"lineNumber":52,"author":{"gitId":"xkisxk"},"content":"                        + \"Score for test 1: Test 0/1 0.00%\\n\"","lastModifiedDate":"2021-11-03"},{"lineNumber":53,"author":{"gitId":"xkisxk"},"content":"                        + \"Score for test 2: Test2 0/1 0.00%\",","lastModifiedDate":"2021-11-03"},{"lineNumber":54,"author":{"gitId":"xkisxk"},"content":"                testHistory.prepareViewTest(-1).trim());","lastModifiedDate":"2021-11-03"},{"lineNumber":55,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":56,"author":{"gitId":"xkisxk"},"content":"        deckManager.deleteDeck(deck);","lastModifiedDate":"2021-11-03"},{"lineNumber":57,"author":{"gitId":"xkisxk"},"content":"        deckManager.deleteDeck(deckTwo);","lastModifiedDate":"2021-11-03"},{"lineNumber":58,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":59,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":60,"author":{"gitId":"xkisxk"},"content":"    @Test","lastModifiedDate":"2021-11-03"},{"lineNumber":61,"author":{"gitId":"xkisxk"},"content":"    void testViewAllFlashcardStats_testedOnce_expectResultMessage() throws DeckNotExistException {","lastModifiedDate":"2021-11-03"},{"lineNumber":62,"author":{"gitId":"xkisxk"},"content":"        deckManager.prepareToAddDeck(\"Test\");","lastModifiedDate":"2021-11-03"},{"lineNumber":63,"author":{"gitId":"xkisxk"},"content":"        deckManager.prepareToAddDeck(\"Test2\");","lastModifiedDate":"2021-11-03"},{"lineNumber":64,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":65,"author":{"gitId":"xkisxk"},"content":"        Deck deck \u003d deckManager.getDeck(0);","lastModifiedDate":"2021-11-03"},{"lineNumber":66,"author":{"gitId":"xkisxk"},"content":"        deck.addFlashCard(\"Card1\", \"Card1\", 0, 1);","lastModifiedDate":"2021-11-03"},{"lineNumber":67,"author":{"gitId":"xkisxk"},"content":"        Deck deckTwo \u003d deckManager.getDeck(1);","lastModifiedDate":"2021-11-03"},{"lineNumber":68,"author":{"gitId":"xkisxk"},"content":"        deckTwo.addFlashCard(\"Card2\", \"Card2\", 1, 1);","lastModifiedDate":"2021-11-03"},{"lineNumber":69,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":70,"author":{"gitId":"xkisxk"},"content":"        AnswerList answerList \u003d new AnswerList(deck);","lastModifiedDate":"2021-11-03"},{"lineNumber":71,"author":{"gitId":"xkisxk"},"content":"        answerList.addAnswer(\"W2\", 0);","lastModifiedDate":"2021-11-03"},{"lineNumber":72,"author":{"gitId":"xkisxk"},"content":"        AnswerList answerListTwo \u003d new AnswerList(deckTwo);","lastModifiedDate":"2021-11-03"},{"lineNumber":73,"author":{"gitId":"xkisxk"},"content":"        answerListTwo.addAnswer(\"Card2\", 0);","lastModifiedDate":"2021-11-03"},{"lineNumber":74,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":75,"author":{"gitId":"xkisxk"},"content":"        TestHistory testHistory \u003d new TestHistory(deckManager);","lastModifiedDate":"2021-11-03"},{"lineNumber":76,"author":{"gitId":"xkisxk"},"content":"        testHistory.addAnswerList(answerList);","lastModifiedDate":"2021-11-03"},{"lineNumber":77,"author":{"gitId":"xkisxk"},"content":"        testHistory.addAnswerList(answerListTwo);","lastModifiedDate":"2021-11-03"},{"lineNumber":78,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":79,"author":{"gitId":"xkisxk"},"content":"        assertEquals(\"Listing total scores of flashcards for all tests:\\n\"","lastModifiedDate":"2021-11-03"},{"lineNumber":80,"author":{"gitId":"xkisxk"},"content":"                + deck.getCard(0).returnFlashCard()","lastModifiedDate":"2021-11-03"},{"lineNumber":81,"author":{"gitId":"xkisxk"},"content":"                + \"\\nScore: 0 out of 1\\n\"","lastModifiedDate":"2021-11-03"},{"lineNumber":82,"author":{"gitId":"xkisxk"},"content":"                + deckTwo.getCard(0).returnFlashCard()","lastModifiedDate":"2021-11-03"},{"lineNumber":83,"author":{"gitId":"xkisxk"},"content":"                + \"\\nScore: 1 out of 1\\n\", testHistory.viewAllFlashcardStats());","lastModifiedDate":"2021-11-03"},{"lineNumber":84,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":85,"author":{"gitId":"xkisxk"},"content":"        deckManager.deleteDeck(deck);","lastModifiedDate":"2021-11-03"},{"lineNumber":86,"author":{"gitId":"xkisxk"},"content":"        deckManager.deleteDeck(deckTwo);","lastModifiedDate":"2021-11-03"},{"lineNumber":87,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":88,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":89,"author":{"gitId":"xkisxk"},"content":"    @Test","lastModifiedDate":"2021-11-03"},{"lineNumber":90,"author":{"gitId":"xkisxk"},"content":"    void testPrepareViewTest_all_expectDeckNotExistException() {","lastModifiedDate":"2021-11-03"},{"lineNumber":91,"author":{"gitId":"xkisxk"},"content":"        TestHistory testHistory \u003d new TestHistory(deckManager);","lastModifiedDate":"2021-11-03"},{"lineNumber":92,"author":{"gitId":"xkisxk"},"content":"        assertThrows(DeckNotExistException.class, () -\u003e testHistory.prepareViewTest(-1));","lastModifiedDate":"2021-11-03"},{"lineNumber":93,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":94,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":95,"author":{"gitId":"xkisxk"},"content":"    @Test","lastModifiedDate":"2021-11-03"},{"lineNumber":96,"author":{"gitId":"xkisxk"},"content":"    void testPrepareViewTest_noAnswerList_expectOutOfBoundsException() {","lastModifiedDate":"2021-11-03"},{"lineNumber":97,"author":{"gitId":"xkisxk"},"content":"        TestHistory testHistory \u003d new TestHistory(deckManager);","lastModifiedDate":"2021-11-03"},{"lineNumber":98,"author":{"gitId":"xkisxk"},"content":"        assertThrows(IndexOutOfBoundsException.class, () -\u003e testHistory.prepareViewTest(1));","lastModifiedDate":"2021-11-03"},{"lineNumber":99,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":100,"author":{"gitId":"xkisxk"},"content":"}","lastModifiedDate":"2021-11-03"}],"authorContributionMap":{"xkisxk":100}},{"path":"src/test/java/seedu/cardli/testing/TestManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"xRossKoh"},"content":"package seedu.cardli.testing;","lastModifiedDate":"2021-10-26"},{"lineNumber":2,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":3,"author":{"gitId":"xkisxk"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-21"},{"lineNumber":4,"author":{"gitId":"xkisxk"},"content":"import seedu.cardli.exceptions.DeckNotExistException;","lastModifiedDate":"2021-11-03"},{"lineNumber":5,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.exceptions.EmptyDeckException;","lastModifiedDate":"2021-10-26"},{"lineNumber":6,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.flashcard.Deck;","lastModifiedDate":"2021-10-26"},{"lineNumber":7,"author":{"gitId":"xRossKoh"},"content":"import seedu.cardli.flashcard.DeckManager;","lastModifiedDate":"2021-10-26"},{"lineNumber":8,"author":{"gitId":"xkisxk"},"content":"import seedu.cardli.ui.TestUi;","lastModifiedDate":"2021-11-03"},{"lineNumber":9,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":10,"author":{"gitId":"xkisxk"},"content":"import java.io.ByteArrayInputStream;","lastModifiedDate":"2021-11-03"},{"lineNumber":11,"author":{"gitId":"xkisxk"},"content":"import java.io.ByteArrayOutputStream;","lastModifiedDate":"2021-11-03"},{"lineNumber":12,"author":{"gitId":"xkisxk"},"content":"import java.io.PrintStream;","lastModifiedDate":"2021-11-03"},{"lineNumber":13,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":14,"author":{"gitId":"xkisxk"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-11-03"},{"lineNumber":15,"author":{"gitId":"xkisxk"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2021-10-21"},{"lineNumber":16,"author":{"gitId":"xkisxk"},"content":"import static seedu.cardli.ui.TestUi.DECK_NOT_EXIST_MESSAGE;","lastModifiedDate":"2021-11-03"},{"lineNumber":17,"author":{"gitId":"xkisxk"},"content":"import static seedu.cardli.ui.TestUi.END_REVIEW_MESSAGE;","lastModifiedDate":"2021-11-03"},{"lineNumber":18,"author":{"gitId":"xkisxk"},"content":"import static seedu.cardli.ui.TestUi.END_TEST_MESSAGE;","lastModifiedDate":"2021-11-03"},{"lineNumber":19,"author":{"gitId":"xkisxk"},"content":"import static seedu.cardli.ui.TestUi.INCORRECT_INPUT_FORMAT_MESSAGE;","lastModifiedDate":"2021-11-03"},{"lineNumber":20,"author":{"gitId":"xkisxk"},"content":"import static seedu.cardli.ui.TestUi.NO_CARDS_TO_REVIEW_MESSAGE;","lastModifiedDate":"2021-11-03"},{"lineNumber":21,"author":{"gitId":"xkisxk"},"content":"import static seedu.cardli.ui.TestUi.NO_CARDS_TO_TEST_MESSAGE;","lastModifiedDate":"2021-11-03"},{"lineNumber":22,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":23,"author":{"gitId":"xkisxk"},"content":"class TestManagerTest {","lastModifiedDate":"2021-10-21"},{"lineNumber":24,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":25,"author":{"gitId":"xkisxk"},"content":"    DeckManager deckManager \u003d new DeckManager();","lastModifiedDate":"2021-11-03"},{"lineNumber":26,"author":{"gitId":"xkisxk"},"content":"    TestHistory testHistory \u003d new TestHistory(deckManager);","lastModifiedDate":"2021-11-03"},{"lineNumber":27,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":28,"author":{"gitId":"xkisxk"},"content":"    @Test","lastModifiedDate":"2021-10-21"},{"lineNumber":29,"author":{"gitId":"xkisxk"},"content":"    void testAllCardsShuffled_emptyDeck_expectEmptyDeckException() {","lastModifiedDate":"2021-10-21"},{"lineNumber":30,"author":{"gitId":"xkisxk"},"content":"        Deck deck \u003d new Deck(\"Test\");","lastModifiedDate":"2021-10-21"},{"lineNumber":31,"author":{"gitId":"xkisxk"},"content":"        AnswerList answerList \u003d new AnswerList(deck);","lastModifiedDate":"2021-10-21"},{"lineNumber":32,"author":{"gitId":"xkisxk"},"content":"        TestManager testManager \u003d new TestManager(testHistory, deckManager);","lastModifiedDate":"2021-11-03"},{"lineNumber":33,"author":{"gitId":"xkisxk"},"content":"        assertThrows(EmptyDeckException.class, () -\u003e testManager.prepareTestDeck(answerList));","lastModifiedDate":"2021-11-03"},{"lineNumber":34,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":35,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":36,"author":{"gitId":"xkisxk"},"content":"    @Test","lastModifiedDate":"2021-11-01"},{"lineNumber":37,"author":{"gitId":"xkisxk"},"content":"    void testStartReview_emptyDeck_expectCaughtEmptyDeckMessage() {","lastModifiedDate":"2021-11-03"},{"lineNumber":38,"author":{"gitId":"xkisxk"},"content":"        deckManager.prepareToAddDeck(\"Test\");","lastModifiedDate":"2021-11-03"},{"lineNumber":39,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":40,"author":{"gitId":"xkisxk"},"content":"        ByteArrayInputStream inputStream \u003d new ByteArrayInputStream(\"0\".getBytes());","lastModifiedDate":"2021-11-03"},{"lineNumber":41,"author":{"gitId":"xkisxk"},"content":"        ByteArrayOutputStream byteArrayOutputStream \u003d new ByteArrayOutputStream();","lastModifiedDate":"2021-11-03"},{"lineNumber":42,"author":{"gitId":"xkisxk"},"content":"        PrintStream ps \u003d new PrintStream(byteArrayOutputStream);","lastModifiedDate":"2021-11-03"},{"lineNumber":43,"author":{"gitId":"xkisxk"},"content":"        TestUi testUi \u003d new TestUi(inputStream, ps);","lastModifiedDate":"2021-11-03"},{"lineNumber":44,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":45,"author":{"gitId":"xkisxk"},"content":"        TestManager testManager \u003d new TestManager(testHistory, deckManager, testUi);","lastModifiedDate":"2021-11-03"},{"lineNumber":46,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":47,"author":{"gitId":"xkisxk"},"content":"        testManager.startReview();","lastModifiedDate":"2021-11-03"},{"lineNumber":48,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":49,"author":{"gitId":"xkisxk"},"content":"        String outputText \u003d byteArrayOutputStream.toString().trim();","lastModifiedDate":"2021-11-03"},{"lineNumber":50,"author":{"gitId":"xkisxk"},"content":"        String actual \u003d outputText.substring(outputText.length() - NO_CARDS_TO_REVIEW_MESSAGE.length()).trim();","lastModifiedDate":"2021-11-03"},{"lineNumber":51,"author":{"gitId":"xkisxk"},"content":"        assertEquals(actual, NO_CARDS_TO_REVIEW_MESSAGE);","lastModifiedDate":"2021-11-03"},{"lineNumber":52,"author":{"gitId":"xkisxk"},"content":"        deckManager.deleteDeck(0);","lastModifiedDate":"2021-11-03"},{"lineNumber":53,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":54,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":55,"author":{"gitId":"xkisxk"},"content":"    @Test","lastModifiedDate":"2021-11-03"},{"lineNumber":56,"author":{"gitId":"xkisxk"},"content":"    void testStartReview_noDeck_expectCaughtIndexOutOfBoundsMessage() {","lastModifiedDate":"2021-11-03"},{"lineNumber":57,"author":{"gitId":"xkisxk"},"content":"        ByteArrayInputStream inputStream \u003d new ByteArrayInputStream(\"110852\".getBytes());","lastModifiedDate":"2021-11-03"},{"lineNumber":58,"author":{"gitId":"xkisxk"},"content":"        ByteArrayOutputStream byteArrayOutputStream \u003d new ByteArrayOutputStream();","lastModifiedDate":"2021-11-03"},{"lineNumber":59,"author":{"gitId":"xkisxk"},"content":"        PrintStream ps \u003d new PrintStream(byteArrayOutputStream);","lastModifiedDate":"2021-11-03"},{"lineNumber":60,"author":{"gitId":"xkisxk"},"content":"        TestUi testUi \u003d new TestUi(inputStream, ps);","lastModifiedDate":"2021-11-03"},{"lineNumber":61,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":62,"author":{"gitId":"xkisxk"},"content":"        TestManager testManager \u003d new TestManager(testHistory, deckManager, testUi);","lastModifiedDate":"2021-11-03"},{"lineNumber":63,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":64,"author":{"gitId":"xkisxk"},"content":"        testManager.startReview();","lastModifiedDate":"2021-11-03"},{"lineNumber":65,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":66,"author":{"gitId":"xkisxk"},"content":"        String outputText \u003d byteArrayOutputStream.toString().trim();","lastModifiedDate":"2021-11-03"},{"lineNumber":67,"author":{"gitId":"xkisxk"},"content":"        String actual \u003d outputText.substring(outputText.length() - DECK_NOT_EXIST_MESSAGE.length()).trim();","lastModifiedDate":"2021-11-03"},{"lineNumber":68,"author":{"gitId":"xkisxk"},"content":"        assertEquals(actual, DECK_NOT_EXIST_MESSAGE);","lastModifiedDate":"2021-11-03"},{"lineNumber":69,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":70,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":71,"author":{"gitId":"xkisxk"},"content":"    @Test","lastModifiedDate":"2021-11-03"},{"lineNumber":72,"author":{"gitId":"xkisxk"},"content":"    void testStartReview_invalidInputFormat_expectCaughtInvalidFormatMessage() {","lastModifiedDate":"2021-11-03"},{"lineNumber":73,"author":{"gitId":"xkisxk"},"content":"        ByteArrayInputStream inputStream \u003d new ByteArrayInputStream(\"asjdaldkallaskdj\".getBytes());","lastModifiedDate":"2021-11-03"},{"lineNumber":74,"author":{"gitId":"xkisxk"},"content":"        ByteArrayOutputStream byteArrayOutputStream \u003d new ByteArrayOutputStream();","lastModifiedDate":"2021-11-03"},{"lineNumber":75,"author":{"gitId":"xkisxk"},"content":"        PrintStream ps \u003d new PrintStream(byteArrayOutputStream);","lastModifiedDate":"2021-11-03"},{"lineNumber":76,"author":{"gitId":"xkisxk"},"content":"        TestUi testUi \u003d new TestUi(inputStream, ps);","lastModifiedDate":"2021-11-03"},{"lineNumber":77,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":78,"author":{"gitId":"xkisxk"},"content":"        TestManager testManager \u003d new TestManager(testHistory, deckManager, testUi);","lastModifiedDate":"2021-11-03"},{"lineNumber":79,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":80,"author":{"gitId":"xkisxk"},"content":"        testManager.startReview();","lastModifiedDate":"2021-11-03"},{"lineNumber":81,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":82,"author":{"gitId":"xkisxk"},"content":"        String outputText \u003d byteArrayOutputStream.toString().trim();","lastModifiedDate":"2021-11-03"},{"lineNumber":83,"author":{"gitId":"xkisxk"},"content":"        String actual \u003d outputText.substring(outputText.length() - INCORRECT_INPUT_FORMAT_MESSAGE.length()).trim();","lastModifiedDate":"2021-11-03"},{"lineNumber":84,"author":{"gitId":"xkisxk"},"content":"        assertEquals(actual, INCORRECT_INPUT_FORMAT_MESSAGE);","lastModifiedDate":"2021-11-03"},{"lineNumber":85,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":86,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":87,"author":{"gitId":"xkisxk"},"content":"    @Test","lastModifiedDate":"2021-11-03"},{"lineNumber":88,"author":{"gitId":"xkisxk"},"content":"    void testStartReview_CorrectIncorrectAndNoAnswers_expectEndTestMessage() throws DeckNotExistException {","lastModifiedDate":"2021-11-03"},{"lineNumber":89,"author":{"gitId":"xkisxk"},"content":"        deckManager.prepareToAddDeck(\"Test\");","lastModifiedDate":"2021-11-03"},{"lineNumber":90,"author":{"gitId":"xkisxk"},"content":"        Deck deck \u003d deckManager.getDeck(0);","lastModifiedDate":"2021-11-03"},{"lineNumber":91,"author":{"gitId":"xkisxk"},"content":"        deck.addFlashCard(\"Card1\", \"Card1\", 3, 5);","lastModifiedDate":"2021-11-03"},{"lineNumber":92,"author":{"gitId":"xkisxk"},"content":"        deck.addFlashCard(\"Card2\", \"Card2\", 2, 5);","lastModifiedDate":"2021-11-03"},{"lineNumber":93,"author":{"gitId":"xkisxk"},"content":"        deck.addFlashCard(\"Card3\", \"Card3\", 0, 5);","lastModifiedDate":"2021-11-03"},{"lineNumber":94,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":95,"author":{"gitId":"xkisxk"},"content":"        ByteArrayInputStream inputStream \u003d new ByteArrayInputStream(","lastModifiedDate":"2021-11-03"},{"lineNumber":96,"author":{"gitId":"xkisxk"},"content":"                \"1\\n/next\\n/back\\nCard2\\n/back\\nWrong\".getBytes());","lastModifiedDate":"2021-11-03"},{"lineNumber":97,"author":{"gitId":"xkisxk"},"content":"        ByteArrayOutputStream byteArrayOutputStream \u003d new ByteArrayOutputStream();","lastModifiedDate":"2021-11-03"},{"lineNumber":98,"author":{"gitId":"xkisxk"},"content":"        PrintStream ps \u003d new PrintStream(byteArrayOutputStream);","lastModifiedDate":"2021-11-03"},{"lineNumber":99,"author":{"gitId":"xkisxk"},"content":"        TestUi testUi \u003d new TestUi(inputStream, ps);","lastModifiedDate":"2021-11-03"},{"lineNumber":100,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":101,"author":{"gitId":"xkisxk"},"content":"        TestManager testManager \u003d new TestManager(testHistory, deckManager, testUi);","lastModifiedDate":"2021-11-03"},{"lineNumber":102,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":103,"author":{"gitId":"xkisxk"},"content":"        String outputText \u003d testManager.startReview().trim();","lastModifiedDate":"2021-11-03"},{"lineNumber":104,"author":{"gitId":"xkisxk"},"content":"        String actual \u003d outputText.substring(outputText.length() - END_REVIEW_MESSAGE.length()).trim();","lastModifiedDate":"2021-11-03"},{"lineNumber":105,"author":{"gitId":"xkisxk"},"content":"        assertEquals(actual, END_REVIEW_MESSAGE);","lastModifiedDate":"2021-11-03"},{"lineNumber":106,"author":{"gitId":"xkisxk"},"content":"        deckManager.deleteDeck(deck);","lastModifiedDate":"2021-11-03"},{"lineNumber":107,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":108,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":109,"author":{"gitId":"xkisxk"},"content":"    @Test","lastModifiedDate":"2021-11-03"},{"lineNumber":110,"author":{"gitId":"xkisxk"},"content":"    void testStartTest_emptyDeck_expectCaughtEmptyDeckMessage() {","lastModifiedDate":"2021-11-03"},{"lineNumber":111,"author":{"gitId":"xkisxk"},"content":"        ByteArrayInputStream inputStream \u003d new ByteArrayInputStream(\"0\".getBytes());","lastModifiedDate":"2021-11-03"},{"lineNumber":112,"author":{"gitId":"xkisxk"},"content":"        ByteArrayOutputStream byteArrayOutputStream \u003d new ByteArrayOutputStream();","lastModifiedDate":"2021-11-03"},{"lineNumber":113,"author":{"gitId":"xkisxk"},"content":"        PrintStream ps \u003d new PrintStream(byteArrayOutputStream);","lastModifiedDate":"2021-11-03"},{"lineNumber":114,"author":{"gitId":"xkisxk"},"content":"        TestUi testUi \u003d new TestUi(inputStream, ps);","lastModifiedDate":"2021-11-03"},{"lineNumber":115,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":116,"author":{"gitId":"xkisxk"},"content":"        TestManager testManager \u003d new TestManager(testHistory, deckManager, testUi);","lastModifiedDate":"2021-11-03"},{"lineNumber":117,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":118,"author":{"gitId":"xkisxk"},"content":"        testManager.startTest();","lastModifiedDate":"2021-11-03"},{"lineNumber":119,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":120,"author":{"gitId":"xkisxk"},"content":"        String outputText \u003d byteArrayOutputStream.toString().trim();","lastModifiedDate":"2021-11-03"},{"lineNumber":121,"author":{"gitId":"xkisxk"},"content":"        String actual \u003d outputText.substring(outputText.length() - NO_CARDS_TO_TEST_MESSAGE.length()).trim();","lastModifiedDate":"2021-11-03"},{"lineNumber":122,"author":{"gitId":"xkisxk"},"content":"        assertEquals(actual, NO_CARDS_TO_TEST_MESSAGE);","lastModifiedDate":"2021-11-03"},{"lineNumber":123,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":124,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":125,"author":{"gitId":"xkisxk"},"content":"    @Test","lastModifiedDate":"2021-11-03"},{"lineNumber":126,"author":{"gitId":"xkisxk"},"content":"    void testStartTest_noDeck_expectCaughtIndexOutOfBoundsMessage() {","lastModifiedDate":"2021-11-03"},{"lineNumber":127,"author":{"gitId":"xkisxk"},"content":"        ByteArrayInputStream inputStream \u003d new ByteArrayInputStream(\"110852\".getBytes());","lastModifiedDate":"2021-11-03"},{"lineNumber":128,"author":{"gitId":"xkisxk"},"content":"        ByteArrayOutputStream byteArrayOutputStream \u003d new ByteArrayOutputStream();","lastModifiedDate":"2021-11-03"},{"lineNumber":129,"author":{"gitId":"xkisxk"},"content":"        PrintStream ps \u003d new PrintStream(byteArrayOutputStream);","lastModifiedDate":"2021-11-03"},{"lineNumber":130,"author":{"gitId":"xkisxk"},"content":"        TestUi testUi \u003d new TestUi(inputStream, ps);","lastModifiedDate":"2021-11-03"},{"lineNumber":131,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":132,"author":{"gitId":"xkisxk"},"content":"        TestManager testManager \u003d new TestManager(testHistory, deckManager, testUi);","lastModifiedDate":"2021-11-03"},{"lineNumber":133,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":134,"author":{"gitId":"xkisxk"},"content":"        testManager.startTest();","lastModifiedDate":"2021-11-03"},{"lineNumber":135,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":136,"author":{"gitId":"xkisxk"},"content":"        String outputText \u003d byteArrayOutputStream.toString().trim();","lastModifiedDate":"2021-11-03"},{"lineNumber":137,"author":{"gitId":"xkisxk"},"content":"        String actual \u003d outputText.substring(outputText.length() - DECK_NOT_EXIST_MESSAGE.length()).trim();","lastModifiedDate":"2021-11-03"},{"lineNumber":138,"author":{"gitId":"xkisxk"},"content":"        assertEquals(actual, DECK_NOT_EXIST_MESSAGE);","lastModifiedDate":"2021-11-03"},{"lineNumber":139,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":140,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":141,"author":{"gitId":"xkisxk"},"content":"    @Test","lastModifiedDate":"2021-11-03"},{"lineNumber":142,"author":{"gitId":"xkisxk"},"content":"    void testStartTest_invalidInputFormat_expectCaughtInvalidFormatMessage() {","lastModifiedDate":"2021-11-03"},{"lineNumber":143,"author":{"gitId":"xkisxk"},"content":"        ByteArrayInputStream inputStream \u003d new ByteArrayInputStream(\"call\".getBytes());","lastModifiedDate":"2021-11-03"},{"lineNumber":144,"author":{"gitId":"xkisxk"},"content":"        ByteArrayOutputStream byteArrayOutputStream \u003d new ByteArrayOutputStream();","lastModifiedDate":"2021-11-03"},{"lineNumber":145,"author":{"gitId":"xkisxk"},"content":"        PrintStream ps \u003d new PrintStream(byteArrayOutputStream);","lastModifiedDate":"2021-11-03"},{"lineNumber":146,"author":{"gitId":"xkisxk"},"content":"        TestUi testUi \u003d new TestUi(inputStream, ps);","lastModifiedDate":"2021-11-03"},{"lineNumber":147,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":148,"author":{"gitId":"xkisxk"},"content":"        TestManager testManager \u003d new TestManager(testHistory, deckManager, testUi);","lastModifiedDate":"2021-11-03"},{"lineNumber":149,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":150,"author":{"gitId":"xkisxk"},"content":"        testManager.startTest();","lastModifiedDate":"2021-11-03"},{"lineNumber":151,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":152,"author":{"gitId":"xkisxk"},"content":"        String outputText \u003d byteArrayOutputStream.toString().trim();","lastModifiedDate":"2021-11-03"},{"lineNumber":153,"author":{"gitId":"xkisxk"},"content":"        String actual \u003d outputText.substring(outputText.length() - INCORRECT_INPUT_FORMAT_MESSAGE.length()).trim();","lastModifiedDate":"2021-11-03"},{"lineNumber":154,"author":{"gitId":"xkisxk"},"content":"        assertEquals(actual, INCORRECT_INPUT_FORMAT_MESSAGE);","lastModifiedDate":"2021-11-03"},{"lineNumber":155,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":156,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":157,"author":{"gitId":"xkisxk"},"content":"    @Test","lastModifiedDate":"2021-11-03"},{"lineNumber":158,"author":{"gitId":"xkisxk"},"content":"    void testStartTest_CorrectIncorrectAndNoAnswers_expectEndTestMessage() throws DeckNotExistException {","lastModifiedDate":"2021-11-03"},{"lineNumber":159,"author":{"gitId":"xkisxk"},"content":"        deckManager.prepareToAddDeck(\"Test\");","lastModifiedDate":"2021-11-03"},{"lineNumber":160,"author":{"gitId":"xkisxk"},"content":"        Deck deck \u003d deckManager.getDeck(0);","lastModifiedDate":"2021-11-03"},{"lineNumber":161,"author":{"gitId":"xkisxk"},"content":"        deck.addFlashCard(\"Card1\", \"Card1\");","lastModifiedDate":"2021-11-03"},{"lineNumber":162,"author":{"gitId":"xkisxk"},"content":"        deck.addFlashCard(\"Card2\", \"Card2\");","lastModifiedDate":"2021-11-03"},{"lineNumber":163,"author":{"gitId":"xkisxk"},"content":"        deck.addFlashCard(\"Card3\", \"Card3\");","lastModifiedDate":"2021-11-03"},{"lineNumber":164,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":165,"author":{"gitId":"xkisxk"},"content":"        ByteArrayInputStream inputStream \u003d new ByteArrayInputStream(","lastModifiedDate":"2021-11-03"},{"lineNumber":166,"author":{"gitId":"xkisxk"},"content":"                \"1\\n/next\\n/back\\nCard1\\n/back\\nWrong\\n\\n\".getBytes());","lastModifiedDate":"2021-11-03"},{"lineNumber":167,"author":{"gitId":"xkisxk"},"content":"        ByteArrayOutputStream byteArrayOutputStream \u003d new ByteArrayOutputStream();","lastModifiedDate":"2021-11-03"},{"lineNumber":168,"author":{"gitId":"xkisxk"},"content":"        PrintStream ps \u003d new PrintStream(byteArrayOutputStream);","lastModifiedDate":"2021-11-03"},{"lineNumber":169,"author":{"gitId":"xkisxk"},"content":"        TestUi testUi \u003d new TestUi(inputStream, ps);","lastModifiedDate":"2021-11-03"},{"lineNumber":170,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":171,"author":{"gitId":"xkisxk"},"content":"        TestManager testManager \u003d new TestManager(testHistory, deckManager, testUi);","lastModifiedDate":"2021-11-03"},{"lineNumber":172,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":173,"author":{"gitId":"xkisxk"},"content":"        String outputText \u003d testManager.startTest();","lastModifiedDate":"2021-11-03"},{"lineNumber":174,"author":{"gitId":"xkisxk"},"content":"        String actual \u003d outputText.substring(outputText.length() - END_TEST_MESSAGE.length()).trim();","lastModifiedDate":"2021-11-03"},{"lineNumber":175,"author":{"gitId":"xkisxk"},"content":"        assertEquals(actual, END_TEST_MESSAGE);","lastModifiedDate":"2021-11-03"},{"lineNumber":176,"author":{"gitId":"xkisxk"},"content":"        deckManager.deleteDeck(deck);","lastModifiedDate":"2021-11-03"},{"lineNumber":177,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-11-01"},{"lineNumber":178,"author":{"gitId":"xkisxk"},"content":"}","lastModifiedDate":"2021-10-21"}],"authorContributionMap":{"xRossKoh":4,"xkisxk":174}}]
