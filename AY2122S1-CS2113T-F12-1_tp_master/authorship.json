[{"path":"build.gradle","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":29,"author":{"gitId":"astralum"},"content":"        systemProperty(\"junit.platform.output.capture.stdout\", true);","lastModifiedDate":"2021-10-14"},{"lineNumber":30,"author":{"gitId":"astralum"},"content":"        systemProperty(\"junit.platform.output.capture.stderr\", true);","lastModifiedDate":"2021-10-14"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    mainClassName \u003d \"seedu.duke.Duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"checkstyle {","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.23\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":49,"author":{"gitId":"xkisxk"},"content":"    enableAssertions \u003d true","lastModifiedDate":"2021-10-10"},{"lineNumber":50,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"astralum":3,"xkisxk":1,"-":46}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# About us","lastModifiedDate":"2020-05-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"Display | Name | Github Profile | Portfolio ","lastModifiedDate":"2020-05-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"--------|:----:|:--------------:|:---------:","lastModifiedDate":"2020-05-24"},{"lineNumber":5,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-10-01"},{"lineNumber":6,"author":{"gitId":"xRossKoh"},"content":"![](https://via.placeholder.com/100.png?text\u003dPhoto) | Koh Meng Kiat, Kenneth | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)","lastModifiedDate":"2021-10-01"},{"lineNumber":7,"author":{"gitId":"JWweiyin"},"content":"![](https://via.placeholder.com/100.png?text\u003dPhoto) | Joanne Wong Wei Yin | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)","lastModifiedDate":"2021-10-01"},{"lineNumber":8,"author":{"gitId":"ThaddeusLim99"},"content":"![](https://via.placeholder.com/100.png?text\u003dPhoto) | Thaddeus Lim | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)","lastModifiedDate":"2021-10-01"},{"lineNumber":9,"author":{"gitId":"xkisxk"},"content":"![](https://via.placeholder.com/100.png?text\u003dPhoto) | Jiang Xing Kai | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)","lastModifiedDate":"2021-10-01"},{"lineNumber":10,"author":{"gitId":"astralum"},"content":"![](https://via.placeholder.com/100.png?text\u003dPhoto) | Jin Minyue | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)","lastModifiedDate":"2021-10-01"}],"authorContributionMap":{"JWweiyin":1,"ThaddeusLim99":1,"astralum":1,"xRossKoh":2,"xkisxk":1,"-":4}},{"path":"docs/DeveloperGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# Developer Guide","lastModifiedDate":"2020-05-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":3,"author":{"gitId":"ThaddeusLim99"},"content":"#Introduction","lastModifiedDate":"2021-10-21"},{"lineNumber":4,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":5,"author":{"gitId":"ThaddeusLim99"},"content":"CardLI is a Command Line Interface (CLI) desktop app designed to help students manage their flashcards. CardLI can help","lastModifiedDate":"2021-10-21"},{"lineNumber":6,"author":{"gitId":"ThaddeusLim99"},"content":"students keep track of all their flashcards. It also does tests for students to test their knowledge. All of this in one","lastModifiedDate":"2021-10-21"},{"lineNumber":7,"author":{"gitId":"ThaddeusLim99"},"content":"single platform.","lastModifiedDate":"2021-10-21"},{"lineNumber":8,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"## Acknowledgements","lastModifiedDate":"2020-05-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":11,"author":{"gitId":"JWweiyin"},"content":"{list here sources of all reused/adapted ideas, code, documentation, and third-party libraries -- include links to the","lastModifiedDate":"2021-10-20"},{"lineNumber":12,"author":{"gitId":"JWweiyin"},"content":"original source as well}","lastModifiedDate":"2021-10-20"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":14,"author":{"gitId":"astralum"},"content":"## Design","lastModifiedDate":"2021-10-21"},{"lineNumber":15,"author":{"gitId":"astralum"},"content":"CardLi has one main component, ```Duke```, which is the entry point to the App.","lastModifiedDate":"2021-10-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":17,"author":{"gitId":"astralum"},"content":"The rest of the App consists of the following components:","lastModifiedDate":"2021-10-21"},{"lineNumber":18,"author":{"gitId":"astralum"},"content":"* ```Parser```: Interfaces with the user by reading and interpreting input","lastModifiedDate":"2021-10-21"},{"lineNumber":19,"author":{"gitId":"astralum"},"content":"* ```UI```: The UI of the App","lastModifiedDate":"2021-10-21"},{"lineNumber":20,"author":{"gitId":"astralum"},"content":"* ```Logic```: The command executor","lastModifiedDate":"2021-10-21"},{"lineNumber":21,"author":{"gitId":"astralum"},"content":"* ```Storage```: Reads and writes data from and to an external file(s)","lastModifiedDate":"2021-10-21"},{"lineNumber":22,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":23,"author":{"gitId":"astralum"},"content":"Each component is explained in the sections below.","lastModifiedDate":"2021-10-21"},{"lineNumber":24,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":25,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":26,"author":{"gitId":"astralum"},"content":"### Parser Component","lastModifiedDate":"2021-10-21"},{"lineNumber":27,"author":{"gitId":"astralum"},"content":"The Parser component consists of two classes, ```Parser``` and ```TestParser```. Parser deals with input relating to adding, deleting, editing and viewing flashcards and decks, while ```TestParser``` deals with input relating to testing.","lastModifiedDate":"2021-10-21"},{"lineNumber":28,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":29,"author":{"gitId":"astralum"},"content":"How the Parser component works:","lastModifiedDate":"2021-10-21"},{"lineNumber":30,"author":{"gitId":"astralum"},"content":"* Identifies the command input by the user","lastModifiedDate":"2021-10-21"},{"lineNumber":31,"author":{"gitId":"astralum"},"content":"* Parses command arguments","lastModifiedDate":"2021-10-21"},{"lineNumber":32,"author":{"gitId":"astralum"},"content":"* Executes commands using the Logic component","lastModifiedDate":"2021-10-21"},{"lineNumber":33,"author":{"gitId":"astralum"},"content":"* Handles exceptions relating to invalid arguments","lastModifiedDate":"2021-10-21"},{"lineNumber":34,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":35,"author":{"gitId":"astralum"},"content":"### UI Component","lastModifiedDate":"2021-10-21"},{"lineNumber":36,"author":{"gitId":"astralum"},"content":"The UI component consists of two classes, ```CardLiUi``` and ```TestUi```. It outputs greeting, exit and help messages to the user on command.","lastModifiedDate":"2021-10-21"},{"lineNumber":37,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":38,"author":{"gitId":"astralum"},"content":"### Logic Component","lastModifiedDate":"2021-10-21"},{"lineNumber":39,"author":{"gitId":"astralum"},"content":"The Logic component consists of the classes ```DeckManager```, ```Deck```, ```Flashcard```, ```TestManager```, ```AnswerList``` and ```Answer```. It executes user commands by calling on methods in its classes when appropriate with the appropriate arguments as given by the Parser component.","lastModifiedDate":"2021-10-21"},{"lineNumber":40,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":41,"author":{"gitId":"astralum"},"content":"CardLi’s user commands operate on a 2-tier structure: a Systemwide level and a Deck level. The Systemwide level commands execute commands related to the management of decks, while the Deck level commands execute commands related to flashcards in a specific deck. The specific implementations are elaborated on in the *Implementation* section.","lastModifiedDate":"2021-10-21"},{"lineNumber":42,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":43,"author":{"gitId":"astralum"},"content":"### Storage Component","lastModifiedDate":"2021-10-21"},{"lineNumber":44,"author":{"gitId":"astralum"},"content":"The Storage component:","lastModifiedDate":"2021-10-21"},{"lineNumber":45,"author":{"gitId":"astralum"},"content":"* Saves all the decks","lastModifiedDate":"2021-10-21"},{"lineNumber":46,"author":{"gitId":"astralum"},"content":"* Saves all the flashcards","lastModifiedDate":"2021-10-21"},{"lineNumber":47,"author":{"gitId":"astralum"},"content":"* Remembers which deck each flashcard belongs to","lastModifiedDate":"2021-10-21"},{"lineNumber":48,"author":{"gitId":"astralum"},"content":"* Saves the results of each test","lastModifiedDate":"2021-10-21"},{"lineNumber":49,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":50,"author":{"gitId":"astralum"},"content":"## Implementation","lastModifiedDate":"2021-10-21"},{"lineNumber":51,"author":{"gitId":"ThaddeusLim99"},"content":"### Editing a Deck","lastModifiedDate":"2021-10-21"},{"lineNumber":52,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":53,"author":{"gitId":"ThaddeusLim99"},"content":"This subsection provides details on the implementation of the commands that enable the editing of the `Deck` object.","lastModifiedDate":"2021-10-21"},{"lineNumber":54,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":55,"author":{"gitId":"ThaddeusLim99"},"content":"The user can only edit the `name` attribute of the `Deck` object, which represents the name of the deck.","lastModifiedDate":"2021-10-21"},{"lineNumber":56,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":57,"author":{"gitId":"ThaddeusLim99"},"content":"### `EditDeckCommand`","lastModifiedDate":"2021-10-21"},{"lineNumber":58,"author":{"gitId":"ThaddeusLim99"},"content":"The \u0027EditDeckCommand\u0027 allows the changing of the name of the `Deck`.","lastModifiedDate":"2021-10-21"},{"lineNumber":59,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":60,"author":{"gitId":"ThaddeusLim99"},"content":"Given below is the sequence diagram for `EditDeckCommand`:","lastModifiedDate":"2021-10-21"},{"lineNumber":61,"author":{"gitId":"ThaddeusLim99"},"content":"![](assets/editDeckCommandSeqDiagram.png)","lastModifiedDate":"2021-10-21"},{"lineNumber":62,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":63,"author":{"gitId":"ThaddeusLim99"},"content":"### Editing a FlashCard","lastModifiedDate":"2021-10-21"},{"lineNumber":64,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":65,"author":{"gitId":"ThaddeusLim99"},"content":"The \u0027EditCardCommand\u0027 allows the changing of the content of the `FlashCard`. The user can decide to change either the `front`","lastModifiedDate":"2021-10-21"},{"lineNumber":66,"author":{"gitId":"ThaddeusLim99"},"content":"or `back` attributes of the `FlashCard`object, which represents the front and back side of the card.","lastModifiedDate":"2021-10-21"},{"lineNumber":67,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":68,"author":{"gitId":"ThaddeusLim99"},"content":"Given below is the sequence diagram for `EditCardCommand`:","lastModifiedDate":"2021-10-21"},{"lineNumber":69,"author":{"gitId":"ThaddeusLim99"},"content":"![](assets/editDeckCommandSeqDiagram.png)","lastModifiedDate":"2021-10-21"},{"lineNumber":70,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":71,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":73,"author":{"gitId":"JWweiyin"},"content":"###Find","lastModifiedDate":"2021-10-21"},{"lineNumber":74,"author":{"gitId":"JWweiyin"},"content":"\u003c!DOCTYPE html\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":75,"author":{"gitId":"JWweiyin"},"content":"\u003chtml\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":76,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":77,"author":{"gitId":"JWweiyin"},"content":"\u003chead\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":78,"author":{"gitId":"JWweiyin"},"content":"    \u003cmeta charset\u003d\"utf-8\"\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":79,"author":{"gitId":"JWweiyin"},"content":"    \u003cmeta name\u003d\"viewport\" content\u003d\"width\u003ddevice-width, initial-scale\u003d1.0\"\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":80,"author":{"gitId":"JWweiyin"},"content":"    \u003ctitle\u003e\u003c/title\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":81,"author":{"gitId":"JWweiyin"},"content":"\u003c/head\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":82,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":83,"author":{"gitId":"JWweiyin"},"content":"\u003cbody\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":84,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":85,"author":{"gitId":"JWweiyin"},"content":"![](assets/Find.png)","lastModifiedDate":"2021-10-21"},{"lineNumber":86,"author":{"gitId":"JWweiyin"},"content":"\u003c/body\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":87,"author":{"gitId":"JWweiyin"},"content":"\u003cbody\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":88,"author":{"gitId":"JWweiyin"},"content":"    \u003cp dir\u003d\"ltr\" style\u003d\"line-height:1.38;margin-top:0pt;margin-bottom:0pt;\"\u003e\u003cspan style\u003d\"font-size:11pt;font-family:Arial;font-weight:400;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre;white-space:pre-wrap;\"\u003eThis feature allows users of CardLI to find a\u0026nbsp;\u003c/span\u003e\u003cspan style\u003d\"font-size:11pt;font-family:Arial;font-weight:700;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre;white-space:pre-wrap;\"\u003eFlashCard\u003c/span\u003e\u003cspan style\u003d\"font-size:11pt;font-family:Arial;font-weight:400;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre;white-space:pre-wrap;\"\u003e\u0026nbsp;by providing a search term to the input following the command term `find`. By invoking this function the user can view specific\u0026nbsp;\u003c/span\u003e\u003cspan style\u003d\"font-size:11pt;font-family:Arial;font-weight:700;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre;white-space:pre-wrap;\"\u003eFlashCards\u003c/span\u003e\u003cspan style\u003d\"font-size:11pt;font-family:Arial;font-weight:400;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre;white-space:pre-wrap;\"\u003e\u0026nbsp;matching the search term from the main menu, instead of entering each deck and manually looking through the list of\u0026nbsp;\u003c/span\u003e\u003cspan style\u003d\"font-size:11pt;font-family:Arial;font-weight:700;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre;white-space:pre-wrap;\"\u003eFlashCard\u003c/span\u003e\u003cspan style\u003d\"font-size:11pt;font-family:Arial;font-weight:400;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre;white-space:pre-wrap;\"\u003e\u0026nbsp;for the desired ones.\u003c/span\u003e\u003c/p\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":89,"author":{"gitId":"JWweiyin"},"content":"    \u003cp\u003e\u003c/p\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":90,"author":{"gitId":"JWweiyin"},"content":"    \u003cp dir\u003d\"ltr\" style\u003d\"line-height:1.38;margin-top:0pt;margin-bottom:0pt;\"\u003e\u003cspan style\u003d\"font-size:11pt;font-family:Arial;font-weight:400;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre;white-space:pre-wrap;\"\u003eCurrently, \u0026ldquo;Find\u0026rdquo; is implemented on a Systemwide level. After the\u0026nbsp;\u003c/span\u003e\u003cspan style\u003d\"font-size:11pt;font-family:Arial;font-weight:700;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre;white-space:pre-wrap;\"\u003eUi\u0026nbsp;\u003c/span\u003e\u003cspan style\u003d\"font-size:11pt;font-family:Arial;font-weight:400;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre;white-space:pre-wrap;\"\u003ehandles the user input,\u0026nbsp;\u003c/span\u003e\u003cspan style\u003d\"font-size:11pt;font-family:Arial;font-weight:700;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre;white-space:pre-wrap;\"\u003eParser\u0026nbsp;\u003c/span\u003e\u003cspan style\u003d\"font-size:11pt;font-family:Arial;font-weight:400;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre;white-space:pre-wrap;\"\u003eformats the user input and passes the search term(s) to\u0026nbsp;\u003c/span\u003e\u003cspan style\u003d\"font-size:11pt;font-family:Arial;font-weight:700;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre;white-space:pre-wrap;\"\u003eFind\u003c/span\u003e\u003cspan style\u003d\"font-size:11pt;font-family:Arial;font-weight:400;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre;white-space:pre-wrap;\"\u003e\u0026nbsp;which repeatedly calls the\u0026nbsp;\u003c/span\u003e\u003cspan style\u003d\"font-size:11pt;font-family:\u0027Courier New\u0027;font-weight:700;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre;white-space:pre-wrap;\"\u003efilter()\u003c/span\u003e\u003cspan style\u003d\"font-size:11pt;font-family:Arial;font-weight:400;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre;white-space:pre-wrap;\"\u003e\u0026nbsp;method that iterates once for each instance of a deck.\u003c/span\u003e\u003c/p\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":91,"author":{"gitId":"JWweiyin"},"content":"    \u003cp\u003e\u003c/p\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":92,"author":{"gitId":"JWweiyin"},"content":"    \u003cp\u003e\u003cspan style\u003d\"font-size:11pt;font-family:\u0027Courier New\u0027;font-weight:700;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre;white-space:pre-wrap;\"\u003efilter()\u003c/span\u003e\u003cspan style\u003d\"font-size:11pt;font-family:Arial;font-weight:400;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre;white-space:pre-wrap;\"\u003e\u0026nbsp;is implemented by creating a stream that consists of all the flashcards in one deck, and filters them based on whether they contain the search term given. Finally all the flashcards that contain the search term are collected in an arrayList to be displayed to the user along with their\u0026nbsp;\u003c/span\u003e\u003cspan style\u003d\"font-size:11pt;font-family:\u0027Courier New\u0027;font-weight:400;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre;white-space:pre-wrap;\"\u003edeckIndex\u003c/span\u003e\u003cspan style\u003d\"font-size:11pt;font-family:Arial;font-weight:400;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre;white-space:pre-wrap;\"\u003e\u0026nbsp;and\u003c/span\u003e\u003cspan style\u003d\"font-size:11pt;font-family:\u0027Courier New\u0027;font-weight:400;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre;white-space:pre-wrap;\"\u003e\u0026nbsp;cardIndex\u003c/span\u003e\u003cspan style\u003d\"font-size:11pt;font-family:Arial;font-weight:400;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre;white-space:pre-wrap;\"\u003e.\u003c/span\u003e\u003c/p\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":93,"author":{"gitId":"JWweiyin"},"content":"\u003c/body\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":96,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":97,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":98,"author":{"gitId":"xkisxk"},"content":"###Test Feature","lastModifiedDate":"2021-10-21"},{"lineNumber":99,"author":{"gitId":"xkisxk"},"content":"![class diagram](../docs/assets/testClassDiagram.png)","lastModifiedDate":"2021-10-21"},{"lineNumber":100,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":101,"author":{"gitId":"xkisxk"},"content":"Currently, test feature is implemented on a systemwide level and is handled by `TestManager`.","lastModifiedDate":"2021-10-21"},{"lineNumber":102,"author":{"gitId":"xkisxk"},"content":"`TestManager` will call on `TestUi` and `TestParser` to handle the inputs and outputs with the user","lastModifiedDate":"2021-10-21"},{"lineNumber":103,"author":{"gitId":"xkisxk"},"content":"and the parsing respectively during the test.","lastModifiedDate":"2021-10-21"},{"lineNumber":104,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":105,"author":{"gitId":"xkisxk"},"content":"At the start of the test, the user will choose to test themselves with a single deck or all decks at once.","lastModifiedDate":"2021-10-21"},{"lineNumber":106,"author":{"gitId":"xkisxk"},"content":"This is dependent on the integer the user inputs.","lastModifiedDate":"2021-10-21"},{"lineNumber":107,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":108,"author":{"gitId":"xkisxk"},"content":"In both cases, `TestManager` will create an `AnswerList` using a `Deck` that it creates or gets from","lastModifiedDate":"2021-10-21"},{"lineNumber":109,"author":{"gitId":"xkisxk"},"content":"`DeckManager` depending on the condition which is shown by the sequence diagram below. The `AnswerList`","lastModifiedDate":"2021-10-21"},{"lineNumber":110,"author":{"gitId":"xkisxk"},"content":"is where the user\u0027s response to the test is stored, and it is made up of `Answer` as shown in the class","lastModifiedDate":"2021-10-21"},{"lineNumber":111,"author":{"gitId":"xkisxk"},"content":"diagram above.","lastModifiedDate":"2021-10-21"},{"lineNumber":112,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":113,"author":{"gitId":"xkisxk"},"content":"![sequence diagram](../docs/assets/getTestDeckSequenceDiagram.png)","lastModifiedDate":"2021-10-21"},{"lineNumber":114,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":115,"author":{"gitId":"xkisxk"},"content":"After initializing the `AnswerList`, the testing begins. The `Deck` gets shuffled, then","lastModifiedDate":"2021-10-21"},{"lineNumber":116,"author":{"gitId":"xkisxk"},"content":"the user will answer the question one at a time. This process is repeated for the entire `Deck` that","lastModifiedDate":"2021-10-21"},{"lineNumber":117,"author":{"gitId":"xkisxk"},"content":"is being tested which is shown below by the sequence diagram.","lastModifiedDate":"2021-10-21"},{"lineNumber":118,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":119,"author":{"gitId":"xkisxk"},"content":"![sequence diagram](../docs/assets/testAllCardsShuffledSequenceDiagram.png)","lastModifiedDate":"2021-10-21"},{"lineNumber":120,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":121,"author":{"gitId":"xkisxk"},"content":"After all cards have been tested, the marking process begins as shown by the sequence diagram below.","lastModifiedDate":"2021-10-21"},{"lineNumber":122,"author":{"gitId":"xkisxk"},"content":"For every correct answer, the user\u0027s score increments and `TestUi` will print a correct answer message.","lastModifiedDate":"2021-10-21"},{"lineNumber":123,"author":{"gitId":"xkisxk"},"content":"After marking all the questions, the user\u0027s results will be printed and saved in `TestHistory`.","lastModifiedDate":"2021-10-21"},{"lineNumber":124,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":125,"author":{"gitId":"xkisxk"},"content":"![sequence diagram](../docs/assets/markTestSequenceDiagram.png)","lastModifiedDate":"2021-10-21"},{"lineNumber":126,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":127,"author":{"gitId":"xRossKoh"},"content":"### Storage","lastModifiedDate":"2021-10-22"},{"lineNumber":128,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":129,"author":{"gitId":"xRossKoh"},"content":"This feature allows users of CardLI to save their current decks of flashcards. This will also allow them to access their ","lastModifiedDate":"2021-10-22"},{"lineNumber":130,"author":{"gitId":"xRossKoh"},"content":"decks of flashcards when they re-enter the application, and not have to keep re-adding the same flashcards into the ","lastModifiedDate":"2021-10-22"},{"lineNumber":131,"author":{"gitId":"xRossKoh"},"content":"application over and over again.","lastModifiedDate":"2021-10-22"},{"lineNumber":132,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":133,"author":{"gitId":"xRossKoh"},"content":"This feature is implemented by saving the user’s current decks of flashcards into a separate text file stored within the","lastModifiedDate":"2021-10-22"},{"lineNumber":134,"author":{"gitId":"xRossKoh"},"content":"same directory as that of the application “jar” file. The filepath of the text file is hard coded as ``data/CardLI.txt``. ","lastModifiedDate":"2021-10-22"},{"lineNumber":135,"author":{"gitId":"xRossKoh"},"content":"When the user inputs the command ``bye``, the application will take that as a cue to execute the save function. When the ","lastModifiedDate":"2021-10-22"},{"lineNumber":136,"author":{"gitId":"xRossKoh"},"content":"user restarts or re-enters the application, the application will then read from the same text file to fetch all the ","lastModifiedDate":"2021-10-22"},{"lineNumber":137,"author":{"gitId":"xRossKoh"},"content":"decks of flashcards that were previously added. The format of how the decks are saved into the text file are specified ","lastModifiedDate":"2021-10-22"},{"lineNumber":138,"author":{"gitId":"xRossKoh"},"content":"during the development process in order to reduce the risk of bugs arising when the text file is being read. More ","lastModifiedDate":"2021-10-22"},{"lineNumber":139,"author":{"gitId":"xRossKoh"},"content":"details on the format of how the decks of flashcards are saved will be explained in the following paragraphs.","lastModifiedDate":"2021-10-22"},{"lineNumber":140,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":141,"author":{"gitId":"xRossKoh"},"content":"The methods that implement the save and read functions to and from the text file fall within the ``DeckManager`` class. ","lastModifiedDate":"2021-10-22"},{"lineNumber":142,"author":{"gitId":"xRossKoh"},"content":"This was done since ``DeckManager`` has direct access to the ``ArrayList`` of all current decks of flashcards.","lastModifiedDate":"2021-10-22"},{"lineNumber":143,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":144,"author":{"gitId":"xRossKoh"},"content":"``saveToFile()``","lastModifiedDate":"2021-10-22"},{"lineNumber":145,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":146,"author":{"gitId":"xRossKoh"},"content":"This method is invoked by calling ``DeckManager.saveToFile()``, when the ``bye`` command is parsed from the user input at the","lastModifiedDate":"2021-10-22"},{"lineNumber":147,"author":{"gitId":"xRossKoh"},"content":"command line. The ``toString()`` methods within the ``Deck`` and ``Flashcard`` classes have also been overridden as per the ","lastModifiedDate":"2021-10-22"},{"lineNumber":148,"author":{"gitId":"xRossKoh"},"content":"specified format of saving the decks of flashcards to the text file. For a ``Flashcard`` instance, the ``toString()`` method ","lastModifiedDate":"2021-10-22"},{"lineNumber":149,"author":{"gitId":"xRossKoh"},"content":"outputs a formatted string: ``\u003cfront\u003e | \u003cback\u003e | \u003cuserScore\u003e | \u003ctotalScore\u003e``. For a ``Deck`` instance, the ``toString()`` ","lastModifiedDate":"2021-10-22"},{"lineNumber":150,"author":{"gitId":"xRossKoh"},"content":"method also outputs a formatted string containing information about the deck name, the number of flashcards within the ","lastModifiedDate":"2021-10-22"},{"lineNumber":151,"author":{"gitId":"xRossKoh"},"content":"deck, on top of information on each of the flashcards contained within the deck. An example of the format of the text file ","lastModifiedDate":"2021-10-22"},{"lineNumber":152,"author":{"gitId":"xRossKoh"},"content":"where the decks of flashcards are saved is shown in the screenshot below.","lastModifiedDate":"2021-10-22"},{"lineNumber":153,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":154,"author":{"gitId":"xRossKoh"},"content":"\u003c!DOCTYPE html\u003e","lastModifiedDate":"2021-10-22"},{"lineNumber":155,"author":{"gitId":"xRossKoh"},"content":"\u003chtml\u003e","lastModifiedDate":"2021-10-22"},{"lineNumber":156,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":157,"author":{"gitId":"xRossKoh"},"content":"\u003chead\u003e","lastModifiedDate":"2021-10-22"},{"lineNumber":158,"author":{"gitId":"xRossKoh"},"content":"    \u003cmeta charset\u003d\"utf-8\"\u003e","lastModifiedDate":"2021-10-22"},{"lineNumber":159,"author":{"gitId":"xRossKoh"},"content":"    \u003cmeta name\u003d\"viewport\" content\u003d\"width\u003ddevice-width, initial-scale\u003d1.0\"\u003e","lastModifiedDate":"2021-10-22"},{"lineNumber":160,"author":{"gitId":"xRossKoh"},"content":"    \u003ctitle\u003e\u003c/title\u003e","lastModifiedDate":"2021-10-22"},{"lineNumber":161,"author":{"gitId":"xRossKoh"},"content":"\u003c/head\u003e","lastModifiedDate":"2021-10-22"},{"lineNumber":162,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":163,"author":{"gitId":"xRossKoh"},"content":"\u003cbody\u003e","lastModifiedDate":"2021-10-22"},{"lineNumber":164,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":165,"author":{"gitId":"xRossKoh"},"content":"![](assets/CardLI.txt%20SS.PNG)","lastModifiedDate":"2021-10-22"},{"lineNumber":166,"author":{"gitId":"xRossKoh"},"content":"\u003c/body\u003e","lastModifiedDate":"2021-10-22"},{"lineNumber":167,"author":{"gitId":"xRossKoh"},"content":"\u003cbody\u003e","lastModifiedDate":"2021-10-22"},{"lineNumber":168,"author":{"gitId":"xRossKoh"},"content":"    \u003cp dir\u003d\"ltr\" style\u003d\"line-height:1.38;margin-top:0pt;margin-bottom:0pt;\"\u003e\u003cspan style\u003d\"font-size:11pt;font-family:Arial;font-weight:400;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre;white-space:pre-wrap;\"\u003eThis feature allows users of CardLI to find a\u0026nbsp;\u003c/span\u003e\u003cspan style\u003d\"font-size:11pt;font-family:Arial;font-weight:700;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre;white-space:pre-wrap;\"\u003eFlashCard\u003c/span\u003e\u003cspan style\u003d\"font-size:11pt;font-family:Arial;font-weight:400;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre;white-space:pre-wrap;\"\u003e\u0026nbsp;by providing a search term to the input following the command term `find`. By invoking this function the user can view specific\u0026nbsp;\u003c/span\u003e\u003cspan style\u003d\"font-size:11pt;font-family:Arial;font-weight:700;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre;white-space:pre-wrap;\"\u003eFlashCards\u003c/span\u003e\u003cspan style\u003d\"font-size:11pt;font-family:Arial;font-weight:400;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre;white-space:pre-wrap;\"\u003e\u0026nbsp;matching the search term from the main menu, instead of entering each deck and manually looking through the list of\u0026nbsp;\u003c/span\u003e\u003cspan style\u003d\"font-size:11pt;font-family:Arial;font-weight:700;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre;white-space:pre-wrap;\"\u003eFlashCard\u003c/span\u003e\u003cspan style\u003d\"font-size:11pt;font-family:Arial;font-weight:400;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre;white-space:pre-wrap;\"\u003e\u0026nbsp;for the desired ones.\u003c/span\u003e\u003c/p\u003e","lastModifiedDate":"2021-10-22"},{"lineNumber":169,"author":{"gitId":"xRossKoh"},"content":"    \u003cp\u003e\u003c/p\u003e","lastModifiedDate":"2021-10-22"},{"lineNumber":170,"author":{"gitId":"xRossKoh"},"content":"    \u003cp dir\u003d\"ltr\" style\u003d\"line-height:1.38;margin-top:0pt;margin-bottom:0pt;\"\u003e\u003cspan style\u003d\"font-size:11pt;font-family:Arial;font-weight:400;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre;white-space:pre-wrap;\"\u003eCurrently, \u0026ldquo;Find\u0026rdquo; is implemented on a Systemwide level. After the\u0026nbsp;\u003c/span\u003e\u003cspan style\u003d\"font-size:11pt;font-family:Arial;font-weight:700;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre;white-space:pre-wrap;\"\u003eUi\u0026nbsp;\u003c/span\u003e\u003cspan style\u003d\"font-size:11pt;font-family:Arial;font-weight:400;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre;white-space:pre-wrap;\"\u003ehandles the user input,\u0026nbsp;\u003c/span\u003e\u003cspan style\u003d\"font-size:11pt;font-family:Arial;font-weight:700;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre;white-space:pre-wrap;\"\u003eParser\u0026nbsp;\u003c/span\u003e\u003cspan style\u003d\"font-size:11pt;font-family:Arial;font-weight:400;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre;white-space:pre-wrap;\"\u003eformats the user input and passes the search term(s) to\u0026nbsp;\u003c/span\u003e\u003cspan style\u003d\"font-size:11pt;font-family:Arial;font-weight:700;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre;white-space:pre-wrap;\"\u003eFind\u003c/span\u003e\u003cspan style\u003d\"font-size:11pt;font-family:Arial;font-weight:400;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre;white-space:pre-wrap;\"\u003e\u0026nbsp;which repeatedly calls the\u0026nbsp;\u003c/span\u003e\u003cspan style\u003d\"font-size:11pt;font-family:\u0027Courier New\u0027;font-weight:700;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre;white-space:pre-wrap;\"\u003efilter()\u003c/span\u003e\u003cspan style\u003d\"font-size:11pt;font-family:Arial;font-weight:400;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre;white-space:pre-wrap;\"\u003e\u0026nbsp;method that iterates once for each instance of a deck.\u003c/span\u003e\u003c/p\u003e","lastModifiedDate":"2021-10-22"},{"lineNumber":171,"author":{"gitId":"xRossKoh"},"content":"    \u003cp\u003e\u003c/p\u003e","lastModifiedDate":"2021-10-22"},{"lineNumber":172,"author":{"gitId":"xRossKoh"},"content":"    \u003cp\u003e\u003cspan style\u003d\"font-size:11pt;font-family:\u0027Courier New\u0027;font-weight:700;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre;white-space:pre-wrap;\"\u003efilter()\u003c/span\u003e\u003cspan style\u003d\"font-size:11pt;font-family:Arial;font-weight:400;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre;white-space:pre-wrap;\"\u003e\u0026nbsp;is implemented by creating a stream that consists of all the flashcards in one deck, and filters them based on whether they contain the search term given. Finally all the flashcards that contain the search term are collected in an arrayList to be displayed to the user along with their\u0026nbsp;\u003c/span\u003e\u003cspan style\u003d\"font-size:11pt;font-family:\u0027Courier New\u0027;font-weight:400;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre;white-space:pre-wrap;\"\u003edeckIndex\u003c/span\u003e\u003cspan style\u003d\"font-size:11pt;font-family:Arial;font-weight:400;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre;white-space:pre-wrap;\"\u003e\u0026nbsp;and\u003c/span\u003e\u003cspan style\u003d\"font-size:11pt;font-family:\u0027Courier New\u0027;font-weight:400;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre;white-space:pre-wrap;\"\u003e\u0026nbsp;cardIndex\u003c/span\u003e\u003cspan style\u003d\"font-size:11pt;font-family:Arial;font-weight:400;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre;white-space:pre-wrap;\"\u003e.\u003c/span\u003e\u003c/p\u003e","lastModifiedDate":"2021-10-22"},{"lineNumber":173,"author":{"gitId":"xRossKoh"},"content":"\u003c/body\u003e","lastModifiedDate":"2021-10-22"},{"lineNumber":174,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":175,"author":{"gitId":"xRossKoh"},"content":"``readFromFile()``","lastModifiedDate":"2021-10-22"},{"lineNumber":176,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":177,"author":{"gitId":"xRossKoh"},"content":"The method is invoked by calling ``DeckManager.readFromFile()``, and is executed every time the CardLI ","lastModifiedDate":"2021-10-22"},{"lineNumber":178,"author":{"gitId":"xRossKoh"},"content":"is opened. Upon first boot, the specified text file might not yet exist, and hence, the application will ","lastModifiedDate":"2021-10-22"},{"lineNumber":179,"author":{"gitId":"xRossKoh"},"content":"treat the current list of decks of flashcards as empty. The method uses an instance of ``Scanner`` to parse ","lastModifiedDate":"2021-10-22"},{"lineNumber":180,"author":{"gitId":"xRossKoh"},"content":"through the text file. As per the saving format explained in the ``saveToFile()`` method above, the ","lastModifiedDate":"2021-10-22"},{"lineNumber":181,"author":{"gitId":"xRossKoh"},"content":"``readFromFile()`` method essentially reverse engineers the process. Using the above screenshot as an ","lastModifiedDate":"2021-10-22"},{"lineNumber":182,"author":{"gitId":"xRossKoh"},"content":"example, Line 1 denotes the number of decks that should be expected in the subsequent lines of the text ","lastModifiedDate":"2021-10-22"},{"lineNumber":183,"author":{"gitId":"xRossKoh"},"content":"file. Line 2 denotes the name of the first deck of flashcards, while Line 3 denotes the number of ","lastModifiedDate":"2021-10-22"},{"lineNumber":184,"author":{"gitId":"xRossKoh"},"content":"flashcards to be expected in the deck named “ExampleDeck1”, which will be parsed as an integer by the ","lastModifiedDate":"2021-10-22"},{"lineNumber":185,"author":{"gitId":"xRossKoh"},"content":"application. Lines 5-6 represent information about the 2 flashcards that are in “ExampleDeck1”. This same","lastModifiedDate":"2021-10-22"},{"lineNumber":186,"author":{"gitId":"xRossKoh"},"content":"procedure can be used to parse the second deck named “ExampleDeck2” from the remaining lines of the text file.","lastModifiedDate":"2021-10-22"},{"lineNumber":187,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":188,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":189,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":190,"author":{"gitId":"-"},"content":"## Product scope","lastModifiedDate":"2020-05-24"},{"lineNumber":191,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":192,"author":{"gitId":"-"},"content":"### Target user profile","lastModifiedDate":"2020-05-24"},{"lineNumber":193,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":194,"author":{"gitId":"ThaddeusLim99"},"content":"* Pre-University/University/Polytechnic students","lastModifiedDate":"2021-10-21"},{"lineNumber":195,"author":{"gitId":"ThaddeusLim99"},"content":"* Reasonably comfortable using CLI apps","lastModifiedDate":"2021-10-21"},{"lineNumber":196,"author":{"gitId":"ThaddeusLim99"},"content":"* Types fast","lastModifiedDate":"2021-10-21"},{"lineNumber":197,"author":{"gitId":"ThaddeusLim99"},"content":"* Prefers to store their information online rather than physically","lastModifiedDate":"2021-10-21"},{"lineNumber":198,"author":{"gitId":"ThaddeusLim99"},"content":"* Has a lot of flashcards","lastModifiedDate":"2021-10-21"},{"lineNumber":199,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":200,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":201,"author":{"gitId":"-"},"content":"### Value proposition","lastModifiedDate":"2020-05-24"},{"lineNumber":202,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":203,"author":{"gitId":"JWweiyin"},"content":"CardLI provides a:","lastModifiedDate":"2021-10-20"},{"lineNumber":204,"author":{"gitId":"JWweiyin"},"content":"\u003cli\u003e User-friendly \u003c/li\u003e","lastModifiedDate":"2021-10-20"},{"lineNumber":205,"author":{"gitId":"JWweiyin"},"content":"\u003cli\u003e Storage efficient\u003c/li\u003e","lastModifiedDate":"2021-10-20"},{"lineNumber":206,"author":{"gitId":"JWweiyin"},"content":"\u003cli\u003e Internet connection independent\u003c/li\u003e","lastModifiedDate":"2021-10-20"},{"lineNumber":207,"author":{"gitId":"JWweiyin"},"content":"flashcard experience.","lastModifiedDate":"2021-10-20"},{"lineNumber":208,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":209,"author":{"gitId":"-"},"content":"## User Stories","lastModifiedDate":"2020-05-24"},{"lineNumber":210,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":211,"author":{"gitId":"-"},"content":"|Version| As a ... | I want to ... | So that I can ...|","lastModifiedDate":"2020-05-24"},{"lineNumber":212,"author":{"gitId":"-"},"content":"|--------|----------|---------------|------------------|","lastModifiedDate":"2020-05-24"},{"lineNumber":213,"author":{"gitId":"-"},"content":"|v1.0|new user|see usage instructions|refer to them when I forget how to use the application|","lastModifiedDate":"2020-05-24"},{"lineNumber":214,"author":{"gitId":"JWweiyin"},"content":"| |user| add flashcards|","lastModifiedDate":"2021-10-20"},{"lineNumber":215,"author":{"gitId":"JWweiyin"},"content":"| |user| delete flashcards|","lastModifiedDate":"2021-10-20"},{"lineNumber":216,"author":{"gitId":"JWweiyin"},"content":"| |user| view my flashcards|know what cards I currenly have in the deck|","lastModifiedDate":"2021-10-20"},{"lineNumber":217,"author":{"gitId":"JWweiyin"},"content":"| |user| test myself with my flashcards|know if I have memorised the flashcards correctly|","lastModifiedDate":"2021-10-20"},{"lineNumber":218,"author":{"gitId":"JWweiyin"},"content":"| |student preparing for their exam|see a list of the flashcards I got wrong|know which concepts I do not know|","lastModifiedDate":"2021-10-20"},{"lineNumber":219,"author":{"gitId":"JWweiyin"},"content":"|v2.0|user|shuffle my flashcards|test myself with a different order of flashcards each time|","lastModifiedDate":"2021-10-20"},{"lineNumber":220,"author":{"gitId":"JWweiyin"},"content":"| |student in a hurry|edit my flashcards|change the front or back of a flashcard without deleting and adding it again","lastModifiedDate":"2021-10-20"},{"lineNumber":221,"author":{"gitId":"JWweiyin"},"content":"| |student who studies multiple subjects|organise my flashcards into different decks|keep flashcards with related topics in the same set|","lastModifiedDate":"2021-10-20"},{"lineNumber":222,"author":{"gitId":"JWweiyin"},"content":"| |student preparing for their exam|see a timer when in test mode|keep track of how much time I have spent on each question","lastModifiedDate":"2021-10-20"},{"lineNumber":223,"author":{"gitId":"JWweiyin"},"content":"| |student who wants to test themself|to see the percentage of correct answers for each flashcard|which cards I am less proficient in","lastModifiedDate":"2021-10-20"},{"lineNumber":224,"author":{"gitId":"JWweiyin"},"content":"| |student in a hurry|test myself with the flashcards I have answered wrongly for more than half the time|get more proficient at the concepts I am not familiar with","lastModifiedDate":"2021-10-20"},{"lineNumber":225,"author":{"gitId":"JWweiyin"},"content":"| |student with many flashcards and decks|find a flashcard by searching for a term matching it|find the flashcard without looking through all my decks","lastModifiedDate":"2021-10-20"},{"lineNumber":226,"author":{"gitId":"JWweiyin"},"content":"| |student with little time|save my flashcards|I do not have to add my flashcards to the app every time I use it","lastModifiedDate":"2021-10-20"},{"lineNumber":227,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":228,"author":{"gitId":"-"},"content":"## Non-Functional Requirements","lastModifiedDate":"2020-05-24"},{"lineNumber":229,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":230,"author":{"gitId":"-"},"content":"{Give non-functional requirements}","lastModifiedDate":"2020-05-24"},{"lineNumber":231,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":232,"author":{"gitId":"-"},"content":"## Glossary","lastModifiedDate":"2020-05-24"},{"lineNumber":233,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":234,"author":{"gitId":"-"},"content":"* *glossary item* - Definition","lastModifiedDate":"2020-05-24"},{"lineNumber":235,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":236,"author":{"gitId":"-"},"content":"## Instructions for manual testing","lastModifiedDate":"2020-05-24"},{"lineNumber":237,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":238,"author":{"gitId":"-"},"content":"{Give instructions on how to do a manual product testing e.g., how to load sample data to be used for testing}","lastModifiedDate":"2020-05-24"}],"authorContributionMap":{"JWweiyin":45,"ThaddeusLim99":33,"astralum":36,"xRossKoh":61,"xkisxk":28,"-":35}},{"path":"docs/UserGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide","lastModifiedDate":"2020-05-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"## Introduction","lastModifiedDate":"2020-05-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":6,"author":{"gitId":"xRossKoh"},"content":"CardLI is a desktop app to help you create, organising, and review flashcards via a Command Line ","lastModifiedDate":"2021-10-24"},{"lineNumber":7,"author":{"gitId":"xRossKoh"},"content":"Interface. As students ourselves, we find that studying through the use of flashcards can greatly","lastModifiedDate":"2021-10-24"},{"lineNumber":8,"author":{"gitId":"xRossKoh"},"content":"increase the efficacy of our study sessions as they break down large chapters and concepts into ","lastModifiedDate":"2021-10-24"},{"lineNumber":9,"author":{"gitId":"xRossKoh"},"content":"easy-to-understand segments. Hence, CardLI was designed in order to help students study better ","lastModifiedDate":"2021-10-24"},{"lineNumber":10,"author":{"gitId":"xRossKoh"},"content":"through the use of flashcards, while also reducing the paper waste that goes into writing our physical","lastModifiedDate":"2021-10-24"},{"lineNumber":11,"author":{"gitId":"xRossKoh"},"content":"flashcards. The interfacing within the application has been design to be interactive and functional,","lastModifiedDate":"2021-10-24"},{"lineNumber":12,"author":{"gitId":"xRossKoh"},"content":"while the commands were designed to be intuitive to use. ","lastModifiedDate":"2021-10-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"## Quick Start","lastModifiedDate":"2020-05-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"1. Ensure that you have Java 11 or above installed.","lastModifiedDate":"2020-05-24"},{"lineNumber":18,"author":{"gitId":"xRossKoh"},"content":"2. Down the latest version of `Duke` from [here](http://link.to/duke).","lastModifiedDate":"2021-10-24"},{"lineNumber":19,"author":{"gitId":"JWweiyin"},"content":"3. Take note of the full filepath of directory in which `Duke.jar` is saved.","lastModifiedDate":"2021-10-24"},{"lineNumber":20,"author":{"gitId":"JWweiyin"},"content":"4. Open the command prompt by searching `cmd` in the search bar.","lastModifiedDate":"2021-10-24"},{"lineNumber":21,"author":{"gitId":"JWweiyin"},"content":"5. Navigate to the file directory containing `Duke.jar` using the command `cd \u003cfilepath\u003e`.","lastModifiedDate":"2021-10-24"},{"lineNumber":22,"author":{"gitId":"JWweiyin"},"content":"6. Start up CardLI using the command``java -jar Duke.jar`.","lastModifiedDate":"2021-10-24"},{"lineNumber":23,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":24,"author":{"gitId":"xRossKoh"},"content":"The above steps are for users who are running CardLI on a Windows device. If you are using an Apple","lastModifiedDate":"2021-10-24"},{"lineNumber":25,"author":{"gitId":"xRossKoh"},"content":"and Linux device, you will have to open the command prompt equivalent on your operating system in step 4. ","lastModifiedDate":"2021-10-24"},{"lineNumber":26,"author":{"gitId":"xRossKoh"},"content":"Subsequently, you will also have to use the equivalent command on your operating system for ","lastModifiedDate":"2021-10-24"},{"lineNumber":27,"author":{"gitId":"xRossKoh"},"content":"navigation to a file directory in step 5. The remaining steps are the same across all operating systems.","lastModifiedDate":"2021-10-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"## Features ","lastModifiedDate":"2020-05-24"},{"lineNumber":30,"author":{"gitId":"xkisxk"},"content":"The current version of CardLI has two menus: main and deck. In the main menu, you are working with","lastModifiedDate":"2021-10-24"},{"lineNumber":31,"author":{"gitId":"xkisxk"},"content":"all the decks, so commands only apply to the decks and not the individual flashcards. Enter the deck","lastModifiedDate":"2021-10-24"},{"lineNumber":32,"author":{"gitId":"xkisxk"},"content":"menu to work with the flashcards.","lastModifiedDate":"2021-10-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":35,"author":{"gitId":"xkisxk"},"content":"### Content","lastModifiedDate":"2021-10-24"},{"lineNumber":36,"author":{"gitId":"xkisxk"},"content":"1. [Main Menu](#main-menu)","lastModifiedDate":"2021-10-24"},{"lineNumber":37,"author":{"gitId":"xkisxk"},"content":"2. [Deck Menu](#deck-menu)","lastModifiedDate":"2021-10-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":39,"author":{"gitId":"xkisxk"},"content":"---","lastModifiedDate":"2021-10-24"},{"lineNumber":40,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":41,"author":{"gitId":"xkisxk"},"content":"## Main Menu","lastModifiedDate":"2021-10-24"},{"lineNumber":42,"author":{"gitId":"JWweiyin"},"content":"### Adding a deck: `add`","lastModifiedDate":"2021-10-24"},{"lineNumber":43,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":44,"author":{"gitId":"JWweiyin"},"content":"### Viewing all decks: `view`","lastModifiedDate":"2021-10-24"},{"lineNumber":45,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":46,"author":{"gitId":"JWweiyin"},"content":"### Editing a deck: `edit`","lastModifiedDate":"2021-10-24"},{"lineNumber":47,"author":{"gitId":"JWweiyin"},"content":"Edits the name of the deck indicated by the index.","lastModifiedDate":"2021-10-24"},{"lineNumber":48,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":49,"author":{"gitId":"JWweiyin"},"content":"Format: `edit \u003cindex of deck\u003e /n \u003cname\u003e`","lastModifiedDate":"2021-10-24"},{"lineNumber":50,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":51,"author":{"gitId":"JWweiyin"},"content":"Example of Usage:","lastModifiedDate":"2021-10-24"},{"lineNumber":52,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":53,"author":{"gitId":"JWweiyin"},"content":"`edit 2 /n mathematics`","lastModifiedDate":"2021-10-24"},{"lineNumber":54,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":55,"author":{"gitId":"JWweiyin"},"content":"Expected outcome:","lastModifiedDate":"2021-10-24"},{"lineNumber":56,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":57,"author":{"gitId":"xkisxk"},"content":"### Deleting a deck: `delete`","lastModifiedDate":"2021-10-24"},{"lineNumber":58,"author":{"gitId":"xkisxk"},"content":"Deletes the deck indicated by the index or the name.","lastModifiedDate":"2021-10-24"},{"lineNumber":59,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":60,"author":{"gitId":"xkisxk"},"content":"Format: `delete \u003cindex/name of deck\u003e`","lastModifiedDate":"2021-10-24"},{"lineNumber":61,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":62,"author":{"gitId":"xkisxk"},"content":"Example of Usage:","lastModifiedDate":"2021-10-24"},{"lineNumber":63,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":64,"author":{"gitId":"xkisxk"},"content":"`delete 1`","lastModifiedDate":"2021-10-24"},{"lineNumber":65,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":66,"author":{"gitId":"xkisxk"},"content":"`delete test`","lastModifiedDate":"2021-10-24"},{"lineNumber":67,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":68,"author":{"gitId":"xkisxk"},"content":"Expected outcome:","lastModifiedDate":"2021-10-24"},{"lineNumber":69,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":70,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":71,"author":{"gitId":"JWweiyin"},"content":"### Entering a deck: `enter`","lastModifiedDate":"2021-10-24"},{"lineNumber":72,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":73,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":74,"author":{"gitId":"JWweiyin"},"content":"### Testing flashcards within a deck: `test`","lastModifiedDate":"2021-10-24"},{"lineNumber":75,"author":{"gitId":"xkisxk"},"content":"Format: `test`","lastModifiedDate":"2021-10-24"},{"lineNumber":76,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":77,"author":{"gitId":"JWweiyin"},"content":"Enter test mode. The program will ask you to input the index for the deck that is to be tested.","lastModifiedDate":"2021-10-24"},{"lineNumber":78,"author":{"gitId":"xkisxk"},"content":"The word to be tested will be displayed in the console. ","lastModifiedDate":"2021-10-24"},{"lineNumber":79,"author":{"gitId":"xkisxk"},"content":"Typing the exact character-for-character definition for the word will result in a correct answer. ","lastModifiedDate":"2021-10-24"},{"lineNumber":80,"author":{"gitId":"xkisxk"},"content":"Otherwise, the response will be marked as incorrect. Regardless of whether the answer is correct ","lastModifiedDate":"2021-10-24"},{"lineNumber":81,"author":{"gitId":"xkisxk"},"content":"or incorrect, the console will then display the next word to be tested. When all cards in the deck ","lastModifiedDate":"2021-10-24"},{"lineNumber":82,"author":{"gitId":"xkisxk"},"content":"have been tested, the percentage of correct answers will be displayed in the console, as well as the ","lastModifiedDate":"2021-10-24"},{"lineNumber":83,"author":{"gitId":"xkisxk"},"content":"cards which received incorrect responses.","lastModifiedDate":"2021-10-24"},{"lineNumber":84,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":85,"author":{"gitId":"xkisxk"},"content":"Example of Usage:","lastModifiedDate":"2021-10-24"},{"lineNumber":86,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":87,"author":{"gitId":"xkisxk"},"content":"`test`","lastModifiedDate":"2021-10-24"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":89,"author":{"gitId":"xkisxk"},"content":"Expected outcome:","lastModifiedDate":"2021-10-24"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":91,"author":{"gitId":"JWweiyin"},"content":"### View flashcard statistics: `viewfc`","lastModifiedDate":"2021-10-24"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":93,"author":{"gitId":"JWweiyin"},"content":"### View test statistics: `viewtest`","lastModifiedDate":"2021-10-24"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":96,"author":{"gitId":"JWweiyin"},"content":"### Review flashcards: `review`","lastModifiedDate":"2021-10-24"},{"lineNumber":97,"author":{"gitId":"xkisxk"},"content":"Format: `review`","lastModifiedDate":"2021-10-24"},{"lineNumber":98,"author":{"gitId":"xkisxk"},"content":"Enter review mode, which is the same as test mode except that the cards tested will be the cards ","lastModifiedDate":"2021-10-24"},{"lineNumber":99,"author":{"gitId":"xkisxk"},"content":"that the user got wrong on more than 50% of the tests.","lastModifiedDate":"2021-10-24"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":101,"author":{"gitId":"xkisxk"},"content":"Example of usage:","lastModifiedDate":"2021-10-24"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":103,"author":{"gitId":"xkisxk"},"content":"`review`","lastModifiedDate":"2021-10-24"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":105,"author":{"gitId":"xkisxk"},"content":"Expected outcome:","lastModifiedDate":"2021-10-24"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":107,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":108,"author":{"gitId":"JWweiyin"},"content":"### Finding a flashcard: `find`","lastModifiedDate":"2021-10-24"},{"lineNumber":109,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":110,"author":{"gitId":"JWweiyin"},"content":"### Exiting the app: `bye`","lastModifiedDate":"2021-10-24"},{"lineNumber":111,"author":{"gitId":"JWweiyin"},"content":"Exits the CardLI application within the Command Line Interface.","lastModifiedDate":"2021-10-24"},{"lineNumber":112,"author":{"gitId":"JWweiyin"},"content":"Using this command will also save the current decks of flashcards into a text file named ``CardLI.txt``","lastModifiedDate":"2021-10-24"},{"lineNumber":113,"author":{"gitId":"JWweiyin"},"content":"stored within the same directory as `Duke.jar`.","lastModifiedDate":"2021-10-24"},{"lineNumber":114,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":115,"author":{"gitId":"JWweiyin"},"content":"Format: ``bye``","lastModifiedDate":"2021-10-24"},{"lineNumber":116,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":117,"author":{"gitId":"xkisxk"},"content":"---","lastModifiedDate":"2021-10-24"},{"lineNumber":118,"author":{"gitId":"xkisxk"},"content":"## Deck Menu","lastModifiedDate":"2021-10-24"},{"lineNumber":119,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":120,"author":{"gitId":"JWweiyin"},"content":"### Adding a flashcard `add`","lastModifiedDate":"2021-10-24"},{"lineNumber":121,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":122,"author":{"gitId":"JWweiyin"},"content":"###Deleting a flashcard: `delete`","lastModifiedDate":"2021-10-24"},{"lineNumber":123,"author":{"gitId":"xkisxk"},"content":"Format: `delete \u003cword/phrase/index\u003e`","lastModifiedDate":"2021-10-24"},{"lineNumber":124,"author":{"gitId":"xkisxk"},"content":"Deletes the \u003cindex\u003eth flashcard or the flashcard which front matches \u003cword/phrase\u003e if it ","lastModifiedDate":"2021-10-24"},{"lineNumber":125,"author":{"gitId":"xkisxk"},"content":"exists in the current deck of flashcards.","lastModifiedDate":"2021-10-24"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":127,"author":{"gitId":"xkisxk"},"content":"Remark:","lastModifiedDate":"2021-10-24"},{"lineNumber":128,"author":{"gitId":"xkisxk"},"content":"* If there are cards with identical front description in the deck, the first instance of the card ","lastModifiedDate":"2021-10-24"},{"lineNumber":129,"author":{"gitId":"xkisxk"},"content":"matching that \u003cword/phrase\u003e will be deleted.","lastModifiedDate":"2021-10-24"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":131,"author":{"gitId":"-"},"content":"Example of usage:","lastModifiedDate":"2020-05-24"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":133,"author":{"gitId":"xkisxk"},"content":"`delete 1`","lastModifiedDate":"2021-10-24"},{"lineNumber":134,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":135,"author":{"gitId":"xkisxk"},"content":"`delete card`","lastModifiedDate":"2021-10-24"},{"lineNumber":136,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":137,"author":{"gitId":"xkisxk"},"content":"`delete sequence diagrams`","lastModifiedDate":"2021-10-24"},{"lineNumber":138,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":139,"author":{"gitId":"xkisxk"},"content":"Expected outcome:","lastModifiedDate":"2021-10-24"},{"lineNumber":140,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":142,"author":{"gitId":"JWweiyin"},"content":"### Editing a flashcard: `edit`","lastModifiedDate":"2021-10-24"},{"lineNumber":143,"author":{"gitId":"ThaddeusLim99"},"content":"Edits the front or the back of the flashcard of index \u003cindex\u003e to the user input given.","lastModifiedDate":"2021-10-24"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":145,"author":{"gitId":"ThaddeusLim99"},"content":"Format: `edit \u003cindex\u003e /s \u003cfront or back\u003e /i \u003cinput\u003e`","lastModifiedDate":"2021-10-24"},{"lineNumber":146,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":147,"author":{"gitId":"-"},"content":"Example of usage:","lastModifiedDate":"2020-05-24"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":149,"author":{"gitId":"ThaddeusLim99"},"content":"`edit 3 /s front /i 1 + 1`","lastModifiedDate":"2021-10-24"},{"lineNumber":150,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":151,"author":{"gitId":"ThaddeusLim99"},"content":"`edit 3 /s back /i 2`","lastModifiedDate":"2021-10-24"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":153,"author":{"gitId":"ThaddeusLim99"},"content":"Expected outcome:","lastModifiedDate":"2021-10-24"},{"lineNumber":154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":155,"author":{"gitId":"JWweiyin"},"content":"### Viewing flashcards: `view`","lastModifiedDate":"2021-10-24"},{"lineNumber":156,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":157,"author":{"gitId":"xRossKoh"},"content":"### Exiting deck mode: ``exit``","lastModifiedDate":"2021-10-24"},{"lineNumber":158,"author":{"gitId":"xRossKoh"},"content":"Exits deck mode and returns to the main menu.","lastModifiedDate":"2021-10-24"},{"lineNumber":159,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":160,"author":{"gitId":"xRossKoh"},"content":"Format: ``exit``","lastModifiedDate":"2021-10-24"},{"lineNumber":161,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":162,"author":{"gitId":"xRossKoh"},"content":"## FAQs","lastModifiedDate":"2021-10-24"},{"lineNumber":163,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":164,"author":{"gitId":"-"},"content":"**Q**: How do I transfer my data to another computer? ","lastModifiedDate":"2020-05-24"},{"lineNumber":165,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":166,"author":{"gitId":"-"},"content":"**A**: {your answer here}","lastModifiedDate":"2020-05-24"},{"lineNumber":167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":168,"author":{"gitId":"xRossKoh"},"content":"**Q**: Can I directly edit the ``CardLI.txt`` file to add, edit or delete decks and flashcards?","lastModifiedDate":"2021-10-24"},{"lineNumber":169,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":170,"author":{"gitId":"xRossKoh"},"content":"**A**: If you are familiar with the format of how the decks and flashcards are saved within the text","lastModifiedDate":"2021-10-24"},{"lineNumber":171,"author":{"gitId":"xRossKoh"},"content":"file, you are free to do so. However, if errors are generated upon the next start up of the CardLI ","lastModifiedDate":"2021-10-24"},{"lineNumber":172,"author":{"gitId":"xRossKoh"},"content":"application, you are advised to revert all changes to the text file and make the necessary changes","lastModifiedDate":"2021-10-24"},{"lineNumber":173,"author":{"gitId":"xRossKoh"},"content":"from within the application. We will only recommend this method if you are a veteran user and have a","lastModifiedDate":"2021-10-24"},{"lineNumber":174,"author":{"gitId":"xRossKoh"},"content":"good grasp of the application.","lastModifiedDate":"2021-10-24"},{"lineNumber":175,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":176,"author":{"gitId":"-"},"content":"## Command Summary","lastModifiedDate":"2020-05-24"},{"lineNumber":177,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":178,"author":{"gitId":"JWweiyin"},"content":"### Main Menu:","lastModifiedDate":"2021-10-24"},{"lineNumber":179,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":180,"author":{"gitId":"JWweiyin"},"content":"|Action|Format|","lastModifiedDate":"2021-10-24"},{"lineNumber":181,"author":{"gitId":"JWweiyin"},"content":"|-------|------|","lastModifiedDate":"2021-10-24"},{"lineNumber":182,"author":{"gitId":"JWweiyin"},"content":"|add deck|`add \u003cname of deck\u003e`|","lastModifiedDate":"2021-10-24"},{"lineNumber":183,"author":{"gitId":"JWweiyin"},"content":"|view decks|`view`|","lastModifiedDate":"2021-10-24"},{"lineNumber":184,"author":{"gitId":"JWweiyin"},"content":"|edit deck|`edit \u003cindex of deck\u003e /n name`|","lastModifiedDate":"2021-10-24"},{"lineNumber":185,"author":{"gitId":"JWweiyin"},"content":"|delete deck|`delete \u003cindex/name of deck\u003e`|","lastModifiedDate":"2021-10-24"},{"lineNumber":186,"author":{"gitId":"JWweiyin"},"content":"|enter deck|`enter \u003cindex of deck\u003e`|","lastModifiedDate":"2021-10-24"},{"lineNumber":187,"author":{"gitId":"JWweiyin"},"content":"|test|`test`|","lastModifiedDate":"2021-10-24"},{"lineNumber":188,"author":{"gitId":"JWweiyin"},"content":"|view overall statistics for flashcards|`viewfc`|","lastModifiedDate":"2021-10-24"},{"lineNumber":189,"author":{"gitId":"JWweiyin"},"content":"|view test statistics|`viewtest \u003cindex of test\u003e` prints the result of the test indicated by the index.\u003cbr\u003e`viewtest all` prints out the results for all tests.|","lastModifiedDate":"2021-10-24"},{"lineNumber":190,"author":{"gitId":"JWweiyin"},"content":"|review|`review`|","lastModifiedDate":"2021-10-24"},{"lineNumber":191,"author":{"gitId":"JWweiyin"},"content":"|find flashcard|`find \u003cword/phrase\u003e`|","lastModifiedDate":"2021-10-24"},{"lineNumber":192,"author":{"gitId":"JWweiyin"},"content":"|exiting program|`bye`|","lastModifiedDate":"2021-10-24"},{"lineNumber":193,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":194,"author":{"gitId":"JWweiyin"},"content":"### Deck Menu:","lastModifiedDate":"2021-10-24"},{"lineNumber":195,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":196,"author":{"gitId":"JWweiyin"},"content":"|Action|Format|","lastModifiedDate":"2021-10-24"},{"lineNumber":197,"author":{"gitId":"JWweiyin"},"content":"|------|------|","lastModifiedDate":"2021-10-24"},{"lineNumber":198,"author":{"gitId":"JWweiyin"},"content":"|add flashcard|`add /f \u003cword\u003e /b \u003cdefinition\u003e`|","lastModifiedDate":"2021-10-24"},{"lineNumber":199,"author":{"gitId":"JWweiyin"},"content":"|deleting a flashcard|`delete \u003cword/index\u003e`|","lastModifiedDate":"2021-10-24"},{"lineNumber":200,"author":{"gitId":"JWweiyin"},"content":"|editing a flashcard|`edit \u003cindex\u003e /s \u003cfront or back\u003e /i input`|","lastModifiedDate":"2021-10-24"},{"lineNumber":201,"author":{"gitId":"JWweiyin"},"content":"|viewing flashcards|`view`|","lastModifiedDate":"2021-10-24"},{"lineNumber":202,"author":{"gitId":"JWweiyin"},"content":"|exiting deck mode|`exit`|","lastModifiedDate":"2021-10-24"}],"authorContributionMap":{"JWweiyin":69,"ThaddeusLim99":7,"xRossKoh":27,"xkisxk":57,"-":42}},{"path":"docs/uml/EditCardCommandSeqDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"ThaddeusLim99"},"content":"@startuml","lastModifiedDate":"2021-10-21"},{"lineNumber":2,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":3,"author":{"gitId":"ThaddeusLim99"},"content":"hide footbox","lastModifiedDate":"2021-10-21"},{"lineNumber":4,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":5,"author":{"gitId":"ThaddeusLim99"},"content":"participant \":Parser\" as Parser","lastModifiedDate":"2021-10-21"},{"lineNumber":6,"author":{"gitId":"ThaddeusLim99"},"content":"participant \":EditCardCommand\" as EditCardCommand","lastModifiedDate":"2021-10-21"},{"lineNumber":7,"author":{"gitId":"ThaddeusLim99"},"content":"participant \":DeckManager\" as DeckManager","lastModifiedDate":"2021-10-21"},{"lineNumber":8,"author":{"gitId":"ThaddeusLim99"},"content":"participant \":Deck\" as Deck","lastModifiedDate":"2021-10-21"},{"lineNumber":9,"author":{"gitId":"ThaddeusLim99"},"content":"participant \":FlashCard\" as FlashCard","lastModifiedDate":"2021-10-21"},{"lineNumber":10,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":11,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":12,"author":{"gitId":"ThaddeusLim99"},"content":"[-\u003e Parser : parse(\"edit /c 2 /s front /i 2+2\")","lastModifiedDate":"2021-10-21"},{"lineNumber":13,"author":{"gitId":"ThaddeusLim99"},"content":"activate Parser","lastModifiedDate":"2021-10-21"},{"lineNumber":14,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":15,"author":{"gitId":"ThaddeusLim99"},"content":"ref over Parser, EditCardCommand : parseEditCardCommand(input)","lastModifiedDate":"2021-10-21"},{"lineNumber":16,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":17,"author":{"gitId":"ThaddeusLim99"},"content":"[\u003c-- Parser : EditCardCommand(args)","lastModifiedDate":"2021-10-21"},{"lineNumber":18,"author":{"gitId":"ThaddeusLim99"},"content":"deactivate Parser","lastModifiedDate":"2021-10-21"},{"lineNumber":19,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":20,"author":{"gitId":"ThaddeusLim99"},"content":"[-\u003eEditCardCommand : execute()","lastModifiedDate":"2021-10-21"},{"lineNumber":21,"author":{"gitId":"ThaddeusLim99"},"content":"activate EditCardCommand","lastModifiedDate":"2021-10-21"},{"lineNumber":22,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":23,"author":{"gitId":"ThaddeusLim99"},"content":"EditCardCommand -\u003e DeckManager : get(deckIndex)","lastModifiedDate":"2021-10-21"},{"lineNumber":24,"author":{"gitId":"ThaddeusLim99"},"content":"activate DeckManager","lastModifiedDate":"2021-10-21"},{"lineNumber":25,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":26,"author":{"gitId":"ThaddeusLim99"},"content":"DeckManager --\u003e EditCardCommand : deck","lastModifiedDate":"2021-10-21"},{"lineNumber":27,"author":{"gitId":"ThaddeusLim99"},"content":"deactivate DeckManager","lastModifiedDate":"2021-10-21"},{"lineNumber":28,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":29,"author":{"gitId":"ThaddeusLim99"},"content":"EditCardCommand -\u003e Deck : getCard(cardIndex)","lastModifiedDate":"2021-10-21"},{"lineNumber":30,"author":{"gitId":"ThaddeusLim99"},"content":"activate Deck","lastModifiedDate":"2021-10-21"},{"lineNumber":31,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":32,"author":{"gitId":"ThaddeusLim99"},"content":"Deck --\u003e EditCardCommand : flashcard","lastModifiedDate":"2021-10-21"},{"lineNumber":33,"author":{"gitId":"ThaddeusLim99"},"content":"deactivate Deck","lastModifiedDate":"2021-10-21"},{"lineNumber":34,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":35,"author":{"gitId":"ThaddeusLim99"},"content":"EditCardCommand -\u003e FlashCard : setFront(newContent)","lastModifiedDate":"2021-10-21"},{"lineNumber":36,"author":{"gitId":"ThaddeusLim99"},"content":"activate FlashCard","lastModifiedDate":"2021-10-21"},{"lineNumber":37,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":38,"author":{"gitId":"ThaddeusLim99"},"content":"FlashCard --\u003e EditCardCommand","lastModifiedDate":"2021-10-21"},{"lineNumber":39,"author":{"gitId":"ThaddeusLim99"},"content":"deactivate FlashCard","lastModifiedDate":"2021-10-21"},{"lineNumber":40,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":41,"author":{"gitId":"ThaddeusLim99"},"content":"[\u003c-- EditCardCommand","lastModifiedDate":"2021-10-21"},{"lineNumber":42,"author":{"gitId":"ThaddeusLim99"},"content":"deactivate EditCardCommand","lastModifiedDate":"2021-10-21"},{"lineNumber":43,"author":{"gitId":"ThaddeusLim99"},"content":"@enduml","lastModifiedDate":"2021-10-21"}],"authorContributionMap":{"ThaddeusLim99":43}},{"path":"docs/uml/EditDeckCommandSeqDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"ThaddeusLim99"},"content":"@startuml","lastModifiedDate":"2021-10-21"},{"lineNumber":2,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":3,"author":{"gitId":"ThaddeusLim99"},"content":"hide footbox","lastModifiedDate":"2021-10-21"},{"lineNumber":4,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":5,"author":{"gitId":"ThaddeusLim99"},"content":"participant \":Parser\" as Parser","lastModifiedDate":"2021-10-21"},{"lineNumber":6,"author":{"gitId":"ThaddeusLim99"},"content":"participant \":EditDeckCommand\" as EditDeckCommand","lastModifiedDate":"2021-10-21"},{"lineNumber":7,"author":{"gitId":"ThaddeusLim99"},"content":"participant \":DeckManager\" as DeckManager","lastModifiedDate":"2021-10-21"},{"lineNumber":8,"author":{"gitId":"ThaddeusLim99"},"content":"participant \":Deck\" as Deck","lastModifiedDate":"2021-10-21"},{"lineNumber":9,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":10,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":11,"author":{"gitId":"ThaddeusLim99"},"content":"[-\u003e Parser : parse(\"editdeck /deck 1 /input math\")","lastModifiedDate":"2021-10-21"},{"lineNumber":12,"author":{"gitId":"ThaddeusLim99"},"content":"activate Parser","lastModifiedDate":"2021-10-21"},{"lineNumber":13,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":14,"author":{"gitId":"ThaddeusLim99"},"content":"ref over Parser, EditDeckCommand : parseEditDeckCommand(input)","lastModifiedDate":"2021-10-21"},{"lineNumber":15,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":16,"author":{"gitId":"ThaddeusLim99"},"content":"[\u003c-- Parser : EditDeckCommand(args)","lastModifiedDate":"2021-10-21"},{"lineNumber":17,"author":{"gitId":"ThaddeusLim99"},"content":"deactivate Parser","lastModifiedDate":"2021-10-21"},{"lineNumber":18,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":19,"author":{"gitId":"ThaddeusLim99"},"content":"[-\u003eEditDeckCommand : execute()","lastModifiedDate":"2021-10-21"},{"lineNumber":20,"author":{"gitId":"ThaddeusLim99"},"content":"activate EditDeckCommand","lastModifiedDate":"2021-10-21"},{"lineNumber":21,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":22,"author":{"gitId":"ThaddeusLim99"},"content":"EditDeckCommand -\u003e DeckManager : get(deckIndex)","lastModifiedDate":"2021-10-21"},{"lineNumber":23,"author":{"gitId":"ThaddeusLim99"},"content":"activate DeckManager","lastModifiedDate":"2021-10-21"},{"lineNumber":24,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":25,"author":{"gitId":"ThaddeusLim99"},"content":"DeckManager --\u003e EditDeckCommand : deck","lastModifiedDate":"2021-10-21"},{"lineNumber":26,"author":{"gitId":"ThaddeusLim99"},"content":"deactivate DeckManager","lastModifiedDate":"2021-10-21"},{"lineNumber":27,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":28,"author":{"gitId":"ThaddeusLim99"},"content":"EditDeckCommand -\u003e Deck : setDeckName(newContent)","lastModifiedDate":"2021-10-21"},{"lineNumber":29,"author":{"gitId":"ThaddeusLim99"},"content":"activate Deck","lastModifiedDate":"2021-10-21"},{"lineNumber":30,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":31,"author":{"gitId":"ThaddeusLim99"},"content":"Deck --\u003e EditDeckCommand","lastModifiedDate":"2021-10-21"},{"lineNumber":32,"author":{"gitId":"ThaddeusLim99"},"content":"deactivate Deck","lastModifiedDate":"2021-10-21"},{"lineNumber":33,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":34,"author":{"gitId":"ThaddeusLim99"},"content":"[\u003c-- EditDeckCommand","lastModifiedDate":"2021-10-21"},{"lineNumber":35,"author":{"gitId":"ThaddeusLim99"},"content":"deactivate EditDeckCommand","lastModifiedDate":"2021-10-21"},{"lineNumber":36,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":37,"author":{"gitId":"ThaddeusLim99"},"content":"@enduml","lastModifiedDate":"2021-10-21"}],"authorContributionMap":{"ThaddeusLim99":37}},{"path":"docs/uml/getTestDeckSequenceDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"xkisxk"},"content":"@startuml","lastModifiedDate":"2021-10-21"},{"lineNumber":2,"author":{"gitId":"xkisxk"},"content":"participant \"TestManager\" as TestManager \u003c\u003c class \u003e\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":3,"author":{"gitId":"xkisxk"},"content":"participant \":AnswerList\" as AnswerList","lastModifiedDate":"2021-10-21"},{"lineNumber":4,"author":{"gitId":"xkisxk"},"content":"participant \":DeckManager\" as DeckManager","lastModifiedDate":"2021-10-21"},{"lineNumber":5,"author":{"gitId":"xkisxk"},"content":"participant \":Deck\" as Deck","lastModifiedDate":"2021-10-21"},{"lineNumber":6,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":7,"author":{"gitId":"xkisxk"},"content":"activate TestManager","lastModifiedDate":"2021-10-21"},{"lineNumber":8,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":9,"author":{"gitId":"xkisxk"},"content":"TestManager -\u003e DeckManager : getTestDeck(deckIndex:int)","lastModifiedDate":"2021-10-21"},{"lineNumber":10,"author":{"gitId":"xkisxk"},"content":"activate DeckManager","lastModifiedDate":"2021-10-21"},{"lineNumber":11,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":12,"author":{"gitId":"xkisxk"},"content":"alt test all decks","lastModifiedDate":"2021-10-22"},{"lineNumber":13,"author":{"gitId":"xkisxk"},"content":"DeckManager -\u003e Deck : Deck()","lastModifiedDate":"2021-10-21"},{"lineNumber":14,"author":{"gitId":"xkisxk"},"content":"activate Deck","lastModifiedDate":"2021-10-21"},{"lineNumber":15,"author":{"gitId":"xkisxk"},"content":"loop every Deck in DeckManager","lastModifiedDate":"2021-10-21"},{"lineNumber":16,"author":{"gitId":"xkisxk"},"content":"loop every FlashCard in Deck","lastModifiedDate":"2021-10-21"},{"lineNumber":17,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":18,"author":{"gitId":"xkisxk"},"content":"Deck -\u003e Deck : addFlashCard()","lastModifiedDate":"2021-10-22"},{"lineNumber":19,"author":{"gitId":"xkisxk"},"content":"activate Deck","lastModifiedDate":"2021-10-22"},{"lineNumber":20,"author":{"gitId":"xkisxk"},"content":"Deck --\u003e Deck","lastModifiedDate":"2021-10-22"},{"lineNumber":21,"author":{"gitId":"xkisxk"},"content":"deactivate Deck","lastModifiedDate":"2021-10-22"},{"lineNumber":22,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":23,"author":{"gitId":"xkisxk"},"content":"end","lastModifiedDate":"2021-10-21"},{"lineNumber":24,"author":{"gitId":"xkisxk"},"content":"end","lastModifiedDate":"2021-10-21"},{"lineNumber":25,"author":{"gitId":"xkisxk"},"content":"Deck --\u003e DeckManager","lastModifiedDate":"2021-10-22"},{"lineNumber":26,"author":{"gitId":"xkisxk"},"content":"deactivate Deck","lastModifiedDate":"2021-10-22"},{"lineNumber":27,"author":{"gitId":"xkisxk"},"content":"DeckManager --\u003e TestManager : deckToTest","lastModifiedDate":"2021-10-21"},{"lineNumber":28,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":29,"author":{"gitId":"xkisxk"},"content":"else test single deck","lastModifiedDate":"2021-10-22"},{"lineNumber":30,"author":{"gitId":"xkisxk"},"content":"TestManager -\u003e DeckManager : get(deckIndex)","lastModifiedDate":"2021-10-21"},{"lineNumber":31,"author":{"gitId":"xkisxk"},"content":"DeckManager --\u003e TestManager : deckToTest","lastModifiedDate":"2021-10-21"},{"lineNumber":32,"author":{"gitId":"xkisxk"},"content":"end","lastModifiedDate":"2021-10-21"},{"lineNumber":33,"author":{"gitId":"xkisxk"},"content":"deactivate DeckManager","lastModifiedDate":"2021-10-22"},{"lineNumber":34,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":35,"author":{"gitId":"xkisxk"},"content":"TestManager -\u003e AnswerList : AnswerList(deckToTest)","lastModifiedDate":"2021-10-21"},{"lineNumber":36,"author":{"gitId":"xkisxk"},"content":"activate AnswerList","lastModifiedDate":"2021-10-21"},{"lineNumber":37,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":38,"author":{"gitId":"xkisxk"},"content":"TestManager \u003c-- AnswerList : userAnswers","lastModifiedDate":"2021-10-21"},{"lineNumber":39,"author":{"gitId":"xkisxk"},"content":"deactivate AnswerList","lastModifiedDate":"2021-10-21"},{"lineNumber":40,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":41,"author":{"gitId":"xkisxk"},"content":"@enduml","lastModifiedDate":"2021-10-21"}],"authorContributionMap":{"xkisxk":41}},{"path":"docs/uml/markTestSequenceDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"xkisxk"},"content":"@startuml","lastModifiedDate":"2021-10-21"},{"lineNumber":2,"author":{"gitId":"xkisxk"},"content":"participant \"TestManager\" as TestManager \u003c\u003c class \u003e\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":3,"author":{"gitId":"xkisxk"},"content":"participant \":AnswerList\" as AnswerList","lastModifiedDate":"2021-10-21"},{"lineNumber":4,"author":{"gitId":"xkisxk"},"content":"participant \":Answer\" as Answer","lastModifiedDate":"2021-10-21"},{"lineNumber":5,"author":{"gitId":"xkisxk"},"content":"participant \":TestHistory\" as TestHistory","lastModifiedDate":"2021-10-21"},{"lineNumber":6,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":7,"author":{"gitId":"xkisxk"},"content":"activate TestManager","lastModifiedDate":"2021-10-21"},{"lineNumber":8,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":9,"author":{"gitId":"xkisxk"},"content":"TestManager -\u003e TestManager : markTest(userAnswers)","lastModifiedDate":"2021-10-21"},{"lineNumber":10,"author":{"gitId":"xkisxk"},"content":"activate TestManager","lastModifiedDate":"2021-10-21"},{"lineNumber":11,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":12,"author":{"gitId":"xkisxk"},"content":"loop every answer in (userAnswers)","lastModifiedDate":"2021-10-21"},{"lineNumber":13,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":14,"author":{"gitId":"xkisxk"},"content":"TestManager -\u003e TestManager : markQuestion(userAnswers, answer)","lastModifiedDate":"2021-10-21"},{"lineNumber":15,"author":{"gitId":"xkisxk"},"content":"activate TestManager","lastModifiedDate":"2021-10-21"},{"lineNumber":16,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":17,"author":{"gitId":"xkisxk"},"content":"alt answer is correct","lastModifiedDate":"2021-10-21"},{"lineNumber":18,"author":{"gitId":"xkisxk"},"content":"TestManager -\u003e AnswerList : incrementUserScore()","lastModifiedDate":"2021-10-21"},{"lineNumber":19,"author":{"gitId":"xkisxk"},"content":"activate AnswerList","lastModifiedDate":"2021-10-21"},{"lineNumber":20,"author":{"gitId":"xkisxk"},"content":"AnswerList --\u003e TestManager","lastModifiedDate":"2021-10-21"},{"lineNumber":21,"author":{"gitId":"xkisxk"},"content":"deactivate AnswerList","lastModifiedDate":"2021-10-21"},{"lineNumber":22,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":23,"author":{"gitId":"xkisxk"},"content":"TestManager -\u003e TestUi : printCorrectAnsMessage()","lastModifiedDate":"2021-10-21"},{"lineNumber":24,"author":{"gitId":"xkisxk"},"content":"activate TestUi","lastModifiedDate":"2021-10-21"},{"lineNumber":25,"author":{"gitId":"xkisxk"},"content":"TestUi --\u003e TestManager","lastModifiedDate":"2021-10-21"},{"lineNumber":26,"author":{"gitId":"xkisxk"},"content":"deactivate TestUi","lastModifiedDate":"2021-10-21"},{"lineNumber":27,"author":{"gitId":"xkisxk"},"content":"else answer is wrong","lastModifiedDate":"2021-10-22"},{"lineNumber":28,"author":{"gitId":"xkisxk"},"content":"TestManager -\u003e TestUi : printIncorrectAnsMessage()","lastModifiedDate":"2021-10-21"},{"lineNumber":29,"author":{"gitId":"xkisxk"},"content":"activate TestUi","lastModifiedDate":"2021-10-21"},{"lineNumber":30,"author":{"gitId":"xkisxk"},"content":"TestUi --\u003e TestManager","lastModifiedDate":"2021-10-21"},{"lineNumber":31,"author":{"gitId":"xkisxk"},"content":"deactivate TestUi","lastModifiedDate":"2021-10-21"},{"lineNumber":32,"author":{"gitId":"xkisxk"},"content":"end","lastModifiedDate":"2021-10-21"},{"lineNumber":33,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":34,"author":{"gitId":"xkisxk"},"content":"TestManager --\u003e TestManager","lastModifiedDate":"2021-10-21"},{"lineNumber":35,"author":{"gitId":"xkisxk"},"content":"deactivate TestManager","lastModifiedDate":"2021-10-21"},{"lineNumber":36,"author":{"gitId":"xkisxk"},"content":"end","lastModifiedDate":"2021-10-21"},{"lineNumber":37,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":38,"author":{"gitId":"xkisxk"},"content":"TestManager -\u003e TestUi : printResult(score, totalScore)","lastModifiedDate":"2021-10-21"},{"lineNumber":39,"author":{"gitId":"xkisxk"},"content":"activate TestUi","lastModifiedDate":"2021-10-21"},{"lineNumber":40,"author":{"gitId":"xkisxk"},"content":"TestUi --\u003e TestManager","lastModifiedDate":"2021-10-21"},{"lineNumber":41,"author":{"gitId":"xkisxk"},"content":"deactivate TestUi","lastModifiedDate":"2021-10-21"},{"lineNumber":42,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":43,"author":{"gitId":"xkisxk"},"content":"TestManager --\u003e TestManager","lastModifiedDate":"2021-10-21"},{"lineNumber":44,"author":{"gitId":"xkisxk"},"content":"deactivate TestManager","lastModifiedDate":"2021-10-21"},{"lineNumber":45,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":46,"author":{"gitId":"xkisxk"},"content":"TestManager -\u003e TestHistory : addAnswerList(userAnswers)","lastModifiedDate":"2021-10-21"},{"lineNumber":47,"author":{"gitId":"xkisxk"},"content":"activate TestHistory","lastModifiedDate":"2021-10-21"},{"lineNumber":48,"author":{"gitId":"xkisxk"},"content":"TestHistory --\u003e TestManager","lastModifiedDate":"2021-10-21"},{"lineNumber":49,"author":{"gitId":"xkisxk"},"content":"deactivate TestHistory","lastModifiedDate":"2021-10-21"},{"lineNumber":50,"author":{"gitId":"xkisxk"},"content":"deactivate TestManager","lastModifiedDate":"2021-10-21"},{"lineNumber":51,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":52,"author":{"gitId":"xkisxk"},"content":"@enduml","lastModifiedDate":"2021-10-21"}],"authorContributionMap":{"xkisxk":52}},{"path":"docs/uml/testAllCardsShuffledSequenceDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"xkisxk"},"content":"@startuml","lastModifiedDate":"2021-10-21"},{"lineNumber":2,"author":{"gitId":"xkisxk"},"content":"participant \"TestManager\" as TestManager \u003c\u003c class \u003e\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":3,"author":{"gitId":"xkisxk"},"content":"participant \":AnswerList\" as AnswerList","lastModifiedDate":"2021-10-21"},{"lineNumber":4,"author":{"gitId":"xkisxk"},"content":"participant \":Collections\" as Collections","lastModifiedDate":"2021-10-21"},{"lineNumber":5,"author":{"gitId":"xkisxk"},"content":"participant \":TestUi\" as TestUi","lastModifiedDate":"2021-10-21"},{"lineNumber":6,"author":{"gitId":"xkisxk"},"content":"participant \"TestParser\" as TestParser \u003c\u003c class \u003e\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":7,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":8,"author":{"gitId":"xkisxk"},"content":"activate TestManager","lastModifiedDate":"2021-10-21"},{"lineNumber":9,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":10,"author":{"gitId":"xkisxk"},"content":"TestManager -\u003e TestManager : testAllCardsShuffled(userAnswers)","lastModifiedDate":"2021-10-21"},{"lineNumber":11,"author":{"gitId":"xkisxk"},"content":"activate TestManager","lastModifiedDate":"2021-10-21"},{"lineNumber":12,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":13,"author":{"gitId":"xkisxk"},"content":"TestManager -\u003e Collections : shuffle(deckToTest)","lastModifiedDate":"2021-10-21"},{"lineNumber":14,"author":{"gitId":"xkisxk"},"content":"activate Collections","lastModifiedDate":"2021-10-21"},{"lineNumber":15,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":16,"author":{"gitId":"xkisxk"},"content":"Collections --\u003e TestManager","lastModifiedDate":"2021-10-21"},{"lineNumber":17,"author":{"gitId":"xkisxk"},"content":"deactivate Collections","lastModifiedDate":"2021-10-21"},{"lineNumber":18,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":19,"author":{"gitId":"xkisxk"},"content":"loop every card in deckToTest","lastModifiedDate":"2021-10-21"},{"lineNumber":20,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":21,"author":{"gitId":"xkisxk"},"content":"TestManager -\u003e TestManager : testCard(userAnswers, card)","lastModifiedDate":"2021-10-21"},{"lineNumber":22,"author":{"gitId":"xkisxk"},"content":"activate TestManager","lastModifiedDate":"2021-10-21"},{"lineNumber":23,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":24,"author":{"gitId":"xkisxk"},"content":"\u0027TestManager -\u003e TestUi : printQuestion(card, questionNumber)","lastModifiedDate":"2021-10-21"},{"lineNumber":25,"author":{"gitId":"xkisxk"},"content":"\u0027TestUi --\u003e TestManager","lastModifiedDate":"2021-10-21"},{"lineNumber":26,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":27,"author":{"gitId":"xkisxk"},"content":"TestManager -\u003e TestUi : getUserMessage()","lastModifiedDate":"2021-10-21"},{"lineNumber":28,"author":{"gitId":"xkisxk"},"content":"activate TestUi","lastModifiedDate":"2021-10-21"},{"lineNumber":29,"author":{"gitId":"xkisxk"},"content":"TestUi --\u003e TestManager : userResponse","lastModifiedDate":"2021-10-21"},{"lineNumber":30,"author":{"gitId":"xkisxk"},"content":"deactivate TestUi","lastModifiedDate":"2021-10-21"},{"lineNumber":31,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":32,"author":{"gitId":"xkisxk"},"content":"TestManager -\u003e TestParser : parseUserResponse(userResponse)","lastModifiedDate":"2021-10-21"},{"lineNumber":33,"author":{"gitId":"xkisxk"},"content":"activate TestParser","lastModifiedDate":"2021-10-21"},{"lineNumber":34,"author":{"gitId":"xkisxk"},"content":"TestParser --\u003e TestManager : parsedUserResponse","lastModifiedDate":"2021-10-21"},{"lineNumber":35,"author":{"gitId":"xkisxk"},"content":"deactivate TestParser","lastModifiedDate":"2021-10-21"},{"lineNumber":36,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":37,"author":{"gitId":"xkisxk"},"content":"TestManager -\u003e AnswerList : addAnswer(parsedUserResponse, questionNumber)","lastModifiedDate":"2021-10-21"},{"lineNumber":38,"author":{"gitId":"xkisxk"},"content":"activate AnswerList","lastModifiedDate":"2021-10-21"},{"lineNumber":39,"author":{"gitId":"xkisxk"},"content":"AnswerList --\u003e TestManager","lastModifiedDate":"2021-10-21"},{"lineNumber":40,"author":{"gitId":"xkisxk"},"content":"deactivate AnswerList","lastModifiedDate":"2021-10-21"},{"lineNumber":41,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":42,"author":{"gitId":"xkisxk"},"content":"TestManager --\u003e TestManager","lastModifiedDate":"2021-10-21"},{"lineNumber":43,"author":{"gitId":"xkisxk"},"content":"deactivate TestManager","lastModifiedDate":"2021-10-21"},{"lineNumber":44,"author":{"gitId":"xkisxk"},"content":"end","lastModifiedDate":"2021-10-21"},{"lineNumber":45,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":46,"author":{"gitId":"xkisxk"},"content":"TestManager --\u003e TestManager","lastModifiedDate":"2021-10-21"},{"lineNumber":47,"author":{"gitId":"xkisxk"},"content":"deactivate TestManager","lastModifiedDate":"2021-10-21"},{"lineNumber":48,"author":{"gitId":"xkisxk"},"content":"@enduml","lastModifiedDate":"2021-10-21"}],"authorContributionMap":{"xkisxk":48}},{"path":"docs/uml/testObjectDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"xkisxk"},"content":"@startuml","lastModifiedDate":"2021-10-21"},{"lineNumber":2,"author":{"gitId":"xkisxk"},"content":"skinparam classAttributeIconSize 0","lastModifiedDate":"2021-10-21"},{"lineNumber":3,"author":{"gitId":"xkisxk"},"content":"package testing {","lastModifiedDate":"2021-10-21"},{"lineNumber":4,"author":{"gitId":"xkisxk"},"content":"    class TestManager","lastModifiedDate":"2021-10-21"},{"lineNumber":5,"author":{"gitId":"xkisxk"},"content":"    class AnswerList","lastModifiedDate":"2021-10-21"},{"lineNumber":6,"author":{"gitId":"xkisxk"},"content":"    class Answer","lastModifiedDate":"2021-10-21"},{"lineNumber":7,"author":{"gitId":"xkisxk"},"content":"    class TestHistory","lastModifiedDate":"2021-10-21"},{"lineNumber":8,"author":{"gitId":"xkisxk"},"content":"}","lastModifiedDate":"2021-10-21"},{"lineNumber":9,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":10,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":11,"author":{"gitId":"xkisxk"},"content":"package parser {","lastModifiedDate":"2021-10-21"},{"lineNumber":12,"author":{"gitId":"xkisxk"},"content":"    class TestParser","lastModifiedDate":"2021-10-21"},{"lineNumber":13,"author":{"gitId":"xkisxk"},"content":"}","lastModifiedDate":"2021-10-21"},{"lineNumber":14,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":15,"author":{"gitId":"xkisxk"},"content":"package ui {","lastModifiedDate":"2021-10-21"},{"lineNumber":16,"author":{"gitId":"xkisxk"},"content":"    class TestUi","lastModifiedDate":"2021-10-21"},{"lineNumber":17,"author":{"gitId":"xkisxk"},"content":"}","lastModifiedDate":"2021-10-21"},{"lineNumber":18,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":19,"author":{"gitId":"xkisxk"},"content":"package flashcard {","lastModifiedDate":"2021-10-21"},{"lineNumber":20,"author":{"gitId":"xkisxk"},"content":"    class Deck","lastModifiedDate":"2021-10-21"},{"lineNumber":21,"author":{"gitId":"xkisxk"},"content":"    class FlashCard","lastModifiedDate":"2021-10-21"},{"lineNumber":22,"author":{"gitId":"xkisxk"},"content":"}","lastModifiedDate":"2021-10-21"},{"lineNumber":23,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":24,"author":{"gitId":"xkisxk"},"content":"TestManager -left\u003e \"1\" TestUi","lastModifiedDate":"2021-10-21"},{"lineNumber":25,"author":{"gitId":"xkisxk"},"content":"TestManager .right\u003e \"1\" TestParser","lastModifiedDate":"2021-10-21"},{"lineNumber":26,"author":{"gitId":"xkisxk"},"content":"TestManager --\u003e \"1\" AnswerList : creates","lastModifiedDate":"2021-10-21"},{"lineNumber":27,"author":{"gitId":"xkisxk"},"content":"TestManager .left\u003e TestHistory","lastModifiedDate":"2021-10-21"},{"lineNumber":28,"author":{"gitId":"xkisxk"},"content":"TestManager .\u003e \"1\" Deck","lastModifiedDate":"2021-10-21"},{"lineNumber":29,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":30,"author":{"gitId":"xkisxk"},"content":"TestHistory --\u003e \"*\" AnswerList : stores","lastModifiedDate":"2021-10-21"},{"lineNumber":31,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":32,"author":{"gitId":"xkisxk"},"content":"AnswerList \"1\" --\u003e \"*\" Answer : contains","lastModifiedDate":"2021-10-21"},{"lineNumber":33,"author":{"gitId":"xkisxk"},"content":"AnswerList -right-\u003e \"1\" Deck","lastModifiedDate":"2021-10-21"},{"lineNumber":34,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":35,"author":{"gitId":"xkisxk"},"content":"Deck --\u003e \"*\" FlashCard","lastModifiedDate":"2021-10-21"},{"lineNumber":36,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":37,"author":{"gitId":"xkisxk"},"content":"Answer .\u003e \"1\" FlashCard","lastModifiedDate":"2021-10-21"},{"lineNumber":38,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":39,"author":{"gitId":"xkisxk"},"content":"@enduml","lastModifiedDate":"2021-10-21"}],"authorContributionMap":{"xkisxk":39}},{"path":"src/main/java/seedu/duke/Duke.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.duke;","lastModifiedDate":"2020-05-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":3,"author":{"gitId":"ThaddeusLim99"},"content":"import seedu.duke.exceptions.CardLiException;","lastModifiedDate":"2021-10-17"},{"lineNumber":4,"author":{"gitId":"xRossKoh"},"content":"import seedu.duke.flashcard.DeckManager;","lastModifiedDate":"2021-10-18"},{"lineNumber":5,"author":{"gitId":"xkisxk"},"content":"import seedu.duke.parser.Parser;","lastModifiedDate":"2021-10-16"},{"lineNumber":6,"author":{"gitId":"xkisxk"},"content":"import seedu.duke.ui.CardLiUi;","lastModifiedDate":"2021-10-16"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":8,"author":{"gitId":"xRossKoh"},"content":"/**","lastModifiedDate":"2021-10-06"},{"lineNumber":9,"author":{"gitId":"xRossKoh"},"content":" * Represents CardLI application.","lastModifiedDate":"2021-10-06"},{"lineNumber":10,"author":{"gitId":"xRossKoh"},"content":" */","lastModifiedDate":"2021-10-06"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":12,"author":{"gitId":"xkisxk"},"content":"    private static final CardLiUi ui \u003d new CardLiUi();","lastModifiedDate":"2021-10-02"},{"lineNumber":13,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * Main entry-point for the java.duke.Duke application.","lastModifiedDate":"2020-05-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2019-07-29"},{"lineNumber":18,"author":{"gitId":"xkisxk"},"content":"        ui.printGreetingMessage();","lastModifiedDate":"2021-10-02"},{"lineNumber":19,"author":{"gitId":"xRossKoh"},"content":"        DeckManager.readFromFile();","lastModifiedDate":"2021-10-18"},{"lineNumber":20,"author":{"gitId":"xkisxk"},"content":"        boolean exitProgram \u003d false;","lastModifiedDate":"2021-10-16"},{"lineNumber":21,"author":{"gitId":"JWweiyin"},"content":"        boolean inDeck;","lastModifiedDate":"2021-10-20"},{"lineNumber":22,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":23,"author":{"gitId":"xkisxk"},"content":"        while (!exitProgram) {","lastModifiedDate":"2021-10-16"},{"lineNumber":24,"author":{"gitId":"ThaddeusLim99"},"content":"            try {","lastModifiedDate":"2021-10-17"},{"lineNumber":25,"author":{"gitId":"xkisxk"},"content":"                String input \u003d ui.getUserMessage();","lastModifiedDate":"2021-10-16"},{"lineNumber":26,"author":{"gitId":"xkisxk"},"content":"                Parser.parseCommand(input);","lastModifiedDate":"2021-10-16"},{"lineNumber":27,"author":{"gitId":"JWweiyin"},"content":"                inDeck \u003d checkEnter(input);","lastModifiedDate":"2021-10-20"},{"lineNumber":28,"author":{"gitId":"JWweiyin"},"content":"                while (inDeck) {","lastModifiedDate":"2021-10-19"},{"lineNumber":29,"author":{"gitId":"JWweiyin"},"content":"                    input \u003d ui.getUserMessage();","lastModifiedDate":"2021-10-19"},{"lineNumber":30,"author":{"gitId":"JWweiyin"},"content":"                    Parser.parseCommandWithinDeck(input);","lastModifiedDate":"2021-10-19"},{"lineNumber":31,"author":{"gitId":"JWweiyin"},"content":"                    inDeck \u003d checkExit(input);","lastModifiedDate":"2021-10-20"},{"lineNumber":32,"author":{"gitId":"xkisxk"},"content":"                }","lastModifiedDate":"2021-10-16"},{"lineNumber":33,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":34,"author":{"gitId":"JWweiyin"},"content":"                exitProgram \u003d checkBye(input);","lastModifiedDate":"2021-10-20"},{"lineNumber":35,"author":{"gitId":"ThaddeusLim99"},"content":"            } catch (CardLiException e) {","lastModifiedDate":"2021-10-17"},{"lineNumber":36,"author":{"gitId":"ThaddeusLim99"},"content":"                ui.showMessage(e.getMessage());","lastModifiedDate":"2021-10-17"},{"lineNumber":37,"author":{"gitId":"ThaddeusLim99"},"content":"            }","lastModifiedDate":"2021-10-17"},{"lineNumber":38,"author":{"gitId":"xkisxk"},"content":"        }","lastModifiedDate":"2021-10-16"},{"lineNumber":39,"author":{"gitId":"xkisxk"},"content":"        ui.printByeMessage();","lastModifiedDate":"2021-10-02"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":41,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":42,"author":{"gitId":"JWweiyin"},"content":"    private static boolean checkBye(String input) {","lastModifiedDate":"2021-10-20"},{"lineNumber":43,"author":{"gitId":"JWweiyin"},"content":"        if (Parser.getCommand(input).equals(\"bye\")) {","lastModifiedDate":"2021-10-20"},{"lineNumber":44,"author":{"gitId":"JWweiyin"},"content":"            return true;","lastModifiedDate":"2021-10-20"},{"lineNumber":45,"author":{"gitId":"JWweiyin"},"content":"        }","lastModifiedDate":"2021-10-20"},{"lineNumber":46,"author":{"gitId":"JWweiyin"},"content":"        return false;","lastModifiedDate":"2021-10-20"},{"lineNumber":47,"author":{"gitId":"JWweiyin"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":48,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":49,"author":{"gitId":"JWweiyin"},"content":"    private static boolean checkExit(String input) {","lastModifiedDate":"2021-10-20"},{"lineNumber":50,"author":{"gitId":"JWweiyin"},"content":"        if (Parser.getCommand(input).equals(\"exit\")) {","lastModifiedDate":"2021-10-20"},{"lineNumber":51,"author":{"gitId":"JWweiyin"},"content":"            return false;","lastModifiedDate":"2021-10-20"},{"lineNumber":52,"author":{"gitId":"JWweiyin"},"content":"        }","lastModifiedDate":"2021-10-20"},{"lineNumber":53,"author":{"gitId":"JWweiyin"},"content":"        return true;","lastModifiedDate":"2021-10-20"},{"lineNumber":54,"author":{"gitId":"JWweiyin"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":55,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":56,"author":{"gitId":"JWweiyin"},"content":"    private static boolean checkEnter(String input) {","lastModifiedDate":"2021-10-20"},{"lineNumber":57,"author":{"gitId":"JWweiyin"},"content":"        if (Parser.getCommand(input).equals(\"enter\")) {","lastModifiedDate":"2021-10-20"},{"lineNumber":58,"author":{"gitId":"JWweiyin"},"content":"            if (Parser.isInteger(input.substring(5).trim())) {","lastModifiedDate":"2021-10-20"},{"lineNumber":59,"author":{"gitId":"JWweiyin"},"content":"                return true;","lastModifiedDate":"2021-10-20"},{"lineNumber":60,"author":{"gitId":"JWweiyin"},"content":"            }","lastModifiedDate":"2021-10-20"},{"lineNumber":61,"author":{"gitId":"JWweiyin"},"content":"        }","lastModifiedDate":"2021-10-20"},{"lineNumber":62,"author":{"gitId":"JWweiyin"},"content":"        return false;","lastModifiedDate":"2021-10-20"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":64,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"JWweiyin":30,"ThaddeusLim99":5,"xRossKoh":5,"xkisxk":13,"-":11}},{"path":"src/main/java/seedu/duke/exceptions/CardLiException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"xkisxk"},"content":"package seedu.duke.exceptions;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":3,"author":{"gitId":"xkisxk"},"content":"public class CardLiException extends Exception {","lastModifiedDate":"2021-10-04"},{"lineNumber":4,"author":{"gitId":"xkisxk"},"content":"    public CardLiException() {","lastModifiedDate":"2021-10-17"},{"lineNumber":5,"author":{"gitId":"xkisxk"},"content":"        super();","lastModifiedDate":"2021-10-17"},{"lineNumber":6,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":7,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":8,"author":{"gitId":"xkisxk"},"content":"    public CardLiException(String message) {","lastModifiedDate":"2021-10-17"},{"lineNumber":9,"author":{"gitId":"xkisxk"},"content":"        super(message);","lastModifiedDate":"2021-10-17"},{"lineNumber":10,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":11,"author":{"gitId":"xkisxk"},"content":"}","lastModifiedDate":"2021-10-04"}],"authorContributionMap":{"xkisxk":11}},{"path":"src/main/java/seedu/duke/exceptions/DeckNotExistException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JWweiyin"},"content":"package seedu.duke.exceptions;","lastModifiedDate":"2021-10-16"},{"lineNumber":2,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":3,"author":{"gitId":"JWweiyin"},"content":"public class DeckNotExistException extends CardLiException {","lastModifiedDate":"2021-10-16"},{"lineNumber":4,"author":{"gitId":"xkisxk"},"content":"    public DeckNotExistException() {","lastModifiedDate":"2021-10-17"},{"lineNumber":5,"author":{"gitId":"xkisxk"},"content":"        super();","lastModifiedDate":"2021-10-17"},{"lineNumber":6,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":7,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":8,"author":{"gitId":"xkisxk"},"content":"    public DeckNotExistException(String message) {","lastModifiedDate":"2021-10-17"},{"lineNumber":9,"author":{"gitId":"xkisxk"},"content":"        super(message);","lastModifiedDate":"2021-10-17"},{"lineNumber":10,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":11,"author":{"gitId":"JWweiyin"},"content":"}","lastModifiedDate":"2021-10-16"}],"authorContributionMap":{"JWweiyin":4,"xkisxk":7}},{"path":"src/main/java/seedu/duke/exceptions/EmptyDeckException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"xkisxk"},"content":"package seedu.duke.exceptions;","lastModifiedDate":"2021-10-21"},{"lineNumber":2,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":3,"author":{"gitId":"xkisxk"},"content":"public class EmptyDeckException extends CardLiException {","lastModifiedDate":"2021-10-21"},{"lineNumber":4,"author":{"gitId":"xkisxk"},"content":"    public EmptyDeckException() {","lastModifiedDate":"2021-10-21"},{"lineNumber":5,"author":{"gitId":"xkisxk"},"content":"        super();","lastModifiedDate":"2021-10-21"},{"lineNumber":6,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":7,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":8,"author":{"gitId":"xkisxk"},"content":"    public EmptyDeckException(String message) {","lastModifiedDate":"2021-10-21"},{"lineNumber":9,"author":{"gitId":"xkisxk"},"content":"        super(message);","lastModifiedDate":"2021-10-21"},{"lineNumber":10,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":11,"author":{"gitId":"xkisxk"},"content":"}","lastModifiedDate":"2021-10-21"}],"authorContributionMap":{"xkisxk":11}},{"path":"src/main/java/seedu/duke/exceptions/FieldEmptyException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JWweiyin"},"content":"package seedu.duke.exceptions;","lastModifiedDate":"2021-10-02"},{"lineNumber":2,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-02"},{"lineNumber":3,"author":{"gitId":"xRossKoh"},"content":"/**","lastModifiedDate":"2021-10-06"},{"lineNumber":4,"author":{"gitId":"xRossKoh"},"content":" * Represents exception thrown when a field that is expected to be filled is empty.","lastModifiedDate":"2021-10-06"},{"lineNumber":5,"author":{"gitId":"xRossKoh"},"content":" */","lastModifiedDate":"2021-10-06"},{"lineNumber":6,"author":{"gitId":"xRossKoh"},"content":"public class FieldEmptyException extends CardLiException {","lastModifiedDate":"2021-10-07"},{"lineNumber":7,"author":{"gitId":"xkisxk"},"content":"    public FieldEmptyException() {","lastModifiedDate":"2021-10-17"},{"lineNumber":8,"author":{"gitId":"xkisxk"},"content":"        super();","lastModifiedDate":"2021-10-17"},{"lineNumber":9,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":10,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":11,"author":{"gitId":"xkisxk"},"content":"    public FieldEmptyException(String message) {","lastModifiedDate":"2021-10-17"},{"lineNumber":12,"author":{"gitId":"xkisxk"},"content":"        super(message);","lastModifiedDate":"2021-10-17"},{"lineNumber":13,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":14,"author":{"gitId":"JWweiyin"},"content":"}","lastModifiedDate":"2021-10-02"}],"authorContributionMap":{"JWweiyin":3,"xRossKoh":4,"xkisxk":7}},{"path":"src/main/java/seedu/duke/exceptions/InvalidCommandFormatException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ThaddeusLim99"},"content":"package seedu.duke.exceptions;","lastModifiedDate":"2021-10-17"},{"lineNumber":2,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":3,"author":{"gitId":"ThaddeusLim99"},"content":"/**","lastModifiedDate":"2021-10-17"},{"lineNumber":4,"author":{"gitId":"ThaddeusLim99"},"content":" * Represents exception thrown when a field that is expected to be filled is empty.","lastModifiedDate":"2021-10-17"},{"lineNumber":5,"author":{"gitId":"ThaddeusLim99"},"content":" */","lastModifiedDate":"2021-10-17"},{"lineNumber":6,"author":{"gitId":"ThaddeusLim99"},"content":"public class InvalidCommandFormatException extends CardLiException {","lastModifiedDate":"2021-10-17"},{"lineNumber":7,"author":{"gitId":"ThaddeusLim99"},"content":"    public InvalidCommandFormatException() {","lastModifiedDate":"2021-10-17"},{"lineNumber":8,"author":{"gitId":"ThaddeusLim99"},"content":"        super();","lastModifiedDate":"2021-10-17"},{"lineNumber":9,"author":{"gitId":"ThaddeusLim99"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":10,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":11,"author":{"gitId":"ThaddeusLim99"},"content":"    public InvalidCommandFormatException(String message) {","lastModifiedDate":"2021-10-17"},{"lineNumber":12,"author":{"gitId":"ThaddeusLim99"},"content":"        super(message);","lastModifiedDate":"2021-10-17"},{"lineNumber":13,"author":{"gitId":"ThaddeusLim99"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":14,"author":{"gitId":"ThaddeusLim99"},"content":"}","lastModifiedDate":"2021-10-17"}],"authorContributionMap":{"ThaddeusLim99":14}},{"path":"src/main/java/seedu/duke/exceptions/NoSlashException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JWweiyin"},"content":"package seedu.duke.exceptions;","lastModifiedDate":"2021-10-02"},{"lineNumber":2,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-02"},{"lineNumber":3,"author":{"gitId":"xRossKoh"},"content":"/**","lastModifiedDate":"2021-10-06"},{"lineNumber":4,"author":{"gitId":"xRossKoh"},"content":" * Represents exception thrown when user input does not contain \u0027/\u0027 character when invoking certain commands.","lastModifiedDate":"2021-10-06"},{"lineNumber":5,"author":{"gitId":"xRossKoh"},"content":" */","lastModifiedDate":"2021-10-06"},{"lineNumber":6,"author":{"gitId":"xRossKoh"},"content":"public class NoSlashException extends CardLiException {","lastModifiedDate":"2021-10-07"},{"lineNumber":7,"author":{"gitId":"xkisxk"},"content":"    public NoSlashException() {","lastModifiedDate":"2021-10-17"},{"lineNumber":8,"author":{"gitId":"xkisxk"},"content":"        super();","lastModifiedDate":"2021-10-17"},{"lineNumber":9,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":10,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":11,"author":{"gitId":"xkisxk"},"content":"    public NoSlashException(String message) {","lastModifiedDate":"2021-10-17"},{"lineNumber":12,"author":{"gitId":"xkisxk"},"content":"        super(message);","lastModifiedDate":"2021-10-17"},{"lineNumber":13,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":14,"author":{"gitId":"JWweiyin"},"content":"}","lastModifiedDate":"2021-10-02"}],"authorContributionMap":{"JWweiyin":3,"xRossKoh":4,"xkisxk":7}},{"path":"src/main/java/seedu/duke/flashcard/Deck.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"xkisxk"},"content":"package seedu.duke.flashcard;","lastModifiedDate":"2021-10-17"},{"lineNumber":2,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-02"},{"lineNumber":3,"author":{"gitId":"xkisxk"},"content":"import seedu.duke.exceptions.CardLiException;","lastModifiedDate":"2021-10-04"},{"lineNumber":4,"author":{"gitId":"JWweiyin"},"content":"import seedu.duke.exceptions.FieldEmptyException;","lastModifiedDate":"2021-10-02"},{"lineNumber":5,"author":{"gitId":"JWweiyin"},"content":"import seedu.duke.exceptions.NoSlashException;","lastModifiedDate":"2021-10-02"},{"lineNumber":6,"author":{"gitId":"JWweiyin"},"content":"import seedu.duke.parser.Parser;","lastModifiedDate":"2021-10-19"},{"lineNumber":7,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-02"},{"lineNumber":8,"author":{"gitId":"JWweiyin"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-02"},{"lineNumber":9,"author":{"gitId":"xkisxk"},"content":"import java.util.logging.Level;","lastModifiedDate":"2021-10-10"},{"lineNumber":10,"author":{"gitId":"xkisxk"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-10-10"},{"lineNumber":11,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-02"},{"lineNumber":12,"author":{"gitId":"xRossKoh"},"content":"/**","lastModifiedDate":"2021-10-06"},{"lineNumber":13,"author":{"gitId":"xRossKoh"},"content":" * Implements the list of added flashcards.","lastModifiedDate":"2021-10-06"},{"lineNumber":14,"author":{"gitId":"xRossKoh"},"content":" */","lastModifiedDate":"2021-10-06"},{"lineNumber":15,"author":{"gitId":"xkisxk"},"content":"public class Deck {","lastModifiedDate":"2021-10-16"},{"lineNumber":16,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":17,"author":{"gitId":"xkisxk"},"content":"    private ArrayList\u003cFlashCard\u003e cards \u003d new ArrayList\u003cFlashCard\u003e();","lastModifiedDate":"2021-10-21"},{"lineNumber":18,"author":{"gitId":"xkisxk"},"content":"    private String name;","lastModifiedDate":"2021-10-17"},{"lineNumber":19,"author":{"gitId":"xkisxk"},"content":"    private static final Logger logger \u003d Logger.getLogger(Deck.class.getName());","lastModifiedDate":"2021-10-16"},{"lineNumber":20,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-02"},{"lineNumber":21,"author":{"gitId":"xkisxk"},"content":"    public Deck(String name) {","lastModifiedDate":"2021-10-17"},{"lineNumber":22,"author":{"gitId":"xkisxk"},"content":"        this.name \u003d name;","lastModifiedDate":"2021-10-17"},{"lineNumber":23,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":24,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":25,"author":{"gitId":"xkisxk"},"content":"    public Deck() {","lastModifiedDate":"2021-10-17"},{"lineNumber":26,"author":{"gitId":"xkisxk"},"content":"        this.name \u003d \"Untitled\";","lastModifiedDate":"2021-10-17"},{"lineNumber":27,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":28,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":29,"author":{"gitId":"JWweiyin"},"content":"    public void editCard(String[] args) {","lastModifiedDate":"2021-10-20"},{"lineNumber":30,"author":{"gitId":"JWweiyin"},"content":"        if (args[1].equalsIgnoreCase(\"front\")) {","lastModifiedDate":"2021-10-20"},{"lineNumber":31,"author":{"gitId":"JWweiyin"},"content":"            cards.get(Integer.parseInt(args[0]) - 1).setFront(args[2]);","lastModifiedDate":"2021-10-20"},{"lineNumber":32,"author":{"gitId":"JWweiyin"},"content":"        } else {","lastModifiedDate":"2021-10-20"},{"lineNumber":33,"author":{"gitId":"JWweiyin"},"content":"            cards.get(Integer.parseInt(args[0]) - 1).setBack(args[2]);","lastModifiedDate":"2021-10-20"},{"lineNumber":34,"author":{"gitId":"JWweiyin"},"content":"        }","lastModifiedDate":"2021-10-20"},{"lineNumber":35,"author":{"gitId":"JWweiyin"},"content":"        System.out.println(\"Changed \" + args[1] + \" of card \" + args[0] + \" of deck \" + Parser.getCurrDeck() + \" to \"","lastModifiedDate":"2021-10-20"},{"lineNumber":36,"author":{"gitId":"JWweiyin"},"content":"                + args[2]);","lastModifiedDate":"2021-10-20"},{"lineNumber":37,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":38,"author":{"gitId":"JWweiyin"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":39,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":40,"author":{"gitId":"xkisxk"},"content":"    public String getName() {","lastModifiedDate":"2021-10-17"},{"lineNumber":41,"author":{"gitId":"xkisxk"},"content":"        return name;","lastModifiedDate":"2021-10-17"},{"lineNumber":42,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":43,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":44,"author":{"gitId":"xRossKoh"},"content":"    public ArrayList\u003cFlashCard\u003e getCards() {","lastModifiedDate":"2021-10-18"},{"lineNumber":45,"author":{"gitId":"xRossKoh"},"content":"        return cards;","lastModifiedDate":"2021-10-18"},{"lineNumber":46,"author":{"gitId":"xRossKoh"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":47,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":48,"author":{"gitId":"ThaddeusLim99"},"content":"    public void setDeckName(String input) {","lastModifiedDate":"2021-10-17"},{"lineNumber":49,"author":{"gitId":"ThaddeusLim99"},"content":"        this.name \u003d input;","lastModifiedDate":"2021-10-17"},{"lineNumber":50,"author":{"gitId":"ThaddeusLim99"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":51,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":52,"author":{"gitId":"xRossKoh"},"content":"    public FlashCard getCard(int index) {","lastModifiedDate":"2021-10-18"},{"lineNumber":53,"author":{"gitId":"xRossKoh"},"content":"        assert getDeckSize() \u003e 0;","lastModifiedDate":"2021-10-18"},{"lineNumber":54,"author":{"gitId":"xRossKoh"},"content":"        assert (index \u003e\u003d 0 \u0026\u0026 index \u003c getDeckSize());","lastModifiedDate":"2021-10-18"},{"lineNumber":55,"author":{"gitId":"ThaddeusLim99"},"content":"        return cards.get(index);","lastModifiedDate":"2021-10-17"},{"lineNumber":56,"author":{"gitId":"ThaddeusLim99"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":57,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":58,"author":{"gitId":"xRossKoh"},"content":"    public int getDeckSize() {","lastModifiedDate":"2021-10-18"},{"lineNumber":59,"author":{"gitId":"xkisxk"},"content":"        return cards.size();","lastModifiedDate":"2021-10-17"},{"lineNumber":60,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":61,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":62,"author":{"gitId":"JWweiyin"},"content":"    private void printDoesNotExistError() {","lastModifiedDate":"2021-10-16"},{"lineNumber":63,"author":{"gitId":"xkisxk"},"content":"        System.out.println(\"\\tThe card you are trying to delete does not exist.\");","lastModifiedDate":"2021-10-02"},{"lineNumber":64,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-02"},{"lineNumber":65,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-02"},{"lineNumber":66,"author":{"gitId":"JWweiyin"},"content":"    private void printEmptyDescriptionError() {","lastModifiedDate":"2021-10-16"},{"lineNumber":67,"author":{"gitId":"xkisxk"},"content":"        System.out.println(\"\\tCan\u0027t delete a card with no description!\");","lastModifiedDate":"2021-10-02"},{"lineNumber":68,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-02"},{"lineNumber":69,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-02"},{"lineNumber":70,"author":{"gitId":"JWweiyin"},"content":"    private void printNewFlashCard(String front, String back) {","lastModifiedDate":"2021-10-16"},{"lineNumber":71,"author":{"gitId":"JWweiyin"},"content":"        //System.out.println(\"\\tAdded card:\");","lastModifiedDate":"2021-10-16"},{"lineNumber":72,"author":{"gitId":"xRossKoh"},"content":"        printCardInfo(front, back);","lastModifiedDate":"2021-10-07"},{"lineNumber":73,"author":{"gitId":"xRossKoh"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":74,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":75,"author":{"gitId":"JWweiyin"},"content":"    private void printCardInfo(String front, String back) {","lastModifiedDate":"2021-10-16"},{"lineNumber":76,"author":{"gitId":"xkisxk"},"content":"        System.out.println(\"\\tFront: \" + front);","lastModifiedDate":"2021-10-02"},{"lineNumber":77,"author":{"gitId":"xkisxk"},"content":"        System.out.println(\"\\tBack: \" + back);","lastModifiedDate":"2021-10-02"},{"lineNumber":78,"author":{"gitId":"xRossKoh"},"content":"        if (getDeckSize() \u003d\u003d 1) {","lastModifiedDate":"2021-10-18"},{"lineNumber":79,"author":{"gitId":"xRossKoh"},"content":"            System.out.println(\"\\tYou have \" + getDeckSize() + \" card in your card deck.\");","lastModifiedDate":"2021-10-18"},{"lineNumber":80,"author":{"gitId":"xkisxk"},"content":"        } else {","lastModifiedDate":"2021-10-02"},{"lineNumber":81,"author":{"gitId":"xRossKoh"},"content":"            System.out.println(\"\\tYou have \" + getDeckSize() + \" cards in your card deck.\");","lastModifiedDate":"2021-10-18"},{"lineNumber":82,"author":{"gitId":"xkisxk"},"content":"        }","lastModifiedDate":"2021-10-02"},{"lineNumber":83,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-02"},{"lineNumber":84,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-02"},{"lineNumber":85,"author":{"gitId":"JWweiyin"},"content":"    private void printDeletedFlashCardMessage(String front, String back) {","lastModifiedDate":"2021-10-16"},{"lineNumber":86,"author":{"gitId":"JWweiyin"},"content":"        //System.out.println(\"\\tDeleted card:\");","lastModifiedDate":"2021-10-16"},{"lineNumber":87,"author":{"gitId":"xRossKoh"},"content":"        printCardInfo(front, back);","lastModifiedDate":"2021-10-07"},{"lineNumber":88,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-02"},{"lineNumber":89,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-02"},{"lineNumber":90,"author":{"gitId":"JWweiyin"},"content":"    public void prepareToAddFlashCard(String[] input) {","lastModifiedDate":"2021-10-19"},{"lineNumber":91,"author":{"gitId":"JWweiyin"},"content":"        //String[] flashCardWords \u003d trimStrings(input);","lastModifiedDate":"2021-10-19"},{"lineNumber":92,"author":{"gitId":"JWweiyin"},"content":"        addFlashCard(input[0], input[1]);","lastModifiedDate":"2021-10-19"},{"lineNumber":93,"author":{"gitId":"JWweiyin"},"content":"        printNewFlashCard(input[0], input[1]);","lastModifiedDate":"2021-10-19"},{"lineNumber":94,"author":{"gitId":"JWweiyin"},"content":"    }","lastModifiedDate":"2021-10-02"},{"lineNumber":95,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-02"},{"lineNumber":96,"author":{"gitId":"xkisxk"},"content":"    /**","lastModifiedDate":"2021-10-04"},{"lineNumber":97,"author":{"gitId":"xkisxk"},"content":"     * Deletes the flash card given by the user\u0027s input.","lastModifiedDate":"2021-10-04"},{"lineNumber":98,"author":{"gitId":"xkisxk"},"content":"     * The card will only be deleted if the input matches","lastModifiedDate":"2021-10-04"},{"lineNumber":99,"author":{"gitId":"xkisxk"},"content":"     * exactly with FlashCard.front.","lastModifiedDate":"2021-10-04"},{"lineNumber":100,"author":{"gitId":"xkisxk"},"content":"     *","lastModifiedDate":"2021-10-04"},{"lineNumber":101,"author":{"gitId":"xkisxk"},"content":"     * @param input user\u0027s input in its entirety","lastModifiedDate":"2021-10-04"},{"lineNumber":102,"author":{"gitId":"xkisxk"},"content":"     */","lastModifiedDate":"2021-10-04"},{"lineNumber":103,"author":{"gitId":"JWweiyin"},"content":"    public void prepareToDeleteFlashCard(String input) {","lastModifiedDate":"2021-10-16"},{"lineNumber":104,"author":{"gitId":"xkisxk"},"content":"        logger.entering(Deck.class.getName(), \"prepareToDeleteFlashCard\");","lastModifiedDate":"2021-10-16"},{"lineNumber":105,"author":{"gitId":"ThaddeusLim99"},"content":"        logger.setLevel(Level.WARNING);","lastModifiedDate":"2021-10-14"},{"lineNumber":106,"author":{"gitId":"xkisxk"},"content":"        logger.log(Level.INFO, \"Starting delete process\");","lastModifiedDate":"2021-10-10"},{"lineNumber":107,"author":{"gitId":"xkisxk"},"content":"        try {","lastModifiedDate":"2021-10-02"},{"lineNumber":108,"author":{"gitId":"JWweiyin"},"content":"            deleteFlashCard(input);","lastModifiedDate":"2021-10-16"},{"lineNumber":109,"author":{"gitId":"xkisxk"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2021-10-16"},{"lineNumber":110,"author":{"gitId":"xkisxk"},"content":"            printEmptyDescriptionError();","lastModifiedDate":"2021-10-02"},{"lineNumber":111,"author":{"gitId":"xkisxk"},"content":"            logger.log(Level.SEVERE, \"Empty field error, no description found after command term\");","lastModifiedDate":"2021-10-10"},{"lineNumber":112,"author":{"gitId":"xkisxk"},"content":"        } catch (CardLiException e) {","lastModifiedDate":"2021-10-04"},{"lineNumber":113,"author":{"gitId":"xkisxk"},"content":"            printDoesNotExistError();","lastModifiedDate":"2021-10-02"},{"lineNumber":114,"author":{"gitId":"xkisxk"},"content":"            logger.log(Level.SEVERE, \"CardLi error, query card does not exist\");","lastModifiedDate":"2021-10-10"},{"lineNumber":115,"author":{"gitId":"xkisxk"},"content":"        }","lastModifiedDate":"2021-10-02"},{"lineNumber":116,"author":{"gitId":"xkisxk"},"content":"        logger.log(Level.INFO, \"End of delete process\");","lastModifiedDate":"2021-10-10"},{"lineNumber":117,"author":{"gitId":"xkisxk"},"content":"        logger.exiting(Deck.class.getName(), \"prepareToDeleteFlashCard\");","lastModifiedDate":"2021-10-16"},{"lineNumber":118,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-02"},{"lineNumber":119,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-02"},{"lineNumber":120,"author":{"gitId":"xkisxk"},"content":"    /**","lastModifiedDate":"2021-10-04"},{"lineNumber":121,"author":{"gitId":"JWweiyin"},"content":"     * Deletes the flashcard with the given input.","lastModifiedDate":"2021-10-09"},{"lineNumber":122,"author":{"gitId":"xkisxk"},"content":"     *","lastModifiedDate":"2021-10-04"},{"lineNumber":123,"author":{"gitId":"JWweiyin"},"content":"     * @param input description of the card to delete","lastModifiedDate":"2021-10-09"},{"lineNumber":124,"author":{"gitId":"xkisxk"},"content":"     * @throws CardLiException if card does not exist","lastModifiedDate":"2021-10-04"},{"lineNumber":125,"author":{"gitId":"xkisxk"},"content":"     */","lastModifiedDate":"2021-10-04"},{"lineNumber":126,"author":{"gitId":"JWweiyin"},"content":"    public void deleteFlashCard(String input) throws CardLiException {","lastModifiedDate":"2021-10-16"},{"lineNumber":127,"author":{"gitId":"ThaddeusLim99"},"content":"        logger.setLevel(Level.WARNING);","lastModifiedDate":"2021-10-14"},{"lineNumber":128,"author":{"gitId":"xkisxk"},"content":"        if (cards.isEmpty()) {","lastModifiedDate":"2021-10-16"},{"lineNumber":129,"author":{"gitId":"xkisxk"},"content":"            throw new CardLiException();","lastModifiedDate":"2021-10-04"},{"lineNumber":130,"author":{"gitId":"xkisxk"},"content":"        }","lastModifiedDate":"2021-10-02"},{"lineNumber":131,"author":{"gitId":"xRossKoh"},"content":"        assert getDeckSize() \u003e 0 : \"cards.size() should be greater than 0\";","lastModifiedDate":"2021-10-18"},{"lineNumber":132,"author":{"gitId":"xkisxk"},"content":"        logger.log(Level.INFO, \"Detecting the type of input, ie word/phrase or index\");","lastModifiedDate":"2021-10-10"},{"lineNumber":133,"author":{"gitId":"JWweiyin"},"content":"        if (!Parser.isInteger(input)) {","lastModifiedDate":"2021-10-19"},{"lineNumber":134,"author":{"gitId":"JWweiyin"},"content":"            deleteFlashCardByDescription(input);","lastModifiedDate":"2021-10-09"},{"lineNumber":135,"author":{"gitId":"JWweiyin"},"content":"        } else {","lastModifiedDate":"2021-10-09"},{"lineNumber":136,"author":{"gitId":"JWweiyin"},"content":"            deleteFlashCardByIndex(input);","lastModifiedDate":"2021-10-09"},{"lineNumber":137,"author":{"gitId":"JWweiyin"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":138,"author":{"gitId":"JWweiyin"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":139,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":140,"author":{"gitId":"JWweiyin"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":141,"author":{"gitId":"JWweiyin"},"content":"     * Deletes the flashcard with the given index.","lastModifiedDate":"2021-10-09"},{"lineNumber":142,"author":{"gitId":"JWweiyin"},"content":"     *","lastModifiedDate":"2021-10-09"},{"lineNumber":143,"author":{"gitId":"JWweiyin"},"content":"     * @param index user\u0027s input (index of the card to be deleted)","lastModifiedDate":"2021-10-09"},{"lineNumber":144,"author":{"gitId":"JWweiyin"},"content":"     * @throws CardLiException if the index of the card exceeds the number of flashcards in cards","lastModifiedDate":"2021-10-09"},{"lineNumber":145,"author":{"gitId":"ThaddeusLim99"},"content":"     *                         or index of card is less than 1","lastModifiedDate":"2021-10-10"},{"lineNumber":146,"author":{"gitId":"JWweiyin"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":147,"author":{"gitId":"JWweiyin"},"content":"    private void deleteFlashCardByIndex(String index) throws CardLiException {","lastModifiedDate":"2021-10-16"},{"lineNumber":148,"author":{"gitId":"ThaddeusLim99"},"content":"        logger.setLevel(Level.WARNING);","lastModifiedDate":"2021-10-14"},{"lineNumber":149,"author":{"gitId":"JWweiyin"},"content":"        int indexToBeRemoved \u003d Integer.parseInt(index) - 1;","lastModifiedDate":"2021-10-09"},{"lineNumber":150,"author":{"gitId":"xRossKoh"},"content":"        if (!((indexToBeRemoved \u003c getDeckSize()) \u0026\u0026 (indexToBeRemoved \u003e\u003d 0))) {","lastModifiedDate":"2021-10-18"},{"lineNumber":151,"author":{"gitId":"astralum"},"content":"            throw new CardLiException();","lastModifiedDate":"2021-10-14"},{"lineNumber":152,"author":{"gitId":"astralum"},"content":"        }","lastModifiedDate":"2021-10-14"},{"lineNumber":153,"author":{"gitId":"xRossKoh"},"content":"        assert getDeckSize() \u003e 0 : \"cards.size() should be greater than 0\";","lastModifiedDate":"2021-10-18"},{"lineNumber":154,"author":{"gitId":"astralum"},"content":"        logger.log(Level.INFO, \"Detecting the type of input, ie word/phrase or index\");","lastModifiedDate":"2021-10-14"},{"lineNumber":155,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":156,"author":{"gitId":"JWweiyin"},"content":"        FlashCard card \u003d cards.get(indexToBeRemoved);","lastModifiedDate":"2021-10-09"},{"lineNumber":157,"author":{"gitId":"JWweiyin"},"content":"        cards.remove(card);","lastModifiedDate":"2021-10-09"},{"lineNumber":158,"author":{"gitId":"JWweiyin"},"content":"        printDeletedFlashCardMessage(card.getFront(), card.getBack());","lastModifiedDate":"2021-10-09"},{"lineNumber":159,"author":{"gitId":"JWweiyin"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":160,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":161,"author":{"gitId":"JWweiyin"},"content":"    /**","lastModifiedDate":"2021-10-09"},{"lineNumber":162,"author":{"gitId":"JWweiyin"},"content":"     * Deletes the flashcard with the given description.","lastModifiedDate":"2021-10-09"},{"lineNumber":163,"author":{"gitId":"JWweiyin"},"content":"     *","lastModifiedDate":"2021-10-09"},{"lineNumber":164,"author":{"gitId":"JWweiyin"},"content":"     * @param description user\u0027s input (front of the card to be deleted)","lastModifiedDate":"2021-10-09"},{"lineNumber":165,"author":{"gitId":"JWweiyin"},"content":"     * @throws CardLiException if none of the front of the cards match the description input by user","lastModifiedDate":"2021-10-09"},{"lineNumber":166,"author":{"gitId":"JWweiyin"},"content":"     */","lastModifiedDate":"2021-10-09"},{"lineNumber":167,"author":{"gitId":"JWweiyin"},"content":"    private void deleteFlashCardByDescription(String description) throws CardLiException {","lastModifiedDate":"2021-10-16"},{"lineNumber":168,"author":{"gitId":"xRossKoh"},"content":"        assert getDeckSize() \u003e 0 : \"cards.size() should be greater than 0\";","lastModifiedDate":"2021-10-18"},{"lineNumber":169,"author":{"gitId":"xRossKoh"},"content":"        for (int i \u003d 0; i \u003c getDeckSize(); i++) {","lastModifiedDate":"2021-10-18"},{"lineNumber":170,"author":{"gitId":"xkisxk"},"content":"            FlashCard card \u003d cards.get(i);","lastModifiedDate":"2021-10-02"},{"lineNumber":171,"author":{"gitId":"xkisxk"},"content":"            if (hasExactCard(description, card)) {","lastModifiedDate":"2021-10-02"},{"lineNumber":172,"author":{"gitId":"xkisxk"},"content":"                cards.remove(card);","lastModifiedDate":"2021-10-02"},{"lineNumber":173,"author":{"gitId":"xkisxk"},"content":"                printDeletedFlashCardMessage(card.getFront(), card.getBack());","lastModifiedDate":"2021-10-02"},{"lineNumber":174,"author":{"gitId":"xkisxk"},"content":"                return;","lastModifiedDate":"2021-10-02"},{"lineNumber":175,"author":{"gitId":"xkisxk"},"content":"            }","lastModifiedDate":"2021-10-02"},{"lineNumber":176,"author":{"gitId":"xkisxk"},"content":"        }","lastModifiedDate":"2021-10-02"},{"lineNumber":177,"author":{"gitId":"xkisxk"},"content":"        throw new CardLiException();","lastModifiedDate":"2021-10-04"},{"lineNumber":178,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-02"},{"lineNumber":179,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-02"},{"lineNumber":180,"author":{"gitId":"JWweiyin"},"content":"    private boolean hasExactCard(String query, FlashCard card) {","lastModifiedDate":"2021-10-16"},{"lineNumber":181,"author":{"gitId":"xkisxk"},"content":"        return card.getFront().equalsIgnoreCase(query);","lastModifiedDate":"2021-10-02"},{"lineNumber":182,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-02"},{"lineNumber":183,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-02"},{"lineNumber":184,"author":{"gitId":"JWweiyin"},"content":"    public String[] trimStrings(String input) throws FieldEmptyException, NoSlashException {","lastModifiedDate":"2021-10-16"},{"lineNumber":185,"author":{"gitId":"JWweiyin"},"content":"        int slashIndex \u003d input.indexOf(\"/bac\");","lastModifiedDate":"2021-10-16"},{"lineNumber":186,"author":{"gitId":"JWweiyin"},"content":"        String[] flashCardWords \u003d new String[2];","lastModifiedDate":"2021-10-02"},{"lineNumber":187,"author":{"gitId":"JWweiyin"},"content":"        if (slashIndex \u003c 3) {","lastModifiedDate":"2021-10-02"},{"lineNumber":188,"author":{"gitId":"JWweiyin"},"content":"            throw new NoSlashException();","lastModifiedDate":"2021-10-02"},{"lineNumber":189,"author":{"gitId":"JWweiyin"},"content":"        }","lastModifiedDate":"2021-10-02"},{"lineNumber":190,"author":{"gitId":"JWweiyin"},"content":"        flashCardWords[0] \u003d input.substring(0, slashIndex - 1).trim();","lastModifiedDate":"2021-10-16"},{"lineNumber":191,"author":{"gitId":"JWweiyin"},"content":"        flashCardWords[1] \u003d input.substring(slashIndex + 4).trim();","lastModifiedDate":"2021-10-02"},{"lineNumber":192,"author":{"gitId":"JWweiyin"},"content":"        if (flashCardWords[0].isEmpty() || flashCardWords[1].isEmpty()) {","lastModifiedDate":"2021-10-02"},{"lineNumber":193,"author":{"gitId":"JWweiyin"},"content":"            throw new FieldEmptyException();","lastModifiedDate":"2021-10-02"},{"lineNumber":194,"author":{"gitId":"JWweiyin"},"content":"        }","lastModifiedDate":"2021-10-02"},{"lineNumber":195,"author":{"gitId":"JWweiyin"},"content":"        return flashCardWords;","lastModifiedDate":"2021-10-02"},{"lineNumber":196,"author":{"gitId":"JWweiyin"},"content":"    }","lastModifiedDate":"2021-10-02"},{"lineNumber":197,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-02"},{"lineNumber":198,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":199,"author":{"gitId":"JWweiyin"},"content":"    public void addFlashCard(String front, String back) {","lastModifiedDate":"2021-10-16"},{"lineNumber":200,"author":{"gitId":"JWweiyin"},"content":"        cards.add(new FlashCard(front, back));","lastModifiedDate":"2021-10-02"},{"lineNumber":201,"author":{"gitId":"JWweiyin"},"content":"    }","lastModifiedDate":"2021-10-02"},{"lineNumber":202,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-02"},{"lineNumber":203,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":204,"author":{"gitId":"xkisxk"},"content":"    public void addFlashCard(FlashCard card) {","lastModifiedDate":"2021-10-19"},{"lineNumber":205,"author":{"gitId":"xkisxk"},"content":"        cards.add(card);","lastModifiedDate":"2021-10-19"},{"lineNumber":206,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":207,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":208,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":209,"author":{"gitId":"JWweiyin"},"content":"    //TODO: fix this","lastModifiedDate":"2021-10-20"},{"lineNumber":210,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":211,"author":{"gitId":"JWweiyin"},"content":"    public void addFlashCard(String front, String back, int userScore, int totalScore) {","lastModifiedDate":"2021-10-20"},{"lineNumber":212,"author":{"gitId":"xRossKoh"},"content":"        cards.add(new FlashCard(front, back, userScore, totalScore));","lastModifiedDate":"2021-10-18"},{"lineNumber":213,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":214,"author":{"gitId":"xRossKoh"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":215,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":216,"author":{"gitId":"JWweiyin"},"content":"    public int getCardIndex(FlashCard card) {","lastModifiedDate":"2021-10-16"},{"lineNumber":217,"author":{"gitId":"ThaddeusLim99"},"content":"        return cards.indexOf(card);","lastModifiedDate":"2021-10-04"},{"lineNumber":218,"author":{"gitId":"ThaddeusLim99"},"content":"    }","lastModifiedDate":"2021-10-04"},{"lineNumber":219,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":220,"author":{"gitId":"JWweiyin"},"content":"    public void viewAllFlashCards() {","lastModifiedDate":"2021-10-16"},{"lineNumber":221,"author":{"gitId":"xRossKoh"},"content":"        if (getDeckSize() \u003e 0) {","lastModifiedDate":"2021-10-18"},{"lineNumber":222,"author":{"gitId":"xRossKoh"},"content":"            for (int i \u003d 0; i \u003c getDeckSize(); i++) {","lastModifiedDate":"2021-10-18"},{"lineNumber":223,"author":{"gitId":"astralum"},"content":"                System.out.println(\"Card \" + (i + 1) + \":\");","lastModifiedDate":"2021-10-07"},{"lineNumber":224,"author":{"gitId":"xkisxk"},"content":"                FlashCard card \u003d cards.get(i);","lastModifiedDate":"2021-10-17"},{"lineNumber":225,"author":{"gitId":"xkisxk"},"content":"                card.viewFlashCard();","lastModifiedDate":"2021-10-17"},{"lineNumber":226,"author":{"gitId":"astralum"},"content":"            }","lastModifiedDate":"2021-10-07"},{"lineNumber":227,"author":{"gitId":"JWweiyin"},"content":"        } else {","lastModifiedDate":"2021-10-16"},{"lineNumber":228,"author":{"gitId":"JWweiyin"},"content":"            System.out.println(\"This deck has no cards.\");","lastModifiedDate":"2021-10-16"},{"lineNumber":229,"author":{"gitId":"JWweiyin"},"content":"        }","lastModifiedDate":"2021-10-16"},{"lineNumber":230,"author":{"gitId":"ThaddeusLim99"},"content":"    }","lastModifiedDate":"2021-10-04"},{"lineNumber":231,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":232,"author":{"gitId":"xRossKoh"},"content":"    @Override","lastModifiedDate":"2021-10-18"},{"lineNumber":233,"author":{"gitId":"xRossKoh"},"content":"    public String toString() {","lastModifiedDate":"2021-10-18"},{"lineNumber":234,"author":{"gitId":"xRossKoh"},"content":"        String cardsString \u003d \"\";","lastModifiedDate":"2021-10-18"},{"lineNumber":235,"author":{"gitId":"xRossKoh"},"content":"        int cardsCount \u003d getDeckSize();","lastModifiedDate":"2021-10-18"},{"lineNumber":236,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":237,"author":{"gitId":"xRossKoh"},"content":"        for (int i \u003d 0; i \u003c cardsCount; i++) {","lastModifiedDate":"2021-10-18"},{"lineNumber":238,"author":{"gitId":"xRossKoh"},"content":"            cardsString +\u003d cards.get(i);","lastModifiedDate":"2021-10-18"},{"lineNumber":239,"author":{"gitId":"xRossKoh"},"content":"        }","lastModifiedDate":"2021-10-18"},{"lineNumber":240,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":241,"author":{"gitId":"xRossKoh"},"content":"        return getName() + \u0027\\n\u0027","lastModifiedDate":"2021-10-18"},{"lineNumber":242,"author":{"gitId":"xRossKoh"},"content":"                + getDeckSize() + \u0027\\n\u0027","lastModifiedDate":"2021-10-18"},{"lineNumber":243,"author":{"gitId":"xRossKoh"},"content":"                + cardsString;","lastModifiedDate":"2021-10-20"},{"lineNumber":244,"author":{"gitId":"xRossKoh"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":245,"author":{"gitId":"JWweiyin"},"content":"}","lastModifiedDate":"2021-10-02"}],"authorContributionMap":{"JWweiyin":95,"ThaddeusLim99":15,"astralum":6,"xRossKoh":43,"xkisxk":86}},{"path":"src/main/java/seedu/duke/flashcard/DeckManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"xkisxk"},"content":"package seedu.duke.flashcard;","lastModifiedDate":"2021-10-17"},{"lineNumber":2,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":3,"author":{"gitId":"JWweiyin"},"content":"import seedu.duke.exceptions.DeckNotExistException;","lastModifiedDate":"2021-10-16"},{"lineNumber":4,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":5,"author":{"gitId":"JWweiyin"},"content":"import seedu.duke.exceptions.NoSlashException;","lastModifiedDate":"2021-10-16"},{"lineNumber":6,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":7,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":8,"author":{"gitId":"xRossKoh"},"content":"import java.io.File;","lastModifiedDate":"2021-10-18"},{"lineNumber":9,"author":{"gitId":"xRossKoh"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2021-10-18"},{"lineNumber":10,"author":{"gitId":"xRossKoh"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-10-18"},{"lineNumber":11,"author":{"gitId":"xRossKoh"},"content":"import java.io.IOException;","lastModifiedDate":"2021-10-18"},{"lineNumber":12,"author":{"gitId":"JWweiyin"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-16"},{"lineNumber":13,"author":{"gitId":"xRossKoh"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-10-18"},{"lineNumber":14,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":15,"author":{"gitId":"xRossKoh"},"content":"public class DeckManager {","lastModifiedDate":"2021-10-18"},{"lineNumber":16,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":17,"author":{"gitId":"xRossKoh"},"content":"    /**","lastModifiedDate":"2021-10-18"},{"lineNumber":18,"author":{"gitId":"xRossKoh"},"content":"     * Specified file path to save task list.","lastModifiedDate":"2021-10-18"},{"lineNumber":19,"author":{"gitId":"xRossKoh"},"content":"     */","lastModifiedDate":"2021-10-18"},{"lineNumber":20,"author":{"gitId":"xRossKoh"},"content":"    static final String FILEPATH \u003d \"data/CardLI.txt\";","lastModifiedDate":"2021-10-18"},{"lineNumber":21,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":22,"author":{"gitId":"xkisxk"},"content":"    private static ArrayList\u003cDeck\u003e decks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-17"},{"lineNumber":23,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":24,"author":{"gitId":"ThaddeusLim99"},"content":"    public static void editCard(String[] args) {","lastModifiedDate":"2021-10-17"},{"lineNumber":25,"author":{"gitId":"ThaddeusLim99"},"content":"        int deckIndex \u003d Integer.parseInt(args[0]) - 1;","lastModifiedDate":"2021-10-21"},{"lineNumber":26,"author":{"gitId":"ThaddeusLim99"},"content":"        int cardIndex \u003d Integer.parseInt(args[1]) - 1;","lastModifiedDate":"2021-10-21"},{"lineNumber":27,"author":{"gitId":"ThaddeusLim99"},"content":"        String newContent \u003d args[3];","lastModifiedDate":"2021-10-21"},{"lineNumber":28,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":29,"author":{"gitId":"ThaddeusLim99"},"content":"        if (args[2].equalsIgnoreCase(\"front\")) {","lastModifiedDate":"2021-10-17"},{"lineNumber":30,"author":{"gitId":"ThaddeusLim99"},"content":"            decks.get(deckIndex).getCard(cardIndex).setFront(newContent);","lastModifiedDate":"2021-10-21"},{"lineNumber":31,"author":{"gitId":"ThaddeusLim99"},"content":"        } else {","lastModifiedDate":"2021-10-17"},{"lineNumber":32,"author":{"gitId":"ThaddeusLim99"},"content":"            decks.get(deckIndex).getCard(cardIndex).setBack(newContent);","lastModifiedDate":"2021-10-21"},{"lineNumber":33,"author":{"gitId":"ThaddeusLim99"},"content":"        }","lastModifiedDate":"2021-10-17"},{"lineNumber":34,"author":{"gitId":"ThaddeusLim99"},"content":"        System.out.println(\"Changed \" + args[2] + \" of card \" + args[1] + \" of deck \" + args[0] + \" to \" + args[3]);","lastModifiedDate":"2021-10-17"},{"lineNumber":35,"author":{"gitId":"ThaddeusLim99"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":36,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":37,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":38,"author":{"gitId":"ThaddeusLim99"},"content":"    public static void editDeck(String[] args) {","lastModifiedDate":"2021-10-21"},{"lineNumber":39,"author":{"gitId":"ThaddeusLim99"},"content":"        int deckIndex \u003d Integer.parseInt(args[0]) - 1;","lastModifiedDate":"2021-10-21"},{"lineNumber":40,"author":{"gitId":"ThaddeusLim99"},"content":"        String newContent \u003d args[1];","lastModifiedDate":"2021-10-21"},{"lineNumber":41,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":42,"author":{"gitId":"ThaddeusLim99"},"content":"        decks.get(deckIndex).setDeckName(newContent);","lastModifiedDate":"2021-10-21"},{"lineNumber":43,"author":{"gitId":"ThaddeusLim99"},"content":"        System.out.println(\"Changed deck \" + args[0] + \" to \" + args[1]);","lastModifiedDate":"2021-10-17"},{"lineNumber":44,"author":{"gitId":"ThaddeusLim99"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":45,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":46,"author":{"gitId":"ThaddeusLim99"},"content":"    public static Deck getDeck(int index) {","lastModifiedDate":"2021-10-17"},{"lineNumber":47,"author":{"gitId":"xRossKoh"},"content":"        assert getDecksSize() \u003e 0;","lastModifiedDate":"2021-10-18"},{"lineNumber":48,"author":{"gitId":"xRossKoh"},"content":"        assert (index \u003e\u003d 0 \u0026\u0026 index \u003c getDecksSize());","lastModifiedDate":"2021-10-18"},{"lineNumber":49,"author":{"gitId":"ThaddeusLim99"},"content":"        return decks.get(index);","lastModifiedDate":"2021-10-17"},{"lineNumber":50,"author":{"gitId":"ThaddeusLim99"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":51,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":52,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":53,"author":{"gitId":"xkisxk"},"content":"    public static Deck getTestDeck(int index) {","lastModifiedDate":"2021-10-21"},{"lineNumber":54,"author":{"gitId":"xkisxk"},"content":"        if (index \u003d\u003d -1) {","lastModifiedDate":"2021-10-21"},{"lineNumber":55,"author":{"gitId":"xkisxk"},"content":"            Deck deckToTest \u003d new Deck(\"Test\");","lastModifiedDate":"2021-10-21"},{"lineNumber":56,"author":{"gitId":"xkisxk"},"content":"            for (Deck deck : DeckManager.getDecks()) {","lastModifiedDate":"2021-10-21"},{"lineNumber":57,"author":{"gitId":"xkisxk"},"content":"                for (FlashCard card : deck.getCards()) {","lastModifiedDate":"2021-10-21"},{"lineNumber":58,"author":{"gitId":"xkisxk"},"content":"                    deckToTest.addFlashCard(card);","lastModifiedDate":"2021-10-21"},{"lineNumber":59,"author":{"gitId":"xkisxk"},"content":"                }","lastModifiedDate":"2021-10-21"},{"lineNumber":60,"author":{"gitId":"xkisxk"},"content":"            }","lastModifiedDate":"2021-10-21"},{"lineNumber":61,"author":{"gitId":"xkisxk"},"content":"            return deckToTest;","lastModifiedDate":"2021-10-21"},{"lineNumber":62,"author":{"gitId":"xkisxk"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":63,"author":{"gitId":"xkisxk"},"content":"        if (hasDeck(index)) {","lastModifiedDate":"2021-10-21"},{"lineNumber":64,"author":{"gitId":"xkisxk"},"content":"            return decks.get(index);","lastModifiedDate":"2021-10-21"},{"lineNumber":65,"author":{"gitId":"xkisxk"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":66,"author":{"gitId":"xkisxk"},"content":"        throw new IndexOutOfBoundsException(\"This deck does not exist.\");","lastModifiedDate":"2021-10-21"},{"lineNumber":67,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":68,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":69,"author":{"gitId":"xRossKoh"},"content":"    public static int getDecksSize() {","lastModifiedDate":"2021-10-18"},{"lineNumber":70,"author":{"gitId":"xRossKoh"},"content":"        return decks.size();","lastModifiedDate":"2021-10-18"},{"lineNumber":71,"author":{"gitId":"xRossKoh"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":72,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":73,"author":{"gitId":"xkisxk"},"content":"    public static void prepareToAddDeck(String deckName) {","lastModifiedDate":"2021-10-17"},{"lineNumber":74,"author":{"gitId":"xkisxk"},"content":"        if (!hasDeck(deckName)) {","lastModifiedDate":"2021-10-17"},{"lineNumber":75,"author":{"gitId":"xkisxk"},"content":"            addDeck(deckName);","lastModifiedDate":"2021-10-17"},{"lineNumber":76,"author":{"gitId":"xkisxk"},"content":"            printNewDeck(deckName);","lastModifiedDate":"2021-10-17"},{"lineNumber":77,"author":{"gitId":"JWweiyin"},"content":"        } else {","lastModifiedDate":"2021-10-16"},{"lineNumber":78,"author":{"gitId":"JWweiyin"},"content":"            System.out.println(\"The category you are trying to create already exists.\");","lastModifiedDate":"2021-10-16"},{"lineNumber":79,"author":{"gitId":"JWweiyin"},"content":"        }","lastModifiedDate":"2021-10-16"},{"lineNumber":80,"author":{"gitId":"JWweiyin"},"content":"    }","lastModifiedDate":"2021-10-16"},{"lineNumber":81,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":82,"author":{"gitId":"xkisxk"},"content":"    private static void printNewDeck(String deckName) {","lastModifiedDate":"2021-10-17"},{"lineNumber":83,"author":{"gitId":"xkisxk"},"content":"        System.out.println(\"You have just made the deck \u003c\u003c\" + deckName + \"\u003e\u003e.\");","lastModifiedDate":"2021-10-17"},{"lineNumber":84,"author":{"gitId":"JWweiyin"},"content":"    }","lastModifiedDate":"2021-10-16"},{"lineNumber":85,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":86,"author":{"gitId":"xkisxk"},"content":"    private static boolean hasDeck(String categoryName) {","lastModifiedDate":"2021-10-17"},{"lineNumber":87,"author":{"gitId":"xkisxk"},"content":"        for (Deck deck : decks) {","lastModifiedDate":"2021-10-17"},{"lineNumber":88,"author":{"gitId":"xkisxk"},"content":"            if (deck.getName().trim().equals(categoryName.trim())) {","lastModifiedDate":"2021-10-17"},{"lineNumber":89,"author":{"gitId":"JWweiyin"},"content":"                return true;","lastModifiedDate":"2021-10-16"},{"lineNumber":90,"author":{"gitId":"JWweiyin"},"content":"            }","lastModifiedDate":"2021-10-16"},{"lineNumber":91,"author":{"gitId":"JWweiyin"},"content":"        }","lastModifiedDate":"2021-10-16"},{"lineNumber":92,"author":{"gitId":"JWweiyin"},"content":"        return false;","lastModifiedDate":"2021-10-16"},{"lineNumber":93,"author":{"gitId":"JWweiyin"},"content":"    }","lastModifiedDate":"2021-10-16"},{"lineNumber":94,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":95,"author":{"gitId":"xkisxk"},"content":"    public static boolean hasDeck(int deckIndex) {","lastModifiedDate":"2021-10-21"},{"lineNumber":96,"author":{"gitId":"xkisxk"},"content":"        return deckIndex \u003e\u003d 0 \u0026\u0026 deckIndex \u003c DeckManager.getDecksSize();","lastModifiedDate":"2021-10-21"},{"lineNumber":97,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":98,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":99,"author":{"gitId":"xkisxk"},"content":"    private static void addDeck(String deckName) {","lastModifiedDate":"2021-10-17"},{"lineNumber":100,"author":{"gitId":"xkisxk"},"content":"        decks.add(new Deck(deckName));","lastModifiedDate":"2021-10-17"},{"lineNumber":101,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":102,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":103,"author":{"gitId":"xkisxk"},"content":"    public static void deleteDeck(Deck deck) {","lastModifiedDate":"2021-10-21"},{"lineNumber":104,"author":{"gitId":"xkisxk"},"content":"        decks.remove(deck);","lastModifiedDate":"2021-10-21"},{"lineNumber":105,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":106,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":107,"author":{"gitId":"JWweiyin"},"content":"    public static ArrayList\u003cDeck\u003e getDecks() {","lastModifiedDate":"2021-10-20"},{"lineNumber":108,"author":{"gitId":"xkisxk"},"content":"        return decks;","lastModifiedDate":"2021-10-17"},{"lineNumber":109,"author":{"gitId":"JWweiyin"},"content":"    }","lastModifiedDate":"2021-10-16"},{"lineNumber":110,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":111,"author":{"gitId":"xkisxk"},"content":"    public static void viewDecks() {","lastModifiedDate":"2021-10-17"},{"lineNumber":112,"author":{"gitId":"xRossKoh"},"content":"        if (getDecksSize() \u003e 0) {","lastModifiedDate":"2021-10-18"},{"lineNumber":113,"author":{"gitId":"JWweiyin"},"content":"            int i \u003d 1;","lastModifiedDate":"2021-10-16"},{"lineNumber":114,"author":{"gitId":"JWweiyin"},"content":"            System.out.println(\"These are your decks: \");","lastModifiedDate":"2021-10-16"},{"lineNumber":115,"author":{"gitId":"xkisxk"},"content":"            for (Deck deck : decks) {","lastModifiedDate":"2021-10-17"},{"lineNumber":116,"author":{"gitId":"xkisxk"},"content":"                System.out.println(i + \". \" + deck.getName());","lastModifiedDate":"2021-10-17"},{"lineNumber":117,"author":{"gitId":"JWweiyin"},"content":"                i +\u003d 1;","lastModifiedDate":"2021-10-16"},{"lineNumber":118,"author":{"gitId":"JWweiyin"},"content":"            }","lastModifiedDate":"2021-10-16"},{"lineNumber":119,"author":{"gitId":"JWweiyin"},"content":"        } else {","lastModifiedDate":"2021-10-16"},{"lineNumber":120,"author":{"gitId":"JWweiyin"},"content":"            System.out.println(\"You have no decks.\");","lastModifiedDate":"2021-10-16"},{"lineNumber":121,"author":{"gitId":"JWweiyin"},"content":"        }","lastModifiedDate":"2021-10-16"},{"lineNumber":122,"author":{"gitId":"JWweiyin"},"content":"    }","lastModifiedDate":"2021-10-16"},{"lineNumber":123,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":124,"author":{"gitId":"xkisxk"},"content":"    public static void viewOneDeck(String input) {","lastModifiedDate":"2021-10-17"},{"lineNumber":125,"author":{"gitId":"JWweiyin"},"content":"        try {","lastModifiedDate":"2021-10-16"},{"lineNumber":126,"author":{"gitId":"JWweiyin"},"content":"            int deckIndex \u003d Integer.parseInt(input) - 1;","lastModifiedDate":"2021-10-16"},{"lineNumber":127,"author":{"gitId":"xRossKoh"},"content":"            if (deckIndex \u003c getDecksSize() \u0026\u0026 deckIndex \u003e\u003d 0) {","lastModifiedDate":"2021-10-18"},{"lineNumber":128,"author":{"gitId":"JWweiyin"},"content":"                System.out.println(\"Viewing deck \" + decks.get(deckIndex).getName() + \" :\");","lastModifiedDate":"2021-10-16"},{"lineNumber":129,"author":{"gitId":"xkisxk"},"content":"                Deck deckToView \u003d decks.get(deckIndex);","lastModifiedDate":"2021-10-17"},{"lineNumber":130,"author":{"gitId":"xkisxk"},"content":"                deckToView.viewAllFlashCards();","lastModifiedDate":"2021-10-17"},{"lineNumber":131,"author":{"gitId":"JWweiyin"},"content":"            } else {","lastModifiedDate":"2021-10-16"},{"lineNumber":132,"author":{"gitId":"JWweiyin"},"content":"                throw new DeckNotExistException();","lastModifiedDate":"2021-10-16"},{"lineNumber":133,"author":{"gitId":"JWweiyin"},"content":"            }","lastModifiedDate":"2021-10-16"},{"lineNumber":134,"author":{"gitId":"JWweiyin"},"content":"        } catch (DeckNotExistException e) {","lastModifiedDate":"2021-10-16"},{"lineNumber":135,"author":{"gitId":"JWweiyin"},"content":"            System.out.println(\"This deck doesn\u0027t exist.\");","lastModifiedDate":"2021-10-16"},{"lineNumber":136,"author":{"gitId":"xkisxk"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2021-10-17"},{"lineNumber":137,"author":{"gitId":"xkisxk"},"content":"            System.out.println(\"That\u0027s not a number.\");","lastModifiedDate":"2021-10-17"},{"lineNumber":138,"author":{"gitId":"JWweiyin"},"content":"        }","lastModifiedDate":"2021-10-16"},{"lineNumber":139,"author":{"gitId":"JWweiyin"},"content":"    }","lastModifiedDate":"2021-10-16"},{"lineNumber":140,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":141,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":142,"author":{"gitId":"xRossKoh"},"content":"    public static void saveToFile() {","lastModifiedDate":"2021-10-18"},{"lineNumber":143,"author":{"gitId":"xRossKoh"},"content":"        try {","lastModifiedDate":"2021-10-18"},{"lineNumber":144,"author":{"gitId":"xRossKoh"},"content":"            File file \u003d new File(FILEPATH);","lastModifiedDate":"2021-10-18"},{"lineNumber":145,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":146,"author":{"gitId":"xRossKoh"},"content":"            // create new directory and file if they do not exist","lastModifiedDate":"2021-10-18"},{"lineNumber":147,"author":{"gitId":"xRossKoh"},"content":"            if (!file.exists()) {","lastModifiedDate":"2021-10-18"},{"lineNumber":148,"author":{"gitId":"xRossKoh"},"content":"                file.getParentFile().mkdirs();","lastModifiedDate":"2021-10-18"},{"lineNumber":149,"author":{"gitId":"xRossKoh"},"content":"                file.createNewFile();","lastModifiedDate":"2021-10-18"},{"lineNumber":150,"author":{"gitId":"xRossKoh"},"content":"            }","lastModifiedDate":"2021-10-18"},{"lineNumber":151,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":152,"author":{"gitId":"xRossKoh"},"content":"            // instantiate FileWriter object to overwrite specified text file","lastModifiedDate":"2021-10-18"},{"lineNumber":153,"author":{"gitId":"xRossKoh"},"content":"            FileWriter fileWriter \u003d new FileWriter(FILEPATH, false);","lastModifiedDate":"2021-10-18"},{"lineNumber":154,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":155,"author":{"gitId":"xRossKoh"},"content":"            int decksCount \u003d decks.size();","lastModifiedDate":"2021-10-18"},{"lineNumber":156,"author":{"gitId":"xRossKoh"},"content":"            fileWriter.write(Integer.toString(decksCount) + \u0027\\n\u0027);","lastModifiedDate":"2021-10-18"},{"lineNumber":157,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":158,"author":{"gitId":"xRossKoh"},"content":"            for (int i \u003d 0; i \u003c decksCount; i++) {","lastModifiedDate":"2021-10-18"},{"lineNumber":159,"author":{"gitId":"xRossKoh"},"content":"                fileWriter.write(decks.get(i).toString());","lastModifiedDate":"2021-10-18"},{"lineNumber":160,"author":{"gitId":"xRossKoh"},"content":"            }","lastModifiedDate":"2021-10-18"},{"lineNumber":161,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":162,"author":{"gitId":"xRossKoh"},"content":"            fileWriter.close();","lastModifiedDate":"2021-10-18"},{"lineNumber":163,"author":{"gitId":"xRossKoh"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-10-18"},{"lineNumber":164,"author":{"gitId":"xRossKoh"},"content":"            System.out.println(\"Something went wrong while saving the flashcards to file...\");","lastModifiedDate":"2021-10-18"},{"lineNumber":165,"author":{"gitId":"xRossKoh"},"content":"        }","lastModifiedDate":"2021-10-18"},{"lineNumber":166,"author":{"gitId":"xRossKoh"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":167,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":168,"author":{"gitId":"xRossKoh"},"content":"    public static void readFromFile() {","lastModifiedDate":"2021-10-18"},{"lineNumber":169,"author":{"gitId":"xRossKoh"},"content":"        try {","lastModifiedDate":"2021-10-18"},{"lineNumber":170,"author":{"gitId":"xRossKoh"},"content":"            File file \u003d new File(FILEPATH);","lastModifiedDate":"2021-10-18"},{"lineNumber":171,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":172,"author":{"gitId":"xRossKoh"},"content":"            // instantiate scanner to read file contents","lastModifiedDate":"2021-10-18"},{"lineNumber":173,"author":{"gitId":"xRossKoh"},"content":"            Scanner s \u003d new Scanner(file);","lastModifiedDate":"2021-10-18"},{"lineNumber":174,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":175,"author":{"gitId":"xRossKoh"},"content":"            int decksCount \u003d Integer.parseInt(s.nextLine());","lastModifiedDate":"2021-10-18"},{"lineNumber":176,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":177,"author":{"gitId":"xRossKoh"},"content":"            for (int i \u003d 0; i \u003c decksCount; i++) {","lastModifiedDate":"2021-10-18"},{"lineNumber":178,"author":{"gitId":"xRossKoh"},"content":"                String deckName \u003d s.nextLine();","lastModifiedDate":"2021-10-18"},{"lineNumber":179,"author":{"gitId":"xRossKoh"},"content":"                Deck newDeck \u003d new Deck(deckName);","lastModifiedDate":"2021-10-18"},{"lineNumber":180,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":181,"author":{"gitId":"xRossKoh"},"content":"                int cardsCount \u003d Integer.parseInt(s.nextLine());","lastModifiedDate":"2021-10-18"},{"lineNumber":182,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":183,"author":{"gitId":"xRossKoh"},"content":"                for (int j \u003d 0; j \u003c cardsCount; j++) {","lastModifiedDate":"2021-10-18"},{"lineNumber":184,"author":{"gitId":"xRossKoh"},"content":"                    String newLine \u003d s.nextLine();","lastModifiedDate":"2021-10-18"},{"lineNumber":185,"author":{"gitId":"xRossKoh"},"content":"                    String[] newLineArgs \u003d newLine.split(\" \\\\| \");","lastModifiedDate":"2021-10-18"},{"lineNumber":186,"author":{"gitId":"xRossKoh"},"content":"                    newDeck.addFlashCard(newLineArgs[0], newLineArgs[1],","lastModifiedDate":"2021-10-18"},{"lineNumber":187,"author":{"gitId":"xRossKoh"},"content":"                            Integer.parseInt(newLineArgs[2]),","lastModifiedDate":"2021-10-18"},{"lineNumber":188,"author":{"gitId":"xRossKoh"},"content":"                            Integer.parseInt(newLineArgs[3]));","lastModifiedDate":"2021-10-18"},{"lineNumber":189,"author":{"gitId":"xRossKoh"},"content":"                }","lastModifiedDate":"2021-10-18"},{"lineNumber":190,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":191,"author":{"gitId":"xRossKoh"},"content":"                decks.add(newDeck);","lastModifiedDate":"2021-10-18"},{"lineNumber":192,"author":{"gitId":"xRossKoh"},"content":"            }","lastModifiedDate":"2021-10-18"},{"lineNumber":193,"author":{"gitId":"xRossKoh"},"content":"        } catch (FileNotFoundException e) { // file does not exist on first boot","lastModifiedDate":"2021-10-18"},{"lineNumber":194,"author":{"gitId":"xRossKoh"},"content":"            return;","lastModifiedDate":"2021-10-18"},{"lineNumber":195,"author":{"gitId":"xRossKoh"},"content":"        }","lastModifiedDate":"2021-10-18"},{"lineNumber":196,"author":{"gitId":"xRossKoh"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":197,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":198,"author":{"gitId":"JWweiyin"},"content":"}","lastModifiedDate":"2021-10-16"}],"authorContributionMap":{"JWweiyin":48,"ThaddeusLim99":25,"xRossKoh":76,"xkisxk":49}},{"path":"src/main/java/seedu/duke/flashcard/FlashCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"xkisxk"},"content":"package seedu.duke.flashcard;","lastModifiedDate":"2021-10-17"},{"lineNumber":2,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-02"},{"lineNumber":3,"author":{"gitId":"JWweiyin"},"content":"import java.util.logging.Level;","lastModifiedDate":"2021-10-14"},{"lineNumber":4,"author":{"gitId":"JWweiyin"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-10-14"},{"lineNumber":5,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":6,"author":{"gitId":"xRossKoh"},"content":"/**","lastModifiedDate":"2021-10-06"},{"lineNumber":7,"author":{"gitId":"xRossKoh"},"content":" * Represents information within a single flashcard.","lastModifiedDate":"2021-10-07"},{"lineNumber":8,"author":{"gitId":"xRossKoh"},"content":" */","lastModifiedDate":"2021-10-06"},{"lineNumber":9,"author":{"gitId":"JWweiyin"},"content":"public class FlashCard {","lastModifiedDate":"2021-10-02"},{"lineNumber":10,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":11,"author":{"gitId":"xRossKoh"},"content":"    static final String SEPARATOR \u003d \" | \";","lastModifiedDate":"2021-10-18"},{"lineNumber":12,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":13,"author":{"gitId":"JWweiyin"},"content":"    private static final Logger logger \u003d Logger.getLogger(\"Card\");","lastModifiedDate":"2021-10-14"},{"lineNumber":14,"author":{"gitId":"JWweiyin"},"content":"    private String front;","lastModifiedDate":"2021-10-02"},{"lineNumber":15,"author":{"gitId":"JWweiyin"},"content":"    private String back;","lastModifiedDate":"2021-10-02"},{"lineNumber":16,"author":{"gitId":"xkisxk"},"content":"    private int userScore;","lastModifiedDate":"2021-10-17"},{"lineNumber":17,"author":{"gitId":"xkisxk"},"content":"    private int totalScore;","lastModifiedDate":"2021-10-17"},{"lineNumber":18,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-02"},{"lineNumber":19,"author":{"gitId":"JWweiyin"},"content":"    public FlashCard(String front, String back) {","lastModifiedDate":"2021-10-02"},{"lineNumber":20,"author":{"gitId":"ThaddeusLim99"},"content":"        logger.setLevel(Level.WARNING);","lastModifiedDate":"2021-10-14"},{"lineNumber":21,"author":{"gitId":"JWweiyin"},"content":"        assert front !\u003d null;","lastModifiedDate":"2021-10-14"},{"lineNumber":22,"author":{"gitId":"JWweiyin"},"content":"        assert back !\u003d null;","lastModifiedDate":"2021-10-14"},{"lineNumber":23,"author":{"gitId":"JWweiyin"},"content":"        this.front \u003d front;","lastModifiedDate":"2021-10-02"},{"lineNumber":24,"author":{"gitId":"JWweiyin"},"content":"        this.back \u003d back;","lastModifiedDate":"2021-10-02"},{"lineNumber":25,"author":{"gitId":"xkisxk"},"content":"        this.userScore \u003d 0;","lastModifiedDate":"2021-10-17"},{"lineNumber":26,"author":{"gitId":"xkisxk"},"content":"        this.totalScore \u003d 0;","lastModifiedDate":"2021-10-17"},{"lineNumber":27,"author":{"gitId":"JWweiyin"},"content":"        logger.log(Level.INFO, \"Card front: \" + front);","lastModifiedDate":"2021-10-14"},{"lineNumber":28,"author":{"gitId":"JWweiyin"},"content":"        logger.log(Level.INFO, \"Card back: \" + back);","lastModifiedDate":"2021-10-14"},{"lineNumber":29,"author":{"gitId":"JWweiyin"},"content":"    }","lastModifiedDate":"2021-10-02"},{"lineNumber":30,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-02"},{"lineNumber":31,"author":{"gitId":"xRossKoh"},"content":"    public FlashCard(String front, String back, int userScore, int totalScore) {","lastModifiedDate":"2021-10-18"},{"lineNumber":32,"author":{"gitId":"xRossKoh"},"content":"        logger.setLevel(Level.WARNING);","lastModifiedDate":"2021-10-18"},{"lineNumber":33,"author":{"gitId":"xRossKoh"},"content":"        assert front !\u003d null;","lastModifiedDate":"2021-10-18"},{"lineNumber":34,"author":{"gitId":"xRossKoh"},"content":"        assert back !\u003d null;","lastModifiedDate":"2021-10-18"},{"lineNumber":35,"author":{"gitId":"xRossKoh"},"content":"        this.front \u003d front;","lastModifiedDate":"2021-10-18"},{"lineNumber":36,"author":{"gitId":"xRossKoh"},"content":"        this.back \u003d back;","lastModifiedDate":"2021-10-18"},{"lineNumber":37,"author":{"gitId":"xRossKoh"},"content":"        this.userScore \u003d userScore;","lastModifiedDate":"2021-10-18"},{"lineNumber":38,"author":{"gitId":"xRossKoh"},"content":"        this.totalScore \u003d totalScore;","lastModifiedDate":"2021-10-18"},{"lineNumber":39,"author":{"gitId":"xRossKoh"},"content":"        logger.log(Level.INFO, \"Card front: \" + front);","lastModifiedDate":"2021-10-18"},{"lineNumber":40,"author":{"gitId":"xRossKoh"},"content":"        logger.log(Level.INFO, \"Card back: \" + back);","lastModifiedDate":"2021-10-18"},{"lineNumber":41,"author":{"gitId":"xRossKoh"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":42,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":43,"author":{"gitId":"xRossKoh"},"content":"    /**","lastModifiedDate":"2021-10-06"},{"lineNumber":44,"author":{"gitId":"xRossKoh"},"content":"     * Getter for String on front of flashcard.","lastModifiedDate":"2021-10-06"},{"lineNumber":45,"author":{"gitId":"xRossKoh"},"content":"     *","lastModifiedDate":"2021-10-06"},{"lineNumber":46,"author":{"gitId":"xRossKoh"},"content":"     * @return String on front of flashcard","lastModifiedDate":"2021-10-06"},{"lineNumber":47,"author":{"gitId":"xRossKoh"},"content":"     */","lastModifiedDate":"2021-10-06"},{"lineNumber":48,"author":{"gitId":"ThaddeusLim99"},"content":"    public String getFront() {","lastModifiedDate":"2021-10-04"},{"lineNumber":49,"author":{"gitId":"ThaddeusLim99"},"content":"        logger.setLevel(Level.WARNING);","lastModifiedDate":"2021-10-14"},{"lineNumber":50,"author":{"gitId":"astralum"},"content":"        assert this.front !\u003d null;","lastModifiedDate":"2021-10-14"},{"lineNumber":51,"author":{"gitId":"astralum"},"content":"        logger.log(Level.INFO, \"Getting card front: \" + front);","lastModifiedDate":"2021-10-14"},{"lineNumber":52,"author":{"gitId":"ThaddeusLim99"},"content":"        return this.front;","lastModifiedDate":"2021-10-04"},{"lineNumber":53,"author":{"gitId":"ThaddeusLim99"},"content":"    }","lastModifiedDate":"2021-10-04"},{"lineNumber":54,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":55,"author":{"gitId":"xRossKoh"},"content":"    /**","lastModifiedDate":"2021-10-06"},{"lineNumber":56,"author":{"gitId":"xRossKoh"},"content":"     * Getter for String on back of flashcard.","lastModifiedDate":"2021-10-06"},{"lineNumber":57,"author":{"gitId":"xRossKoh"},"content":"     *","lastModifiedDate":"2021-10-06"},{"lineNumber":58,"author":{"gitId":"xRossKoh"},"content":"     * @return String on back of flashcard","lastModifiedDate":"2021-10-06"},{"lineNumber":59,"author":{"gitId":"xRossKoh"},"content":"     */","lastModifiedDate":"2021-10-06"},{"lineNumber":60,"author":{"gitId":"astralum"},"content":"    public String getBack() {","lastModifiedDate":"2021-10-07"},{"lineNumber":61,"author":{"gitId":"ThaddeusLim99"},"content":"        logger.setLevel(Level.WARNING);","lastModifiedDate":"2021-10-14"},{"lineNumber":62,"author":{"gitId":"astralum"},"content":"        assert this.back !\u003d null;","lastModifiedDate":"2021-10-14"},{"lineNumber":63,"author":{"gitId":"astralum"},"content":"        logger.log(Level.INFO, \"Getting card back: \" + back);","lastModifiedDate":"2021-10-14"},{"lineNumber":64,"author":{"gitId":"astralum"},"content":"        return this.back;","lastModifiedDate":"2021-10-07"},{"lineNumber":65,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":66,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":67,"author":{"gitId":"xkisxk"},"content":"    public int getUserScore() {","lastModifiedDate":"2021-10-17"},{"lineNumber":68,"author":{"gitId":"xkisxk"},"content":"        return this.userScore;","lastModifiedDate":"2021-10-17"},{"lineNumber":69,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":70,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":71,"author":{"gitId":"xkisxk"},"content":"    public int getTotalScore() {","lastModifiedDate":"2021-10-17"},{"lineNumber":72,"author":{"gitId":"xkisxk"},"content":"        return this.totalScore;","lastModifiedDate":"2021-10-17"},{"lineNumber":73,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":74,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":75,"author":{"gitId":"xkisxk"},"content":"    public void incrementUserScore() {","lastModifiedDate":"2021-10-17"},{"lineNumber":76,"author":{"gitId":"xkisxk"},"content":"        logger.setLevel(Level.WARNING);","lastModifiedDate":"2021-10-17"},{"lineNumber":77,"author":{"gitId":"xkisxk"},"content":"        logger.log(Level.INFO, \"Incrementing flashcard user score\");","lastModifiedDate":"2021-10-17"},{"lineNumber":78,"author":{"gitId":"xkisxk"},"content":"        userScore++;","lastModifiedDate":"2021-10-17"},{"lineNumber":79,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":80,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":81,"author":{"gitId":"xkisxk"},"content":"    public void incrementTotalScore() {","lastModifiedDate":"2021-10-17"},{"lineNumber":82,"author":{"gitId":"xkisxk"},"content":"        logger.setLevel(Level.WARNING);","lastModifiedDate":"2021-10-17"},{"lineNumber":83,"author":{"gitId":"xkisxk"},"content":"        logger.log(Level.INFO, \"Incrementing flashcard total score\");","lastModifiedDate":"2021-10-17"},{"lineNumber":84,"author":{"gitId":"xkisxk"},"content":"        totalScore++;","lastModifiedDate":"2021-10-17"},{"lineNumber":85,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":86,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":87,"author":{"gitId":"xkisxk"},"content":"    public void viewFlashCard() {","lastModifiedDate":"2021-10-17"},{"lineNumber":88,"author":{"gitId":"xkisxk"},"content":"        System.out.println(\"*\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dFRONT\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d* \"","lastModifiedDate":"2021-10-17"},{"lineNumber":89,"author":{"gitId":"xkisxk"},"content":"                + \"*\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dBACK\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d*\");","lastModifiedDate":"2021-10-17"},{"lineNumber":90,"author":{"gitId":"xkisxk"},"content":"        System.out.println();","lastModifiedDate":"2021-10-17"},{"lineNumber":91,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":92,"author":{"gitId":"xkisxk"},"content":"        String front \u003d this.front;","lastModifiedDate":"2021-10-17"},{"lineNumber":93,"author":{"gitId":"xkisxk"},"content":"        String frontSpaces \u003d \"\";","lastModifiedDate":"2021-10-17"},{"lineNumber":94,"author":{"gitId":"xkisxk"},"content":"        for (int i \u003d 0; i \u003c (39 - front.length()) / 2; i++) {","lastModifiedDate":"2021-10-17"},{"lineNumber":95,"author":{"gitId":"xkisxk"},"content":"            frontSpaces +\u003d \" \";","lastModifiedDate":"2021-10-17"},{"lineNumber":96,"author":{"gitId":"xkisxk"},"content":"        }","lastModifiedDate":"2021-10-17"},{"lineNumber":97,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":98,"author":{"gitId":"xkisxk"},"content":"        String back \u003d this.back;","lastModifiedDate":"2021-10-17"},{"lineNumber":99,"author":{"gitId":"xkisxk"},"content":"        String backSpaces \u003d \"\";","lastModifiedDate":"2021-10-17"},{"lineNumber":100,"author":{"gitId":"xkisxk"},"content":"        for (int i \u003d 0; i \u003c (39 - back.length()) / 2; i++) {","lastModifiedDate":"2021-10-17"},{"lineNumber":101,"author":{"gitId":"xkisxk"},"content":"            backSpaces +\u003d \" \";","lastModifiedDate":"2021-10-17"},{"lineNumber":102,"author":{"gitId":"xkisxk"},"content":"        }","lastModifiedDate":"2021-10-17"},{"lineNumber":103,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":104,"author":{"gitId":"xkisxk"},"content":"        System.out.println(frontSpaces + front + frontSpaces + backSpaces + back);","lastModifiedDate":"2021-10-17"},{"lineNumber":105,"author":{"gitId":"xkisxk"},"content":"        System.out.println();","lastModifiedDate":"2021-10-17"},{"lineNumber":106,"author":{"gitId":"xkisxk"},"content":"        System.out.println(\"*\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d* \"","lastModifiedDate":"2021-10-17"},{"lineNumber":107,"author":{"gitId":"xkisxk"},"content":"                + \"*\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d*\");","lastModifiedDate":"2021-10-17"},{"lineNumber":108,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":109,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":110,"author":{"gitId":"ThaddeusLim99"},"content":"    public void setBack(String input) {","lastModifiedDate":"2021-10-17"},{"lineNumber":111,"author":{"gitId":"ThaddeusLim99"},"content":"        logger.setLevel(Level.WARNING);","lastModifiedDate":"2021-10-17"},{"lineNumber":112,"author":{"gitId":"ThaddeusLim99"},"content":"        assert this.back !\u003d null;","lastModifiedDate":"2021-10-17"},{"lineNumber":113,"author":{"gitId":"ThaddeusLim99"},"content":"        logger.log(Level.INFO, \"Getting card back: \" + back);","lastModifiedDate":"2021-10-17"},{"lineNumber":114,"author":{"gitId":"ThaddeusLim99"},"content":"        this.back \u003d input;","lastModifiedDate":"2021-10-17"},{"lineNumber":115,"author":{"gitId":"ThaddeusLim99"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":116,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":117,"author":{"gitId":"ThaddeusLim99"},"content":"    public void setFront(String input) {","lastModifiedDate":"2021-10-17"},{"lineNumber":118,"author":{"gitId":"ThaddeusLim99"},"content":"        logger.setLevel(Level.WARNING);","lastModifiedDate":"2021-10-17"},{"lineNumber":119,"author":{"gitId":"ThaddeusLim99"},"content":"        assert this.front !\u003d null;","lastModifiedDate":"2021-10-17"},{"lineNumber":120,"author":{"gitId":"ThaddeusLim99"},"content":"        logger.log(Level.INFO, \"Getting card front: \" + front);","lastModifiedDate":"2021-10-17"},{"lineNumber":121,"author":{"gitId":"ThaddeusLim99"},"content":"        this.front \u003d input;","lastModifiedDate":"2021-10-17"},{"lineNumber":122,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":123,"author":{"gitId":"ThaddeusLim99"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":124,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":125,"author":{"gitId":"xRossKoh"},"content":"    @Override","lastModifiedDate":"2021-10-18"},{"lineNumber":126,"author":{"gitId":"xRossKoh"},"content":"    public String toString() {","lastModifiedDate":"2021-10-18"},{"lineNumber":127,"author":{"gitId":"xRossKoh"},"content":"        return getFront() + SEPARATOR","lastModifiedDate":"2021-10-18"},{"lineNumber":128,"author":{"gitId":"xRossKoh"},"content":"                + getBack() + SEPARATOR","lastModifiedDate":"2021-10-18"},{"lineNumber":129,"author":{"gitId":"xRossKoh"},"content":"                + getUserScore() + SEPARATOR","lastModifiedDate":"2021-10-18"},{"lineNumber":130,"author":{"gitId":"xRossKoh"},"content":"                + getTotalScore() + \u0027\\n\u0027;","lastModifiedDate":"2021-10-18"},{"lineNumber":131,"author":{"gitId":"xRossKoh"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":132,"author":{"gitId":"JWweiyin"},"content":"}","lastModifiedDate":"2021-10-02"}],"authorContributionMap":{"JWweiyin":20,"ThaddeusLim99":19,"astralum":8,"xRossKoh":37,"xkisxk":48}},{"path":"src/main/java/seedu/duke/parser/Parser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"xkisxk"},"content":"package seedu.duke.parser;","lastModifiedDate":"2021-10-16"},{"lineNumber":2,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":3,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":4,"author":{"gitId":"xRossKoh"},"content":"import seedu.duke.flashcard.DeckManager;","lastModifiedDate":"2021-10-18"},{"lineNumber":5,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":6,"author":{"gitId":"xkisxk"},"content":"import seedu.duke.testing.TestHistory;","lastModifiedDate":"2021-10-17"},{"lineNumber":7,"author":{"gitId":"xkisxk"},"content":"import seedu.duke.testing.TestManager;","lastModifiedDate":"2021-10-17"},{"lineNumber":8,"author":{"gitId":"ThaddeusLim99"},"content":"import seedu.duke.exceptions.CardLiException;","lastModifiedDate":"2021-10-17"},{"lineNumber":9,"author":{"gitId":"ThaddeusLim99"},"content":"import seedu.duke.exceptions.DeckNotExistException;","lastModifiedDate":"2021-10-17"},{"lineNumber":10,"author":{"gitId":"ThaddeusLim99"},"content":"import seedu.duke.exceptions.FieldEmptyException;","lastModifiedDate":"2021-10-17"},{"lineNumber":11,"author":{"gitId":"ThaddeusLim99"},"content":"import seedu.duke.exceptions.InvalidCommandFormatException;","lastModifiedDate":"2021-10-17"},{"lineNumber":12,"author":{"gitId":"ThaddeusLim99"},"content":"import seedu.duke.ui.CardLiUi;","lastModifiedDate":"2021-10-18"},{"lineNumber":13,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":14,"author":{"gitId":"xkisxk"},"content":"import java.util.logging.Level;","lastModifiedDate":"2021-10-16"},{"lineNumber":15,"author":{"gitId":"xkisxk"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-10-16"},{"lineNumber":16,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":17,"author":{"gitId":"xkisxk"},"content":"/**","lastModifiedDate":"2021-10-16"},{"lineNumber":18,"author":{"gitId":"xkisxk"},"content":" * Deals with the parsing of user input at the command line.","lastModifiedDate":"2021-10-16"},{"lineNumber":19,"author":{"gitId":"xkisxk"},"content":" */","lastModifiedDate":"2021-10-16"},{"lineNumber":20,"author":{"gitId":"xkisxk"},"content":"public class Parser {","lastModifiedDate":"2021-10-16"},{"lineNumber":21,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":22,"author":{"gitId":"xkisxk"},"content":"    private static final Logger logger \u003d Logger.getLogger(Parser.class.getName());","lastModifiedDate":"2021-10-16"},{"lineNumber":23,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":24,"author":{"gitId":"JWweiyin"},"content":"    public static int getCurrDeck() {","lastModifiedDate":"2021-10-20"},{"lineNumber":25,"author":{"gitId":"JWweiyin"},"content":"        return currDeck;","lastModifiedDate":"2021-10-20"},{"lineNumber":26,"author":{"gitId":"JWweiyin"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":27,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":28,"author":{"gitId":"JWweiyin"},"content":"    private static int currDeck;","lastModifiedDate":"2021-10-19"},{"lineNumber":29,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":30,"author":{"gitId":"xkisxk"},"content":"    /**","lastModifiedDate":"2021-10-16"},{"lineNumber":31,"author":{"gitId":"xkisxk"},"content":"     * Parses user input at the command line and invokes the necessary follow up actions.","lastModifiedDate":"2021-10-16"},{"lineNumber":32,"author":{"gitId":"xkisxk"},"content":"     */","lastModifiedDate":"2021-10-16"},{"lineNumber":33,"author":{"gitId":"ThaddeusLim99"},"content":"    public static void parseCommand(String input) throws CardLiException {","lastModifiedDate":"2021-10-17"},{"lineNumber":34,"author":{"gitId":"xkisxk"},"content":"        logger.setLevel(Level.WARNING);","lastModifiedDate":"2021-10-16"},{"lineNumber":35,"author":{"gitId":"xRossKoh"},"content":"        logger.log(Level.INFO, \"new user input detected\");","lastModifiedDate":"2021-10-18"},{"lineNumber":36,"author":{"gitId":"xkisxk"},"content":"        String command \u003d getCommand(input);","lastModifiedDate":"2021-10-16"},{"lineNumber":37,"author":{"gitId":"xkisxk"},"content":"        logger.log(Level.INFO, \"new user input detected\");","lastModifiedDate":"2021-10-16"},{"lineNumber":38,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":39,"author":{"gitId":"xkisxk"},"content":"        switch (command) {","lastModifiedDate":"2021-10-16"},{"lineNumber":40,"author":{"gitId":"JWweiyin"},"content":"        case \"enter\":","lastModifiedDate":"2021-10-19"},{"lineNumber":41,"author":{"gitId":"JWweiyin"},"content":"            String enterInput \u003d removeCommandWord(input, command.length());","lastModifiedDate":"2021-10-19"},{"lineNumber":42,"author":{"gitId":"JWweiyin"},"content":"            setCurrentDeck(enterInput);","lastModifiedDate":"2021-10-19"},{"lineNumber":43,"author":{"gitId":"JWweiyin"},"content":"            System.out.println(\"You are now in deck \" + enterInput + \". Type \\\"help\\\"for more commands.\");","lastModifiedDate":"2021-10-20"},{"lineNumber":44,"author":{"gitId":"xkisxk"},"content":"            break;","lastModifiedDate":"2021-10-16"},{"lineNumber":45,"author":{"gitId":"xkisxk"},"content":"        case \"adddeck\":","lastModifiedDate":"2021-10-17"},{"lineNumber":46,"author":{"gitId":"xkisxk"},"content":"            String addDeckInput \u003d removeCommandWord(input, command.length());","lastModifiedDate":"2021-10-17"},{"lineNumber":47,"author":{"gitId":"xRossKoh"},"content":"            DeckManager.prepareToAddDeck(addDeckInput);","lastModifiedDate":"2021-10-18"},{"lineNumber":48,"author":{"gitId":"xkisxk"},"content":"            break;","lastModifiedDate":"2021-10-16"},{"lineNumber":49,"author":{"gitId":"xRossKoh"},"content":"        case \"viewdecks\":","lastModifiedDate":"2021-10-18"},{"lineNumber":50,"author":{"gitId":"xRossKoh"},"content":"            DeckManager.viewDecks();","lastModifiedDate":"2021-10-18"},{"lineNumber":51,"author":{"gitId":"xkisxk"},"content":"            break;","lastModifiedDate":"2021-10-16"},{"lineNumber":52,"author":{"gitId":"xRossKoh"},"content":"        case \"viewdeck\":","lastModifiedDate":"2021-10-18"},{"lineNumber":53,"author":{"gitId":"xkisxk"},"content":"            String viewInput \u003d removeCommandWord(input, command.length());","lastModifiedDate":"2021-10-17"},{"lineNumber":54,"author":{"gitId":"xRossKoh"},"content":"            DeckManager.viewOneDeck(viewInput);","lastModifiedDate":"2021-10-18"},{"lineNumber":55,"author":{"gitId":"xkisxk"},"content":"            logger.log(Level.INFO, \"view command parsed and executed\");","lastModifiedDate":"2021-10-16"},{"lineNumber":56,"author":{"gitId":"xkisxk"},"content":"            break;","lastModifiedDate":"2021-10-16"},{"lineNumber":57,"author":{"gitId":"JWweiyin"},"content":"        case \"test\": //TODO: restructure into deck level","lastModifiedDate":"2021-10-20"},{"lineNumber":58,"author":{"gitId":"xkisxk"},"content":"            TestManager.startTest();","lastModifiedDate":"2021-10-17"},{"lineNumber":59,"author":{"gitId":"xkisxk"},"content":"            logger.log(Level.INFO, \"test command parsed and executed\");","lastModifiedDate":"2021-10-16"},{"lineNumber":60,"author":{"gitId":"xkisxk"},"content":"            break;","lastModifiedDate":"2021-10-16"},{"lineNumber":61,"author":{"gitId":"JWweiyin"},"content":"        case \"viewtest\": //TODO: percentage wrong, change name","lastModifiedDate":"2021-10-20"},{"lineNumber":62,"author":{"gitId":"xkisxk"},"content":"            String viewTestInput \u003d removeCommandWord(input, command.length());","lastModifiedDate":"2021-10-18"},{"lineNumber":63,"author":{"gitId":"xkisxk"},"content":"            TestHistory.prepareToViewTest(viewTestInput);","lastModifiedDate":"2021-10-18"},{"lineNumber":64,"author":{"gitId":"xkisxk"},"content":"            logger.log(Level.INFO, \"viewtest command parsed and executed\");","lastModifiedDate":"2021-10-18"},{"lineNumber":65,"author":{"gitId":"xkisxk"},"content":"            break;","lastModifiedDate":"2021-10-17"},{"lineNumber":66,"author":{"gitId":"JWweiyin"},"content":"        case \"viewtests\": //TODO: save the results","lastModifiedDate":"2021-10-20"},{"lineNumber":67,"author":{"gitId":"xkisxk"},"content":"            TestHistory.viewTests();","lastModifiedDate":"2021-10-17"},{"lineNumber":68,"author":{"gitId":"xkisxk"},"content":"            logger.log(Level.INFO, \"viewtests command parsed and executed\");","lastModifiedDate":"2021-10-17"},{"lineNumber":69,"author":{"gitId":"xkisxk"},"content":"            break;","lastModifiedDate":"2021-10-17"},{"lineNumber":70,"author":{"gitId":"JWweiyin"},"content":"        case \"viewfc\": //TODO: make it part of view flashcards in deck instead","lastModifiedDate":"2021-10-20"},{"lineNumber":71,"author":{"gitId":"xkisxk"},"content":"            TestHistory.viewOverallFlashcardStats();","lastModifiedDate":"2021-10-17"},{"lineNumber":72,"author":{"gitId":"xkisxk"},"content":"            logger.log(Level.INFO, \"viewfc command parsed and executed\");","lastModifiedDate":"2021-10-17"},{"lineNumber":73,"author":{"gitId":"xkisxk"},"content":"            break;","lastModifiedDate":"2021-10-17"},{"lineNumber":74,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":75,"author":{"gitId":"JWweiyin"},"content":"        case \"review\": //TODO: restructure into deck level","lastModifiedDate":"2021-10-20"},{"lineNumber":76,"author":{"gitId":"xkisxk"},"content":"            TestManager.startReview();","lastModifiedDate":"2021-10-18"},{"lineNumber":77,"author":{"gitId":"xkisxk"},"content":"            logger.log(Level.INFO, \"review command parsed and executed\");","lastModifiedDate":"2021-10-18"},{"lineNumber":78,"author":{"gitId":"xkisxk"},"content":"            break;","lastModifiedDate":"2021-10-19"},{"lineNumber":79,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":80,"author":{"gitId":"ThaddeusLim99"},"content":"        case \"editdeck\": //editdeck /deck \u003ccat index\u003e /input \u003cinput\u003e","lastModifiedDate":"2021-10-17"},{"lineNumber":81,"author":{"gitId":"ThaddeusLim99"},"content":"            String editCatInput \u003d removeCommandWord(input, command.length());","lastModifiedDate":"2021-10-17"},{"lineNumber":82,"author":{"gitId":"ThaddeusLim99"},"content":"            String[] parsedEditCatArgs \u003d parseEditDeckCommand(editCatInput);","lastModifiedDate":"2021-10-17"},{"lineNumber":83,"author":{"gitId":"ThaddeusLim99"},"content":"            DeckManager.editDeck(parsedEditCatArgs);","lastModifiedDate":"2021-10-21"},{"lineNumber":84,"author":{"gitId":"ThaddeusLim99"},"content":"            logger.log(Level.INFO, \"editdeck command parsed and executed\");","lastModifiedDate":"2021-10-17"},{"lineNumber":85,"author":{"gitId":"ThaddeusLim99"},"content":"            break;","lastModifiedDate":"2021-10-17"},{"lineNumber":86,"author":{"gitId":"ThaddeusLim99"},"content":"        case \"help\":","lastModifiedDate":"2021-10-18"},{"lineNumber":87,"author":{"gitId":"ThaddeusLim99"},"content":"            CardLiUi.helpMessage();","lastModifiedDate":"2021-10-18"},{"lineNumber":88,"author":{"gitId":"ThaddeusLim99"},"content":"            logger.log(Level.INFO, \"editdeck command parsed and executed\");","lastModifiedDate":"2021-10-18"},{"lineNumber":89,"author":{"gitId":"xkisxk"},"content":"            break;","lastModifiedDate":"2021-10-18"},{"lineNumber":90,"author":{"gitId":"xkisxk"},"content":"        case \"bye\":","lastModifiedDate":"2021-10-16"},{"lineNumber":91,"author":{"gitId":"JWweiyin"},"content":"            DeckManager.saveToFile(); //TODO: maybe implement other autosaves","lastModifiedDate":"2021-10-20"},{"lineNumber":92,"author":{"gitId":"xRossKoh"},"content":"            logger.log(Level.INFO, \"current list of decks and flashcards saved to text file\");","lastModifiedDate":"2021-10-18"},{"lineNumber":93,"author":{"gitId":"xkisxk"},"content":"            logger.log(Level.INFO, \"bye command parsed and executed, program will terminate\");","lastModifiedDate":"2021-10-16"},{"lineNumber":94,"author":{"gitId":"xkisxk"},"content":"            break;","lastModifiedDate":"2021-10-16"},{"lineNumber":95,"author":{"gitId":"xkisxk"},"content":"        default:","lastModifiedDate":"2021-10-16"},{"lineNumber":96,"author":{"gitId":"xkisxk"},"content":"            System.out.println(\"\\tThat\u0027s not a command.\");","lastModifiedDate":"2021-10-16"},{"lineNumber":97,"author":{"gitId":"xkisxk"},"content":"            logger.log(Level.INFO, \"command was unrecognised and could not be parsed\");","lastModifiedDate":"2021-10-16"},{"lineNumber":98,"author":{"gitId":"xkisxk"},"content":"        }","lastModifiedDate":"2021-10-16"},{"lineNumber":99,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-16"},{"lineNumber":100,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":101,"author":{"gitId":"JWweiyin"},"content":"    public static void setCurrentDeck(String input) {","lastModifiedDate":"2021-10-19"},{"lineNumber":102,"author":{"gitId":"JWweiyin"},"content":"        try {","lastModifiedDate":"2021-10-19"},{"lineNumber":103,"author":{"gitId":"JWweiyin"},"content":"            int inputString \u003d Integer.parseInt(input) - 1;","lastModifiedDate":"2021-10-19"},{"lineNumber":104,"author":{"gitId":"JWweiyin"},"content":"            if (inputString \u003e\u003d 0 \u0026\u0026 inputString \u003c DeckManager.getDecks().size()) {","lastModifiedDate":"2021-10-20"},{"lineNumber":105,"author":{"gitId":"JWweiyin"},"content":"                currDeck \u003d inputString;","lastModifiedDate":"2021-10-19"},{"lineNumber":106,"author":{"gitId":"JWweiyin"},"content":"            } else {","lastModifiedDate":"2021-10-19"},{"lineNumber":107,"author":{"gitId":"JWweiyin"},"content":"                throw new DeckNotExistException();","lastModifiedDate":"2021-10-19"},{"lineNumber":108,"author":{"gitId":"JWweiyin"},"content":"            }","lastModifiedDate":"2021-10-19"},{"lineNumber":109,"author":{"gitId":"JWweiyin"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2021-10-19"},{"lineNumber":110,"author":{"gitId":"JWweiyin"},"content":"            System.out.println(\"The deck index has to be an integer\");","lastModifiedDate":"2021-10-19"},{"lineNumber":111,"author":{"gitId":"JWweiyin"},"content":"        } catch (DeckNotExistException e) {","lastModifiedDate":"2021-10-19"},{"lineNumber":112,"author":{"gitId":"JWweiyin"},"content":"            System.out.println(\"That deck doesn\u0027t exist.\");","lastModifiedDate":"2021-10-19"},{"lineNumber":113,"author":{"gitId":"JWweiyin"},"content":"        }","lastModifiedDate":"2021-10-19"},{"lineNumber":114,"author":{"gitId":"JWweiyin"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":115,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":116,"author":{"gitId":"JWweiyin"},"content":"    //TODO: make the rest of the functions work","lastModifiedDate":"2021-10-20"},{"lineNumber":117,"author":{"gitId":"JWweiyin"},"content":"    public static void parseCommandWithinDeck(String input) throws CardLiException {","lastModifiedDate":"2021-10-19"},{"lineNumber":118,"author":{"gitId":"JWweiyin"},"content":"        String command \u003d getCommand(input);","lastModifiedDate":"2021-10-19"},{"lineNumber":119,"author":{"gitId":"JWweiyin"},"content":"        switch (command) {","lastModifiedDate":"2021-10-19"},{"lineNumber":120,"author":{"gitId":"JWweiyin"},"content":"        case \"add\": //add /fro \u003cfront\u003e /bac \u003cback\u003e","lastModifiedDate":"2021-10-19"},{"lineNumber":121,"author":{"gitId":"JWweiyin"},"content":"            String addInput \u003d removeCommandWord(input, command.length());","lastModifiedDate":"2021-10-19"},{"lineNumber":122,"author":{"gitId":"JWweiyin"},"content":"            String[] frontAndBack \u003d parseAddCardCommand(addInput);","lastModifiedDate":"2021-10-19"},{"lineNumber":123,"author":{"gitId":"JWweiyin"},"content":"            DeckManager.getDecks().get(currDeck).prepareToAddFlashCard(frontAndBack);","lastModifiedDate":"2021-10-20"},{"lineNumber":124,"author":{"gitId":"JWweiyin"},"content":"            logger.log(Level.INFO, \"add command parsed and executed\");","lastModifiedDate":"2021-10-19"},{"lineNumber":125,"author":{"gitId":"JWweiyin"},"content":"            break;","lastModifiedDate":"2021-10-19"},{"lineNumber":126,"author":{"gitId":"JWweiyin"},"content":"        case \"delete\": //delete \u003cindex/front\u003e","lastModifiedDate":"2021-10-19"},{"lineNumber":127,"author":{"gitId":"JWweiyin"},"content":"            String deleteInput \u003d removeCommandWord(input, command.length());","lastModifiedDate":"2021-10-19"},{"lineNumber":128,"author":{"gitId":"JWweiyin"},"content":"            DeckManager.getDecks().get(currDeck).prepareToDeleteFlashCard(deleteInput);","lastModifiedDate":"2021-10-20"},{"lineNumber":129,"author":{"gitId":"JWweiyin"},"content":"            logger.log(Level.INFO, \"delete command parsed and executed\");","lastModifiedDate":"2021-10-19"},{"lineNumber":130,"author":{"gitId":"JWweiyin"},"content":"            break;","lastModifiedDate":"2021-10-19"},{"lineNumber":131,"author":{"gitId":"JWweiyin"},"content":"        case \"edit\": //edit /card \u003ccard index\u003e /side \u003cside\u003e /input \u003cinput\u003e","lastModifiedDate":"2021-10-20"},{"lineNumber":132,"author":{"gitId":"JWweiyin"},"content":"            String editCardInput \u003d removeCommandWord(input, command.length());","lastModifiedDate":"2021-10-19"},{"lineNumber":133,"author":{"gitId":"JWweiyin"},"content":"            String[] parsedEditCardArgs \u003d parseEditCardCommand(editCardInput);","lastModifiedDate":"2021-10-19"},{"lineNumber":134,"author":{"gitId":"JWweiyin"},"content":"            DeckManager.getDecks().get(currDeck).editCard(parsedEditCardArgs);","lastModifiedDate":"2021-10-20"},{"lineNumber":135,"author":{"gitId":"JWweiyin"},"content":"            logger.log(Level.INFO, \"editcard command parsed and executed\");","lastModifiedDate":"2021-10-19"},{"lineNumber":136,"author":{"gitId":"JWweiyin"},"content":"            break;","lastModifiedDate":"2021-10-19"},{"lineNumber":137,"author":{"gitId":"JWweiyin"},"content":"        case \"view\": //view","lastModifiedDate":"2021-10-20"},{"lineNumber":138,"author":{"gitId":"JWweiyin"},"content":"            DeckManager.getDecks().get(currDeck).viewAllFlashCards();","lastModifiedDate":"2021-10-20"},{"lineNumber":139,"author":{"gitId":"JWweiyin"},"content":"            break;","lastModifiedDate":"2021-10-20"},{"lineNumber":140,"author":{"gitId":"JWweiyin"},"content":"        case \"help\": //help","lastModifiedDate":"2021-10-20"},{"lineNumber":141,"author":{"gitId":"JWweiyin"},"content":"            CardLiUi.helpInDeck();","lastModifiedDate":"2021-10-20"},{"lineNumber":142,"author":{"gitId":"JWweiyin"},"content":"            break;","lastModifiedDate":"2021-10-20"},{"lineNumber":143,"author":{"gitId":"JWweiyin"},"content":"        case \"exit\":","lastModifiedDate":"2021-10-19"},{"lineNumber":144,"author":{"gitId":"JWweiyin"},"content":"            System.out.println(\"Exiting to main menu.\");","lastModifiedDate":"2021-10-20"},{"lineNumber":145,"author":{"gitId":"JWweiyin"},"content":"            break;","lastModifiedDate":"2021-10-20"},{"lineNumber":146,"author":{"gitId":"JWweiyin"},"content":"        default:","lastModifiedDate":"2021-10-20"},{"lineNumber":147,"author":{"gitId":"JWweiyin"},"content":"            System.out.println(\"\\tThat\u0027s not a command.\");","lastModifiedDate":"2021-10-20"},{"lineNumber":148,"author":{"gitId":"JWweiyin"},"content":"            logger.log(Level.INFO, \"command was unrecognised and could not be parsed\");","lastModifiedDate":"2021-10-20"},{"lineNumber":149,"author":{"gitId":"JWweiyin"},"content":"            break;","lastModifiedDate":"2021-10-20"},{"lineNumber":150,"author":{"gitId":"JWweiyin"},"content":"        }","lastModifiedDate":"2021-10-19"},{"lineNumber":151,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":152,"author":{"gitId":"JWweiyin"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":153,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":154,"author":{"gitId":"xkisxk"},"content":"    public static String getCommand(String line) {","lastModifiedDate":"2021-10-16"},{"lineNumber":155,"author":{"gitId":"xkisxk"},"content":"        return line.trim().split(\" \")[0].toLowerCase();","lastModifiedDate":"2021-10-17"},{"lineNumber":156,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-16"},{"lineNumber":157,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":158,"author":{"gitId":"xkisxk"},"content":"    /**","lastModifiedDate":"2021-10-16"},{"lineNumber":159,"author":{"gitId":"xkisxk"},"content":"     * Returns all contents of the input after the command word.","lastModifiedDate":"2021-10-16"},{"lineNumber":160,"author":{"gitId":"xkisxk"},"content":"     *","lastModifiedDate":"2021-10-16"},{"lineNumber":161,"author":{"gitId":"xkisxk"},"content":"     * @param input user\u0027s input","lastModifiedDate":"2021-10-16"},{"lineNumber":162,"author":{"gitId":"xkisxk"},"content":"     * @return description of card","lastModifiedDate":"2021-10-16"},{"lineNumber":163,"author":{"gitId":"xkisxk"},"content":"     */","lastModifiedDate":"2021-10-16"},{"lineNumber":164,"author":{"gitId":"xkisxk"},"content":"    public static String removeCommandWord(String input, int index) {","lastModifiedDate":"2021-10-16"},{"lineNumber":165,"author":{"gitId":"xkisxk"},"content":"        assert input.length() \u003e 0 : \"input string should not be empty, at least have command word\";","lastModifiedDate":"2021-10-17"},{"lineNumber":166,"author":{"gitId":"xkisxk"},"content":"        return input.substring(index).trim();","lastModifiedDate":"2021-10-16"},{"lineNumber":167,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-16"},{"lineNumber":168,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":169,"author":{"gitId":"ThaddeusLim99"},"content":"    /**","lastModifiedDate":"2021-10-17"},{"lineNumber":170,"author":{"gitId":"JWweiyin"},"content":"     * Returns the parsed contents after the command word for the edit function.","lastModifiedDate":"2021-10-19"},{"lineNumber":171,"author":{"gitId":"ThaddeusLim99"},"content":"     *","lastModifiedDate":"2021-10-17"},{"lineNumber":172,"author":{"gitId":"ThaddeusLim99"},"content":"     * @param input user\u0027s input","lastModifiedDate":"2021-10-17"},{"lineNumber":173,"author":{"gitId":"JWweiyin"},"content":"     * @return a String array containing the most important information (Card index, side to change, what to change)","lastModifiedDate":"2021-10-20"},{"lineNumber":174,"author":{"gitId":"ThaddeusLim99"},"content":"     * @throw FieldEmptyException, InvalidCommandFormatException, DeckNotExistException, CardLiException","lastModifiedDate":"2021-10-17"},{"lineNumber":175,"author":{"gitId":"ThaddeusLim99"},"content":"     */","lastModifiedDate":"2021-10-17"},{"lineNumber":176,"author":{"gitId":"ThaddeusLim99"},"content":"    public static String[] parseEditCardCommand(String input) throws CardLiException {","lastModifiedDate":"2021-10-17"},{"lineNumber":177,"author":{"gitId":"ThaddeusLim99"},"content":"        logger.setLevel(Level.WARNING);","lastModifiedDate":"2021-10-17"},{"lineNumber":178,"author":{"gitId":"ThaddeusLim99"},"content":"        if (input.isEmpty()) {","lastModifiedDate":"2021-10-17"},{"lineNumber":179,"author":{"gitId":"ThaddeusLim99"},"content":"            throw new FieldEmptyException(\"You cannot leave any field empty! Format should be\\n\"","lastModifiedDate":"2021-10-17"},{"lineNumber":180,"author":{"gitId":"JWweiyin"},"content":"                    + \"editcard /card \u003ccard index\u003e /side \u003cside\u003e /input \u003cinput\u003e\");","lastModifiedDate":"2021-10-20"},{"lineNumber":181,"author":{"gitId":"ThaddeusLim99"},"content":"        }","lastModifiedDate":"2021-10-17"},{"lineNumber":182,"author":{"gitId":"ThaddeusLim99"},"content":"        logger.log(Level.INFO, \"splitting input\");","lastModifiedDate":"2021-10-17"},{"lineNumber":183,"author":{"gitId":"ThaddeusLim99"},"content":"        String trimmedInput \u003d input.trim();","lastModifiedDate":"2021-10-17"},{"lineNumber":184,"author":{"gitId":"JWweiyin"},"content":"        String[] args \u003d trimmedInput.split(\" \", 6);","lastModifiedDate":"2021-10-20"},{"lineNumber":185,"author":{"gitId":"ThaddeusLim99"},"content":"        logger.log(Level.INFO, \"checking if there are enough arguments\");","lastModifiedDate":"2021-10-17"},{"lineNumber":186,"author":{"gitId":"JWweiyin"},"content":"        if (args.length !\u003d 6) {","lastModifiedDate":"2021-10-20"},{"lineNumber":187,"author":{"gitId":"ThaddeusLim99"},"content":"            throw new FieldEmptyException(\"You cannot leave the entire field empty! Format should be\\n\"","lastModifiedDate":"2021-10-17"},{"lineNumber":188,"author":{"gitId":"JWweiyin"},"content":"                    + \"editcard /card \u003ccard index\u003e /side \u003cside\u003e /input \u003cinput\u003e\");","lastModifiedDate":"2021-10-20"},{"lineNumber":189,"author":{"gitId":"ThaddeusLim99"},"content":"        }","lastModifiedDate":"2021-10-17"},{"lineNumber":190,"author":{"gitId":"ThaddeusLim99"},"content":"        logger.log(Level.INFO, \"checking if command keywords used are correct\");","lastModifiedDate":"2021-10-17"},{"lineNumber":191,"author":{"gitId":"JWweiyin"},"content":"        if (!args[0].equalsIgnoreCase(\"/card\")","lastModifiedDate":"2021-10-20"},{"lineNumber":192,"author":{"gitId":"JWweiyin"},"content":"                | !args[2].equalsIgnoreCase(\"/side\") | !args[4].equalsIgnoreCase(\"/input\")) {","lastModifiedDate":"2021-10-20"},{"lineNumber":193,"author":{"gitId":"ThaddeusLim99"},"content":"            throw new InvalidCommandFormatException(\"Incorrect editcard command! Format should be\\n\"","lastModifiedDate":"2021-10-17"},{"lineNumber":194,"author":{"gitId":"JWweiyin"},"content":"                    + \"editcard /card \u003ccard index\u003e /side \u003cside\u003e /input \u003cinput\u003e\");","lastModifiedDate":"2021-10-20"},{"lineNumber":195,"author":{"gitId":"ThaddeusLim99"},"content":"        }","lastModifiedDate":"2021-10-17"},{"lineNumber":196,"author":{"gitId":"JWweiyin"},"content":"        int cardIndex \u003d Integer.parseInt(args[1]) - 1;","lastModifiedDate":"2021-10-20"},{"lineNumber":197,"author":{"gitId":"ThaddeusLim99"},"content":"        logger.log(Level.INFO, \"checking if deck index and card index are not out of bounds\");","lastModifiedDate":"2021-10-17"},{"lineNumber":198,"author":{"gitId":"JWweiyin"},"content":"        //TODO: make sure this works","lastModifiedDate":"2021-10-20"},{"lineNumber":199,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":200,"author":{"gitId":"JWweiyin"},"content":"        if (!(cardIndex \u003e\u003d 0 \u0026\u0026 cardIndex \u003c\u003d DeckManager.getDeck(currDeck).getCards().size())) {","lastModifiedDate":"2021-10-21"},{"lineNumber":201,"author":{"gitId":"ThaddeusLim99"},"content":"            throw new CardLiException(\"Incorrect index for Card!\");","lastModifiedDate":"2021-10-17"},{"lineNumber":202,"author":{"gitId":"ThaddeusLim99"},"content":"        }","lastModifiedDate":"2021-10-17"},{"lineNumber":203,"author":{"gitId":"ThaddeusLim99"},"content":"        logger.log(Level.INFO, \"checking if user inputted a correct side\");","lastModifiedDate":"2021-10-17"},{"lineNumber":204,"author":{"gitId":"JWweiyin"},"content":"        if (!(args[3].equalsIgnoreCase(\"front\") | args[3].equalsIgnoreCase(\"back\"))) {","lastModifiedDate":"2021-10-20"},{"lineNumber":205,"author":{"gitId":"ThaddeusLim99"},"content":"            throw new CardLiException(\"What side is this? Its only either front or back\");","lastModifiedDate":"2021-10-17"},{"lineNumber":206,"author":{"gitId":"ThaddeusLim99"},"content":"        }","lastModifiedDate":"2021-10-17"},{"lineNumber":207,"author":{"gitId":"JWweiyin"},"content":"        String[] editArgs \u003d {args[1], args[3], args[5]};","lastModifiedDate":"2021-10-20"},{"lineNumber":208,"author":{"gitId":"ThaddeusLim99"},"content":"        return editArgs;","lastModifiedDate":"2021-10-17"},{"lineNumber":209,"author":{"gitId":"ThaddeusLim99"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":210,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":211,"author":{"gitId":"JWweiyin"},"content":"    public static String[] parseAddCardCommand(String input) throws CardLiException {","lastModifiedDate":"2021-10-19"},{"lineNumber":212,"author":{"gitId":"JWweiyin"},"content":"        logger.setLevel(Level.WARNING);","lastModifiedDate":"2021-10-19"},{"lineNumber":213,"author":{"gitId":"JWweiyin"},"content":"        if (input.isEmpty()) {","lastModifiedDate":"2021-10-19"},{"lineNumber":214,"author":{"gitId":"JWweiyin"},"content":"            throw new FieldEmptyException(\"You cannot leave any field empty! Format should be\\n\"","lastModifiedDate":"2021-10-19"},{"lineNumber":215,"author":{"gitId":"JWweiyin"},"content":"                    + \"add /fro \u003cwords on front\u003e /bac \u003cwords on back\u003e\");","lastModifiedDate":"2021-10-19"},{"lineNumber":216,"author":{"gitId":"JWweiyin"},"content":"        }","lastModifiedDate":"2021-10-19"},{"lineNumber":217,"author":{"gitId":"JWweiyin"},"content":"        logger.log(Level.INFO, \"splitting input\");","lastModifiedDate":"2021-10-19"},{"lineNumber":218,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":219,"author":{"gitId":"JWweiyin"},"content":"        int froIndex \u003d input.indexOf(\"/fro\");","lastModifiedDate":"2021-10-19"},{"lineNumber":220,"author":{"gitId":"JWweiyin"},"content":"        int bacIndex \u003d input.indexOf(\"/bac\");","lastModifiedDate":"2021-10-19"},{"lineNumber":221,"author":{"gitId":"JWweiyin"},"content":"        if (bacIndex - froIndex \u003c 5) {","lastModifiedDate":"2021-10-19"},{"lineNumber":222,"author":{"gitId":"JWweiyin"},"content":"            throw new FieldEmptyException(\"You cannot leave the entire field empty! Format should be\\n\"","lastModifiedDate":"2021-10-19"},{"lineNumber":223,"author":{"gitId":"JWweiyin"},"content":"                    + \"add /fro \u003cwords on front\u003e /bac \u003cwords on back\u003e\");","lastModifiedDate":"2021-10-19"},{"lineNumber":224,"author":{"gitId":"JWweiyin"},"content":"        }","lastModifiedDate":"2021-10-19"},{"lineNumber":225,"author":{"gitId":"JWweiyin"},"content":"        String[] args \u003d new String[2];","lastModifiedDate":"2021-10-19"},{"lineNumber":226,"author":{"gitId":"JWweiyin"},"content":"        args[0] \u003d input.substring(froIndex + 4, bacIndex).trim();","lastModifiedDate":"2021-10-19"},{"lineNumber":227,"author":{"gitId":"JWweiyin"},"content":"        args[1] \u003d input.substring(bacIndex + 4).trim();","lastModifiedDate":"2021-10-19"},{"lineNumber":228,"author":{"gitId":"JWweiyin"},"content":"        logger.log(Level.INFO, \"checking if there are enough arguments\");","lastModifiedDate":"2021-10-19"},{"lineNumber":229,"author":{"gitId":"JWweiyin"},"content":"        if (args[0].isEmpty() || args[1].isEmpty()) {","lastModifiedDate":"2021-10-19"},{"lineNumber":230,"author":{"gitId":"JWweiyin"},"content":"            throw new FieldEmptyException(\"You cannot leave the entire field empty! Format should be\\n\"","lastModifiedDate":"2021-10-19"},{"lineNumber":231,"author":{"gitId":"JWweiyin"},"content":"                    + \"add /fro \u003cwords on front\u003e /bac \u003cwords on back\u003e\");","lastModifiedDate":"2021-10-19"},{"lineNumber":232,"author":{"gitId":"JWweiyin"},"content":"        }","lastModifiedDate":"2021-10-19"},{"lineNumber":233,"author":{"gitId":"JWweiyin"},"content":"        return args;","lastModifiedDate":"2021-10-19"},{"lineNumber":234,"author":{"gitId":"JWweiyin"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":235,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":236,"author":{"gitId":"ThaddeusLim99"},"content":"    /**","lastModifiedDate":"2021-10-17"},{"lineNumber":237,"author":{"gitId":"ThaddeusLim99"},"content":"     * Returns the parsed contents after the command word.","lastModifiedDate":"2021-10-17"},{"lineNumber":238,"author":{"gitId":"ThaddeusLim99"},"content":"     *","lastModifiedDate":"2021-10-17"},{"lineNumber":239,"author":{"gitId":"ThaddeusLim99"},"content":"     * @param input user\u0027s input","lastModifiedDate":"2021-10-17"},{"lineNumber":240,"author":{"gitId":"ThaddeusLim99"},"content":"     * @return a String array containing the most important information (Deck index, what to change)","lastModifiedDate":"2021-10-17"},{"lineNumber":241,"author":{"gitId":"JWweiyin"},"content":"     * @throw FieldEmptyException, InvalidCommandFormatException, DeckNotExistException","lastModifiedDate":"2021-10-20"},{"lineNumber":242,"author":{"gitId":"ThaddeusLim99"},"content":"     */","lastModifiedDate":"2021-10-17"},{"lineNumber":243,"author":{"gitId":"ThaddeusLim99"},"content":"    public static String[] parseEditDeckCommand(String input) throws CardLiException {","lastModifiedDate":"2021-10-17"},{"lineNumber":244,"author":{"gitId":"ThaddeusLim99"},"content":"        logger.setLevel(Level.WARNING);","lastModifiedDate":"2021-10-17"},{"lineNumber":245,"author":{"gitId":"ThaddeusLim99"},"content":"        if (input.isEmpty()) {","lastModifiedDate":"2021-10-17"},{"lineNumber":246,"author":{"gitId":"ThaddeusLim99"},"content":"            throw new FieldEmptyException(\"You cannot leave the entire field empty! Format should be\\n\"","lastModifiedDate":"2021-10-17"},{"lineNumber":247,"author":{"gitId":"ThaddeusLim99"},"content":"                    + \"editdeck /deck \u003cdeck index\u003e /input \u003cinput\u003e\");","lastModifiedDate":"2021-10-17"},{"lineNumber":248,"author":{"gitId":"ThaddeusLim99"},"content":"        }","lastModifiedDate":"2021-10-17"},{"lineNumber":249,"author":{"gitId":"ThaddeusLim99"},"content":"        String trimmedInput \u003d input.trim();","lastModifiedDate":"2021-10-17"},{"lineNumber":250,"author":{"gitId":"ThaddeusLim99"},"content":"        String[] args \u003d trimmedInput.split(\" \", 4);","lastModifiedDate":"2021-10-17"},{"lineNumber":251,"author":{"gitId":"ThaddeusLim99"},"content":"        logger.log(Level.INFO, \"checking if there are enough arguments\");","lastModifiedDate":"2021-10-17"},{"lineNumber":252,"author":{"gitId":"ThaddeusLim99"},"content":"        if (args.length !\u003d 4) {","lastModifiedDate":"2021-10-17"},{"lineNumber":253,"author":{"gitId":"ThaddeusLim99"},"content":"            throw new FieldEmptyException(\"You cannot leave any field empty! Format should be\\n\"","lastModifiedDate":"2021-10-17"},{"lineNumber":254,"author":{"gitId":"ThaddeusLim99"},"content":"                    + \"editdeck /deck \u003cdeck index\u003e /input \u003cinput\u003e\");","lastModifiedDate":"2021-10-17"},{"lineNumber":255,"author":{"gitId":"ThaddeusLim99"},"content":"        }","lastModifiedDate":"2021-10-17"},{"lineNumber":256,"author":{"gitId":"ThaddeusLim99"},"content":"        logger.log(Level.INFO, \"checking if command keywords used are correct\");","lastModifiedDate":"2021-10-17"},{"lineNumber":257,"author":{"gitId":"ThaddeusLim99"},"content":"        if (!args[0].equalsIgnoreCase(\"/deck\") | !args[2].equalsIgnoreCase(\"/input\")) {","lastModifiedDate":"2021-10-17"},{"lineNumber":258,"author":{"gitId":"ThaddeusLim99"},"content":"            throw new InvalidCommandFormatException(\"Incorrect editdeck command! Format should be\\n\"","lastModifiedDate":"2021-10-17"},{"lineNumber":259,"author":{"gitId":"ThaddeusLim99"},"content":"                    + \"editdeck /deck \u003cdeck index\u003e /input \u003cinput\u003e\");","lastModifiedDate":"2021-10-17"},{"lineNumber":260,"author":{"gitId":"ThaddeusLim99"},"content":"        }","lastModifiedDate":"2021-10-17"},{"lineNumber":261,"author":{"gitId":"ThaddeusLim99"},"content":"        int catIndex \u003d Integer.parseInt(args[1]);","lastModifiedDate":"2021-10-17"},{"lineNumber":262,"author":{"gitId":"ThaddeusLim99"},"content":"        logger.log(Level.INFO, \"checking if deck index and card index are not out of bounds\");","lastModifiedDate":"2021-10-17"},{"lineNumber":263,"author":{"gitId":"xRossKoh"},"content":"        if (!(catIndex \u003e 0 \u0026\u0026 catIndex \u003c\u003d DeckManager.getDecksSize())) {","lastModifiedDate":"2021-10-18"},{"lineNumber":264,"author":{"gitId":"ThaddeusLim99"},"content":"            throw new DeckNotExistException(\"Incorrect index for Deck!\");","lastModifiedDate":"2021-10-17"},{"lineNumber":265,"author":{"gitId":"ThaddeusLim99"},"content":"        }","lastModifiedDate":"2021-10-17"},{"lineNumber":266,"author":{"gitId":"ThaddeusLim99"},"content":"        String[] editArgs \u003d {args[1], args[3]};","lastModifiedDate":"2021-10-17"},{"lineNumber":267,"author":{"gitId":"ThaddeusLim99"},"content":"        return editArgs;","lastModifiedDate":"2021-10-17"},{"lineNumber":268,"author":{"gitId":"ThaddeusLim99"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":269,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":270,"author":{"gitId":"JWweiyin"},"content":"    /**","lastModifiedDate":"2021-10-19"},{"lineNumber":271,"author":{"gitId":"JWweiyin"},"content":"     * Checks if the given input is an integer or not.","lastModifiedDate":"2021-10-19"},{"lineNumber":272,"author":{"gitId":"JWweiyin"},"content":"     *","lastModifiedDate":"2021-10-19"},{"lineNumber":273,"author":{"gitId":"JWweiyin"},"content":"     * @param input input given by user","lastModifiedDate":"2021-10-19"},{"lineNumber":274,"author":{"gitId":"JWweiyin"},"content":"     * @return true if input is an integer, false otherwise","lastModifiedDate":"2021-10-19"},{"lineNumber":275,"author":{"gitId":"JWweiyin"},"content":"     */","lastModifiedDate":"2021-10-19"},{"lineNumber":276,"author":{"gitId":"JWweiyin"},"content":"    public static boolean isInteger(String input) {","lastModifiedDate":"2021-10-19"},{"lineNumber":277,"author":{"gitId":"JWweiyin"},"content":"        for (int i \u003d 0; i \u003c input.length(); i +\u003d 1) {","lastModifiedDate":"2021-10-19"},{"lineNumber":278,"author":{"gitId":"JWweiyin"},"content":"            if (!Character.isDigit(input.charAt(i))) {","lastModifiedDate":"2021-10-19"},{"lineNumber":279,"author":{"gitId":"JWweiyin"},"content":"                return false;","lastModifiedDate":"2021-10-19"},{"lineNumber":280,"author":{"gitId":"JWweiyin"},"content":"            }","lastModifiedDate":"2021-10-19"},{"lineNumber":281,"author":{"gitId":"JWweiyin"},"content":"        }","lastModifiedDate":"2021-10-19"},{"lineNumber":282,"author":{"gitId":"JWweiyin"},"content":"        return true;","lastModifiedDate":"2021-10-19"},{"lineNumber":283,"author":{"gitId":"JWweiyin"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":284,"author":{"gitId":"xkisxk"},"content":"}","lastModifiedDate":"2021-10-16"}],"authorContributionMap":{"JWweiyin":128,"ThaddeusLim99":74,"xRossKoh":9,"xkisxk":73}},{"path":"src/main/java/seedu/duke/parser/TestParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"xkisxk"},"content":"package seedu.duke.parser;","lastModifiedDate":"2021-10-17"},{"lineNumber":2,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":3,"author":{"gitId":"xkisxk"},"content":"import seedu.duke.exceptions.FieldEmptyException;","lastModifiedDate":"2021-10-17"},{"lineNumber":4,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":5,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":6,"author":{"gitId":"xkisxk"},"content":"public class TestParser {","lastModifiedDate":"2021-10-17"},{"lineNumber":7,"author":{"gitId":"xkisxk"},"content":"    public static String parseUserResponse(String userResponse) throws FieldEmptyException {","lastModifiedDate":"2021-10-17"},{"lineNumber":8,"author":{"gitId":"xkisxk"},"content":"        if (userResponse.isEmpty()) {","lastModifiedDate":"2021-10-17"},{"lineNumber":9,"author":{"gitId":"xkisxk"},"content":"            throw new FieldEmptyException();","lastModifiedDate":"2021-10-17"},{"lineNumber":10,"author":{"gitId":"xkisxk"},"content":"        }","lastModifiedDate":"2021-10-17"},{"lineNumber":11,"author":{"gitId":"xkisxk"},"content":"        return userResponse;","lastModifiedDate":"2021-10-17"},{"lineNumber":12,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":13,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":14,"author":{"gitId":"xkisxk"},"content":"    public static int toInt(String input) throws NumberFormatException {","lastModifiedDate":"2021-10-17"},{"lineNumber":15,"author":{"gitId":"xkisxk"},"content":"        if (input.toLowerCase().contains(\"all\")) {","lastModifiedDate":"2021-10-21"},{"lineNumber":16,"author":{"gitId":"xkisxk"},"content":"            return -1;","lastModifiedDate":"2021-10-21"},{"lineNumber":17,"author":{"gitId":"xkisxk"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":18,"author":{"gitId":"xkisxk"},"content":"        return Integer.parseInt(input) - 1;","lastModifiedDate":"2021-10-17"},{"lineNumber":19,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":20,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":21,"author":{"gitId":"xkisxk"},"content":"}","lastModifiedDate":"2021-10-17"}],"authorContributionMap":{"xkisxk":21}},{"path":"src/main/java/seedu/duke/storage/Storage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JWweiyin"},"content":"package seedu.duke.storage;","lastModifiedDate":"2021-10-20"},{"lineNumber":2,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":3,"author":{"gitId":"JWweiyin"},"content":"public class Storage {","lastModifiedDate":"2021-10-20"},{"lineNumber":4,"author":{"gitId":"JWweiyin"},"content":"}","lastModifiedDate":"2021-10-20"}],"authorContributionMap":{"JWweiyin":4}},{"path":"src/main/java/seedu/duke/testing/Answer.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"xkisxk"},"content":"package seedu.duke.testing;","lastModifiedDate":"2021-10-17"},{"lineNumber":2,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":3,"author":{"gitId":"xkisxk"},"content":"import seedu.duke.flashcard.FlashCard;","lastModifiedDate":"2021-10-17"},{"lineNumber":4,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":5,"author":{"gitId":"xRossKoh"},"content":"/**","lastModifiedDate":"2021-10-06"},{"lineNumber":6,"author":{"gitId":"xRossKoh"},"content":" * Represents information about a single user answer when test function is invoked.","lastModifiedDate":"2021-10-06"},{"lineNumber":7,"author":{"gitId":"xRossKoh"},"content":" */","lastModifiedDate":"2021-10-06"},{"lineNumber":8,"author":{"gitId":"ThaddeusLim99"},"content":"public class Answer {","lastModifiedDate":"2021-10-04"},{"lineNumber":9,"author":{"gitId":"xkisxk"},"content":"    private final String answer;","lastModifiedDate":"2021-10-16"},{"lineNumber":10,"author":{"gitId":"xkisxk"},"content":"    private final int questionIndex;","lastModifiedDate":"2021-10-16"},{"lineNumber":11,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":12,"author":{"gitId":"ThaddeusLim99"},"content":"    public Answer(String answer, int questionIndex) {","lastModifiedDate":"2021-10-04"},{"lineNumber":13,"author":{"gitId":"ThaddeusLim99"},"content":"        this.answer \u003d answer;","lastModifiedDate":"2021-10-04"},{"lineNumber":14,"author":{"gitId":"ThaddeusLim99"},"content":"        this.questionIndex \u003d questionIndex;","lastModifiedDate":"2021-10-04"},{"lineNumber":15,"author":{"gitId":"ThaddeusLim99"},"content":"    }","lastModifiedDate":"2021-10-04"},{"lineNumber":16,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":17,"author":{"gitId":"ThaddeusLim99"},"content":"    //getter for front","lastModifiedDate":"2021-10-04"},{"lineNumber":18,"author":{"gitId":"ThaddeusLim99"},"content":"    public String getAnswer() {","lastModifiedDate":"2021-10-04"},{"lineNumber":19,"author":{"gitId":"ThaddeusLim99"},"content":"        return this.answer;","lastModifiedDate":"2021-10-04"},{"lineNumber":20,"author":{"gitId":"ThaddeusLim99"},"content":"    }","lastModifiedDate":"2021-10-04"},{"lineNumber":21,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":22,"author":{"gitId":"xkisxk"},"content":"    public int getQuestionIndex() {","lastModifiedDate":"2021-10-17"},{"lineNumber":23,"author":{"gitId":"xkisxk"},"content":"        return this.questionIndex;","lastModifiedDate":"2021-10-17"},{"lineNumber":24,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":25,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":26,"author":{"gitId":"xkisxk"},"content":"    public boolean isCorrect(String userAnswer, FlashCard question) {","lastModifiedDate":"2021-10-17"},{"lineNumber":27,"author":{"gitId":"xkisxk"},"content":"        String lowerCaseUserAnswer \u003d userAnswer.toLowerCase();","lastModifiedDate":"2021-10-17"},{"lineNumber":28,"author":{"gitId":"xkisxk"},"content":"        String lowerCaseAnswer \u003d question.getBack().toLowerCase();","lastModifiedDate":"2021-10-17"},{"lineNumber":29,"author":{"gitId":"xkisxk"},"content":"        return lowerCaseAnswer.equals(lowerCaseUserAnswer);","lastModifiedDate":"2021-10-17"},{"lineNumber":30,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":31,"author":{"gitId":"ThaddeusLim99"},"content":"}","lastModifiedDate":"2021-10-04"}],"authorContributionMap":{"ThaddeusLim99":14,"xRossKoh":3,"xkisxk":14}},{"path":"src/main/java/seedu/duke/testing/AnswerList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"xkisxk"},"content":"package seedu.duke.testing;","lastModifiedDate":"2021-10-17"},{"lineNumber":2,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":3,"author":{"gitId":"xkisxk"},"content":"import seedu.duke.flashcard.Deck;","lastModifiedDate":"2021-10-17"},{"lineNumber":4,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":5,"author":{"gitId":"xkisxk"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-17"},{"lineNumber":6,"author":{"gitId":"xkisxk"},"content":"import java.util.logging.Level;","lastModifiedDate":"2021-10-18"},{"lineNumber":7,"author":{"gitId":"xkisxk"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-10-18"},{"lineNumber":8,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":9,"author":{"gitId":"xkisxk"},"content":"/**","lastModifiedDate":"2021-10-19"},{"lineNumber":10,"author":{"gitId":"xkisxk"},"content":" * Contains all the user\u0027s answers to the tested deck and his score.","lastModifiedDate":"2021-10-21"},{"lineNumber":11,"author":{"gitId":"xkisxk"},"content":" */","lastModifiedDate":"2021-10-19"},{"lineNumber":12,"author":{"gitId":"xkisxk"},"content":"public class AnswerList {","lastModifiedDate":"2021-10-17"},{"lineNumber":13,"author":{"gitId":"xkisxk"},"content":"    private final ArrayList\u003cAnswer\u003e answerList;","lastModifiedDate":"2021-10-21"},{"lineNumber":14,"author":{"gitId":"xkisxk"},"content":"    private final Deck deck;","lastModifiedDate":"2021-10-21"},{"lineNumber":15,"author":{"gitId":"xkisxk"},"content":"    private int userScore;","lastModifiedDate":"2021-10-21"},{"lineNumber":16,"author":{"gitId":"xkisxk"},"content":"    private static final Logger logger \u003d Logger.getLogger(Deck.class.getName());","lastModifiedDate":"2021-10-18"},{"lineNumber":17,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":18,"author":{"gitId":"xkisxk"},"content":"    /**","lastModifiedDate":"2021-10-19"},{"lineNumber":19,"author":{"gitId":"xkisxk"},"content":"     * AnswerList contains the list of answers from a test and the deck","lastModifiedDate":"2021-10-19"},{"lineNumber":20,"author":{"gitId":"xkisxk"},"content":"     * the questions came from.","lastModifiedDate":"2021-10-19"},{"lineNumber":21,"author":{"gitId":"xkisxk"},"content":"     *","lastModifiedDate":"2021-10-19"},{"lineNumber":22,"author":{"gitId":"xkisxk"},"content":"     * @param deck tested deck","lastModifiedDate":"2021-10-19"},{"lineNumber":23,"author":{"gitId":"xkisxk"},"content":"     */","lastModifiedDate":"2021-10-19"},{"lineNumber":24,"author":{"gitId":"xkisxk"},"content":"    public AnswerList(Deck deck) {","lastModifiedDate":"2021-10-17"},{"lineNumber":25,"author":{"gitId":"xkisxk"},"content":"        this.answerList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-17"},{"lineNumber":26,"author":{"gitId":"xkisxk"},"content":"        this.deck \u003d deck;","lastModifiedDate":"2021-10-17"},{"lineNumber":27,"author":{"gitId":"xkisxk"},"content":"        this.userScore \u003d 0;","lastModifiedDate":"2021-10-21"},{"lineNumber":28,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":29,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":30,"author":{"gitId":"xkisxk"},"content":"    /**","lastModifiedDate":"2021-10-18"},{"lineNumber":31,"author":{"gitId":"xkisxk"},"content":"     * Gets the index of the answer in the list.","lastModifiedDate":"2021-10-18"},{"lineNumber":32,"author":{"gitId":"xkisxk"},"content":"     *","lastModifiedDate":"2021-10-18"},{"lineNumber":33,"author":{"gitId":"xkisxk"},"content":"     * @param answer answer query","lastModifiedDate":"2021-10-18"},{"lineNumber":34,"author":{"gitId":"xkisxk"},"content":"     * @return       index of the answer","lastModifiedDate":"2021-10-18"},{"lineNumber":35,"author":{"gitId":"xkisxk"},"content":"     */","lastModifiedDate":"2021-10-18"},{"lineNumber":36,"author":{"gitId":"xkisxk"},"content":"    public int getAnswerIndex(Answer answer) {","lastModifiedDate":"2021-10-17"},{"lineNumber":37,"author":{"gitId":"xkisxk"},"content":"        return answerList.indexOf(answer);","lastModifiedDate":"2021-10-17"},{"lineNumber":38,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":39,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":40,"author":{"gitId":"xkisxk"},"content":"    public ArrayList\u003cAnswer\u003e getAnswerList() {","lastModifiedDate":"2021-10-17"},{"lineNumber":41,"author":{"gitId":"xkisxk"},"content":"        return answerList;","lastModifiedDate":"2021-10-17"},{"lineNumber":42,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":43,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":44,"author":{"gitId":"xkisxk"},"content":"    public int getUserScore() {","lastModifiedDate":"2021-10-21"},{"lineNumber":45,"author":{"gitId":"xkisxk"},"content":"        return userScore;","lastModifiedDate":"2021-10-21"},{"lineNumber":46,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":47,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":48,"author":{"gitId":"xkisxk"},"content":"    public void incrementUserScore() {","lastModifiedDate":"2021-10-21"},{"lineNumber":49,"author":{"gitId":"xkisxk"},"content":"        userScore++;","lastModifiedDate":"2021-10-21"},{"lineNumber":50,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":51,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":52,"author":{"gitId":"xkisxk"},"content":"    public Boolean isEmpty() {","lastModifiedDate":"2021-10-17"},{"lineNumber":53,"author":{"gitId":"xkisxk"},"content":"        return answerList.isEmpty();","lastModifiedDate":"2021-10-17"},{"lineNumber":54,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":55,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":56,"author":{"gitId":"xkisxk"},"content":"    public Deck getDeck() {","lastModifiedDate":"2021-10-17"},{"lineNumber":57,"author":{"gitId":"xkisxk"},"content":"        return deck;","lastModifiedDate":"2021-10-17"},{"lineNumber":58,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":59,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":60,"author":{"gitId":"xkisxk"},"content":"    public int getSize() {","lastModifiedDate":"2021-10-17"},{"lineNumber":61,"author":{"gitId":"xkisxk"},"content":"        return answerList.size();","lastModifiedDate":"2021-10-17"},{"lineNumber":62,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":63,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":64,"author":{"gitId":"xkisxk"},"content":"    /**","lastModifiedDate":"2021-10-17"},{"lineNumber":65,"author":{"gitId":"xkisxk"},"content":"     * Saves a new user answer to the current list of user answers.","lastModifiedDate":"2021-10-17"},{"lineNumber":66,"author":{"gitId":"xkisxk"},"content":"     *","lastModifiedDate":"2021-10-17"},{"lineNumber":67,"author":{"gitId":"xkisxk"},"content":"     * @param answer        String representation of user\u0027s answer","lastModifiedDate":"2021-10-17"},{"lineNumber":68,"author":{"gitId":"xkisxk"},"content":"     * @param questionIndex Question number for the question that the answer answers","lastModifiedDate":"2021-10-17"},{"lineNumber":69,"author":{"gitId":"xkisxk"},"content":"     */","lastModifiedDate":"2021-10-17"},{"lineNumber":70,"author":{"gitId":"xkisxk"},"content":"    public void addAnswer(String answer, int questionIndex) {","lastModifiedDate":"2021-10-17"},{"lineNumber":71,"author":{"gitId":"xkisxk"},"content":"        logger.setLevel(Level.WARNING);","lastModifiedDate":"2021-10-21"},{"lineNumber":72,"author":{"gitId":"xkisxk"},"content":"        logger.log(Level.INFO, \"Adding card\");","lastModifiedDate":"2021-10-21"},{"lineNumber":73,"author":{"gitId":"xkisxk"},"content":"        answerList.add(new Answer(answer, questionIndex));","lastModifiedDate":"2021-10-17"},{"lineNumber":74,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":75,"author":{"gitId":"xkisxk"},"content":"}","lastModifiedDate":"2021-10-17"}],"authorContributionMap":{"xkisxk":75}},{"path":"src/main/java/seedu/duke/testing/TestHistory.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"xkisxk"},"content":"package seedu.duke.testing;","lastModifiedDate":"2021-10-17"},{"lineNumber":2,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":3,"author":{"gitId":"xkisxk"},"content":"import seedu.duke.flashcard.Deck;","lastModifiedDate":"2021-10-17"},{"lineNumber":4,"author":{"gitId":"xRossKoh"},"content":"import seedu.duke.flashcard.DeckManager;","lastModifiedDate":"2021-10-18"},{"lineNumber":5,"author":{"gitId":"xkisxk"},"content":"import seedu.duke.flashcard.FlashCard;","lastModifiedDate":"2021-10-17"},{"lineNumber":6,"author":{"gitId":"xkisxk"},"content":"import seedu.duke.parser.TestParser;","lastModifiedDate":"2021-10-17"},{"lineNumber":7,"author":{"gitId":"xkisxk"},"content":"import seedu.duke.ui.TestUi;","lastModifiedDate":"2021-10-19"},{"lineNumber":8,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":9,"author":{"gitId":"xkisxk"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-17"},{"lineNumber":10,"author":{"gitId":"xkisxk"},"content":"import java.util.logging.Level;","lastModifiedDate":"2021-10-17"},{"lineNumber":11,"author":{"gitId":"xkisxk"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-10-17"},{"lineNumber":12,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":13,"author":{"gitId":"xkisxk"},"content":"/**","lastModifiedDate":"2021-10-17"},{"lineNumber":14,"author":{"gitId":"xkisxk"},"content":" * TestHistory keeps track of all answerResponses from previous tests.","lastModifiedDate":"2021-10-17"},{"lineNumber":15,"author":{"gitId":"xkisxk"},"content":" */","lastModifiedDate":"2021-10-17"},{"lineNumber":16,"author":{"gitId":"xkisxk"},"content":"public class TestHistory {","lastModifiedDate":"2021-10-17"},{"lineNumber":17,"author":{"gitId":"xkisxk"},"content":"    private static final ArrayList\u003cAnswerList\u003e testHistory \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-17"},{"lineNumber":18,"author":{"gitId":"xkisxk"},"content":"    private static final Logger logger \u003d Logger.getLogger(TestManager.class.getName());","lastModifiedDate":"2021-10-17"},{"lineNumber":19,"author":{"gitId":"xkisxk"},"content":"    private static final TestUi ui \u003d new TestUi();","lastModifiedDate":"2021-10-19"},{"lineNumber":20,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":21,"author":{"gitId":"xkisxk"},"content":"    public static void addAnswerList(AnswerList answerList) {","lastModifiedDate":"2021-10-17"},{"lineNumber":22,"author":{"gitId":"xkisxk"},"content":"        testHistory.add(answerList);","lastModifiedDate":"2021-10-17"},{"lineNumber":23,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":24,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":25,"author":{"gitId":"xkisxk"},"content":"    /**","lastModifiedDate":"2021-10-17"},{"lineNumber":26,"author":{"gitId":"xkisxk"},"content":"     * View overall result statistics of all tests and individual flashcards.","lastModifiedDate":"2021-10-17"},{"lineNumber":27,"author":{"gitId":"xkisxk"},"content":"     * Invoked by the user command \"viewtests\".","lastModifiedDate":"2021-10-18"},{"lineNumber":28,"author":{"gitId":"xkisxk"},"content":"     */","lastModifiedDate":"2021-10-17"},{"lineNumber":29,"author":{"gitId":"xkisxk"},"content":"    public static void viewOverallFlashcardStats() {","lastModifiedDate":"2021-10-17"},{"lineNumber":30,"author":{"gitId":"xkisxk"},"content":"        logger.setLevel(Level.WARNING);","lastModifiedDate":"2021-10-17"},{"lineNumber":31,"author":{"gitId":"xkisxk"},"content":"        logger.log(Level.INFO, \"listing all flashcard stats\");","lastModifiedDate":"2021-10-17"},{"lineNumber":32,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":33,"author":{"gitId":"JWweiyin"},"content":"        assert DeckManager.getDecks().size() \u003e 0 : \"deckList must not be empty\";","lastModifiedDate":"2021-10-20"},{"lineNumber":34,"author":{"gitId":"xkisxk"},"content":"        System.out.println(\"Listing total scores of flashcards for all tests\");","lastModifiedDate":"2021-10-17"},{"lineNumber":35,"author":{"gitId":"JWweiyin"},"content":"        for (Deck deck : DeckManager.getDecks()) {","lastModifiedDate":"2021-10-20"},{"lineNumber":36,"author":{"gitId":"xkisxk"},"content":"            for (FlashCard card : deck.getCards()) {","lastModifiedDate":"2021-10-21"},{"lineNumber":37,"author":{"gitId":"xkisxk"},"content":"                ui.printScoreWithCard(card);","lastModifiedDate":"2021-10-19"},{"lineNumber":38,"author":{"gitId":"xkisxk"},"content":"            }","lastModifiedDate":"2021-10-17"},{"lineNumber":39,"author":{"gitId":"xkisxk"},"content":"        }","lastModifiedDate":"2021-10-17"},{"lineNumber":40,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":41,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":42,"author":{"gitId":"xkisxk"},"content":"    public static void prepareToViewTest(String input) {","lastModifiedDate":"2021-10-17"},{"lineNumber":43,"author":{"gitId":"xkisxk"},"content":"        try {","lastModifiedDate":"2021-10-17"},{"lineNumber":44,"author":{"gitId":"xkisxk"},"content":"            int index \u003d TestParser.toInt(input);","lastModifiedDate":"2021-10-17"},{"lineNumber":45,"author":{"gitId":"xkisxk"},"content":"            viewTestByIndex(index);","lastModifiedDate":"2021-10-17"},{"lineNumber":46,"author":{"gitId":"xkisxk"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2021-10-17"},{"lineNumber":47,"author":{"gitId":"xkisxk"},"content":"            System.out.println(\"That\u0027s not a number.\");","lastModifiedDate":"2021-10-17"},{"lineNumber":48,"author":{"gitId":"xkisxk"},"content":"        }","lastModifiedDate":"2021-10-17"},{"lineNumber":49,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":50,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":51,"author":{"gitId":"xkisxk"},"content":"    /**","lastModifiedDate":"2021-10-19"},{"lineNumber":52,"author":{"gitId":"xkisxk"},"content":"     * Views the results of a test given the index.","lastModifiedDate":"2021-10-19"},{"lineNumber":53,"author":{"gitId":"xkisxk"},"content":"     * Gives the raw score, followed by the percentage.","lastModifiedDate":"2021-10-19"},{"lineNumber":54,"author":{"gitId":"xkisxk"},"content":"     * ","lastModifiedDate":"2021-10-19"},{"lineNumber":55,"author":{"gitId":"xkisxk"},"content":"     * @param index index of the test","lastModifiedDate":"2021-10-19"},{"lineNumber":56,"author":{"gitId":"xkisxk"},"content":"     */","lastModifiedDate":"2021-10-19"},{"lineNumber":57,"author":{"gitId":"xkisxk"},"content":"    public static void viewTestByIndex(int index) {","lastModifiedDate":"2021-10-17"},{"lineNumber":58,"author":{"gitId":"xkisxk"},"content":"        AnswerList answerList \u003d testHistory.get(index);","lastModifiedDate":"2021-10-17"},{"lineNumber":59,"author":{"gitId":"xkisxk"},"content":"        int score \u003d answerList.getUserScore();","lastModifiedDate":"2021-10-21"},{"lineNumber":60,"author":{"gitId":"xkisxk"},"content":"        int totalScore \u003d answerList.getSize();","lastModifiedDate":"2021-10-17"},{"lineNumber":61,"author":{"gitId":"xkisxk"},"content":"        ui.printScore(index, score, totalScore);","lastModifiedDate":"2021-10-19"},{"lineNumber":62,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":63,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":64,"author":{"gitId":"xkisxk"},"content":"    /**","lastModifiedDate":"2021-10-19"},{"lineNumber":65,"author":{"gitId":"xkisxk"},"content":"     * Views the results of the tests in order of all the tests taken.","lastModifiedDate":"2021-10-19"},{"lineNumber":66,"author":{"gitId":"xkisxk"},"content":"     * Gives the raw score, followed by the percentage.","lastModifiedDate":"2021-10-19"},{"lineNumber":67,"author":{"gitId":"xkisxk"},"content":"     *","lastModifiedDate":"2021-10-19"},{"lineNumber":68,"author":{"gitId":"xkisxk"},"content":"     */","lastModifiedDate":"2021-10-19"},{"lineNumber":69,"author":{"gitId":"xkisxk"},"content":"    public static void viewTests() {","lastModifiedDate":"2021-10-17"},{"lineNumber":70,"author":{"gitId":"xkisxk"},"content":"        int index \u003d 1;","lastModifiedDate":"2021-10-17"},{"lineNumber":71,"author":{"gitId":"xkisxk"},"content":"        for (AnswerList answerList : testHistory) {","lastModifiedDate":"2021-10-17"},{"lineNumber":72,"author":{"gitId":"xkisxk"},"content":"            ui.printTest(index, answerList);","lastModifiedDate":"2021-10-19"},{"lineNumber":73,"author":{"gitId":"xkisxk"},"content":"            index++;","lastModifiedDate":"2021-10-17"},{"lineNumber":74,"author":{"gitId":"xkisxk"},"content":"        }","lastModifiedDate":"2021-10-17"},{"lineNumber":75,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":76,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":77,"author":{"gitId":"xkisxk"},"content":"    /**","lastModifiedDate":"2021-10-18"},{"lineNumber":78,"author":{"gitId":"xkisxk"},"content":"     * Gets all the low scoring cards and put them into a deck.","lastModifiedDate":"2021-10-18"},{"lineNumber":79,"author":{"gitId":"xkisxk"},"content":"     *","lastModifiedDate":"2021-10-18"},{"lineNumber":80,"author":{"gitId":"xkisxk"},"content":"     * @return deck of low scoring cards","lastModifiedDate":"2021-10-18"},{"lineNumber":81,"author":{"gitId":"xkisxk"},"content":"     */","lastModifiedDate":"2021-10-18"},{"lineNumber":82,"author":{"gitId":"xkisxk"},"content":"    private static Deck getLowScoringCardsFromAllDecks() {","lastModifiedDate":"2021-10-21"},{"lineNumber":83,"author":{"gitId":"xkisxk"},"content":"        logger.setLevel(Level.WARNING);","lastModifiedDate":"2021-10-19"},{"lineNumber":84,"author":{"gitId":"xkisxk"},"content":"        logger.log(Level.INFO, \"Collecting low scoring cards\");","lastModifiedDate":"2021-10-19"},{"lineNumber":85,"author":{"gitId":"xkisxk"},"content":"        Deck reviewDeck \u003d new Deck(\"Review\");","lastModifiedDate":"2021-10-18"},{"lineNumber":86,"author":{"gitId":"JWweiyin"},"content":"        for (Deck deck : DeckManager.getDecks()) {","lastModifiedDate":"2021-10-20"},{"lineNumber":87,"author":{"gitId":"xkisxk"},"content":"            for (FlashCard card : deck.getCards()) {","lastModifiedDate":"2021-10-21"},{"lineNumber":88,"author":{"gitId":"xkisxk"},"content":"                if (isLowScoring(card)) {","lastModifiedDate":"2021-10-18"},{"lineNumber":89,"author":{"gitId":"xkisxk"},"content":"                    reviewDeck.addFlashCard(card);","lastModifiedDate":"2021-10-19"},{"lineNumber":90,"author":{"gitId":"xkisxk"},"content":"                    logger.log(Level.INFO, \"Added a low scoring card\");","lastModifiedDate":"2021-10-19"},{"lineNumber":91,"author":{"gitId":"xkisxk"},"content":"                }","lastModifiedDate":"2021-10-18"},{"lineNumber":92,"author":{"gitId":"xkisxk"},"content":"            }","lastModifiedDate":"2021-10-18"},{"lineNumber":93,"author":{"gitId":"xkisxk"},"content":"        }","lastModifiedDate":"2021-10-18"},{"lineNumber":94,"author":{"gitId":"xkisxk"},"content":"        return reviewDeck;","lastModifiedDate":"2021-10-18"},{"lineNumber":95,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":96,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":97,"author":{"gitId":"xkisxk"},"content":"    /**","lastModifiedDate":"2021-10-21"},{"lineNumber":98,"author":{"gitId":"xkisxk"},"content":"     * Gets all the low scoring cards from a deck and put them into a deck.","lastModifiedDate":"2021-10-21"},{"lineNumber":99,"author":{"gitId":"xkisxk"},"content":"     *","lastModifiedDate":"2021-10-21"},{"lineNumber":100,"author":{"gitId":"xkisxk"},"content":"     * @return deck of low scoring cards","lastModifiedDate":"2021-10-21"},{"lineNumber":101,"author":{"gitId":"xkisxk"},"content":"     */","lastModifiedDate":"2021-10-21"},{"lineNumber":102,"author":{"gitId":"xkisxk"},"content":"    private static Deck getLowScoringCardsFromADeck(Deck deck) {","lastModifiedDate":"2021-10-21"},{"lineNumber":103,"author":{"gitId":"xkisxk"},"content":"        logger.setLevel(Level.WARNING);","lastModifiedDate":"2021-10-21"},{"lineNumber":104,"author":{"gitId":"xkisxk"},"content":"        logger.log(Level.INFO, \"Collecting low scoring cards\");","lastModifiedDate":"2021-10-21"},{"lineNumber":105,"author":{"gitId":"xkisxk"},"content":"        Deck reviewDeck \u003d new Deck(\"Review\");","lastModifiedDate":"2021-10-21"},{"lineNumber":106,"author":{"gitId":"xkisxk"},"content":"        for (FlashCard card : deck.getCards()) {","lastModifiedDate":"2021-10-21"},{"lineNumber":107,"author":{"gitId":"xkisxk"},"content":"            if (isLowScoring(card)) {","lastModifiedDate":"2021-10-21"},{"lineNumber":108,"author":{"gitId":"xkisxk"},"content":"                reviewDeck.addFlashCard(card);","lastModifiedDate":"2021-10-21"},{"lineNumber":109,"author":{"gitId":"xkisxk"},"content":"                logger.log(Level.INFO, \"Added a low scoring card\");","lastModifiedDate":"2021-10-21"},{"lineNumber":110,"author":{"gitId":"xkisxk"},"content":"            }","lastModifiedDate":"2021-10-21"},{"lineNumber":111,"author":{"gitId":"xkisxk"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":112,"author":{"gitId":"xkisxk"},"content":"        return reviewDeck;","lastModifiedDate":"2021-10-21"},{"lineNumber":113,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":114,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":115,"author":{"gitId":"xkisxk"},"content":"    /**","lastModifiedDate":"2021-10-21"},{"lineNumber":116,"author":{"gitId":"xkisxk"},"content":"     * Gets all the low scoring cards and put them into a deck.","lastModifiedDate":"2021-10-21"},{"lineNumber":117,"author":{"gitId":"xkisxk"},"content":"     * If index is -1, get low scaring cards from all decks.","lastModifiedDate":"2021-10-21"},{"lineNumber":118,"author":{"gitId":"xkisxk"},"content":"     * Else get low scoring cards from the deck from that index.","lastModifiedDate":"2021-10-21"},{"lineNumber":119,"author":{"gitId":"xkisxk"},"content":"     * The cards that are put into the deck are the same cards objects, in other","lastModifiedDate":"2021-10-21"},{"lineNumber":120,"author":{"gitId":"xkisxk"},"content":"     * words they are not new FlashCard objects.","lastModifiedDate":"2021-10-21"},{"lineNumber":121,"author":{"gitId":"xkisxk"},"content":"     *","lastModifiedDate":"2021-10-21"},{"lineNumber":122,"author":{"gitId":"xkisxk"},"content":"     * @return deck of low scoring cards","lastModifiedDate":"2021-10-21"},{"lineNumber":123,"author":{"gitId":"xkisxk"},"content":"     */","lastModifiedDate":"2021-10-21"},{"lineNumber":124,"author":{"gitId":"xkisxk"},"content":"    public static Deck getLowScoringCards(int index) {","lastModifiedDate":"2021-10-21"},{"lineNumber":125,"author":{"gitId":"xkisxk"},"content":"        if (index \u003d\u003d -1) {","lastModifiedDate":"2021-10-21"},{"lineNumber":126,"author":{"gitId":"xkisxk"},"content":"            return getLowScoringCardsFromAllDecks();","lastModifiedDate":"2021-10-21"},{"lineNumber":127,"author":{"gitId":"xkisxk"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":128,"author":{"gitId":"xkisxk"},"content":"        if (DeckManager.hasDeck(index)) {","lastModifiedDate":"2021-10-21"},{"lineNumber":129,"author":{"gitId":"xkisxk"},"content":"            return getLowScoringCardsFromADeck(DeckManager.getDeck(index));","lastModifiedDate":"2021-10-21"},{"lineNumber":130,"author":{"gitId":"xkisxk"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":131,"author":{"gitId":"xkisxk"},"content":"        throw new IndexOutOfBoundsException(\"This deck does not exist.\");","lastModifiedDate":"2021-10-21"},{"lineNumber":132,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":133,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":134,"author":{"gitId":"xkisxk"},"content":"    /**","lastModifiedDate":"2021-10-18"},{"lineNumber":135,"author":{"gitId":"xkisxk"},"content":"     * A card is low scoring if its accumulated user score is less than 50% of","lastModifiedDate":"2021-10-18"},{"lineNumber":136,"author":{"gitId":"xkisxk"},"content":"     * the total score.","lastModifiedDate":"2021-10-18"},{"lineNumber":137,"author":{"gitId":"xkisxk"},"content":"     *","lastModifiedDate":"2021-10-18"},{"lineNumber":138,"author":{"gitId":"xkisxk"},"content":"     * @return true if card is low scoring, false otherwise","lastModifiedDate":"2021-10-18"},{"lineNumber":139,"author":{"gitId":"xkisxk"},"content":"     */","lastModifiedDate":"2021-10-18"},{"lineNumber":140,"author":{"gitId":"xkisxk"},"content":"    private static boolean isLowScoring(FlashCard card) {","lastModifiedDate":"2021-10-18"},{"lineNumber":141,"author":{"gitId":"xkisxk"},"content":"        return (double) card.getUserScore() * 100 / card.getTotalScore() \u003c 50;","lastModifiedDate":"2021-10-18"},{"lineNumber":142,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":143,"author":{"gitId":"xkisxk"},"content":"}","lastModifiedDate":"2021-10-17"}],"authorContributionMap":{"JWweiyin":3,"xRossKoh":1,"xkisxk":139}},{"path":"src/main/java/seedu/duke/testing/TestManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"xkisxk"},"content":"package seedu.duke.testing;","lastModifiedDate":"2021-10-17"},{"lineNumber":2,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":3,"author":{"gitId":"xkisxk"},"content":"import seedu.duke.exceptions.EmptyDeckException;","lastModifiedDate":"2021-10-21"},{"lineNumber":4,"author":{"gitId":"ThaddeusLim99"},"content":"import seedu.duke.exceptions.FieldEmptyException;","lastModifiedDate":"2021-10-05"},{"lineNumber":5,"author":{"gitId":"xRossKoh"},"content":"import seedu.duke.flashcard.DeckManager;","lastModifiedDate":"2021-10-18"},{"lineNumber":6,"author":{"gitId":"xkisxk"},"content":"import seedu.duke.parser.TestParser;","lastModifiedDate":"2021-10-17"},{"lineNumber":7,"author":{"gitId":"xkisxk"},"content":"import seedu.duke.ui.TestUi;","lastModifiedDate":"2021-10-17"},{"lineNumber":8,"author":{"gitId":"xkisxk"},"content":"import seedu.duke.flashcard.Deck;","lastModifiedDate":"2021-10-17"},{"lineNumber":9,"author":{"gitId":"xkisxk"},"content":"import seedu.duke.flashcard.FlashCard;","lastModifiedDate":"2021-10-17"},{"lineNumber":10,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":11,"author":{"gitId":"xRossKoh"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-18"},{"lineNumber":12,"author":{"gitId":"xRossKoh"},"content":"import java.util.Collections;","lastModifiedDate":"2021-10-18"},{"lineNumber":13,"author":{"gitId":"ThaddeusLim99"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-10-10"},{"lineNumber":14,"author":{"gitId":"ThaddeusLim99"},"content":"import java.util.logging.Level;","lastModifiedDate":"2021-10-10"},{"lineNumber":15,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":16,"author":{"gitId":"xRossKoh"},"content":"/**","lastModifiedDate":"2021-10-06"},{"lineNumber":17,"author":{"gitId":"xRossKoh"},"content":" * Implements the test function.","lastModifiedDate":"2021-10-06"},{"lineNumber":18,"author":{"gitId":"xRossKoh"},"content":" */","lastModifiedDate":"2021-10-06"},{"lineNumber":19,"author":{"gitId":"ThaddeusLim99"},"content":"public class TestManager {","lastModifiedDate":"2021-10-04"},{"lineNumber":20,"author":{"gitId":"xkisxk"},"content":"    private static final TestUi ui \u003d new TestUi();","lastModifiedDate":"2021-10-17"},{"lineNumber":21,"author":{"gitId":"xkisxk"},"content":"    private static final Logger logger \u003d Logger.getLogger(TestManager.class.getName());","lastModifiedDate":"2021-10-17"},{"lineNumber":22,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":23,"author":{"gitId":"xkisxk"},"content":"    /**","lastModifiedDate":"2021-10-17"},{"lineNumber":24,"author":{"gitId":"xkisxk"},"content":"     * Enters test mode and requires user to input the index of the deck that they want to be tested.","lastModifiedDate":"2021-10-17"},{"lineNumber":25,"author":{"gitId":"xkisxk"},"content":"     * If the input is \"all\", all decks will be tested. If the input is an integer, the deck at","lastModifiedDate":"2021-10-21"},{"lineNumber":26,"author":{"gitId":"xkisxk"},"content":"     * that index will be tested.","lastModifiedDate":"2021-10-21"},{"lineNumber":27,"author":{"gitId":"xkisxk"},"content":"     */","lastModifiedDate":"2021-10-17"},{"lineNumber":28,"author":{"gitId":"xkisxk"},"content":"    public static void startTest() {","lastModifiedDate":"2021-10-21"},{"lineNumber":29,"author":{"gitId":"xkisxk"},"content":"        logger.setLevel(Level.WARNING);","lastModifiedDate":"2021-10-18"},{"lineNumber":30,"author":{"gitId":"xkisxk"},"content":"        logger.log(Level.INFO, \"starting test\");","lastModifiedDate":"2021-10-18"},{"lineNumber":31,"author":{"gitId":"xkisxk"},"content":"        ui.printStartTest();","lastModifiedDate":"2021-10-17"},{"lineNumber":32,"author":{"gitId":"xkisxk"},"content":"        String input \u003d ui.getUserMessage();","lastModifiedDate":"2021-10-17"},{"lineNumber":33,"author":{"gitId":"xkisxk"},"content":"        try {","lastModifiedDate":"2021-10-17"},{"lineNumber":34,"author":{"gitId":"xkisxk"},"content":"            logger.log(Level.INFO, \"choosing deck to test\");","lastModifiedDate":"2021-10-18"},{"lineNumber":35,"author":{"gitId":"xkisxk"},"content":"            int deckIndex \u003d TestParser.toInt(input);","lastModifiedDate":"2021-10-17"},{"lineNumber":36,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":37,"author":{"gitId":"xkisxk"},"content":"            Deck deckToTest \u003d DeckManager.getTestDeck(deckIndex);","lastModifiedDate":"2021-10-21"},{"lineNumber":38,"author":{"gitId":"xkisxk"},"content":"            AnswerList userAnswers \u003d new AnswerList(deckToTest);","lastModifiedDate":"2021-10-21"},{"lineNumber":39,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":40,"author":{"gitId":"xkisxk"},"content":"            testAllCardsShuffled(userAnswers);","lastModifiedDate":"2021-10-21"},{"lineNumber":41,"author":{"gitId":"xkisxk"},"content":"            markTest(userAnswers);","lastModifiedDate":"2021-10-21"},{"lineNumber":42,"author":{"gitId":"xkisxk"},"content":"            TestHistory.addAnswerList(userAnswers);","lastModifiedDate":"2021-10-21"},{"lineNumber":43,"author":{"gitId":"xkisxk"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2021-10-17"},{"lineNumber":44,"author":{"gitId":"xkisxk"},"content":"            System.out.println(\"Incorrect input format, make sure the description is a numeric.\");","lastModifiedDate":"2021-10-17"},{"lineNumber":45,"author":{"gitId":"xkisxk"},"content":"            logger.log(Level.WARNING, \"Incorrect format causing NumberFormatException\");","lastModifiedDate":"2021-10-18"},{"lineNumber":46,"author":{"gitId":"xkisxk"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2021-10-17"},{"lineNumber":47,"author":{"gitId":"xkisxk"},"content":"            ui.showMessage(e.getMessage());","lastModifiedDate":"2021-10-21"},{"lineNumber":48,"author":{"gitId":"xkisxk"},"content":"            logger.log(Level.WARNING, \"Deck does not exist causing IndexOutOfBoundsException\");","lastModifiedDate":"2021-10-21"},{"lineNumber":49,"author":{"gitId":"xkisxk"},"content":"        } catch (EmptyDeckException e) {","lastModifiedDate":"2021-10-21"},{"lineNumber":50,"author":{"gitId":"xkisxk"},"content":"            ui.showMessage(e.getMessage());","lastModifiedDate":"2021-10-21"},{"lineNumber":51,"author":{"gitId":"xkisxk"},"content":"            logger.log(Level.WARNING, \"Empty deck\");","lastModifiedDate":"2021-10-21"},{"lineNumber":52,"author":{"gitId":"xkisxk"},"content":"        }","lastModifiedDate":"2021-10-17"},{"lineNumber":53,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":54,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":55,"author":{"gitId":"xkisxk"},"content":"    /**","lastModifiedDate":"2021-10-18"},{"lineNumber":56,"author":{"gitId":"xkisxk"},"content":"     * Enters review mode and requires user to input the index of the deck that they want to be reviewed.","lastModifiedDate":"2021-10-21"},{"lineNumber":57,"author":{"gitId":"xkisxk"},"content":"     * If the input is \"all\", the cards will come from all decks. If the input is an integer, only cards from","lastModifiedDate":"2021-10-21"},{"lineNumber":58,"author":{"gitId":"xkisxk"},"content":"     * the deck at that index will be tested.","lastModifiedDate":"2021-10-21"},{"lineNumber":59,"author":{"gitId":"xkisxk"},"content":"     */","lastModifiedDate":"2021-10-18"},{"lineNumber":60,"author":{"gitId":"xkisxk"},"content":"    public static void startReview() {","lastModifiedDate":"2021-10-18"},{"lineNumber":61,"author":{"gitId":"xkisxk"},"content":"        logger.setLevel(Level.WARNING);","lastModifiedDate":"2021-10-18"},{"lineNumber":62,"author":{"gitId":"xkisxk"},"content":"        logger.log(Level.INFO, \"starting review\");","lastModifiedDate":"2021-10-18"},{"lineNumber":63,"author":{"gitId":"xkisxk"},"content":"        ui.printStartReview();","lastModifiedDate":"2021-10-18"},{"lineNumber":64,"author":{"gitId":"xkisxk"},"content":"        String input \u003d ui.getUserMessage();","lastModifiedDate":"2021-10-21"},{"lineNumber":65,"author":{"gitId":"xkisxk"},"content":"        try {","lastModifiedDate":"2021-10-21"},{"lineNumber":66,"author":{"gitId":"xkisxk"},"content":"            logger.log(Level.INFO, \"choosing deck to test\");","lastModifiedDate":"2021-10-21"},{"lineNumber":67,"author":{"gitId":"xkisxk"},"content":"            int deckIndex \u003d TestParser.toInt(input);","lastModifiedDate":"2021-10-21"},{"lineNumber":68,"author":{"gitId":"xkisxk"},"content":"            Deck deckToReview \u003d TestHistory.getLowScoringCards(deckIndex);","lastModifiedDate":"2021-10-21"},{"lineNumber":69,"author":{"gitId":"xkisxk"},"content":"            reviewCards(deckToReview);","lastModifiedDate":"2021-10-19"},{"lineNumber":70,"author":{"gitId":"xkisxk"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2021-10-21"},{"lineNumber":71,"author":{"gitId":"xkisxk"},"content":"            System.out.println(\"Incorrect input format, make sure the description is a numeric.\");","lastModifiedDate":"2021-10-21"},{"lineNumber":72,"author":{"gitId":"xkisxk"},"content":"            logger.log(Level.WARNING, \"Incorrect format causing NumberFormatException\");","lastModifiedDate":"2021-10-21"},{"lineNumber":73,"author":{"gitId":"xkisxk"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2021-10-21"},{"lineNumber":74,"author":{"gitId":"xkisxk"},"content":"            ui.showMessage(e.getMessage());","lastModifiedDate":"2021-10-21"},{"lineNumber":75,"author":{"gitId":"xkisxk"},"content":"            logger.log(Level.WARNING, \"Incorrect format causing IndexOutOfBoundsException\");","lastModifiedDate":"2021-10-21"},{"lineNumber":76,"author":{"gitId":"xkisxk"},"content":"        } catch (EmptyDeckException e) {","lastModifiedDate":"2021-10-21"},{"lineNumber":77,"author":{"gitId":"xkisxk"},"content":"            ui.showMessage(\"Congratulations you don\u0027t have any low scoring cards!\");","lastModifiedDate":"2021-10-21"},{"lineNumber":78,"author":{"gitId":"xkisxk"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":79,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":80,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":81,"author":{"gitId":"xkisxk"},"content":"    /**","lastModifiedDate":"2021-10-18"},{"lineNumber":82,"author":{"gitId":"xkisxk"},"content":"     * Reviews the lowest scoring deck of all tests.","lastModifiedDate":"2021-10-18"},{"lineNumber":83,"author":{"gitId":"xkisxk"},"content":"     */","lastModifiedDate":"2021-10-18"},{"lineNumber":84,"author":{"gitId":"xkisxk"},"content":"    public static void reviewCards(Deck deckToReview) throws EmptyDeckException {","lastModifiedDate":"2021-10-21"},{"lineNumber":85,"author":{"gitId":"xkisxk"},"content":"        logger.log(Level.INFO, \"Reviewing low scoring cards\");","lastModifiedDate":"2021-10-18"},{"lineNumber":86,"author":{"gitId":"xkisxk"},"content":"        ui.printReviewCard();","lastModifiedDate":"2021-10-18"},{"lineNumber":87,"author":{"gitId":"xkisxk"},"content":"        AnswerList answerList \u003d new AnswerList(deckToReview);","lastModifiedDate":"2021-10-18"},{"lineNumber":88,"author":{"gitId":"JWweiyin"},"content":"        testAllCardsShuffled(answerList);","lastModifiedDate":"2021-10-20"},{"lineNumber":89,"author":{"gitId":"xkisxk"},"content":"        TestHistory.addAnswerList(answerList);","lastModifiedDate":"2021-10-18"},{"lineNumber":90,"author":{"gitId":"xkisxk"},"content":"        markTest(answerList);","lastModifiedDate":"2021-10-21"},{"lineNumber":91,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":92,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":93,"author":{"gitId":"xRossKoh"},"content":"    /**","lastModifiedDate":"2021-10-06"},{"lineNumber":94,"author":{"gitId":"xkisxk"},"content":"     * Goes through all the flashcards and stores the user\u0027s responses into userAnswer ArrayList.","lastModifiedDate":"2021-10-21"},{"lineNumber":95,"author":{"gitId":"xRossKoh"},"content":"     */","lastModifiedDate":"2021-10-06"},{"lineNumber":96,"author":{"gitId":"xkisxk"},"content":"    public static void testAllCardsShuffled(AnswerList userAnswer) throws EmptyDeckException {","lastModifiedDate":"2021-10-21"},{"lineNumber":97,"author":{"gitId":"ThaddeusLim99"},"content":"        logger.setLevel(Level.WARNING);","lastModifiedDate":"2021-10-14"},{"lineNumber":98,"author":{"gitId":"xkisxk"},"content":"        ArrayList\u003cFlashCard\u003e deckReplicate \u003d userAnswer.getDeck().getCards();","lastModifiedDate":"2021-10-21"},{"lineNumber":99,"author":{"gitId":"xkisxk"},"content":"        if (deckReplicate.isEmpty()) {","lastModifiedDate":"2021-10-21"},{"lineNumber":100,"author":{"gitId":"xkisxk"},"content":"            throw new EmptyDeckException(\"There are no cards to test.\");","lastModifiedDate":"2021-10-21"},{"lineNumber":101,"author":{"gitId":"xkisxk"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":102,"author":{"gitId":"xRossKoh"},"content":"        Collections.shuffle(deckReplicate);","lastModifiedDate":"2021-10-18"},{"lineNumber":103,"author":{"gitId":"xRossKoh"},"content":"        logger.log(Level.INFO, \"replicated and shuffled flashcard list\");","lastModifiedDate":"2021-10-18"},{"lineNumber":104,"author":{"gitId":"xRossKoh"},"content":"        for (FlashCard question : deckReplicate) {","lastModifiedDate":"2021-10-18"},{"lineNumber":105,"author":{"gitId":"xkisxk"},"content":"            testCard(userAnswer, question);","lastModifiedDate":"2021-10-21"},{"lineNumber":106,"author":{"gitId":"xkisxk"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":107,"author":{"gitId":"xkisxk"},"content":"        ui.printDividerLine();","lastModifiedDate":"2021-10-21"},{"lineNumber":108,"author":{"gitId":"xkisxk"},"content":"        logger.log(Level.INFO, \"Finished test\");","lastModifiedDate":"2021-10-21"},{"lineNumber":109,"author":{"gitId":"xkisxk"},"content":"        //let user know testing is over","lastModifiedDate":"2021-10-21"},{"lineNumber":110,"author":{"gitId":"xkisxk"},"content":"        ui.printTestOver();","lastModifiedDate":"2021-10-21"},{"lineNumber":111,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":112,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":113,"author":{"gitId":"xkisxk"},"content":"    private static void testCard(AnswerList userAnswer, FlashCard question) {","lastModifiedDate":"2021-10-21"},{"lineNumber":114,"author":{"gitId":"ThaddeusLim99"},"content":"        logger.log(Level.INFO, \"starting to test a new card\");","lastModifiedDate":"2021-10-10"},{"lineNumber":115,"author":{"gitId":"xkisxk"},"content":"        int questionNumber \u003d userAnswer.getDeck().getCardIndex(question);","lastModifiedDate":"2021-10-21"},{"lineNumber":116,"author":{"gitId":"xkisxk"},"content":"        ui.printDividerLine();","lastModifiedDate":"2021-10-17"},{"lineNumber":117,"author":{"gitId":"xkisxk"},"content":"        ui.printQuestion(question, questionNumber);","lastModifiedDate":"2021-10-17"},{"lineNumber":118,"author":{"gitId":"ThaddeusLim99"},"content":"        //get user\u0027s answer to the card shown(currently assume user inputs only his/her answer)","lastModifiedDate":"2021-10-04"},{"lineNumber":119,"author":{"gitId":"ThaddeusLim99"},"content":"        //later version to include question number and parsing to allow for randomised testing","lastModifiedDate":"2021-10-04"},{"lineNumber":120,"author":{"gitId":"ThaddeusLim99"},"content":"        logger.log(Level.INFO, \"getting user\u0027s answer to the question\");","lastModifiedDate":"2021-10-10"},{"lineNumber":121,"author":{"gitId":"xkisxk"},"content":"        String userResponse \u003d ui.getUserMessage();","lastModifiedDate":"2021-10-17"},{"lineNumber":122,"author":{"gitId":"ThaddeusLim99"},"content":"        try {","lastModifiedDate":"2021-10-05"},{"lineNumber":123,"author":{"gitId":"xkisxk"},"content":"            userResponse \u003d TestParser.parseUserResponse(userResponse);","lastModifiedDate":"2021-10-17"},{"lineNumber":124,"author":{"gitId":"ThaddeusLim99"},"content":"        } catch (FieldEmptyException e) {","lastModifiedDate":"2021-10-05"},{"lineNumber":125,"author":{"gitId":"ThaddeusLim99"},"content":"            logger.log(Level.WARNING, \"No user input\");","lastModifiedDate":"2021-10-10"},{"lineNumber":126,"author":{"gitId":"ThaddeusLim99"},"content":"            userResponse \u003d \"NO ANSWER GIVEN :(\";","lastModifiedDate":"2021-10-05"},{"lineNumber":127,"author":{"gitId":"xkisxk"},"content":"            ui.printAnswerEmptyError();","lastModifiedDate":"2021-10-17"},{"lineNumber":128,"author":{"gitId":"ThaddeusLim99"},"content":"        }","lastModifiedDate":"2021-10-05"},{"lineNumber":129,"author":{"gitId":"ThaddeusLim99"},"content":"        logger.log(Level.INFO, \"Saving answer\");","lastModifiedDate":"2021-10-10"},{"lineNumber":130,"author":{"gitId":"xkisxk"},"content":"        userAnswer.addAnswer(userResponse, questionNumber);","lastModifiedDate":"2021-10-21"},{"lineNumber":131,"author":{"gitId":"xkisxk"},"content":"        assert !userAnswer.isEmpty();","lastModifiedDate":"2021-10-21"},{"lineNumber":132,"author":{"gitId":"xkisxk"},"content":"        assert userAnswer.getSize() \u003e 0;","lastModifiedDate":"2021-10-21"},{"lineNumber":133,"author":{"gitId":"ThaddeusLim99"},"content":"        logger.log(Level.INFO, \"Finished this card\u0027s testing\");","lastModifiedDate":"2021-10-10"},{"lineNumber":134,"author":{"gitId":"ThaddeusLim99"},"content":"    }","lastModifiedDate":"2021-10-04"},{"lineNumber":135,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":136,"author":{"gitId":"xRossKoh"},"content":"    /**","lastModifiedDate":"2021-10-06"},{"lineNumber":137,"author":{"gitId":"xkisxk"},"content":"     * Marks the user\u0027s answers then print their results of test to system output.","lastModifiedDate":"2021-10-21"},{"lineNumber":138,"author":{"gitId":"xRossKoh"},"content":"     */","lastModifiedDate":"2021-10-06"},{"lineNumber":139,"author":{"gitId":"xkisxk"},"content":"    public static void markTest(AnswerList userAnswers) {","lastModifiedDate":"2021-10-21"},{"lineNumber":140,"author":{"gitId":"ThaddeusLim99"},"content":"        logger.setLevel(Level.WARNING);","lastModifiedDate":"2021-10-14"},{"lineNumber":141,"author":{"gitId":"xRossKoh"},"content":"        logger.log(Level.INFO, \"starting test check\");","lastModifiedDate":"2021-10-14"},{"lineNumber":142,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":143,"author":{"gitId":"ThaddeusLim99"},"content":"        //there must be at least one response to start a test","lastModifiedDate":"2021-10-14"},{"lineNumber":144,"author":{"gitId":"xkisxk"},"content":"        assert userAnswers.getSize() \u003e 0;","lastModifiedDate":"2021-10-21"},{"lineNumber":145,"author":{"gitId":"xkisxk"},"content":"        for (Answer response : userAnswers.getAnswerList()) {","lastModifiedDate":"2021-10-21"},{"lineNumber":146,"author":{"gitId":"xkisxk"},"content":"            markQuestion(userAnswers, response);","lastModifiedDate":"2021-10-21"},{"lineNumber":147,"author":{"gitId":"xkisxk"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":148,"author":{"gitId":"xkisxk"},"content":"        ui.printDividerLine();","lastModifiedDate":"2021-10-21"},{"lineNumber":149,"author":{"gitId":"xkisxk"},"content":"        int answersCount \u003d userAnswers.getSize();","lastModifiedDate":"2021-10-21"},{"lineNumber":150,"author":{"gitId":"xkisxk"},"content":"        int score \u003d userAnswers.getUserScore();","lastModifiedDate":"2021-10-21"},{"lineNumber":151,"author":{"gitId":"xkisxk"},"content":"        assert score \u003c\u003d answersCount;","lastModifiedDate":"2021-10-21"},{"lineNumber":152,"author":{"gitId":"xkisxk"},"content":"        System.out.println(\"You scored \" + score + \" out of \" + answersCount + \" for this test.\");","lastModifiedDate":"2021-10-21"},{"lineNumber":153,"author":{"gitId":"xkisxk"},"content":"        System.out.println(\"That is \" + Double.valueOf(score) / answersCount * 100 + \"%!\");","lastModifiedDate":"2021-10-21"},{"lineNumber":154,"author":{"gitId":"xkisxk"},"content":"        logger.log(Level.INFO, \"all answers checked, score printed to system output\");","lastModifiedDate":"2021-10-21"},{"lineNumber":155,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":156,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":157,"author":{"gitId":"xkisxk"},"content":"    // Marks the user\u0027s answer","lastModifiedDate":"2021-10-21"},{"lineNumber":158,"author":{"gitId":"xkisxk"},"content":"    private static void markQuestion(AnswerList userAnswers, Answer response) {","lastModifiedDate":"2021-10-21"},{"lineNumber":159,"author":{"gitId":"xkisxk"},"content":"        int responseNumber \u003d userAnswers.getAnswerIndex(response);","lastModifiedDate":"2021-10-21"},{"lineNumber":160,"author":{"gitId":"xkisxk"},"content":"        FlashCard question \u003d userAnswers.getDeck().getCard(responseNumber);","lastModifiedDate":"2021-10-21"},{"lineNumber":161,"author":{"gitId":"xkisxk"},"content":"        String userAnswer \u003d response.getAnswer();","lastModifiedDate":"2021-10-17"},{"lineNumber":162,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":163,"author":{"gitId":"xkisxk"},"content":"        ui.printDividerLine();","lastModifiedDate":"2021-10-17"},{"lineNumber":164,"author":{"gitId":"ThaddeusLim99"},"content":"        //display front of card so that user can understand question","lastModifiedDate":"2021-10-04"},{"lineNumber":165,"author":{"gitId":"xkisxk"},"content":"        ui.printQuestion(question, responseNumber);","lastModifiedDate":"2021-10-17"},{"lineNumber":166,"author":{"gitId":"xkisxk"},"content":"        ui.printCorrectAnswer(question);","lastModifiedDate":"2021-10-17"},{"lineNumber":167,"author":{"gitId":"xkisxk"},"content":"        ui.printUserAnswer(userAnswer);","lastModifiedDate":"2021-10-17"},{"lineNumber":168,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":169,"author":{"gitId":"xkisxk"},"content":"        if (response.isCorrect(userAnswer, question)) {","lastModifiedDate":"2021-10-17"},{"lineNumber":170,"author":{"gitId":"xkisxk"},"content":"            userAnswers.incrementUserScore();","lastModifiedDate":"2021-10-21"},{"lineNumber":171,"author":{"gitId":"xkisxk"},"content":"            question.incrementUserScore();","lastModifiedDate":"2021-10-17"},{"lineNumber":172,"author":{"gitId":"xkisxk"},"content":"            ui.printCorrectAnsMessage();","lastModifiedDate":"2021-10-17"},{"lineNumber":173,"author":{"gitId":"xRossKoh"},"content":"            logger.log(Level.INFO, \"user answer is correct\");","lastModifiedDate":"2021-10-14"},{"lineNumber":174,"author":{"gitId":"xRossKoh"},"content":"        } else {","lastModifiedDate":"2021-10-06"},{"lineNumber":175,"author":{"gitId":"xkisxk"},"content":"            ui.printWrongAnsMessage();","lastModifiedDate":"2021-10-17"},{"lineNumber":176,"author":{"gitId":"xRossKoh"},"content":"            logger.log(Level.INFO, \"user answer is wrong\");","lastModifiedDate":"2021-10-14"},{"lineNumber":177,"author":{"gitId":"xRossKoh"},"content":"        }","lastModifiedDate":"2021-10-06"},{"lineNumber":178,"author":{"gitId":"xkisxk"},"content":"        question.incrementTotalScore();","lastModifiedDate":"2021-10-17"},{"lineNumber":179,"author":{"gitId":"ThaddeusLim99"},"content":"    }","lastModifiedDate":"2021-10-04"},{"lineNumber":180,"author":{"gitId":"ThaddeusLim99"},"content":"}","lastModifiedDate":"2021-10-04"}],"authorContributionMap":{"JWweiyin":1,"ThaddeusLim99":27,"xRossKoh":19,"xkisxk":133}},{"path":"src/main/java/seedu/duke/ui/CardLiUi.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"xkisxk"},"content":"package seedu.duke.ui;","lastModifiedDate":"2021-10-16"},{"lineNumber":2,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-02"},{"lineNumber":3,"author":{"gitId":"xkisxk"},"content":"import java.io.InputStream;","lastModifiedDate":"2021-10-02"},{"lineNumber":4,"author":{"gitId":"xkisxk"},"content":"import java.io.PrintStream;","lastModifiedDate":"2021-10-02"},{"lineNumber":5,"author":{"gitId":"xkisxk"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-10-02"},{"lineNumber":6,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-02"},{"lineNumber":7,"author":{"gitId":"xkisxk"},"content":"public class CardLiUi {","lastModifiedDate":"2021-10-02"},{"lineNumber":8,"author":{"gitId":"xkisxk"},"content":"    private final Scanner in;","lastModifiedDate":"2021-10-02"},{"lineNumber":9,"author":{"gitId":"xkisxk"},"content":"    private final PrintStream out;","lastModifiedDate":"2021-10-02"},{"lineNumber":10,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-02"},{"lineNumber":11,"author":{"gitId":"xkisxk"},"content":"    public CardLiUi() {","lastModifiedDate":"2021-10-02"},{"lineNumber":12,"author":{"gitId":"xkisxk"},"content":"        this(System.in, System.out);","lastModifiedDate":"2021-10-02"},{"lineNumber":13,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-02"},{"lineNumber":14,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-02"},{"lineNumber":15,"author":{"gitId":"xkisxk"},"content":"    public CardLiUi(InputStream in, PrintStream out) {","lastModifiedDate":"2021-10-02"},{"lineNumber":16,"author":{"gitId":"xkisxk"},"content":"        this.in \u003d new Scanner(in);","lastModifiedDate":"2021-10-02"},{"lineNumber":17,"author":{"gitId":"xkisxk"},"content":"        this.out \u003d out;","lastModifiedDate":"2021-10-02"},{"lineNumber":18,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-02"},{"lineNumber":19,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-02"},{"lineNumber":20,"author":{"gitId":"xkisxk"},"content":"    public String getUserMessage() {","lastModifiedDate":"2021-10-02"},{"lineNumber":21,"author":{"gitId":"xkisxk"},"content":"        return in.nextLine();","lastModifiedDate":"2021-10-02"},{"lineNumber":22,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-02"},{"lineNumber":23,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-02"},{"lineNumber":24,"author":{"gitId":"ThaddeusLim99"},"content":"    public void showMessage(String input) {","lastModifiedDate":"2021-10-17"},{"lineNumber":25,"author":{"gitId":"ThaddeusLim99"},"content":"        System.out.println(input);","lastModifiedDate":"2021-10-17"},{"lineNumber":26,"author":{"gitId":"ThaddeusLim99"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":27,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":28,"author":{"gitId":"xkisxk"},"content":"    public void printByeMessage() {","lastModifiedDate":"2021-10-02"},{"lineNumber":29,"author":{"gitId":"xkisxk"},"content":"        System.out.println(\"\\tYou did well today! Goodbye!\");","lastModifiedDate":"2021-10-02"},{"lineNumber":30,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-02"},{"lineNumber":31,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-02"},{"lineNumber":32,"author":{"gitId":"ThaddeusLim99"},"content":"    public static void helpMessage() {","lastModifiedDate":"2021-10-18"},{"lineNumber":33,"author":{"gitId":"ThaddeusLim99"},"content":"        String help \u003d \"\\n\"","lastModifiedDate":"2021-10-18"},{"lineNumber":34,"author":{"gitId":"ThaddeusLim99"},"content":"                + \"................................................................................\"","lastModifiedDate":"2021-10-18"},{"lineNumber":35,"author":{"gitId":"ThaddeusLim99"},"content":"                + \"....................................... \\n\"","lastModifiedDate":"2021-10-18"},{"lineNumber":36,"author":{"gitId":"ThaddeusLim99"},"content":"                + \"Here is the list  of commands! \\n\"","lastModifiedDate":"2021-10-18"},{"lineNumber":37,"author":{"gitId":"ThaddeusLim99"},"content":"                + \"1. adddeck \\n\"","lastModifiedDate":"2021-10-18"},{"lineNumber":38,"author":{"gitId":"ThaddeusLim99"},"content":"                + \"Description: Adds a flashcard deck \\n\"","lastModifiedDate":"2021-10-18"},{"lineNumber":39,"author":{"gitId":"ThaddeusLim99"},"content":"                + \"Format: adddeck \u003cname of deck\u003e \\n\\n\"","lastModifiedDate":"2021-10-18"},{"lineNumber":40,"author":{"gitId":"JWweiyin"},"content":"                + \"2. editdeck \\n\"","lastModifiedDate":"2021-10-20"},{"lineNumber":41,"author":{"gitId":"ThaddeusLim99"},"content":"                + \"Description: Edits a flashcard deck \\n\"","lastModifiedDate":"2021-10-18"},{"lineNumber":42,"author":{"gitId":"ThaddeusLim99"},"content":"                + \"Format: editdeck /deck \u003cindex of deck\u003e /input \u003cword/phrase\u003e \\n\\n\"","lastModifiedDate":"2021-10-18"},{"lineNumber":43,"author":{"gitId":"JWweiyin"},"content":"                + \"3. viewdecks \\n\"","lastModifiedDate":"2021-10-20"},{"lineNumber":44,"author":{"gitId":"ThaddeusLim99"},"content":"                + \"Description: List flashcard decks \\n\"","lastModifiedDate":"2021-10-18"},{"lineNumber":45,"author":{"gitId":"xRossKoh"},"content":"                + \"Format: viewdecks \\n\\n\"","lastModifiedDate":"2021-10-18"},{"lineNumber":46,"author":{"gitId":"JWweiyin"},"content":"                + \"4. enter \\n\"","lastModifiedDate":"2021-10-20"},{"lineNumber":47,"author":{"gitId":"JWweiyin"},"content":"                + \"Description: Enters a flashcard deck (further actions can be taken)\\n\"","lastModifiedDate":"2021-10-20"},{"lineNumber":48,"author":{"gitId":"JWweiyin"},"content":"                + \"Format: enter \u003cindex of deck\u003e \\n\\n\"","lastModifiedDate":"2021-10-20"},{"lineNumber":49,"author":{"gitId":"JWweiyin"},"content":"                + \"5. test \\n\"","lastModifiedDate":"2021-10-20"},{"lineNumber":50,"author":{"gitId":"ThaddeusLim99"},"content":"                + \"Description: Testing flashcards within a deck \\n\"","lastModifiedDate":"2021-10-18"},{"lineNumber":51,"author":{"gitId":"ThaddeusLim99"},"content":"                + \"Format: test \\n\\n\"","lastModifiedDate":"2021-10-18"},{"lineNumber":52,"author":{"gitId":"JWweiyin"},"content":"                + \"6. viewfc \\n\"","lastModifiedDate":"2021-10-20"},{"lineNumber":53,"author":{"gitId":"ThaddeusLim99"},"content":"                + \"Description: view overall results for flashcards \\n\"","lastModifiedDate":"2021-10-18"},{"lineNumber":54,"author":{"gitId":"ThaddeusLim99"},"content":"                + \"Format: viewfc \\n\\n\"","lastModifiedDate":"2021-10-18"},{"lineNumber":55,"author":{"gitId":"JWweiyin"},"content":"                + \"7. viewtests \\n\"","lastModifiedDate":"2021-10-20"},{"lineNumber":56,"author":{"gitId":"ThaddeusLim99"},"content":"                + \"Description: view results of all the test \\n\"","lastModifiedDate":"2021-10-18"},{"lineNumber":57,"author":{"gitId":"ThaddeusLim99"},"content":"                + \"Format: viewtests \\n\\n\"","lastModifiedDate":"2021-10-18"},{"lineNumber":58,"author":{"gitId":"JWweiyin"},"content":"                + \"8. viewtest \\n\"","lastModifiedDate":"2021-10-20"},{"lineNumber":59,"author":{"gitId":"ThaddeusLim99"},"content":"                + \"Description: view result of a test \\n\"","lastModifiedDate":"2021-10-18"},{"lineNumber":60,"author":{"gitId":"ThaddeusLim99"},"content":"                + \"Format: viewtest \u003ctest index\u003e \\n\\n\"","lastModifiedDate":"2021-10-18"},{"lineNumber":61,"author":{"gitId":"JWweiyin"},"content":"                + \"9. review \\n\"","lastModifiedDate":"2021-10-20"},{"lineNumber":62,"author":{"gitId":"ThaddeusLim99"},"content":"                + \"Description: Enter review mode, which is same as test mode but tests cards \"","lastModifiedDate":"2021-10-18"},{"lineNumber":63,"author":{"gitId":"ThaddeusLim99"},"content":"                + \"that the user got wrong more often \\n\"","lastModifiedDate":"2021-10-18"},{"lineNumber":64,"author":{"gitId":"ThaddeusLim99"},"content":"                + \"Format: review \\n\\n\"","lastModifiedDate":"2021-10-18"},{"lineNumber":65,"author":{"gitId":"JWweiyin"},"content":"                + \"10. find \\n\"","lastModifiedDate":"2021-10-20"},{"lineNumber":66,"author":{"gitId":"ThaddeusLim99"},"content":"                + \"Description: finds card using word/phrase of the query \\n\"","lastModifiedDate":"2021-10-18"},{"lineNumber":67,"author":{"gitId":"ThaddeusLim99"},"content":"                + \"Format: find \u003cword/phrase\u003e \\n\\n\"","lastModifiedDate":"2021-10-18"},{"lineNumber":68,"author":{"gitId":"JWweiyin"},"content":"                + \"11. save \\n\"","lastModifiedDate":"2021-10-20"},{"lineNumber":69,"author":{"gitId":"ThaddeusLim99"},"content":"                + \"Description: saves the current status of the cards to a text file \\n\"","lastModifiedDate":"2021-10-18"},{"lineNumber":70,"author":{"gitId":"ThaddeusLim99"},"content":"                + \"Format: save \\n\"","lastModifiedDate":"2021-10-18"},{"lineNumber":71,"author":{"gitId":"ThaddeusLim99"},"content":"                + \"................................................................................\"","lastModifiedDate":"2021-10-18"},{"lineNumber":72,"author":{"gitId":"ThaddeusLim99"},"content":"                + \"....................................... \\n\";","lastModifiedDate":"2021-10-18"},{"lineNumber":73,"author":{"gitId":"JWweiyin"},"content":"        System.out.println(help);","lastModifiedDate":"2021-10-20"},{"lineNumber":74,"author":{"gitId":"JWweiyin"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":75,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":76,"author":{"gitId":"JWweiyin"},"content":"    public static void helpInDeck() {","lastModifiedDate":"2021-10-20"},{"lineNumber":77,"author":{"gitId":"JWweiyin"},"content":"        String help \u003d \"\\n\"","lastModifiedDate":"2021-10-20"},{"lineNumber":78,"author":{"gitId":"JWweiyin"},"content":"                + \"................................................................................\\\"\\n\"","lastModifiedDate":"2021-10-20"},{"lineNumber":79,"author":{"gitId":"JWweiyin"},"content":"                + \"....................................... \\\\n\\\"\\n\"","lastModifiedDate":"2021-10-20"},{"lineNumber":80,"author":{"gitId":"JWweiyin"},"content":"                + \"Here is the list of commands! \\n\"","lastModifiedDate":"2021-10-20"},{"lineNumber":81,"author":{"gitId":"JWweiyin"},"content":"                + \"1. add \\n\"","lastModifiedDate":"2021-10-20"},{"lineNumber":82,"author":{"gitId":"JWweiyin"},"content":"                + \"Description: Adds a flashcard to a deck \\n\"","lastModifiedDate":"2021-10-20"},{"lineNumber":83,"author":{"gitId":"JWweiyin"},"content":"                + \"Format: add /fro \u003cword/phrase on front of flashcard\u003e /bac\"","lastModifiedDate":"2021-10-20"},{"lineNumber":84,"author":{"gitId":"JWweiyin"},"content":"                + \" \u003cword/phrase on back of flashcard\u003e \\n\\n\"","lastModifiedDate":"2021-10-20"},{"lineNumber":85,"author":{"gitId":"JWweiyin"},"content":"                + \"2. delete \\n\"","lastModifiedDate":"2021-10-20"},{"lineNumber":86,"author":{"gitId":"JWweiyin"},"content":"                + \"Description: Deletes a flashcard \\n\"","lastModifiedDate":"2021-10-20"},{"lineNumber":87,"author":{"gitId":"JWweiyin"},"content":"                + \"Format: delete \u003cword/phrase/index\u003e \\n\\n\"","lastModifiedDate":"2021-10-20"},{"lineNumber":88,"author":{"gitId":"JWweiyin"},"content":"                + \"3. edit \\n\"","lastModifiedDate":"2021-10-20"},{"lineNumber":89,"author":{"gitId":"JWweiyin"},"content":"                + \"Description: Edits a flashcard \\n\"","lastModifiedDate":"2021-10-20"},{"lineNumber":90,"author":{"gitId":"JWweiyin"},"content":"                + \"Format: edit /card \u003cindex of card\u003e /side \u003cfront\"","lastModifiedDate":"2021-10-20"},{"lineNumber":91,"author":{"gitId":"JWweiyin"},"content":"                + \" or back of card\u003e /input \u003cword/phrase\u003e \\n\\n\"","lastModifiedDate":"2021-10-20"},{"lineNumber":92,"author":{"gitId":"JWweiyin"},"content":"                + \"4. view \\n\"","lastModifiedDate":"2021-10-20"},{"lineNumber":93,"author":{"gitId":"JWweiyin"},"content":"                + \"Description: List flashcards in the current deck \\n\"","lastModifiedDate":"2021-10-20"},{"lineNumber":94,"author":{"gitId":"JWweiyin"},"content":"                + \"Format: view\\n\\n\"","lastModifiedDate":"2021-10-20"},{"lineNumber":95,"author":{"gitId":"JWweiyin"},"content":"                + \"5. exit \\n\"","lastModifiedDate":"2021-10-20"},{"lineNumber":96,"author":{"gitId":"JWweiyin"},"content":"                + \"Description: Returns the program to main menu. \\n\"","lastModifiedDate":"2021-10-20"},{"lineNumber":97,"author":{"gitId":"JWweiyin"},"content":"                + \"Format: exit \\n\\n\"","lastModifiedDate":"2021-10-20"},{"lineNumber":98,"author":{"gitId":"JWweiyin"},"content":"                + \"................................................................................\"","lastModifiedDate":"2021-10-20"},{"lineNumber":99,"author":{"gitId":"JWweiyin"},"content":"                + \"....................................... \\n\";","lastModifiedDate":"2021-10-20"},{"lineNumber":100,"author":{"gitId":"ThaddeusLim99"},"content":"        System.out.println(help);","lastModifiedDate":"2021-10-18"},{"lineNumber":101,"author":{"gitId":"ThaddeusLim99"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":102,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":103,"author":{"gitId":"xkisxk"},"content":"    public void printGreetingMessage() {","lastModifiedDate":"2021-10-02"},{"lineNumber":104,"author":{"gitId":"xkisxk"},"content":"        String logo \u003d \"\\n\"","lastModifiedDate":"2021-10-02"},{"lineNumber":105,"author":{"gitId":"xkisxk"},"content":"                + \" .----------------.  .----------------.  .----------------.  .----------------. \"","lastModifiedDate":"2021-10-02"},{"lineNumber":106,"author":{"gitId":"xkisxk"},"content":"                + \" .----------------.  .----------------.\\n\"","lastModifiedDate":"2021-10-02"},{"lineNumber":107,"author":{"gitId":"xkisxk"},"content":"                + \"| .--------------. || .--------------. || .--------------. || .--------------. |\"","lastModifiedDate":"2021-10-02"},{"lineNumber":108,"author":{"gitId":"xkisxk"},"content":"                + \"| .--------------. || .--------------. |\\n\"","lastModifiedDate":"2021-10-02"},{"lineNumber":109,"author":{"gitId":"xkisxk"},"content":"                + \"| |     ______   | || |      __      | || |  _______     | || |  ________    | ||\"","lastModifiedDate":"2021-10-02"},{"lineNumber":110,"author":{"gitId":"xkisxk"},"content":"                + \" |   _____      | || |     _____    | |\\n\"","lastModifiedDate":"2021-10-02"},{"lineNumber":111,"author":{"gitId":"xkisxk"},"content":"                + \"| |   .\u0027 ___  |  | || |     /  \\\\     | || | |_   __ \\\\    | || | |_   ___ `.  | ||\"","lastModifiedDate":"2021-10-02"},{"lineNumber":112,"author":{"gitId":"xkisxk"},"content":"                + \" |  |_   _|     | || |    |_   _|   | |\\n\"","lastModifiedDate":"2021-10-02"},{"lineNumber":113,"author":{"gitId":"xkisxk"},"content":"                + \"| |  / .\u0027   \\\\_|  | || |    / /\\\\ \\\\    | || |   | |__) |   | || |   | |   `. \\\\ |\"","lastModifiedDate":"2021-10-02"},{"lineNumber":114,"author":{"gitId":"xkisxk"},"content":"                + \" || |    | |       | || |      | |     | |\\n\"","lastModifiedDate":"2021-10-02"},{"lineNumber":115,"author":{"gitId":"xkisxk"},"content":"                + \"| |  | |         | || |   / ____ \\\\   | || |   |  __ /    | || |   | |    | | | ||\"","lastModifiedDate":"2021-10-02"},{"lineNumber":116,"author":{"gitId":"xkisxk"},"content":"                + \" |    | |   _   | || |      | |     | |\\n\"","lastModifiedDate":"2021-10-02"},{"lineNumber":117,"author":{"gitId":"xkisxk"},"content":"                + \"| |  \\\\ `.___.\u0027\\\\  | || | _/ /    \\\\ \\\\_ | || |  _| |  \\\\ \\\\_  | || |  _| |___.\u0027 \"","lastModifiedDate":"2021-10-02"},{"lineNumber":118,"author":{"gitId":"xkisxk"},"content":"                + \"/ | || |   _| |__/ |  | || |     _| |_    | |\\n\"","lastModifiedDate":"2021-10-02"},{"lineNumber":119,"author":{"gitId":"xkisxk"},"content":"                + \"| |   `._____.\u0027  | || ||____|  |____|| || | |____| |___| | || | |________.\u0027  | || \"","lastModifiedDate":"2021-10-02"},{"lineNumber":120,"author":{"gitId":"xkisxk"},"content":"                + \"|  |________|  | || |    |_____|   | |\\n\"","lastModifiedDate":"2021-10-02"},{"lineNumber":121,"author":{"gitId":"xkisxk"},"content":"                + \"| |              | || |              | || |              | || |              | || \"","lastModifiedDate":"2021-10-02"},{"lineNumber":122,"author":{"gitId":"xkisxk"},"content":"                + \"|              | || |              | |\\n\"","lastModifiedDate":"2021-10-02"},{"lineNumber":123,"author":{"gitId":"xkisxk"},"content":"                + \"| \u0027--------------\u0027 || \u0027--------------\u0027 || \u0027--------------\u0027 || \u0027--------------\u0027 |\"","lastModifiedDate":"2021-10-02"},{"lineNumber":124,"author":{"gitId":"xkisxk"},"content":"                + \"| \u0027--------------\u0027 || \u0027--------------\u0027 |\\n\"","lastModifiedDate":"2021-10-02"},{"lineNumber":125,"author":{"gitId":"xkisxk"},"content":"                + \" \u0027----------------\u0027  \u0027----------------\u0027  \u0027----------------\u0027  \u0027----------------\u0027 \"","lastModifiedDate":"2021-10-02"},{"lineNumber":126,"author":{"gitId":"xkisxk"},"content":"                + \" \u0027----------------\u0027  \u0027----------------\u0027\\n\";","lastModifiedDate":"2021-10-02"},{"lineNumber":127,"author":{"gitId":"xkisxk"},"content":"        System.out.println(\"Welcome to\\n\" + logo);","lastModifiedDate":"2021-10-02"},{"lineNumber":128,"author":{"gitId":"xkisxk"},"content":"        System.out.println(\"Let\u0027s get started!\");","lastModifiedDate":"2021-10-02"},{"lineNumber":129,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-02"},{"lineNumber":130,"author":{"gitId":"xkisxk"},"content":"}","lastModifiedDate":"2021-10-02"}],"authorContributionMap":{"JWweiyin":39,"ThaddeusLim99":35,"xRossKoh":1,"xkisxk":55}},{"path":"src/main/java/seedu/duke/ui/TestUi.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"xkisxk"},"content":"package seedu.duke.ui;","lastModifiedDate":"2021-10-17"},{"lineNumber":2,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":3,"author":{"gitId":"xkisxk"},"content":"import seedu.duke.flashcard.FlashCard;","lastModifiedDate":"2021-10-17"},{"lineNumber":4,"author":{"gitId":"xkisxk"},"content":"import seedu.duke.testing.AnswerList;","lastModifiedDate":"2021-10-19"},{"lineNumber":5,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":6,"author":{"gitId":"xkisxk"},"content":"import java.io.InputStream;","lastModifiedDate":"2021-10-17"},{"lineNumber":7,"author":{"gitId":"xkisxk"},"content":"import java.io.PrintStream;","lastModifiedDate":"2021-10-17"},{"lineNumber":8,"author":{"gitId":"xkisxk"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-10-17"},{"lineNumber":9,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":10,"author":{"gitId":"xkisxk"},"content":"/**","lastModifiedDate":"2021-10-17"},{"lineNumber":11,"author":{"gitId":"xkisxk"},"content":" * TestUi class handles the input and output during a test or a review.","lastModifiedDate":"2021-10-17"},{"lineNumber":12,"author":{"gitId":"xkisxk"},"content":" */","lastModifiedDate":"2021-10-17"},{"lineNumber":13,"author":{"gitId":"xkisxk"},"content":"public class TestUi {","lastModifiedDate":"2021-10-17"},{"lineNumber":14,"author":{"gitId":"xkisxk"},"content":"    private final Scanner in;","lastModifiedDate":"2021-10-17"},{"lineNumber":15,"author":{"gitId":"xkisxk"},"content":"    private final PrintStream out;","lastModifiedDate":"2021-10-17"},{"lineNumber":16,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":17,"author":{"gitId":"xkisxk"},"content":"    public TestUi() {","lastModifiedDate":"2021-10-17"},{"lineNumber":18,"author":{"gitId":"xkisxk"},"content":"        this(System.in, System.out);","lastModifiedDate":"2021-10-17"},{"lineNumber":19,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":20,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":21,"author":{"gitId":"xkisxk"},"content":"    public TestUi(InputStream in, PrintStream out) {","lastModifiedDate":"2021-10-17"},{"lineNumber":22,"author":{"gitId":"xkisxk"},"content":"        this.in \u003d new Scanner(in);","lastModifiedDate":"2021-10-17"},{"lineNumber":23,"author":{"gitId":"xkisxk"},"content":"        this.out \u003d out;","lastModifiedDate":"2021-10-17"},{"lineNumber":24,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":25,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":26,"author":{"gitId":"xkisxk"},"content":"    public void showMessage(String input) {","lastModifiedDate":"2021-10-21"},{"lineNumber":27,"author":{"gitId":"xkisxk"},"content":"        System.out.println(input);","lastModifiedDate":"2021-10-21"},{"lineNumber":28,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":29,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":30,"author":{"gitId":"xkisxk"},"content":"    public String getUserMessage() {","lastModifiedDate":"2021-10-17"},{"lineNumber":31,"author":{"gitId":"xkisxk"},"content":"        return in.nextLine();","lastModifiedDate":"2021-10-17"},{"lineNumber":32,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":33,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":34,"author":{"gitId":"xkisxk"},"content":"    public void printDividerLine() {","lastModifiedDate":"2021-10-17"},{"lineNumber":35,"author":{"gitId":"xkisxk"},"content":"        System.out.println(\"--------------------------------------------------\");","lastModifiedDate":"2021-10-17"},{"lineNumber":36,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":37,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":38,"author":{"gitId":"xkisxk"},"content":"    public void printQuestion(FlashCard question, int questionNumber) {","lastModifiedDate":"2021-10-17"},{"lineNumber":39,"author":{"gitId":"xkisxk"},"content":"        System.out.println(\"Question \" + (questionNumber + 1) + \":\");","lastModifiedDate":"2021-10-17"},{"lineNumber":40,"author":{"gitId":"xkisxk"},"content":"        //display front of card so that user can understand question","lastModifiedDate":"2021-10-17"},{"lineNumber":41,"author":{"gitId":"xkisxk"},"content":"        System.out.println(question.getFront());","lastModifiedDate":"2021-10-17"},{"lineNumber":42,"author":{"gitId":"xkisxk"},"content":"        System.out.println(\"Your answer?\");","lastModifiedDate":"2021-10-17"},{"lineNumber":43,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":44,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":45,"author":{"gitId":"xkisxk"},"content":"    public void printCorrectAnswer(FlashCard question) {","lastModifiedDate":"2021-10-17"},{"lineNumber":46,"author":{"gitId":"xkisxk"},"content":"        System.out.println(\"Correct answer: \" + question.getBack());","lastModifiedDate":"2021-10-17"},{"lineNumber":47,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":48,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":49,"author":{"gitId":"xkisxk"},"content":"    /**","lastModifiedDate":"2021-10-17"},{"lineNumber":50,"author":{"gitId":"xkisxk"},"content":"     * Prints user\u0027s answer for a specified question to the system output.","lastModifiedDate":"2021-10-17"},{"lineNumber":51,"author":{"gitId":"xkisxk"},"content":"     *","lastModifiedDate":"2021-10-17"},{"lineNumber":52,"author":{"gitId":"xkisxk"},"content":"     * @param userAnswer the user\u0027s answer for the question","lastModifiedDate":"2021-10-17"},{"lineNumber":53,"author":{"gitId":"xkisxk"},"content":"     */","lastModifiedDate":"2021-10-17"},{"lineNumber":54,"author":{"gitId":"xkisxk"},"content":"    public void printUserAnswer(String userAnswer) {","lastModifiedDate":"2021-10-17"},{"lineNumber":55,"author":{"gitId":"xkisxk"},"content":"        System.out.println(\"Your answer: \" + userAnswer);","lastModifiedDate":"2021-10-17"},{"lineNumber":56,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":57,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":58,"author":{"gitId":"xkisxk"},"content":"    public void printTestOver() {","lastModifiedDate":"2021-10-17"},{"lineNumber":59,"author":{"gitId":"xkisxk"},"content":"        System.out.println(\"Test Over\");","lastModifiedDate":"2021-10-17"},{"lineNumber":60,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":61,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":62,"author":{"gitId":"xkisxk"},"content":"    public void printStartTest() {","lastModifiedDate":"2021-10-17"},{"lineNumber":63,"author":{"gitId":"xkisxk"},"content":"        System.out.println(\"Starting test...\");","lastModifiedDate":"2021-10-17"},{"lineNumber":64,"author":{"gitId":"xkisxk"},"content":"        System.out.println(\"Which deck do you want to test?\");","lastModifiedDate":"2021-10-17"},{"lineNumber":65,"author":{"gitId":"xkisxk"},"content":"        System.out.print(\"Input an integer (or \\\"all\\\" to review all decks): \");","lastModifiedDate":"2021-10-21"},{"lineNumber":66,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":67,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":68,"author":{"gitId":"xkisxk"},"content":"    public void printStartReview() {","lastModifiedDate":"2021-10-18"},{"lineNumber":69,"author":{"gitId":"xkisxk"},"content":"        System.out.println(\"Starting review...\");","lastModifiedDate":"2021-10-18"},{"lineNumber":70,"author":{"gitId":"xkisxk"},"content":"        System.out.println(\"Which deck do you want to review?\");","lastModifiedDate":"2021-10-21"},{"lineNumber":71,"author":{"gitId":"xkisxk"},"content":"        System.out.print(\"Input an integer (or \\\"all\\\" to review all decks): \");","lastModifiedDate":"2021-10-21"},{"lineNumber":72,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":73,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":74,"author":{"gitId":"xkisxk"},"content":"    public void printReviewCard() {","lastModifiedDate":"2021-10-18"},{"lineNumber":75,"author":{"gitId":"xkisxk"},"content":"        System.out.println(\"Reviewing all low scoring cards\");","lastModifiedDate":"2021-10-18"},{"lineNumber":76,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":77,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":78,"author":{"gitId":"xkisxk"},"content":"    public void printTest(int index, AnswerList answerList) {","lastModifiedDate":"2021-10-19"},{"lineNumber":79,"author":{"gitId":"xkisxk"},"content":"        int score \u003d answerList.getUserScore();","lastModifiedDate":"2021-10-21"},{"lineNumber":80,"author":{"gitId":"xkisxk"},"content":"        int totalScore \u003d answerList.getSize();","lastModifiedDate":"2021-10-19"},{"lineNumber":81,"author":{"gitId":"xkisxk"},"content":"        System.out.println(","lastModifiedDate":"2021-10-19"},{"lineNumber":82,"author":{"gitId":"xkisxk"},"content":"                \"Score for test \" + index + \" \" + answerList.getDeck().getName()","lastModifiedDate":"2021-10-21"},{"lineNumber":83,"author":{"gitId":"xkisxk"},"content":"                        + \" \" + score + \"/\" + totalScore","lastModifiedDate":"2021-10-19"},{"lineNumber":84,"author":{"gitId":"xkisxk"},"content":"                        + \" \" + (double) score / totalScore * 100 + \"%\");","lastModifiedDate":"2021-10-21"},{"lineNumber":85,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":86,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":87,"author":{"gitId":"xkisxk"},"content":"    public void printScore(int index, int score, int totalScore) {","lastModifiedDate":"2021-10-19"},{"lineNumber":88,"author":{"gitId":"xkisxk"},"content":"        System.out.println(\"You scored \" + score + \" out of \" + totalScore + \" for test \" + (index + 1));","lastModifiedDate":"2021-10-19"},{"lineNumber":89,"author":{"gitId":"xkisxk"},"content":"        System.out.println(\"That is \" + (double) score / totalScore * 100 + \"%!\");","lastModifiedDate":"2021-10-21"},{"lineNumber":90,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":91,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":92,"author":{"gitId":"xkisxk"},"content":"    public void printScoreWithCard(FlashCard card) {","lastModifiedDate":"2021-10-19"},{"lineNumber":93,"author":{"gitId":"xkisxk"},"content":"        card.viewFlashCard();","lastModifiedDate":"2021-10-19"},{"lineNumber":94,"author":{"gitId":"xkisxk"},"content":"        System.out.println(\"Score: \" + card.getUserScore() + \" out of \" + card.getTotalScore());","lastModifiedDate":"2021-10-19"},{"lineNumber":95,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":96,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":97,"author":{"gitId":"xkisxk"},"content":"    public void printCorrectAnsMessage() {","lastModifiedDate":"2021-10-17"},{"lineNumber":98,"author":{"gitId":"xkisxk"},"content":"        System.out.println(\"Well done! You got this question correct\");","lastModifiedDate":"2021-10-17"},{"lineNumber":99,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":100,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":101,"author":{"gitId":"xkisxk"},"content":"    public void printWrongAnsMessage() {","lastModifiedDate":"2021-10-17"},{"lineNumber":102,"author":{"gitId":"xkisxk"},"content":"        System.out.println(\"You got this question wrong! Take note of the correct answer!\");","lastModifiedDate":"2021-10-17"},{"lineNumber":103,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":104,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":105,"author":{"gitId":"xkisxk"},"content":"    public void printAnswerEmptyError() {","lastModifiedDate":"2021-10-17"},{"lineNumber":106,"author":{"gitId":"xkisxk"},"content":"        System.out.println(\"Remember to provide an answer next time! Don\u0027t give up!\");","lastModifiedDate":"2021-10-17"},{"lineNumber":107,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":108,"author":{"gitId":"xkisxk"},"content":"}","lastModifiedDate":"2021-10-17"}],"authorContributionMap":{"xkisxk":108}},{"path":"src/test/java/seedu/duke/AnswerListTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"xkisxk"},"content":"package seedu.duke;","lastModifiedDate":"2021-10-18"},{"lineNumber":2,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":3,"author":{"gitId":"xkisxk"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-18"},{"lineNumber":4,"author":{"gitId":"xkisxk"},"content":"import seedu.duke.flashcard.Deck;","lastModifiedDate":"2021-10-18"},{"lineNumber":5,"author":{"gitId":"xkisxk"},"content":"import seedu.duke.testing.AnswerList;","lastModifiedDate":"2021-10-18"},{"lineNumber":6,"author":{"gitId":"xkisxk"},"content":"import seedu.duke.testing.TestManager;","lastModifiedDate":"2021-10-21"},{"lineNumber":7,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":8,"author":{"gitId":"xkisxk"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-18"},{"lineNumber":9,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":10,"author":{"gitId":"xkisxk"},"content":"public class AnswerListTest {","lastModifiedDate":"2021-10-18"},{"lineNumber":11,"author":{"gitId":"xkisxk"},"content":"    @Test","lastModifiedDate":"2021-10-18"},{"lineNumber":12,"author":{"gitId":"xkisxk"},"content":"    public void getScore_noAnswers_expectZero() {","lastModifiedDate":"2021-10-18"},{"lineNumber":13,"author":{"gitId":"xkisxk"},"content":"        Deck deck \u003d new Deck();","lastModifiedDate":"2021-10-18"},{"lineNumber":14,"author":{"gitId":"xkisxk"},"content":"        AnswerList answerList \u003d new AnswerList(deck);","lastModifiedDate":"2021-10-18"},{"lineNumber":15,"author":{"gitId":"xkisxk"},"content":"        assertEquals(0, answerList.getUserScore());","lastModifiedDate":"2021-10-21"},{"lineNumber":16,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":17,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":18,"author":{"gitId":"xkisxk"},"content":"    @Test","lastModifiedDate":"2021-10-18"},{"lineNumber":19,"author":{"gitId":"xkisxk"},"content":"    public void getScore_oneCorrectAnswer_expectOne() {","lastModifiedDate":"2021-10-18"},{"lineNumber":20,"author":{"gitId":"xkisxk"},"content":"        Deck deck \u003d new Deck();","lastModifiedDate":"2021-10-18"},{"lineNumber":21,"author":{"gitId":"xkisxk"},"content":"        deck.addFlashCard(\"card\", \"card\");","lastModifiedDate":"2021-10-18"},{"lineNumber":22,"author":{"gitId":"xkisxk"},"content":"        AnswerList answerList \u003d new AnswerList(deck);","lastModifiedDate":"2021-10-18"},{"lineNumber":23,"author":{"gitId":"xkisxk"},"content":"        answerList.addAnswer(\"card\", 1);","lastModifiedDate":"2021-10-18"},{"lineNumber":24,"author":{"gitId":"xkisxk"},"content":"        TestManager.markTest(answerList);","lastModifiedDate":"2021-10-21"},{"lineNumber":25,"author":{"gitId":"xkisxk"},"content":"        assertEquals(1, answerList.getUserScore());","lastModifiedDate":"2021-10-21"},{"lineNumber":26,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":27,"author":{"gitId":"xkisxk"},"content":"}","lastModifiedDate":"2021-10-18"}],"authorContributionMap":{"xkisxk":27}},{"path":"src/test/java/seedu/duke/AnswerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"xRossKoh"},"content":"package seedu.duke;","lastModifiedDate":"2021-10-08"},{"lineNumber":2,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":3,"author":{"gitId":"xRossKoh"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-08"},{"lineNumber":4,"author":{"gitId":"xkisxk"},"content":"import seedu.duke.testing.Answer;","lastModifiedDate":"2021-10-17"},{"lineNumber":5,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":6,"author":{"gitId":"xRossKoh"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-08"},{"lineNumber":7,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":8,"author":{"gitId":"xRossKoh"},"content":"public class AnswerTest {","lastModifiedDate":"2021-10-08"},{"lineNumber":9,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":10,"author":{"gitId":"xRossKoh"},"content":"    @Test","lastModifiedDate":"2021-10-08"},{"lineNumber":11,"author":{"gitId":"xRossKoh"},"content":"    public void testGetAnswer() {","lastModifiedDate":"2021-10-08"},{"lineNumber":12,"author":{"gitId":"xRossKoh"},"content":"        assertEquals(\"testAnswer\",","lastModifiedDate":"2021-10-08"},{"lineNumber":13,"author":{"gitId":"xRossKoh"},"content":"                new Answer(\"testAnswer\", 1).getAnswer());","lastModifiedDate":"2021-10-08"},{"lineNumber":14,"author":{"gitId":"xRossKoh"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":15,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":16,"author":{"gitId":"xRossKoh"},"content":"}","lastModifiedDate":"2021-10-08"}],"authorContributionMap":{"xRossKoh":15,"xkisxk":1}},{"path":"src/test/java/seedu/duke/DeckTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"JWweiyin"},"content":"package seedu.duke;","lastModifiedDate":"2021-10-02"},{"lineNumber":2,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-02"},{"lineNumber":3,"author":{"gitId":"JWweiyin"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-02"},{"lineNumber":4,"author":{"gitId":"xkisxk"},"content":"import seedu.duke.exceptions.CardLiException;","lastModifiedDate":"2021-10-04"},{"lineNumber":5,"author":{"gitId":"JWweiyin"},"content":"import seedu.duke.exceptions.FieldEmptyException;","lastModifiedDate":"2021-10-02"},{"lineNumber":6,"author":{"gitId":"JWweiyin"},"content":"import seedu.duke.exceptions.NoSlashException;","lastModifiedDate":"2021-10-02"},{"lineNumber":7,"author":{"gitId":"xkisxk"},"content":"import seedu.duke.flashcard.Deck;","lastModifiedDate":"2021-10-17"},{"lineNumber":8,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-02"},{"lineNumber":9,"author":{"gitId":"xkisxk"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2021-10-04"},{"lineNumber":10,"author":{"gitId":"ThaddeusLim99"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-05"},{"lineNumber":11,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-02"},{"lineNumber":12,"author":{"gitId":"xkisxk"},"content":"class DeckTest {","lastModifiedDate":"2021-10-16"},{"lineNumber":13,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-02"},{"lineNumber":14,"author":{"gitId":"JWweiyin"},"content":"    @Test","lastModifiedDate":"2021-10-02"},{"lineNumber":15,"author":{"gitId":"JWweiyin"},"content":"    public void trimStrings_hasFrontHasBack_expectTwoParts() throws NoSlashException, FieldEmptyException {","lastModifiedDate":"2021-10-02"},{"lineNumber":16,"author":{"gitId":"xkisxk"},"content":"        Deck fcm \u003d new Deck();","lastModifiedDate":"2021-10-16"},{"lineNumber":17,"author":{"gitId":"JWweiyin"},"content":"        String input \u003d \"add good morning /bac ohayou\";","lastModifiedDate":"2021-10-16"},{"lineNumber":18,"author":{"gitId":"JWweiyin"},"content":"        assertEquals(2, fcm.trimStrings(input).length);","lastModifiedDate":"2021-10-16"},{"lineNumber":19,"author":{"gitId":"JWweiyin"},"content":"    }","lastModifiedDate":"2021-10-02"},{"lineNumber":20,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-02"},{"lineNumber":21,"author":{"gitId":"JWweiyin"},"content":"    @Test","lastModifiedDate":"2021-10-02"},{"lineNumber":22,"author":{"gitId":"JWweiyin"},"content":"    public void trimStrings_hasNoSlash_expectNoSlashException() {","lastModifiedDate":"2021-10-02"},{"lineNumber":23,"author":{"gitId":"xkisxk"},"content":"        Deck fcm \u003d new Deck();","lastModifiedDate":"2021-10-16"},{"lineNumber":24,"author":{"gitId":"JWweiyin"},"content":"        String input \u003d \"add good morning ohayou\";","lastModifiedDate":"2021-10-02"},{"lineNumber":25,"author":{"gitId":"JWweiyin"},"content":"        assertThrows(NoSlashException.class, () -\u003e fcm.trimStrings(input));","lastModifiedDate":"2021-10-16"},{"lineNumber":26,"author":{"gitId":"JWweiyin"},"content":"    }","lastModifiedDate":"2021-10-02"},{"lineNumber":27,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-02"},{"lineNumber":28,"author":{"gitId":"JWweiyin"},"content":"    @Test","lastModifiedDate":"2021-10-02"},{"lineNumber":29,"author":{"gitId":"JWweiyin"},"content":"    public void trimStrings_emptyFront_expectNoSlashException()  {","lastModifiedDate":"2021-10-16"},{"lineNumber":30,"author":{"gitId":"xkisxk"},"content":"        Deck fcm \u003d new Deck();","lastModifiedDate":"2021-10-16"},{"lineNumber":31,"author":{"gitId":"JWweiyin"},"content":"        String input \u003d \"/bac ohayou\";","lastModifiedDate":"2021-10-16"},{"lineNumber":32,"author":{"gitId":"JWweiyin"},"content":"        assertThrows(NoSlashException.class, () -\u003e fcm.trimStrings(input));","lastModifiedDate":"2021-10-16"},{"lineNumber":33,"author":{"gitId":"JWweiyin"},"content":"    }","lastModifiedDate":"2021-10-02"},{"lineNumber":34,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-02"},{"lineNumber":35,"author":{"gitId":"JWweiyin"},"content":"    @Test","lastModifiedDate":"2021-10-02"},{"lineNumber":36,"author":{"gitId":"JWweiyin"},"content":"    public void trimStrings_emptyBack_expectFieldEmptyException() {","lastModifiedDate":"2021-10-02"},{"lineNumber":37,"author":{"gitId":"xkisxk"},"content":"        Deck fcm \u003d new Deck();","lastModifiedDate":"2021-10-16"},{"lineNumber":38,"author":{"gitId":"JWweiyin"},"content":"        String input \u003d \"good morning /bac\";","lastModifiedDate":"2021-10-16"},{"lineNumber":39,"author":{"gitId":"JWweiyin"},"content":"        assertThrows(FieldEmptyException.class, () -\u003e fcm.trimStrings(input));","lastModifiedDate":"2021-10-16"},{"lineNumber":40,"author":{"gitId":"JWweiyin"},"content":"    }","lastModifiedDate":"2021-10-02"},{"lineNumber":41,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-02"},{"lineNumber":42,"author":{"gitId":"xkisxk"},"content":"    @Test","lastModifiedDate":"2021-10-02"},{"lineNumber":43,"author":{"gitId":"xkisxk"},"content":"    public void deleteFlashCard_cardNotExist_expectCardLiException() {","lastModifiedDate":"2021-10-04"},{"lineNumber":44,"author":{"gitId":"xkisxk"},"content":"        Deck fcm \u003d new Deck();","lastModifiedDate":"2021-10-16"},{"lineNumber":45,"author":{"gitId":"JWweiyin"},"content":"        String input \u003d \"abcdef\";","lastModifiedDate":"2021-10-16"},{"lineNumber":46,"author":{"gitId":"JWweiyin"},"content":"        assertThrows(CardLiException.class, () -\u003e fcm.deleteFlashCard(input));","lastModifiedDate":"2021-10-16"},{"lineNumber":47,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-02"},{"lineNumber":48,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":49,"author":{"gitId":"JWweiyin"},"content":"    @Test","lastModifiedDate":"2021-10-20"},{"lineNumber":50,"author":{"gitId":"JWweiyin"},"content":"    public void deleteFlashCard_provideDescription_expectDelete() throws CardLiException {","lastModifiedDate":"2021-10-20"},{"lineNumber":51,"author":{"gitId":"JWweiyin"},"content":"        Deck fcm \u003d new Deck();","lastModifiedDate":"2021-10-20"},{"lineNumber":52,"author":{"gitId":"JWweiyin"},"content":"        String[] firstCard \u003d {\"illness\", \"byouki\"};","lastModifiedDate":"2021-10-20"},{"lineNumber":53,"author":{"gitId":"JWweiyin"},"content":"        String[] secondCard \u003d {\"to lose\", \"nakushimasu\"};","lastModifiedDate":"2021-10-20"},{"lineNumber":54,"author":{"gitId":"JWweiyin"},"content":"        fcm.prepareToAddFlashCard(firstCard);","lastModifiedDate":"2021-10-20"},{"lineNumber":55,"author":{"gitId":"JWweiyin"},"content":"        fcm.prepareToAddFlashCard(secondCard);","lastModifiedDate":"2021-10-20"},{"lineNumber":56,"author":{"gitId":"JWweiyin"},"content":"        fcm.deleteFlashCard(\"illness\");","lastModifiedDate":"2021-10-20"},{"lineNumber":57,"author":{"gitId":"JWweiyin"},"content":"        fcm.viewAllFlashCards();","lastModifiedDate":"2021-10-20"},{"lineNumber":58,"author":{"gitId":"xkisxk"},"content":"        assertEquals(1, fcm.getCards().size());","lastModifiedDate":"2021-10-21"},{"lineNumber":59,"author":{"gitId":"JWweiyin"},"content":"        fcm.deleteFlashCard(\"to lose\");","lastModifiedDate":"2021-10-20"},{"lineNumber":60,"author":{"gitId":"JWweiyin"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":61,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":62,"author":{"gitId":"JWweiyin"},"content":"    @Test","lastModifiedDate":"2021-10-20"},{"lineNumber":63,"author":{"gitId":"JWweiyin"},"content":"    public void deleteFlashCard_provideIndex_expectDelete() throws CardLiException {","lastModifiedDate":"2021-10-20"},{"lineNumber":64,"author":{"gitId":"JWweiyin"},"content":"        Deck fcm \u003d new Deck();","lastModifiedDate":"2021-10-20"},{"lineNumber":65,"author":{"gitId":"JWweiyin"},"content":"        String[] firstCard \u003d {\"illness\", \"byouki\"};","lastModifiedDate":"2021-10-20"},{"lineNumber":66,"author":{"gitId":"JWweiyin"},"content":"        String[] secondCard \u003d {\"to lose\", \"nakushimasu\"};","lastModifiedDate":"2021-10-20"},{"lineNumber":67,"author":{"gitId":"JWweiyin"},"content":"        fcm.prepareToAddFlashCard(firstCard);","lastModifiedDate":"2021-10-20"},{"lineNumber":68,"author":{"gitId":"JWweiyin"},"content":"        fcm.prepareToAddFlashCard(secondCard);","lastModifiedDate":"2021-10-20"},{"lineNumber":69,"author":{"gitId":"JWweiyin"},"content":"        fcm.deleteFlashCard(\"1\");","lastModifiedDate":"2021-10-20"},{"lineNumber":70,"author":{"gitId":"JWweiyin"},"content":"        fcm.viewAllFlashCards();","lastModifiedDate":"2021-10-20"},{"lineNumber":71,"author":{"gitId":"xkisxk"},"content":"        assertEquals(1, fcm.getCards().size());","lastModifiedDate":"2021-10-21"},{"lineNumber":72,"author":{"gitId":"JWweiyin"},"content":"        fcm.deleteFlashCard(\"1\");","lastModifiedDate":"2021-10-20"},{"lineNumber":73,"author":{"gitId":"JWweiyin"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":74,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":75,"author":{"gitId":"JWweiyin"},"content":"    @Test","lastModifiedDate":"2021-10-20"},{"lineNumber":76,"author":{"gitId":"JWweiyin"},"content":"    public void deleteFlashCard_provideInvalidIndex_expectCardLiException() throws CardLiException {","lastModifiedDate":"2021-10-20"},{"lineNumber":77,"author":{"gitId":"JWweiyin"},"content":"        Deck fcm \u003d new Deck();","lastModifiedDate":"2021-10-20"},{"lineNumber":78,"author":{"gitId":"JWweiyin"},"content":"        String[] firstCard \u003d {\"illness\", \"byouki\"};","lastModifiedDate":"2021-10-20"},{"lineNumber":79,"author":{"gitId":"JWweiyin"},"content":"        String[] secondCard \u003d {\"to lose\", \"nakushimasu\"};","lastModifiedDate":"2021-10-20"},{"lineNumber":80,"author":{"gitId":"JWweiyin"},"content":"        fcm.prepareToAddFlashCard(firstCard);","lastModifiedDate":"2021-10-20"},{"lineNumber":81,"author":{"gitId":"JWweiyin"},"content":"        fcm.prepareToAddFlashCard(secondCard);","lastModifiedDate":"2021-10-20"},{"lineNumber":82,"author":{"gitId":"JWweiyin"},"content":"        fcm.viewAllFlashCards();","lastModifiedDate":"2021-10-20"},{"lineNumber":83,"author":{"gitId":"JWweiyin"},"content":"        assertThrows(CardLiException.class, () -\u003e fcm.deleteFlashCard(\"6\"));","lastModifiedDate":"2021-10-20"},{"lineNumber":84,"author":{"gitId":"JWweiyin"},"content":"        fcm.deleteFlashCard(\"1\");","lastModifiedDate":"2021-10-20"},{"lineNumber":85,"author":{"gitId":"JWweiyin"},"content":"        fcm.deleteFlashCard(\"1\");","lastModifiedDate":"2021-10-20"},{"lineNumber":86,"author":{"gitId":"JWweiyin"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":87,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":88,"author":{"gitId":"JWweiyin"},"content":"    @Test","lastModifiedDate":"2021-10-20"},{"lineNumber":89,"author":{"gitId":"JWweiyin"},"content":"    public void deleteFlashCard_provideNegativeIndex_expectCardLiException() throws CardLiException {","lastModifiedDate":"2021-10-20"},{"lineNumber":90,"author":{"gitId":"JWweiyin"},"content":"        Deck fcm \u003d new Deck();","lastModifiedDate":"2021-10-20"},{"lineNumber":91,"author":{"gitId":"JWweiyin"},"content":"        String[] firstCard \u003d {\"illness\", \"byouki\"};","lastModifiedDate":"2021-10-20"},{"lineNumber":92,"author":{"gitId":"JWweiyin"},"content":"        String[] secondCard \u003d {\"to lose\", \"nakushimasu\"};","lastModifiedDate":"2021-10-20"},{"lineNumber":93,"author":{"gitId":"JWweiyin"},"content":"        fcm.prepareToAddFlashCard(firstCard);","lastModifiedDate":"2021-10-20"},{"lineNumber":94,"author":{"gitId":"JWweiyin"},"content":"        fcm.prepareToAddFlashCard(secondCard);","lastModifiedDate":"2021-10-20"},{"lineNumber":95,"author":{"gitId":"JWweiyin"},"content":"        fcm.viewAllFlashCards();","lastModifiedDate":"2021-10-20"},{"lineNumber":96,"author":{"gitId":"JWweiyin"},"content":"        assertThrows(CardLiException.class, () -\u003e fcm.deleteFlashCard(\"0\"));","lastModifiedDate":"2021-10-20"},{"lineNumber":97,"author":{"gitId":"JWweiyin"},"content":"        fcm.deleteFlashCard(\"1\");","lastModifiedDate":"2021-10-20"},{"lineNumber":98,"author":{"gitId":"JWweiyin"},"content":"        fcm.deleteFlashCard(\"1\");","lastModifiedDate":"2021-10-20"},{"lineNumber":99,"author":{"gitId":"JWweiyin"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":100,"author":{"gitId":"JWweiyin"},"content":"}","lastModifiedDate":"2021-10-02"}],"authorContributionMap":{"JWweiyin":85,"ThaddeusLim99":1,"xkisxk":14}},{"path":"src/test/java/seedu/duke/FlashCardTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"xRossKoh"},"content":"package seedu.duke;","lastModifiedDate":"2021-10-08"},{"lineNumber":2,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":3,"author":{"gitId":"xRossKoh"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-08"},{"lineNumber":4,"author":{"gitId":"xkisxk"},"content":"import seedu.duke.flashcard.FlashCard;","lastModifiedDate":"2021-10-17"},{"lineNumber":5,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":6,"author":{"gitId":"xRossKoh"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-08"},{"lineNumber":7,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":8,"author":{"gitId":"xRossKoh"},"content":"public class FlashCardTest {","lastModifiedDate":"2021-10-08"},{"lineNumber":9,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":10,"author":{"gitId":"xRossKoh"},"content":"    private FlashCard flashCard \u003d new FlashCard(\"testFront\", \"testBack\");","lastModifiedDate":"2021-10-08"},{"lineNumber":11,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":12,"author":{"gitId":"xRossKoh"},"content":"    @Test","lastModifiedDate":"2021-10-08"},{"lineNumber":13,"author":{"gitId":"xRossKoh"},"content":"    public void testGetFront() {","lastModifiedDate":"2021-10-08"},{"lineNumber":14,"author":{"gitId":"xRossKoh"},"content":"        assertEquals(\"testFront\", flashCard.getFront());","lastModifiedDate":"2021-10-08"},{"lineNumber":15,"author":{"gitId":"xRossKoh"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":16,"author":{"gitId":"xRossKoh"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":17,"author":{"gitId":"xRossKoh"},"content":"    @Test","lastModifiedDate":"2021-10-08"},{"lineNumber":18,"author":{"gitId":"xRossKoh"},"content":"    public void testGetBack() {","lastModifiedDate":"2021-10-08"},{"lineNumber":19,"author":{"gitId":"xRossKoh"},"content":"        assertEquals(\"testBack\", flashCard.getBack());","lastModifiedDate":"2021-10-08"},{"lineNumber":20,"author":{"gitId":"xRossKoh"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":21,"author":{"gitId":"xRossKoh"},"content":"}","lastModifiedDate":"2021-10-08"}],"authorContributionMap":{"xRossKoh":20,"xkisxk":1}},{"path":"src/test/java/seedu/duke/ParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"astralum"},"content":"package seedu.duke;","lastModifiedDate":"2021-10-14"},{"lineNumber":2,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":3,"author":{"gitId":"astralum"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-14"},{"lineNumber":4,"author":{"gitId":"ThaddeusLim99"},"content":"import seedu.duke.exceptions.CardLiException;","lastModifiedDate":"2021-10-17"},{"lineNumber":5,"author":{"gitId":"ThaddeusLim99"},"content":"import seedu.duke.exceptions.FieldEmptyException;","lastModifiedDate":"2021-10-17"},{"lineNumber":6,"author":{"gitId":"xkisxk"},"content":"import seedu.duke.parser.Parser;","lastModifiedDate":"2021-10-16"},{"lineNumber":7,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":8,"author":{"gitId":"astralum"},"content":"import java.io.ByteArrayInputStream;","lastModifiedDate":"2021-10-14"},{"lineNumber":9,"author":{"gitId":"astralum"},"content":"import java.io.ByteArrayOutputStream;","lastModifiedDate":"2021-10-14"},{"lineNumber":10,"author":{"gitId":"astralum"},"content":"import java.io.InputStream;","lastModifiedDate":"2021-10-14"},{"lineNumber":11,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":12,"author":{"gitId":"astralum"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-14"},{"lineNumber":13,"author":{"gitId":"ThaddeusLim99"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2021-10-17"},{"lineNumber":14,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":15,"author":{"gitId":"astralum"},"content":"public class ParserTest {","lastModifiedDate":"2021-10-14"},{"lineNumber":16,"author":{"gitId":"astralum"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":17,"author":{"gitId":"astralum"},"content":"    @Test","lastModifiedDate":"2021-10-14"},{"lineNumber":18,"author":{"gitId":"xkisxk"},"content":"    public void parseCommand_hasFrontWhitespace_success() {","lastModifiedDate":"2021-10-17"},{"lineNumber":19,"author":{"gitId":"astralum"},"content":"        String input \u003d \" bye\\n\";","lastModifiedDate":"2021-10-14"},{"lineNumber":20,"author":{"gitId":"astralum"},"content":"        InputStream in \u003d new ByteArrayInputStream(input.getBytes());","lastModifiedDate":"2021-10-14"},{"lineNumber":21,"author":{"gitId":"astralum"},"content":"        ByteArrayOutputStream out \u003d new ByteArrayOutputStream();","lastModifiedDate":"2021-10-14"},{"lineNumber":22,"author":{"gitId":"astralum"},"content":"        System.setIn(in);","lastModifiedDate":"2021-10-14"},{"lineNumber":23,"author":{"gitId":"ThaddeusLim99"},"content":"        try {","lastModifiedDate":"2021-10-17"},{"lineNumber":24,"author":{"gitId":"xkisxk"},"content":"            Parser.parseCommand(input);","lastModifiedDate":"2021-10-17"},{"lineNumber":25,"author":{"gitId":"ThaddeusLim99"},"content":"        } catch (CardLiException e) {","lastModifiedDate":"2021-10-17"},{"lineNumber":26,"author":{"gitId":"ThaddeusLim99"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-10-17"},{"lineNumber":27,"author":{"gitId":"ThaddeusLim99"},"content":"        }","lastModifiedDate":"2021-10-17"},{"lineNumber":28,"author":{"gitId":"astralum"},"content":"        assertEquals(\"\", out.toString());","lastModifiedDate":"2021-10-14"},{"lineNumber":29,"author":{"gitId":"astralum"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":30,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":31,"author":{"gitId":"ThaddeusLim99"},"content":"    @Test","lastModifiedDate":"2021-10-17"},{"lineNumber":32,"author":{"gitId":"ThaddeusLim99"},"content":"    public void parseEditCardCommand_noArguments_expectFieldEmptyException() {","lastModifiedDate":"2021-10-17"},{"lineNumber":33,"author":{"gitId":"ThaddeusLim99"},"content":"        String input \u003d \"editcard \";","lastModifiedDate":"2021-10-17"},{"lineNumber":34,"author":{"gitId":"ThaddeusLim99"},"content":"        assertThrows(FieldEmptyException.class, () -\u003e Parser.parseEditCardCommand(input));","lastModifiedDate":"2021-10-17"},{"lineNumber":35,"author":{"gitId":"ThaddeusLim99"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":36,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":37,"author":{"gitId":"ThaddeusLim99"},"content":"    @Test","lastModifiedDate":"2021-10-17"},{"lineNumber":38,"author":{"gitId":"ThaddeusLim99"},"content":"    public void parseEditDeckCommand_noArguments_expectFieldEmptyException() {","lastModifiedDate":"2021-10-17"},{"lineNumber":39,"author":{"gitId":"ThaddeusLim99"},"content":"        String input \u003d \"editdeck \";","lastModifiedDate":"2021-10-17"},{"lineNumber":40,"author":{"gitId":"ThaddeusLim99"},"content":"        assertThrows(FieldEmptyException.class, () -\u003e Parser.parseEditDeckCommand(input));","lastModifiedDate":"2021-10-17"},{"lineNumber":41,"author":{"gitId":"ThaddeusLim99"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":42,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":43,"author":{"gitId":"ThaddeusLim99"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":44,"author":{"gitId":"JWweiyin"},"content":"    @Test","lastModifiedDate":"2021-10-16"},{"lineNumber":45,"author":{"gitId":"JWweiyin"},"content":"    public void removeCommandWord_provideValidInputForAdd_success() {","lastModifiedDate":"2021-10-16"},{"lineNumber":46,"author":{"gitId":"JWweiyin"},"content":"        String input \u003d \"add to pay /def haraimasu\";","lastModifiedDate":"2021-10-16"},{"lineNumber":47,"author":{"gitId":"xkisxk"},"content":"        assertEquals(\"to pay /def haraimasu\", Parser.removeCommandWord(input, 3));","lastModifiedDate":"2021-10-17"},{"lineNumber":48,"author":{"gitId":"JWweiyin"},"content":"    }","lastModifiedDate":"2021-10-16"},{"lineNumber":49,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":50,"author":{"gitId":"JWweiyin"},"content":"    @Test","lastModifiedDate":"2021-10-16"},{"lineNumber":51,"author":{"gitId":"JWweiyin"},"content":"    public void removeCommandWord_provideValidInputForDelete_success() {","lastModifiedDate":"2021-10-16"},{"lineNumber":52,"author":{"gitId":"JWweiyin"},"content":"        String input \u003d \"delete 1\";","lastModifiedDate":"2021-10-16"},{"lineNumber":53,"author":{"gitId":"xkisxk"},"content":"        assertEquals(\"1\", Parser.removeCommandWord(input, 6));","lastModifiedDate":"2021-10-17"},{"lineNumber":54,"author":{"gitId":"JWweiyin"},"content":"    }","lastModifiedDate":"2021-10-16"},{"lineNumber":55,"author":{"gitId":"JWweiyin"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":56,"author":{"gitId":"astralum"},"content":"}","lastModifiedDate":"2021-10-14"}],"authorContributionMap":{"JWweiyin":11,"astralum":20,"ThaddeusLim99":20,"xkisxk":5}},{"path":"src/test/java/seedu/duke/TestParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"xkisxk"},"content":"package seedu.duke;","lastModifiedDate":"2021-10-18"},{"lineNumber":2,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":3,"author":{"gitId":"xkisxk"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-18"},{"lineNumber":4,"author":{"gitId":"xkisxk"},"content":"import seedu.duke.exceptions.FieldEmptyException;","lastModifiedDate":"2021-10-18"},{"lineNumber":5,"author":{"gitId":"xkisxk"},"content":"import seedu.duke.parser.TestParser;","lastModifiedDate":"2021-10-18"},{"lineNumber":6,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":7,"author":{"gitId":"xkisxk"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2021-10-18"},{"lineNumber":8,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":9,"author":{"gitId":"xkisxk"},"content":"public class TestParserTest {","lastModifiedDate":"2021-10-18"},{"lineNumber":10,"author":{"gitId":"xkisxk"},"content":"    @Test","lastModifiedDate":"2021-10-18"},{"lineNumber":11,"author":{"gitId":"xkisxk"},"content":"    public void parseUserResponse_noInput_expectFieldEmptyException() {","lastModifiedDate":"2021-10-18"},{"lineNumber":12,"author":{"gitId":"xkisxk"},"content":"        String input \u003d \"\";","lastModifiedDate":"2021-10-18"},{"lineNumber":13,"author":{"gitId":"xkisxk"},"content":"        assertThrows(FieldEmptyException.class, () -\u003e TestParser.parseUserResponse(input));","lastModifiedDate":"2021-10-18"},{"lineNumber":14,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":15,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":16,"author":{"gitId":"xkisxk"},"content":"    @Test","lastModifiedDate":"2021-10-18"},{"lineNumber":17,"author":{"gitId":"xkisxk"},"content":"    public void toInt_invalidInput_expectNumberFormatException() {","lastModifiedDate":"2021-10-18"},{"lineNumber":18,"author":{"gitId":"xkisxk"},"content":"        String input \u003d \"a\";","lastModifiedDate":"2021-10-18"},{"lineNumber":19,"author":{"gitId":"xkisxk"},"content":"        assertThrows(NumberFormatException.class, () -\u003e TestParser.toInt(input));","lastModifiedDate":"2021-10-18"},{"lineNumber":20,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":21,"author":{"gitId":"xkisxk"},"content":"}","lastModifiedDate":"2021-10-18"}],"authorContributionMap":{"xkisxk":21}},{"path":"src/test/java/seedu/duke/flashcard/DeckManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"xkisxk"},"content":"package seedu.duke.flashcard;","lastModifiedDate":"2021-10-21"},{"lineNumber":2,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":3,"author":{"gitId":"xkisxk"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-21"},{"lineNumber":4,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":5,"author":{"gitId":"xkisxk"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-21"},{"lineNumber":6,"author":{"gitId":"xkisxk"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-21"},{"lineNumber":7,"author":{"gitId":"xkisxk"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-21"},{"lineNumber":8,"author":{"gitId":"xkisxk"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2021-10-21"},{"lineNumber":9,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":10,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":11,"author":{"gitId":"xkisxk"},"content":"class DeckManagerTest {","lastModifiedDate":"2021-10-21"},{"lineNumber":12,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":13,"author":{"gitId":"xkisxk"},"content":"    @Test","lastModifiedDate":"2021-10-21"},{"lineNumber":14,"author":{"gitId":"xkisxk"},"content":"    void prepareToAddDeck_deckAdded_expectOne() {","lastModifiedDate":"2021-10-21"},{"lineNumber":15,"author":{"gitId":"xkisxk"},"content":"        DeckManager.prepareToAddDeck(\"Test\");","lastModifiedDate":"2021-10-21"},{"lineNumber":16,"author":{"gitId":"xkisxk"},"content":"        assertEquals(1, DeckManager.getDecksSize());","lastModifiedDate":"2021-10-21"},{"lineNumber":17,"author":{"gitId":"xkisxk"},"content":"        DeckManager.deleteDeck(DeckManager.getDeck(0));","lastModifiedDate":"2021-10-21"},{"lineNumber":18,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":19,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":20,"author":{"gitId":"xkisxk"},"content":"    @Test","lastModifiedDate":"2021-10-21"},{"lineNumber":21,"author":{"gitId":"xkisxk"},"content":"    void getTestDeck_indexOutOfBounds_expectIndexOutOfBoundsException() {","lastModifiedDate":"2021-10-21"},{"lineNumber":22,"author":{"gitId":"xkisxk"},"content":"        assertThrows(IndexOutOfBoundsException.class, () -\u003e DeckManager.getTestDeck(1));","lastModifiedDate":"2021-10-21"},{"lineNumber":23,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":24,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":25,"author":{"gitId":"xkisxk"},"content":"    @Test","lastModifiedDate":"2021-10-21"},{"lineNumber":26,"author":{"gitId":"xkisxk"},"content":"    void hasDeck_noDecks_expectFalse() {","lastModifiedDate":"2021-10-21"},{"lineNumber":27,"author":{"gitId":"xkisxk"},"content":"        assertFalse(DeckManager.hasDeck(1));","lastModifiedDate":"2021-10-21"},{"lineNumber":28,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":29,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":30,"author":{"gitId":"xkisxk"},"content":"    @Test","lastModifiedDate":"2021-10-21"},{"lineNumber":31,"author":{"gitId":"xkisxk"},"content":"    void hasDeck_hasDeck_expectTrue() {","lastModifiedDate":"2021-10-21"},{"lineNumber":32,"author":{"gitId":"xkisxk"},"content":"        DeckManager.prepareToAddDeck(\"Test\");","lastModifiedDate":"2021-10-21"},{"lineNumber":33,"author":{"gitId":"xkisxk"},"content":"        assertTrue(DeckManager.hasDeck(0));","lastModifiedDate":"2021-10-21"},{"lineNumber":34,"author":{"gitId":"xkisxk"},"content":"        DeckManager.deleteDeck(DeckManager.getDeck(0));","lastModifiedDate":"2021-10-21"},{"lineNumber":35,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":36,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":37,"author":{"gitId":"xkisxk"},"content":"    @Test","lastModifiedDate":"2021-10-21"},{"lineNumber":38,"author":{"gitId":"xkisxk"},"content":"    void getTestDeck_twoCards_expectTwoCards() {","lastModifiedDate":"2021-10-21"},{"lineNumber":39,"author":{"gitId":"xkisxk"},"content":"        DeckManager.prepareToAddDeck(\"Test Deck 1\");","lastModifiedDate":"2021-10-21"},{"lineNumber":40,"author":{"gitId":"xkisxk"},"content":"        DeckManager.prepareToAddDeck(\"Test Deck 2\");","lastModifiedDate":"2021-10-21"},{"lineNumber":41,"author":{"gitId":"xkisxk"},"content":"        DeckManager.getDeck(0).addFlashCard(\"test card 1\", \"test card 1\");","lastModifiedDate":"2021-10-21"},{"lineNumber":42,"author":{"gitId":"xkisxk"},"content":"        DeckManager.getDeck(1).addFlashCard(\"test card 2\", \"test card 2\");","lastModifiedDate":"2021-10-21"},{"lineNumber":43,"author":{"gitId":"xkisxk"},"content":"        assertEquals(2, DeckManager.getTestDeck(-1).getDeckSize());","lastModifiedDate":"2021-10-21"},{"lineNumber":44,"author":{"gitId":"xkisxk"},"content":"        DeckManager.deleteDeck(DeckManager.getDeck(0));","lastModifiedDate":"2021-10-21"},{"lineNumber":45,"author":{"gitId":"xkisxk"},"content":"        DeckManager.deleteDeck(DeckManager.getDeck(0));","lastModifiedDate":"2021-10-21"},{"lineNumber":46,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":47,"author":{"gitId":"xkisxk"},"content":"}","lastModifiedDate":"2021-10-21"}],"authorContributionMap":{"xkisxk":47}},{"path":"src/test/java/seedu/duke/testing/TestManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"xkisxk"},"content":"package seedu.duke.testing;","lastModifiedDate":"2021-10-21"},{"lineNumber":2,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":3,"author":{"gitId":"xkisxk"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-21"},{"lineNumber":4,"author":{"gitId":"xkisxk"},"content":"import seedu.duke.exceptions.EmptyDeckException;","lastModifiedDate":"2021-10-21"},{"lineNumber":5,"author":{"gitId":"xkisxk"},"content":"import seedu.duke.flashcard.Deck;","lastModifiedDate":"2021-10-21"},{"lineNumber":6,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":7,"author":{"gitId":"xkisxk"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2021-10-21"},{"lineNumber":8,"author":{"gitId":"xkisxk"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":9,"author":{"gitId":"xkisxk"},"content":"class TestManagerTest {","lastModifiedDate":"2021-10-21"},{"lineNumber":10,"author":{"gitId":"xkisxk"},"content":"    @Test","lastModifiedDate":"2021-10-21"},{"lineNumber":11,"author":{"gitId":"xkisxk"},"content":"    void testAllCardsShuffled_emptyDeck_expectEmptyDeckException() {","lastModifiedDate":"2021-10-21"},{"lineNumber":12,"author":{"gitId":"xkisxk"},"content":"        Deck deck \u003d new Deck(\"Test\");","lastModifiedDate":"2021-10-21"},{"lineNumber":13,"author":{"gitId":"xkisxk"},"content":"        AnswerList answerList \u003d new AnswerList(deck);","lastModifiedDate":"2021-10-21"},{"lineNumber":14,"author":{"gitId":"xkisxk"},"content":"        assertThrows(EmptyDeckException.class, () -\u003e TestManager.testAllCardsShuffled(answerList));","lastModifiedDate":"2021-10-21"},{"lineNumber":15,"author":{"gitId":"xkisxk"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":16,"author":{"gitId":"xkisxk"},"content":"}","lastModifiedDate":"2021-10-21"}],"authorContributionMap":{"xkisxk":16}}]
